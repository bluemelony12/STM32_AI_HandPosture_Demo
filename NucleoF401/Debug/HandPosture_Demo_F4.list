
HandPosture_Demo_F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00028e28  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001bd10  08028fe0  08028fe0  00029fe0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08044cf0  08044cf0  00046998  2**0
                  CONTENTS
  4 .ARM          00000008  08044cf0  08044cf0  00045cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08044cf8  08044cf8  00046998  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08044cf8  08044cf8  00045cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08044cfc  08044cfc  00045cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000998  20000000  08044d00  00046000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000094f0  20000998  08045698  00046998  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20009e88  08045698  00046e88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00046998  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c1f8  00000000  00000000  000469c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040b0  00000000  00000000  00062bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000550  00000000  00000000  00066c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000006c  00000000  00000000  000671c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c1d7  00000000  00000000  0006722c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d15e  00000000  00000000  00083403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a25f4  00000000  00000000  000a0561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000d6  00000000  00000000  00142b55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007710  00000000  00000000  00142c2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  0014a33c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 000001c0  00000000  00000000  0014a391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000998 	.word	0x20000998
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08028fb0 	.word	0x08028fb0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000099c 	.word	0x2000099c
 80001dc:	08028fb0 	.word	0x08028fb0

080001e0 <Parse_Enable>:

/* Private function definitions ----------------------------------------------*/

/* Parse functions */
static int Parse_Enable(const struct BaseCommand_t *pCmd, const char *Buffer)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b082      	sub	sp, #8
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
 80001e8:	6039      	str	r1, [r7, #0]
	(void) pCmd;
	(void) Buffer;
	/* Start ranging */
	Sensor_StartRanging(&App_Config);
 80001ea:	4809      	ldr	r0, [pc, #36]	@ (8000210 <Parse_Enable+0x30>)
 80001ec:	f000 feb2 	bl	8000f54 <Sensor_StartRanging>
	/* Set application state as ranging */
	App_Config.app_run = true;
 80001f0:	4b07      	ldr	r3, [pc, #28]	@ (8000210 <Parse_Enable+0x30>)
 80001f2:	2201      	movs	r2, #1
 80001f4:	701a      	strb	r2, [r3, #0]
	App_Config.IntrCount = 0;
 80001f6:	4b06      	ldr	r3, [pc, #24]	@ (8000210 <Parse_Enable+0x30>)
 80001f8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80001fc:	461a      	mov	r2, r3
 80001fe:	2300      	movs	r3, #0
 8000200:	f8c2 399c 	str.w	r3, [r2, #2460]	@ 0x99c
	return (0);
 8000204:	2300      	movs	r3, #0
}
 8000206:	4618      	mov	r0, r3
 8000208:	3708      	adds	r7, #8
 800020a:	46bd      	mov	sp, r7
 800020c:	bd80      	pop	{r7, pc}
 800020e:	bf00      	nop
 8000210:	200042ec 	.word	0x200042ec

08000214 <Parse_Disable>:
static int Parse_Disable(const struct BaseCommand_t *pCmd, const char *Buffer)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b082      	sub	sp, #8
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
 800021c:	6039      	str	r1, [r7, #0]
	(void) pCmd;
	(void) Buffer;
	/* Stop the sensor */
	Sensor_StopRanging(&App_Config);
 800021e:	4805      	ldr	r0, [pc, #20]	@ (8000234 <Parse_Disable+0x20>)
 8000220:	f000 ff16 	bl	8001050 <Sensor_StopRanging>
	/* Set application state as stopped */
	App_Config.app_run = false;
 8000224:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <Parse_Disable+0x20>)
 8000226:	2200      	movs	r2, #0
 8000228:	701a      	strb	r2, [r3, #0]
	return (0);
 800022a:	2300      	movs	r3, #0
}
 800022c:	4618      	mov	r0, r3
 800022e:	3708      	adds	r7, #8
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}
 8000234:	200042ec 	.word	0x200042ec

08000238 <SC_HandleCmd>:
 * @brief  Handle a new command
 * @param  Buffer Command buffer
 * @retval 0 if success, -1 otherwise
 */
int SC_HandleCmd(const char *Buffer)
{
 8000238:	b590      	push	{r4, r7, lr}
 800023a:	b087      	sub	sp, #28
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
	int Status = -1;
 8000240:	f04f 33ff 	mov.w	r3, #4294967295
 8000244:	617b      	str	r3, [r7, #20]
	int CmdLen;
	size_t i;

	for (i = 0; i < ARRAY_SIZE(BaseCmd); i++)
 8000246:	2300      	movs	r3, #0
 8000248:	613b      	str	r3, [r7, #16]
 800024a:	e05b      	b.n	8000304 <SC_HandleCmd+0xcc>
	{
		int CmdRet;
		CmdLen = strlen(BaseCmd[i].Name);
 800024c:	4932      	ldr	r1, [pc, #200]	@ (8000318 <SC_HandleCmd+0xe0>)
 800024e:	693a      	ldr	r2, [r7, #16]
 8000250:	4613      	mov	r3, r2
 8000252:	005b      	lsls	r3, r3, #1
 8000254:	4413      	add	r3, r2
 8000256:	00db      	lsls	r3, r3, #3
 8000258:	440b      	add	r3, r1
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4618      	mov	r0, r3
 800025e:	f019 fb07 	bl	8019870 <strlen>
 8000262:	4603      	mov	r3, r0
 8000264:	60fb      	str	r3, [r7, #12]
		if (strncmp(Buffer, BaseCmd[i].Name, CmdLen) == 0 &&
 8000266:	492c      	ldr	r1, [pc, #176]	@ (8000318 <SC_HandleCmd+0xe0>)
 8000268:	693a      	ldr	r2, [r7, #16]
 800026a:	4613      	mov	r3, r2
 800026c:	005b      	lsls	r3, r3, #1
 800026e:	4413      	add	r3, r2
 8000270:	00db      	lsls	r3, r3, #3
 8000272:	440b      	add	r3, r1
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	68fa      	ldr	r2, [r7, #12]
 8000278:	4619      	mov	r1, r3
 800027a:	6878      	ldr	r0, [r7, #4]
 800027c:	f023 f936 	bl	80234ec <strncmp>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d13b      	bne.n	80002fe <SC_HandleCmd+0xc6>
				(Buffer[CmdLen] == ' ' || Buffer[CmdLen] == '\t' || Buffer[CmdLen] == 0))
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	687a      	ldr	r2, [r7, #4]
 800028a:	4413      	add	r3, r2
 800028c:	781b      	ldrb	r3, [r3, #0]
		if (strncmp(Buffer, BaseCmd[i].Name, CmdLen) == 0 &&
 800028e:	2b20      	cmp	r3, #32
 8000290:	d00b      	beq.n	80002aa <SC_HandleCmd+0x72>
				(Buffer[CmdLen] == ' ' || Buffer[CmdLen] == '\t' || Buffer[CmdLen] == 0))
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	687a      	ldr	r2, [r7, #4]
 8000296:	4413      	add	r3, r2
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	2b09      	cmp	r3, #9
 800029c:	d005      	beq.n	80002aa <SC_HandleCmd+0x72>
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	687a      	ldr	r2, [r7, #4]
 80002a2:	4413      	add	r3, r2
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d129      	bne.n	80002fe <SC_HandleCmd+0xc6>
		{
			CmdRet = BaseCmd[i].Parse(&BaseCmd[i], Buffer + CmdLen);
 80002aa:	491b      	ldr	r1, [pc, #108]	@ (8000318 <SC_HandleCmd+0xe0>)
 80002ac:	693a      	ldr	r2, [r7, #16]
 80002ae:	4613      	mov	r3, r2
 80002b0:	005b      	lsls	r3, r3, #1
 80002b2:	4413      	add	r3, r2
 80002b4:	00db      	lsls	r3, r3, #3
 80002b6:	440b      	add	r3, r1
 80002b8:	3304      	adds	r3, #4
 80002ba:	681c      	ldr	r4, [r3, #0]
 80002bc:	693a      	ldr	r2, [r7, #16]
 80002be:	4613      	mov	r3, r2
 80002c0:	005b      	lsls	r3, r3, #1
 80002c2:	4413      	add	r3, r2
 80002c4:	00db      	lsls	r3, r3, #3
 80002c6:	4a14      	ldr	r2, [pc, #80]	@ (8000318 <SC_HandleCmd+0xe0>)
 80002c8:	1898      	adds	r0, r3, r2
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	687a      	ldr	r2, [r7, #4]
 80002ce:	4413      	add	r3, r2
 80002d0:	4619      	mov	r1, r3
 80002d2:	47a0      	blx	r4
 80002d4:	60b8      	str	r0, [r7, #8]
			if (CmdRet == 0)
 80002d6:	68bb      	ldr	r3, [r7, #8]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d117      	bne.n	800030c <SC_HandleCmd+0xd4>
			{
				Status = 0;
 80002dc:	2300      	movs	r3, #0
 80002de:	617b      	str	r3, [r7, #20]
				if (BaseCmd[i].NoAnswer == 0)
 80002e0:	490d      	ldr	r1, [pc, #52]	@ (8000318 <SC_HandleCmd+0xe0>)
 80002e2:	693a      	ldr	r2, [r7, #16]
 80002e4:	4613      	mov	r3, r2
 80002e6:	005b      	lsls	r3, r3, #1
 80002e8:	4413      	add	r3, r2
 80002ea:	00db      	lsls	r3, r3, #3
 80002ec:	440b      	add	r3, r1
 80002ee:	3314      	adds	r3, #20
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d10a      	bne.n	800030c <SC_HandleCmd+0xd4>
				{
					printf("ok\n");
 80002f6:	4809      	ldr	r0, [pc, #36]	@ (800031c <SC_HandleCmd+0xe4>)
 80002f8:	f022 fff0 	bl	80232dc <puts>
				}
			}
			break;
 80002fc:	e006      	b.n	800030c <SC_HandleCmd+0xd4>
	for (i = 0; i < ARRAY_SIZE(BaseCmd); i++)
 80002fe:	693b      	ldr	r3, [r7, #16]
 8000300:	3301      	adds	r3, #1
 8000302:	613b      	str	r3, [r7, #16]
 8000304:	693b      	ldr	r3, [r7, #16]
 8000306:	2b01      	cmp	r3, #1
 8000308:	d9a0      	bls.n	800024c <SC_HandleCmd+0x14>
 800030a:	e000      	b.n	800030e <SC_HandleCmd+0xd6>
			break;
 800030c:	bf00      	nop
		}
	}
	return (Status);
 800030e:	697b      	ldr	r3, [r7, #20]
}
 8000310:	4618      	mov	r0, r3
 8000312:	371c      	adds	r7, #28
 8000314:	46bd      	mov	sp, r7
 8000316:	bd90      	pop	{r4, r7, pc}
 8000318:	20000000 	.word	0x20000000
 800031c:	08029080 	.word	0x08029080

08000320 <Comm_HandleCmd>:
 * @brief  COMM Handle command
 * @param  App_Config_Ptr Pointer to application context
 * @retval None
 */
void Comm_HandleCmd(AppConfig_TypeDef *App_Config)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
	/* Process the command */
	if (SC_HandleCmd(App_Config->Comm_RXBuffer) < 0)
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	f503 5359 	add.w	r3, r3, #13888	@ 0x3640
 800032e:	3310      	adds	r3, #16
 8000330:	4618      	mov	r0, r3
 8000332:	f7ff ff81 	bl	8000238 <SC_HandleCmd>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	da02      	bge.n	8000342 <Comm_HandleCmd+0x22>
	{
		printf("Bad command\n");
 800033c:	4806      	ldr	r0, [pc, #24]	@ (8000358 <Comm_HandleCmd+0x38>)
 800033e:	f022 ffcd 	bl	80232dc <puts>
	}

	/* Reset the command ready flag */
	App_Config->UartComm_CmdReady = 0;
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8000348:	2200      	movs	r2, #0
 800034a:	f883 2e58 	strb.w	r2, [r3, #3672]	@ 0xe58

}
 800034e:	bf00      	nop
 8000350:	3708      	adds	r7, #8
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	08029084 	.word	0x08029084

0800035c <__io_putchar>:

/* Public function definitions -----------------------------------------------*/

__attribute__((weak)) int __io_putchar(int ch)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b084      	sub	sp, #16
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8000364:	1d39      	adds	r1, r7, #4
 8000366:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800036a:	2201      	movs	r2, #1
 800036c:	4807      	ldr	r0, [pc, #28]	@ (800038c <__io_putchar+0x30>)
 800036e:	f016 f96f 	bl	8016650 <HAL_UART_Transmit>
 8000372:	4603      	mov	r3, r0
 8000374:	73fb      	strb	r3, [r7, #15]
	return (status == HAL_OK ? ch : 0);
 8000376:	7bfb      	ldrb	r3, [r7, #15]
 8000378:	2b00      	cmp	r3, #0
 800037a:	d101      	bne.n	8000380 <__io_putchar+0x24>
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	e000      	b.n	8000382 <__io_putchar+0x26>
 8000380:	2300      	movs	r3, #0
}
 8000382:	4618      	mov	r0, r3
 8000384:	3710      	adds	r7, #16
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	20009b7c 	.word	0x20009b7c

08000390 <__io_getchar>:

__attribute__((weak)) int __io_getchar(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
	int ch = 0;
 8000396:	2300      	movs	r3, #0
 8000398:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_UART_Receive(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 800039a:	4639      	mov	r1, r7
 800039c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80003a0:	2201      	movs	r2, #1
 80003a2:	4807      	ldr	r0, [pc, #28]	@ (80003c0 <__io_getchar+0x30>)
 80003a4:	f016 f9df 	bl	8016766 <HAL_UART_Receive>
 80003a8:	4603      	mov	r3, r0
 80003aa:	71fb      	strb	r3, [r7, #7]
	return (status == HAL_OK ? ch : 0);
 80003ac:	79fb      	ldrb	r3, [r7, #7]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d101      	bne.n	80003b6 <__io_getchar+0x26>
 80003b2:	683b      	ldr	r3, [r7, #0]
 80003b4:	e000      	b.n	80003b8 <__io_getchar+0x28>
 80003b6:	2300      	movs	r3, #0
}
 80003b8:	4618      	mov	r0, r3
 80003ba:	3708      	adds	r7, #8
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	20009b7c 	.word	0x20009b7c

080003c4 <Comm_Start>:
 * @brief  COMM Start
 * @param  App_Config_Ptr Pointer to application context
 * @retval None
 */
void Comm_Start(AppConfig_TypeDef *App_Config)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b084      	sub	sp, #16
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
	/* If the UART is not busy receiving data, put it in receive interrupt mode */
	HAL_UART_StateTypeDef State;
	App_Config->UartComm_CmdReady = 0;
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80003d2:	2200      	movs	r2, #0
 80003d4:	f883 2e58 	strb.w	r2, [r3, #3672]	@ 0xe58
	App_Config->Uart_RxRcvIndex = 0;
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80003de:	461a      	mov	r2, r3
 80003e0:	2300      	movs	r3, #0
 80003e2:	f8c2 3e50 	str.w	r3, [r2, #3664]	@ 0xe50
	State = HAL_UART_GetState(&huart2);
 80003e6:	480c      	ldr	r0, [pc, #48]	@ (8000418 <Comm_Start+0x54>)
 80003e8:	f017 fec8 	bl	801817c <HAL_UART_GetState>
 80003ec:	4603      	mov	r3, r0
 80003ee:	73fb      	strb	r3, [r7, #15]
	if (HAL_UART_STATE_BUSY_TX_RX != State && HAL_UART_STATE_BUSY_RX != State)
 80003f0:	7bfb      	ldrb	r3, [r7, #15]
 80003f2:	2b23      	cmp	r3, #35	@ 0x23
 80003f4:	d00b      	beq.n	800040e <Comm_Start+0x4a>
 80003f6:	7bfb      	ldrb	r3, [r7, #15]
 80003f8:	2b22      	cmp	r3, #34	@ 0x22
 80003fa:	d008      	beq.n	800040e <Comm_Start+0x4a>
	{
		HAL_UART_Receive_IT(&huart2, (uint8_t*) (App_Config->Uart_RXBuffer), 1);
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	f503 5339 	add.w	r3, r3, #11840	@ 0x2e40
 8000402:	3310      	adds	r3, #16
 8000404:	2201      	movs	r2, #1
 8000406:	4619      	mov	r1, r3
 8000408:	4803      	ldr	r0, [pc, #12]	@ (8000418 <Comm_Start+0x54>)
 800040a:	f016 fa79 	bl	8016900 <HAL_UART_Receive_IT>
	}

}
 800040e:	bf00      	nop
 8000410:	3710      	adds	r7, #16
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	20009b7c 	.word	0x20009b7c

0800041c <Add_SensorTxData_Network>:


void Add_SensorTxData_Network(AppConfig_TypeDef *App_Config, SensorTxData_t *Buffer)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b090      	sub	sp, #64	@ 0x40
 8000420:	af00      	add	r7, sp, #0
 8000422:	60f8      	str	r0, [r7, #12]
 8000424:	60b9      	str	r1, [r7, #8]
	float ResultData[AI_NETWORK_OUT_1_SIZE] = {0.0f,};
 8000426:	f107 0310 	add.w	r3, r7, #16
 800042a:	2220      	movs	r2, #32
 800042c:	2100      	movs	r1, #0
 800042e:	4618      	mov	r0, r3
 8000430:	f023 f854 	bl	80234dc <memset>
	float tempData = 0.0f;
 8000434:	f04f 0300 	mov.w	r3, #0
 8000438:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint8_t temppos = 0;
 800043a:	2300      	movs	r3, #0
 800043c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	 * 5 : "BreakTime"
	 * 6 : "CrossHands"
	 * 7 : "Fist"};
	 */

	if (App_Config->new_data_received)
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000446:	f893 39a0 	ldrb.w	r3, [r3, #2464]	@ 0x9a0
 800044a:	2b00      	cmp	r3, #0
 800044c:	f000 808f 	beq.w	800056e <Add_SensorTxData_Network+0x152>
	{
		for (int i = 0; i < AI_NETWORK_OUT_1_SIZE; i++) ResultData[i] = App_Config->aiOutData[i];
 8000450:	2300      	movs	r3, #0
 8000452:	637b      	str	r3, [r7, #52]	@ 0x34
 8000454:	e011      	b.n	800047a <Add_SensorTxData_Network+0x5e>
 8000456:	68fa      	ldr	r2, [r7, #12]
 8000458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800045a:	f603 338c 	addw	r3, r3, #2956	@ 0xb8c
 800045e:	009b      	lsls	r3, r3, #2
 8000460:	4413      	add	r3, r2
 8000462:	681a      	ldr	r2, [r3, #0]
 8000464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000466:	009b      	lsls	r3, r3, #2
 8000468:	3338      	adds	r3, #56	@ 0x38
 800046a:	f107 0108 	add.w	r1, r7, #8
 800046e:	440b      	add	r3, r1
 8000470:	3b30      	subs	r3, #48	@ 0x30
 8000472:	601a      	str	r2, [r3, #0]
 8000474:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000476:	3301      	adds	r3, #1
 8000478:	637b      	str	r3, [r7, #52]	@ 0x34
 800047a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800047c:	2b07      	cmp	r3, #7
 800047e:	ddea      	ble.n	8000456 <Add_SensorTxData_Network+0x3a>

		for(uint8_t c = 0; c < 3; c++)
 8000480:	2300      	movs	r3, #0
 8000482:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8000486:	e06e      	b.n	8000566 <Add_SensorTxData_Network+0x14a>
		{
			for (uint8_t i = 0; i < AI_NETWORK_OUT_1_SIZE; i++)
 8000488:	2300      	movs	r3, #0
 800048a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 800048e:	e023      	b.n	80004d8 <Add_SensorTxData_Network+0xbc>
			{
				if(tempData > ResultData[i]){}
 8000490:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8000494:	009b      	lsls	r3, r3, #2
 8000496:	3338      	adds	r3, #56	@ 0x38
 8000498:	f107 0208 	add.w	r2, r7, #8
 800049c:	4413      	add	r3, r2
 800049e:	3b30      	subs	r3, #48	@ 0x30
 80004a0:	edd3 7a00 	vldr	s15, [r3]
 80004a4:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80004a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80004ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004b0:	dc0d      	bgt.n	80004ce <Add_SensorTxData_Network+0xb2>
				else
				{
					temppos = i;
 80004b2:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80004b6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
					tempData = ResultData[i];
 80004ba:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80004be:	009b      	lsls	r3, r3, #2
 80004c0:	3338      	adds	r3, #56	@ 0x38
 80004c2:	f107 0208 	add.w	r2, r7, #8
 80004c6:	4413      	add	r3, r2
 80004c8:	3b30      	subs	r3, #48	@ 0x30
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
			for (uint8_t i = 0; i < AI_NETWORK_OUT_1_SIZE; i++)
 80004ce:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80004d2:	3301      	adds	r3, #1
 80004d4:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 80004d8:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80004dc:	2b07      	cmp	r3, #7
 80004de:	d9d7      	bls.n	8000490 <Add_SensorTxData_Network+0x74>
				}
			}

			if(tempData > 0)
 80004e0:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80004e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80004e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004ec:	dd19      	ble.n	8000522 <Add_SensorTxData_Network+0x106>
			{
				Buffer->PostureRData[c] = temppos;
 80004ee:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80004f2:	68ba      	ldr	r2, [r7, #8]
 80004f4:	4413      	add	r3, r2
 80004f6:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 80004fa:	705a      	strb	r2, [r3, #1]
				Buffer->PostureVData[c] = (uint8_t)(tempData * 100);
 80004fc:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000500:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8000578 <Add_SensorTxData_Network+0x15c>
 8000504:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000508:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800050c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000510:	edc7 7a01 	vstr	s15, [r7, #4]
 8000514:	793a      	ldrb	r2, [r7, #4]
 8000516:	b2d1      	uxtb	r1, r2
 8000518:	68ba      	ldr	r2, [r7, #8]
 800051a:	4413      	add	r3, r2
 800051c:	460a      	mov	r2, r1
 800051e:	711a      	strb	r2, [r3, #4]
 8000520:	e00b      	b.n	800053a <Add_SensorTxData_Network+0x11e>
			}
			else
			{
				Buffer->PostureRData[c] = 0;
 8000522:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000526:	68ba      	ldr	r2, [r7, #8]
 8000528:	4413      	add	r3, r2
 800052a:	2200      	movs	r2, #0
 800052c:	705a      	strb	r2, [r3, #1]
				Buffer->PostureVData[c] = 0;
 800052e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000532:	68ba      	ldr	r2, [r7, #8]
 8000534:	4413      	add	r3, r2
 8000536:	2200      	movs	r2, #0
 8000538:	711a      	strb	r2, [r3, #4]
			}
			ResultData[temppos] = 0.0f;
 800053a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800053e:	009b      	lsls	r3, r3, #2
 8000540:	3338      	adds	r3, #56	@ 0x38
 8000542:	f107 0208 	add.w	r2, r7, #8
 8000546:	4413      	add	r3, r2
 8000548:	3b30      	subs	r3, #48	@ 0x30
 800054a:	f04f 0200 	mov.w	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
			temppos = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
			tempData = 0.0f;
 8000556:	f04f 0300 	mov.w	r3, #0
 800055a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		for(uint8_t c = 0; c < 3; c++)
 800055c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000560:	3301      	adds	r3, #1
 8000562:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8000566:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800056a:	2b02      	cmp	r3, #2
 800056c:	d98c      	bls.n	8000488 <Add_SensorTxData_Network+0x6c>

		//printf("1 Data : %d, %d\r\n", Buffer->PostureRData[0], Buffer->PostureVData[0]);
		//printf("2 Data : %d, %d\r\n", Buffer->PostureRData[1], Buffer->PostureVData[1]);
		//printf("3 Data : %d, %d\r\n", Buffer->PostureRData[2], Buffer->PostureVData[2]);
	}
}
 800056e:	bf00      	nop
 8000570:	3740      	adds	r7, #64	@ 0x40
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	42c80000 	.word	0x42c80000

0800057c <HAL_UART_RxCpltCallback>:
 * @brief  UART Receive interrupt handler
 * @param  huart UART instance
 * @retval None
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	/* The three following characters launch the processing of the received data
	 * as a command */
	if (App_Config.Uart_RXBuffer[App_Config.Uart_RxRcvIndex] == '\r'
 8000584:	4b4a      	ldr	r3, [pc, #296]	@ (80006b0 <HAL_UART_RxCpltCallback+0x134>)
 8000586:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800058a:	f8d3 3e50 	ldr.w	r3, [r3, #3664]	@ 0xe50
 800058e:	4a48      	ldr	r2, [pc, #288]	@ (80006b0 <HAL_UART_RxCpltCallback+0x134>)
 8000590:	4413      	add	r3, r2
 8000592:	f503 5339 	add.w	r3, r3, #11840	@ 0x2e40
 8000596:	3310      	adds	r3, #16
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	b2db      	uxtb	r3, r3
 800059c:	2b0d      	cmp	r3, #13
 800059e:	d01b      	beq.n	80005d8 <HAL_UART_RxCpltCallback+0x5c>
			|| App_Config.Uart_RXBuffer[App_Config.Uart_RxRcvIndex] == '\n'
 80005a0:	4b43      	ldr	r3, [pc, #268]	@ (80006b0 <HAL_UART_RxCpltCallback+0x134>)
 80005a2:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80005a6:	f8d3 3e50 	ldr.w	r3, [r3, #3664]	@ 0xe50
 80005aa:	4a41      	ldr	r2, [pc, #260]	@ (80006b0 <HAL_UART_RxCpltCallback+0x134>)
 80005ac:	4413      	add	r3, r2
 80005ae:	f503 5339 	add.w	r3, r3, #11840	@ 0x2e40
 80005b2:	3310      	adds	r3, #16
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	2b0a      	cmp	r3, #10
 80005ba:	d00d      	beq.n	80005d8 <HAL_UART_RxCpltCallback+0x5c>
			|| App_Config.Uart_RXBuffer[App_Config.Uart_RxRcvIndex] == '\x03')
 80005bc:	4b3c      	ldr	r3, [pc, #240]	@ (80006b0 <HAL_UART_RxCpltCallback+0x134>)
 80005be:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80005c2:	f8d3 3e50 	ldr.w	r3, [r3, #3664]	@ 0xe50
 80005c6:	4a3a      	ldr	r2, [pc, #232]	@ (80006b0 <HAL_UART_RxCpltCallback+0x134>)
 80005c8:	4413      	add	r3, r2
 80005ca:	f503 5339 	add.w	r3, r3, #11840	@ 0x2e40
 80005ce:	3310      	adds	r3, #16
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	2b03      	cmp	r3, #3
 80005d6:	d132      	bne.n	800063e <HAL_UART_RxCpltCallback+0xc2>
	{
		/* '\x03' is Ctrl-c */
		if (App_Config.Uart_RXBuffer[App_Config.Uart_RxRcvIndex] != '\x03')
 80005d8:	4b35      	ldr	r3, [pc, #212]	@ (80006b0 <HAL_UART_RxCpltCallback+0x134>)
 80005da:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80005de:	f8d3 3e50 	ldr.w	r3, [r3, #3664]	@ 0xe50
 80005e2:	4a33      	ldr	r2, [pc, #204]	@ (80006b0 <HAL_UART_RxCpltCallback+0x134>)
 80005e4:	4413      	add	r3, r2
 80005e6:	f503 5339 	add.w	r3, r3, #11840	@ 0x2e40
 80005ea:	3310      	adds	r3, #16
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	2b03      	cmp	r3, #3
 80005f2:	d00b      	beq.n	800060c <HAL_UART_RxCpltCallback+0x90>
		{
			/* Clean the last char */
			App_Config.Uart_RXBuffer[App_Config.Uart_RxRcvIndex] = 0;
 80005f4:	4b2e      	ldr	r3, [pc, #184]	@ (80006b0 <HAL_UART_RxCpltCallback+0x134>)
 80005f6:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80005fa:	f8d3 3e50 	ldr.w	r3, [r3, #3664]	@ 0xe50
 80005fe:	4a2c      	ldr	r2, [pc, #176]	@ (80006b0 <HAL_UART_RxCpltCallback+0x134>)
 8000600:	4413      	add	r3, r2
 8000602:	f503 5339 	add.w	r3, r3, #11840	@ 0x2e40
 8000606:	3310      	adds	r3, #16
 8000608:	2200      	movs	r2, #0
 800060a:	701a      	strb	r2, [r3, #0]
		}

		/* Copy data from the UART buffer to the comm buffer */
		memcpy(App_Config.Comm_RXBuffer,
				(char*) App_Config.Uart_RXBuffer,
				App_Config.Uart_RxRcvIndex + 1);
 800060c:	4b28      	ldr	r3, [pc, #160]	@ (80006b0 <HAL_UART_RxCpltCallback+0x134>)
 800060e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8000612:	f8d3 3e50 	ldr.w	r3, [r3, #3664]	@ 0xe50
		memcpy(App_Config.Comm_RXBuffer,
 8000616:	3301      	adds	r3, #1
 8000618:	461a      	mov	r2, r3
 800061a:	4926      	ldr	r1, [pc, #152]	@ (80006b4 <HAL_UART_RxCpltCallback+0x138>)
 800061c:	4826      	ldr	r0, [pc, #152]	@ (80006b8 <HAL_UART_RxCpltCallback+0x13c>)
 800061e:	f022 fffe 	bl	802361e <memcpy>
		/* Set a flag indicating a new command is ready to be handled */
		App_Config.UartComm_CmdReady = 1;
 8000622:	4b23      	ldr	r3, [pc, #140]	@ (80006b0 <HAL_UART_RxCpltCallback+0x134>)
 8000624:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8000628:	2201      	movs	r2, #1
 800062a:	f883 2e58 	strb.w	r2, [r3, #3672]	@ 0xe58
		/* Reset the UART buffer index */
		App_Config.Uart_RxRcvIndex = 0;
 800062e:	4b20      	ldr	r3, [pc, #128]	@ (80006b0 <HAL_UART_RxCpltCallback+0x134>)
 8000630:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8000634:	461a      	mov	r2, r3
 8000636:	2300      	movs	r3, #0
 8000638:	f8c2 3e50 	str.w	r3, [r2, #3664]	@ 0xe50
 800063c:	e025      	b.n	800068a <HAL_UART_RxCpltCallback+0x10e>
	}
	else
	{
		if (App_Config.Uart_RxRcvIndex < UART_BUFFER_SIZE)
 800063e:	4b1c      	ldr	r3, [pc, #112]	@ (80006b0 <HAL_UART_RxCpltCallback+0x134>)
 8000640:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8000644:	f8d3 3e50 	ldr.w	r3, [r3, #3664]	@ 0xe50
 8000648:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800064c:	d20b      	bcs.n	8000666 <HAL_UART_RxCpltCallback+0xea>
		{
			/* Increase the index of the UART buffer */
			App_Config.Uart_RxRcvIndex++;
 800064e:	4b18      	ldr	r3, [pc, #96]	@ (80006b0 <HAL_UART_RxCpltCallback+0x134>)
 8000650:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8000654:	f8d3 3e50 	ldr.w	r3, [r3, #3664]	@ 0xe50
 8000658:	3301      	adds	r3, #1
 800065a:	4a15      	ldr	r2, [pc, #84]	@ (80006b0 <HAL_UART_RxCpltCallback+0x134>)
 800065c:	f502 5240 	add.w	r2, r2, #12288	@ 0x3000
 8000660:	f8c2 3e50 	str.w	r3, [r2, #3664]	@ 0xe50
 8000664:	e011      	b.n	800068a <HAL_UART_RxCpltCallback+0x10e>
		}
		else
		{
			/* If the index is out of bounds, reset it and increment the overrun
			 * counter */
			App_Config.Uart_RxRcvIndex = 0;
 8000666:	4b12      	ldr	r3, [pc, #72]	@ (80006b0 <HAL_UART_RxCpltCallback+0x134>)
 8000668:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800066c:	461a      	mov	r2, r3
 800066e:	2300      	movs	r3, #0
 8000670:	f8c2 3e50 	str.w	r3, [r2, #3664]	@ 0xe50
			App_Config.Uart_nOverrun++;
 8000674:	4b0e      	ldr	r3, [pc, #56]	@ (80006b0 <HAL_UART_RxCpltCallback+0x134>)
 8000676:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800067a:	f8d3 3e54 	ldr.w	r3, [r3, #3668]	@ 0xe54
 800067e:	3301      	adds	r3, #1
 8000680:	4a0b      	ldr	r2, [pc, #44]	@ (80006b0 <HAL_UART_RxCpltCallback+0x134>)
 8000682:	f502 5240 	add.w	r2, r2, #12288	@ 0x3000
 8000686:	f8c2 3e54 	str.w	r3, [r2, #3668]	@ 0xe54
		}
	}

	/* Restart the UART in receive interrupt mode */
	HAL_UART_Receive_IT(huart,
			(uint8_t*) &(App_Config.Uart_RXBuffer[App_Config.Uart_RxRcvIndex]),
 800068a:	4b09      	ldr	r3, [pc, #36]	@ (80006b0 <HAL_UART_RxCpltCallback+0x134>)
 800068c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8000690:	f8d3 3e50 	ldr.w	r3, [r3, #3664]	@ 0xe50
 8000694:	f503 5339 	add.w	r3, r3, #11840	@ 0x2e40
 8000698:	3310      	adds	r3, #16
 800069a:	4a05      	ldr	r2, [pc, #20]	@ (80006b0 <HAL_UART_RxCpltCallback+0x134>)
 800069c:	4413      	add	r3, r2
	HAL_UART_Receive_IT(huart,
 800069e:	2201      	movs	r2, #1
 80006a0:	4619      	mov	r1, r3
 80006a2:	6878      	ldr	r0, [r7, #4]
 80006a4:	f016 f92c 	bl	8016900 <HAL_UART_Receive_IT>
			1);

}
 80006a8:	bf00      	nop
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	200042ec 	.word	0x200042ec
 80006b4:	2000713c 	.word	0x2000713c
 80006b8:	2000793c 	.word	0x2000793c

080006bc <HAL_UART_ErrorCallback>:
 * @brief  UART error handler
 * @param  huart UART instance
 * @retval None
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
	/* Clear error and  kick of next */
	huart->ErrorCode = 0;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2200      	movs	r2, #0
 80006c8:	645a      	str	r2, [r3, #68]	@ 0x44
	HAL_UART_Receive_IT(huart,
			(uint8_t*) &(App_Config.Uart_RXBuffer[App_Config.Uart_RxRcvIndex]),
 80006ca:	4b0c      	ldr	r3, [pc, #48]	@ (80006fc <HAL_UART_ErrorCallback+0x40>)
 80006cc:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80006d0:	f8d3 3e50 	ldr.w	r3, [r3, #3664]	@ 0xe50
 80006d4:	f503 5339 	add.w	r3, r3, #11840	@ 0x2e40
 80006d8:	3310      	adds	r3, #16
 80006da:	4a08      	ldr	r2, [pc, #32]	@ (80006fc <HAL_UART_ErrorCallback+0x40>)
 80006dc:	4413      	add	r3, r2
			App_Config.Uart_RxRcvIndex);
 80006de:	4a07      	ldr	r2, [pc, #28]	@ (80006fc <HAL_UART_ErrorCallback+0x40>)
 80006e0:	f502 5240 	add.w	r2, r2, #12288	@ 0x3000
 80006e4:	f8d2 2e50 	ldr.w	r2, [r2, #3664]	@ 0xe50
	HAL_UART_Receive_IT(huart,
 80006e8:	b292      	uxth	r2, r2
 80006ea:	4619      	mov	r1, r3
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	f016 f907 	bl	8016900 <HAL_UART_Receive_IT>

}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	200042ec 	.word	0x200042ec

08000700 <Comm_HandleRxCMD>:
 * @brief  COMM If a UART command has been received, handle it
 * @param  App_Config_Ptr Pointer to application context
 * @retval None
 */
void Comm_HandleRxCMD(AppConfig_TypeDef *App_Config)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	/* If a command has been received */
	if (App_Config->UartComm_CmdReady)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800070e:	f893 3e58 	ldrb.w	r3, [r3, #3672]	@ 0xe58
 8000712:	b2db      	uxtb	r3, r3
 8000714:	2b00      	cmp	r3, #0
 8000716:	d002      	beq.n	800071e <Comm_HandleRxCMD+0x1e>
	{
		/* Handle the command */
		Comm_HandleCmd(App_Config);
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f7ff fe01 	bl	8000320 <Comm_HandleCmd>
	}

}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop

08000728 <argmax>:
 * @param  len Length of the vector
 * @param  threshold Threshold to be exceeded by the maximum value
 * @retval Index of the maximum value, or 0 if the highest value is lower than the threshold
 */
static int argmax(const float *values, uint32_t len, float threshold)
{
 8000728:	b480      	push	{r7}
 800072a:	b089      	sub	sp, #36	@ 0x24
 800072c:	af00      	add	r7, sp, #0
 800072e:	60f8      	str	r0, [r7, #12]
 8000730:	60b9      	str	r1, [r7, #8]
 8000732:	ed87 0a01 	vstr	s0, [r7, #4]
  float max_value = values[0];
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	61fb      	str	r3, [r7, #28]
  uint32_t max_index = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	61bb      	str	r3, [r7, #24]
  for (uint32_t i = 1; i < len; i++)
 8000740:	2301      	movs	r3, #1
 8000742:	617b      	str	r3, [r7, #20]
 8000744:	e024      	b.n	8000790 <argmax+0x68>
  {
    if (values[i] > max_value && values[i] > threshold)
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	68fa      	ldr	r2, [r7, #12]
 800074c:	4413      	add	r3, r2
 800074e:	edd3 7a00 	vldr	s15, [r3]
 8000752:	ed97 7a07 	vldr	s14, [r7, #28]
 8000756:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800075a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800075e:	d514      	bpl.n	800078a <argmax+0x62>
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	68fa      	ldr	r2, [r7, #12]
 8000766:	4413      	add	r3, r2
 8000768:	edd3 7a00 	vldr	s15, [r3]
 800076c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000770:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000778:	d507      	bpl.n	800078a <argmax+0x62>
    {
      max_value = values[i];
 800077a:	697b      	ldr	r3, [r7, #20]
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	68fa      	ldr	r2, [r7, #12]
 8000780:	4413      	add	r3, r2
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	61fb      	str	r3, [r7, #28]
      max_index = i;
 8000786:	697b      	ldr	r3, [r7, #20]
 8000788:	61bb      	str	r3, [r7, #24]
  for (uint32_t i = 1; i < len; i++)
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	3301      	adds	r3, #1
 800078e:	617b      	str	r3, [r7, #20]
 8000790:	697a      	ldr	r2, [r7, #20]
 8000792:	68bb      	ldr	r3, [r7, #8]
 8000794:	429a      	cmp	r2, r3
 8000796:	d3d6      	bcc.n	8000746 <argmax+0x1e>
    }
  }
  return(max_index);
 8000798:	69bb      	ldr	r3, [r7, #24]
}
 800079a:	4618      	mov	r0, r3
 800079c:	3724      	adds	r7, #36	@ 0x24
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr

080007a6 <label_filter>:
 * @param  current_label Index of the label from the argmax function
 * @param  AI_Data Data structure to save the result
 * @retval 0
 */
static int label_filter(int current_label, HANDPOSTURE_Data_t *AI_Data)
{
 80007a6:	b480      	push	{r7}
 80007a8:	b083      	sub	sp, #12
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	6078      	str	r0, [r7, #4]
 80007ae:	6039      	str	r1, [r7, #0]
  if (current_label == AI_Data->previous_label)
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	785b      	ldrb	r3, [r3, #1]
 80007b4:	461a      	mov	r2, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d117      	bne.n	80007ec <label_filter+0x46>
  {
    if (AI_Data->label_count < LABEL_FILTER_N)
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	789b      	ldrb	r3, [r3, #2]
 80007c0:	2b02      	cmp	r3, #2
 80007c2:	d806      	bhi.n	80007d2 <label_filter+0x2c>
      AI_Data->label_count++;
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	789b      	ldrb	r3, [r3, #2]
 80007c8:	3301      	adds	r3, #1
 80007ca:	b2da      	uxtb	r2, r3
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	709a      	strb	r2, [r3, #2]
 80007d0:	e00f      	b.n	80007f2 <label_filter+0x4c>
    else if (AI_Data->label_count == LABEL_FILTER_N)
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	789b      	ldrb	r3, [r3, #2]
 80007d6:	2b03      	cmp	r3, #3
 80007d8:	d104      	bne.n	80007e4 <label_filter+0x3e>
      AI_Data->handposture_label = current_label;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	b2da      	uxtb	r2, r3
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	711a      	strb	r2, [r3, #4]
 80007e2:	e006      	b.n	80007f2 <label_filter+0x4c>
    else
      AI_Data->label_count = 0;
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	2200      	movs	r2, #0
 80007e8:	709a      	strb	r2, [r3, #2]
 80007ea:	e002      	b.n	80007f2 <label_filter+0x4c>
  }
  else
  {
    AI_Data->label_count = 0;
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	2200      	movs	r2, #0
 80007f0:	709a      	strb	r2, [r3, #2]
    by removing this line, we save the previous valid posture until a new valid one is detected */
    AI_Data->handposture_label = 0;
#endif
  }

  AI_Data->previous_label = current_label;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	b2da      	uxtb	r2, r3
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	705a      	strb	r2, [r3, #1]
  return(0);
 80007fa:	2300      	movs	r3, #0
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <AI_Init>:
 * @brief  AI Model init function
 * @param  None
 * @retval 0
 */
static int AI_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
  ai_handle act_addr[] = {pool0};
 800080e:	4b25      	ldr	r3, [pc, #148]	@ (80008a4 <AI_Init+0x9c>)
 8000810:	607b      	str	r3, [r7, #4]

  /* Create and initialize an instance of the model */
  ai_network_create_and_init(&network, act_addr, NULL);
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	2200      	movs	r2, #0
 8000816:	4619      	mov	r1, r3
 8000818:	4823      	ldr	r0, [pc, #140]	@ (80008a8 <AI_Init+0xa0>)
 800081a:	f018 fe1f 	bl	801945c <ai_network_create_and_init>

  ai_input = ai_network_inputs_get(network, NULL);
 800081e:	4b22      	ldr	r3, [pc, #136]	@ (80008a8 <AI_Init+0xa0>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	2100      	movs	r1, #0
 8000824:	4618      	mov	r0, r3
 8000826:	f018 fe97 	bl	8019558 <ai_network_inputs_get>
 800082a:	4603      	mov	r3, r0
 800082c:	4a1f      	ldr	r2, [pc, #124]	@ (80008ac <AI_Init+0xa4>)
 800082e:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 8000830:	4b1d      	ldr	r3, [pc, #116]	@ (80008a8 <AI_Init+0xa0>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f018 fea8 	bl	801958c <ai_network_outputs_get>
 800083c:	4603      	mov	r3, r0
 800083e:	4a1c      	ldr	r2, [pc, #112]	@ (80008b0 <AI_Init+0xa8>)
 8000840:	6013      	str	r3, [r2, #0]

#if defined(AI_NETWORK_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_NETWORK_IN_NUM; idx++)
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	e00f      	b.n	8000868 <AI_Init+0x60>
  {
    data_ins[idx] = ai_input[idx].data;
 8000848:	4b18      	ldr	r3, [pc, #96]	@ (80008ac <AI_Init+0xa4>)
 800084a:	6819      	ldr	r1, [r3, #0]
 800084c:	68fa      	ldr	r2, [r7, #12]
 800084e:	4613      	mov	r3, r2
 8000850:	00db      	lsls	r3, r3, #3
 8000852:	1a9b      	subs	r3, r3, r2
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	440b      	add	r3, r1
 8000858:	685a      	ldr	r2, [r3, #4]
 800085a:	4916      	ldr	r1, [pc, #88]	@ (80008b4 <AI_Init+0xac>)
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_NETWORK_IN_NUM; idx++)
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	3301      	adds	r3, #1
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	2b00      	cmp	r3, #0
 800086c:	ddec      	ble.n	8000848 <AI_Init+0x40>

#if defined(AI_NETWORK_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++)
 800086e:	2300      	movs	r3, #0
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	e00f      	b.n	8000894 <AI_Init+0x8c>
  {
    data_outs[idx] = ai_output[idx].data;
 8000874:	4b0e      	ldr	r3, [pc, #56]	@ (80008b0 <AI_Init+0xa8>)
 8000876:	6819      	ldr	r1, [r3, #0]
 8000878:	68ba      	ldr	r2, [r7, #8]
 800087a:	4613      	mov	r3, r2
 800087c:	00db      	lsls	r3, r3, #3
 800087e:	1a9b      	subs	r3, r3, r2
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	440b      	add	r3, r1
 8000884:	685a      	ldr	r2, [r3, #4]
 8000886:	490c      	ldr	r1, [pc, #48]	@ (80008b8 <AI_Init+0xb0>)
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++)
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	3301      	adds	r3, #1
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	2b00      	cmp	r3, #0
 8000898:	ddec      	ble.n	8000874 <AI_Init+0x6c>
  {
    ai_output[idx].data = data_outs[idx];
  }
#endif

  return(0);
 800089a:	2300      	movs	r3, #0
}
 800089c:	4618      	mov	r0, r3
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	200009b4 	.word	0x200009b4
 80008a8:	200019b4 	.word	0x200019b4
 80008ac:	200019b8 	.word	0x200019b8
 80008b0:	200019bc 	.word	0x200019bc
 80008b4:	200019c0 	.word	0x200019c0
 80008b8:	200019c4 	.word	0x200019c4

080008bc <AI_Run>:
 * @param  pIn Pointer to input data
 * @param  pOut Pointer to output data
 * @retval 0 if succeeded, 1 if failed
 */
static int AI_Run(float *pIn, float *pOut)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
  ai_i32 batch;
  ai_input[0].data = AI_HANDLE_PTR(pIn);
 80008c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000900 <AI_Run+0x44>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	687a      	ldr	r2, [r7, #4]
 80008cc:	605a      	str	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(pOut);
 80008ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000904 <AI_Run+0x48>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	683a      	ldr	r2, [r7, #0]
 80008d4:	605a      	str	r2, [r3, #4]
  batch = ai_network_run(network, ai_input, ai_output);
 80008d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000908 <AI_Run+0x4c>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a09      	ldr	r2, [pc, #36]	@ (8000900 <AI_Run+0x44>)
 80008dc:	6811      	ldr	r1, [r2, #0]
 80008de:	4a09      	ldr	r2, [pc, #36]	@ (8000904 <AI_Run+0x48>)
 80008e0:	6812      	ldr	r2, [r2, #0]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f018 feb4 	bl	8019650 <ai_network_run>
 80008e8:	60f8      	str	r0, [r7, #12]
  return(batch<=0);
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	bfd4      	ite	le
 80008f0:	2301      	movle	r3, #1
 80008f2:	2300      	movgt	r3, #0
 80008f4:	b2db      	uxtb	r3, r3
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3710      	adds	r7, #16
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	200019b8 	.word	0x200019b8
 8000904:	200019bc 	.word	0x200019bc
 8000908:	200019b4 	.word	0x200019b4

0800090c <AI_CopyInputData>:
 * @param  HANDPOSTURE_Input_Data Pointer to destination
 * @param  pRangingData Pointer to source
 * @retval 0
 */
static int AI_CopyInputData(HANDPOSTURE_Input_Data_t *HANDPOSTURE_Input_Data, VL53LMZ_ResultsData *pRangingData)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	6039      	str	r1, [r7, #0]
  int idx;

  HANDPOSTURE_Input_Data->timestamp_ms = (int32_t) HAL_GetTick();
 8000916:	f005 f811 	bl	800593c <HAL_GetTick>
 800091a:	4603      	mov	r3, r0
 800091c:	461a      	mov	r2, r3
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < SENSOR__MAX_NB_OF_ZONES; i++)
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	e056      	b.n	80009d6 <AI_CopyInputData+0xca>
  {
    /* Use SENSOR_ROTATION_180 macro to rotate the data */
    #if SENSOR_ROTATION_180
      idx = SENSOR__MAX_NB_OF_ZONES - i;
    #else
      idx = i;
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	60bb      	str	r3, [r7, #8]
    #endif
    HANDPOSTURE_Input_Data->ranging[idx] = pRangingData->distance_mm[idx]/FIXED_POINT_14_2_TO_FLOAT; /* Signed 14.2 */
 800092c:	683a      	ldr	r2, [r7, #0]
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8000934:	005b      	lsls	r3, r3, #1
 8000936:	4413      	add	r3, r2
 8000938:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800093c:	4618      	mov	r0, r3
 800093e:	f019 f8f1 	bl	8019b24 <__aeabi_i2d>
 8000942:	f04f 0200 	mov.w	r2, #0
 8000946:	4b28      	ldr	r3, [pc, #160]	@ (80009e8 <AI_CopyInputData+0xdc>)
 8000948:	f019 fa80 	bl	8019e4c <__aeabi_ddiv>
 800094c:	4602      	mov	r2, r0
 800094e:	460b      	mov	r3, r1
 8000950:	4610      	mov	r0, r2
 8000952:	4619      	mov	r1, r3
 8000954:	f019 fc48 	bl	801a1e8 <__aeabi_d2f>
 8000958:	4601      	mov	r1, r0
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	3320      	adds	r3, #32
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	4413      	add	r3, r2
 8000964:	3304      	adds	r3, #4
 8000966:	6019      	str	r1, [r3, #0]
    HANDPOSTURE_Input_Data->peak[idx] = pRangingData->signal_per_spad[idx]/FIXED_POINT_21_11_TO_FLOAT; /* Unsigned 21.11 */
 8000968:	683a      	ldr	r2, [r7, #0]
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	3390      	adds	r3, #144	@ 0x90
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	4413      	add	r3, r2
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	4618      	mov	r0, r3
 8000976:	f019 f8c5 	bl	8019b04 <__aeabi_ui2d>
 800097a:	f04f 0200 	mov.w	r2, #0
 800097e:	4b1b      	ldr	r3, [pc, #108]	@ (80009ec <AI_CopyInputData+0xe0>)
 8000980:	f019 fa64 	bl	8019e4c <__aeabi_ddiv>
 8000984:	4602      	mov	r2, r0
 8000986:	460b      	mov	r3, r1
 8000988:	4610      	mov	r0, r2
 800098a:	4619      	mov	r1, r3
 800098c:	f019 fc2c 	bl	801a1e8 <__aeabi_d2f>
 8000990:	4601      	mov	r1, r0
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	3360      	adds	r3, #96	@ 0x60
 8000998:	009b      	lsls	r3, r3, #2
 800099a:	4413      	add	r3, r2
 800099c:	3304      	adds	r3, #4
 800099e:	6019      	str	r1, [r3, #0]
    HANDPOSTURE_Input_Data->target_status[idx] = pRangingData->target_status[idx];
 80009a0:	683a      	ldr	r2, [r7, #0]
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	4413      	add	r3, r2
 80009a6:	f203 4384 	addw	r3, r3, #1156	@ 0x484
 80009aa:	7819      	ldrb	r1, [r3, #0]
 80009ac:	687a      	ldr	r2, [r7, #4]
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	4413      	add	r3, r2
 80009b2:	3304      	adds	r3, #4
 80009b4:	460a      	mov	r2, r1
 80009b6:	701a      	strb	r2, [r3, #0]
    HANDPOSTURE_Input_Data->nb_targets[idx] = pRangingData->nb_target_detected[idx];
 80009b8:	683a      	ldr	r2, [r7, #0]
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	4413      	add	r3, r2
 80009be:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 80009c2:	7819      	ldrb	r1, [r3, #0]
 80009c4:	687a      	ldr	r2, [r7, #4]
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	4413      	add	r3, r2
 80009ca:	3344      	adds	r3, #68	@ 0x44
 80009cc:	460a      	mov	r2, r1
 80009ce:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < SENSOR__MAX_NB_OF_ZONES; i++)
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	3301      	adds	r3, #1
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	2b3f      	cmp	r3, #63	@ 0x3f
 80009da:	dda5      	ble.n	8000928 <AI_CopyInputData+0x1c>
  }

  return(0);
 80009dc:	2300      	movs	r3, #0
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3710      	adds	r7, #16
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40100000 	.word	0x40100000
 80009ec:	40a00000 	.word	0x40a00000

080009f0 <ValidateFrame>:
 * @param  AI_Data Pointer save the result of the frame validation
 * @param  Input_AI_Data Pointer to frame data structure
 * @retval 0
 */
static int ValidateFrame(HANDPOSTURE_Data_t *AI_Data, HANDPOSTURE_Input_Data_t *Input_AI_Data)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b087      	sub	sp, #28
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	6039      	str	r1, [r7, #0]
  bool valid;
  int idx;
  float min = 4000.0;
 80009fa:	4b53      	ldr	r3, [pc, #332]	@ (8000b48 <ValidateFrame+0x158>)
 80009fc:	613b      	str	r3, [r7, #16]

  /* Find minimum valid distance */
  for (idx = 0; idx < SENSOR__MAX_NB_OF_ZONES; idx++){
 80009fe:	2300      	movs	r3, #0
 8000a00:	617b      	str	r3, [r7, #20]
 8000a02:	e02e      	b.n	8000a62 <ValidateFrame+0x72>
    if ((Input_AI_Data->nb_targets[idx] > 0)
 8000a04:	683a      	ldr	r2, [r7, #0]
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	4413      	add	r3, r2
 8000a0a:	3344      	adds	r3, #68	@ 0x44
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d024      	beq.n	8000a5c <ValidateFrame+0x6c>
      && (Input_AI_Data->target_status[idx] == RANGING_OK_5 || Input_AI_Data->target_status[idx] == RANGING_OK_9)
 8000a12:	683a      	ldr	r2, [r7, #0]
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	4413      	add	r3, r2
 8000a18:	3304      	adds	r3, #4
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	2b05      	cmp	r3, #5
 8000a1e:	d006      	beq.n	8000a2e <ValidateFrame+0x3e>
 8000a20:	683a      	ldr	r2, [r7, #0]
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	4413      	add	r3, r2
 8000a26:	3304      	adds	r3, #4
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b09      	cmp	r3, #9
 8000a2c:	d116      	bne.n	8000a5c <ValidateFrame+0x6c>
      && Input_AI_Data->ranging[idx] < min)
 8000a2e:	683a      	ldr	r2, [r7, #0]
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	3320      	adds	r3, #32
 8000a34:	009b      	lsls	r3, r3, #2
 8000a36:	4413      	add	r3, r2
 8000a38:	3304      	adds	r3, #4
 8000a3a:	edd3 7a00 	vldr	s15, [r3]
 8000a3e:	ed97 7a04 	vldr	s14, [r7, #16]
 8000a42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a4a:	dd07      	ble.n	8000a5c <ValidateFrame+0x6c>
    {
      min = Input_AI_Data->ranging[idx];
 8000a4c:	683a      	ldr	r2, [r7, #0]
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	3320      	adds	r3, #32
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	4413      	add	r3, r2
 8000a56:	3304      	adds	r3, #4
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	613b      	str	r3, [r7, #16]
  for (idx = 0; idx < SENSOR__MAX_NB_OF_ZONES; idx++){
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	617b      	str	r3, [r7, #20]
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a66:	ddcd      	ble.n	8000a04 <ValidateFrame+0x14>
    }
  }

  if (min < MAX_DISTANCE && min > MIN_DISTANCE)
 8000a68:	edd7 7a04 	vldr	s15, [r7, #16]
 8000a6c:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8000b4c <ValidateFrame+0x15c>
 8000a70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a78:	d50c      	bpl.n	8000a94 <ValidateFrame+0xa4>
 8000a7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000a7e:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8000b50 <ValidateFrame+0x160>
 8000a82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a8a:	dd03      	ble.n	8000a94 <ValidateFrame+0xa4>
    AI_Data->is_valid_frame = 1;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2201      	movs	r2, #1
 8000a90:	701a      	strb	r2, [r3, #0]
 8000a92:	e002      	b.n	8000a9a <ValidateFrame+0xaa>
  else
    AI_Data->is_valid_frame = 0;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2200      	movs	r2, #0
 8000a98:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx <SENSOR__MAX_NB_OF_ZONES; idx++)
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]
 8000a9e:	e049      	b.n	8000b34 <ValidateFrame+0x144>
  {
    /* Check if the data is valid */
    valid = (Input_AI_Data->nb_targets[idx] > 0)
 8000aa0:	683a      	ldr	r2, [r7, #0]
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	3344      	adds	r3, #68	@ 0x44
 8000aa8:	781b      	ldrb	r3, [r3, #0]
        && (Input_AI_Data->target_status[idx] == RANGING_OK_5 || Input_AI_Data->target_status[idx] == RANGING_OK_9)
        && (Input_AI_Data->ranging[idx] < min + BACKGROUND_REMOVAL);
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d022      	beq.n	8000af4 <ValidateFrame+0x104>
        && (Input_AI_Data->target_status[idx] == RANGING_OK_5 || Input_AI_Data->target_status[idx] == RANGING_OK_9)
 8000aae:	683a      	ldr	r2, [r7, #0]
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	3304      	adds	r3, #4
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b05      	cmp	r3, #5
 8000aba:	d006      	beq.n	8000aca <ValidateFrame+0xda>
 8000abc:	683a      	ldr	r2, [r7, #0]
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	3304      	adds	r3, #4
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	2b09      	cmp	r3, #9
 8000ac8:	d114      	bne.n	8000af4 <ValidateFrame+0x104>
        && (Input_AI_Data->ranging[idx] < min + BACKGROUND_REMOVAL);
 8000aca:	683a      	ldr	r2, [r7, #0]
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	3320      	adds	r3, #32
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	4413      	add	r3, r2
 8000ad4:	3304      	adds	r3, #4
 8000ad6:	ed93 7a00 	vldr	s14, [r3]
 8000ada:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ade:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8000b54 <ValidateFrame+0x164>
 8000ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000ae6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aee:	d501      	bpl.n	8000af4 <ValidateFrame+0x104>
 8000af0:	2301      	movs	r3, #1
 8000af2:	e000      	b.n	8000af6 <ValidateFrame+0x106>
 8000af4:	2300      	movs	r3, #0
    valid = (Input_AI_Data->nb_targets[idx] > 0)
 8000af6:	73fb      	strb	r3, [r7, #15]
 8000af8:	7bfb      	ldrb	r3, [r7, #15]
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	73fb      	strb	r3, [r7, #15]

    /* If not valid, load default value */
    if (!valid)
 8000b00:	7bfb      	ldrb	r3, [r7, #15]
 8000b02:	f083 0301 	eor.w	r3, r3, #1
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d010      	beq.n	8000b2e <ValidateFrame+0x13e>
    {
      Input_AI_Data->ranging[idx] = DEFAULT_RANGING_VALUE;
 8000b0c:	683a      	ldr	r2, [r7, #0]
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	3320      	adds	r3, #32
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	4413      	add	r3, r2
 8000b16:	3304      	adds	r3, #4
 8000b18:	4a0b      	ldr	r2, [pc, #44]	@ (8000b48 <ValidateFrame+0x158>)
 8000b1a:	601a      	str	r2, [r3, #0]
      Input_AI_Data->peak[idx] = DEFAULT_SIGNAL_VALUE;
 8000b1c:	683a      	ldr	r2, [r7, #0]
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	3360      	adds	r3, #96	@ 0x60
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	4413      	add	r3, r2
 8000b26:	3304      	adds	r3, #4
 8000b28:	f04f 0200 	mov.w	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
  for (idx = 0; idx <SENSOR__MAX_NB_OF_ZONES; idx++)
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	3301      	adds	r3, #1
 8000b32:	617b      	str	r3, [r7, #20]
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b38:	ddb2      	ble.n	8000aa0 <ValidateFrame+0xb0>
    }
  }
  return(0);
 8000b3a:	2300      	movs	r3, #0
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	371c      	adds	r7, #28
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	457a0000 	.word	0x457a0000
 8000b4c:	43af0000 	.word	0x43af0000
 8000b50:	43160000 	.word	0x43160000
 8000b54:	42f00000 	.word	0x42f00000

08000b58 <NormalizeData>:
 * @param  normalized_data Destination of the normalized data
 * @param  Input_AI_Data Source of the data to normalize
 * @retval 0
 */
static int NormalizeData(float *normalized_data, HANDPOSTURE_Input_Data_t *Input_AI_Data)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	6039      	str	r1, [r7, #0]
  int idx;
  for (idx = 0; idx <SENSOR__MAX_NB_OF_ZONES; idx++)
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	e02f      	b.n	8000bc8 <NormalizeData+0x70>
  {
    /* Signed 14.2 */
    normalized_data[2*idx] = (Input_AI_Data->ranging[idx] - NORMALIZATION_RANGING_CENTER) / NORMALIZATION_RANGING_IQR;
 8000b68:	683a      	ldr	r2, [r7, #0]
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	3320      	adds	r3, #32
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	4413      	add	r3, r2
 8000b72:	3304      	adds	r3, #4
 8000b74:	edd3 7a00 	vldr	s15, [r3]
 8000b78:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8000bdc <NormalizeData+0x84>
 8000b7c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	00db      	lsls	r3, r3, #3
 8000b84:	687a      	ldr	r2, [r7, #4]
 8000b86:	4413      	add	r3, r2
 8000b88:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8000be0 <NormalizeData+0x88>
 8000b8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b90:	edc3 7a00 	vstr	s15, [r3]
    /* Unsigned 21.11 */
    normalized_data[2*idx + 1] = (Input_AI_Data->peak[idx] - NORMALIZATION_SIGNAL_CENTER) / NORMALIZATION_SIGNAL_IQR;
 8000b94:	683a      	ldr	r2, [r7, #0]
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	3360      	adds	r3, #96	@ 0x60
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	4413      	add	r3, r2
 8000b9e:	3304      	adds	r3, #4
 8000ba0:	edd3 7a00 	vldr	s15, [r3]
 8000ba4:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8000be4 <NormalizeData+0x8c>
 8000ba8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	00db      	lsls	r3, r3, #3
 8000bb0:	3304      	adds	r3, #4
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8000be8 <NormalizeData+0x90>
 8000bba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bbe:	edc3 7a00 	vstr	s15, [r3]
  for (idx = 0; idx <SENSOR__MAX_NB_OF_ZONES; idx++)
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	2b3f      	cmp	r3, #63	@ 0x3f
 8000bcc:	ddcc      	ble.n	8000b68 <NormalizeData+0x10>
  }

  return(0);
 8000bce:	2300      	movs	r3, #0
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3714      	adds	r7, #20
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	43938000 	.word	0x43938000
 8000be0:	43440000 	.word	0x43440000
 8000be4:	438c8000 	.word	0x438c8000
 8000be8:	43e20000 	.word	0x43e20000

08000bec <output_selection>:
 * @param  len Length of the NN output vector
 * @param  AI_Data AI data to update
 * @retval 0
 */
static int output_selection(const float *data, uint32_t len, HANDPOSTURE_Data_t *AI_Data)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
  int current_label = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]

  /* If the frame is valid, get the chosen label out of the NN output */
  if (AI_Data->is_valid_frame)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d007      	beq.n	8000c14 <output_selection+0x28>
  {
    /* In this example we are using an ArgMax function, but another function can be developed */
    current_label = argmax(data, len, THRESHOLD_NN_OUTPUT);
 8000c04:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8000c2c <output_selection+0x40>
 8000c08:	68b9      	ldr	r1, [r7, #8]
 8000c0a:	68f8      	ldr	r0, [r7, #12]
 8000c0c:	f7ff fd8c 	bl	8000728 <argmax>
 8000c10:	6178      	str	r0, [r7, #20]
 8000c12:	e001      	b.n	8000c18 <output_selection+0x2c>
  }
  /* If the frame is not valid, set the output label as 0 */
  else
  {
    current_label = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]
  }

  /* Filtering */
  label_filter(current_label, AI_Data);
 8000c18:	6879      	ldr	r1, [r7, #4]
 8000c1a:	6978      	ldr	r0, [r7, #20]
 8000c1c:	f7ff fdc3 	bl	80007a6 <label_filter>

  return(0);
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3718      	adds	r7, #24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	3f666666 	.word	0x3f666666

08000c30 <Network_Init>:
 * @brief  NETWORK Initialization
 * @param  App_Config_Ptr Pointer to application context
 * @retval None
 */
void Network_Init(AppConfig_TypeDef *App_Config)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /* Init the hand posture NN */
  if (AI_Init() < 0)
 8000c38:	f7ff fde6 	bl	8000808 <AI_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	da04      	bge.n	8000c4c <Network_Init+0x1c>
  {
    printf("AI_Init failed\n");
 8000c42:	4804      	ldr	r0, [pc, #16]	@ (8000c54 <Network_Init+0x24>)
 8000c44:	f022 fb4a 	bl	80232dc <puts>
    Error_Handler();
 8000c48:	f000 ff74 	bl	8001b34 <Error_Handler>
  }

}
 8000c4c:	bf00      	nop
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	08029090 	.word	0x08029090

08000c58 <Network_Preprocess>:
 * @brief  NETWORK Pre-processing
 * @param  App_Config_Ptr Pointer to application context
 * @retval None
 */
void Network_Preprocess(AppConfig_TypeDef *App_Config)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  /* If a new data need to be pre-processed */
  if (App_Config->new_data_received)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000c66:	f893 39a0 	ldrb.w	r3, [r3, #2464]	@ 0x9a0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d042      	beq.n	8000cf4 <Network_Preprocess+0x9c>
  {
    /* Copy the ranging data into the NN input buffer */
    if (AI_CopyInputData(&(App_Config->HANDPOSTURE_Input_Data), &(App_Config->RangingData)) < 0)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	f503 5326 	add.w	r3, r3, #10624	@ 0x2980
 8000c74:	3324      	adds	r3, #36	@ 0x24
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	f502 5211 	add.w	r2, r2, #9280	@ 0x2440
 8000c7c:	320c      	adds	r2, #12
 8000c7e:	4611      	mov	r1, r2
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fe43 	bl	800090c <AI_CopyInputData>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	da04      	bge.n	8000c96 <Network_Preprocess+0x3e>
    {
      printf("AI_CopyInputData failed\n");
 8000c8c:	481b      	ldr	r0, [pc, #108]	@ (8000cfc <Network_Preprocess+0xa4>)
 8000c8e:	f022 fb25 	bl	80232dc <puts>
      Error_Handler();
 8000c92:	f000 ff4f 	bl	8001b34 <Error_Handler>
    }

    /* Validate NN input data */
    if (ValidateFrame(&(App_Config->AI_Data), &(App_Config->HANDPOSTURE_Input_Data)) < 0)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	f503 5330 	add.w	r3, r3, #11264	@ 0x2c00
 8000c9c:	3328      	adds	r3, #40	@ 0x28
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	f502 5226 	add.w	r2, r2, #10624	@ 0x2980
 8000ca4:	3224      	adds	r2, #36	@ 0x24
 8000ca6:	4611      	mov	r1, r2
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff fea1 	bl	80009f0 <ValidateFrame>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	da04      	bge.n	8000cbe <Network_Preprocess+0x66>
    {
      printf("ValidateFrame failed\n");
 8000cb4:	4812      	ldr	r0, [pc, #72]	@ (8000d00 <Network_Preprocess+0xa8>)
 8000cb6:	f022 fb11 	bl	80232dc <puts>
      Error_Handler();
 8000cba:	f000 ff3b 	bl	8001b34 <Error_Handler>
    }

    /* If the frame is valid */
    if (App_Config->AI_Data.is_valid_frame)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000cc4:	f893 3c28 	ldrb.w	r3, [r3, #3112]	@ 0xc28
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d013      	beq.n	8000cf4 <Network_Preprocess+0x9c>
    {
      /* Normalize NN input data */
      if (NormalizeData(App_Config->aiInData, &(App_Config->HANDPOSTURE_Input_Data)) < 0)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	f503 5330 	add.w	r3, r3, #11264	@ 0x2c00
 8000cd2:	3330      	adds	r3, #48	@ 0x30
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	f502 5226 	add.w	r2, r2, #10624	@ 0x2980
 8000cda:	3224      	adds	r2, #36	@ 0x24
 8000cdc:	4611      	mov	r1, r2
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff ff3a 	bl	8000b58 <NormalizeData>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	da04      	bge.n	8000cf4 <Network_Preprocess+0x9c>
      {
        printf("NormalizeData failed\n");
 8000cea:	4806      	ldr	r0, [pc, #24]	@ (8000d04 <Network_Preprocess+0xac>)
 8000cec:	f022 faf6 	bl	80232dc <puts>
        Error_Handler();
 8000cf0:	f000 ff20 	bl	8001b34 <Error_Handler>
      }
    }
  }

}
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	080290a0 	.word	0x080290a0
 8000d00:	080290b8 	.word	0x080290b8
 8000d04:	080290d0 	.word	0x080290d0

08000d08 <Network_Inference>:
 * @brief  NETWORK Inference
 * @param  App_Config_Ptr Pointer to application context
 * @retval None
 */
void Network_Inference(AppConfig_TypeDef *App_Config)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* If a new data need to be processed and the frame is valid */
  if (App_Config->new_data_received && App_Config->AI_Data.is_valid_frame)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000d16:	f893 39a0 	ldrb.w	r3, [r3, #2464]	@ 0x9a0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d01b      	beq.n	8000d56 <Network_Inference+0x4e>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000d24:	f893 3c28 	ldrb.w	r3, [r3, #3112]	@ 0xc28
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d014      	beq.n	8000d56 <Network_Inference+0x4e>
  {
    /* Run NN inference */
    if (AI_Run(App_Config->aiInData, App_Config->aiOutData) < 0)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f503 5330 	add.w	r3, r3, #11264	@ 0x2c00
 8000d32:	3330      	adds	r3, #48	@ 0x30
 8000d34:	687a      	ldr	r2, [r7, #4]
 8000d36:	f502 5238 	add.w	r2, r2, #11776	@ 0x2e00
 8000d3a:	3230      	adds	r2, #48	@ 0x30
 8000d3c:	4611      	mov	r1, r2
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff fdbc 	bl	80008bc <AI_Run>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	da18      	bge.n	8000d7c <Network_Inference+0x74>
    {
      printf("AI_Run failed\n");
 8000d4a:	480e      	ldr	r0, [pc, #56]	@ (8000d84 <Network_Inference+0x7c>)
 8000d4c:	f022 fac6 	bl	80232dc <puts>
      Error_Handler();
 8000d50:	f000 fef0 	bl	8001b34 <Error_Handler>
    if (AI_Run(App_Config->aiInData, App_Config->aiOutData) < 0)
 8000d54:	e012      	b.n	8000d7c <Network_Inference+0x74>
    }
  }
  else
  {
	  for (int i = 0; i<AI_NETWORK_OUT_1_SIZE; i++) App_Config->aiOutData[i] = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	e00b      	b.n	8000d74 <Network_Inference+0x6c>
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	f603 338c 	addw	r3, r3, #2956	@ 0xb8c
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	4413      	add	r3, r2
 8000d68:	f04f 0200 	mov.w	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	3301      	adds	r3, #1
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	2b07      	cmp	r3, #7
 8000d78:	ddf0      	ble.n	8000d5c <Network_Inference+0x54>
  }

}
 8000d7a:	bf00      	nop
 8000d7c:	bf00      	nop
 8000d7e:	3710      	adds	r7, #16
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	080290e8 	.word	0x080290e8

08000d88 <Network_Postprocess>:
 * @brief  NETWORK Post-processing
 * @param  App_Config_Ptr Pointer to application context
 * @retval None
 */
void Network_Postprocess(AppConfig_TypeDef *App_Config)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* If a new data need to be post-processed */
  if (App_Config->new_data_received)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000d96:	f893 39a0 	ldrb.w	r3, [r3, #2464]	@ 0x9a0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d013      	beq.n	8000dc6 <Network_Postprocess+0x3e>
  {
    /* Get class from the NN output vector */
    if (output_selection(App_Config->aiOutData, AI_NETWORK_OUT_1_SIZE, &(App_Config->AI_Data)) < 0)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f503 5338 	add.w	r3, r3, #11776	@ 0x2e00
 8000da4:	3330      	adds	r3, #48	@ 0x30
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	f502 5230 	add.w	r2, r2, #11264	@ 0x2c00
 8000dac:	3228      	adds	r2, #40	@ 0x28
 8000dae:	2108      	movs	r1, #8
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff ff1b 	bl	8000bec <output_selection>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	da04      	bge.n	8000dc6 <Network_Postprocess+0x3e>
    {
      printf("AI_Run failed\n");
 8000dbc:	4804      	ldr	r0, [pc, #16]	@ (8000dd0 <Network_Postprocess+0x48>)
 8000dbe:	f022 fa8d 	bl	80232dc <puts>
      Error_Handler();
 8000dc2:	f000 feb7 	bl	8001b34 <Error_Handler>
    }
  }

}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	080290e8 	.word	0x080290e8

08000dd4 <apps_layer_vl53lmz_Configure>:
 * @brief Configure the VL53LMZ sensor
 * @param (AppConfig_TypeDef) *App_Config : configuration to be applied
 * @return (int) status : 0 if OK
 */
static uint8_t apps_layer_vl53lmz_Configure(AppConfig_TypeDef *App_Config)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  uint8_t status = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	73fb      	strb	r3, [r7, #15]

  status = vl53lmz_set_resolution(&(App_Config->ToFDev),
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f103 0278 	add.w	r2, r3, #120	@ 0x78
      App_Config->Params.Resolution==RESOLUTION_16 ? VL53LMZ_RESOLUTION_4X4 : VL53LMZ_RESOLUTION_8X8);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	689b      	ldr	r3, [r3, #8]
  status = vl53lmz_set_resolution(&(App_Config->ToFDev),
 8000dea:	2b10      	cmp	r3, #16
 8000dec:	d101      	bne.n	8000df2 <apps_layer_vl53lmz_Configure+0x1e>
 8000dee:	2310      	movs	r3, #16
 8000df0:	e000      	b.n	8000df4 <apps_layer_vl53lmz_Configure+0x20>
 8000df2:	2340      	movs	r3, #64	@ 0x40
 8000df4:	4619      	mov	r1, r3
 8000df6:	4610      	mov	r0, r2
 8000df8:	f002 ff4d 	bl	8003c96 <vl53lmz_set_resolution>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	73fb      	strb	r3, [r7, #15]
  if (status != VL53LMZ_STATUS_OK){
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d007      	beq.n	8000e16 <apps_layer_vl53lmz_Configure+0x42>
    printf("ERROR at %s(%d) : vl53lmz_set_resolution failed : %d\n",__func__, __LINE__,status);
 8000e06:	7bfb      	ldrb	r3, [r7, #15]
 8000e08:	222f      	movs	r2, #47	@ 0x2f
 8000e0a:	493d      	ldr	r1, [pc, #244]	@ (8000f00 <apps_layer_vl53lmz_Configure+0x12c>)
 8000e0c:	483d      	ldr	r0, [pc, #244]	@ (8000f04 <apps_layer_vl53lmz_Configure+0x130>)
 8000e0e:	f022 f9fd 	bl	802320c <iprintf>
    return(status);
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
 8000e14:	e070      	b.n	8000ef8 <apps_layer_vl53lmz_Configure+0x124>
  }

  status = vl53lmz_set_ranging_frequency_hz(&(App_Config->ToFDev), (MILLIHERTZ_TO_HERTZ/App_Config->Params.RangingPeriod));
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f103 0278 	add.w	r2, r3, #120	@ 0x78
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000e24:	fb91 f3f3 	sdiv	r3, r1, r3
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4610      	mov	r0, r2
 8000e2e:	f003 f825 	bl	8003e7c <vl53lmz_set_ranging_frequency_hz>
 8000e32:	4603      	mov	r3, r0
 8000e34:	73fb      	strb	r3, [r7, #15]
  if (status != VL53LMZ_STATUS_OK){
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d007      	beq.n	8000e4c <apps_layer_vl53lmz_Configure+0x78>
    printf("ERROR at %s(%d) : vl53lmz_set_ranging_period_ms failed : %d\n",__func__, __LINE__,status);
 8000e3c:	7bfb      	ldrb	r3, [r7, #15]
 8000e3e:	2235      	movs	r2, #53	@ 0x35
 8000e40:	492f      	ldr	r1, [pc, #188]	@ (8000f00 <apps_layer_vl53lmz_Configure+0x12c>)
 8000e42:	4831      	ldr	r0, [pc, #196]	@ (8000f08 <apps_layer_vl53lmz_Configure+0x134>)
 8000e44:	f022 f9e2 	bl	802320c <iprintf>
    return(status);
 8000e48:	7bfb      	ldrb	r3, [r7, #15]
 8000e4a:	e055      	b.n	8000ef8 <apps_layer_vl53lmz_Configure+0x124>
  }

  status = vl53lmz_set_integration_time_ms(&(App_Config->ToFDev), App_Config->Params.IntegrationTime);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f103 0278 	add.w	r2, r3, #120	@ 0x78
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	691b      	ldr	r3, [r3, #16]
 8000e56:	4619      	mov	r1, r3
 8000e58:	4610      	mov	r0, r2
 8000e5a:	f003 f85b 	bl	8003f14 <vl53lmz_set_integration_time_ms>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	73fb      	strb	r3, [r7, #15]
  if (status != VL53LMZ_STATUS_OK){
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d007      	beq.n	8000e78 <apps_layer_vl53lmz_Configure+0xa4>
    printf("ERROR at %s(%d) : vl53lmz_set_integration_time_ms failed : %d\n",__func__, __LINE__,status);
 8000e68:	7bfb      	ldrb	r3, [r7, #15]
 8000e6a:	223b      	movs	r2, #59	@ 0x3b
 8000e6c:	4924      	ldr	r1, [pc, #144]	@ (8000f00 <apps_layer_vl53lmz_Configure+0x12c>)
 8000e6e:	4827      	ldr	r0, [pc, #156]	@ (8000f0c <apps_layer_vl53lmz_Configure+0x138>)
 8000e70:	f022 f9cc 	bl	802320c <iprintf>
    return(status);
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
 8000e76:	e03f      	b.n	8000ef8 <apps_layer_vl53lmz_Configure+0x124>
  }

  status = vl53lmz_set_xtalk_margin(&(App_Config->ToFDev), XTALK_MARGIN);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3378      	adds	r3, #120	@ 0x78
 8000e7c:	2132      	movs	r1, #50	@ 0x32
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f004 fb5e 	bl	8005540 <vl53lmz_set_xtalk_margin>
 8000e84:	4603      	mov	r3, r0
 8000e86:	73fb      	strb	r3, [r7, #15]
  if (status != VL53LMZ_STATUS_OK){
 8000e88:	7bfb      	ldrb	r3, [r7, #15]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d007      	beq.n	8000e9e <apps_layer_vl53lmz_Configure+0xca>
    printf("ERROR at %s(%d) : vl53lmz_set_xtalk_margin failed : %d\n",__func__, __LINE__,status);
 8000e8e:	7bfb      	ldrb	r3, [r7, #15]
 8000e90:	2241      	movs	r2, #65	@ 0x41
 8000e92:	491b      	ldr	r1, [pc, #108]	@ (8000f00 <apps_layer_vl53lmz_Configure+0x12c>)
 8000e94:	481e      	ldr	r0, [pc, #120]	@ (8000f10 <apps_layer_vl53lmz_Configure+0x13c>)
 8000e96:	f022 f9b9 	bl	802320c <iprintf>
    return(status);
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
 8000e9c:	e02c      	b.n	8000ef8 <apps_layer_vl53lmz_Configure+0x124>
  }

  /* Set Closest target first */
  status = vl53lmz_set_target_order(&(App_Config->ToFDev), VL53LMZ_TARGET_ORDER_CLOSEST);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	3378      	adds	r3, #120	@ 0x78
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f003 f8ee 	bl	8004086 <vl53lmz_set_target_order>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	73fb      	strb	r3, [r7, #15]
  if (status != VL53LMZ_STATUS_OK){
 8000eae:	7bfb      	ldrb	r3, [r7, #15]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d007      	beq.n	8000ec4 <apps_layer_vl53lmz_Configure+0xf0>
    printf("ERROR at %s(%d) : vl53lmz_set_target_order failed : %d\n",__func__, __LINE__,status);
 8000eb4:	7bfb      	ldrb	r3, [r7, #15]
 8000eb6:	2248      	movs	r2, #72	@ 0x48
 8000eb8:	4911      	ldr	r1, [pc, #68]	@ (8000f00 <apps_layer_vl53lmz_Configure+0x12c>)
 8000eba:	4816      	ldr	r0, [pc, #88]	@ (8000f14 <apps_layer_vl53lmz_Configure+0x140>)
 8000ebc:	f022 f9a6 	bl	802320c <iprintf>
    return(status);
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
 8000ec2:	e019      	b.n	8000ef8 <apps_layer_vl53lmz_Configure+0x124>
  }

  /* Sharpener sets to 5 */
  status = vl53lmz_set_sharpener_percent(&(App_Config->ToFDev), 5);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3378      	adds	r3, #120	@ 0x78
 8000ec8:	2105      	movs	r1, #5
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f003 f884 	bl	8003fd8 <vl53lmz_set_sharpener_percent>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	73fb      	strb	r3, [r7, #15]
  if (status != VL53LMZ_STATUS_OK){
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d007      	beq.n	8000eea <apps_layer_vl53lmz_Configure+0x116>
    printf("ERROR at %s(%d) : vl53lmz_set_sharpener_percent failed : %d\n",__func__, __LINE__,status);
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
 8000edc:	224f      	movs	r2, #79	@ 0x4f
 8000ede:	4908      	ldr	r1, [pc, #32]	@ (8000f00 <apps_layer_vl53lmz_Configure+0x12c>)
 8000ee0:	480d      	ldr	r0, [pc, #52]	@ (8000f18 <apps_layer_vl53lmz_Configure+0x144>)
 8000ee2:	f022 f993 	bl	802320c <iprintf>
    return(status);
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
 8000ee8:	e006      	b.n	8000ef8 <apps_layer_vl53lmz_Configure+0x124>
  }

  /* Reset the flag indicating the parameters has been modified */
  App_Config->params_modif = false;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f883 29a1 	strb.w	r2, [r3, #2465]	@ 0x9a1

  return(status);
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	0802970c 	.word	0x0802970c
 8000f04:	08029518 	.word	0x08029518
 8000f08:	08029550 	.word	0x08029550
 8000f0c:	08029590 	.word	0x08029590
 8000f10:	080295d0 	.word	0x080295d0
 8000f14:	08029608 	.word	0x08029608
 8000f18:	08029640 	.word	0x08029640

08000f1c <Sensor_Init>:
 * @brief  SENSOR Initialization
 * @param  App_Config_Ptr Pointer to application context
 * @retval None
 */
void Sensor_Init(AppConfig_TypeDef *App_Config)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* Initialize the sensor platform */
  if (LMZ_platform_init(&(App_Config->ToFDev.platform)) < 0)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3378      	adds	r3, #120	@ 0x78
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f004 fb39 	bl	80055a0 <LMZ_platform_init>
    printf("LMZ_platform_init failed\n");
    Error_Handler();
  }

  /* Initialize the sensor */
  if (vl53lmz_init(&(App_Config->ToFDev)) != VL53LMZ_STATUS_OK)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	3378      	adds	r3, #120	@ 0x78
 8000f32:	4618      	mov	r0, r3
 8000f34:	f001 fde7 	bl	8002b06 <vl53lmz_init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d004      	beq.n	8000f48 <Sensor_Init+0x2c>
  {
    printf("vl53lmz_init failed\n");
 8000f3e:	4804      	ldr	r0, [pc, #16]	@ (8000f50 <Sensor_Init+0x34>)
 8000f40:	f022 f9cc 	bl	80232dc <puts>
    Error_Handler();
 8000f44:	f000 fdf6 	bl	8001b34 <Error_Handler>
  }
}
 8000f48:	bf00      	nop
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	08029680 	.word	0x08029680

08000f54 <Sensor_StartRanging>:
 * @brief  SENSOR Start ranging
 * @param  App_Config_Ptr Pointer to application context
 * @retval None
 */
void Sensor_StartRanging(AppConfig_TypeDef *App_Config)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  /* If parameters has been modified */
  if (App_Config->params_modif)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000f62:	f893 39a1 	ldrb.w	r3, [r3, #2465]	@ 0x9a1
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d00a      	beq.n	8000f80 <Sensor_StartRanging+0x2c>
  {
    /* Configure the sensor */
    if (apps_layer_vl53lmz_Configure(App_Config) != VL53LMZ_STATUS_OK)
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff ff32 	bl	8000dd4 <apps_layer_vl53lmz_Configure>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d004      	beq.n	8000f80 <Sensor_StartRanging+0x2c>
    {
      printf("VL53LMZ_Configure failed\n");
 8000f76:	480d      	ldr	r0, [pc, #52]	@ (8000fac <Sensor_StartRanging+0x58>)
 8000f78:	f022 f9b0 	bl	80232dc <puts>
      Error_Handler();
 8000f7c:	f000 fdda 	bl	8001b34 <Error_Handler>
    }
  }

  /* Start the sensor */
  if (vl53lmz_start_ranging(&(App_Config->ToFDev)) != VL53LMZ_STATUS_OK)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3378      	adds	r3, #120	@ 0x78
 8000f84:	4618      	mov	r0, r3
 8000f86:	f002 fbac 	bl	80036e2 <vl53lmz_start_ranging>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d004      	beq.n	8000f9a <Sensor_StartRanging+0x46>
  {
    printf("vl53lmz_start_ranging failed\n");
 8000f90:	4807      	ldr	r0, [pc, #28]	@ (8000fb0 <Sensor_StartRanging+0x5c>)
 8000f92:	f022 f9a3 	bl	80232dc <puts>
    Error_Handler();
 8000f96:	f000 fdcd 	bl	8001b34 <Error_Handler>
  }

  /* Set the LED */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	2120      	movs	r1, #32
 8000f9e:	4805      	ldr	r0, [pc, #20]	@ (8000fb4 <Sensor_StartRanging+0x60>)
 8000fa0:	f006 fa2c 	bl	80073fc <HAL_GPIO_WritePin>

}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	08029694 	.word	0x08029694
 8000fb0:	080296b0 	.word	0x080296b0
 8000fb4:	40020000 	.word	0x40020000

08000fb8 <Sensor_GetRangingData>:
 * @brief  SENSOR Get ranging data
 * @param  App_Config_Ptr Pointer to application context
 * @retval None
 */
void Sensor_GetRangingData(AppConfig_TypeDef *App_Config)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* If parameters has been modified */
  if (App_Config->params_modif)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000fc6:	f893 39a1 	ldrb.w	r3, [r3, #2465]	@ 0x9a1
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d00a      	beq.n	8000fe4 <Sensor_GetRangingData+0x2c>
  {
    /* Configure the sensor */
    if (apps_layer_vl53lmz_Configure(App_Config) != VL53LMZ_STATUS_OK)
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff ff00 	bl	8000dd4 <apps_layer_vl53lmz_Configure>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d004      	beq.n	8000fe4 <Sensor_GetRangingData+0x2c>
    {
      printf("VL53LMZ_Configure failed\n");
 8000fda:	481b      	ldr	r0, [pc, #108]	@ (8001048 <Sensor_GetRangingData+0x90>)
 8000fdc:	f022 f97e 	bl	80232dc <puts>
      Error_Handler();
 8000fe0:	f000 fda8 	bl	8001b34 <Error_Handler>
    }
  }

  /* Wait for the sensor to get data */
  if (wait_for_ToF_interrupt(&(App_Config->ToFDev.platform), &(App_Config->IntrCount)) == 0)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f103 0278 	add.w	r2, r3, #120	@ 0x78
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f503 5326 	add.w	r3, r3, #10624	@ 0x2980
 8000ff0:	331c      	adds	r3, #28
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4610      	mov	r0, r2
 8000ff6:	f004 fbe7 	bl	80057c8 <wait_for_ToF_interrupt>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d119      	bne.n	8001034 <Sensor_GetRangingData+0x7c>
  {
    /* Get data from the sensor */
    if (vl53lmz_get_ranging_data(&(App_Config->ToFDev), &(App_Config->RangingData)) != VL53LMZ_STATUS_OK)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f103 0278 	add.w	r2, r3, #120	@ 0x78
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f503 5311 	add.w	r3, r3, #9280	@ 0x2440
 800100c:	330c      	adds	r3, #12
 800100e:	4619      	mov	r1, r3
 8001010:	4610      	mov	r0, r2
 8001012:	f002 fca8 	bl	8003966 <vl53lmz_get_ranging_data>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d004      	beq.n	8001026 <Sensor_GetRangingData+0x6e>
    {
      printf("vl53lmz_get_ranging_data failed\n");
 800101c:	480b      	ldr	r0, [pc, #44]	@ (800104c <Sensor_GetRangingData+0x94>)
 800101e:	f022 f95d 	bl	80232dc <puts>
      Error_Handler();
 8001022:	f000 fd87 	bl	8001b34 <Error_Handler>
    }
    /* Set the flat indicating a new data has been received */
    App_Config->new_data_received = true;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800102c:	2201      	movs	r2, #1
 800102e:	f883 29a0 	strb.w	r2, [r3, #2464]	@ 0x9a0
  {
    /* Reset the flag indicating a new data has been received */
    App_Config->new_data_received = false;
  }

}
 8001032:	e005      	b.n	8001040 <Sensor_GetRangingData+0x88>
    App_Config->new_data_received = false;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800103a:	2200      	movs	r2, #0
 800103c:	f883 29a0 	strb.w	r2, [r3, #2464]	@ 0x9a0
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	08029694 	.word	0x08029694
 800104c:	080296d0 	.word	0x080296d0

08001050 <Sensor_StopRanging>:
 * @brief  SENSOR Stop ranging
 * @param  App_Config_Ptr Pointer to application context
 * @retval None
 */
void Sensor_StopRanging(AppConfig_TypeDef *App_Config)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* If the application is running */
  if (App_Config->app_run)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d00c      	beq.n	800107a <Sensor_StopRanging+0x2a>
  {
    /* Stop the sensor */
    if (vl53lmz_stop_ranging(&(App_Config->ToFDev)) != VL53LMZ_STATUS_OK)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3378      	adds	r3, #120	@ 0x78
 8001064:	4618      	mov	r0, r3
 8001066:	f002 fb56 	bl	8003716 <vl53lmz_stop_ranging>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d004      	beq.n	800107a <Sensor_StopRanging+0x2a>
    {
      printf("vl53lmz_stop_ranging failed\n");
 8001070:	4806      	ldr	r0, [pc, #24]	@ (800108c <Sensor_StopRanging+0x3c>)
 8001072:	f022 f933 	bl	80232dc <puts>
      Error_Handler();
 8001076:	f000 fd5d 	bl	8001b34 <Error_Handler>
    }
  }

  /* Reset the LED */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800107a:	2200      	movs	r2, #0
 800107c:	2120      	movs	r1, #32
 800107e:	4804      	ldr	r0, [pc, #16]	@ (8001090 <Sensor_StopRanging+0x40>)
 8001080:	f006 f9bc 	bl	80073fc <HAL_GPIO_WritePin>

}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	080296f0 	.word	0x080296f0
 8001090:	40020000 	.word	0x40020000

08001094 <HAL_GPIO_EXTI_Callback>:
 * @brief  SENSOR GPIO interrupt handler
 * @param  GPIO_Pin GPIO pin number
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == INT_C_Pin)
 800109e:	88fb      	ldrh	r3, [r7, #6]
 80010a0:	2b10      	cmp	r3, #16
 80010a2:	d10a      	bne.n	80010ba <HAL_GPIO_EXTI_Callback+0x26>
  {
    App_Config.IntrCount++;
 80010a4:	4b08      	ldr	r3, [pc, #32]	@ (80010c8 <HAL_GPIO_EXTI_Callback+0x34>)
 80010a6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80010aa:	f8d3 399c 	ldr.w	r3, [r3, #2460]	@ 0x99c
 80010ae:	3301      	adds	r3, #1
 80010b0:	4a05      	ldr	r2, [pc, #20]	@ (80010c8 <HAL_GPIO_EXTI_Callback+0x34>)
 80010b2:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80010b6:	f8c2 399c 	str.w	r3, [r2, #2460]	@ 0x99c
  }

}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	200042ec 	.word	0x200042ec

080010cc <select_target_index>:
extern HT_proc_t hand_tracker;
extern SEN_data_t sensor_data;

// Function to get the first target data
int* select_target_index(int *target_indices, int zone_index, VL53LMZ_ResultsData *pRangingData)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
	(void) pRangingData;
	target_indices[0] = zone_index * VL53LMZ_NB_TARGET_PER_ZONE;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	68ba      	ldr	r2, [r7, #8]
 80010dc:	601a      	str	r2, [r3, #0]
	return target_indices;
 80010de:	68fb      	ldr	r3, [r7, #12]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <SEN_CopyRangingData>:

// Format data from LMZ driver to Gesture algorithm
int SEN_CopyRangingData(SEN_data_t *pDest, VL53LMZ_ResultsData *pRangingData)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08c      	sub	sp, #48	@ 0x30
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
	float ranging, peak;
	bool valid;
	int idx, result, nb_targets, target_idx[3], target_status;

	if (pDest == NULL || pRangingData == NULL)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d002      	beq.n	8001102 <SEN_CopyRangingData+0x16>
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d102      	bne.n	8001108 <SEN_CopyRangingData+0x1c>
		return -1;
 8001102:	f04f 33ff 	mov.w	r3, #4294967295
 8001106:	e07a      	b.n	80011fe <SEN_CopyRangingData+0x112>

	pDest->timestamp_ms = (int32_t) HAL_GetTick();
 8001108:	f004 fc18 	bl	800593c <HAL_GetTick>
 800110c:	4603      	mov	r3, r0
 800110e:	461a      	mov	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	61da      	str	r2, [r3, #28]

	for (idx = 0; idx < pDest->info.nb_zones; idx++)
 8001114:	2300      	movs	r3, #0
 8001116:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001118:	e06b      	b.n	80011f2 <SEN_CopyRangingData+0x106>
	{
		select_target_index(target_idx, idx, pRangingData);
 800111a:	f107 0308 	add.w	r3, r7, #8
 800111e:	683a      	ldr	r2, [r7, #0]
 8001120:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff ffd2 	bl	80010cc <select_target_index>

		ranging = pRangingData->distance_mm[target_idx[0]] / 4.0; // Signed 14.2
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	683a      	ldr	r2, [r7, #0]
 800112c:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	4413      	add	r3, r2
 8001134:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001138:	4618      	mov	r0, r3
 800113a:	f018 fcf3 	bl	8019b24 <__aeabi_i2d>
 800113e:	f04f 0200 	mov.w	r2, #0
 8001142:	4b31      	ldr	r3, [pc, #196]	@ (8001208 <SEN_CopyRangingData+0x11c>)
 8001144:	f018 fe82 	bl	8019e4c <__aeabi_ddiv>
 8001148:	4602      	mov	r2, r0
 800114a:	460b      	mov	r3, r1
 800114c:	4610      	mov	r0, r2
 800114e:	4619      	mov	r1, r3
 8001150:	f019 f84a 	bl	801a1e8 <__aeabi_d2f>
 8001154:	4603      	mov	r3, r0
 8001156:	62bb      	str	r3, [r7, #40]	@ 0x28

		peak = pRangingData->signal_per_spad[target_idx[0]] / 2048.0; // Unsigned 21.11
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	683a      	ldr	r2, [r7, #0]
 800115c:	3390      	adds	r3, #144	@ 0x90
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	4618      	mov	r0, r3
 8001166:	f018 fccd 	bl	8019b04 <__aeabi_ui2d>
 800116a:	f04f 0200 	mov.w	r2, #0
 800116e:	4b27      	ldr	r3, [pc, #156]	@ (800120c <SEN_CopyRangingData+0x120>)
 8001170:	f018 fe6c 	bl	8019e4c <__aeabi_ddiv>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4610      	mov	r0, r2
 800117a:	4619      	mov	r1, r3
 800117c:	f019 f834 	bl	801a1e8 <__aeabi_d2f>
 8001180:	4603      	mov	r3, r0
 8001182:	627b      	str	r3, [r7, #36]	@ 0x24
		nb_targets = pRangingData->nb_target_detected[idx];
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001188:	4413      	add	r3, r2
 800118a:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	623b      	str	r3, [r7, #32]
		target_status = pRangingData->target_status[target_idx[0]];
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	683a      	ldr	r2, [r7, #0]
 8001196:	4413      	add	r3, r2
 8001198:	f893 3484 	ldrb.w	r3, [r3, #1156]	@ 0x484
 800119c:	61fb      	str	r3, [r7, #28]

		valid = (nb_targets > 0)
				&& (target_status == 5 || target_status == 6 || target_status == 9 || target_status == 10); //target_status == 4 -> wrapper on issue on L8
 800119e:	6a3b      	ldr	r3, [r7, #32]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	dd0d      	ble.n	80011c0 <SEN_CopyRangingData+0xd4>
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	2b05      	cmp	r3, #5
 80011a8:	d008      	beq.n	80011bc <SEN_CopyRangingData+0xd0>
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	2b06      	cmp	r3, #6
 80011ae:	d005      	beq.n	80011bc <SEN_CopyRangingData+0xd0>
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	2b09      	cmp	r3, #9
 80011b4:	d002      	beq.n	80011bc <SEN_CopyRangingData+0xd0>
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	2b0a      	cmp	r3, #10
 80011ba:	d101      	bne.n	80011c0 <SEN_CopyRangingData+0xd4>
 80011bc:	2301      	movs	r3, #1
 80011be:	e000      	b.n	80011c2 <SEN_CopyRangingData+0xd6>
 80011c0:	2300      	movs	r3, #0
		valid = (nb_targets > 0)
 80011c2:	76fb      	strb	r3, [r7, #27]
 80011c4:	7efb      	ldrb	r3, [r7, #27]
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	76fb      	strb	r3, [r7, #27]
		result = SEN_set_data(pDest, idx, ranging, peak, valid);
 80011cc:	7efb      	ldrb	r3, [r7, #27]
 80011ce:	461a      	mov	r2, r3
 80011d0:	edd7 0a09 	vldr	s1, [r7, #36]	@ 0x24
 80011d4:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 80011d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f020 fbcc 	bl	8021978 <SEN_set_data>
 80011e0:	6178      	str	r0, [r7, #20]

		if (result != 0)
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <SEN_CopyRangingData+0x100>
			return result;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	e008      	b.n	80011fe <SEN_CopyRangingData+0x112>
	for (idx = 0; idx < pDest->info.nb_zones; idx++)
 80011ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011ee:	3301      	adds	r3, #1
 80011f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80011f8:	429a      	cmp	r2, r3
 80011fa:	db8e      	blt.n	800111a <SEN_CopyRangingData+0x2e>
	}

	return 0;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3730      	adds	r7, #48	@ 0x30
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40100000 	.word	0x40100000
 800120c:	40a00000 	.word	0x40a00000

08001210 <Add_SensorTxData_Gesture>:

void Add_SensorTxData_Gesture(SensorTxData_t *Buffer)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
	uint16_t tempDegree = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	81fb      	strh	r3, [r7, #14]
	Buffer->Level = 0;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2200      	movs	r2, #0
 8001220:	71da      	strb	r2, [r3, #7]
	Buffer->Degree = 0;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	721a      	strb	r2, [r3, #8]
	Buffer->LeftRight = 0;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	725a      	strb	r2, [r3, #9]

	if (gest_predictor.gesture.ready)
 800122e:	4b1f      	ldr	r3, [pc, #124]	@ (80012ac <Add_SensorTxData_Gesture+0x9c>)
 8001230:	f893 3f2e 	ldrb.w	r3, [r3, #3886]	@ 0xf2e
 8001234:	2b00      	cmp	r3, #0
 8001236:	d010      	beq.n	800125a <Add_SensorTxData_Gesture+0x4a>
	{
		if (gest_predictor.gesture.label == GW_LEFT)
 8001238:	4b1c      	ldr	r3, [pc, #112]	@ (80012ac <Add_SensorTxData_Gesture+0x9c>)
 800123a:	f893 3f20 	ldrb.w	r3, [r3, #3872]	@ 0xf20
 800123e:	2b01      	cmp	r3, #1
 8001240:	d103      	bne.n	800124a <Add_SensorTxData_Gesture+0x3a>
		{
			Buffer->LeftRight = 1;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2201      	movs	r2, #1
 8001246:	725a      	strb	r2, [r3, #9]
 8001248:	e007      	b.n	800125a <Add_SensorTxData_Gesture+0x4a>
		}
		else if (gest_predictor.gesture.label == GW_RIGHT)
 800124a:	4b18      	ldr	r3, [pc, #96]	@ (80012ac <Add_SensorTxData_Gesture+0x9c>)
 800124c:	f893 3f20 	ldrb.w	r3, [r3, #3872]	@ 0xf20
 8001250:	2b02      	cmp	r3, #2
 8001252:	d102      	bne.n	800125a <Add_SensorTxData_Gesture+0x4a>
		{
			Buffer->LeftRight = 2;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2202      	movs	r2, #2
 8001258:	725a      	strb	r2, [r3, #9]
		}
	}

	if (gest_predictor.lc_state == LC_UNDER_CONTROL)
 800125a:	4b14      	ldr	r3, [pc, #80]	@ (80012ac <Add_SensorTxData_Gesture+0x9c>)
 800125c:	f893 3f44 	ldrb.w	r3, [r3, #3908]	@ 0xf44
 8001260:	2b02      	cmp	r3, #2
 8001262:	d11d      	bne.n	80012a0 <Add_SensorTxData_Gesture+0x90>
	{
		Buffer->Level = (uint8_t)gest_predictor.gesture.lc_currentLevel;
 8001264:	4b11      	ldr	r3, [pc, #68]	@ (80012ac <Add_SensorTxData_Gesture+0x9c>)
 8001266:	f8d3 3f38 	ldr.w	r3, [r3, #3896]	@ 0xf38
 800126a:	b2da      	uxtb	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	71da      	strb	r2, [r3, #7]
		tempDegree = (uint16_t)gest_predictor.gesture.lc_polar_theta;
 8001270:	4b0e      	ldr	r3, [pc, #56]	@ (80012ac <Add_SensorTxData_Gesture+0x9c>)
 8001272:	f503 6374 	add.w	r3, r3, #3904	@ 0xf40
 8001276:	edd3 7a00 	vldr	s15, [r3]
 800127a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800127e:	ee17 3a90 	vmov	r3, s15
 8001282:	81fb      	strh	r3, [r7, #14]
		Buffer->Degree = (uint8_t)((tempDegree * 100)/360);
 8001284:	89fb      	ldrh	r3, [r7, #14]
 8001286:	2264      	movs	r2, #100	@ 0x64
 8001288:	fb02 f303 	mul.w	r3, r2, r3
 800128c:	4a08      	ldr	r2, [pc, #32]	@ (80012b0 <Add_SensorTxData_Gesture+0xa0>)
 800128e:	fb82 1203 	smull	r1, r2, r2, r3
 8001292:	441a      	add	r2, r3
 8001294:	1212      	asrs	r2, r2, #8
 8001296:	17db      	asrs	r3, r3, #31
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	b2da      	uxtb	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	721a      	strb	r2, [r3, #8]

	//printf("---------------------------------------\r\n");
	//printf("Level = %d\r\n", Buffer->Level);
	//printf("Degree = %d\r\n", Buffer->Degree);
	//printf("---------------------------------------\r\n");
}
 80012a0:	bf00      	nop
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	2000814c 	.word	0x2000814c
 80012b0:	b60b60b7 	.word	0xb60b60b7

080012b4 <Gesture_print_uart>:

// Function used to print the algo results on the UART port and the data are formatted to be read in a terminal (Tera Term for example)
// The serial baudrate is 921600 by default in this example (see main.c)
void Gesture_print_uart(void)
{
 80012b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012b8:	b085      	sub	sp, #20
 80012ba:	af04      	add	r7, sp, #16
	if (gest_predictor.gesture.ready)
 80012bc:	4b3b      	ldr	r3, [pc, #236]	@ (80013ac <Gesture_print_uart+0xf8>)
 80012be:	f893 3f2e 	ldrb.w	r3, [r3, #3886]	@ 0xf2e
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d03d      	beq.n	8001342 <Gesture_print_uart+0x8e>
	{
		if (gest_predictor.gesture.label == GW_LEFT)
 80012c6:	4b39      	ldr	r3, [pc, #228]	@ (80013ac <Gesture_print_uart+0xf8>)
 80012c8:	f893 3f20 	ldrb.w	r3, [r3, #3872]	@ 0xf20
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d103      	bne.n	80012d8 <Gesture_print_uart+0x24>
		{
			printf("Gesture LEFT  <-  \r\n");
 80012d0:	4837      	ldr	r0, [pc, #220]	@ (80013b0 <Gesture_print_uart+0xfc>)
 80012d2:	f022 f803 	bl	80232dc <puts>
 80012d6:	e034      	b.n	8001342 <Gesture_print_uart+0x8e>
		}
		else if (gest_predictor.gesture.label == GW_RIGHT)
 80012d8:	4b34      	ldr	r3, [pc, #208]	@ (80013ac <Gesture_print_uart+0xf8>)
 80012da:	f893 3f20 	ldrb.w	r3, [r3, #3872]	@ 0xf20
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d103      	bne.n	80012ea <Gesture_print_uart+0x36>
		{
			printf("Gesture RIGHT  ->  \r\n");
 80012e2:	4834      	ldr	r0, [pc, #208]	@ (80013b4 <Gesture_print_uart+0x100>)
 80012e4:	f021 fffa 	bl	80232dc <puts>
 80012e8:	e02b      	b.n	8001342 <Gesture_print_uart+0x8e>
		}
		//-------------------------------
		else if (gest_predictor.gesture.label == GW_DOWN)
 80012ea:	4b30      	ldr	r3, [pc, #192]	@ (80013ac <Gesture_print_uart+0xf8>)
 80012ec:	f893 3f20 	ldrb.w	r3, [r3, #3872]	@ 0xf20
 80012f0:	2b03      	cmp	r3, #3
 80012f2:	d103      	bne.n	80012fc <Gesture_print_uart+0x48>
		{
			printf("Gesture DOWN  V  \r\n");
 80012f4:	4830      	ldr	r0, [pc, #192]	@ (80013b8 <Gesture_print_uart+0x104>)
 80012f6:	f021 fff1 	bl	80232dc <puts>
 80012fa:	e022      	b.n	8001342 <Gesture_print_uart+0x8e>
		}
		else if (gest_predictor.gesture.label == GW_UP)
 80012fc:	4b2b      	ldr	r3, [pc, #172]	@ (80013ac <Gesture_print_uart+0xf8>)
 80012fe:	f893 3f20 	ldrb.w	r3, [r3, #3872]	@ 0xf20
 8001302:	2b04      	cmp	r3, #4
 8001304:	d103      	bne.n	800130e <Gesture_print_uart+0x5a>
		{
			printf("Gesture UP ^  \r\n");
 8001306:	482d      	ldr	r0, [pc, #180]	@ (80013bc <Gesture_print_uart+0x108>)
 8001308:	f021 ffe8 	bl	80232dc <puts>
 800130c:	e019      	b.n	8001342 <Gesture_print_uart+0x8e>
		}
		else if (gest_predictor.gesture.label == GW_TOWARD)
 800130e:	4b27      	ldr	r3, [pc, #156]	@ (80013ac <Gesture_print_uart+0xf8>)
 8001310:	f893 3f20 	ldrb.w	r3, [r3, #3872]	@ 0xf20
 8001314:	2b05      	cmp	r3, #5
 8001316:	d103      	bne.n	8001320 <Gesture_print_uart+0x6c>
		{
			printf("Gesture TAP [-]  \r\n");
 8001318:	4829      	ldr	r0, [pc, #164]	@ (80013c0 <Gesture_print_uart+0x10c>)
 800131a:	f021 ffdf 	bl	80232dc <puts>
 800131e:	e010      	b.n	8001342 <Gesture_print_uart+0x8e>
		}
		//-------------------------------
		else if (gest_predictor.gesture.label == GW_DOUBLETAP)
 8001320:	4b22      	ldr	r3, [pc, #136]	@ (80013ac <Gesture_print_uart+0xf8>)
 8001322:	f893 3f20 	ldrb.w	r3, [r3, #3872]	@ 0xf20
 8001326:	2b07      	cmp	r3, #7
 8001328:	d103      	bne.n	8001332 <Gesture_print_uart+0x7e>
		{
			printf("Gesture DOUBLE TAP  [--]  \r\n");
 800132a:	4826      	ldr	r0, [pc, #152]	@ (80013c4 <Gesture_print_uart+0x110>)
 800132c:	f021 ffd6 	bl	80232dc <puts>
 8001330:	e007      	b.n	8001342 <Gesture_print_uart+0x8e>
		}
		else if (gest_predictor.gesture.label == GW_AWAY)
 8001332:	4b1e      	ldr	r3, [pc, #120]	@ (80013ac <Gesture_print_uart+0xf8>)
 8001334:	f893 3f20 	ldrb.w	r3, [r3, #3872]	@ 0xf20
 8001338:	2b06      	cmp	r3, #6
 800133a:	d102      	bne.n	8001342 <Gesture_print_uart+0x8e>
		{
			printf("Gesture GW AWAY  \r\n");
 800133c:	4822      	ldr	r0, [pc, #136]	@ (80013c8 <Gesture_print_uart+0x114>)
 800133e:	f021 ffcd 	bl	80232dc <puts>
		}
	}

	if (gest_predictor.lc_state == LC_UNDER_CONTROL)
 8001342:	4b1a      	ldr	r3, [pc, #104]	@ (80013ac <Gesture_print_uart+0xf8>)
 8001344:	f893 3f44 	ldrb.w	r3, [r3, #3908]	@ 0xf44
 8001348:	2b02      	cmp	r3, #2
 800134a:	d126      	bne.n	800139a <Gesture_print_uart+0xe6>
	{
		printf("Level Control(LC_UNDER_CONTROL) : %3lu, Z = %6.1f, Polar: r = %6.1f, Theta = %4.1f\n",
 800134c:	4b17      	ldr	r3, [pc, #92]	@ (80013ac <Gesture_print_uart+0xf8>)
 800134e:	f8d3 6f38 	ldr.w	r6, [r3, #3896]	@ 0xf38
				gest_predictor.gesture.lc_currentLevel,
				hand_tracker.hand.hand_z,
 8001352:	4b1e      	ldr	r3, [pc, #120]	@ (80013cc <Gesture_print_uart+0x118>)
 8001354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
		printf("Level Control(LC_UNDER_CONTROL) : %3lu, Z = %6.1f, Polar: r = %6.1f, Theta = %4.1f\n",
 8001356:	4618      	mov	r0, r3
 8001358:	f018 fbf6 	bl	8019b48 <__aeabi_f2d>
 800135c:	4680      	mov	r8, r0
 800135e:	4689      	mov	r9, r1
				gest_predictor.gesture.lc_polar_r,
 8001360:	4b12      	ldr	r3, [pc, #72]	@ (80013ac <Gesture_print_uart+0xf8>)
 8001362:	f603 733c 	addw	r3, r3, #3900	@ 0xf3c
 8001366:	681b      	ldr	r3, [r3, #0]
		printf("Level Control(LC_UNDER_CONTROL) : %3lu, Z = %6.1f, Polar: r = %6.1f, Theta = %4.1f\n",
 8001368:	4618      	mov	r0, r3
 800136a:	f018 fbed 	bl	8019b48 <__aeabi_f2d>
 800136e:	4604      	mov	r4, r0
 8001370:	460d      	mov	r5, r1
				gest_predictor.gesture.lc_polar_theta);
 8001372:	4b0e      	ldr	r3, [pc, #56]	@ (80013ac <Gesture_print_uart+0xf8>)
 8001374:	f503 6374 	add.w	r3, r3, #3904	@ 0xf40
 8001378:	681b      	ldr	r3, [r3, #0]
		printf("Level Control(LC_UNDER_CONTROL) : %3lu, Z = %6.1f, Polar: r = %6.1f, Theta = %4.1f\n",
 800137a:	4618      	mov	r0, r3
 800137c:	f018 fbe4 	bl	8019b48 <__aeabi_f2d>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001388:	e9cd 4500 	strd	r4, r5, [sp]
 800138c:	4642      	mov	r2, r8
 800138e:	464b      	mov	r3, r9
 8001390:	4631      	mov	r1, r6
 8001392:	480f      	ldr	r0, [pc, #60]	@ (80013d0 <Gesture_print_uart+0x11c>)
 8001394:	f021 ff3a 	bl	802320c <iprintf>
	}
	else
	{

	}
}
 8001398:	e003      	b.n	80013a2 <Gesture_print_uart+0xee>
	else if (gest_predictor.lc_state == LC_NONE)
 800139a:	4b04      	ldr	r3, [pc, #16]	@ (80013ac <Gesture_print_uart+0xf8>)
 800139c:	f893 3f44 	ldrb.w	r3, [r3, #3908]	@ 0xf44
 80013a0:	2b00      	cmp	r3, #0
}
 80013a2:	bf00      	nop
 80013a4:	3704      	adds	r7, #4
 80013a6:	46bd      	mov	sp, r7
 80013a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013ac:	2000814c 	.word	0x2000814c
 80013b0:	0802972c 	.word	0x0802972c
 80013b4:	08029740 	.word	0x08029740
 80013b8:	08029758 	.word	0x08029758
 80013bc:	0802976c 	.word	0x0802976c
 80013c0:	0802977c 	.word	0x0802977c
 80013c4:	08029790 	.word	0x08029790
 80013c8:	080297ac 	.word	0x080297ac
 80013cc:	200090b0 	.word	0x200090b0
 80013d0:	080297c0 	.word	0x080297c0

080013d4 <gesture_library_init_configure>:

// Recommended Initialization to use the Gesture library
int gesture_library_init_configure(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
	int status = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]

	//----------------//
	// MANDATORY CODE //
	//----------------//
	//Initialize Gesture algo and use the default parameters
	status = GW_init(&gest_predictor, &hand_tracker, &sensor_data);
 80013de:	4a24      	ldr	r2, [pc, #144]	@ (8001470 <gesture_library_init_configure+0x9c>)
 80013e0:	4924      	ldr	r1, [pc, #144]	@ (8001474 <gesture_library_init_configure+0xa0>)
 80013e2:	4825      	ldr	r0, [pc, #148]	@ (8001478 <gesture_library_init_configure+0xa4>)
 80013e4:	f01b ff5c 	bl	801d2a0 <GW_init>
 80013e8:	6078      	str	r0, [r7, #4]
	if (status != 0)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <gesture_library_init_configure+0x20>
	{
		return status;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	e039      	b.n	8001468 <gesture_library_init_configure+0x94>
	}
	status = HT_set_square_resolution(&hand_tracker, &sensor_data, App_Config.Params.Resolution);
 80013f4:	4b21      	ldr	r3, [pc, #132]	@ (800147c <gesture_library_init_configure+0xa8>)
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	461a      	mov	r2, r3
 80013fa:	491d      	ldr	r1, [pc, #116]	@ (8001470 <gesture_library_init_configure+0x9c>)
 80013fc:	481d      	ldr	r0, [pc, #116]	@ (8001474 <gesture_library_init_configure+0xa0>)
 80013fe:	f01e fb0f 	bl	801fa20 <HT_set_square_resolution>
 8001402:	6078      	str	r0, [r7, #4]
	if (status != 0)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <gesture_library_init_configure+0x3a>
	{
		return status;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	e02c      	b.n	8001468 <gesture_library_init_configure+0x94>
	}

	status = GW_set_frequency(&gest_predictor, &hand_tracker, &sensor_data, 1000.0 / App_Config.Params.RangingPeriod);
 800140e:	4b1b      	ldr	r3, [pc, #108]	@ (800147c <gesture_library_init_configure+0xa8>)
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	4618      	mov	r0, r3
 8001414:	f018 fb86 	bl	8019b24 <__aeabi_i2d>
 8001418:	4602      	mov	r2, r0
 800141a:	460b      	mov	r3, r1
 800141c:	f04f 0000 	mov.w	r0, #0
 8001420:	4917      	ldr	r1, [pc, #92]	@ (8001480 <gesture_library_init_configure+0xac>)
 8001422:	f018 fd13 	bl	8019e4c <__aeabi_ddiv>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4610      	mov	r0, r2
 800142c:	4619      	mov	r1, r3
 800142e:	f018 fedb 	bl	801a1e8 <__aeabi_d2f>
 8001432:	4603      	mov	r3, r0
 8001434:	ee00 3a10 	vmov	s0, r3
 8001438:	4a0d      	ldr	r2, [pc, #52]	@ (8001470 <gesture_library_init_configure+0x9c>)
 800143a:	490e      	ldr	r1, [pc, #56]	@ (8001474 <gesture_library_init_configure+0xa0>)
 800143c:	480e      	ldr	r0, [pc, #56]	@ (8001478 <gesture_library_init_configure+0xa4>)
 800143e:	f01c fa3b 	bl	801d8b8 <GW_set_frequency>
 8001442:	6078      	str	r0, [r7, #4]
	if (status != 0)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <gesture_library_init_configure+0x7a>
	{
		return status;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	e00c      	b.n	8001468 <gesture_library_init_configure+0x94>
	 MZ_TRACE("GW_set_frequency failed : %d\n",status);
	 return status;
	 }
	 */

	status = SEN_set_orientation(&sensor_data, App_Config.Params.SensorOrientation);
 800144e:	4b0b      	ldr	r3, [pc, #44]	@ (800147c <gesture_library_init_configure+0xa8>)
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	4619      	mov	r1, r3
 8001454:	4806      	ldr	r0, [pc, #24]	@ (8001470 <gesture_library_init_configure+0x9c>)
 8001456:	f020 f99d 	bl	8021794 <SEN_set_orientation>
 800145a:	6078      	str	r0, [r7, #4]
	if (status != 0)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <gesture_library_init_configure+0x92>
	{
		return status;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	e000      	b.n	8001468 <gesture_library_init_configure+0x94>
	}

	return status;
 8001466:	687b      	ldr	r3, [r7, #4]
}
 8001468:	4618      	mov	r0, r3
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20009868 	.word	0x20009868
 8001474:	200090b0 	.word	0x200090b0
 8001478:	2000814c 	.word	0x2000814c
 800147c:	200042ec 	.word	0x200042ec
 8001480:	408f4000 	.word	0x408f4000

08001484 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001488:	f004 f9b6 	bl	80057f8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800148c:	f000 f876 	bl	800157c <SystemClock_Config>

	//__HAL_RCC_CRC_CLK_ENABLE();
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001490:	f000 f9ee 	bl	8001870 <MX_GPIO_Init>
	MX_I2C1_Init();
 8001494:	f000 f8de 	bl	8001654 <MX_I2C1_Init>
	MX_USART2_UART_Init();
 8001498:	f000 f996 	bl	80017c8 <MX_USART2_UART_Init>
	MX_TIM3_Init();
 800149c:	f000 f908 	bl	80016b0 <MX_TIM3_Init>
	MX_USART6_UART_Init();
 80014a0:	f000 f9bc 	bl	800181c <MX_USART6_UART_Init>
	/* USER CODE BEGIN 2 */

	printf("Start Hand Posture Sensing..\r\n");
 80014a4:	482b      	ldr	r0, [pc, #172]	@ (8001554 <main+0xd0>)
 80014a6:	f021 ff19 	bl	80232dc <puts>

	/* Perform HW configuration (sensor) related to the application  */
	Sensor_Init(&App_Config);
 80014aa:	482b      	ldr	r0, [pc, #172]	@ (8001558 <main+0xd4>)
 80014ac:	f7ff fd36 	bl	8000f1c <Sensor_Init>

	/* Perform SW configuration related to the application  */
	Software_Init(&App_Config);
 80014b0:	4829      	ldr	r0, [pc, #164]	@ (8001558 <main+0xd4>)
 80014b2:	f000 fa9d 	bl	80019f0 <Software_Init>

	/* Initialize the Neural Network library  */
	Network_Init(&App_Config);
 80014b6:	4828      	ldr	r0, [pc, #160]	@ (8001558 <main+0xd4>)
 80014b8:	f7ff fbba 	bl	8000c30 <Network_Init>

	/* Start communication */
	Comm_Start(&App_Config);
 80014bc:	4826      	ldr	r0, [pc, #152]	@ (8001558 <main+0xd4>)
 80014be:	f7fe ff81 	bl	80003c4 <Comm_Start>

	/* Hand gesture lib init */
	gesture_library_init_configure();
 80014c2:	f7ff ff87 	bl	80013d4 <gesture_library_init_configure>

	/* Sensor ranging start */
	Sensor_StartRanging(&App_Config);
 80014c6:	4824      	ldr	r0, [pc, #144]	@ (8001558 <main+0xd4>)
 80014c8:	f7ff fd44 	bl	8000f54 <Sensor_StartRanging>

	printf("Sensor init done..\r\n");
 80014cc:	4823      	ldr	r0, [pc, #140]	@ (800155c <main+0xd8>)
 80014ce:	f021 ff05 	bl	80232dc <puts>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		/* Handle a command if one has been received */
		Comm_HandleRxCMD(&App_Config);
 80014d2:	4821      	ldr	r0, [pc, #132]	@ (8001558 <main+0xd4>)
 80014d4:	f7ff f914 	bl	8000700 <Comm_HandleRxCMD>

		if (App_Config.app_run)
 80014d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001558 <main+0xd4>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d0f8      	beq.n	80014d2 <main+0x4e>
		{
			/* Wait for available ranging data */
			Sensor_GetRangingData(&App_Config);
 80014e0:	481d      	ldr	r0, [pc, #116]	@ (8001558 <main+0xd4>)
 80014e2:	f7ff fd69 	bl	8000fb8 <Sensor_GetRangingData>

			if (App_Config.new_data_received)
 80014e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001558 <main+0xd4>)
 80014e8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80014ec:	f893 39a0 	ldrb.w	r3, [r3, #2464]	@ 0x9a0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d0ee      	beq.n	80014d2 <main+0x4e>
			{
				/* Pre-process data */
				Network_Preprocess(&App_Config);
 80014f4:	4818      	ldr	r0, [pc, #96]	@ (8001558 <main+0xd4>)
 80014f6:	f7ff fbaf 	bl	8000c58 <Network_Preprocess>

				/* Run inference */
				Network_Inference(&App_Config);
 80014fa:	4817      	ldr	r0, [pc, #92]	@ (8001558 <main+0xd4>)
 80014fc:	f7ff fc04 	bl	8000d08 <Network_Inference>

				/* Post-process data */
				Network_Postprocess(&App_Config);
 8001500:	4815      	ldr	r0, [pc, #84]	@ (8001558 <main+0xd4>)
 8001502:	f7ff fc41 	bl	8000d88 <Network_Postprocess>

				Add_SensorTxData_Network(&App_Config, &SensorTxData);
 8001506:	4916      	ldr	r1, [pc, #88]	@ (8001560 <main+0xdc>)
 8001508:	4813      	ldr	r0, [pc, #76]	@ (8001558 <main+0xd4>)
 800150a:	f7fe ff87 	bl	800041c <Add_SensorTxData_Network>

				/* Data set to gesture algorithm */
				SEN_CopyRangingData(&sensor_data, &App_Config.RangingData);
 800150e:	4915      	ldr	r1, [pc, #84]	@ (8001564 <main+0xe0>)
 8001510:	4815      	ldr	r0, [pc, #84]	@ (8001568 <main+0xe4>)
 8001512:	f7ff fdeb 	bl	80010ec <SEN_CopyRangingData>

				/* Gesture algorithm Run */
				GW_run(&gest_predictor, &hand_tracker, &sensor_data);
 8001516:	4a14      	ldr	r2, [pc, #80]	@ (8001568 <main+0xe4>)
 8001518:	4914      	ldr	r1, [pc, #80]	@ (800156c <main+0xe8>)
 800151a:	4815      	ldr	r0, [pc, #84]	@ (8001570 <main+0xec>)
 800151c:	f01c fb04 	bl	801db28 <GW_run>

				/* Print gesture algorithm result */
				//Gesture_print_uart();

				Add_SensorTxData_Gesture(&SensorTxData);
 8001520:	480f      	ldr	r0, [pc, #60]	@ (8001560 <main+0xdc>)
 8001522:	f7ff fe75 	bl	8001210 <Add_SensorTxData_Gesture>

				SensorTxData.StartByte = 'A';
 8001526:	4b0e      	ldr	r3, [pc, #56]	@ (8001560 <main+0xdc>)
 8001528:	2241      	movs	r2, #65	@ 0x41
 800152a:	701a      	strb	r2, [r3, #0]
				SensorTxData.EndByte = 'Z';
 800152c:	4b0c      	ldr	r3, [pc, #48]	@ (8001560 <main+0xdc>)
 800152e:	225a      	movs	r2, #90	@ 0x5a
 8001530:	729a      	strb	r2, [r3, #10]
				memcpy(UartTxBuffer, &SensorTxData, sizeof(UartTxBuffer));
 8001532:	4b10      	ldr	r3, [pc, #64]	@ (8001574 <main+0xf0>)
 8001534:	4a0a      	ldr	r2, [pc, #40]	@ (8001560 <main+0xdc>)
 8001536:	ca07      	ldmia	r2, {r0, r1, r2}
 8001538:	c303      	stmia	r3!, {r0, r1}
 800153a:	801a      	strh	r2, [r3, #0]
 800153c:	3302      	adds	r3, #2
 800153e:	0c12      	lsrs	r2, r2, #16
 8001540:	701a      	strb	r2, [r3, #0]

				HAL_UART_Transmit(&huart6, UartTxBuffer, sizeof(UartTxBuffer), 1000);
 8001542:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001546:	220b      	movs	r2, #11
 8001548:	490a      	ldr	r1, [pc, #40]	@ (8001574 <main+0xf0>)
 800154a:	480b      	ldr	r0, [pc, #44]	@ (8001578 <main+0xf4>)
 800154c:	f015 f880 	bl	8016650 <HAL_UART_Transmit>
		Comm_HandleRxCMD(&App_Config);
 8001550:	e7bf      	b.n	80014d2 <main+0x4e>
 8001552:	bf00      	nop
 8001554:	08029860 	.word	0x08029860
 8001558:	200042ec 	.word	0x200042ec
 800155c:	08029880 	.word	0x08029880
 8001560:	20009ac8 	.word	0x20009ac8
 8001564:	20006738 	.word	0x20006738
 8001568:	20009868 	.word	0x20009868
 800156c:	200090b0 	.word	0x200090b0
 8001570:	2000814c 	.word	0x2000814c
 8001574:	20009ad4 	.word	0x20009ad4
 8001578:	20009bc4 	.word	0x20009bc4

0800157c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b094      	sub	sp, #80	@ 0x50
 8001580:	af00      	add	r7, sp, #0
RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001582:	f107 0320 	add.w	r3, r7, #32
 8001586:	2230      	movs	r2, #48	@ 0x30
 8001588:	2100      	movs	r1, #0
 800158a:	4618      	mov	r0, r3
 800158c:	f021 ffa6 	bl	80234dc <memset>
RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001590:	f107 030c 	add.w	r3, r7, #12
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]

/** Configure the main internal regulator output voltage
 */
__HAL_RCC_PWR_CLK_ENABLE();
 80015a0:	2300      	movs	r3, #0
 80015a2:	60bb      	str	r3, [r7, #8]
 80015a4:	4b29      	ldr	r3, [pc, #164]	@ (800164c <SystemClock_Config+0xd0>)
 80015a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a8:	4a28      	ldr	r2, [pc, #160]	@ (800164c <SystemClock_Config+0xd0>)
 80015aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80015b0:	4b26      	ldr	r3, [pc, #152]	@ (800164c <SystemClock_Config+0xd0>)
 80015b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	68bb      	ldr	r3, [r7, #8]
__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80015bc:	2300      	movs	r3, #0
 80015be:	607b      	str	r3, [r7, #4]
 80015c0:	4b23      	ldr	r3, [pc, #140]	@ (8001650 <SystemClock_Config+0xd4>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80015c8:	4a21      	ldr	r2, [pc, #132]	@ (8001650 <SystemClock_Config+0xd4>)
 80015ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015ce:	6013      	str	r3, [r2, #0]
 80015d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001650 <SystemClock_Config+0xd4>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80015d8:	607b      	str	r3, [r7, #4]
 80015da:	687b      	ldr	r3, [r7, #4]

/** Initializes the RCC Oscillators according to the specified parameters
 * in the RCC_OscInitTypeDef structure.
 */
RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015dc:	2302      	movs	r3, #2
 80015de:	623b      	str	r3, [r7, #32]
RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015e0:	2301      	movs	r3, #1
 80015e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015e4:	2310      	movs	r3, #16
 80015e6:	633b      	str	r3, [r7, #48]	@ 0x30
RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015e8:	2302      	movs	r3, #2
 80015ea:	63bb      	str	r3, [r7, #56]	@ 0x38
RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015ec:	2300      	movs	r3, #0
 80015ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
RCC_OscInitStruct.PLL.PLLM = 16;
 80015f0:	2310      	movs	r3, #16
 80015f2:	643b      	str	r3, [r7, #64]	@ 0x40
RCC_OscInitStruct.PLL.PLLN = 336;
 80015f4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80015f8:	647b      	str	r3, [r7, #68]	@ 0x44
RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80015fa:	2304      	movs	r3, #4
 80015fc:	64bb      	str	r3, [r7, #72]	@ 0x48
RCC_OscInitStruct.PLL.PLLQ = 7;
 80015fe:	2307      	movs	r3, #7
 8001600:	64fb      	str	r3, [r7, #76]	@ 0x4c
if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001602:	f107 0320 	add.w	r3, r7, #32
 8001606:	4618      	mov	r0, r3
 8001608:	f00c f990 	bl	800d92c <HAL_RCC_OscConfig>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <SystemClock_Config+0x9a>
{
	Error_Handler();
 8001612:	f000 fa8f 	bl	8001b34 <Error_Handler>
}

/** Initializes the CPU, AHB and APB buses clocks
 */
RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001616:	230f      	movs	r3, #15
 8001618:	60fb      	str	r3, [r7, #12]
		| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800161a:	2302      	movs	r3, #2
 800161c:	613b      	str	r3, [r7, #16]
RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800161e:	2300      	movs	r3, #0
 8001620:	617b      	str	r3, [r7, #20]
RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001622:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001626:	61bb      	str	r3, [r7, #24]
RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001628:	2300      	movs	r3, #0
 800162a:	61fb      	str	r3, [r7, #28]

if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800162c:	f107 030c 	add.w	r3, r7, #12
 8001630:	2102      	movs	r1, #2
 8001632:	4618      	mov	r0, r3
 8001634:	f00c fbf2 	bl	800de1c <HAL_RCC_ClockConfig>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <SystemClock_Config+0xc6>
{
	Error_Handler();
 800163e:	f000 fa79 	bl	8001b34 <Error_Handler>
}
}
 8001642:	bf00      	nop
 8001644:	3750      	adds	r7, #80	@ 0x50
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40023800 	.word	0x40023800
 8001650:	40007000 	.word	0x40007000

08001654 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
/* USER CODE END I2C1_Init 0 */

/* USER CODE BEGIN I2C1_Init 1 */

/* USER CODE END I2C1_Init 1 */
hi2c1.Instance = I2C1;
 8001658:	4b12      	ldr	r3, [pc, #72]	@ (80016a4 <MX_I2C1_Init+0x50>)
 800165a:	4a13      	ldr	r2, [pc, #76]	@ (80016a8 <MX_I2C1_Init+0x54>)
 800165c:	601a      	str	r2, [r3, #0]
hi2c1.Init.ClockSpeed = 400000;
 800165e:	4b11      	ldr	r3, [pc, #68]	@ (80016a4 <MX_I2C1_Init+0x50>)
 8001660:	4a12      	ldr	r2, [pc, #72]	@ (80016ac <MX_I2C1_Init+0x58>)
 8001662:	605a      	str	r2, [r3, #4]
hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001664:	4b0f      	ldr	r3, [pc, #60]	@ (80016a4 <MX_I2C1_Init+0x50>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
hi2c1.Init.OwnAddress1 = 0;
 800166a:	4b0e      	ldr	r3, [pc, #56]	@ (80016a4 <MX_I2C1_Init+0x50>)
 800166c:	2200      	movs	r2, #0
 800166e:	60da      	str	r2, [r3, #12]
hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001670:	4b0c      	ldr	r3, [pc, #48]	@ (80016a4 <MX_I2C1_Init+0x50>)
 8001672:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001676:	611a      	str	r2, [r3, #16]
hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001678:	4b0a      	ldr	r3, [pc, #40]	@ (80016a4 <MX_I2C1_Init+0x50>)
 800167a:	2200      	movs	r2, #0
 800167c:	615a      	str	r2, [r3, #20]
hi2c1.Init.OwnAddress2 = 0;
 800167e:	4b09      	ldr	r3, [pc, #36]	@ (80016a4 <MX_I2C1_Init+0x50>)
 8001680:	2200      	movs	r2, #0
 8001682:	619a      	str	r2, [r3, #24]
hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001684:	4b07      	ldr	r3, [pc, #28]	@ (80016a4 <MX_I2C1_Init+0x50>)
 8001686:	2200      	movs	r2, #0
 8001688:	61da      	str	r2, [r3, #28]
hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800168a:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <MX_I2C1_Init+0x50>)
 800168c:	2200      	movs	r2, #0
 800168e:	621a      	str	r2, [r3, #32]
if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001690:	4804      	ldr	r0, [pc, #16]	@ (80016a4 <MX_I2C1_Init+0x50>)
 8001692:	f005 ff33 	bl	80074fc <HAL_I2C_Init>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_I2C1_Init+0x4c>
{
	Error_Handler();
 800169c:	f000 fa4a 	bl	8001b34 <Error_Handler>
}
/* USER CODE BEGIN I2C1_Init 2 */

/* USER CODE END I2C1_Init 2 */

}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20009ae0 	.word	0x20009ae0
 80016a8:	40005400 	.word	0x40005400
 80016ac:	00061a80 	.word	0x00061a80

080016b0 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08e      	sub	sp, #56	@ 0x38
 80016b4:	af00      	add	r7, sp, #0

/* USER CODE BEGIN TIM3_Init 0 */

/* USER CODE END TIM3_Init 0 */

TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80016b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]
 80016c2:	60da      	str	r2, [r3, #12]
TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80016c4:	f107 0320 	add.w	r3, r7, #32
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
TIM_OC_InitTypeDef sConfigOC = { 0 };
 80016ce:	1d3b      	adds	r3, r7, #4
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
 80016da:	611a      	str	r2, [r3, #16]
 80016dc:	615a      	str	r2, [r3, #20]
 80016de:	619a      	str	r2, [r3, #24]

/* USER CODE BEGIN TIM3_Init 1 */

/* USER CODE END TIM3_Init 1 */
htim3.Instance = TIM3;
 80016e0:	4b37      	ldr	r3, [pc, #220]	@ (80017c0 <MX_TIM3_Init+0x110>)
 80016e2:	4a38      	ldr	r2, [pc, #224]	@ (80017c4 <MX_TIM3_Init+0x114>)
 80016e4:	601a      	str	r2, [r3, #0]
htim3.Init.Prescaler = 84 - 1;
 80016e6:	4b36      	ldr	r3, [pc, #216]	@ (80017c0 <MX_TIM3_Init+0x110>)
 80016e8:	2253      	movs	r2, #83	@ 0x53
 80016ea:	605a      	str	r2, [r3, #4]
htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ec:	4b34      	ldr	r3, [pc, #208]	@ (80017c0 <MX_TIM3_Init+0x110>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]
htim3.Init.Period = 100 - 1;
 80016f2:	4b33      	ldr	r3, [pc, #204]	@ (80017c0 <MX_TIM3_Init+0x110>)
 80016f4:	2263      	movs	r2, #99	@ 0x63
 80016f6:	60da      	str	r2, [r3, #12]
htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f8:	4b31      	ldr	r3, [pc, #196]	@ (80017c0 <MX_TIM3_Init+0x110>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	611a      	str	r2, [r3, #16]
htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016fe:	4b30      	ldr	r3, [pc, #192]	@ (80017c0 <MX_TIM3_Init+0x110>)
 8001700:	2200      	movs	r2, #0
 8001702:	619a      	str	r2, [r3, #24]
if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001704:	482e      	ldr	r0, [pc, #184]	@ (80017c0 <MX_TIM3_Init+0x110>)
 8001706:	f00c ff0b 	bl	800e520 <HAL_TIM_Base_Init>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_TIM3_Init+0x64>
{
	Error_Handler();
 8001710:	f000 fa10 	bl	8001b34 <Error_Handler>
}
sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001714:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001718:	62bb      	str	r3, [r7, #40]	@ 0x28
if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800171a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800171e:	4619      	mov	r1, r3
 8001720:	4827      	ldr	r0, [pc, #156]	@ (80017c0 <MX_TIM3_Init+0x110>)
 8001722:	f011 fba5 	bl	8012e70 <HAL_TIM_ConfigClockSource>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_TIM3_Init+0x80>
{
	Error_Handler();
 800172c:	f000 fa02 	bl	8001b34 <Error_Handler>
}
if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001730:	4823      	ldr	r0, [pc, #140]	@ (80017c0 <MX_TIM3_Init+0x110>)
 8001732:	f00d ff75 	bl	800f620 <HAL_TIM_PWM_Init>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_TIM3_Init+0x90>
{
	Error_Handler();
 800173c:	f000 f9fa 	bl	8001b34 <Error_Handler>
}
sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001740:	2300      	movs	r3, #0
 8001742:	623b      	str	r3, [r7, #32]
sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001744:	2300      	movs	r3, #0
 8001746:	627b      	str	r3, [r7, #36]	@ 0x24
if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001748:	f107 0320 	add.w	r3, r7, #32
 800174c:	4619      	mov	r1, r3
 800174e:	481c      	ldr	r0, [pc, #112]	@ (80017c0 <MX_TIM3_Init+0x110>)
 8001750:	f014 fbbc 	bl	8015ecc <HAL_TIMEx_MasterConfigSynchronization>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM3_Init+0xae>
{
	Error_Handler();
 800175a:	f000 f9eb 	bl	8001b34 <Error_Handler>
}
sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800175e:	2360      	movs	r3, #96	@ 0x60
 8001760:	607b      	str	r3, [r7, #4]
sConfigOC.Pulse = 0;
 8001762:	2300      	movs	r3, #0
 8001764:	60bb      	str	r3, [r7, #8]
sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800176a:	2300      	movs	r3, #0
 800176c:	617b      	str	r3, [r7, #20]
if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800176e:	1d3b      	adds	r3, r7, #4
 8001770:	2200      	movs	r2, #0
 8001772:	4619      	mov	r1, r3
 8001774:	4812      	ldr	r0, [pc, #72]	@ (80017c0 <MX_TIM3_Init+0x110>)
 8001776:	f010 fd23 	bl	80121c0 <HAL_TIM_PWM_ConfigChannel>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_TIM3_Init+0xd4>
{
	Error_Handler();
 8001780:	f000 f9d8 	bl	8001b34 <Error_Handler>
}
if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001784:	1d3b      	adds	r3, r7, #4
 8001786:	2208      	movs	r2, #8
 8001788:	4619      	mov	r1, r3
 800178a:	480d      	ldr	r0, [pc, #52]	@ (80017c0 <MX_TIM3_Init+0x110>)
 800178c:	f010 fd18 	bl	80121c0 <HAL_TIM_PWM_ConfigChannel>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_TIM3_Init+0xea>
{
	Error_Handler();
 8001796:	f000 f9cd 	bl	8001b34 <Error_Handler>
}
if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800179a:	1d3b      	adds	r3, r7, #4
 800179c:	220c      	movs	r2, #12
 800179e:	4619      	mov	r1, r3
 80017a0:	4807      	ldr	r0, [pc, #28]	@ (80017c0 <MX_TIM3_Init+0x110>)
 80017a2:	f010 fd0d 	bl	80121c0 <HAL_TIM_PWM_ConfigChannel>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_TIM3_Init+0x100>
{
	Error_Handler();
 80017ac:	f000 f9c2 	bl	8001b34 <Error_Handler>
}
/* USER CODE BEGIN TIM3_Init 2 */

/* USER CODE END TIM3_Init 2 */
HAL_TIM_MspPostInit(&htim3);
 80017b0:	4803      	ldr	r0, [pc, #12]	@ (80017c0 <MX_TIM3_Init+0x110>)
 80017b2:	f000 fa8d 	bl	8001cd0 <HAL_TIM_MspPostInit>

}
 80017b6:	bf00      	nop
 80017b8:	3738      	adds	r7, #56	@ 0x38
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20009b34 	.word	0x20009b34
 80017c4:	40000400 	.word	0x40000400

080017c8 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
/* USER CODE END USART2_Init 0 */

/* USER CODE BEGIN USART2_Init 1 */

/* USER CODE END USART2_Init 1 */
huart2.Instance = USART2;
 80017cc:	4b11      	ldr	r3, [pc, #68]	@ (8001814 <MX_USART2_UART_Init+0x4c>)
 80017ce:	4a12      	ldr	r2, [pc, #72]	@ (8001818 <MX_USART2_UART_Init+0x50>)
 80017d0:	601a      	str	r2, [r3, #0]
huart2.Init.BaudRate = 115200;
 80017d2:	4b10      	ldr	r3, [pc, #64]	@ (8001814 <MX_USART2_UART_Init+0x4c>)
 80017d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017d8:	605a      	str	r2, [r3, #4]
huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017da:	4b0e      	ldr	r3, [pc, #56]	@ (8001814 <MX_USART2_UART_Init+0x4c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
huart2.Init.StopBits = UART_STOPBITS_1;
 80017e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001814 <MX_USART2_UART_Init+0x4c>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	60da      	str	r2, [r3, #12]
huart2.Init.Parity = UART_PARITY_NONE;
 80017e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001814 <MX_USART2_UART_Init+0x4c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
huart2.Init.Mode = UART_MODE_TX_RX;
 80017ec:	4b09      	ldr	r3, [pc, #36]	@ (8001814 <MX_USART2_UART_Init+0x4c>)
 80017ee:	220c      	movs	r2, #12
 80017f0:	615a      	str	r2, [r3, #20]
huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017f2:	4b08      	ldr	r3, [pc, #32]	@ (8001814 <MX_USART2_UART_Init+0x4c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	619a      	str	r2, [r3, #24]
huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f8:	4b06      	ldr	r3, [pc, #24]	@ (8001814 <MX_USART2_UART_Init+0x4c>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	61da      	str	r2, [r3, #28]
if (HAL_UART_Init(&huart2) != HAL_OK)
 80017fe:	4805      	ldr	r0, [pc, #20]	@ (8001814 <MX_USART2_UART_Init+0x4c>)
 8001800:	f014 fd5c 	bl	80162bc <HAL_UART_Init>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_USART2_UART_Init+0x46>
{
	Error_Handler();
 800180a:	f000 f993 	bl	8001b34 <Error_Handler>
}
/* USER CODE BEGIN USART2_Init 2 */

/* USER CODE END USART2_Init 2 */

}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20009b7c 	.word	0x20009b7c
 8001818:	40004400 	.word	0x40004400

0800181c <MX_USART6_UART_Init>:
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
/* USER CODE END USART6_Init 0 */

/* USER CODE BEGIN USART6_Init 1 */

/* USER CODE END USART6_Init 1 */
huart6.Instance = USART6;
 8001820:	4b11      	ldr	r3, [pc, #68]	@ (8001868 <MX_USART6_UART_Init+0x4c>)
 8001822:	4a12      	ldr	r2, [pc, #72]	@ (800186c <MX_USART6_UART_Init+0x50>)
 8001824:	601a      	str	r2, [r3, #0]
huart6.Init.BaudRate = 115200;
 8001826:	4b10      	ldr	r3, [pc, #64]	@ (8001868 <MX_USART6_UART_Init+0x4c>)
 8001828:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800182c:	605a      	str	r2, [r3, #4]
huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800182e:	4b0e      	ldr	r3, [pc, #56]	@ (8001868 <MX_USART6_UART_Init+0x4c>)
 8001830:	2200      	movs	r2, #0
 8001832:	609a      	str	r2, [r3, #8]
huart6.Init.StopBits = UART_STOPBITS_1;
 8001834:	4b0c      	ldr	r3, [pc, #48]	@ (8001868 <MX_USART6_UART_Init+0x4c>)
 8001836:	2200      	movs	r2, #0
 8001838:	60da      	str	r2, [r3, #12]
huart6.Init.Parity = UART_PARITY_NONE;
 800183a:	4b0b      	ldr	r3, [pc, #44]	@ (8001868 <MX_USART6_UART_Init+0x4c>)
 800183c:	2200      	movs	r2, #0
 800183e:	611a      	str	r2, [r3, #16]
huart6.Init.Mode = UART_MODE_TX_RX;
 8001840:	4b09      	ldr	r3, [pc, #36]	@ (8001868 <MX_USART6_UART_Init+0x4c>)
 8001842:	220c      	movs	r2, #12
 8001844:	615a      	str	r2, [r3, #20]
huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001846:	4b08      	ldr	r3, [pc, #32]	@ (8001868 <MX_USART6_UART_Init+0x4c>)
 8001848:	2200      	movs	r2, #0
 800184a:	619a      	str	r2, [r3, #24]
huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800184c:	4b06      	ldr	r3, [pc, #24]	@ (8001868 <MX_USART6_UART_Init+0x4c>)
 800184e:	2200      	movs	r2, #0
 8001850:	61da      	str	r2, [r3, #28]
if (HAL_UART_Init(&huart6) != HAL_OK)
 8001852:	4805      	ldr	r0, [pc, #20]	@ (8001868 <MX_USART6_UART_Init+0x4c>)
 8001854:	f014 fd32 	bl	80162bc <HAL_UART_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_USART6_UART_Init+0x46>
{
	Error_Handler();
 800185e:	f000 f969 	bl	8001b34 <Error_Handler>
}
/* USER CODE BEGIN USART6_Init 2 */

/* USER CODE END USART6_Init 2 */

}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20009bc4 	.word	0x20009bc4
 800186c:	40011400 	.word	0x40011400

08001870 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08a      	sub	sp, #40	@ 0x28
 8001874:	af00      	add	r7, sp, #0
GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001876:	f107 0314 	add.w	r3, r7, #20
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]
 8001880:	609a      	str	r2, [r3, #8]
 8001882:	60da      	str	r2, [r3, #12]
 8001884:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

/* GPIO Ports Clock Enable */
__HAL_RCC_GPIOC_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	4b55      	ldr	r3, [pc, #340]	@ (80019e0 <MX_GPIO_Init+0x170>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188e:	4a54      	ldr	r2, [pc, #336]	@ (80019e0 <MX_GPIO_Init+0x170>)
 8001890:	f043 0304 	orr.w	r3, r3, #4
 8001894:	6313      	str	r3, [r2, #48]	@ 0x30
 8001896:	4b52      	ldr	r3, [pc, #328]	@ (80019e0 <MX_GPIO_Init+0x170>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189a:	f003 0304 	and.w	r3, r3, #4
 800189e:	613b      	str	r3, [r7, #16]
 80018a0:	693b      	ldr	r3, [r7, #16]
__HAL_RCC_GPIOH_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	4b4e      	ldr	r3, [pc, #312]	@ (80019e0 <MX_GPIO_Init+0x170>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018aa:	4a4d      	ldr	r2, [pc, #308]	@ (80019e0 <MX_GPIO_Init+0x170>)
 80018ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018b2:	4b4b      	ldr	r3, [pc, #300]	@ (80019e0 <MX_GPIO_Init+0x170>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
__HAL_RCC_GPIOA_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	60bb      	str	r3, [r7, #8]
 80018c2:	4b47      	ldr	r3, [pc, #284]	@ (80019e0 <MX_GPIO_Init+0x170>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c6:	4a46      	ldr	r2, [pc, #280]	@ (80019e0 <MX_GPIO_Init+0x170>)
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ce:	4b44      	ldr	r3, [pc, #272]	@ (80019e0 <MX_GPIO_Init+0x170>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	60bb      	str	r3, [r7, #8]
 80018d8:	68bb      	ldr	r3, [r7, #8]
__HAL_RCC_GPIOB_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	607b      	str	r3, [r7, #4]
 80018de:	4b40      	ldr	r3, [pc, #256]	@ (80019e0 <MX_GPIO_Init+0x170>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e2:	4a3f      	ldr	r2, [pc, #252]	@ (80019e0 <MX_GPIO_Init+0x170>)
 80018e4:	f043 0302 	orr.w	r3, r3, #2
 80018e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ea:	4b3d      	ldr	r3, [pc, #244]	@ (80019e0 <MX_GPIO_Init+0x170>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(FLEX_SPI_I2C_N_GPIO_Port, FLEX_SPI_I2C_N_Pin, GPIO_PIN_RESET);
 80018f6:	2200      	movs	r2, #0
 80018f8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018fc:	4839      	ldr	r0, [pc, #228]	@ (80019e4 <MX_GPIO_Init+0x174>)
 80018fe:	f005 fd7d 	bl	80073fc <HAL_GPIO_WritePin>

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(GPIOA, LD2_Pin | PWR_EN_C_Pin, GPIO_PIN_RESET);
 8001902:	2200      	movs	r2, #0
 8001904:	21a0      	movs	r1, #160	@ 0xa0
 8001906:	4838      	ldr	r0, [pc, #224]	@ (80019e8 <MX_GPIO_Init+0x178>)
 8001908:	f005 fd78 	bl	80073fc <HAL_GPIO_WritePin>

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(LPn_C_GPIO_Port, LPn_C_Pin, GPIO_PIN_RESET);
 800190c:	2200      	movs	r2, #0
 800190e:	2101      	movs	r1, #1
 8001910:	4836      	ldr	r0, [pc, #216]	@ (80019ec <MX_GPIO_Init+0x17c>)
 8001912:	f005 fd73 	bl	80073fc <HAL_GPIO_WritePin>

/*Configure GPIO pin : FLEX_SPI_I2C_N_Pin */
GPIO_InitStruct.Pin = FLEX_SPI_I2C_N_Pin;
 8001916:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800191a:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800191c:	2301      	movs	r3, #1
 800191e:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	61fb      	str	r3, [r7, #28]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001924:	2300      	movs	r3, #0
 8001926:	623b      	str	r3, [r7, #32]
HAL_GPIO_Init(FLEX_SPI_I2C_N_GPIO_Port, &GPIO_InitStruct);
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	4619      	mov	r1, r3
 800192e:	482d      	ldr	r0, [pc, #180]	@ (80019e4 <MX_GPIO_Init+0x174>)
 8001930:	f005 fae4 	bl	8006efc <HAL_GPIO_Init>

/*Configure GPIO pin : INT_C_Pin */
GPIO_InitStruct.Pin = INT_C_Pin;
 8001934:	2310      	movs	r3, #16
 8001936:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001938:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800193c:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	61fb      	str	r3, [r7, #28]
HAL_GPIO_Init(INT_C_GPIO_Port, &GPIO_InitStruct);
 8001942:	f107 0314 	add.w	r3, r7, #20
 8001946:	4619      	mov	r1, r3
 8001948:	4827      	ldr	r0, [pc, #156]	@ (80019e8 <MX_GPIO_Init+0x178>)
 800194a:	f005 fad7 	bl	8006efc <HAL_GPIO_Init>

/*Configure GPIO pins : LD2_Pin PWR_EN_C_Pin */
GPIO_InitStruct.Pin = LD2_Pin | PWR_EN_C_Pin;
 800194e:	23a0      	movs	r3, #160	@ 0xa0
 8001950:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001952:	2301      	movs	r3, #1
 8001954:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	61fb      	str	r3, [r7, #28]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195a:	2300      	movs	r3, #0
 800195c:	623b      	str	r3, [r7, #32]
HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195e:	f107 0314 	add.w	r3, r7, #20
 8001962:	4619      	mov	r1, r3
 8001964:	4820      	ldr	r0, [pc, #128]	@ (80019e8 <MX_GPIO_Init+0x178>)
 8001966:	f005 fac9 	bl	8006efc <HAL_GPIO_Init>

/*Configure GPIO pin : LPn_C_Pin */
GPIO_InitStruct.Pin = LPn_C_Pin;
 800196a:	2301      	movs	r3, #1
 800196c:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196e:	2301      	movs	r3, #1
 8001970:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	61fb      	str	r3, [r7, #28]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001976:	2302      	movs	r3, #2
 8001978:	623b      	str	r3, [r7, #32]
HAL_GPIO_Init(LPn_C_GPIO_Port, &GPIO_InitStruct);
 800197a:	f107 0314 	add.w	r3, r7, #20
 800197e:	4619      	mov	r1, r3
 8001980:	481a      	ldr	r0, [pc, #104]	@ (80019ec <MX_GPIO_Init+0x17c>)
 8001982:	f005 fabb 	bl	8006efc <HAL_GPIO_Init>

/* EXTI interrupt init*/
HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001986:	2200      	movs	r2, #0
 8001988:	2100      	movs	r1, #0
 800198a:	200a      	movs	r0, #10
 800198c:	f004 fb19 	bl	8005fc2 <HAL_NVIC_SetPriority>
HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001990:	200a      	movs	r0, #10
 8001992:	f004 fb32 	bl	8005ffa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */

//Set I2C enable
HAL_GPIO_WritePin(FLEX_SPI_I2C_N_GPIO_Port, FLEX_SPI_I2C_N_Pin, GPIO_PIN_RESET);
 8001996:	2200      	movs	r2, #0
 8001998:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800199c:	4811      	ldr	r0, [pc, #68]	@ (80019e4 <MX_GPIO_Init+0x174>)
 800199e:	f005 fd2d 	bl	80073fc <HAL_GPIO_WritePin>
// Sensor Reset
HAL_GPIO_WritePin(PWR_EN_C_GPIO_Port, PWR_EN_C_Pin, GPIO_PIN_RESET);
 80019a2:	2200      	movs	r2, #0
 80019a4:	2180      	movs	r1, #128	@ 0x80
 80019a6:	4810      	ldr	r0, [pc, #64]	@ (80019e8 <MX_GPIO_Init+0x178>)
 80019a8:	f005 fd28 	bl	80073fc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LPn_C_GPIO_Port, LPn_C_Pin, GPIO_PIN_RESET);
 80019ac:	2200      	movs	r2, #0
 80019ae:	2101      	movs	r1, #1
 80019b0:	480e      	ldr	r0, [pc, #56]	@ (80019ec <MX_GPIO_Init+0x17c>)
 80019b2:	f005 fd23 	bl	80073fc <HAL_GPIO_WritePin>
HAL_Delay(100);
 80019b6:	2064      	movs	r0, #100	@ 0x64
 80019b8:	f004 f80c 	bl	80059d4 <HAL_Delay>
HAL_GPIO_WritePin(PWR_EN_C_GPIO_Port, PWR_EN_C_Pin, GPIO_PIN_SET);
 80019bc:	2201      	movs	r2, #1
 80019be:	2180      	movs	r1, #128	@ 0x80
 80019c0:	4809      	ldr	r0, [pc, #36]	@ (80019e8 <MX_GPIO_Init+0x178>)
 80019c2:	f005 fd1b 	bl	80073fc <HAL_GPIO_WritePin>
HAL_Delay(100);
 80019c6:	2064      	movs	r0, #100	@ 0x64
 80019c8:	f004 f804 	bl	80059d4 <HAL_Delay>
HAL_GPIO_WritePin(LPn_C_GPIO_Port, LPn_C_Pin, GPIO_PIN_SET);
 80019cc:	2201      	movs	r2, #1
 80019ce:	2101      	movs	r1, #1
 80019d0:	4806      	ldr	r0, [pc, #24]	@ (80019ec <MX_GPIO_Init+0x17c>)
 80019d2:	f005 fd13 	bl	80073fc <HAL_GPIO_WritePin>

/* USER CODE END MX_GPIO_Init_2 */
}
 80019d6:	bf00      	nop
 80019d8:	3728      	adds	r7, #40	@ 0x28
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40020800 	.word	0x40020800
 80019e8:	40020000 	.word	0x40020000
 80019ec:	40020400 	.word	0x40020400

080019f0 <Software_Init>:
/**
 * @brief Initializes the application context structure
 * @param App_Config_Ptr pointer to application context
 */
static void Software_Init(AppConfig_TypeDef *App_Config_Ptr)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
/* Initialize application context values */
App_Config_Ptr->Uart_RxRcvIndex = 0;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80019fe:	461a      	mov	r2, r3
 8001a00:	2300      	movs	r3, #0
 8001a02:	f8c2 3e50 	str.w	r3, [r2, #3664]	@ 0xe50
App_Config_Ptr->Uart_nOverrun = 0;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	2300      	movs	r3, #0
 8001a10:	f8c2 3e54 	str.w	r3, [r2, #3668]	@ 0xe54
App_Config_Ptr->UartComm_CmdReady = 0;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f883 2e58 	strb.w	r2, [r3, #3672]	@ 0xe58
App_Config_Ptr->frame_count = 0;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8001a26:	461a      	mov	r2, r3
 8001a28:	2300      	movs	r3, #0
 8001a2a:	f8c2 3e5c 	str.w	r3, [r2, #3676]	@ 0xe5c
App_Config_Ptr->app_run = true;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2201      	movs	r2, #1
 8001a32:	701a      	strb	r2, [r3, #0]
App_Config_Ptr->new_data_received = false;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 29a0 	strb.w	r2, [r3, #2464]	@ 0x9a0
App_Config_Ptr->params_modif = true;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 29a1 	strb.w	r2, [r3, #2465]	@ 0x9a1

App_Config_Ptr->Params.gesture_gui = 0;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	605a      	str	r2, [r3, #4]
App_Config_Ptr->Params.Resolution = SENSOR__MAX_NB_OF_ZONES;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2240      	movs	r2, #64	@ 0x40
 8001a56:	609a      	str	r2, [r3, #8]
App_Config_Ptr->Params.RangingPeriod = 50;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2232      	movs	r2, #50	@ 0x32
 8001a5c:	60da      	str	r2, [r3, #12]
App_Config_Ptr->Params.IntegrationTime = 10;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	220a      	movs	r2, #10
 8001a62:	611a      	str	r2, [r3, #16]

App_Config_Ptr->Params.SensorOrientation = SEN_ORIENTATION;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	615a      	str	r2, [r3, #20]
App_Config_Ptr->Params.ranging_ignore_dmax_mm = GW_MAX_DISTANCE_MM;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f240 3252 	movw	r2, #850	@ 0x352
 8001a70:	619a      	str	r2, [r3, #24]
App_Config_Ptr->Params.lc_stable_threshold = LC_STABLE_THRESHOLD;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a2a      	ldr	r2, [pc, #168]	@ (8001b20 <Software_Init+0x130>)
 8001a76:	61da      	str	r2, [r3, #28]
App_Config_Ptr->Params.lc_stable_time_threshold = LC_STABLE_TIME_THRESHOLD;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001a7e:	621a      	str	r2, [r3, #32]
App_Config_Ptr->Params.lc_maxDistance_mm = LC_MAXDISTANCE_MM;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001a86:	625a      	str	r2, [r3, #36]	@ 0x24
App_Config_Ptr->Params.lc_minDistance_mm = LC_MINDISTANCE_MM;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2264      	movs	r2, #100	@ 0x64
 8001a8c:	629a      	str	r2, [r3, #40]	@ 0x28
App_Config_Ptr->Params.gesture_selection = GW_DETECTION_LIMITATION;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	225f      	movs	r2, #95	@ 0x5f
 8001a92:	62da      	str	r2, [r3, #44]	@ 0x2c
App_Config_Ptr->Params.double_tap_ts_threshold = DOUBLE_TAP_TS_DIFF_THRESHOLD;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	22fa      	movs	r2, #250	@ 0xfa
 8001a98:	631a      	str	r2, [r3, #48]	@ 0x30
App_Config_Ptr->Params.screening_ms = GW_SCREENING_TIME_MS;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8001aa0:	635a      	str	r2, [r3, #52]	@ 0x34
App_Config_Ptr->Params.analysis_ms = GW_ANALYSIS_TIME_MS;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	22c8      	movs	r2, #200	@ 0xc8
 8001aa6:	639a      	str	r2, [r3, #56]	@ 0x38
App_Config_Ptr->Params.dead_ms = GW_DEAD_TIME_MS;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001aae:	63da      	str	r2, [r3, #60]	@ 0x3c
App_Config_Ptr->Params.closer_mm = GW_CLOSER_DELTA_MM;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2214      	movs	r2, #20
 8001ab4:	641a      	str	r2, [r3, #64]	@ 0x40
App_Config_Ptr->Params.min_speed_x_mm_s = GW_MIN_SPEED_X_MM_S;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001abc:	645a      	str	r2, [r3, #68]	@ 0x44
App_Config_Ptr->Params.min_speed_y_mm_s = GW_MIN_SPEED_Y_MM_S;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8001ac4:	649a      	str	r2, [r3, #72]	@ 0x48
App_Config_Ptr->Params.min_speed_z_mm_s = GW_MIN_SPEED_Z_MM_S;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8001acc:	64da      	str	r2, [r3, #76]	@ 0x4c
App_Config_Ptr->Params.max_speed_mm_s = GW_MAX_SPEED_MM_S;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001ad4:	651a      	str	r2, [r3, #80]	@ 0x50
App_Config_Ptr->Params.min_vx_vy = GW_MIN_VX_ON_VY;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a12      	ldr	r2, [pc, #72]	@ (8001b24 <Software_Init+0x134>)
 8001ada:	655a      	str	r2, [r3, #84]	@ 0x54
App_Config_Ptr->Params.min_vx_vz = GW_MIN_VX_ON_VZ;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001ae2:	659a      	str	r2, [r3, #88]	@ 0x58
App_Config_Ptr->Params.min_vy_vx = GW_MIN_VY_ON_VX;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a10      	ldr	r2, [pc, #64]	@ (8001b28 <Software_Init+0x138>)
 8001ae8:	65da      	str	r2, [r3, #92]	@ 0x5c
App_Config_Ptr->Params.min_vy_vz = GW_MIN_VY_ON_VZ;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a0f      	ldr	r2, [pc, #60]	@ (8001b2c <Software_Init+0x13c>)
 8001aee:	661a      	str	r2, [r3, #96]	@ 0x60
App_Config_Ptr->Params.min_vz_vx = GW_MIN_VZ_ON_VX;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001af6:	665a      	str	r2, [r3, #100]	@ 0x64
App_Config_Ptr->Params.min_vz_vy = GW_MIN_VZ_ON_VY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a0d      	ldr	r2, [pc, #52]	@ (8001b30 <Software_Init+0x140>)
 8001afc:	669a      	str	r2, [r3, #104]	@ 0x68
App_Config_Ptr->Params.min_user_filtering_mm = GW_MIN_USER_FILTERING_MM;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001b04:	66da      	str	r2, [r3, #108]	@ 0x6c
App_Config_Ptr->Params.max_user_filtering_mm = GW_MAX_DISTANCE_MM + GW_FILTERING_AREA_MM;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f240 421a 	movw	r2, #1050	@ 0x41a
 8001b0c:	671a      	str	r2, [r3, #112]	@ 0x70
App_Config_Ptr->Params.filtering_area_mm = GW_FILTERING_AREA_MM;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	22c8      	movs	r2, #200	@ 0xc8
 8001b12:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	451c4000 	.word	0x451c4000
 8001b24:	3ed58106 	.word	0x3ed58106
 8001b28:	3fcf7cee 	.word	0x3fcf7cee
 8001b2c:	3f99999a 	.word	0x3f99999a
 8001b30:	3f8f1aa0 	.word	0x3f8f1aa0

08001b34 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b38:	b672      	cpsid	i
}
 8001b3a:	bf00      	nop
/* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1)
{
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	2120      	movs	r1, #32
 8001b40:	4807      	ldr	r0, [pc, #28]	@ (8001b60 <Error_Handler+0x2c>)
 8001b42:	f005 fc5b 	bl	80073fc <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001b46:	20c8      	movs	r0, #200	@ 0xc8
 8001b48:	f003 ff44 	bl	80059d4 <HAL_Delay>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2120      	movs	r1, #32
 8001b50:	4803      	ldr	r0, [pc, #12]	@ (8001b60 <Error_Handler+0x2c>)
 8001b52:	f005 fc53 	bl	80073fc <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001b56:	20c8      	movs	r0, #200	@ 0xc8
 8001b58:	f003 ff3c 	bl	80059d4 <HAL_Delay>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001b5c:	bf00      	nop
 8001b5e:	e7ed      	b.n	8001b3c <Error_Handler+0x8>
 8001b60:	40020000 	.word	0x40020000

08001b64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	607b      	str	r3, [r7, #4]
 8001b6e:	4b10      	ldr	r3, [pc, #64]	@ (8001bb0 <HAL_MspInit+0x4c>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b72:	4a0f      	ldr	r2, [pc, #60]	@ (8001bb0 <HAL_MspInit+0x4c>)
 8001b74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b78:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb0 <HAL_MspInit+0x4c>)
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b82:	607b      	str	r3, [r7, #4]
 8001b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	603b      	str	r3, [r7, #0]
 8001b8a:	4b09      	ldr	r3, [pc, #36]	@ (8001bb0 <HAL_MspInit+0x4c>)
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8e:	4a08      	ldr	r2, [pc, #32]	@ (8001bb0 <HAL_MspInit+0x4c>)
 8001b90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b96:	4b06      	ldr	r3, [pc, #24]	@ (8001bb0 <HAL_MspInit+0x4c>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b9e:	603b      	str	r3, [r7, #0]
 8001ba0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ba2:	2007      	movs	r0, #7
 8001ba4:	f004 fa02 	bl	8005fac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ba8:	bf00      	nop
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40023800 	.word	0x40023800

08001bb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b08a      	sub	sp, #40	@ 0x28
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a19      	ldr	r2, [pc, #100]	@ (8001c38 <HAL_I2C_MspInit+0x84>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d12c      	bne.n	8001c30 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	613b      	str	r3, [r7, #16]
 8001bda:	4b18      	ldr	r3, [pc, #96]	@ (8001c3c <HAL_I2C_MspInit+0x88>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bde:	4a17      	ldr	r2, [pc, #92]	@ (8001c3c <HAL_I2C_MspInit+0x88>)
 8001be0:	f043 0302 	orr.w	r3, r3, #2
 8001be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001be6:	4b15      	ldr	r3, [pc, #84]	@ (8001c3c <HAL_I2C_MspInit+0x88>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	613b      	str	r3, [r7, #16]
 8001bf0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bf2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001bf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bf8:	2312      	movs	r3, #18
 8001bfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c00:	2303      	movs	r3, #3
 8001c02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c04:	2304      	movs	r3, #4
 8001c06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c08:	f107 0314 	add.w	r3, r7, #20
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	480c      	ldr	r0, [pc, #48]	@ (8001c40 <HAL_I2C_MspInit+0x8c>)
 8001c10:	f005 f974 	bl	8006efc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c14:	2300      	movs	r3, #0
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	4b08      	ldr	r3, [pc, #32]	@ (8001c3c <HAL_I2C_MspInit+0x88>)
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1c:	4a07      	ldr	r2, [pc, #28]	@ (8001c3c <HAL_I2C_MspInit+0x88>)
 8001c1e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c22:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c24:	4b05      	ldr	r3, [pc, #20]	@ (8001c3c <HAL_I2C_MspInit+0x88>)
 8001c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001c30:	bf00      	nop
 8001c32:	3728      	adds	r7, #40	@ 0x28
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40005400 	.word	0x40005400
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40020400 	.word	0x40020400

08001c44 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a0b      	ldr	r2, [pc, #44]	@ (8001c80 <HAL_I2C_MspDeInit+0x3c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d10f      	bne.n	8001c76 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001c56:	4b0b      	ldr	r3, [pc, #44]	@ (8001c84 <HAL_I2C_MspDeInit+0x40>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c84 <HAL_I2C_MspDeInit+0x40>)
 8001c5c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001c60:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8001c62:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c66:	4808      	ldr	r0, [pc, #32]	@ (8001c88 <HAL_I2C_MspDeInit+0x44>)
 8001c68:	f005 facc 	bl	8007204 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001c6c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c70:	4805      	ldr	r0, [pc, #20]	@ (8001c88 <HAL_I2C_MspDeInit+0x44>)
 8001c72:	f005 fac7 	bl	8007204 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40005400 	.word	0x40005400
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40020400 	.word	0x40020400

08001c8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a0b      	ldr	r2, [pc, #44]	@ (8001cc8 <HAL_TIM_Base_MspInit+0x3c>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d10d      	bne.n	8001cba <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ccc <HAL_TIM_Base_MspInit+0x40>)
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca6:	4a09      	ldr	r2, [pc, #36]	@ (8001ccc <HAL_TIM_Base_MspInit+0x40>)
 8001ca8:	f043 0302 	orr.w	r3, r3, #2
 8001cac:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cae:	4b07      	ldr	r3, [pc, #28]	@ (8001ccc <HAL_TIM_Base_MspInit+0x40>)
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001cba:	bf00      	nop
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	40000400 	.word	0x40000400
 8001ccc:	40023800 	.word	0x40023800

08001cd0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b088      	sub	sp, #32
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd8:	f107 030c 	add.w	r3, r7, #12
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a12      	ldr	r2, [pc, #72]	@ (8001d38 <HAL_TIM_MspPostInit+0x68>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d11e      	bne.n	8001d30 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60bb      	str	r3, [r7, #8]
 8001cf6:	4b11      	ldr	r3, [pc, #68]	@ (8001d3c <HAL_TIM_MspPostInit+0x6c>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfa:	4a10      	ldr	r2, [pc, #64]	@ (8001d3c <HAL_TIM_MspPostInit+0x6c>)
 8001cfc:	f043 0304 	orr.w	r3, r3, #4
 8001d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d02:	4b0e      	ldr	r3, [pc, #56]	@ (8001d3c <HAL_TIM_MspPostInit+0x6c>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d06:	f003 0304 	and.w	r3, r3, #4
 8001d0a:	60bb      	str	r3, [r7, #8]
 8001d0c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8001d0e:	f44f 7350 	mov.w	r3, #832	@ 0x340
 8001d12:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d14:	2302      	movs	r3, #2
 8001d16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d20:	2302      	movs	r3, #2
 8001d22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d24:	f107 030c 	add.w	r3, r7, #12
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4805      	ldr	r0, [pc, #20]	@ (8001d40 <HAL_TIM_MspPostInit+0x70>)
 8001d2c:	f005 f8e6 	bl	8006efc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d30:	bf00      	nop
 8001d32:	3720      	adds	r7, #32
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40000400 	.word	0x40000400
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	40020800 	.word	0x40020800

08001d44 <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a07      	ldr	r2, [pc, #28]	@ (8001d70 <HAL_TIM_Base_MspDeInit+0x2c>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d105      	bne.n	8001d62 <HAL_TIM_Base_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN TIM3_MspDeInit 0 */

  /* USER CODE END TIM3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM3_CLK_DISABLE();
 8001d56:	4b07      	ldr	r3, [pc, #28]	@ (8001d74 <HAL_TIM_Base_MspDeInit+0x30>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5a:	4a06      	ldr	r2, [pc, #24]	@ (8001d74 <HAL_TIM_Base_MspDeInit+0x30>)
 8001d5c:	f023 0302 	bic.w	r3, r3, #2
 8001d60:	6413      	str	r3, [r2, #64]	@ 0x40
  /* USER CODE BEGIN TIM3_MspDeInit 1 */

  /* USER CODE END TIM3_MspDeInit 1 */
  }

}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	40000400 	.word	0x40000400
 8001d74:	40023800 	.word	0x40023800

08001d78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08c      	sub	sp, #48	@ 0x30
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d80:	f107 031c 	add.w	r3, r7, #28
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
 8001d8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a36      	ldr	r2, [pc, #216]	@ (8001e70 <HAL_UART_MspInit+0xf8>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d134      	bne.n	8001e04 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	61bb      	str	r3, [r7, #24]
 8001d9e:	4b35      	ldr	r3, [pc, #212]	@ (8001e74 <HAL_UART_MspInit+0xfc>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da2:	4a34      	ldr	r2, [pc, #208]	@ (8001e74 <HAL_UART_MspInit+0xfc>)
 8001da4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001da8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001daa:	4b32      	ldr	r3, [pc, #200]	@ (8001e74 <HAL_UART_MspInit+0xfc>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db2:	61bb      	str	r3, [r7, #24]
 8001db4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]
 8001dba:	4b2e      	ldr	r3, [pc, #184]	@ (8001e74 <HAL_UART_MspInit+0xfc>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dbe:	4a2d      	ldr	r2, [pc, #180]	@ (8001e74 <HAL_UART_MspInit+0xfc>)
 8001dc0:	f043 0301 	orr.w	r3, r3, #1
 8001dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dc6:	4b2b      	ldr	r3, [pc, #172]	@ (8001e74 <HAL_UART_MspInit+0xfc>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	617b      	str	r3, [r7, #20]
 8001dd0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001dd2:	230c      	movs	r3, #12
 8001dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dde:	2300      	movs	r3, #0
 8001de0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001de2:	2307      	movs	r3, #7
 8001de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de6:	f107 031c 	add.w	r3, r7, #28
 8001dea:	4619      	mov	r1, r3
 8001dec:	4822      	ldr	r0, [pc, #136]	@ (8001e78 <HAL_UART_MspInit+0x100>)
 8001dee:	f005 f885 	bl	8006efc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001df2:	2200      	movs	r2, #0
 8001df4:	2100      	movs	r1, #0
 8001df6:	2026      	movs	r0, #38	@ 0x26
 8001df8:	f004 f8e3 	bl	8005fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001dfc:	2026      	movs	r0, #38	@ 0x26
 8001dfe:	f004 f8fc 	bl	8005ffa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001e02:	e031      	b.n	8001e68 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART6)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a1c      	ldr	r2, [pc, #112]	@ (8001e7c <HAL_UART_MspInit+0x104>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d12c      	bne.n	8001e68 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
 8001e12:	4b18      	ldr	r3, [pc, #96]	@ (8001e74 <HAL_UART_MspInit+0xfc>)
 8001e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e16:	4a17      	ldr	r2, [pc, #92]	@ (8001e74 <HAL_UART_MspInit+0xfc>)
 8001e18:	f043 0320 	orr.w	r3, r3, #32
 8001e1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e1e:	4b15      	ldr	r3, [pc, #84]	@ (8001e74 <HAL_UART_MspInit+0xfc>)
 8001e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e22:	f003 0320 	and.w	r3, r3, #32
 8001e26:	613b      	str	r3, [r7, #16]
 8001e28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	4b11      	ldr	r3, [pc, #68]	@ (8001e74 <HAL_UART_MspInit+0xfc>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e32:	4a10      	ldr	r2, [pc, #64]	@ (8001e74 <HAL_UART_MspInit+0xfc>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e74 <HAL_UART_MspInit+0xfc>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001e46:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e50:	2302      	movs	r3, #2
 8001e52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001e54:	2301      	movs	r3, #1
 8001e56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001e58:	2308      	movs	r3, #8
 8001e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e5c:	f107 031c 	add.w	r3, r7, #28
 8001e60:	4619      	mov	r1, r3
 8001e62:	4805      	ldr	r0, [pc, #20]	@ (8001e78 <HAL_UART_MspInit+0x100>)
 8001e64:	f005 f84a 	bl	8006efc <HAL_GPIO_Init>
}
 8001e68:	bf00      	nop
 8001e6a:	3730      	adds	r7, #48	@ 0x30
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40004400 	.word	0x40004400
 8001e74:	40023800 	.word	0x40023800
 8001e78:	40020000 	.word	0x40020000
 8001e7c:	40011400 	.word	0x40011400

08001e80 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a12      	ldr	r2, [pc, #72]	@ (8001ed8 <HAL_UART_MspDeInit+0x58>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d10d      	bne.n	8001eae <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8001e92:	4b12      	ldr	r3, [pc, #72]	@ (8001edc <HAL_UART_MspDeInit+0x5c>)
 8001e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e96:	4a11      	ldr	r2, [pc, #68]	@ (8001edc <HAL_UART_MspDeInit+0x5c>)
 8001e98:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8001e9c:	6413      	str	r3, [r2, #64]	@ 0x40

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, USART_TX_Pin|USART_RX_Pin);
 8001e9e:	210c      	movs	r1, #12
 8001ea0:	480f      	ldr	r0, [pc, #60]	@ (8001ee0 <HAL_UART_MspDeInit+0x60>)
 8001ea2:	f005 f9af 	bl	8007204 <HAL_GPIO_DeInit>

    /* USART2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001ea6:	2026      	movs	r0, #38	@ 0x26
 8001ea8:	f004 f8b5 	bl	8006016 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 8001eac:	e00f      	b.n	8001ece <HAL_UART_MspDeInit+0x4e>
  else if(huart->Instance==USART6)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a0c      	ldr	r2, [pc, #48]	@ (8001ee4 <HAL_UART_MspDeInit+0x64>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d10a      	bne.n	8001ece <HAL_UART_MspDeInit+0x4e>
    __HAL_RCC_USART6_CLK_DISABLE();
 8001eb8:	4b08      	ldr	r3, [pc, #32]	@ (8001edc <HAL_UART_MspDeInit+0x5c>)
 8001eba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ebc:	4a07      	ldr	r2, [pc, #28]	@ (8001edc <HAL_UART_MspDeInit+0x5c>)
 8001ebe:	f023 0320 	bic.w	r3, r3, #32
 8001ec2:	6453      	str	r3, [r2, #68]	@ 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 8001ec4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8001ec8:	4805      	ldr	r0, [pc, #20]	@ (8001ee0 <HAL_UART_MspDeInit+0x60>)
 8001eca:	f005 f99b 	bl	8007204 <HAL_GPIO_DeInit>
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40004400 	.word	0x40004400
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40020000 	.word	0x40020000
 8001ee4:	40011400 	.word	0x40011400

08001ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001eec:	bf00      	nop
 8001eee:	e7fd      	b.n	8001eec <NMI_Handler+0x4>

08001ef0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ef4:	bf00      	nop
 8001ef6:	e7fd      	b.n	8001ef4 <HardFault_Handler+0x4>

08001ef8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001efc:	bf00      	nop
 8001efe:	e7fd      	b.n	8001efc <MemManage_Handler+0x4>

08001f00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f04:	bf00      	nop
 8001f06:	e7fd      	b.n	8001f04 <BusFault_Handler+0x4>

08001f08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f0c:	bf00      	nop
 8001f0e:	e7fd      	b.n	8001f0c <UsageFault_Handler+0x4>

08001f10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f3e:	f003 fce9 	bl	8005914 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_C_Pin);
 8001f4a:	2010      	movs	r0, #16
 8001f4c:	f005 fab1 	bl	80074b2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001f50:	bf00      	nop
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f58:	4802      	ldr	r0, [pc, #8]	@ (8001f64 <USART2_IRQHandler+0x10>)
 8001f5a:	f015 fcff 	bl	801795c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	20009b7c 	.word	0x20009b7c

08001f68 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
}
 8001f6c:	bf00      	nop
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <_getpid>:

int _getpid(void)
{
 8001f76:	b480      	push	{r7}
 8001f78:	af00      	add	r7, sp, #0
	return 1;
 8001f7a:	2301      	movs	r3, #1
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <_kill>:

int _kill(int pid, int sig)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b082      	sub	sp, #8
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f90:	f021 fb18 	bl	80235c4 <__errno>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2216      	movs	r2, #22
 8001f98:	601a      	str	r2, [r3, #0]
	return -1;
 8001f9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <_exit>:

void _exit (int status)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b082      	sub	sp, #8
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001fae:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff ffe7 	bl	8001f86 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001fb8:	bf00      	nop
 8001fba:	e7fd      	b.n	8001fb8 <_exit+0x12>

08001fbc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]
 8001fcc:	e00a      	b.n	8001fe4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001fce:	f7fe f9df 	bl	8000390 <__io_getchar>
 8001fd2:	4601      	mov	r1, r0
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	1c5a      	adds	r2, r3, #1
 8001fd8:	60ba      	str	r2, [r7, #8]
 8001fda:	b2ca      	uxtb	r2, r1
 8001fdc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	617b      	str	r3, [r7, #20]
 8001fe4:	697a      	ldr	r2, [r7, #20]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	dbf0      	blt.n	8001fce <_read+0x12>
	}

return len;
 8001fec:	687b      	ldr	r3, [r7, #4]
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3718      	adds	r7, #24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b086      	sub	sp, #24
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	60f8      	str	r0, [r7, #12]
 8001ffe:	60b9      	str	r1, [r7, #8]
 8002000:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
 8002006:	e009      	b.n	800201c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	1c5a      	adds	r2, r3, #1
 800200c:	60ba      	str	r2, [r7, #8]
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe f9a3 	bl	800035c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	3301      	adds	r3, #1
 800201a:	617b      	str	r3, [r7, #20]
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	429a      	cmp	r2, r3
 8002022:	dbf1      	blt.n	8002008 <_write+0x12>
	}
	return len;
 8002024:	687b      	ldr	r3, [r7, #4]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <_close>:

int _close(int file)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
	return -1;
 8002036:	f04f 33ff 	mov.w	r3, #4294967295
}
 800203a:	4618      	mov	r0, r3
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <_fstat>:

int _fstat(int file, struct stat *st)
{
 8002046:	b480      	push	{r7}
 8002048:	b083      	sub	sp, #12
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
 800204e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002056:	605a      	str	r2, [r3, #4]
	return 0;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <_isatty>:

int _isatty(int file)
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
	return 1;
 800206e:	2301      	movs	r3, #1
}
 8002070:	4618      	mov	r0, r3
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
	return 0;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3714      	adds	r7, #20
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <_open>:

int _open(char *path, int flags, ...)
{
 8002096:	b40e      	push	{r1, r2, r3}
 8002098:	b480      	push	{r7}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 80020a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	b003      	add	sp, #12
 80020b0:	4770      	bx	lr

080020b2 <_wait>:

int _wait(int *status)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b082      	sub	sp, #8
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
	errno = ECHILD;
 80020ba:	f021 fa83 	bl	80235c4 <__errno>
 80020be:	4603      	mov	r3, r0
 80020c0:	220a      	movs	r2, #10
 80020c2:	601a      	str	r2, [r3, #0]
	return -1;
 80020c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <_unlink>:

int _unlink(char *name)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
	errno = ENOENT;
 80020d8:	f021 fa74 	bl	80235c4 <__errno>
 80020dc:	4603      	mov	r3, r0
 80020de:	2202      	movs	r2, #2
 80020e0:	601a      	str	r2, [r3, #0]
	return -1;
 80020e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <_times>:

int _times(struct tms *buf)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
	return -1;
 80020f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <_stat>:

int _stat(char *file, struct stat *st)
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
 800210e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002116:	605a      	str	r2, [r3, #4]
	return 0;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <_link>:

int _link(char *old, char *new)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b082      	sub	sp, #8
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
 800212e:	6039      	str	r1, [r7, #0]
	errno = EMLINK;
 8002130:	f021 fa48 	bl	80235c4 <__errno>
 8002134:	4603      	mov	r3, r0
 8002136:	221f      	movs	r2, #31
 8002138:	601a      	str	r2, [r3, #0]
	return -1;
 800213a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800213e:	4618      	mov	r0, r3
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <_fork>:

int _fork(void)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	af00      	add	r7, sp, #0
	errno = EAGAIN;
 800214a:	f021 fa3b 	bl	80235c4 <__errno>
 800214e:	4603      	mov	r3, r0
 8002150:	220b      	movs	r2, #11
 8002152:	601a      	str	r2, [r3, #0]
	return -1;
 8002154:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002158:	4618      	mov	r0, r3
 800215a:	bd80      	pop	{r7, pc}

0800215c <_execve>:

int _execve(char *name, char **argv, char **env)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
	errno = ENOMEM;
 8002168:	f021 fa2c 	bl	80235c4 <__errno>
 800216c:	4603      	mov	r3, r0
 800216e:	220c      	movs	r2, #12
 8002170:	601a      	str	r2, [r3, #0]
	return -1;
 8002172:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002176:	4618      	mov	r0, r3
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
	...

08002180 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002188:	4a14      	ldr	r2, [pc, #80]	@ (80021dc <_sbrk+0x5c>)
 800218a:	4b15      	ldr	r3, [pc, #84]	@ (80021e0 <_sbrk+0x60>)
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002194:	4b13      	ldr	r3, [pc, #76]	@ (80021e4 <_sbrk+0x64>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d102      	bne.n	80021a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800219c:	4b11      	ldr	r3, [pc, #68]	@ (80021e4 <_sbrk+0x64>)
 800219e:	4a12      	ldr	r2, [pc, #72]	@ (80021e8 <_sbrk+0x68>)
 80021a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021a2:	4b10      	ldr	r3, [pc, #64]	@ (80021e4 <_sbrk+0x64>)
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4413      	add	r3, r2
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d207      	bcs.n	80021c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021b0:	f021 fa08 	bl	80235c4 <__errno>
 80021b4:	4603      	mov	r3, r0
 80021b6:	220c      	movs	r2, #12
 80021b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021ba:	f04f 33ff 	mov.w	r3, #4294967295
 80021be:	e009      	b.n	80021d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021c0:	4b08      	ldr	r3, [pc, #32]	@ (80021e4 <_sbrk+0x64>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021c6:	4b07      	ldr	r3, [pc, #28]	@ (80021e4 <_sbrk+0x64>)
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4413      	add	r3, r2
 80021ce:	4a05      	ldr	r2, [pc, #20]	@ (80021e4 <_sbrk+0x64>)
 80021d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021d2:	68fb      	ldr	r3, [r7, #12]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	20018000 	.word	0x20018000
 80021e0:	00000800 	.word	0x00000800
 80021e4:	20009c0c 	.word	0x20009c0c
 80021e8:	20009e88 	.word	0x20009e88

080021ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021f0:	4b06      	ldr	r3, [pc, #24]	@ (800220c <SystemInit+0x20>)
 80021f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f6:	4a05      	ldr	r2, [pc, #20]	@ (800220c <SystemInit+0x20>)
 80021f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002200:	bf00      	nop
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	e000ed00 	.word	0xe000ed00

08002210 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002210:	b480      	push	{r7}
 8002212:	b087      	sub	sp, #28
 8002214:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8002216:	2300      	movs	r3, #0
 8002218:	613b      	str	r3, [r7, #16]
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	2302      	movs	r3, #2
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	2300      	movs	r3, #0
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	2302      	movs	r3, #2
 8002228:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800222a:	4b34      	ldr	r3, [pc, #208]	@ (80022fc <SystemCoreClockUpdate+0xec>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 030c 	and.w	r3, r3, #12
 8002232:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	2b08      	cmp	r3, #8
 8002238:	d011      	beq.n	800225e <SystemCoreClockUpdate+0x4e>
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	2b08      	cmp	r3, #8
 800223e:	d844      	bhi.n	80022ca <SystemCoreClockUpdate+0xba>
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <SystemCoreClockUpdate+0x3e>
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	2b04      	cmp	r3, #4
 800224a:	d004      	beq.n	8002256 <SystemCoreClockUpdate+0x46>
 800224c:	e03d      	b.n	80022ca <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800224e:	4b2c      	ldr	r3, [pc, #176]	@ (8002300 <SystemCoreClockUpdate+0xf0>)
 8002250:	4a2c      	ldr	r2, [pc, #176]	@ (8002304 <SystemCoreClockUpdate+0xf4>)
 8002252:	601a      	str	r2, [r3, #0]
      break;
 8002254:	e03d      	b.n	80022d2 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8002256:	4b2a      	ldr	r3, [pc, #168]	@ (8002300 <SystemCoreClockUpdate+0xf0>)
 8002258:	4a2b      	ldr	r2, [pc, #172]	@ (8002308 <SystemCoreClockUpdate+0xf8>)
 800225a:	601a      	str	r2, [r3, #0]
      break;
 800225c:	e039      	b.n	80022d2 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800225e:	4b27      	ldr	r3, [pc, #156]	@ (80022fc <SystemCoreClockUpdate+0xec>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	0d9b      	lsrs	r3, r3, #22
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800226a:	4b24      	ldr	r3, [pc, #144]	@ (80022fc <SystemCoreClockUpdate+0xec>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002272:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00c      	beq.n	8002294 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800227a:	4a23      	ldr	r2, [pc, #140]	@ (8002308 <SystemCoreClockUpdate+0xf8>)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002282:	4a1e      	ldr	r2, [pc, #120]	@ (80022fc <SystemCoreClockUpdate+0xec>)
 8002284:	6852      	ldr	r2, [r2, #4]
 8002286:	0992      	lsrs	r2, r2, #6
 8002288:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800228c:	fb02 f303 	mul.w	r3, r2, r3
 8002290:	617b      	str	r3, [r7, #20]
 8002292:	e00b      	b.n	80022ac <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002294:	4a1b      	ldr	r2, [pc, #108]	@ (8002304 <SystemCoreClockUpdate+0xf4>)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	fbb2 f3f3 	udiv	r3, r2, r3
 800229c:	4a17      	ldr	r2, [pc, #92]	@ (80022fc <SystemCoreClockUpdate+0xec>)
 800229e:	6852      	ldr	r2, [r2, #4]
 80022a0:	0992      	lsrs	r2, r2, #6
 80022a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022a6:	fb02 f303 	mul.w	r3, r2, r3
 80022aa:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80022ac:	4b13      	ldr	r3, [pc, #76]	@ (80022fc <SystemCoreClockUpdate+0xec>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	0c1b      	lsrs	r3, r3, #16
 80022b2:	f003 0303 	and.w	r3, r3, #3
 80022b6:	3301      	adds	r3, #1
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80022bc:	697a      	ldr	r2, [r7, #20]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c4:	4a0e      	ldr	r2, [pc, #56]	@ (8002300 <SystemCoreClockUpdate+0xf0>)
 80022c6:	6013      	str	r3, [r2, #0]
      break;
 80022c8:	e003      	b.n	80022d2 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80022ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002300 <SystemCoreClockUpdate+0xf0>)
 80022cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002304 <SystemCoreClockUpdate+0xf4>)
 80022ce:	601a      	str	r2, [r3, #0]
      break;
 80022d0:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80022d2:	4b0a      	ldr	r3, [pc, #40]	@ (80022fc <SystemCoreClockUpdate+0xec>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	091b      	lsrs	r3, r3, #4
 80022d8:	f003 030f 	and.w	r3, r3, #15
 80022dc:	4a0b      	ldr	r2, [pc, #44]	@ (800230c <SystemCoreClockUpdate+0xfc>)
 80022de:	5cd3      	ldrb	r3, [r2, r3]
 80022e0:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80022e2:	4b07      	ldr	r3, [pc, #28]	@ (8002300 <SystemCoreClockUpdate+0xf0>)
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	fa22 f303 	lsr.w	r3, r2, r3
 80022ec:	4a04      	ldr	r2, [pc, #16]	@ (8002300 <SystemCoreClockUpdate+0xf0>)
 80022ee:	6013      	str	r3, [r2, #0]
}
 80022f0:	bf00      	nop
 80022f2:	371c      	adds	r7, #28
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	40023800 	.word	0x40023800
 8002300:	20000030 	.word	0x20000030
 8002304:	00f42400 	.word	0x00f42400
 8002308:	007a1200 	.word	0x007a1200
 800230c:	08029894 	.word	0x08029894

08002310 <_vl53lmz_poll_for_answer>:
		uint8_t					size,
		uint8_t					pos,
		uint16_t				address,
		uint8_t					mask,
		uint8_t					expected_value)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	4608      	mov	r0, r1
 800231a:	4611      	mov	r1, r2
 800231c:	461a      	mov	r2, r3
 800231e:	4603      	mov	r3, r0
 8002320:	70fb      	strb	r3, [r7, #3]
 8002322:	460b      	mov	r3, r1
 8002324:	70bb      	strb	r3, [r7, #2]
 8002326:	4613      	mov	r3, r2
 8002328:	803b      	strh	r3, [r7, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 800232a:	2300      	movs	r3, #0
 800232c:	73fb      	strb	r3, [r7, #15]
	uint8_t timeout = 0;
 800232e:	2300      	movs	r3, #0
 8002330:	73bb      	strb	r3, [r7, #14]

	do {
		status |= RdMulti(&(p_dev->platform), address,
 8002332:	6878      	ldr	r0, [r7, #4]
				p_dev->temp_buffer, size);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f203 5204 	addw	r2, r3, #1284	@ 0x504
		status |= RdMulti(&(p_dev->platform), address,
 800233a:	78fb      	ldrb	r3, [r7, #3]
 800233c:	8839      	ldrh	r1, [r7, #0]
 800233e:	f003 f9b9 	bl	80056b4 <RdMulti>
 8002342:	4603      	mov	r3, r0
 8002344:	461a      	mov	r2, r3
 8002346:	7bfb      	ldrb	r3, [r7, #15]
 8002348:	4313      	orrs	r3, r2
 800234a:	73fb      	strb	r3, [r7, #15]
		status |= WaitMs(&(p_dev->platform), 10);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	210a      	movs	r1, #10
 8002350:	4618      	mov	r0, r3
 8002352:	f003 fa2c 	bl	80057ae <WaitMs>
 8002356:	4603      	mov	r3, r0
 8002358:	461a      	mov	r2, r3
 800235a:	7bfb      	ldrb	r3, [r7, #15]
 800235c:	4313      	orrs	r3, r2
 800235e:	73fb      	strb	r3, [r7, #15]

		if(timeout >= (uint8_t)200)	/* 2s timeout */
 8002360:	7bbb      	ldrb	r3, [r7, #14]
 8002362:	2bc7      	cmp	r3, #199	@ 0xc7
 8002364:	d904      	bls.n	8002370 <_vl53lmz_poll_for_answer+0x60>
		{
			status |= (uint8_t)VL53LMZ_STATUS_TIMEOUT_ERROR;
 8002366:	7bfb      	ldrb	r3, [r7, #15]
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	73fb      	strb	r3, [r7, #15]
			break;
 800236e:	e01a      	b.n	80023a6 <_vl53lmz_poll_for_answer+0x96>
		}else if((size >= (uint8_t)4) 
 8002370:	78fb      	ldrb	r3, [r7, #3]
 8002372:	2b03      	cmp	r3, #3
 8002374:	d909      	bls.n	800238a <_vl53lmz_poll_for_answer+0x7a>
						 && (p_dev->temp_buffer[2] >= (uint8_t)0x7f))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 3506 	ldrb.w	r3, [r3, #1286]	@ 0x506
 800237c:	2b7e      	cmp	r3, #126	@ 0x7e
 800237e:	d904      	bls.n	800238a <_vl53lmz_poll_for_answer+0x7a>
		{
			status |= VL53LMZ_MCU_ERROR;
 8002380:	7bfb      	ldrb	r3, [r7, #15]
 8002382:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8002386:	73fb      	strb	r3, [r7, #15]
			break;
 8002388:	e00d      	b.n	80023a6 <_vl53lmz_poll_for_answer+0x96>
		}
		else
		{
			timeout++;
 800238a:	7bbb      	ldrb	r3, [r7, #14]
 800238c:	3301      	adds	r3, #1
 800238e:	73bb      	strb	r3, [r7, #14]
		}
	}while ((p_dev->temp_buffer[pos] & mask) != expected_value);
 8002390:	78bb      	ldrb	r3, [r7, #2]
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	4413      	add	r3, r2
 8002396:	f893 2504 	ldrb.w	r2, [r3, #1284]	@ 0x504
 800239a:	7e3b      	ldrb	r3, [r7, #24]
 800239c:	4013      	ands	r3, r2
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	7f3a      	ldrb	r2, [r7, #28]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d1c5      	bne.n	8002332 <_vl53lmz_poll_for_answer+0x22>

	return status;
 80023a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <_vl53lmz_poll_for_mcu_boot>:
 * Inner function, not available outside this file. This function is used to
 * wait for the MCU to boot.
 */
static uint8_t _vl53lmz_poll_for_mcu_boot(
			  VL53LMZ_Configuration		 *p_dev)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
   uint8_t go2_status0, go2_status1, status = VL53LMZ_STATUS_OK;
 80023b8:	2300      	movs	r3, #0
 80023ba:	73fb      	strb	r3, [r7, #15]
   uint16_t timeout = 0;
 80023bc:	2300      	movs	r3, #0
 80023be:	81bb      	strh	r3, [r7, #12]

   do {
		status |= RdByte(&(p_dev->platform), 0x06, &go2_status0);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f107 020b 	add.w	r2, r7, #11
 80023c6:	2106      	movs	r1, #6
 80023c8:	4618      	mov	r0, r3
 80023ca:	f003 f8f7 	bl	80055bc <RdByte>
 80023ce:	4603      	mov	r3, r0
 80023d0:	461a      	mov	r2, r3
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	73fb      	strb	r3, [r7, #15]
		if((go2_status0 & (uint8_t)0x80) != (uint8_t)0){
 80023d8:	7afb      	ldrb	r3, [r7, #11]
 80023da:	b25b      	sxtb	r3, r3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	da10      	bge.n	8002402 <_vl53lmz_poll_for_mcu_boot+0x52>
			status |= RdByte(&(p_dev->platform), 0x07, &go2_status1);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f107 020a 	add.w	r2, r7, #10
 80023e6:	2107      	movs	r1, #7
 80023e8:	4618      	mov	r0, r3
 80023ea:	f003 f8e7 	bl	80055bc <RdByte>
 80023ee:	4603      	mov	r3, r0
 80023f0:	461a      	mov	r2, r3
 80023f2:	7bfb      	ldrb	r3, [r7, #15]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	73fb      	strb	r3, [r7, #15]
			if(go2_status1 & (uint8_t)0x01)
 80023f8:	7abb      	ldrb	r3, [r7, #10]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d111      	bne.n	8002426 <_vl53lmz_poll_for_mcu_boot+0x76>
			{
				status |= VL53LMZ_STATUS_OK;
				break;
			}
		}
		(void)WaitMs(&(p_dev->platform), 1);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2101      	movs	r1, #1
 8002406:	4618      	mov	r0, r3
 8002408:	f003 f9d1 	bl	80057ae <WaitMs>
		timeout++;
 800240c:	89bb      	ldrh	r3, [r7, #12]
 800240e:	3301      	adds	r3, #1
 8002410:	81bb      	strh	r3, [r7, #12]

		if((go2_status0 & (uint8_t)0x1) != (uint8_t)0){
 8002412:	7afb      	ldrb	r3, [r7, #11]
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	2b00      	cmp	r3, #0
 800241a:	d106      	bne.n	800242a <_vl53lmz_poll_for_mcu_boot+0x7a>
			break;
		}
	}while (timeout < (uint16_t)500);
 800241c:	89bb      	ldrh	r3, [r7, #12]
 800241e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002422:	d3cd      	bcc.n	80023c0 <_vl53lmz_poll_for_mcu_boot+0x10>
 8002424:	e002      	b.n	800242c <_vl53lmz_poll_for_mcu_boot+0x7c>
				break;
 8002426:	bf00      	nop
 8002428:	e000      	b.n	800242c <_vl53lmz_poll_for_mcu_boot+0x7c>
			break;
 800242a:	bf00      	nop

   return status;
 800242c:	7bfb      	ldrb	r3, [r7, #15]
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <_vl53lmz_send_offset_data>:
 */

static uint8_t _vl53lmz_send_offset_data(
		VL53LMZ_Configuration		*p_dev,
		uint8_t						resolution)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b0ea      	sub	sp, #424	@ 0x1a8
 800243a:	af02      	add	r7, sp, #8
 800243c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002440:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002444:	6018      	str	r0, [r3, #0]
 8002446:	460a      	mov	r2, r1
 8002448:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800244c:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 8002450:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 8002452:	2300      	movs	r3, #0
 8002454:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
	uint32_t signal_grid[64];
	int16_t range_grid[64];
	uint8_t dss_4x4[] = {0x0F, 0x04, 0x04, 0x00, 0x08, 0x10, 0x10, 0x07};
 8002458:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800245c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002460:	4ad9      	ldr	r2, [pc, #868]	@ (80027c8 <_vl53lmz_send_offset_data+0x392>)
 8002462:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002466:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0F, 0x03, 0x01, 0x01, 0xE4};
 800246a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800246e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002472:	4ad6      	ldr	r2, [pc, #856]	@ (80027cc <_vl53lmz_send_offset_data+0x396>)
 8002474:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002478:	e883 0003 	stmia.w	r3, {r0, r1}
	int8_t i, j;
	uint16_t k;

	(void)memcpy(p_dev->temp_buffer,
 800247c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002480:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f203 5004 	addw	r0, r3, #1284	@ 0x504
			   p_dev->offset_data, VL53LMZ_OFFSET_BUFFER_SIZE);
 800248a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800248e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	3314      	adds	r3, #20
	(void)memcpy(p_dev->temp_buffer,
 8002496:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800249a:	4619      	mov	r1, r3
 800249c:	f021 f8bf 	bl	802361e <memcpy>

	/* Data extrapolation is required for 4X4 offset */
	if(resolution == (uint8_t)VL53LMZ_RESOLUTION_4X4){
 80024a0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80024a4:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	2b10      	cmp	r3, #16
 80024ac:	f040 8122 	bne.w	80026f4 <_vl53lmz_send_offset_data+0x2be>
		(void)memcpy(&(p_dev->temp_buffer[0x10]), dss_4x4, sizeof(dss_4x4));
 80024b0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80024b4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f203 5214 	addw	r2, r3, #1300	@ 0x514
 80024be:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80024c2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80024c6:	cb03      	ldmia	r3!, {r0, r1}
 80024c8:	6010      	str	r0, [r2, #0]
 80024ca:	6051      	str	r1, [r2, #4]
		SwapBuffer(p_dev->temp_buffer, VL53LMZ_OFFSET_BUFFER_SIZE);
 80024cc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80024d0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f203 5304 	addw	r3, r3, #1284	@ 0x504
 80024da:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 80024de:	4618      	mov	r0, r3
 80024e0:	f003 f92f 	bl	8005742 <SwapBuffer>
		(void)memcpy(signal_grid,&(p_dev->temp_buffer[0x3C]),
 80024e4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80024e8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f503 61a8 	add.w	r1, r3, #1344	@ 0x540
 80024f2:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80024f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024fa:	4618      	mov	r0, r3
 80024fc:	f021 f88f 	bl	802361e <memcpy>
			sizeof(signal_grid));
		(void)memcpy(range_grid,&(p_dev->temp_buffer[0x140]),
 8002500:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002504:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f203 6144 	addw	r1, r3, #1604	@ 0x644
 800250e:	f107 0318 	add.w	r3, r7, #24
 8002512:	2280      	movs	r2, #128	@ 0x80
 8002514:	4618      	mov	r0, r3
 8002516:	f021 f882 	bl	802361e <memcpy>
			sizeof(range_grid));

		for (j = 0; j < (int8_t)4; j++)
 800251a:	2300      	movs	r3, #0
 800251c:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
 8002520:	e0ac      	b.n	800267c <_vl53lmz_send_offset_data+0x246>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8002522:	2300      	movs	r3, #0
 8002524:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
 8002528:	e09c      	b.n	8002664 <_vl53lmz_send_offset_data+0x22e>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+ (int8_t)0]
 800252a:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 800252e:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	4413      	add	r3, r2
 8002536:	005a      	lsls	r2, r3, #1
 8002538:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800253c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002540:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+(int8_t)1]
 8002544:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8002548:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	440b      	add	r3, r1
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	1c59      	adds	r1, r3, #1
 8002554:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002558:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800255c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002560:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)8]
 8002562:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8002566:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	440b      	add	r3, r1
 800256e:	3304      	adds	r3, #4
 8002570:	0059      	lsls	r1, r3, #1
 8002572:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002576:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800257a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800257e:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)9])
 8002580:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8002584:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	440b      	add	r3, r1
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	f103 0109 	add.w	r1, r3, #9
 8002592:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002596:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800259a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800259e:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 80025a0:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 80025a4:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 80025a8:	0092      	lsls	r2, r2, #2
 80025aa:	440a      	add	r2, r1
								  /(uint32_t)4;
 80025ac:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 80025ae:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80025b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80025b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				range_grid[i+(4*j)] =
				(range_grid[(2*i)+(16*j)]
 80025ba:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 80025be:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	4413      	add	r3, r2
 80025c6:	005a      	lsls	r2, r3, #1
 80025c8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80025cc:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80025d0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80025d4:	4619      	mov	r1, r3
				+ range_grid[(2*i)+(16*j)+1]
 80025d6:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 80025da:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	4413      	add	r3, r2
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	1c5a      	adds	r2, r3, #1
 80025e6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80025ea:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80025ee:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80025f2:	440b      	add	r3, r1
				+ range_grid[(2*i)+(16*j)+8]
 80025f4:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 80025f8:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 80025fc:	00d2      	lsls	r2, r2, #3
 80025fe:	440a      	add	r2, r1
 8002600:	3204      	adds	r2, #4
 8002602:	0051      	lsls	r1, r2, #1
 8002604:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8002608:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 800260c:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8002610:	4413      	add	r3, r2
				+ range_grid[(2*i)+(16*j)+9])
 8002612:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8002616:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 800261a:	00d2      	lsls	r2, r2, #3
 800261c:	440a      	add	r2, r1
 800261e:	0052      	lsls	r2, r2, #1
 8002620:	f102 0109 	add.w	r1, r2, #9
 8002624:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8002628:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 800262c:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8002630:	4413      	add	r3, r2
								  /(int16_t)4;
 8002632:	2b00      	cmp	r3, #0
 8002634:	da00      	bge.n	8002638 <_vl53lmz_send_offset_data+0x202>
 8002636:	3303      	adds	r3, #3
 8002638:	109b      	asrs	r3, r3, #2
 800263a:	4619      	mov	r1, r3
				range_grid[i+(4*j)] =
 800263c:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8002640:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	441a      	add	r2, r3
 8002648:	b209      	sxth	r1, r1
 800264a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800264e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002652:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (i = 0; i < (int8_t)4 ; i++)
 8002656:	f997 319f 	ldrsb.w	r3, [r7, #415]	@ 0x19f
 800265a:	b2db      	uxtb	r3, r3
 800265c:	3301      	adds	r3, #1
 800265e:	b2db      	uxtb	r3, r3
 8002660:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
 8002664:	f997 319f 	ldrsb.w	r3, [r7, #415]	@ 0x19f
 8002668:	2b03      	cmp	r3, #3
 800266a:	f77f af5e 	ble.w	800252a <_vl53lmz_send_offset_data+0xf4>
		for (j = 0; j < (int8_t)4; j++)
 800266e:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8002672:	b2db      	uxtb	r3, r3
 8002674:	3301      	adds	r3, #1
 8002676:	b2db      	uxtb	r3, r3
 8002678:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
 800267c:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8002680:	2b03      	cmp	r3, #3
 8002682:	f77f af4e 	ble.w	8002522 <_vl53lmz_send_offset_data+0xec>
			}
		}
		(void)memset(&range_grid[0x10], 0, (uint16_t)96);
 8002686:	f107 0318 	add.w	r3, r7, #24
 800268a:	3320      	adds	r3, #32
 800268c:	2260      	movs	r2, #96	@ 0x60
 800268e:	2100      	movs	r1, #0
 8002690:	4618      	mov	r0, r3
 8002692:	f020 ff23 	bl	80234dc <memset>
		(void)memset(&signal_grid[0x10], 0, (uint16_t)192);
 8002696:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800269a:	3340      	adds	r3, #64	@ 0x40
 800269c:	22c0      	movs	r2, #192	@ 0xc0
 800269e:	2100      	movs	r1, #0
 80026a0:	4618      	mov	r0, r3
 80026a2:	f020 ff1b 	bl	80234dc <memset>
		(void)memcpy(&(p_dev->temp_buffer[0x3C]),
 80026a6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80026aa:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f503 63a8 	add.w	r3, r3, #1344	@ 0x540
 80026b4:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 80026b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026bc:	4618      	mov	r0, r3
 80026be:	f020 ffae 	bl	802361e <memcpy>
					signal_grid, sizeof(signal_grid));
		(void)memcpy(&(p_dev->temp_buffer[0x140]),
 80026c2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80026c6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f203 6344 	addw	r3, r3, #1604	@ 0x644
 80026d0:	f107 0118 	add.w	r1, r7, #24
 80026d4:	2280      	movs	r2, #128	@ 0x80
 80026d6:	4618      	mov	r0, r3
 80026d8:	f020 ffa1 	bl	802361e <memcpy>
					range_grid, sizeof(range_grid));
		SwapBuffer(p_dev->temp_buffer, VL53LMZ_OFFSET_BUFFER_SIZE);
 80026dc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80026e0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f203 5304 	addw	r3, r3, #1284	@ 0x504
 80026ea:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 80026ee:	4618      	mov	r0, r3
 80026f0:	f003 f827 	bl	8005742 <SwapBuffer>
	}

	for(k = 0; k < (VL53LMZ_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 80026f4:	2300      	movs	r3, #0
 80026f6:	f8a7 319c 	strh.w	r3, [r7, #412]	@ 0x19c
 80026fa:	e01b      	b.n	8002734 <_vl53lmz_send_offset_data+0x2fe>
	{
		p_dev->temp_buffer[k] = p_dev->temp_buffer[k + (uint16_t)8];
 80026fc:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 8002700:	f103 0208 	add.w	r2, r3, #8
 8002704:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 8002708:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
 800270c:	f5a1 71ce 	sub.w	r1, r1, #412	@ 0x19c
 8002710:	6809      	ldr	r1, [r1, #0]
 8002712:	440a      	add	r2, r1
 8002714:	f892 1504 	ldrb.w	r1, [r2, #1284]	@ 0x504
 8002718:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800271c:	f5a2 72ce 	sub.w	r2, r2, #412	@ 0x19c
 8002720:	6812      	ldr	r2, [r2, #0]
 8002722:	4413      	add	r3, r2
 8002724:	460a      	mov	r2, r1
 8002726:	f883 2504 	strb.w	r2, [r3, #1284]	@ 0x504
	for(k = 0; k < (VL53LMZ_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 800272a:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 800272e:	3301      	adds	r3, #1
 8002730:	f8a7 319c 	strh.w	r3, [r7, #412]	@ 0x19c
 8002734:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 8002738:	f5b3 7ff2 	cmp.w	r3, #484	@ 0x1e4
 800273c:	d3de      	bcc.n	80026fc <_vl53lmz_send_offset_data+0x2c6>
	}

	(void)memcpy(&(p_dev->temp_buffer[0x1E0]), footer, 8);
 800273e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002742:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f203 62e4 	addw	r2, r3, #1764	@ 0x6e4
 800274c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002750:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002754:	cb03      	ldmia	r3!, {r0, r1}
 8002756:	6010      	str	r0, [r2, #0]
 8002758:	6051      	str	r1, [r2, #4]
	status |= WrMulti(&(p_dev->platform), 0x2e18, p_dev->temp_buffer,
 800275a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800275e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002762:	6818      	ldr	r0, [r3, #0]
 8002764:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002768:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f203 5204 	addw	r2, r3, #1284	@ 0x504
 8002772:	f44f 73f4 	mov.w	r3, #488	@ 0x1e8
 8002776:	f642 6118 	movw	r1, #11800	@ 0x2e18
 800277a:	f002 ff7b 	bl	8005674 <WrMulti>
 800277e:	4603      	mov	r3, r0
 8002780:	461a      	mov	r2, r3
 8002782:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 8002786:	4313      	orrs	r3, r2
 8002788:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
		VL53LMZ_OFFSET_BUFFER_SIZE);
	status |=_vl53lmz_poll_for_answer(p_dev, 4, 1,
 800278c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002790:	f5a3 70ce 	sub.w	r0, r3, #412	@ 0x19c
 8002794:	2303      	movs	r3, #3
 8002796:	9301      	str	r3, [sp, #4]
 8002798:	23ff      	movs	r3, #255	@ 0xff
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 80027a0:	2201      	movs	r2, #1
 80027a2:	2104      	movs	r1, #4
 80027a4:	6800      	ldr	r0, [r0, #0]
 80027a6:	f7ff fdb3 	bl	8002310 <_vl53lmz_poll_for_answer>
 80027aa:	4603      	mov	r3, r0
 80027ac:	461a      	mov	r2, r3
 80027ae:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 80027b2:	4313      	orrs	r3, r2
 80027b4:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
		VL53LMZ_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 80027b8:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
}
 80027bc:	4618      	mov	r0, r3
 80027be:	f507 77d0 	add.w	r7, r7, #416	@ 0x1a0
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	0803f374 	.word	0x0803f374
 80027cc:	0803f37c 	.word	0x0803f37c

080027d0 <_vl53lmz_send_xtalk_data>:
 */

static uint8_t _vl53lmz_send_xtalk_data(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				resolution)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b0ca      	sub	sp, #296	@ 0x128
 80027d4:	af02      	add	r7, sp, #8
 80027d6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80027da:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80027de:	6018      	str	r0, [r3, #0]
 80027e0:	460a      	mov	r2, r1
 80027e2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80027e6:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 80027ea:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 80027ec:	2300      	movs	r3, #0
 80027ee:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
	uint8_t res4x4[] = {0x0F, 0x04, 0x04, 0x17, 0x08, 0x10, 0x10, 0x07};
 80027f2:	4a9a      	ldr	r2, [pc, #616]	@ (8002a5c <_vl53lmz_send_xtalk_data+0x28c>)
 80027f4:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80027f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027fc:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t dss_4x4[] = {0x00, 0x78, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08};
 8002800:	4a97      	ldr	r2, [pc, #604]	@ (8002a60 <_vl53lmz_send_xtalk_data+0x290>)
 8002802:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002806:	e892 0003 	ldmia.w	r2, {r0, r1}
 800280a:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t profile_4x4[] = {0xA0, 0xFC, 0x01, 0x00};
 800280e:	4b95      	ldr	r3, [pc, #596]	@ (8002a64 <_vl53lmz_send_xtalk_data+0x294>)
 8002810:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	uint32_t signal_grid[64];
	int8_t i, j;

	(void)memcpy(p_dev->temp_buffer, &(p_dev->xtalk_data[0]),
 8002814:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002818:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f203 5004 	addw	r0, r3, #1284	@ 0x504
 8002822:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002826:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8002830:	f44f 7242 	mov.w	r2, #776	@ 0x308
 8002834:	4619      	mov	r1, r3
 8002836:	f020 fef2 	bl	802361e <memcpy>
		VL53LMZ_XTALK_BUFFER_SIZE);

	/* Data extrapolation is required for 4X4 Xtalk */
	if(resolution == (uint8_t)VL53LMZ_RESOLUTION_4X4)
 800283a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800283e:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	2b10      	cmp	r3, #16
 8002846:	f040 80d2 	bne.w	80029ee <_vl53lmz_send_xtalk_data+0x21e>
	{
		(void)memcpy(&(p_dev->temp_buffer[0x8]),
 800284a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800284e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f203 530c 	addw	r3, r3, #1292	@ 0x50c
 8002858:	461a      	mov	r2, r3
 800285a:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800285e:	cb03      	ldmia	r3!, {r0, r1}
 8002860:	6010      	str	r0, [r2, #0]
 8002862:	6051      	str	r1, [r2, #4]
			res4x4, sizeof(res4x4));
		(void)memcpy(&(p_dev->temp_buffer[0x020]),
 8002864:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002868:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f203 5324 	addw	r3, r3, #1316	@ 0x524
 8002872:	461a      	mov	r2, r3
 8002874:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002878:	cb03      	ldmia	r3!, {r0, r1}
 800287a:	6010      	str	r0, [r2, #0]
 800287c:	6051      	str	r1, [r2, #4]
			dss_4x4, sizeof(dss_4x4));

		SwapBuffer(p_dev->temp_buffer, VL53LMZ_XTALK_BUFFER_SIZE);
 800287e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002882:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f203 5304 	addw	r3, r3, #1284	@ 0x504
 800288c:	f44f 7142 	mov.w	r1, #776	@ 0x308
 8002890:	4618      	mov	r0, r3
 8002892:	f002 ff56 	bl	8005742 <SwapBuffer>
		(void)memcpy(signal_grid, &(p_dev->temp_buffer[0x34]),
 8002896:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800289a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f503 61a7 	add.w	r1, r3, #1336	@ 0x538
 80028a4:	f107 0308 	add.w	r3, r7, #8
 80028a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028ac:	4618      	mov	r0, r3
 80028ae:	f020 feb6 	bl	802361e <memcpy>
			sizeof(signal_grid));

		for (j = 0; j < (int8_t)4; j++)
 80028b2:	2300      	movs	r3, #0
 80028b4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80028b8:	e05d      	b.n	8002976 <_vl53lmz_send_xtalk_data+0x1a6>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 80028ba:	2300      	movs	r3, #0
 80028bc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 80028c0:	e04e      	b.n	8002960 <_vl53lmz_send_xtalk_data+0x190>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+0]
 80028c2:	f997 211f 	ldrsb.w	r2, [r7, #287]	@ 0x11f
 80028c6:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	4413      	add	r3, r2
 80028ce:	005a      	lsls	r2, r3, #1
 80028d0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80028d4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80028d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+1]
 80028dc:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 80028e0:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	440b      	add	r3, r1
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	1c59      	adds	r1, r3, #1
 80028ec:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80028f0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80028f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80028f8:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+8]
 80028fa:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 80028fe:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	440b      	add	r3, r1
 8002906:	3304      	adds	r3, #4
 8002908:	0059      	lsls	r1, r3, #1
 800290a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800290e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002912:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002916:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8002918:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 800291c:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	440b      	add	r3, r1
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	f103 0109 	add.w	r1, r3, #9
 800292a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800292e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002932:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002936:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 8002938:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 800293c:	f997 211e 	ldrsb.w	r2, [r7, #286]	@ 0x11e
 8002940:	0092      	lsls	r2, r2, #2
 8002942:	440a      	add	r2, r1
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8002944:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 8002946:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800294a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800294e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0; i < (int8_t)4 ; i++)
 8002952:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8002956:	b2db      	uxtb	r3, r3
 8002958:	3301      	adds	r3, #1
 800295a:	b2db      	uxtb	r3, r3
 800295c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8002960:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8002964:	2b03      	cmp	r3, #3
 8002966:	ddac      	ble.n	80028c2 <_vl53lmz_send_xtalk_data+0xf2>
		for (j = 0; j < (int8_t)4; j++)
 8002968:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 800296c:	b2db      	uxtb	r3, r3
 800296e:	3301      	adds	r3, #1
 8002970:	b2db      	uxtb	r3, r3
 8002972:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8002976:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 800297a:	2b03      	cmp	r3, #3
 800297c:	dd9d      	ble.n	80028ba <_vl53lmz_send_xtalk_data+0xea>
			}
		}
		(void)memset(&signal_grid[0x10], 0, (uint32_t)192);
 800297e:	f107 0308 	add.w	r3, r7, #8
 8002982:	3340      	adds	r3, #64	@ 0x40
 8002984:	22c0      	movs	r2, #192	@ 0xc0
 8002986:	2100      	movs	r1, #0
 8002988:	4618      	mov	r0, r3
 800298a:	f020 fda7 	bl	80234dc <memset>
		(void)memcpy(&(p_dev->temp_buffer[0x34]),
 800298e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002992:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f503 63a7 	add.w	r3, r3, #1336	@ 0x538
 800299c:	f107 0108 	add.w	r1, r7, #8
 80029a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029a4:	4618      	mov	r0, r3
 80029a6:	f020 fe3a 	bl	802361e <memcpy>
				  signal_grid, sizeof(signal_grid));
		SwapBuffer(p_dev->temp_buffer, VL53LMZ_XTALK_BUFFER_SIZE);
 80029aa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80029ae:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f203 5304 	addw	r3, r3, #1284	@ 0x504
 80029b8:	f44f 7142 	mov.w	r1, #776	@ 0x308
 80029bc:	4618      	mov	r0, r3
 80029be:	f002 fec0 	bl	8005742 <SwapBuffer>
		(void)memcpy(&(p_dev->temp_buffer[0x134]),
 80029c2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80029c6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 80029d0:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 80029d4:	601a      	str	r2, [r3, #0]
		profile_4x4, sizeof(profile_4x4));
		(void)memset(&(p_dev->temp_buffer[0x078]),0 ,
 80029d6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80029da:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f203 537c 	addw	r3, r3, #1404	@ 0x57c
 80029e4:	2204      	movs	r2, #4
 80029e6:	2100      	movs	r1, #0
 80029e8:	4618      	mov	r0, r3
 80029ea:	f020 fd77 	bl	80234dc <memset>
						 (uint32_t)4*sizeof(uint8_t));
	}

	status |= WrMulti(&(p_dev->platform), 0x2cf8,
 80029ee:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80029f2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80029f6:	6818      	ldr	r0, [r3, #0]
			p_dev->temp_buffer, VL53LMZ_XTALK_BUFFER_SIZE);
 80029f8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80029fc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f203 5204 	addw	r2, r3, #1284	@ 0x504
	status |= WrMulti(&(p_dev->platform), 0x2cf8,
 8002a06:	f44f 7342 	mov.w	r3, #776	@ 0x308
 8002a0a:	f642 41f8 	movw	r1, #11512	@ 0x2cf8
 8002a0e:	f002 fe31 	bl	8005674 <WrMulti>
 8002a12:	4603      	mov	r3, r0
 8002a14:	461a      	mov	r2, r3
 8002a16:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
	status |=_vl53lmz_poll_for_answer(p_dev, 4, 1,
 8002a20:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002a24:	f5a3 708e 	sub.w	r0, r3, #284	@ 0x11c
 8002a28:	2303      	movs	r3, #3
 8002a2a:	9301      	str	r3, [sp, #4]
 8002a2c:	23ff      	movs	r3, #255	@ 0xff
 8002a2e:	9300      	str	r3, [sp, #0]
 8002a30:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8002a34:	2201      	movs	r2, #1
 8002a36:	2104      	movs	r1, #4
 8002a38:	6800      	ldr	r0, [r0, #0]
 8002a3a:	f7ff fc69 	bl	8002310 <_vl53lmz_poll_for_answer>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	461a      	mov	r2, r3
 8002a42:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8002a46:	4313      	orrs	r3, r2
 8002a48:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
			VL53LMZ_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8002a4c:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	0803f384 	.word	0x0803f384
 8002a60:	0803f38c 	.word	0x0803f38c
 8002a64:	0001fca0 	.word	0x0001fca0

08002a68 <vl53lmz_is_alive>:
#define REVISION_L8		0x0C

uint8_t vl53lmz_is_alive(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				*p_is_alive)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 8002a72:	2300      	movs	r3, #0
 8002a74:	73fb      	strb	r3, [r7, #15]
	uint8_t device_id, revision_id;

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f002 fdd0 	bl	8005624 <WrByte>
 8002a84:	4603      	mov	r3, r0
 8002a86:	461a      	mov	r2, r3
 8002a88:	7bfb      	ldrb	r3, [r7, #15]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	73fb      	strb	r3, [r7, #15]
	status |= RdByte(&(p_dev->platform), 0, &device_id);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f107 020e 	add.w	r2, r7, #14
 8002a94:	2100      	movs	r1, #0
 8002a96:	4618      	mov	r0, r3
 8002a98:	f002 fd90 	bl	80055bc <RdByte>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	7bfb      	ldrb	r3, [r7, #15]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	73fb      	strb	r3, [r7, #15]
	status |= RdByte(&(p_dev->platform), 1, &revision_id);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f107 020d 	add.w	r2, r7, #13
 8002aac:	2101      	movs	r1, #1
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f002 fd84 	bl	80055bc <RdByte>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	7bfb      	ldrb	r3, [r7, #15]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	73fb      	strb	r3, [r7, #15]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f002 fdac 	bl	8005624 <WrByte>
 8002acc:	4603      	mov	r3, r0
 8002ace:	461a      	mov	r2, r3
 8002ad0:	7bfb      	ldrb	r3, [r7, #15]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	73fb      	strb	r3, [r7, #15]

if((device_id==(uint8_t)0xF0) && ((revision_id==(uint8_t)REVISION_CUT11) || (revision_id==(uint8_t)REVISION_CUT12) || (revision_id==(uint8_t)REVISION_L8)))
 8002ad6:	7bbb      	ldrb	r3, [r7, #14]
 8002ad8:	2bf0      	cmp	r3, #240	@ 0xf0
 8002ada:	d10c      	bne.n	8002af6 <vl53lmz_is_alive+0x8e>
 8002adc:	7b7b      	ldrb	r3, [r7, #13]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d005      	beq.n	8002aee <vl53lmz_is_alive+0x86>
 8002ae2:	7b7b      	ldrb	r3, [r7, #13]
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d002      	beq.n	8002aee <vl53lmz_is_alive+0x86>
 8002ae8:	7b7b      	ldrb	r3, [r7, #13]
 8002aea:	2b0c      	cmp	r3, #12
 8002aec:	d103      	bne.n	8002af6 <vl53lmz_is_alive+0x8e>
	{
		*p_is_alive = 1;
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	2201      	movs	r2, #1
 8002af2:	701a      	strb	r2, [r3, #0]
 8002af4:	e002      	b.n	8002afc <vl53lmz_is_alive+0x94>
	}
	else
	{
		*p_is_alive = 0;
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	2200      	movs	r2, #0
 8002afa:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8002afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <vl53lmz_init>:

uint8_t vl53lmz_init(
		VL53LMZ_Configuration		*p_dev)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b088      	sub	sp, #32
 8002b0a:	af02      	add	r7, sp, #8
 8002b0c:	6078      	str	r0, [r7, #4]
	uint8_t tmp, status = VL53LMZ_STATUS_OK;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	75fb      	strb	r3, [r7, #23]
	uint8_t pipe_ctrl[] = {VL53LMZ_NB_TARGET_PER_ZONE, 0x00, 0x01, 0x00};
 8002b12:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8002b16:	613b      	str	r3, [r7, #16]
	uint32_t single_range = 0x01;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	60fb      	str	r3, [r7, #12]

	p_dev->is_auto_stop_enabled = (uint8_t)0x0;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

	/* method below copied from vl52l5cx_is_alive() */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002b30:	4618      	mov	r0, r3
 8002b32:	f002 fd77 	bl	8005624 <WrByte>
 8002b36:	4603      	mov	r3, r0
 8002b38:	461a      	mov	r2, r3
 8002b3a:	7dfb      	ldrb	r3, [r7, #23]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0, &(p_dev->device_id));
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f503 530f 	add.w	r3, r3, #9152	@ 0x23c0
 8002b48:	330d      	adds	r3, #13
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	f002 fd35 	bl	80055bc <RdByte>
 8002b52:	4603      	mov	r3, r0
 8002b54:	461a      	mov	r2, r3
 8002b56:	7dfb      	ldrb	r3, [r7, #23]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 1, &(p_dev->revision_id));
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f503 530f 	add.w	r3, r3, #9152	@ 0x23c0
 8002b64:	330e      	adds	r3, #14
 8002b66:	461a      	mov	r2, r3
 8002b68:	2101      	movs	r1, #1
 8002b6a:	f002 fd27 	bl	80055bc <RdByte>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	461a      	mov	r2, r3
 8002b72:	7dfb      	ldrb	r3, [r7, #23]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002b80:	4618      	mov	r0, r3
 8002b82:	f002 fd4f 	bl	8005624 <WrByte>
 8002b86:	4603      	mov	r3, r0
 8002b88:	461a      	mov	r2, r3
 8002b8a:	7dfb      	ldrb	r3, [r7, #23]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	75fb      	strb	r3, [r7, #23]
	if((p_dev->device_id!=(uint8_t)0xF0)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002b96:	f893 33cd 	ldrb.w	r3, [r3, #973]	@ 0x3cd
 8002b9a:	2bf0      	cmp	r3, #240	@ 0xf0
 8002b9c:	d114      	bne.n	8002bc8 <vl53lmz_init+0xc2>
		|| ((p_dev->revision_id!=(uint8_t)REVISION_CUT11) && (p_dev->revision_id!=(uint8_t)REVISION_CUT12) && (p_dev->revision_id!=(uint8_t)REVISION_L8))) {
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002ba4:	f893 33ce 	ldrb.w	r3, [r3, #974]	@ 0x3ce
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d011      	beq.n	8002bd0 <vl53lmz_init+0xca>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002bb2:	f893 33ce 	ldrb.w	r3, [r3, #974]	@ 0x3ce
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d00a      	beq.n	8002bd0 <vl53lmz_init+0xca>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002bc0:	f893 33ce 	ldrb.w	r3, [r3, #974]	@ 0x3ce
 8002bc4:	2b0c      	cmp	r3, #12
 8002bc6:	d003      	beq.n	8002bd0 <vl53lmz_init+0xca>
		/* unexpected combination of device and revision IDs */
		status = VL53LMZ_STATUS_UNKNOWN_DEVICE;
 8002bc8:	2304      	movs	r3, #4
 8002bca:	75fb      	strb	r3, [r7, #23]
		goto exit;
 8002bcc:	f000 bc8b 	b.w	80034e6 <vl53lmz_init+0x9e0>
	}

	/* SW reboot sequence */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f002 fd23 	bl	8005624 <WrByte>
 8002bde:	4603      	mov	r3, r0
 8002be0:	461a      	mov	r2, r3
 8002be2:	7dfb      	ldrb	r3, [r7, #23]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x0009, 0x04);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2204      	movs	r2, #4
 8002bec:	2109      	movs	r1, #9
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f002 fd18 	bl	8005624 <WrByte>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	7dfb      	ldrb	r3, [r7, #23]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2240      	movs	r2, #64	@ 0x40
 8002c02:	210f      	movs	r1, #15
 8002c04:	4618      	mov	r0, r3
 8002c06:	f002 fd0d 	bl	8005624 <WrByte>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	7dfb      	ldrb	r3, [r7, #23]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x03);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2203      	movs	r2, #3
 8002c18:	210a      	movs	r1, #10
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f002 fd02 	bl	8005624 <WrByte>
 8002c20:	4603      	mov	r3, r0
 8002c22:	461a      	mov	r2, r3
 8002c24:	7dfb      	ldrb	r3, [r7, #23]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7FFF, &tmp);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f107 0216 	add.w	r2, r7, #22
 8002c30:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002c34:	4618      	mov	r0, r3
 8002c36:	f002 fcc1 	bl	80055bc <RdByte>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	7dfb      	ldrb	r3, [r7, #23]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x01);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	210c      	movs	r1, #12
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f002 fcea 	bl	8005624 <WrByte>
 8002c50:	4603      	mov	r3, r0
 8002c52:	461a      	mov	r2, r3
 8002c54:	7dfb      	ldrb	r3, [r7, #23]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x0101, 0x00);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f240 1101 	movw	r1, #257	@ 0x101
 8002c62:	4618      	mov	r0, r3
 8002c64:	f002 fcde 	bl	8005624 <WrByte>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	7dfb      	ldrb	r3, [r7, #23]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0102, 0x00);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f002 fcd2 	bl	8005624 <WrByte>
 8002c80:	4603      	mov	r3, r0
 8002c82:	461a      	mov	r2, r3
 8002c84:	7dfb      	ldrb	r3, [r7, #23]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8002c92:	4618      	mov	r0, r3
 8002c94:	f002 fcc6 	bl	8005624 <WrByte>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	7dfb      	ldrb	r3, [r7, #23]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f244 0102 	movw	r1, #16386	@ 0x4002
 8002caa:	4618      	mov	r0, r3
 8002cac:	f002 fcba 	bl	8005624 <WrByte>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	7dfb      	ldrb	r3, [r7, #23]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f244 0102 	movw	r1, #16386	@ 0x4002
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f002 fcae 	bl	8005624 <WrByte>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	461a      	mov	r2, r3
 8002ccc:	7dfb      	ldrb	r3, [r7, #23]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2203      	movs	r2, #3
 8002cd6:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f002 fca2 	bl	8005624 <WrByte>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	7dfb      	ldrb	r3, [r7, #23]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0103, 0x01);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f240 1103 	movw	r1, #259	@ 0x103
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f002 fc96 	bl	8005624 <WrByte>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	7dfb      	ldrb	r3, [r7, #23]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x00);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	210c      	movs	r1, #12
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f002 fc8b 	bl	8005624 <WrByte>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	461a      	mov	r2, r3
 8002d12:	7dfb      	ldrb	r3, [r7, #23]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x43);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2243      	movs	r2, #67	@ 0x43
 8002d1c:	210f      	movs	r1, #15
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f002 fc80 	bl	8005624 <WrByte>
 8002d24:	4603      	mov	r3, r0
 8002d26:	461a      	mov	r2, r3
 8002d28:	7dfb      	ldrb	r3, [r7, #23]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	75fb      	strb	r3, [r7, #23]
	status |= WaitMs(&(p_dev->platform), 1);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2101      	movs	r1, #1
 8002d32:	4618      	mov	r0, r3
 8002d34:	f002 fd3b 	bl	80057ae <WaitMs>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	7dfb      	ldrb	r3, [r7, #23]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2240      	movs	r2, #64	@ 0x40
 8002d46:	210f      	movs	r1, #15
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f002 fc6b 	bl	8005624 <WrByte>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	461a      	mov	r2, r3
 8002d52:	7dfb      	ldrb	r3, [r7, #23]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x01);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	210a      	movs	r1, #10
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f002 fc60 	bl	8005624 <WrByte>
 8002d64:	4603      	mov	r3, r0
 8002d66:	461a      	mov	r2, r3
 8002d68:	7dfb      	ldrb	r3, [r7, #23]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	75fb      	strb	r3, [r7, #23]
	status |= WaitMs(&(p_dev->platform), 100);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2164      	movs	r1, #100	@ 0x64
 8002d72:	4618      	mov	r0, r3
 8002d74:	f002 fd1b 	bl	80057ae <WaitMs>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	7dfb      	ldrb	r3, [r7, #23]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	75fb      	strb	r3, [r7, #23]

	/* Wait for sensor booted (several ms required to get sensor ready ) */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f002 fc4a 	bl	8005624 <WrByte>
 8002d90:	4603      	mov	r3, r0
 8002d92:	461a      	mov	r2, r3
 8002d94:	7dfb      	ldrb	r3, [r7, #23]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	75fb      	strb	r3, [r7, #23]
	status |= _vl53lmz_poll_for_answer(p_dev, 1, 0, 0x06, 0xff, 1);
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	9301      	str	r3, [sp, #4]
 8002d9e:	23ff      	movs	r3, #255	@ 0xff
 8002da0:	9300      	str	r3, [sp, #0]
 8002da2:	2306      	movs	r3, #6
 8002da4:	2200      	movs	r2, #0
 8002da6:	2101      	movs	r1, #1
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7ff fab1 	bl	8002310 <_vl53lmz_poll_for_answer>
 8002dae:	4603      	mov	r3, r0
 8002db0:	461a      	mov	r2, r3
 8002db2:	7dfb      	ldrb	r3, [r7, #23]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8002db8:	7dfb      	ldrb	r3, [r7, #23]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f040 838e 	bne.w	80034dc <vl53lmz_init+0x9d6>
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x000E, 0x01);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	210e      	movs	r1, #14
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f002 fc2c 	bl	8005624 <WrByte>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	461a      	mov	r2, r3
 8002dd0:	7dfb      	ldrb	r3, [r7, #23]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	75fb      	strb	r3, [r7, #23]

	/* Enable FW access */
	if ( p_dev->revision_id == (uint8_t)REVISION_L8 ) {
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002ddc:	f893 33ce 	ldrb.w	r3, [r3, #974]	@ 0x3ce
 8002de0:	2b0c      	cmp	r3, #12
 8002de2:	d126      	bne.n	8002e32 <vl53lmz_init+0x32c>
		status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002dec:	4618      	mov	r0, r3
 8002dee:	f002 fc19 	bl	8005624 <WrByte>
 8002df2:	4603      	mov	r3, r0
 8002df4:	461a      	mov	r2, r3
 8002df6:	7dfb      	ldrb	r3, [r7, #23]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	75fb      	strb	r3, [r7, #23]
		status |= WrByte(&(p_dev->platform), 0x06, 0x01);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	2106      	movs	r1, #6
 8002e02:	4618      	mov	r0, r3
 8002e04:	f002 fc0e 	bl	8005624 <WrByte>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	7dfb      	ldrb	r3, [r7, #23]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	75fb      	strb	r3, [r7, #23]
		status |= _vl53lmz_poll_for_answer(p_dev, 1, 0, 0x21, 0xFF, 0x4);
 8002e12:	2304      	movs	r3, #4
 8002e14:	9301      	str	r3, [sp, #4]
 8002e16:	23ff      	movs	r3, #255	@ 0xff
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	2321      	movs	r3, #33	@ 0x21
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	2101      	movs	r1, #1
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f7ff fa75 	bl	8002310 <_vl53lmz_poll_for_answer>
 8002e26:	4603      	mov	r3, r0
 8002e28:	461a      	mov	r2, r3
 8002e2a:	7dfb      	ldrb	r3, [r7, #23]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	75fb      	strb	r3, [r7, #23]
 8002e30:	e031      	b.n	8002e96 <vl53lmz_init+0x390>
	}
	else {
		status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2202      	movs	r2, #2
 8002e36:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f002 fbf2 	bl	8005624 <WrByte>
 8002e40:	4603      	mov	r3, r0
 8002e42:	461a      	mov	r2, r3
 8002e44:	7dfb      	ldrb	r3, [r7, #23]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	75fb      	strb	r3, [r7, #23]
		status |= WrByte(&(p_dev->platform), 0x03, 0x0D);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	220d      	movs	r2, #13
 8002e4e:	2103      	movs	r1, #3
 8002e50:	4618      	mov	r0, r3
 8002e52:	f002 fbe7 	bl	8005624 <WrByte>
 8002e56:	4603      	mov	r3, r0
 8002e58:	461a      	mov	r2, r3
 8002e5a:	7dfb      	ldrb	r3, [r7, #23]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	75fb      	strb	r3, [r7, #23]
		status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f002 fbdb 	bl	8005624 <WrByte>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	461a      	mov	r2, r3
 8002e72:	7dfb      	ldrb	r3, [r7, #23]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	75fb      	strb	r3, [r7, #23]
		status |= _vl53lmz_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 8002e78:	2310      	movs	r3, #16
 8002e7a:	9301      	str	r3, [sp, #4]
 8002e7c:	2310      	movs	r3, #16
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	2321      	movs	r3, #33	@ 0x21
 8002e82:	2200      	movs	r2, #0
 8002e84:	2101      	movs	r1, #1
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7ff fa42 	bl	8002310 <_vl53lmz_poll_for_answer>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	461a      	mov	r2, r3
 8002e90:	7dfb      	ldrb	r3, [r7, #23]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	75fb      	strb	r3, [r7, #23]
	}
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f002 fbc0 	bl	8005624 <WrByte>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	7dfb      	ldrb	r3, [r7, #23]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	75fb      	strb	r3, [r7, #23]

	/* Enable host access to GO1 */
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f107 0216 	add.w	r2, r7, #22
 8002eb4:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f002 fb7f 	bl	80055bc <RdByte>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	7dfb      	ldrb	r3, [r7, #23]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	210c      	movs	r1, #12
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f002 fba8 	bl	8005624 <WrByte>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	7dfb      	ldrb	r3, [r7, #23]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	75fb      	strb	r3, [r7, #23]

	/* Power ON status */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f002 fb9c 	bl	8005624 <WrByte>
 8002eec:	4603      	mov	r3, r0
 8002eee:	461a      	mov	r2, r3
 8002ef0:	7dfb      	ldrb	r3, [r7, #23]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x101, 0x00);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f240 1101 	movw	r1, #257	@ 0x101
 8002efe:	4618      	mov	r0, r3
 8002f00:	f002 fb90 	bl	8005624 <WrByte>
 8002f04:	4603      	mov	r3, r0
 8002f06:	461a      	mov	r2, r3
 8002f08:	7dfb      	ldrb	r3, [r7, #23]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x102, 0x00);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8002f16:	4618      	mov	r0, r3
 8002f18:	f002 fb84 	bl	8005624 <WrByte>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	461a      	mov	r2, r3
 8002f20:	7dfb      	ldrb	r3, [r7, #23]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f002 fb78 	bl	8005624 <WrByte>
 8002f34:	4603      	mov	r3, r0
 8002f36:	461a      	mov	r2, r3
 8002f38:	7dfb      	ldrb	r3, [r7, #23]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f244 0102 	movw	r1, #16386	@ 0x4002
 8002f46:	4618      	mov	r0, r3
 8002f48:	f002 fb6c 	bl	8005624 <WrByte>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	461a      	mov	r2, r3
 8002f50:	7dfb      	ldrb	r3, [r7, #23]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f244 0102 	movw	r1, #16386	@ 0x4002
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f002 fb60 	bl	8005624 <WrByte>
 8002f64:	4603      	mov	r3, r0
 8002f66:	461a      	mov	r2, r3
 8002f68:	7dfb      	ldrb	r3, [r7, #23]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2203      	movs	r2, #3
 8002f72:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8002f76:	4618      	mov	r0, r3
 8002f78:	f002 fb54 	bl	8005624 <WrByte>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	461a      	mov	r2, r3
 8002f80:	7dfb      	ldrb	r3, [r7, #23]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x103, 0x01);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f240 1103 	movw	r1, #259	@ 0x103
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f002 fb48 	bl	8005624 <WrByte>
 8002f94:	4603      	mov	r3, r0
 8002f96:	461a      	mov	r2, r3
 8002f98:	7dfb      	ldrb	r3, [r7, #23]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x400F, 0x00);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f244 010f 	movw	r1, #16399	@ 0x400f
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f002 fb3c 	bl	8005624 <WrByte>
 8002fac:	4603      	mov	r3, r0
 8002fae:	461a      	mov	r2, r3
 8002fb0:	7dfb      	ldrb	r3, [r7, #23]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x43);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2243      	movs	r2, #67	@ 0x43
 8002fba:	f240 211a 	movw	r1, #538	@ 0x21a
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f002 fb30 	bl	8005624 <WrByte>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	7dfb      	ldrb	r3, [r7, #23]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x03);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2203      	movs	r2, #3
 8002fd2:	f240 211a 	movw	r1, #538	@ 0x21a
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f002 fb24 	bl	8005624 <WrByte>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	461a      	mov	r2, r3
 8002fe0:	7dfb      	ldrb	r3, [r7, #23]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x01);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f240 211a 	movw	r1, #538	@ 0x21a
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f002 fb18 	bl	8005624 <WrByte>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	7dfb      	ldrb	r3, [r7, #23]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x00);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	f240 211a 	movw	r1, #538	@ 0x21a
 8003006:	4618      	mov	r0, r3
 8003008:	f002 fb0c 	bl	8005624 <WrByte>
 800300c:	4603      	mov	r3, r0
 800300e:	461a      	mov	r2, r3
 8003010:	7dfb      	ldrb	r3, [r7, #23]
 8003012:	4313      	orrs	r3, r2
 8003014:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x219, 0x00);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f240 2119 	movw	r1, #537	@ 0x219
 800301e:	4618      	mov	r0, r3
 8003020:	f002 fb00 	bl	8005624 <WrByte>
 8003024:	4603      	mov	r3, r0
 8003026:	461a      	mov	r2, r3
 8003028:	7dfb      	ldrb	r3, [r7, #23]
 800302a:	4313      	orrs	r3, r2
 800302c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21B, 0x00);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f240 211b 	movw	r1, #539	@ 0x21b
 8003036:	4618      	mov	r0, r3
 8003038:	f002 faf4 	bl	8005624 <WrByte>
 800303c:	4603      	mov	r3, r0
 800303e:	461a      	mov	r2, r3
 8003040:	7dfb      	ldrb	r3, [r7, #23]
 8003042:	4313      	orrs	r3, r2
 8003044:	75fb      	strb	r3, [r7, #23]

	/* Wake up MCU */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800304e:	4618      	mov	r0, r3
 8003050:	f002 fae8 	bl	8005624 <WrByte>
 8003054:	4603      	mov	r3, r0
 8003056:	461a      	mov	r2, r3
 8003058:	7dfb      	ldrb	r3, [r7, #23]
 800305a:	4313      	orrs	r3, r2
 800305c:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f107 0216 	add.w	r2, r7, #22
 8003064:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003068:	4618      	mov	r0, r3
 800306a:	f002 faa7 	bl	80055bc <RdByte>
 800306e:	4603      	mov	r3, r0
 8003070:	461a      	mov	r2, r3
 8003072:	7dfb      	ldrb	r3, [r7, #23]
 8003074:	4313      	orrs	r3, r2
 8003076:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003080:	4618      	mov	r0, r3
 8003082:	f002 facf 	bl	8005624 <WrByte>
 8003086:	4603      	mov	r3, r0
 8003088:	461a      	mov	r2, r3
 800308a:	7dfb      	ldrb	r3, [r7, #23]
 800308c:	4313      	orrs	r3, r2
 800308e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x20, 0x07);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2207      	movs	r2, #7
 8003094:	2120      	movs	r1, #32
 8003096:	4618      	mov	r0, r3
 8003098:	f002 fac4 	bl	8005624 <WrByte>
 800309c:	4603      	mov	r3, r0
 800309e:	461a      	mov	r2, r3
 80030a0:	7dfb      	ldrb	r3, [r7, #23]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x20, 0x06);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2206      	movs	r2, #6
 80030aa:	2120      	movs	r1, #32
 80030ac:	4618      	mov	r0, r3
 80030ae:	f002 fab9 	bl	8005624 <WrByte>
 80030b2:	4603      	mov	r3, r0
 80030b4:	461a      	mov	r2, r3
 80030b6:	7dfb      	ldrb	r3, [r7, #23]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	75fb      	strb	r3, [r7, #23]

	/* Download FW into VL53LMZ */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x09);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2209      	movs	r2, #9
 80030c0:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80030c4:	4618      	mov	r0, r3
 80030c6:	f002 faad 	bl	8005624 <WrByte>
 80030ca:	4603      	mov	r3, r0
 80030cc:	461a      	mov	r2, r3
 80030ce:	7dfb      	ldrb	r3, [r7, #23]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030da:	4adc      	ldr	r2, [pc, #880]	@ (800344c <vl53lmz_init+0x946>)
 80030dc:	2100      	movs	r1, #0
 80030de:	f002 fac9 	bl	8005674 <WrMulti>
 80030e2:	4603      	mov	r3, r0
 80030e4:	461a      	mov	r2, r3
 80030e6:	7dfb      	ldrb	r3, [r7, #23]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53LMZ_FIRMWARE[0],0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0a);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	220a      	movs	r2, #10
 80030f0:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80030f4:	4618      	mov	r0, r3
 80030f6:	f002 fa95 	bl	8005624 <WrByte>
 80030fa:	4603      	mov	r3, r0
 80030fc:	461a      	mov	r2, r3
 80030fe:	7dfb      	ldrb	r3, [r7, #23]
 8003100:	4313      	orrs	r3, r2
 8003102:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800310a:	4ad1      	ldr	r2, [pc, #836]	@ (8003450 <vl53lmz_init+0x94a>)
 800310c:	2100      	movs	r1, #0
 800310e:	f002 fab1 	bl	8005674 <WrMulti>
 8003112:	4603      	mov	r3, r0
 8003114:	461a      	mov	r2, r3
 8003116:	7dfb      	ldrb	r3, [r7, #23]
 8003118:	4313      	orrs	r3, r2
 800311a:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53LMZ_FIRMWARE[0x8000],0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0b);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	220b      	movs	r2, #11
 8003120:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003124:	4618      	mov	r0, r3
 8003126:	f002 fa7d 	bl	8005624 <WrByte>
 800312a:	4603      	mov	r3, r0
 800312c:	461a      	mov	r2, r3
 800312e:	7dfb      	ldrb	r3, [r7, #23]
 8003130:	4313      	orrs	r3, r2
 8003132:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 800313a:	4ac6      	ldr	r2, [pc, #792]	@ (8003454 <vl53lmz_init+0x94e>)
 800313c:	2100      	movs	r1, #0
 800313e:	f002 fa99 	bl	8005674 <WrMulti>
 8003142:	4603      	mov	r3, r0
 8003144:	461a      	mov	r2, r3
 8003146:	7dfb      	ldrb	r3, [r7, #23]
 8003148:	4313      	orrs	r3, r2
 800314a:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53LMZ_FIRMWARE[0x10000],0x5000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003154:	4618      	mov	r0, r3
 8003156:	f002 fa65 	bl	8005624 <WrByte>
 800315a:	4603      	mov	r3, r0
 800315c:	461a      	mov	r2, r3
 800315e:	7dfb      	ldrb	r3, [r7, #23]
 8003160:	4313      	orrs	r3, r2
 8003162:	75fb      	strb	r3, [r7, #23]

	/* Check if FW correctly downloaded */
	if ( p_dev->revision_id == (uint8_t)REVISION_L8 ) {
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800316a:	f893 33ce 	ldrb.w	r3, [r3, #974]	@ 0x3ce
 800316e:	2b0c      	cmp	r3, #12
 8003170:	d121      	bne.n	80031b6 <vl53lmz_init+0x6b0>
		status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800317a:	4618      	mov	r0, r3
 800317c:	f002 fa52 	bl	8005624 <WrByte>
 8003180:	4603      	mov	r3, r0
 8003182:	461a      	mov	r2, r3
 8003184:	7dfb      	ldrb	r3, [r7, #23]
 8003186:	4313      	orrs	r3, r2
 8003188:	75fb      	strb	r3, [r7, #23]
		status |= WrByte(&(p_dev->platform), 0x06, 0x03);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2203      	movs	r2, #3
 800318e:	2106      	movs	r1, #6
 8003190:	4618      	mov	r0, r3
 8003192:	f002 fa47 	bl	8005624 <WrByte>
 8003196:	4603      	mov	r3, r0
 8003198:	461a      	mov	r2, r3
 800319a:	7dfb      	ldrb	r3, [r7, #23]
 800319c:	4313      	orrs	r3, r2
 800319e:	75fb      	strb	r3, [r7, #23]
		status |= WaitMs(&(p_dev->platform), 5);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2105      	movs	r1, #5
 80031a4:	4618      	mov	r0, r3
 80031a6:	f002 fb02 	bl	80057ae <WaitMs>
 80031aa:	4603      	mov	r3, r0
 80031ac:	461a      	mov	r2, r3
 80031ae:	7dfb      	ldrb	r3, [r7, #23]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	75fb      	strb	r3, [r7, #23]
 80031b4:	e031      	b.n	800321a <vl53lmz_init+0x714>
	}
	else {
		status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2202      	movs	r2, #2
 80031ba:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80031be:	4618      	mov	r0, r3
 80031c0:	f002 fa30 	bl	8005624 <WrByte>
 80031c4:	4603      	mov	r3, r0
 80031c6:	461a      	mov	r2, r3
 80031c8:	7dfb      	ldrb	r3, [r7, #23]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	75fb      	strb	r3, [r7, #23]
		status |= WrByte(&(p_dev->platform), 0x03, 0x0D);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	220d      	movs	r2, #13
 80031d2:	2103      	movs	r1, #3
 80031d4:	4618      	mov	r0, r3
 80031d6:	f002 fa25 	bl	8005624 <WrByte>
 80031da:	4603      	mov	r3, r0
 80031dc:	461a      	mov	r2, r3
 80031de:	7dfb      	ldrb	r3, [r7, #23]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	75fb      	strb	r3, [r7, #23]
		status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80031ec:	4618      	mov	r0, r3
 80031ee:	f002 fa19 	bl	8005624 <WrByte>
 80031f2:	4603      	mov	r3, r0
 80031f4:	461a      	mov	r2, r3
 80031f6:	7dfb      	ldrb	r3, [r7, #23]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	75fb      	strb	r3, [r7, #23]
		status |= _vl53lmz_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 80031fc:	2310      	movs	r3, #16
 80031fe:	9301      	str	r3, [sp, #4]
 8003200:	2310      	movs	r3, #16
 8003202:	9300      	str	r3, [sp, #0]
 8003204:	2321      	movs	r3, #33	@ 0x21
 8003206:	2200      	movs	r2, #0
 8003208:	2101      	movs	r1, #1
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7ff f880 	bl	8002310 <_vl53lmz_poll_for_answer>
 8003210:	4603      	mov	r3, r0
 8003212:	461a      	mov	r2, r3
 8003214:	7dfb      	ldrb	r3, [r7, #23]
 8003216:	4313      	orrs	r3, r2
 8003218:	75fb      	strb	r3, [r7, #23]
	}
	if(status != (uint8_t)0) {
 800321a:	7dfb      	ldrb	r3, [r7, #23]
 800321c:	2b00      	cmp	r3, #0
 800321e:	f040 815f 	bne.w	80034e0 <vl53lmz_init+0x9da>
		goto exit;
	}
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800322a:	4618      	mov	r0, r3
 800322c:	f002 f9fa 	bl	8005624 <WrByte>
 8003230:	4603      	mov	r3, r0
 8003232:	461a      	mov	r2, r3
 8003234:	7dfb      	ldrb	r3, [r7, #23]
 8003236:	4313      	orrs	r3, r2
 8003238:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f107 0216 	add.w	r2, r7, #22
 8003240:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003244:	4618      	mov	r0, r3
 8003246:	f002 f9b9 	bl	80055bc <RdByte>
 800324a:	4603      	mov	r3, r0
 800324c:	461a      	mov	r2, r3
 800324e:	7dfb      	ldrb	r3, [r7, #23]
 8003250:	4313      	orrs	r3, r2
 8003252:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	210c      	movs	r1, #12
 800325a:	4618      	mov	r0, r3
 800325c:	f002 f9e2 	bl	8005624 <WrByte>
 8003260:	4603      	mov	r3, r0
 8003262:	461a      	mov	r2, r3
 8003264:	7dfb      	ldrb	r3, [r7, #23]
 8003266:	4313      	orrs	r3, r2
 8003268:	75fb      	strb	r3, [r7, #23]

	/* Reset MCU and wait boot */
	status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003272:	4618      	mov	r0, r3
 8003274:	f002 f9d6 	bl	8005624 <WrByte>
 8003278:	4603      	mov	r3, r0
 800327a:	461a      	mov	r2, r3
 800327c:	7dfb      	ldrb	r3, [r7, #23]
 800327e:	4313      	orrs	r3, r2
 8003280:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x114, 0x00);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f44f 718a 	mov.w	r1, #276	@ 0x114
 800328a:	4618      	mov	r0, r3
 800328c:	f002 f9ca 	bl	8005624 <WrByte>
 8003290:	4603      	mov	r3, r0
 8003292:	461a      	mov	r2, r3
 8003294:	7dfb      	ldrb	r3, [r7, #23]
 8003296:	4313      	orrs	r3, r2
 8003298:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x115, 0x00);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f240 1115 	movw	r1, #277	@ 0x115
 80032a2:	4618      	mov	r0, r3
 80032a4:	f002 f9be 	bl	8005624 <WrByte>
 80032a8:	4603      	mov	r3, r0
 80032aa:	461a      	mov	r2, r3
 80032ac:	7dfb      	ldrb	r3, [r7, #23]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x116, 0x42);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2242      	movs	r2, #66	@ 0x42
 80032b6:	f44f 718b 	mov.w	r1, #278	@ 0x116
 80032ba:	4618      	mov	r0, r3
 80032bc:	f002 f9b2 	bl	8005624 <WrByte>
 80032c0:	4603      	mov	r3, r0
 80032c2:	461a      	mov	r2, r3
 80032c4:	7dfb      	ldrb	r3, [r7, #23]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x117, 0x00);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f240 1117 	movw	r1, #279	@ 0x117
 80032d2:	4618      	mov	r0, r3
 80032d4:	f002 f9a6 	bl	8005624 <WrByte>
 80032d8:	4603      	mov	r3, r0
 80032da:	461a      	mov	r2, r3
 80032dc:	7dfb      	ldrb	r3, [r7, #23]
 80032de:	4313      	orrs	r3, r2
 80032e0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x00);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	210b      	movs	r1, #11
 80032e8:	4618      	mov	r0, r3
 80032ea:	f002 f99b 	bl	8005624 <WrByte>
 80032ee:	4603      	mov	r3, r0
 80032f0:	461a      	mov	r2, r3
 80032f2:	7dfb      	ldrb	r3, [r7, #23]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f107 0216 	add.w	r2, r7, #22
 80032fe:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003302:	4618      	mov	r0, r3
 8003304:	f002 f95a 	bl	80055bc <RdByte>
 8003308:	4603      	mov	r3, r0
 800330a:	461a      	mov	r2, r3
 800330c:	7dfb      	ldrb	r3, [r7, #23]
 800330e:	4313      	orrs	r3, r2
 8003310:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x00);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	210c      	movs	r1, #12
 8003318:	4618      	mov	r0, r3
 800331a:	f002 f983 	bl	8005624 <WrByte>
 800331e:	4603      	mov	r3, r0
 8003320:	461a      	mov	r2, r3
 8003322:	7dfb      	ldrb	r3, [r7, #23]
 8003324:	4313      	orrs	r3, r2
 8003326:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x01);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	210b      	movs	r1, #11
 800332e:	4618      	mov	r0, r3
 8003330:	f002 f978 	bl	8005624 <WrByte>
 8003334:	4603      	mov	r3, r0
 8003336:	461a      	mov	r2, r3
 8003338:	7dfb      	ldrb	r3, [r7, #23]
 800333a:	4313      	orrs	r3, r2
 800333c:	75fb      	strb	r3, [r7, #23]

	status |= _vl53lmz_poll_for_mcu_boot(p_dev);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7ff f836 	bl	80023b0 <_vl53lmz_poll_for_mcu_boot>
 8003344:	4603      	mov	r3, r0
 8003346:	461a      	mov	r2, r3
 8003348:	7dfb      	ldrb	r3, [r7, #23]
 800334a:	4313      	orrs	r3, r2
 800334c:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 800334e:	7dfb      	ldrb	r3, [r7, #23]
 8003350:	2b00      	cmp	r3, #0
 8003352:	f040 80c7 	bne.w	80034e4 <vl53lmz_init+0x9de>
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2202      	movs	r2, #2
 800335a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800335e:	4618      	mov	r0, r3
 8003360:	f002 f960 	bl	8005624 <WrByte>
 8003364:	4603      	mov	r3, r0
 8003366:	461a      	mov	r2, r3
 8003368:	7dfb      	ldrb	r3, [r7, #23]
 800336a:	4313      	orrs	r3, r2
 800336c:	75fb      	strb	r3, [r7, #23]

	/* Get offset NVM data and store them into the offset buffer */
	status |= WrMulti(&(p_dev->platform), 0x2fd8,
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	2328      	movs	r3, #40	@ 0x28
 8003372:	4a39      	ldr	r2, [pc, #228]	@ (8003458 <vl53lmz_init+0x952>)
 8003374:	f642 71d8 	movw	r1, #12248	@ 0x2fd8
 8003378:	f002 f97c 	bl	8005674 <WrMulti>
 800337c:	4603      	mov	r3, r0
 800337e:	461a      	mov	r2, r3
 8003380:	7dfb      	ldrb	r3, [r7, #23]
 8003382:	4313      	orrs	r3, r2
 8003384:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)VL53LMZ_GET_NVM_CMD, sizeof(VL53LMZ_GET_NVM_CMD));
	status |= _vl53lmz_poll_for_answer(p_dev, 4, 0,
 8003386:	2302      	movs	r3, #2
 8003388:	9301      	str	r3, [sp, #4]
 800338a:	23ff      	movs	r3, #255	@ 0xff
 800338c:	9300      	str	r3, [sp, #0]
 800338e:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8003392:	2200      	movs	r2, #0
 8003394:	2104      	movs	r1, #4
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7fe ffba 	bl	8002310 <_vl53lmz_poll_for_answer>
 800339c:	4603      	mov	r3, r0
 800339e:	461a      	mov	r2, r3
 80033a0:	7dfb      	ldrb	r3, [r7, #23]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	75fb      	strb	r3, [r7, #23]
		VL53LMZ_UI_CMD_STATUS, 0xff, 2);
	status |= RdMulti(&(p_dev->platform), VL53LMZ_UI_CMD_START,
 80033a6:	6878      	ldr	r0, [r7, #4]
		p_dev->temp_buffer, VL53LMZ_NVM_DATA_SIZE);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f203 5204 	addw	r2, r3, #1284	@ 0x504
	status |= RdMulti(&(p_dev->platform), VL53LMZ_UI_CMD_START,
 80033ae:	f44f 73f6 	mov.w	r3, #492	@ 0x1ec
 80033b2:	f642 4104 	movw	r1, #11268	@ 0x2c04
 80033b6:	f002 f97d 	bl	80056b4 <RdMulti>
 80033ba:	4603      	mov	r3, r0
 80033bc:	461a      	mov	r2, r3
 80033be:	7dfb      	ldrb	r3, [r7, #23]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(p_dev->offset_data, p_dev->temp_buffer,
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f103 0014 	add.w	r0, r3, #20
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f203 5304 	addw	r3, r3, #1284	@ 0x504
 80033d0:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 80033d4:	4619      	mov	r1, r3
 80033d6:	f020 f922 	bl	802361e <memcpy>
		VL53LMZ_OFFSET_BUFFER_SIZE);
	status |= _vl53lmz_send_offset_data(p_dev, VL53LMZ_RESOLUTION_4X4);
 80033da:	2110      	movs	r1, #16
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f7ff f82a 	bl	8002436 <_vl53lmz_send_offset_data>
 80033e2:	4603      	mov	r3, r0
 80033e4:	461a      	mov	r2, r3
 80033e6:	7dfb      	ldrb	r3, [r7, #23]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	75fb      	strb	r3, [r7, #23]

	/* Set default Xtalk shape. Send Xtalk to sensor */
	p_dev->default_xtalk = (uint8_t*)VL53LMZ_DEFAULT_XTALK;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a1b      	ldr	r2, [pc, #108]	@ (800345c <vl53lmz_init+0x956>)
 80033f0:	611a      	str	r2, [r3, #16]
	(void)memcpy(p_dev->xtalk_data, (uint8_t*)VL53LMZ_DEFAULT_XTALK,
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 80033f8:	4a18      	ldr	r2, [pc, #96]	@ (800345c <vl53lmz_init+0x956>)
 80033fa:	4618      	mov	r0, r3
 80033fc:	4611      	mov	r1, r2
 80033fe:	f44f 7342 	mov.w	r3, #776	@ 0x308
 8003402:	461a      	mov	r2, r3
 8003404:	f020 f90b 	bl	802361e <memcpy>
		VL53LMZ_XTALK_BUFFER_SIZE);
	status |= _vl53lmz_send_xtalk_data(p_dev, VL53LMZ_RESOLUTION_4X4);
 8003408:	2110      	movs	r1, #16
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7ff f9e0 	bl	80027d0 <_vl53lmz_send_xtalk_data>
 8003410:	4603      	mov	r3, r0
 8003412:	461a      	mov	r2, r3
 8003414:	7dfb      	ldrb	r3, [r7, #23]
 8003416:	4313      	orrs	r3, r2
 8003418:	75fb      	strb	r3, [r7, #23]

	/* Send default configuration to VL53L5CX firmware */
	if ( p_dev->revision_id == (uint8_t)REVISION_L8 ) {
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003420:	f893 33ce 	ldrb.w	r3, [r3, #974]	@ 0x3ce
 8003424:	2b0c      	cmp	r3, #12
 8003426:	d11d      	bne.n	8003464 <vl53lmz_init+0x95e>
		p_dev->default_configuration = (uint8_t*)VL53L8_DEFAULT_CONFIGURATION;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a0d      	ldr	r2, [pc, #52]	@ (8003460 <vl53lmz_init+0x95a>)
 800342c:	60da      	str	r2, [r3, #12]
		status |= WrMulti(&(p_dev->platform), 0x2c34,
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68da      	ldr	r2, [r3, #12]
 8003434:	f44f 7373 	mov.w	r3, #972	@ 0x3cc
 8003438:	f642 4134 	movw	r1, #11316	@ 0x2c34
 800343c:	f002 f91a 	bl	8005674 <WrMulti>
 8003440:	4603      	mov	r3, r0
 8003442:	461a      	mov	r2, r3
 8003444:	7dfb      	ldrb	r3, [r7, #23]
 8003446:	4313      	orrs	r3, r2
 8003448:	75fb      	strb	r3, [r7, #23]
 800344a:	e01c      	b.n	8003486 <vl53lmz_init+0x980>
 800344c:	080298ac 	.word	0x080298ac
 8003450:	080318ac 	.word	0x080318ac
 8003454:	080398ac 	.word	0x080398ac
 8003458:	0803f34c 	.word	0x0803f34c
 800345c:	0803f044 	.word	0x0803f044
 8003460:	0803e8ac 	.word	0x0803e8ac
							p_dev->default_configuration,
							sizeof(VL53L8_DEFAULT_CONFIGURATION));
	}
	else {
		p_dev->default_configuration = (uint8_t*)VL53L7_DEFAULT_CONFIGURATION;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a22      	ldr	r2, [pc, #136]	@ (80034f0 <vl53lmz_init+0x9ea>)
 8003468:	60da      	str	r2, [r3, #12]
		status |= WrMulti(&(p_dev->platform), 0x2c34,
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	68da      	ldr	r2, [r3, #12]
 8003470:	f44f 7373 	mov.w	r3, #972	@ 0x3cc
 8003474:	f642 4134 	movw	r1, #11316	@ 0x2c34
 8003478:	f002 f8fc 	bl	8005674 <WrMulti>
 800347c:	4603      	mov	r3, r0
 800347e:	461a      	mov	r2, r3
 8003480:	7dfb      	ldrb	r3, [r7, #23]
 8003482:	4313      	orrs	r3, r2
 8003484:	75fb      	strb	r3, [r7, #23]
							p_dev->default_configuration,
							sizeof(VL53L7_DEFAULT_CONFIGURATION));
	}

	status |= _vl53lmz_poll_for_answer(p_dev, 4, 1, VL53LMZ_UI_CMD_STATUS, 0xff, 0x03);
 8003486:	2303      	movs	r3, #3
 8003488:	9301      	str	r3, [sp, #4]
 800348a:	23ff      	movs	r3, #255	@ 0xff
 800348c:	9300      	str	r3, [sp, #0]
 800348e:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8003492:	2201      	movs	r2, #1
 8003494:	2104      	movs	r1, #4
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f7fe ff3a 	bl	8002310 <_vl53lmz_poll_for_answer>
 800349c:	4603      	mov	r3, r0
 800349e:	461a      	mov	r2, r3
 80034a0:	7dfb      	ldrb	r3, [r7, #23]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	75fb      	strb	r3, [r7, #23]

	status |= vl53lmz_dci_write_data(p_dev, (uint8_t*)&pipe_ctrl,
 80034a6:	f107 0110 	add.w	r1, r7, #16
 80034aa:	2304      	movs	r3, #4
 80034ac:	f64d 3280 	movw	r2, #56192	@ 0xdb80
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f001 f899 	bl	80045e8 <vl53lmz_dci_write_data>
 80034b6:	4603      	mov	r3, r0
 80034b8:	461a      	mov	r2, r3
 80034ba:	7dfb      	ldrb	r3, [r7, #23]
 80034bc:	4313      	orrs	r3, r2
 80034be:	75fb      	strb	r3, [r7, #23]
	status |= vl53lmz_dci_replace_data(p_dev, p_dev->temp_buffer,
		VL53LMZ_DCI_FW_NB_TARGET, 16,
	(uint8_t*)&tmp, 1, 0x0C);
#endif

	status |= vl53lmz_dci_write_data(p_dev, (uint8_t*)&single_range,
 80034c0:	f107 010c 	add.w	r1, r7, #12
 80034c4:	2304      	movs	r3, #4
 80034c6:	f64d 1264 	movw	r2, #55652	@ 0xd964
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f001 f88c 	bl	80045e8 <vl53lmz_dci_write_data>
 80034d0:	4603      	mov	r3, r0
 80034d2:	461a      	mov	r2, r3
 80034d4:	7dfb      	ldrb	r3, [r7, #23]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	75fb      	strb	r3, [r7, #23]
 80034da:	e004      	b.n	80034e6 <vl53lmz_init+0x9e0>
		goto exit;
 80034dc:	bf00      	nop
 80034de:	e002      	b.n	80034e6 <vl53lmz_init+0x9e0>
		goto exit;
 80034e0:	bf00      	nop
 80034e2:	e000      	b.n	80034e6 <vl53lmz_init+0x9e0>
		goto exit;
 80034e4:	bf00      	nop
			VL53LMZ_DCI_SINGLE_RANGE,
			(uint16_t)sizeof(single_range));

exit:
	return status;
 80034e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3718      	adds	r7, #24
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	0803ec78 	.word	0x0803ec78

080034f4 <vl53lmz_set_i2c_address>:

uint8_t vl53lmz_set_i2c_address(
		VL53LMZ_Configuration		*p_dev,
		uint16_t				i2c_address)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	460b      	mov	r3, r1
 80034fe:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53LMZ_STATUS_OK;
 8003500:	2300      	movs	r3, #0
 8003502:	73fb      	strb	r3, [r7, #15]

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800350c:	4618      	mov	r0, r3
 800350e:	f002 f889 	bl	8005624 <WrByte>
 8003512:	4603      	mov	r3, r0
 8003514:	461a      	mov	r2, r3
 8003516:	7bfb      	ldrb	r3, [r7, #15]
 8003518:	4313      	orrs	r3, r2
 800351a:	73fb      	strb	r3, [r7, #15]
	status |= WrByte(&(p_dev->platform), 0x4, (uint8_t)(i2c_address >> 1));
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	887b      	ldrh	r3, [r7, #2]
 8003520:	085b      	lsrs	r3, r3, #1
 8003522:	b29b      	uxth	r3, r3
 8003524:	b2db      	uxtb	r3, r3
 8003526:	461a      	mov	r2, r3
 8003528:	2104      	movs	r1, #4
 800352a:	f002 f87b 	bl	8005624 <WrByte>
 800352e:	4603      	mov	r3, r0
 8003530:	461a      	mov	r2, r3
 8003532:	7bfb      	ldrb	r3, [r7, #15]
 8003534:	4313      	orrs	r3, r2
 8003536:	73fb      	strb	r3, [r7, #15]
	p_dev->platform.address = i2c_address;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	887a      	ldrh	r2, [r7, #2]
 800353c:	801a      	strh	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2202      	movs	r2, #2
 8003542:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003546:	4618      	mov	r0, r3
 8003548:	f002 f86c 	bl	8005624 <WrByte>
 800354c:	4603      	mov	r3, r0
 800354e:	461a      	mov	r2, r3
 8003550:	7bfb      	ldrb	r3, [r7, #15]
 8003552:	4313      	orrs	r3, r2
 8003554:	73fb      	strb	r3, [r7, #15]

	return status;
 8003556:	7bfb      	ldrb	r3, [r7, #15]
}
 8003558:	4618      	mov	r0, r3
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <vl53lmz_get_power_mode>:

uint8_t vl53lmz_get_power_mode(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				*p_power_mode)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
	uint8_t tmp, status = VL53LMZ_STATUS_OK;
 800356a:	2300      	movs	r3, #0
 800356c:	73fb      	strb	r3, [r7, #15]

	status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003576:	4618      	mov	r0, r3
 8003578:	f002 f854 	bl	8005624 <WrByte>
 800357c:	4603      	mov	r3, r0
 800357e:	461a      	mov	r2, r3
 8003580:	7bfb      	ldrb	r3, [r7, #15]
 8003582:	4313      	orrs	r3, r2
 8003584:	73fb      	strb	r3, [r7, #15]
	status |= RdByte(&(p_dev->platform), 0x009, &tmp);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f107 020e 	add.w	r2, r7, #14
 800358c:	2109      	movs	r1, #9
 800358e:	4618      	mov	r0, r3
 8003590:	f002 f814 	bl	80055bc <RdByte>
 8003594:	4603      	mov	r3, r0
 8003596:	461a      	mov	r2, r3
 8003598:	7bfb      	ldrb	r3, [r7, #15]
 800359a:	4313      	orrs	r3, r2
 800359c:	73fb      	strb	r3, [r7, #15]

	switch(tmp)
 800359e:	7bbb      	ldrb	r3, [r7, #14]
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d005      	beq.n	80035b0 <vl53lmz_get_power_mode+0x50>
 80035a4:	2b04      	cmp	r3, #4
 80035a6:	d107      	bne.n	80035b8 <vl53lmz_get_power_mode+0x58>
	{
		case 0x4:
			*p_power_mode = VL53LMZ_POWER_MODE_WAKEUP;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	2201      	movs	r2, #1
 80035ac:	701a      	strb	r2, [r3, #0]
			break;
 80035ae:	e009      	b.n	80035c4 <vl53lmz_get_power_mode+0x64>
		case 0x2:
			*p_power_mode = VL53LMZ_POWER_MODE_SLEEP;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	2200      	movs	r2, #0
 80035b4:	701a      	strb	r2, [r3, #0]

			break;
 80035b6:	e005      	b.n	80035c4 <vl53lmz_get_power_mode+0x64>
		default:
			*p_power_mode = 0;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	2200      	movs	r2, #0
 80035bc:	701a      	strb	r2, [r3, #0]
			status = VL53LMZ_STATUS_ERROR;
 80035be:	23ff      	movs	r3, #255	@ 0xff
 80035c0:	73fb      	strb	r3, [r7, #15]
			break;
 80035c2:	bf00      	nop
	}

	status |= WrByte(&(p_dev->platform), 0x7FFF, 0x02);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2202      	movs	r2, #2
 80035c8:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80035cc:	4618      	mov	r0, r3
 80035ce:	f002 f829 	bl	8005624 <WrByte>
 80035d2:	4603      	mov	r3, r0
 80035d4:	461a      	mov	r2, r3
 80035d6:	7bfb      	ldrb	r3, [r7, #15]
 80035d8:	4313      	orrs	r3, r2
 80035da:	73fb      	strb	r3, [r7, #15]

	return status;
 80035dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <vl53lmz_set_power_mode>:

uint8_t vl53lmz_set_power_mode(
		VL53LMZ_Configuration		*p_dev,
		uint8_t					power_mode)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b086      	sub	sp, #24
 80035ea:	af02      	add	r7, sp, #8
 80035ec:	6078      	str	r0, [r7, #4]
 80035ee:	460b      	mov	r3, r1
 80035f0:	70fb      	strb	r3, [r7, #3]
	uint8_t current_power_mode, status = VL53LMZ_STATUS_OK;
 80035f2:	2300      	movs	r3, #0
 80035f4:	73fb      	strb	r3, [r7, #15]

	status |= vl53lmz_get_power_mode(p_dev, &current_power_mode);
 80035f6:	f107 030e 	add.w	r3, r7, #14
 80035fa:	4619      	mov	r1, r3
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f7ff ffaf 	bl	8003560 <vl53lmz_get_power_mode>
 8003602:	4603      	mov	r3, r0
 8003604:	461a      	mov	r2, r3
 8003606:	7bfb      	ldrb	r3, [r7, #15]
 8003608:	4313      	orrs	r3, r2
 800360a:	73fb      	strb	r3, [r7, #15]
	if(power_mode != current_power_mode)
 800360c:	7bbb      	ldrb	r3, [r7, #14]
 800360e:	78fa      	ldrb	r2, [r7, #3]
 8003610:	429a      	cmp	r2, r3
 8003612:	d061      	beq.n	80036d8 <vl53lmz_set_power_mode+0xf2>
	{
	switch(power_mode)
 8003614:	78fb      	ldrb	r3, [r7, #3]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d028      	beq.n	800366c <vl53lmz_set_power_mode+0x86>
 800361a:	2b01      	cmp	r3, #1
 800361c:	d14d      	bne.n	80036ba <vl53lmz_set_power_mode+0xd4>
	{
		case VL53LMZ_POWER_MODE_WAKEUP:
			status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003626:	4618      	mov	r0, r3
 8003628:	f001 fffc 	bl	8005624 <WrByte>
 800362c:	4603      	mov	r3, r0
 800362e:	461a      	mov	r2, r3
 8003630:	7bfb      	ldrb	r3, [r7, #15]
 8003632:	4313      	orrs	r3, r2
 8003634:	73fb      	strb	r3, [r7, #15]
			status |= WrByte(&(p_dev->platform), 0x09, 0x04);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2204      	movs	r2, #4
 800363a:	2109      	movs	r1, #9
 800363c:	4618      	mov	r0, r3
 800363e:	f001 fff1 	bl	8005624 <WrByte>
 8003642:	4603      	mov	r3, r0
 8003644:	461a      	mov	r2, r3
 8003646:	7bfb      	ldrb	r3, [r7, #15]
 8003648:	4313      	orrs	r3, r2
 800364a:	73fb      	strb	r3, [r7, #15]
			status |= _vl53lmz_poll_for_answer(
 800364c:	2301      	movs	r3, #1
 800364e:	9301      	str	r3, [sp, #4]
 8003650:	2301      	movs	r3, #1
 8003652:	9300      	str	r3, [sp, #0]
 8003654:	2306      	movs	r3, #6
 8003656:	2200      	movs	r2, #0
 8003658:	2101      	movs	r1, #1
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7fe fe58 	bl	8002310 <_vl53lmz_poll_for_answer>
 8003660:	4603      	mov	r3, r0
 8003662:	461a      	mov	r2, r3
 8003664:	7bfb      	ldrb	r3, [r7, #15]
 8003666:	4313      	orrs	r3, r2
 8003668:	73fb      	strb	r3, [r7, #15]
						p_dev, 1, 0, 0x06, 0x01, 1);
			break;
 800366a:	e029      	b.n	80036c0 <vl53lmz_set_power_mode+0xda>

		case VL53LMZ_POWER_MODE_SLEEP:
			status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003674:	4618      	mov	r0, r3
 8003676:	f001 ffd5 	bl	8005624 <WrByte>
 800367a:	4603      	mov	r3, r0
 800367c:	461a      	mov	r2, r3
 800367e:	7bfb      	ldrb	r3, [r7, #15]
 8003680:	4313      	orrs	r3, r2
 8003682:	73fb      	strb	r3, [r7, #15]
			status |= WrByte(&(p_dev->platform), 0x09, 0x02);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2202      	movs	r2, #2
 8003688:	2109      	movs	r1, #9
 800368a:	4618      	mov	r0, r3
 800368c:	f001 ffca 	bl	8005624 <WrByte>
 8003690:	4603      	mov	r3, r0
 8003692:	461a      	mov	r2, r3
 8003694:	7bfb      	ldrb	r3, [r7, #15]
 8003696:	4313      	orrs	r3, r2
 8003698:	73fb      	strb	r3, [r7, #15]
			status |= _vl53lmz_poll_for_answer(
 800369a:	2300      	movs	r3, #0
 800369c:	9301      	str	r3, [sp, #4]
 800369e:	2301      	movs	r3, #1
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	2306      	movs	r3, #6
 80036a4:	2200      	movs	r2, #0
 80036a6:	2101      	movs	r1, #1
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f7fe fe31 	bl	8002310 <_vl53lmz_poll_for_answer>
 80036ae:	4603      	mov	r3, r0
 80036b0:	461a      	mov	r2, r3
 80036b2:	7bfb      	ldrb	r3, [r7, #15]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	73fb      	strb	r3, [r7, #15]
						p_dev, 1, 0, 0x06, 0x01, 0);
			break;
 80036b8:	e002      	b.n	80036c0 <vl53lmz_set_power_mode+0xda>

		default:
			status = VL53LMZ_STATUS_ERROR;
 80036ba:	23ff      	movs	r3, #255	@ 0xff
 80036bc:	73fb      	strb	r3, [r7, #15]
			break;
 80036be:	bf00      	nop
		}
		status |= WrByte(&(p_dev->platform), 0x7FFF, 0x02);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2202      	movs	r2, #2
 80036c4:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80036c8:	4618      	mov	r0, r3
 80036ca:	f001 ffab 	bl	8005624 <WrByte>
 80036ce:	4603      	mov	r3, r0
 80036d0:	461a      	mov	r2, r3
 80036d2:	7bfb      	ldrb	r3, [r7, #15]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80036d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <vl53lmz_start_ranging>:

uint8_t vl53lmz_start_ranging(
		VL53LMZ_Configuration		*p_dev)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b084      	sub	sp, #16
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
	uint8_t status = VL53LMZ_STATUS_OK;
 80036ea:	2300      	movs	r3, #0
 80036ec:	73fb      	strb	r3, [r7, #15]

	status = vl53lmz_create_output_config( p_dev );
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f001 f846 	bl	8004780 <vl53lmz_create_output_config>
 80036f4:	4603      	mov	r3, r0
 80036f6:	73fb      	strb	r3, [r7, #15]
	if (status != VL53LMZ_STATUS_OK)
 80036f8:	7bfb      	ldrb	r3, [r7, #15]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <vl53lmz_start_ranging+0x20>
		return status;
 80036fe:	7bfb      	ldrb	r3, [r7, #15]
 8003700:	e005      	b.n	800370e <vl53lmz_start_ranging+0x2c>

	status = vl53lmz_send_output_config_and_start( p_dev );
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f001 f8aa 	bl	800485c <vl53lmz_send_output_config_and_start>
 8003708:	4603      	mov	r3, r0
 800370a:	73fb      	strb	r3, [r7, #15]

	return status;
 800370c:	7bfb      	ldrb	r3, [r7, #15]
}
 800370e:	4618      	mov	r0, r3
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <vl53lmz_stop_ranging>:

uint8_t vl53lmz_stop_ranging(
		VL53LMZ_Configuration		*p_dev)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b086      	sub	sp, #24
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0, status = VL53LMZ_STATUS_OK;
 800371e:	2300      	movs	r3, #0
 8003720:	74fb      	strb	r3, [r7, #19]
 8003722:	2300      	movs	r3, #0
 8003724:	75fb      	strb	r3, [r7, #23]
	uint16_t timeout = 0;
 8003726:	2300      	movs	r3, #0
 8003728:	82bb      	strh	r3, [r7, #20]
	uint32_t auto_stop_flag = 0;
 800372a:	2300      	movs	r3, #0
 800372c:	60fb      	str	r3, [r7, #12]

	status |= RdMulti(&(p_dev->platform),
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f107 020c 	add.w	r2, r7, #12
 8003734:	2304      	movs	r3, #4
 8003736:	f642 71fc 	movw	r1, #12284	@ 0x2ffc
 800373a:	f001 ffbb 	bl	80056b4 <RdMulti>
 800373e:	4603      	mov	r3, r0
 8003740:	461a      	mov	r2, r3
 8003742:	7dfb      	ldrb	r3, [r7, #23]
 8003744:	4313      	orrs	r3, r2
 8003746:	75fb      	strb	r3, [r7, #23]
						  0x2FFC, (uint8_t*)&auto_stop_flag, 4);

	if((auto_stop_flag != (uint32_t)0x4FF)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f240 42ff 	movw	r2, #1279	@ 0x4ff
 800374e:	4293      	cmp	r3, r2
 8003750:	d04f      	beq.n	80037f2 <vl53lmz_stop_ranging+0xdc>
		&& (p_dev->is_auto_stop_enabled == (uint8_t)1))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003758:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800375c:	2b01      	cmp	r3, #1
 800375e:	d148      	bne.n	80037f2 <vl53lmz_stop_ranging+0xdc>
	{
			status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003768:	4618      	mov	r0, r3
 800376a:	f001 ff5b 	bl	8005624 <WrByte>
 800376e:	4603      	mov	r3, r0
 8003770:	461a      	mov	r2, r3
 8003772:	7dfb      	ldrb	r3, [r7, #23]
 8003774:	4313      	orrs	r3, r2
 8003776:	75fb      	strb	r3, [r7, #23]

			/* Provoke MCU stop */
			status |= WrByte(&(p_dev->platform), 0x15, 0x16);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2216      	movs	r2, #22
 800377c:	2115      	movs	r1, #21
 800377e:	4618      	mov	r0, r3
 8003780:	f001 ff50 	bl	8005624 <WrByte>
 8003784:	4603      	mov	r3, r0
 8003786:	461a      	mov	r2, r3
 8003788:	7dfb      	ldrb	r3, [r7, #23]
 800378a:	4313      	orrs	r3, r2
 800378c:	75fb      	strb	r3, [r7, #23]
			status |= WrByte(&(p_dev->platform), 0x14, 0x01);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2201      	movs	r2, #1
 8003792:	2114      	movs	r1, #20
 8003794:	4618      	mov	r0, r3
 8003796:	f001 ff45 	bl	8005624 <WrByte>
 800379a:	4603      	mov	r3, r0
 800379c:	461a      	mov	r2, r3
 800379e:	7dfb      	ldrb	r3, [r7, #23]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	75fb      	strb	r3, [r7, #23]

			/* Poll for G02 status 0 MCU stop */
			while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 80037a4:	e021      	b.n	80037ea <vl53lmz_stop_ranging+0xd4>
			{
				status |= RdByte(&(p_dev->platform), 0x6, &tmp);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f107 0213 	add.w	r2, r7, #19
 80037ac:	2106      	movs	r1, #6
 80037ae:	4618      	mov	r0, r3
 80037b0:	f001 ff04 	bl	80055bc <RdByte>
 80037b4:	4603      	mov	r3, r0
 80037b6:	461a      	mov	r2, r3
 80037b8:	7dfb      	ldrb	r3, [r7, #23]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	75fb      	strb	r3, [r7, #23]
				status |= WaitMs(&(p_dev->platform), 10);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	210a      	movs	r1, #10
 80037c2:	4618      	mov	r0, r3
 80037c4:	f001 fff3 	bl	80057ae <WaitMs>
 80037c8:	4603      	mov	r3, r0
 80037ca:	461a      	mov	r2, r3
 80037cc:	7dfb      	ldrb	r3, [r7, #23]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	75fb      	strb	r3, [r7, #23]
				timeout++;	/* Timeout reached after 5 seconds */
 80037d2:	8abb      	ldrh	r3, [r7, #20]
 80037d4:	3301      	adds	r3, #1
 80037d6:	82bb      	strh	r3, [r7, #20]

				if(timeout > (uint16_t)500)
 80037d8:	8abb      	ldrh	r3, [r7, #20]
 80037da:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80037de:	d904      	bls.n	80037ea <vl53lmz_stop_ranging+0xd4>
				{
					status |= tmp;
 80037e0:	7cfa      	ldrb	r2, [r7, #19]
 80037e2:	7dfb      	ldrb	r3, [r7, #23]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	75fb      	strb	r3, [r7, #23]
					break;
 80037e8:	e003      	b.n	80037f2 <vl53lmz_stop_ranging+0xdc>
			while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 80037ea:	7cfb      	ldrb	r3, [r7, #19]
 80037ec:	b25b      	sxtb	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	dad9      	bge.n	80037a6 <vl53lmz_stop_ranging+0x90>
				}
			}
		}

	/* Check GO2 status 1 if status is still OK */
	status |= RdByte(&(p_dev->platform), 0x6, &tmp);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f107 0213 	add.w	r2, r7, #19
 80037f8:	2106      	movs	r1, #6
 80037fa:	4618      	mov	r0, r3
 80037fc:	f001 fede 	bl	80055bc <RdByte>
 8003800:	4603      	mov	r3, r0
 8003802:	461a      	mov	r2, r3
 8003804:	7dfb      	ldrb	r3, [r7, #23]
 8003806:	4313      	orrs	r3, r2
 8003808:	75fb      	strb	r3, [r7, #23]
	if((tmp & (uint8_t)0x80) != (uint8_t)0){
 800380a:	7cfb      	ldrb	r3, [r7, #19]
 800380c:	b25b      	sxtb	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	da15      	bge.n	800383e <vl53lmz_stop_ranging+0x128>
		status |= RdByte(&(p_dev->platform), 0x7, &tmp);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f107 0213 	add.w	r2, r7, #19
 8003818:	2107      	movs	r1, #7
 800381a:	4618      	mov	r0, r3
 800381c:	f001 fece 	bl	80055bc <RdByte>
 8003820:	4603      	mov	r3, r0
 8003822:	461a      	mov	r2, r3
 8003824:	7dfb      	ldrb	r3, [r7, #23]
 8003826:	4313      	orrs	r3, r2
 8003828:	75fb      	strb	r3, [r7, #23]
		if((tmp != (uint8_t)0x84) && (tmp != (uint8_t)0x85)){
 800382a:	7cfb      	ldrb	r3, [r7, #19]
 800382c:	2b84      	cmp	r3, #132	@ 0x84
 800382e:	d006      	beq.n	800383e <vl53lmz_stop_ranging+0x128>
 8003830:	7cfb      	ldrb	r3, [r7, #19]
 8003832:	2b85      	cmp	r3, #133	@ 0x85
 8003834:	d003      	beq.n	800383e <vl53lmz_stop_ranging+0x128>
		   status |= tmp;
 8003836:	7cfa      	ldrb	r2, [r7, #19]
 8003838:	7dfb      	ldrb	r3, [r7, #23]
 800383a:	4313      	orrs	r3, r2
 800383c:	75fb      	strb	r3, [r7, #23]
		}
	}

	/* Undo MCU stop */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003846:	4618      	mov	r0, r3
 8003848:	f001 feec 	bl	8005624 <WrByte>
 800384c:	4603      	mov	r3, r0
 800384e:	461a      	mov	r2, r3
 8003850:	7dfb      	ldrb	r3, [r7, #23]
 8003852:	4313      	orrs	r3, r2
 8003854:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x14, 0x00);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	2114      	movs	r1, #20
 800385c:	4618      	mov	r0, r3
 800385e:	f001 fee1 	bl	8005624 <WrByte>
 8003862:	4603      	mov	r3, r0
 8003864:	461a      	mov	r2, r3
 8003866:	7dfb      	ldrb	r3, [r7, #23]
 8003868:	4313      	orrs	r3, r2
 800386a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x15, 0x00);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	2115      	movs	r1, #21
 8003872:	4618      	mov	r0, r3
 8003874:	f001 fed6 	bl	8005624 <WrByte>
 8003878:	4603      	mov	r3, r0
 800387a:	461a      	mov	r2, r3
 800387c:	7dfb      	ldrb	r3, [r7, #23]
 800387e:	4313      	orrs	r3, r2
 8003880:	75fb      	strb	r3, [r7, #23]

	/* Stop xshut bypass */
	status |= WrByte(&(p_dev->platform), 0x09, 0x04);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2204      	movs	r2, #4
 8003886:	2109      	movs	r1, #9
 8003888:	4618      	mov	r0, r3
 800388a:	f001 fecb 	bl	8005624 <WrByte>
 800388e:	4603      	mov	r3, r0
 8003890:	461a      	mov	r2, r3
 8003892:	7dfb      	ldrb	r3, [r7, #23]
 8003894:	4313      	orrs	r3, r2
 8003896:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2202      	movs	r2, #2
 800389c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80038a0:	4618      	mov	r0, r3
 80038a2:	f001 febf 	bl	8005624 <WrByte>
 80038a6:	4603      	mov	r3, r0
 80038a8:	461a      	mov	r2, r3
 80038aa:	7dfb      	ldrb	r3, [r7, #23]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	75fb      	strb	r3, [r7, #23]

	return status;
 80038b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3718      	adds	r7, #24
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <vl53lmz_check_data_ready>:

uint8_t vl53lmz_check_data_ready(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				*p_isReady)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b084      	sub	sp, #16
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
 80038c2:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 80038c4:	2300      	movs	r3, #0
 80038c6:	73fb      	strb	r3, [r7, #15]
	*p_isReady = 0;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	2200      	movs	r2, #0
 80038cc:	701a      	strb	r2, [r3, #0]

	status |= RdMulti(&(p_dev->platform), 0x0, p_dev->temp_buffer, 4);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f203 5204 	addw	r2, r3, #1284	@ 0x504
 80038d6:	2304      	movs	r3, #4
 80038d8:	2100      	movs	r1, #0
 80038da:	f001 feeb 	bl	80056b4 <RdMulti>
 80038de:	4603      	mov	r3, r0
 80038e0:	461a      	mov	r2, r3
 80038e2:	7bfb      	ldrb	r3, [r7, #15]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	73fb      	strb	r3, [r7, #15]

	if ( status == VL53LMZ_STATUS_OK ){
 80038e8:	7bfb      	ldrb	r3, [r7, #15]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d136      	bne.n	800395c <vl53lmz_check_data_ready+0xa2>
		if((p_dev->temp_buffer[0] != p_dev->streamcount)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 2504 	ldrb.w	r2, [r3, #1284]	@ 0x504
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	791b      	ldrb	r3, [r3, #4]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d020      	beq.n	800393e <vl53lmz_check_data_ready+0x84>
				&& (p_dev->temp_buffer[0] != (uint8_t)255)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 3504 	ldrb.w	r3, [r3, #1284]	@ 0x504
 8003902:	2bff      	cmp	r3, #255	@ 0xff
 8003904:	d01b      	beq.n	800393e <vl53lmz_check_data_ready+0x84>
				&& (p_dev->temp_buffer[1] == (uint8_t)0x5)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 3505 	ldrb.w	r3, [r3, #1285]	@ 0x505
 800390c:	2b05      	cmp	r3, #5
 800390e:	d116      	bne.n	800393e <vl53lmz_check_data_ready+0x84>
				&& ((p_dev->temp_buffer[2] & (uint8_t)0x5) == (uint8_t)0x5)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f893 3506 	ldrb.w	r3, [r3, #1286]	@ 0x506
 8003916:	f003 0305 	and.w	r3, r3, #5
 800391a:	2b05      	cmp	r3, #5
 800391c:	d10f      	bne.n	800393e <vl53lmz_check_data_ready+0x84>
				&& ((p_dev->temp_buffer[3] & (uint8_t)0x10) ==(uint8_t)0x10)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 3507 	ldrb.w	r3, [r3, #1287]	@ 0x507
 8003924:	f003 0310 	and.w	r3, r3, #16
 8003928:	2b00      	cmp	r3, #0
 800392a:	d008      	beq.n	800393e <vl53lmz_check_data_ready+0x84>
				)
		{
			*p_isReady = (uint8_t)1;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	2201      	movs	r2, #1
 8003930:	701a      	strb	r2, [r3, #0]
			 p_dev->streamcount = p_dev->temp_buffer[0];
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 2504 	ldrb.w	r2, [r3, #1284]	@ 0x504
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	711a      	strb	r2, [r3, #4]
 800393c:	e00e      	b.n	800395c <vl53lmz_check_data_ready+0xa2>
		}
		else
		{
			if ((p_dev->temp_buffer[3] & (uint8_t)0x80) != (uint8_t)0)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 3507 	ldrb.w	r3, [r3, #1287]	@ 0x507
 8003944:	b25b      	sxtb	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	da05      	bge.n	8003956 <vl53lmz_check_data_ready+0x9c>
			{
				status |= p_dev->temp_buffer[2];	/* Return GO2 error status */
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 2506 	ldrb.w	r2, [r3, #1286]	@ 0x506
 8003950:	7bfb      	ldrb	r3, [r7, #15]
 8003952:	4313      	orrs	r3, r2
 8003954:	73fb      	strb	r3, [r7, #15]
			}

			*p_isReady = 0;
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	2200      	movs	r2, #0
 800395a:	701a      	strb	r2, [r3, #0]
		}
	}
	return status;
 800395c:	7bfb      	ldrb	r3, [r7, #15]
}
 800395e:	4618      	mov	r0, r3
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <vl53lmz_get_ranging_data>:

uint8_t vl53lmz_get_ranging_data(
		VL53LMZ_Configuration		*p_dev,
		VL53LMZ_ResultsData		*p_results)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b088      	sub	sp, #32
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
 800396e:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 8003970:	2300      	movs	r3, #0
 8003972:	77fb      	strb	r3, [r7, #31]
	union Block_header *bh_ptr;
	uint16_t header_id, footer_id;
	uint32_t i, msize;
	status |= RdMulti(&(p_dev->platform), 0x0,
 8003974:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, p_dev->data_read_size);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f203 5204 	addw	r2, r3, #1284	@ 0x504
	status |= RdMulti(&(p_dev->platform), 0x0,
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	2100      	movs	r1, #0
 8003982:	f001 fe97 	bl	80056b4 <RdMulti>
 8003986:	4603      	mov	r3, r0
 8003988:	461a      	mov	r2, r3
 800398a:	7ffb      	ldrb	r3, [r7, #31]
 800398c:	4313      	orrs	r3, r2
 800398e:	77fb      	strb	r3, [r7, #31]
	p_dev->streamcount = p_dev->temp_buffer[0];
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f893 2504 	ldrb.w	r2, [r3, #1284]	@ 0x504
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	711a      	strb	r2, [r3, #4]
	SwapBuffer(p_dev->temp_buffer, (uint16_t)p_dev->data_read_size);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f203 5204 	addw	r2, r3, #1284	@ 0x504
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	4619      	mov	r1, r3
 80039a8:	4610      	mov	r0, r2
 80039aa:	f001 feca 	bl	8005742 <SwapBuffer>

	/* Start conversion at position 16 to avoid headers */
	for (i = (uint32_t)16; i < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
 80039ae:	2310      	movs	r3, #16
 80039b0:	61bb      	str	r3, [r7, #24]
 80039b2:	e118      	b.n	8003be6 <vl53lmz_get_ranging_data+0x280>
	{
		bh_ptr = (union Block_header *)&(p_dev->temp_buffer[i]);
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	4413      	add	r3, r2
 80039be:	3304      	adds	r3, #4
 80039c0:	60fb      	str	r3, [r7, #12]
		if ((bh_ptr->type > (uint32_t)0x1) 
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d915      	bls.n	80039fc <vl53lmz_get_ranging_data+0x96>
					&& (bh_ptr->type < (uint32_t)0xd))
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b0c      	cmp	r3, #12
 80039dc:	d80e      	bhi.n	80039fc <vl53lmz_get_ranging_data+0x96>
		{
			msize = bh_ptr->type * bh_ptr->size;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	461a      	mov	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	881b      	ldrh	r3, [r3, #0]
 80039ee:	f3c3 130b 	ubfx	r3, r3, #4, #12
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	fb02 f303 	mul.w	r3, r2, r3
 80039f8:	617b      	str	r3, [r7, #20]
 80039fa:	e005      	b.n	8003a08 <vl53lmz_get_ranging_data+0xa2>
		}
		else
		{
			msize = bh_ptr->size;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	881b      	ldrh	r3, [r3, #0]
 8003a00:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	617b      	str	r3, [r7, #20]
		}

		switch(bh_ptr->idx){
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	885b      	ldrh	r3, [r3, #2]
 8003a0c:	f24e 0284 	movw	r2, #57476	@ 0xe084
 8003a10:	4293      	cmp	r3, r2
 8003a12:	f000 80c2 	beq.w	8003b9a <vl53lmz_get_ranging_data+0x234>
 8003a16:	f24e 0284 	movw	r2, #57476	@ 0xe084
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	f300 80db 	bgt.w	8003bd6 <vl53lmz_get_ranging_data+0x270>
 8003a20:	f24e 0244 	movw	r2, #57412	@ 0xe044
 8003a24:	4293      	cmp	r3, r2
 8003a26:	f000 80a9 	beq.w	8003b7c <vl53lmz_get_ranging_data+0x216>
 8003a2a:	f24e 0244 	movw	r2, #57412	@ 0xe044
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	f300 80d1 	bgt.w	8003bd6 <vl53lmz_get_ranging_data+0x270>
 8003a34:	f64d 7244 	movw	r2, #57156	@ 0xdf44
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	f000 8090 	beq.w	8003b5e <vl53lmz_get_ranging_data+0x1f8>
 8003a3e:	f64d 7244 	movw	r2, #57156	@ 0xdf44
 8003a42:	4293      	cmp	r3, r2
 8003a44:	f300 80c7 	bgt.w	8003bd6 <vl53lmz_get_ranging_data+0x270>
 8003a48:	f64d 62c4 	movw	r2, #57028	@ 0xdec4
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d077      	beq.n	8003b40 <vl53lmz_get_ranging_data+0x1da>
 8003a50:	f64d 62c4 	movw	r2, #57028	@ 0xdec4
 8003a54:	4293      	cmp	r3, r2
 8003a56:	f300 80be 	bgt.w	8003bd6 <vl53lmz_get_ranging_data+0x270>
 8003a5a:	f64d 32c4 	movw	r2, #56260	@ 0xdbc4
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d05f      	beq.n	8003b22 <vl53lmz_get_ranging_data+0x1bc>
 8003a62:	f64d 32c4 	movw	r2, #56260	@ 0xdbc4
 8003a66:	4293      	cmp	r3, r2
 8003a68:	f300 80b5 	bgt.w	8003bd6 <vl53lmz_get_ranging_data+0x270>
 8003a6c:	f64d 3284 	movw	r2, #56196	@ 0xdb84
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d047      	beq.n	8003b04 <vl53lmz_get_ranging_data+0x19e>
 8003a74:	f64d 3284 	movw	r2, #56196	@ 0xdb84
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	f300 80ac 	bgt.w	8003bd6 <vl53lmz_get_ranging_data+0x270>
 8003a7e:	f64d 0258 	movw	r2, #55384	@ 0xd858
 8003a82:	4293      	cmp	r3, r2
 8003a84:	f000 8098 	beq.w	8003bb8 <vl53lmz_get_ranging_data+0x252>
 8003a88:	f64d 0258 	movw	r2, #55384	@ 0xd858
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	f300 80a2 	bgt.w	8003bd6 <vl53lmz_get_ranging_data+0x270>
 8003a92:	f245 52d0 	movw	r2, #21968	@ 0x55d0
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d025      	beq.n	8003ae6 <vl53lmz_get_ranging_data+0x180>
 8003a9a:	f245 52d0 	movw	r2, #21968	@ 0x55d0
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	f300 8099 	bgt.w	8003bd6 <vl53lmz_get_ranging_data+0x270>
 8003aa4:	f245 42b4 	movw	r2, #21684	@ 0x54b4
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d004      	beq.n	8003ab6 <vl53lmz_get_ranging_data+0x150>
 8003aac:	f245 42d0 	movw	r2, #21712	@ 0x54d0
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d00a      	beq.n	8003aca <vl53lmz_get_ranging_data+0x164>
				(void)memcpy(&p_results->motion_indicator,
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
				break;
#endif
			default:
				break;
 8003ab4:	e08f      	b.n	8003bd6 <vl53lmz_get_ranging_data+0x270>
						(int8_t)p_dev->temp_buffer[i + (uint32_t)12];
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	330c      	adds	r3, #12
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	4413      	add	r3, r2
 8003abe:	f893 3504 	ldrb.w	r3, [r3, #1284]	@ 0x504
 8003ac2:	b25a      	sxtb	r2, r3
				p_results->silicon_temp_degc =
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	701a      	strb	r2, [r3, #0]
				break;
 8003ac8:	e086      	b.n	8003bd8 <vl53lmz_get_ranging_data+0x272>
				(void)memcpy(p_results->ambient_per_spad,
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	1d18      	adds	r0, r3, #4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	3304      	adds	r3, #4
 8003ad2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	4413      	add	r3, r2
 8003ada:	3304      	adds	r3, #4
				(void)memcpy(p_results->ambient_per_spad,
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	4619      	mov	r1, r3
 8003ae0:	f01f fd9d 	bl	802361e <memcpy>
				break;
 8003ae4:	e078      	b.n	8003bd8 <vl53lmz_get_ranging_data+0x272>
				(void)memcpy(p_results->nb_spads_enabled,
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	3304      	adds	r3, #4
 8003af0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	4413      	add	r3, r2
 8003af8:	3304      	adds	r3, #4
				(void)memcpy(p_results->nb_spads_enabled,
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	4619      	mov	r1, r3
 8003afe:	f01f fd8e 	bl	802361e <memcpy>
				break;
 8003b02:	e069      	b.n	8003bd8 <vl53lmz_get_ranging_data+0x272>
				(void)memcpy(p_results->nb_target_detected,
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	f503 7082 	add.w	r0, r3, #260	@ 0x104
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	3304      	adds	r3, #4
 8003b0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	4413      	add	r3, r2
 8003b16:	3304      	adds	r3, #4
				(void)memcpy(p_results->nb_target_detected,
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	f01f fd7f 	bl	802361e <memcpy>
				break;
 8003b20:	e05a      	b.n	8003bd8 <vl53lmz_get_ranging_data+0x272>
				(void)memcpy(p_results->signal_per_spad,
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	f503 7011 	add.w	r0, r3, #580	@ 0x244
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	3304      	adds	r3, #4
 8003b2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	4413      	add	r3, r2
 8003b34:	3304      	adds	r3, #4
				(void)memcpy(p_results->signal_per_spad,
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	4619      	mov	r1, r3
 8003b3a:	f01f fd70 	bl	802361e <memcpy>
				break;
 8003b3e:	e04b      	b.n	8003bd8 <vl53lmz_get_ranging_data+0x272>
				(void)memcpy(p_results->range_sigma_mm,
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	f503 7051 	add.w	r0, r3, #836	@ 0x344
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	3304      	adds	r3, #4
 8003b4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	4413      	add	r3, r2
 8003b52:	3304      	adds	r3, #4
				(void)memcpy(p_results->range_sigma_mm,
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	4619      	mov	r1, r3
 8003b58:	f01f fd61 	bl	802361e <memcpy>
				break;
 8003b5c:	e03c      	b.n	8003bd8 <vl53lmz_get_ranging_data+0x272>
				(void)memcpy(p_results->distance_mm,
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	f503 7071 	add.w	r0, r3, #964	@ 0x3c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	3304      	adds	r3, #4
 8003b68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	4413      	add	r3, r2
 8003b70:	3304      	adds	r3, #4
				(void)memcpy(p_results->distance_mm,
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	4619      	mov	r1, r3
 8003b76:	f01f fd52 	bl	802361e <memcpy>
				break;
 8003b7a:	e02d      	b.n	8003bd8 <vl53lmz_get_ranging_data+0x272>
				(void)memcpy(p_results->reflectance,
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	f203 4044 	addw	r0, r3, #1092	@ 0x444
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	3304      	adds	r3, #4
 8003b86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	3304      	adds	r3, #4
				(void)memcpy(p_results->reflectance,
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	4619      	mov	r1, r3
 8003b94:	f01f fd43 	bl	802361e <memcpy>
				break;
 8003b98:	e01e      	b.n	8003bd8 <vl53lmz_get_ranging_data+0x272>
				(void)memcpy(p_results->target_status,
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	f203 4084 	addw	r0, r3, #1156	@ 0x484
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	3304      	adds	r3, #4
 8003ba4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	4413      	add	r3, r2
 8003bac:	3304      	adds	r3, #4
				(void)memcpy(p_results->target_status,
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	f01f fd34 	bl	802361e <memcpy>
				break;
 8003bb6:	e00f      	b.n	8003bd8 <vl53lmz_get_ranging_data+0x272>
				(void)memcpy(&p_results->motion_indicator,
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	f203 40c4 	addw	r0, r3, #1220	@ 0x4c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	3304      	adds	r3, #4
 8003bc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	4413      	add	r3, r2
 8003bca:	3304      	adds	r3, #4
				(void)memcpy(&p_results->motion_indicator,
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	4619      	mov	r1, r3
 8003bd0:	f01f fd25 	bl	802361e <memcpy>
				break;
 8003bd4:	e000      	b.n	8003bd8 <vl53lmz_get_ranging_data+0x272>
				break;
 8003bd6:	bf00      	nop
		}
		i += msize;
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	4413      	add	r3, r2
 8003bde:	61bb      	str	r3, [r7, #24]
	for (i = (uint32_t)16; i < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	3304      	adds	r3, #4
 8003be4:	61bb      	str	r3, [r7, #24]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	f4ff aee1 	bcc.w	80039b4 <vl53lmz_get_ranging_data+0x4e>

#endif

	/* Check if footer id and header id are matching. This allows to detect
	 * corrupted frames */
	header_id = ((uint16_t)(p_dev->temp_buffer[0x8])<<8) & 0xFF00U;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 350c 	ldrb.w	r3, [r3, #1292]	@ 0x50c
 8003bf8:	021b      	lsls	r3, r3, #8
 8003bfa:	827b      	strh	r3, [r7, #18]
	header_id |= ((uint16_t)(p_dev->temp_buffer[0x9])) & 0x00FFU;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f893 350d 	ldrb.w	r3, [r3, #1293]	@ 0x50d
 8003c02:	461a      	mov	r2, r3
 8003c04:	8a7b      	ldrh	r3, [r7, #18]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	827b      	strh	r3, [r7, #18]

	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	689b      	ldr	r3, [r3, #8]
		- (uint32_t)4]) << 8) & 0xFF00U;
 8003c0e:	3b04      	subs	r3, #4
	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	4413      	add	r3, r2
 8003c14:	f893 3504 	ldrb.w	r3, [r3, #1284]	@ 0x504
 8003c18:	021b      	lsls	r3, r3, #8
 8003c1a:	823b      	strh	r3, [r7, #16]
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
		- (uint32_t)3])) & 0xFFU;
 8003c20:	3b03      	subs	r3, #3
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	4413      	add	r3, r2
 8003c26:	f893 3504 	ldrb.w	r3, [r3, #1284]	@ 0x504
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	8a3b      	ldrh	r3, [r7, #16]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	823b      	strh	r3, [r7, #16]

	if(header_id != footer_id)
 8003c32:	8a7a      	ldrh	r2, [r7, #18]
 8003c34:	8a3b      	ldrh	r3, [r7, #16]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d003      	beq.n	8003c42 <vl53lmz_get_ranging_data+0x2dc>
	{
		status |= VL53LMZ_STATUS_CORRUPTED_FRAME;
 8003c3a:	7ffb      	ldrb	r3, [r7, #31]
 8003c3c:	f043 0302 	orr.w	r3, r3, #2
 8003c40:	77fb      	strb	r3, [r7, #31]
	}

	return status;
 8003c42:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3720      	adds	r7, #32
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <vl53lmz_get_resolution>:

uint8_t vl53lmz_get_resolution(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				*p_resolution)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 8003c56:	2300      	movs	r3, #0
 8003c58:	73fb      	strb	r3, [r7, #15]

	status |= vl53lmz_dci_read_data(p_dev, p_dev->temp_buffer,
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f203 5104 	addw	r1, r3, #1284	@ 0x504
 8003c60:	2308      	movs	r3, #8
 8003c62:	f245 4250 	movw	r2, #21584	@ 0x5450
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 fc34 	bl	80044d4 <vl53lmz_dci_read_data>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	461a      	mov	r2, r3
 8003c70:	7bfb      	ldrb	r3, [r7, #15]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	73fb      	strb	r3, [r7, #15]
			VL53LMZ_DCI_ZONE_CONFIG, 8);
	*p_resolution = p_dev->temp_buffer[0x00]*p_dev->temp_buffer[0x01];
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 2504 	ldrb.w	r2, [r3, #1284]	@ 0x504
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 3505 	ldrb.w	r3, [r3, #1285]	@ 0x505
 8003c82:	fb12 f303 	smulbb	r3, r2, r3
 8003c86:	b2da      	uxtb	r2, r3
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	701a      	strb	r2, [r3, #0]

	return status;
 8003c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <vl53lmz_set_resolution>:


uint8_t vl53lmz_set_resolution(
		VL53LMZ_Configuration		 *p_dev,
		uint8_t				resolution)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b084      	sub	sp, #16
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53LMZ_STATUS_OK;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	73fb      	strb	r3, [r7, #15]

	switch(resolution){
 8003ca6:	78fb      	ldrb	r3, [r7, #3]
 8003ca8:	2b10      	cmp	r3, #16
 8003caa:	d002      	beq.n	8003cb2 <vl53lmz_set_resolution+0x1c>
 8003cac:	2b40      	cmp	r3, #64	@ 0x40
 8003cae:	d055      	beq.n	8003d5c <vl53lmz_set_resolution+0xc6>
 8003cb0:	e0a9      	b.n	8003e06 <vl53lmz_set_resolution+0x170>
		case VL53LMZ_RESOLUTION_4X4:
			status |= vl53lmz_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f203 5104 	addw	r1, r3, #1284	@ 0x504
			status |= vl53lmz_dci_read_data(p_dev,
 8003cb8:	2310      	movs	r3, #16
 8003cba:	f64a 5238 	movw	r2, #44344	@ 0xad38
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 fc08 	bl	80044d4 <vl53lmz_dci_read_data>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	7bfb      	ldrb	r3, [r7, #15]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 64;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2240      	movs	r2, #64	@ 0x40
 8003cd2:	f883 2508 	strb.w	r2, [r3, #1288]	@ 0x508
			p_dev->temp_buffer[0x06] = 64;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2240      	movs	r2, #64	@ 0x40
 8003cda:	f883 250a 	strb.w	r2, [r3, #1290]	@ 0x50a
			p_dev->temp_buffer[0x09] = 4;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2204      	movs	r2, #4
 8003ce2:	f883 250d 	strb.w	r2, [r3, #1293]	@ 0x50d
			status |= vl53lmz_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f203 5104 	addw	r1, r3, #1284	@ 0x504
			status |= vl53lmz_dci_write_data(p_dev,
 8003cec:	2310      	movs	r3, #16
 8003cee:	f64a 5238 	movw	r2, #44344	@ 0xad38
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 fc78 	bl	80045e8 <vl53lmz_dci_write_data>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	7bfb      	ldrb	r3, [r7, #15]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_DSS_CONFIG, 16);

			status |= vl53lmz_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f203 5104 	addw	r1, r3, #1284	@ 0x504
			status |= vl53lmz_dci_read_data(p_dev,
 8003d08:	2308      	movs	r3, #8
 8003d0a:	f245 4250 	movw	r2, #21584	@ 0x5450
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 fbe0 	bl	80044d4 <vl53lmz_dci_read_data>
 8003d14:	4603      	mov	r3, r0
 8003d16:	461a      	mov	r2, r3
 8003d18:	7bfb      	ldrb	r3, [r7, #15]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 4;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2204      	movs	r2, #4
 8003d22:	f883 2504 	strb.w	r2, [r3, #1284]	@ 0x504
			p_dev->temp_buffer[0x01] = 4;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2204      	movs	r2, #4
 8003d2a:	f883 2505 	strb.w	r2, [r3, #1285]	@ 0x505
			p_dev->temp_buffer[0x04] = 8;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2208      	movs	r2, #8
 8003d32:	f883 2508 	strb.w	r2, [r3, #1288]	@ 0x508
			p_dev->temp_buffer[0x05] = 8;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2208      	movs	r2, #8
 8003d3a:	f883 2509 	strb.w	r2, [r3, #1289]	@ 0x509
			status |= vl53lmz_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f203 5104 	addw	r1, r3, #1284	@ 0x504
			status |= vl53lmz_dci_write_data(p_dev,
 8003d44:	2308      	movs	r3, #8
 8003d46:	f245 4250 	movw	r2, #21584	@ 0x5450
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 fc4c 	bl	80045e8 <vl53lmz_dci_write_data>
 8003d50:	4603      	mov	r3, r0
 8003d52:	461a      	mov	r2, r3
 8003d54:	7bfb      	ldrb	r3, [r7, #15]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_ZONE_CONFIG, 8);
			break;
 8003d5a:	e057      	b.n	8003e0c <vl53lmz_set_resolution+0x176>

		case VL53LMZ_RESOLUTION_8X8:
			status |= vl53lmz_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f203 5104 	addw	r1, r3, #1284	@ 0x504
			status |= vl53lmz_dci_read_data(p_dev,
 8003d62:	2310      	movs	r3, #16
 8003d64:	f64a 5238 	movw	r2, #44344	@ 0xad38
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 fbb3 	bl	80044d4 <vl53lmz_dci_read_data>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	461a      	mov	r2, r3
 8003d72:	7bfb      	ldrb	r3, [r7, #15]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 16;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2210      	movs	r2, #16
 8003d7c:	f883 2508 	strb.w	r2, [r3, #1288]	@ 0x508
			p_dev->temp_buffer[0x06] = 16;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2210      	movs	r2, #16
 8003d84:	f883 250a 	strb.w	r2, [r3, #1290]	@ 0x50a
			p_dev->temp_buffer[0x09] = 1;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 250d 	strb.w	r2, [r3, #1293]	@ 0x50d
			status |= vl53lmz_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f203 5104 	addw	r1, r3, #1284	@ 0x504
			status |= vl53lmz_dci_write_data(p_dev,
 8003d96:	2310      	movs	r3, #16
 8003d98:	f64a 5238 	movw	r2, #44344	@ 0xad38
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 fc23 	bl	80045e8 <vl53lmz_dci_write_data>
 8003da2:	4603      	mov	r3, r0
 8003da4:	461a      	mov	r2, r3
 8003da6:	7bfb      	ldrb	r3, [r7, #15]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_DSS_CONFIG, 16);

			status |= vl53lmz_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f203 5104 	addw	r1, r3, #1284	@ 0x504
			status |= vl53lmz_dci_read_data(p_dev,
 8003db2:	2308      	movs	r3, #8
 8003db4:	f245 4250 	movw	r2, #21584	@ 0x5450
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 fb8b 	bl	80044d4 <vl53lmz_dci_read_data>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	7bfb      	ldrb	r3, [r7, #15]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 8;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2208      	movs	r2, #8
 8003dcc:	f883 2504 	strb.w	r2, [r3, #1284]	@ 0x504
			p_dev->temp_buffer[0x01] = 8;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2208      	movs	r2, #8
 8003dd4:	f883 2505 	strb.w	r2, [r3, #1285]	@ 0x505
			p_dev->temp_buffer[0x04] = 4;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2204      	movs	r2, #4
 8003ddc:	f883 2508 	strb.w	r2, [r3, #1288]	@ 0x508
			p_dev->temp_buffer[0x05] = 4;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2204      	movs	r2, #4
 8003de4:	f883 2509 	strb.w	r2, [r3, #1289]	@ 0x509
			status |= vl53lmz_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f203 5104 	addw	r1, r3, #1284	@ 0x504
			status |= vl53lmz_dci_write_data(p_dev,
 8003dee:	2308      	movs	r3, #8
 8003df0:	f245 4250 	movw	r2, #21584	@ 0x5450
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 fbf7 	bl	80045e8 <vl53lmz_dci_write_data>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	7bfb      	ldrb	r3, [r7, #15]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_ZONE_CONFIG, 8);

			break;
 8003e04:	e002      	b.n	8003e0c <vl53lmz_set_resolution+0x176>

		default:
			status = VL53LMZ_STATUS_INVALID_PARAM;
 8003e06:	237f      	movs	r3, #127	@ 0x7f
 8003e08:	73fb      	strb	r3, [r7, #15]
			break;
 8003e0a:	bf00      	nop
		}

	status |= _vl53lmz_send_offset_data(p_dev, resolution);
 8003e0c:	78fb      	ldrb	r3, [r7, #3]
 8003e0e:	4619      	mov	r1, r3
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f7fe fb10 	bl	8002436 <_vl53lmz_send_offset_data>
 8003e16:	4603      	mov	r3, r0
 8003e18:	461a      	mov	r2, r3
 8003e1a:	7bfb      	ldrb	r3, [r7, #15]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	73fb      	strb	r3, [r7, #15]
	status |= _vl53lmz_send_xtalk_data(p_dev, resolution);
 8003e20:	78fb      	ldrb	r3, [r7, #3]
 8003e22:	4619      	mov	r1, r3
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f7fe fcd3 	bl	80027d0 <_vl53lmz_send_xtalk_data>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	7bfb      	ldrb	r3, [r7, #15]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	73fb      	strb	r3, [r7, #15]

	return status;
 8003e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <vl53lmz_get_ranging_frequency_hz>:

uint8_t vl53lmz_get_ranging_frequency_hz(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				*p_frequency_hz)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b084      	sub	sp, #16
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
 8003e46:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	73fb      	strb	r3, [r7, #15]

	status |= vl53lmz_dci_read_data(p_dev, (uint8_t*)p_dev->temp_buffer,
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f203 5104 	addw	r1, r3, #1284	@ 0x504
 8003e52:	2304      	movs	r3, #4
 8003e54:	f245 4258 	movw	r2, #21592	@ 0x5458
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 fb3b 	bl	80044d4 <vl53lmz_dci_read_data>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	461a      	mov	r2, r3
 8003e62:	7bfb      	ldrb	r3, [r7, #15]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	73fb      	strb	r3, [r7, #15]
			VL53LMZ_DCI_FREQ_HZ, 4);
	*p_frequency_hz = p_dev->temp_buffer[0x01];
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f893 2505 	ldrb.w	r2, [r3, #1285]	@ 0x505
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	701a      	strb	r2, [r3, #0]

	return status;
 8003e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3710      	adds	r7, #16
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <vl53lmz_set_ranging_frequency_hz>:

uint8_t vl53lmz_set_ranging_frequency_hz(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				frequency_hz)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b088      	sub	sp, #32
 8003e80:	af04      	add	r7, sp, #16
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	460b      	mov	r3, r1
 8003e86:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53LMZ_STATUS_OK;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	73fb      	strb	r3, [r7, #15]

	status |= vl53lmz_dci_replace_data(p_dev, p_dev->temp_buffer,
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f203 5104 	addw	r1, r3, #1284	@ 0x504
 8003e92:	2301      	movs	r3, #1
 8003e94:	9302      	str	r3, [sp, #8]
 8003e96:	2301      	movs	r3, #1
 8003e98:	9301      	str	r3, [sp, #4]
 8003e9a:	1cfb      	adds	r3, r7, #3
 8003e9c:	9300      	str	r3, [sp, #0]
 8003e9e:	2304      	movs	r3, #4
 8003ea0:	f245 4258 	movw	r2, #21592	@ 0x5458
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 fc3f 	bl	8004728 <vl53lmz_dci_replace_data>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	461a      	mov	r2, r3
 8003eae:	7bfb      	ldrb	r3, [r7, #15]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	73fb      	strb	r3, [r7, #15]
					VL53LMZ_DCI_FREQ_HZ, 4,
					(uint8_t*)&frequency_hz, 1, 0x01);

	return status;
 8003eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <vl53lmz_get_integration_time_ms>:

uint8_t vl53lmz_get_integration_time_ms(
		VL53LMZ_Configuration		*p_dev,
		uint32_t			*p_time_ms)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b084      	sub	sp, #16
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
 8003ec6:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	73fb      	strb	r3, [r7, #15]

	status |= vl53lmz_dci_read_data(p_dev, (uint8_t*)p_dev->temp_buffer,
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f203 5104 	addw	r1, r3, #1284	@ 0x504
 8003ed2:	2314      	movs	r3, #20
 8003ed4:	f245 425c 	movw	r2, #21596	@ 0x545c
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 fafb 	bl	80044d4 <vl53lmz_dci_read_data>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	7bfb      	ldrb	r3, [r7, #15]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	73fb      	strb	r3, [r7, #15]
			VL53LMZ_DCI_INT_TIME, 20);

	(void)memcpy(p_time_ms, &(p_dev->temp_buffer[0x0]), 4);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f203 5304 	addw	r3, r3, #1284	@ 0x504
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	601a      	str	r2, [r3, #0]
	*p_time_ms /= (uint32_t)1000;
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a05      	ldr	r2, [pc, #20]	@ (8003f10 <vl53lmz_get_integration_time_ms+0x52>)
 8003efc:	fba2 2303 	umull	r2, r3, r2, r3
 8003f00:	099a      	lsrs	r2, r3, #6
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	601a      	str	r2, [r3, #0]

	return status;
 8003f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	10624dd3 	.word	0x10624dd3

08003f14 <vl53lmz_set_integration_time_ms>:

uint8_t vl53lmz_set_integration_time_ms(
		VL53LMZ_Configuration		*p_dev,
		uint32_t			integration_time_ms)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b088      	sub	sp, #32
 8003f18:	af04      	add	r7, sp, #16
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	73fb      	strb	r3, [r7, #15]
		uint32_t integration = integration_time_ms;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	60bb      	str	r3, [r7, #8]

	/* Integration time must be between 2ms and 1000ms */
	if((integration < (uint32_t)2)
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d903      	bls.n	8003f34 <vl53lmz_set_integration_time_ms+0x20>
		   || (integration > (uint32_t)1000))
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003f32:	d904      	bls.n	8003f3e <vl53lmz_set_integration_time_ms+0x2a>
	{
		status |= VL53LMZ_STATUS_INVALID_PARAM;
 8003f34:	7bfb      	ldrb	r3, [r7, #15]
 8003f36:	f043 037f 	orr.w	r3, r3, #127	@ 0x7f
 8003f3a:	73fb      	strb	r3, [r7, #15]
 8003f3c:	e01a      	b.n	8003f74 <vl53lmz_set_integration_time_ms+0x60>
	}else
	{
		integration *= (uint32_t)1000;
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003f44:	fb02 f303 	mul.w	r3, r2, r3
 8003f48:	60bb      	str	r3, [r7, #8]

		status |= vl53lmz_dci_replace_data(p_dev, p_dev->temp_buffer,
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f203 5104 	addw	r1, r3, #1284	@ 0x504
 8003f50:	2300      	movs	r3, #0
 8003f52:	9302      	str	r3, [sp, #8]
 8003f54:	2304      	movs	r3, #4
 8003f56:	9301      	str	r3, [sp, #4]
 8003f58:	f107 0308 	add.w	r3, r7, #8
 8003f5c:	9300      	str	r3, [sp, #0]
 8003f5e:	2314      	movs	r3, #20
 8003f60:	f245 425c 	movw	r2, #21596	@ 0x545c
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 fbdf 	bl	8004728 <vl53lmz_dci_replace_data>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	7bfb      	ldrb	r3, [r7, #15]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	73fb      	strb	r3, [r7, #15]
				VL53LMZ_DCI_INT_TIME, 20,
				(uint8_t*)&integration, 4, 0x00);
	}

	return status;
 8003f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <vl53lmz_get_sharpener_percent>:

uint8_t vl53lmz_get_sharpener_percent(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				*p_sharpener_percent)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b084      	sub	sp, #16
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
 8003f86:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	73fb      	strb	r3, [r7, #15]

	status |= vl53lmz_dci_read_data(p_dev,p_dev->temp_buffer,
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f203 5104 	addw	r1, r3, #1284	@ 0x504
 8003f92:	2310      	movs	r3, #16
 8003f94:	f64a 62d8 	movw	r2, #44760	@ 0xaed8
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 fa9b 	bl	80044d4 <vl53lmz_dci_read_data>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	7bfb      	ldrb	r3, [r7, #15]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	73fb      	strb	r3, [r7, #15]
			VL53LMZ_DCI_SHARPENER, 16);

	*p_sharpener_percent = (p_dev->temp_buffer[0xD]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f893 3511 	ldrb.w	r3, [r3, #1297]	@ 0x511
 8003fae:	461a      	mov	r2, r3
								*(uint8_t)100)/(uint8_t)255;
 8003fb0:	2364      	movs	r3, #100	@ 0x64
 8003fb2:	fb02 f303 	mul.w	r3, r2, r3
 8003fb6:	4a07      	ldr	r2, [pc, #28]	@ (8003fd4 <vl53lmz_get_sharpener_percent+0x56>)
 8003fb8:	fb82 1203 	smull	r1, r2, r2, r3
 8003fbc:	441a      	add	r2, r3
 8003fbe:	11d2      	asrs	r2, r2, #7
 8003fc0:	17db      	asrs	r3, r3, #31
 8003fc2:	1ad3      	subs	r3, r2, r3
	*p_sharpener_percent = (p_dev->temp_buffer[0xD]
 8003fc4:	b2da      	uxtb	r2, r3
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	701a      	strb	r2, [r3, #0]

	return status;
 8003fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	80808081 	.word	0x80808081

08003fd8 <vl53lmz_set_sharpener_percent>:

uint8_t vl53lmz_set_sharpener_percent(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				sharpener_percent)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b088      	sub	sp, #32
 8003fdc:	af04      	add	r7, sp, #16
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53LMZ_STATUS_OK;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	73fb      	strb	r3, [r7, #15]
		uint8_t sharpener;

	if(sharpener_percent >= (uint8_t)100)
 8003fe8:	78fb      	ldrb	r3, [r7, #3]
 8003fea:	2b63      	cmp	r3, #99	@ 0x63
 8003fec:	d904      	bls.n	8003ff8 <vl53lmz_set_sharpener_percent+0x20>
	{
		status |= VL53LMZ_STATUS_INVALID_PARAM;
 8003fee:	7bfb      	ldrb	r3, [r7, #15]
 8003ff0:	f043 037f 	orr.w	r3, r3, #127	@ 0x7f
 8003ff4:	73fb      	strb	r3, [r7, #15]
 8003ff6:	e020      	b.n	800403a <vl53lmz_set_sharpener_percent+0x62>
	}
	else
	{
		sharpener = (sharpener_percent*(uint8_t)255)/(uint8_t)100;
 8003ff8:	78fa      	ldrb	r2, [r7, #3]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	021b      	lsls	r3, r3, #8
 8003ffe:	1a9b      	subs	r3, r3, r2
 8004000:	4a10      	ldr	r2, [pc, #64]	@ (8004044 <vl53lmz_set_sharpener_percent+0x6c>)
 8004002:	fb82 1203 	smull	r1, r2, r2, r3
 8004006:	1152      	asrs	r2, r2, #5
 8004008:	17db      	asrs	r3, r3, #31
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	b2db      	uxtb	r3, r3
 800400e:	73bb      	strb	r3, [r7, #14]
		status |= vl53lmz_dci_replace_data(p_dev, p_dev->temp_buffer,
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f203 5104 	addw	r1, r3, #1284	@ 0x504
 8004016:	230d      	movs	r3, #13
 8004018:	9302      	str	r3, [sp, #8]
 800401a:	2301      	movs	r3, #1
 800401c:	9301      	str	r3, [sp, #4]
 800401e:	f107 030e 	add.w	r3, r7, #14
 8004022:	9300      	str	r3, [sp, #0]
 8004024:	2310      	movs	r3, #16
 8004026:	f64a 62d8 	movw	r2, #44760	@ 0xaed8
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 fb7c 	bl	8004728 <vl53lmz_dci_replace_data>
 8004030:	4603      	mov	r3, r0
 8004032:	461a      	mov	r2, r3
 8004034:	7bfb      	ldrb	r3, [r7, #15]
 8004036:	4313      	orrs	r3, r2
 8004038:	73fb      	strb	r3, [r7, #15]
				VL53LMZ_DCI_SHARPENER, 16,
								(uint8_t*)&sharpener, 1, 0xD);
	}

	return status;
 800403a:	7bfb      	ldrb	r3, [r7, #15]
}
 800403c:	4618      	mov	r0, r3
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	51eb851f 	.word	0x51eb851f

08004048 <vl53lmz_get_target_order>:

uint8_t vl53lmz_get_target_order(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				*p_target_order)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 8004052:	2300      	movs	r3, #0
 8004054:	73fb      	strb	r3, [r7, #15]

	status |= vl53lmz_dci_read_data(p_dev, (uint8_t*)p_dev->temp_buffer,
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f203 5104 	addw	r1, r3, #1284	@ 0x504
 800405c:	2304      	movs	r3, #4
 800405e:	f64a 6264 	movw	r2, #44644	@ 0xae64
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 fa36 	bl	80044d4 <vl53lmz_dci_read_data>
 8004068:	4603      	mov	r3, r0
 800406a:	461a      	mov	r2, r3
 800406c:	7bfb      	ldrb	r3, [r7, #15]
 800406e:	4313      	orrs	r3, r2
 8004070:	73fb      	strb	r3, [r7, #15]
			VL53LMZ_DCI_TARGET_ORDER, 4);
	*p_target_order = (uint8_t)p_dev->temp_buffer[0x0];
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 2504 	ldrb.w	r2, [r3, #1284]	@ 0x504
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	701a      	strb	r2, [r3, #0]

	return status;
 800407c:	7bfb      	ldrb	r3, [r7, #15]
}
 800407e:	4618      	mov	r0, r3
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <vl53lmz_set_target_order>:

uint8_t vl53lmz_set_target_order(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				target_order)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b088      	sub	sp, #32
 800408a:	af04      	add	r7, sp, #16
 800408c:	6078      	str	r0, [r7, #4]
 800408e:	460b      	mov	r3, r1
 8004090:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53LMZ_STATUS_OK;
 8004092:	2300      	movs	r3, #0
 8004094:	73fb      	strb	r3, [r7, #15]

	if((target_order == (uint8_t)VL53LMZ_TARGET_ORDER_CLOSEST)
 8004096:	78fb      	ldrb	r3, [r7, #3]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d002      	beq.n	80040a2 <vl53lmz_set_target_order+0x1c>
		|| (target_order == (uint8_t)VL53LMZ_TARGET_ORDER_STRONGEST))
 800409c:	78fb      	ldrb	r3, [r7, #3]
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d114      	bne.n	80040cc <vl53lmz_set_target_order+0x46>
	{
		status |= vl53lmz_dci_replace_data(p_dev, p_dev->temp_buffer,
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f203 5104 	addw	r1, r3, #1284	@ 0x504
 80040a8:	2300      	movs	r3, #0
 80040aa:	9302      	str	r3, [sp, #8]
 80040ac:	2301      	movs	r3, #1
 80040ae:	9301      	str	r3, [sp, #4]
 80040b0:	1cfb      	adds	r3, r7, #3
 80040b2:	9300      	str	r3, [sp, #0]
 80040b4:	2304      	movs	r3, #4
 80040b6:	f64a 6264 	movw	r2, #44644	@ 0xae64
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 fb34 	bl	8004728 <vl53lmz_dci_replace_data>
 80040c0:	4603      	mov	r3, r0
 80040c2:	461a      	mov	r2, r3
 80040c4:	7bfb      	ldrb	r3, [r7, #15]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	73fb      	strb	r3, [r7, #15]
				VL53LMZ_DCI_TARGET_ORDER, 4,
								(uint8_t*)&target_order, 1, 0x0);
 80040ca:	e003      	b.n	80040d4 <vl53lmz_set_target_order+0x4e>
	}else
	{
		status |= VL53LMZ_STATUS_INVALID_PARAM;
 80040cc:	7bfb      	ldrb	r3, [r7, #15]
 80040ce:	f043 037f 	orr.w	r3, r3, #127	@ 0x7f
 80040d2:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80040d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <vl53lmz_get_ranging_mode>:

uint8_t vl53lmz_get_ranging_mode(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				*p_ranging_mode)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b084      	sub	sp, #16
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
 80040e6:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 80040e8:	2300      	movs	r3, #0
 80040ea:	73fb      	strb	r3, [r7, #15]

	status |= vl53lmz_dci_read_data(p_dev, p_dev->temp_buffer,
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f203 5104 	addw	r1, r3, #1284	@ 0x504
 80040f2:	2308      	movs	r3, #8
 80040f4:	f64a 5230 	movw	r2, #44336	@ 0xad30
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 f9eb 	bl	80044d4 <vl53lmz_dci_read_data>
 80040fe:	4603      	mov	r3, r0
 8004100:	461a      	mov	r2, r3
 8004102:	7bfb      	ldrb	r3, [r7, #15]
 8004104:	4313      	orrs	r3, r2
 8004106:	73fb      	strb	r3, [r7, #15]
			VL53LMZ_DCI_RANGING_MODE, 8);

	if(p_dev->temp_buffer[0x01] == (uint8_t)0x1)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f893 3505 	ldrb.w	r3, [r3, #1285]	@ 0x505
 800410e:	2b01      	cmp	r3, #1
 8004110:	d103      	bne.n	800411a <vl53lmz_get_ranging_mode+0x3c>
	{
		*p_ranging_mode = VL53LMZ_RANGING_MODE_CONTINUOUS;
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	2201      	movs	r2, #1
 8004116:	701a      	strb	r2, [r3, #0]
 8004118:	e002      	b.n	8004120 <vl53lmz_get_ranging_mode+0x42>
	}
	else
	{
		*p_ranging_mode = VL53LMZ_RANGING_MODE_AUTONOMOUS;
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	2203      	movs	r2, #3
 800411e:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8004120:	7bfb      	ldrb	r3, [r7, #15]
}
 8004122:	4618      	mov	r0, r3
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <vl53lmz_set_ranging_mode>:

uint8_t vl53lmz_set_ranging_mode(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				ranging_mode)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b084      	sub	sp, #16
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
 8004132:	460b      	mov	r3, r1
 8004134:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53LMZ_STATUS_OK;
 8004136:	2300      	movs	r3, #0
 8004138:	73fb      	strb	r3, [r7, #15]
	uint32_t single_range = 0x00;
 800413a:	2300      	movs	r3, #0
 800413c:	60bb      	str	r3, [r7, #8]

	status |= vl53lmz_dci_read_data(p_dev, p_dev->temp_buffer,
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f203 5104 	addw	r1, r3, #1284	@ 0x504
 8004144:	2308      	movs	r3, #8
 8004146:	f64a 5230 	movw	r2, #44336	@ 0xad30
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 f9c2 	bl	80044d4 <vl53lmz_dci_read_data>
 8004150:	4603      	mov	r3, r0
 8004152:	461a      	mov	r2, r3
 8004154:	7bfb      	ldrb	r3, [r7, #15]
 8004156:	4313      	orrs	r3, r2
 8004158:	73fb      	strb	r3, [r7, #15]
			VL53LMZ_DCI_RANGING_MODE, 8);

	switch(ranging_mode)
 800415a:	78fb      	ldrb	r3, [r7, #3]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d002      	beq.n	8004166 <vl53lmz_set_ranging_mode+0x3c>
 8004160:	2b03      	cmp	r3, #3
 8004162:	d00b      	beq.n	800417c <vl53lmz_set_ranging_mode+0x52>
 8004164:	e015      	b.n	8004192 <vl53lmz_set_ranging_mode+0x68>
	{
		case VL53LMZ_RANGING_MODE_CONTINUOUS:
			p_dev->temp_buffer[0x01] = 0x1;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 2505 	strb.w	r2, [r3, #1285]	@ 0x505
			p_dev->temp_buffer[0x03] = 0x3;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2203      	movs	r2, #3
 8004172:	f883 2507 	strb.w	r2, [r3, #1287]	@ 0x507
			single_range = 0x00;
 8004176:	2300      	movs	r3, #0
 8004178:	60bb      	str	r3, [r7, #8]
			break;
 800417a:	e00d      	b.n	8004198 <vl53lmz_set_ranging_mode+0x6e>

		case VL53LMZ_RANGING_MODE_AUTONOMOUS:
			p_dev->temp_buffer[0x01] = 0x3;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2203      	movs	r2, #3
 8004180:	f883 2505 	strb.w	r2, [r3, #1285]	@ 0x505
			p_dev->temp_buffer[0x03] = 0x2;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2202      	movs	r2, #2
 8004188:	f883 2507 	strb.w	r2, [r3, #1287]	@ 0x507
			single_range = 0x01;
 800418c:	2301      	movs	r3, #1
 800418e:	60bb      	str	r3, [r7, #8]
			break;
 8004190:	e002      	b.n	8004198 <vl53lmz_set_ranging_mode+0x6e>

		default:
			status = VL53LMZ_STATUS_INVALID_PARAM;
 8004192:	237f      	movs	r3, #127	@ 0x7f
 8004194:	73fb      	strb	r3, [r7, #15]
			break;
 8004196:	bf00      	nop
	}

	status |= vl53lmz_dci_write_data(p_dev, p_dev->temp_buffer,
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f203 5104 	addw	r1, r3, #1284	@ 0x504
 800419e:	2308      	movs	r3, #8
 80041a0:	f64a 5230 	movw	r2, #44336	@ 0xad30
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 fa1f 	bl	80045e8 <vl53lmz_dci_write_data>
 80041aa:	4603      	mov	r3, r0
 80041ac:	461a      	mov	r2, r3
 80041ae:	7bfb      	ldrb	r3, [r7, #15]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	73fb      	strb	r3, [r7, #15]
			VL53LMZ_DCI_RANGING_MODE, (uint16_t)8);

	status |= vl53lmz_dci_write_data(p_dev, (uint8_t*)&single_range,
 80041b4:	f107 0108 	add.w	r1, r7, #8
 80041b8:	2304      	movs	r3, #4
 80041ba:	f64d 1264 	movw	r2, #55652	@ 0xd964
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 fa12 	bl	80045e8 <vl53lmz_dci_write_data>
 80041c4:	4603      	mov	r3, r0
 80041c6:	461a      	mov	r2, r3
 80041c8:	7bfb      	ldrb	r3, [r7, #15]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	73fb      	strb	r3, [r7, #15]
			VL53LMZ_DCI_SINGLE_RANGE,
						(uint16_t)sizeof(single_range));

	return status;
 80041ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <vl53lmz_enable_internal_cp>:

uint8_t vl53lmz_enable_internal_cp(
		VL53LMZ_Configuration *p_dev)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b088      	sub	sp, #32
 80041dc:	af04      	add	r7, sp, #16
 80041de:	6078      	str	r0, [r7, #4]
	uint8_t status = VL53LMZ_STATUS_OK;
 80041e0:	2300      	movs	r3, #0
 80041e2:	73fb      	strb	r3, [r7, #15]
	uint8_t vcsel_bootup_fsm = 1;
 80041e4:	2301      	movs	r3, #1
 80041e6:	73bb      	strb	r3, [r7, #14]
	uint8_t analog_dynamic_pad_0 = 0;
 80041e8:	2300      	movs	r3, #0
 80041ea:	737b      	strb	r3, [r7, #13]

	if 	( p_dev->revision_id==(uint8_t)REVISION_L8 )
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80041f2:	f893 33ce 	ldrb.w	r3, [r3, #974]	@ 0x3ce
 80041f6:	2b0c      	cmp	r3, #12
 80041f8:	d101      	bne.n	80041fe <vl53lmz_enable_internal_cp+0x26>
		return( VL53LMZ_STATUS_FUNC_NOT_AVAILABLE );
 80041fa:	23fe      	movs	r3, #254	@ 0xfe
 80041fc:	e02a      	b.n	8004254 <vl53lmz_enable_internal_cp+0x7c>

	status |= vl53lmz_dci_replace_data(p_dev, p_dev->temp_buffer,
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f203 5104 	addw	r1, r3, #1284	@ 0x504
 8004204:	230a      	movs	r3, #10
 8004206:	9302      	str	r3, [sp, #8]
 8004208:	2301      	movs	r3, #1
 800420a:	9301      	str	r3, [sp, #4]
 800420c:	f107 030e 	add.w	r3, r7, #14
 8004210:	9300      	str	r3, [sp, #0]
 8004212:	2310      	movs	r3, #16
 8004214:	f24b 329c 	movw	r2, #45980	@ 0xb39c
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 fa85 	bl	8004728 <vl53lmz_dci_replace_data>
 800421e:	4603      	mov	r3, r0
 8004220:	461a      	mov	r2, r3
 8004222:	7bfb      	ldrb	r3, [r7, #15]
 8004224:	4313      	orrs	r3, r2
 8004226:	73fb      	strb	r3, [r7, #15]
			VL53LMZ_DCI_INTERNAL_CP, 16,
			(uint8_t*)&vcsel_bootup_fsm, 1, 0x0A);

	status |= vl53lmz_dci_replace_data(p_dev, p_dev->temp_buffer,
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f203 5104 	addw	r1, r3, #1284	@ 0x504
 800422e:	230e      	movs	r3, #14
 8004230:	9302      	str	r3, [sp, #8]
 8004232:	2301      	movs	r3, #1
 8004234:	9301      	str	r3, [sp, #4]
 8004236:	f107 030d 	add.w	r3, r7, #13
 800423a:	9300      	str	r3, [sp, #0]
 800423c:	2310      	movs	r3, #16
 800423e:	f24b 329c 	movw	r2, #45980	@ 0xb39c
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 fa70 	bl	8004728 <vl53lmz_dci_replace_data>
 8004248:	4603      	mov	r3, r0
 800424a:	461a      	mov	r2, r3
 800424c:	7bfb      	ldrb	r3, [r7, #15]
 800424e:	4313      	orrs	r3, r2
 8004250:	73fb      	strb	r3, [r7, #15]
			VL53LMZ_DCI_INTERNAL_CP, 16,
			(uint8_t*)&analog_dynamic_pad_0, 1, 0x0E);

	return status;
 8004252:	7bfb      	ldrb	r3, [r7, #15]
}
 8004254:	4618      	mov	r0, r3
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <vl53lmz_disable_internal_cp>:

uint8_t vl53lmz_disable_internal_cp(
		VL53LMZ_Configuration *p_dev)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b088      	sub	sp, #32
 8004260:	af04      	add	r7, sp, #16
 8004262:	6078      	str	r0, [r7, #4]
	uint8_t status = VL53LMZ_STATUS_OK;
 8004264:	2300      	movs	r3, #0
 8004266:	73fb      	strb	r3, [r7, #15]
	uint8_t vcsel_bootup_fsm = 0;
 8004268:	2300      	movs	r3, #0
 800426a:	73bb      	strb	r3, [r7, #14]
	uint8_t analog_dynamic_pad_0 = 1;
 800426c:	2301      	movs	r3, #1
 800426e:	737b      	strb	r3, [r7, #13]

	status |= vl53lmz_dci_replace_data(p_dev, p_dev->temp_buffer,
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f203 5104 	addw	r1, r3, #1284	@ 0x504
 8004276:	230a      	movs	r3, #10
 8004278:	9302      	str	r3, [sp, #8]
 800427a:	2301      	movs	r3, #1
 800427c:	9301      	str	r3, [sp, #4]
 800427e:	f107 030e 	add.w	r3, r7, #14
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	2310      	movs	r3, #16
 8004286:	f24b 329c 	movw	r2, #45980	@ 0xb39c
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 fa4c 	bl	8004728 <vl53lmz_dci_replace_data>
 8004290:	4603      	mov	r3, r0
 8004292:	461a      	mov	r2, r3
 8004294:	7bfb      	ldrb	r3, [r7, #15]
 8004296:	4313      	orrs	r3, r2
 8004298:	73fb      	strb	r3, [r7, #15]
			VL53LMZ_DCI_INTERNAL_CP, 16,
			(uint8_t*)&vcsel_bootup_fsm, 1, 0x0A);

	status |= vl53lmz_dci_replace_data(p_dev, p_dev->temp_buffer,
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f203 5104 	addw	r1, r3, #1284	@ 0x504
 80042a0:	230e      	movs	r3, #14
 80042a2:	9302      	str	r3, [sp, #8]
 80042a4:	2301      	movs	r3, #1
 80042a6:	9301      	str	r3, [sp, #4]
 80042a8:	f107 030d 	add.w	r3, r7, #13
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	2310      	movs	r3, #16
 80042b0:	f24b 329c 	movw	r2, #45980	@ 0xb39c
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 fa37 	bl	8004728 <vl53lmz_dci_replace_data>
 80042ba:	4603      	mov	r3, r0
 80042bc:	461a      	mov	r2, r3
 80042be:	7bfb      	ldrb	r3, [r7, #15]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	73fb      	strb	r3, [r7, #15]
			VL53LMZ_DCI_INTERNAL_CP, 16,
			(uint8_t*)&analog_dynamic_pad_0, 1, 0x0E);

	return status;
 80042c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <vl53lmz_get_external_sync_pin_enable>:


uint8_t vl53lmz_get_external_sync_pin_enable(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				*p_is_sync_pin_enabled)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b084      	sub	sp, #16
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
 80042d6:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 80042d8:	2300      	movs	r3, #0
 80042da:	73fb      	strb	r3, [r7, #15]

	if 	( p_dev->revision_id!=(uint8_t)REVISION_L8 )
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80042e2:	f893 33ce 	ldrb.w	r3, [r3, #974]	@ 0x3ce
 80042e6:	2b0c      	cmp	r3, #12
 80042e8:	d001      	beq.n	80042ee <vl53lmz_get_external_sync_pin_enable+0x20>
		return( VL53LMZ_STATUS_FUNC_NOT_AVAILABLE );
 80042ea:	23fe      	movs	r3, #254	@ 0xfe
 80042ec:	e01c      	b.n	8004328 <vl53lmz_get_external_sync_pin_enable+0x5a>

	status |= vl53lmz_dci_read_data(p_dev, p_dev->temp_buffer,
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f203 5104 	addw	r1, r3, #1284	@ 0x504
 80042f4:	2304      	movs	r3, #4
 80042f6:	f24b 52f0 	movw	r2, #46576	@ 0xb5f0
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f8ea 	bl	80044d4 <vl53lmz_dci_read_data>
 8004300:	4603      	mov	r3, r0
 8004302:	461a      	mov	r2, r3
 8004304:	7bfb      	ldrb	r3, [r7, #15]
 8004306:	4313      	orrs	r3, r2
 8004308:	73fb      	strb	r3, [r7, #15]
			VL53LMZ_DCI_SYNC_PIN, 4);

	/* Check bit 1 value (get sync pause bit) */
	if((p_dev->temp_buffer[3] & (uint8_t)0x2) != (uint8_t)0)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 3507 	ldrb.w	r3, [r3, #1287]	@ 0x507
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d003      	beq.n	8004320 <vl53lmz_get_external_sync_pin_enable+0x52>
	{
		*p_is_sync_pin_enabled = (uint8_t)1;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	2201      	movs	r2, #1
 800431c:	701a      	strb	r2, [r3, #0]
 800431e:	e002      	b.n	8004326 <vl53lmz_get_external_sync_pin_enable+0x58>
	}
	else
	{
		*p_is_sync_pin_enabled = (uint8_t)0;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	2200      	movs	r2, #0
 8004324:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8004326:	7bfb      	ldrb	r3, [r7, #15]
}
 8004328:	4618      	mov	r0, r3
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <vl53lmz_set_external_sync_pin_enable>:

uint8_t vl53lmz_set_external_sync_pin_enable(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				enable_sync_pin)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	460b      	mov	r3, r1
 800433a:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53LMZ_STATUS_OK;
 800433c:	2300      	movs	r3, #0
 800433e:	72fb      	strb	r3, [r7, #11]
	uint32_t tmp;

	if 	( p_dev->revision_id!=(uint8_t)REVISION_L8 )
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004346:	f893 33ce 	ldrb.w	r3, [r3, #974]	@ 0x3ce
 800434a:	2b0c      	cmp	r3, #12
 800434c:	d001      	beq.n	8004352 <vl53lmz_set_external_sync_pin_enable+0x22>
		return( VL53LMZ_STATUS_FUNC_NOT_AVAILABLE );
 800434e:	23fe      	movs	r3, #254	@ 0xfe
 8004350:	e031      	b.n	80043b6 <vl53lmz_set_external_sync_pin_enable+0x86>

	status |= vl53lmz_dci_read_data(p_dev, p_dev->temp_buffer,
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f203 5104 	addw	r1, r3, #1284	@ 0x504
 8004358:	2304      	movs	r3, #4
 800435a:	f24b 52f0 	movw	r2, #46576	@ 0xb5f0
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f8b8 	bl	80044d4 <vl53lmz_dci_read_data>
 8004364:	4603      	mov	r3, r0
 8004366:	461a      	mov	r2, r3
 8004368:	7afb      	ldrb	r3, [r7, #11]
 800436a:	4313      	orrs	r3, r2
 800436c:	72fb      	strb	r3, [r7, #11]
			VL53LMZ_DCI_SYNC_PIN, 4);
		tmp = (uint32_t)p_dev->temp_buffer[3];
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 3507 	ldrb.w	r3, [r3, #1287]	@ 0x507
 8004374:	60fb      	str	r3, [r7, #12]

	/* Update bit 1 with mask (set sync pause bit) */
	if(enable_sync_pin == (uint8_t)0)
 8004376:	78fb      	ldrb	r3, [r7, #3]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d104      	bne.n	8004386 <vl53lmz_set_external_sync_pin_enable+0x56>
	{
				tmp &= ~(1UL << 1);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f023 0302 	bic.w	r3, r3, #2
 8004382:	60fb      	str	r3, [r7, #12]
 8004384:	e003      	b.n	800438e <vl53lmz_set_external_sync_pin_enable+0x5e>

	}
	else
	{
				tmp |= 1UL << 1;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f043 0302 	orr.w	r3, r3, #2
 800438c:	60fb      	str	r3, [r7, #12]
	}

		p_dev->temp_buffer[3] = (uint8_t)tmp;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	b2da      	uxtb	r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f883 2507 	strb.w	r2, [r3, #1287]	@ 0x507
	status |= vl53lmz_dci_write_data(p_dev, p_dev->temp_buffer,
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f203 5104 	addw	r1, r3, #1284	@ 0x504
 800439e:	2304      	movs	r3, #4
 80043a0:	f24b 52f0 	movw	r2, #46576	@ 0xb5f0
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 f91f 	bl	80045e8 <vl53lmz_dci_write_data>
 80043aa:	4603      	mov	r3, r0
 80043ac:	461a      	mov	r2, r3
 80043ae:	7afb      	ldrb	r3, [r7, #11]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	72fb      	strb	r3, [r7, #11]
			VL53LMZ_DCI_SYNC_PIN, 4);

	return status;
 80043b4:	7afb      	ldrb	r3, [r7, #11]
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <vl53lmz_get_glare_filter_cfg>:

uint8_t vl53lmz_get_glare_filter_cfg(
		VL53LMZ_Configuration	*p_dev,
		uint8_t					*p_threshold_pc_x10,
		int16_t					*p_max_range )
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b086      	sub	sp, #24
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	60f8      	str	r0, [r7, #12]
 80043c6:	60b9      	str	r1, [r7, #8]
 80043c8:	607a      	str	r2, [r7, #4]
	uint8_t status = VL53LMZ_STATUS_OK;
 80043ca:	2300      	movs	r3, #0
 80043cc:	75fb      	strb	r3, [r7, #23]

	status = vl53lmz_dci_read_data(p_dev, (uint8_t*)p_dev->temp_buffer,
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f203 5104 	addw	r1, r3, #1284	@ 0x504
 80043d4:	2328      	movs	r3, #40	@ 0x28
 80043d6:	f24e 1208 	movw	r2, #57608	@ 0xe108
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f000 f87a 	bl	80044d4 <vl53lmz_dci_read_data>
 80043e0:	4603      	mov	r3, r0
 80043e2:	75fb      	strb	r3, [r7, #23]
									VL53LMZ_DCI_GLARE_FILTER_CFG, 40);

	*p_threshold_pc_x10 = (uint8_t)((*((uint16_t *)&(p_dev->temp_buffer[30])) * 10U) / 256U);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f203 5322 	addw	r3, r3, #1314	@ 0x522
 80043ea:	881b      	ldrh	r3, [r3, #0]
 80043ec:	461a      	mov	r2, r3
 80043ee:	4613      	mov	r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	4413      	add	r3, r2
 80043f4:	005b      	lsls	r3, r3, #1
 80043f6:	0a1b      	lsrs	r3, r3, #8
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	701a      	strb	r2, [r3, #0]
	*p_max_range =  *((int16_t *)&(p_dev->temp_buffer[2]));
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f203 5306 	addw	r3, r3, #1286	@ 0x506
 8004404:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	801a      	strh	r2, [r3, #0]

	return status;
 800440c:	7dfb      	ldrb	r3, [r7, #23]
}
 800440e:	4618      	mov	r0, r3
 8004410:	3718      	adds	r7, #24
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <vl53lmz_set_glare_filter_cfg>:

uint8_t vl53lmz_set_glare_filter_cfg(
		VL53LMZ_Configuration	*p_dev,
		uint8_t					threshold_pc_x10,
		int16_t					max_range )
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b086      	sub	sp, #24
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
 800441e:	460b      	mov	r3, r1
 8004420:	70fb      	strb	r3, [r7, #3]
 8004422:	4613      	mov	r3, r2
 8004424:	803b      	strh	r3, [r7, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 8004426:	2300      	movs	r3, #0
 8004428:	75fb      	strb	r3, [r7, #23]
	int16_t *p_int16;
	uint16_t *p_uint16;
	uint16_t scaled_threshold;

	status = vl53lmz_dci_read_data(p_dev, (uint8_t*)p_dev->temp_buffer,
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f203 5104 	addw	r1, r3, #1284	@ 0x504
 8004430:	2328      	movs	r3, #40	@ 0x28
 8004432:	f24e 1208 	movw	r2, #57608	@ 0xe108
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f84c 	bl	80044d4 <vl53lmz_dci_read_data>
 800443c:	4603      	mov	r3, r0
 800443e:	75fb      	strb	r3, [r7, #23]
									VL53LMZ_DCI_GLARE_FILTER_CFG, 40);

	/* updated the entries in reflectance threshold LUT	*/
	scaled_threshold = ((uint16_t)threshold_pc_x10 * 256U) / 10U;
 8004440:	78fb      	ldrb	r3, [r7, #3]
 8004442:	021b      	lsls	r3, r3, #8
 8004444:	4a22      	ldr	r2, [pc, #136]	@ (80044d0 <vl53lmz_set_glare_filter_cfg+0xba>)
 8004446:	fba2 2303 	umull	r2, r3, r2, r3
 800444a:	08db      	lsrs	r3, r3, #3
 800444c:	82bb      	strh	r3, [r7, #20]
	p_uint16 = (uint16_t *)&(p_dev->temp_buffer[30]);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f203 5322 	addw	r3, r3, #1314	@ 0x522
 8004454:	613b      	str	r3, [r7, #16]
	*p_uint16 = scaled_threshold;
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	8aba      	ldrh	r2, [r7, #20]
 800445a:	801a      	strh	r2, [r3, #0]
	p_uint16++;
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	3302      	adds	r3, #2
 8004460:	613b      	str	r3, [r7, #16]
	*p_uint16 = scaled_threshold;
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	8aba      	ldrh	r2, [r7, #20]
 8004466:	801a      	strh	r2, [r3, #0]
	p_uint16++;
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	3302      	adds	r3, #2
 800446c:	613b      	str	r3, [r7, #16]
	*p_uint16 = scaled_threshold;
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	8aba      	ldrh	r2, [r7, #20]
 8004472:	801a      	strh	r2, [r3, #0]
	p_uint16++;
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	3302      	adds	r3, #2
 8004478:	613b      	str	r3, [r7, #16]

	/* update the max_filter_range field 	*/
	p_int16 = (int16_t *)&(p_dev->temp_buffer[2]);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f203 5306 	addw	r3, r3, #1286	@ 0x506
 8004480:	60fb      	str	r3, [r7, #12]
	*p_int16 = max_range;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	883a      	ldrh	r2, [r7, #0]
 8004486:	801a      	strh	r2, [r3, #0]

	if (threshold_pc_x10 == 0U) {
 8004488:	78fb      	ldrb	r3, [r7, #3]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d108      	bne.n	80044a0 <vl53lmz_set_glare_filter_cfg+0x8a>
		/* threshold of zero means request to disabled GF entirely */
		p_dev->temp_buffer[37] = 1;	/* disable Glare Detection */
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2201      	movs	r2, #1
 8004492:	f883 2529 	strb.w	r2, [r3, #1321]	@ 0x529
		p_dev->temp_buffer[38] = 1;	/* disable Glare Filtering */
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 252a 	strb.w	r2, [r3, #1322]	@ 0x52a
 800449e:	e007      	b.n	80044b0 <vl53lmz_set_glare_filter_cfg+0x9a>
	}
	else {
		p_dev->temp_buffer[37] = 0;	/* enable Glare Detection */
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 2529 	strb.w	r2, [r3, #1321]	@ 0x529
		p_dev->temp_buffer[38] = 0;	/* enable Glare Filtering */
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 252a 	strb.w	r2, [r3, #1322]	@ 0x52a
	}

	status = vl53lmz_dci_write_data(p_dev, p_dev->temp_buffer,
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f203 5104 	addw	r1, r3, #1284	@ 0x504
 80044b6:	2328      	movs	r3, #40	@ 0x28
 80044b8:	f24e 1208 	movw	r2, #57608	@ 0xe108
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 f893 	bl	80045e8 <vl53lmz_dci_write_data>
 80044c2:	4603      	mov	r3, r0
 80044c4:	75fb      	strb	r3, [r7, #23]
								VL53LMZ_DCI_GLARE_FILTER_CFG, 40);

	return status;
 80044c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3718      	adds	r7, #24
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	cccccccd 	.word	0xcccccccd

080044d4 <vl53lmz_dci_read_data>:
uint8_t vl53lmz_dci_read_data(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b08c      	sub	sp, #48	@ 0x30
 80044d8:	af02      	add	r7, sp, #8
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
 80044e0:	807b      	strh	r3, [r7, #2]
	int16_t i;
	uint8_t status = VL53LMZ_STATUS_OK;
 80044e2:	2300      	movs	r3, #0
 80044e4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		uint32_t rd_size = (uint32_t) data_size + (uint32_t)12;
 80044e8:	887b      	ldrh	r3, [r7, #2]
 80044ea:	330c      	adds	r3, #12
 80044ec:	623b      	str	r3, [r7, #32]
	uint8_t cmd[] = {0x00, 0x00, 0x00, 0x00,
 80044ee:	4a3d      	ldr	r2, [pc, #244]	@ (80045e4 <vl53lmz_dci_read_data+0x110>)
 80044f0:	f107 0314 	add.w	r3, r7, #20
 80044f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80044f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x00, 0x00, 0x00, 0x0f,
			0x00, 0x02, 0x00, 0x08};

	/* Check if tmp buffer is large enough */
	if((data_size + (uint16_t)12)>(uint16_t)VL53LMZ_TEMPORARY_BUFFER_SIZE)
 80044fa:	887b      	ldrh	r3, [r7, #2]
 80044fc:	f641 62bc 	movw	r2, #7868	@ 0x1ebc
 8004500:	4293      	cmp	r3, r2
 8004502:	d903      	bls.n	800450c <vl53lmz_dci_read_data+0x38>
	{
		status |= VL53LMZ_STATUS_ERROR;
 8004504:	23ff      	movs	r3, #255	@ 0xff
 8004506:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800450a:	e065      	b.n	80045d8 <vl53lmz_dci_read_data+0x104>
	}
	else
	{
		cmd[0] = (uint8_t)(index >> 8);	
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	0a1b      	lsrs	r3, r3, #8
 8004510:	b2db      	uxtb	r3, r3
 8004512:	753b      	strb	r3, [r7, #20]
		cmd[1] = (uint8_t)(index & (uint32_t)0xff);			
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	b2db      	uxtb	r3, r3
 8004518:	757b      	strb	r3, [r7, #21]
		cmd[2] = (uint8_t)((data_size & (uint16_t)0xff0) >> 4);
 800451a:	887b      	ldrh	r3, [r7, #2]
 800451c:	111b      	asrs	r3, r3, #4
 800451e:	b2db      	uxtb	r3, r3
 8004520:	75bb      	strb	r3, [r7, #22]
		cmd[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8004522:	887b      	ldrh	r3, [r7, #2]
 8004524:	b2db      	uxtb	r3, r3
 8004526:	011b      	lsls	r3, r3, #4
 8004528:	b2db      	uxtb	r3, r3
 800452a:	75fb      	strb	r3, [r7, #23]

	/* Request data reading from FW */
		status |= WrMulti(&(p_dev->platform),
 800452c:	68f8      	ldr	r0, [r7, #12]
 800452e:	f107 0214 	add.w	r2, r7, #20
 8004532:	230c      	movs	r3, #12
 8004534:	f642 71f4 	movw	r1, #12276	@ 0x2ff4
 8004538:	f001 f89c 	bl	8005674 <WrMulti>
 800453c:	4603      	mov	r3, r0
 800453e:	461a      	mov	r2, r3
 8004540:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004544:	4313      	orrs	r3, r2
 8004546:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			(VL53LMZ_UI_CMD_END-(uint16_t)11),cmd, sizeof(cmd));
		status |= _vl53lmz_poll_for_answer(p_dev, 4, 1,
 800454a:	2303      	movs	r3, #3
 800454c:	9301      	str	r3, [sp, #4]
 800454e:	23ff      	movs	r3, #255	@ 0xff
 8004550:	9300      	str	r3, [sp, #0]
 8004552:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8004556:	2201      	movs	r2, #1
 8004558:	2104      	movs	r1, #4
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f7fd fed8 	bl	8002310 <_vl53lmz_poll_for_answer>
 8004560:	4603      	mov	r3, r0
 8004562:	461a      	mov	r2, r3
 8004564:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004568:	4313      	orrs	r3, r2
 800456a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			VL53LMZ_UI_CMD_STATUS,
			0xff, 0x03);

	/* Read new data sent (4 bytes header + data_size + 8 bytes footer) */
		status |= RdMulti(&(p_dev->platform), VL53LMZ_UI_CMD_START,
 800456e:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer, rd_size);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f203 5204 	addw	r2, r3, #1284	@ 0x504
		status |= RdMulti(&(p_dev->platform), VL53LMZ_UI_CMD_START,
 8004576:	6a3b      	ldr	r3, [r7, #32]
 8004578:	f642 4104 	movw	r1, #11268	@ 0x2c04
 800457c:	f001 f89a 	bl	80056b4 <RdMulti>
 8004580:	4603      	mov	r3, r0
 8004582:	461a      	mov	r2, r3
 8004584:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004588:	4313      	orrs	r3, r2
 800458a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		SwapBuffer(p_dev->temp_buffer, data_size + (uint16_t)12);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f203 5204 	addw	r2, r3, #1284	@ 0x504
 8004594:	887b      	ldrh	r3, [r7, #2]
 8004596:	330c      	adds	r3, #12
 8004598:	b29b      	uxth	r3, r3
 800459a:	4619      	mov	r1, r3
 800459c:	4610      	mov	r0, r2
 800459e:	f001 f8d0 	bl	8005742 <SwapBuffer>

	/* Copy data from FW into input structure (-4 bytes to remove header) */
		for(i = 0 ; i < (int16_t)data_size;i++){
 80045a2:	2300      	movs	r3, #0
 80045a4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80045a6:	e011      	b.n	80045cc <vl53lmz_dci_read_data+0xf8>
			data[i] = p_dev->temp_buffer[i + 4];
 80045a8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80045ac:	1d1a      	adds	r2, r3, #4
 80045ae:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80045b2:	68b9      	ldr	r1, [r7, #8]
 80045b4:	440b      	add	r3, r1
 80045b6:	68f9      	ldr	r1, [r7, #12]
 80045b8:	440a      	add	r2, r1
 80045ba:	f892 2504 	ldrb.w	r2, [r2, #1284]	@ 0x504
 80045be:	701a      	strb	r2, [r3, #0]
		for(i = 0 ; i < (int16_t)data_size;i++){
 80045c0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	3301      	adds	r3, #1
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80045cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80045d0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80045d4:	429a      	cmp	r2, r3
 80045d6:	dbe7      	blt.n	80045a8 <vl53lmz_dci_read_data+0xd4>
		}
	}

	return status;
 80045d8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3728      	adds	r7, #40	@ 0x28
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	0803f394 	.word	0x0803f394

080045e8 <vl53lmz_dci_write_data>:
uint8_t vl53lmz_dci_write_data(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b08c      	sub	sp, #48	@ 0x30
 80045ec:	af02      	add	r7, sp, #8
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
 80045f4:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53LMZ_STATUS_OK;
 80045f6:	2300      	movs	r3, #0
 80045f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	int16_t i;

	uint8_t headers[] = {0x00, 0x00, 0x00, 0x00};
 80045fc:	2300      	movs	r3, #0
 80045fe:	61fb      	str	r3, [r7, #28]
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8004600:	2300      	movs	r3, #0
 8004602:	753b      	strb	r3, [r7, #20]
 8004604:	2300      	movs	r3, #0
 8004606:	757b      	strb	r3, [r7, #21]
 8004608:	2300      	movs	r3, #0
 800460a:	75bb      	strb	r3, [r7, #22]
 800460c:	230f      	movs	r3, #15
 800460e:	75fb      	strb	r3, [r7, #23]
 8004610:	2305      	movs	r3, #5
 8004612:	763b      	strb	r3, [r7, #24]
 8004614:	2301      	movs	r3, #1
 8004616:	767b      	strb	r3, [r7, #25]
			(uint8_t)((data_size + (uint16_t)8) >> 8), 
 8004618:	887b      	ldrh	r3, [r7, #2]
 800461a:	3308      	adds	r3, #8
 800461c:	121b      	asrs	r3, r3, #8
 800461e:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8004620:	76bb      	strb	r3, [r7, #26]
			(uint8_t)((data_size + (uint16_t)8) & (uint8_t)0xFF)};
 8004622:	887b      	ldrh	r3, [r7, #2]
 8004624:	b2db      	uxtb	r3, r3
 8004626:	3308      	adds	r3, #8
 8004628:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 800462a:	76fb      	strb	r3, [r7, #27]

	uint16_t address = (uint16_t)VL53LMZ_UI_CMD_END -
 800462c:	887b      	ldrh	r3, [r7, #2]
 800462e:	f5c3 533f 	rsb	r3, r3, #12224	@ 0x2fc0
 8004632:	3334      	adds	r3, #52	@ 0x34
 8004634:	847b      	strh	r3, [r7, #34]	@ 0x22
		(data_size + (uint16_t)12) + (uint16_t)1;

	/* Check if cmd buffer is large enough */
	if((data_size + (uint16_t)12) 
 8004636:	887b      	ldrh	r3, [r7, #2]
 8004638:	f641 62bc 	movw	r2, #7868	@ 0x1ebc
 800463c:	4293      	cmp	r3, r2
 800463e:	d903      	bls.n	8004648 <vl53lmz_dci_write_data+0x60>
		   > (uint16_t)VL53LMZ_TEMPORARY_BUFFER_SIZE)
	{
		status |= VL53LMZ_STATUS_ERROR;
 8004640:	23ff      	movs	r3, #255	@ 0xff
 8004642:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004646:	e069      	b.n	800471c <vl53lmz_dci_write_data+0x134>
	}
	else
	{
		headers[0] = (uint8_t)(index >> 8);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	0a1b      	lsrs	r3, r3, #8
 800464c:	b2db      	uxtb	r3, r3
 800464e:	773b      	strb	r3, [r7, #28]
		headers[1] = (uint8_t)(index & (uint32_t)0xff);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	b2db      	uxtb	r3, r3
 8004654:	777b      	strb	r3, [r7, #29]
		headers[2] = (uint8_t)(((data_size & (uint16_t)0xff0) >> 4));
 8004656:	887b      	ldrh	r3, [r7, #2]
 8004658:	111b      	asrs	r3, r3, #4
 800465a:	b2db      	uxtb	r3, r3
 800465c:	77bb      	strb	r3, [r7, #30]
		headers[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 800465e:	887b      	ldrh	r3, [r7, #2]
 8004660:	b2db      	uxtb	r3, r3
 8004662:	011b      	lsls	r3, r3, #4
 8004664:	b2db      	uxtb	r3, r3
 8004666:	77fb      	strb	r3, [r7, #31]

	/* Copy data from structure to FW format (+4 bytes to add header) */
		SwapBuffer(data, data_size);
 8004668:	887b      	ldrh	r3, [r7, #2]
 800466a:	4619      	mov	r1, r3
 800466c:	68b8      	ldr	r0, [r7, #8]
 800466e:	f001 f868 	bl	8005742 <SwapBuffer>
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8004672:	887b      	ldrh	r3, [r7, #2]
 8004674:	3b01      	subs	r3, #1
 8004676:	b29b      	uxth	r3, r3
 8004678:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800467a:	e012      	b.n	80046a2 <vl53lmz_dci_write_data+0xba>
		{
			p_dev->temp_buffer[i + 4] = data[i];
 800467c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8004680:	68ba      	ldr	r2, [r7, #8]
 8004682:	441a      	add	r2, r3
 8004684:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8004688:	3304      	adds	r3, #4
 800468a:	7811      	ldrb	r1, [r2, #0]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	4413      	add	r3, r2
 8004690:	460a      	mov	r2, r1
 8004692:	f883 2504 	strb.w	r2, [r3, #1284]	@ 0x504
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8004696:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800469a:	b29b      	uxth	r3, r3
 800469c:	3b01      	subs	r3, #1
 800469e:	b29b      	uxth	r3, r3
 80046a0:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80046a2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	dae8      	bge.n	800467c <vl53lmz_dci_write_data+0x94>
		}

	/* Add headers and footer */
		(void)memcpy(&p_dev->temp_buffer[0], headers, sizeof(headers));
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f203 5304 	addw	r3, r3, #1284	@ 0x504
 80046b0:	69fa      	ldr	r2, [r7, #28]
 80046b2:	601a      	str	r2, [r3, #0]
		(void)memcpy(&p_dev->temp_buffer[data_size + (uint16_t)4],
 80046b4:	887b      	ldrh	r3, [r7, #2]
 80046b6:	3304      	adds	r3, #4
 80046b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	4413      	add	r3, r2
 80046c0:	3304      	adds	r3, #4
 80046c2:	461a      	mov	r2, r3
 80046c4:	f107 0314 	add.w	r3, r7, #20
 80046c8:	cb03      	ldmia	r3!, {r0, r1}
 80046ca:	6010      	str	r0, [r2, #0]
 80046cc:	6051      	str	r1, [r2, #4]
			footer, sizeof(footer));

	/* Send data to FW */
		status |= WrMulti(&(p_dev->platform),address,
 80046ce:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer,
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f203 5204 	addw	r2, r3, #1284	@ 0x504
			(uint32_t)((uint32_t)data_size + (uint32_t)12));
 80046d6:	887b      	ldrh	r3, [r7, #2]
		status |= WrMulti(&(p_dev->platform),address,
 80046d8:	330c      	adds	r3, #12
 80046da:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 80046dc:	f000 ffca 	bl	8005674 <WrMulti>
 80046e0:	4603      	mov	r3, r0
 80046e2:	461a      	mov	r2, r3
 80046e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80046e8:	4313      	orrs	r3, r2
 80046ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		status |= _vl53lmz_poll_for_answer(p_dev, 4, 1,
 80046ee:	2303      	movs	r3, #3
 80046f0:	9301      	str	r3, [sp, #4]
 80046f2:	23ff      	movs	r3, #255	@ 0xff
 80046f4:	9300      	str	r3, [sp, #0]
 80046f6:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 80046fa:	2201      	movs	r2, #1
 80046fc:	2104      	movs	r1, #4
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	f7fd fe06 	bl	8002310 <_vl53lmz_poll_for_answer>
 8004704:	4603      	mov	r3, r0
 8004706:	461a      	mov	r2, r3
 8004708:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800470c:	4313      	orrs	r3, r2
 800470e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53LMZ_UI_CMD_STATUS, 0xff, 0x03);

		SwapBuffer(data, data_size);
 8004712:	887b      	ldrh	r3, [r7, #2]
 8004714:	4619      	mov	r1, r3
 8004716:	68b8      	ldr	r0, [r7, #8]
 8004718:	f001 f813 	bl	8005742 <SwapBuffer>
	}

	return status;
 800471c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004720:	4618      	mov	r0, r3
 8004722:	3728      	adds	r7, #40	@ 0x28
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <vl53lmz_dci_replace_data>:
		uint32_t			index,
		uint16_t			data_size,
		uint8_t				*new_data,
		uint16_t			new_data_size,
		uint16_t			new_data_pos)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]
 8004734:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53LMZ_STATUS_OK;
 8004736:	2300      	movs	r3, #0
 8004738:	75fb      	strb	r3, [r7, #23]

	status |= vl53lmz_dci_read_data(p_dev, data, index, data_size);
 800473a:	887b      	ldrh	r3, [r7, #2]
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	68b9      	ldr	r1, [r7, #8]
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	f7ff fec7 	bl	80044d4 <vl53lmz_dci_read_data>
 8004746:	4603      	mov	r3, r0
 8004748:	461a      	mov	r2, r3
 800474a:	7dfb      	ldrb	r3, [r7, #23]
 800474c:	4313      	orrs	r3, r2
 800474e:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(&(data[new_data_pos]), new_data, new_data_size);
 8004750:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	4413      	add	r3, r2
 8004756:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004758:	6a39      	ldr	r1, [r7, #32]
 800475a:	4618      	mov	r0, r3
 800475c:	f01e ff5f 	bl	802361e <memcpy>
	status |= vl53lmz_dci_write_data(p_dev, data, index, data_size);
 8004760:	887b      	ldrh	r3, [r7, #2]
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	68b9      	ldr	r1, [r7, #8]
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f7ff ff3e 	bl	80045e8 <vl53lmz_dci_write_data>
 800476c:	4603      	mov	r3, r0
 800476e:	461a      	mov	r2, r3
 8004770:	7dfb      	ldrb	r3, [r7, #23]
 8004772:	4313      	orrs	r3, r2
 8004774:	75fb      	strb	r3, [r7, #23]

	return status;
 8004776:	7dfb      	ldrb	r3, [r7, #23]
}
 8004778:	4618      	mov	r0, r3
 800477a:	3718      	adds	r7, #24
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <vl53lmz_create_output_config>:
uint8_t vl53lmz_create_output_config(
		VL53LMZ_Configuration	  *p_dev ) {
 8004780:	b5b0      	push	{r4, r5, r7, lr}
 8004782:	b090      	sub	sp, #64	@ 0x40
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]

	uint8_t status = VL53LMZ_STATUS_OK;
 8004788:	2300      	movs	r3, #0
 800478a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	/* Send addresses of possible output */
	uint32_t default_output_config[] ={
 800478e:	4b30      	ldr	r3, [pc, #192]	@ (8004850 <vl53lmz_create_output_config+0xd0>)
 8004790:	f107 040c 	add.w	r4, r7, #12
 8004794:	461d      	mov	r5, r3
 8004796:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004798:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800479a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800479c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800479e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80047a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		VL53LMZ_DISTANCE_BH,
		VL53LMZ_REFLECTANCE_BH,
		VL53LMZ_TARGET_STATUS_BH,
		VL53LMZ_MOTION_DETECT_BH };

	memset(g_output_config, 0x00, sizeof(g_output_config));
 80047a6:	2280      	movs	r2, #128	@ 0x80
 80047a8:	2100      	movs	r1, #0
 80047aa:	482a      	ldr	r0, [pc, #168]	@ (8004854 <vl53lmz_create_output_config+0xd4>)
 80047ac:	f01e fe96 	bl	80234dc <memset>
	memcpy(g_output_config, default_output_config, sizeof(default_output_config));
 80047b0:	4b28      	ldr	r3, [pc, #160]	@ (8004854 <vl53lmz_create_output_config+0xd4>)
 80047b2:	461d      	mov	r5, r3
 80047b4:	f107 040c 	add.w	r4, r7, #12
 80047b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047c0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80047c4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

	/* Enable mandatory output (meta and common data) */
	g_output_bh_enable[0] = 0x00000007U;
 80047c8:	4b23      	ldr	r3, [pc, #140]	@ (8004858 <vl53lmz_create_output_config+0xd8>)
 80047ca:	2207      	movs	r2, #7
 80047cc:	601a      	str	r2, [r3, #0]
	g_output_bh_enable[1] = 0x00000000U;
 80047ce:	4b22      	ldr	r3, [pc, #136]	@ (8004858 <vl53lmz_create_output_config+0xd8>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	605a      	str	r2, [r3, #4]
	g_output_bh_enable[2] = 0x00000000U;
 80047d4:	4b20      	ldr	r3, [pc, #128]	@ (8004858 <vl53lmz_create_output_config+0xd8>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	609a      	str	r2, [r3, #8]
	g_output_bh_enable[3] = 0x00000000U;
 80047da:	4b1f      	ldr	r3, [pc, #124]	@ (8004858 <vl53lmz_create_output_config+0xd8>)
 80047dc:	2200      	movs	r2, #0
 80047de:	60da      	str	r2, [r3, #12]

	/* Enable selected outputs in the 'platform.h' file */
#ifndef VL53LMZ_DISABLE_AMBIENT_PER_SPAD
	g_output_bh_enable[0] += (uint32_t)8;
 80047e0:	4b1d      	ldr	r3, [pc, #116]	@ (8004858 <vl53lmz_create_output_config+0xd8>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	3308      	adds	r3, #8
 80047e6:	4a1c      	ldr	r2, [pc, #112]	@ (8004858 <vl53lmz_create_output_config+0xd8>)
 80047e8:	6013      	str	r3, [r2, #0]
#endif
#ifndef VL53LMZ_DISABLE_NB_SPADS_ENABLED
	g_output_bh_enable[0] += (uint32_t)16;
 80047ea:	4b1b      	ldr	r3, [pc, #108]	@ (8004858 <vl53lmz_create_output_config+0xd8>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	3310      	adds	r3, #16
 80047f0:	4a19      	ldr	r2, [pc, #100]	@ (8004858 <vl53lmz_create_output_config+0xd8>)
 80047f2:	6013      	str	r3, [r2, #0]
#endif
#ifndef VL53LMZ_DISABLE_NB_TARGET_DETECTED
	g_output_bh_enable[0] += (uint32_t)32;
 80047f4:	4b18      	ldr	r3, [pc, #96]	@ (8004858 <vl53lmz_create_output_config+0xd8>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	3320      	adds	r3, #32
 80047fa:	4a17      	ldr	r2, [pc, #92]	@ (8004858 <vl53lmz_create_output_config+0xd8>)
 80047fc:	6013      	str	r3, [r2, #0]
#endif
#ifndef VL53LMZ_DISABLE_SIGNAL_PER_SPAD
	g_output_bh_enable[0] += (uint32_t)64;
 80047fe:	4b16      	ldr	r3, [pc, #88]	@ (8004858 <vl53lmz_create_output_config+0xd8>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	3340      	adds	r3, #64	@ 0x40
 8004804:	4a14      	ldr	r2, [pc, #80]	@ (8004858 <vl53lmz_create_output_config+0xd8>)
 8004806:	6013      	str	r3, [r2, #0]
#endif
#ifndef VL53LMZ_DISABLE_RANGE_SIGMA_MM
	g_output_bh_enable[0] += (uint32_t)128;
 8004808:	4b13      	ldr	r3, [pc, #76]	@ (8004858 <vl53lmz_create_output_config+0xd8>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	3380      	adds	r3, #128	@ 0x80
 800480e:	4a12      	ldr	r2, [pc, #72]	@ (8004858 <vl53lmz_create_output_config+0xd8>)
 8004810:	6013      	str	r3, [r2, #0]
#endif
#ifndef VL53LMZ_DISABLE_DISTANCE_MM
	g_output_bh_enable[0] += (uint32_t)256;
 8004812:	4b11      	ldr	r3, [pc, #68]	@ (8004858 <vl53lmz_create_output_config+0xd8>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800481a:	4a0f      	ldr	r2, [pc, #60]	@ (8004858 <vl53lmz_create_output_config+0xd8>)
 800481c:	6013      	str	r3, [r2, #0]
#endif
#ifndef VL53LMZ_DISABLE_REFLECTANCE_PERCENT
	g_output_bh_enable[0] += (uint32_t)512;
 800481e:	4b0e      	ldr	r3, [pc, #56]	@ (8004858 <vl53lmz_create_output_config+0xd8>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004826:	4a0c      	ldr	r2, [pc, #48]	@ (8004858 <vl53lmz_create_output_config+0xd8>)
 8004828:	6013      	str	r3, [r2, #0]
#endif
#ifndef VL53LMZ_DISABLE_TARGET_STATUS
	g_output_bh_enable[0] += (uint32_t)1024;
 800482a:	4b0b      	ldr	r3, [pc, #44]	@ (8004858 <vl53lmz_create_output_config+0xd8>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004832:	4a09      	ldr	r2, [pc, #36]	@ (8004858 <vl53lmz_create_output_config+0xd8>)
 8004834:	6013      	str	r3, [r2, #0]
#endif
#ifndef VL53LMZ_DISABLE_MOTION_INDICATOR
	g_output_bh_enable[0] += (uint32_t)2048;
 8004836:	4b08      	ldr	r3, [pc, #32]	@ (8004858 <vl53lmz_create_output_config+0xd8>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800483e:	4a06      	ldr	r2, [pc, #24]	@ (8004858 <vl53lmz_create_output_config+0xd8>)
 8004840:	6013      	str	r3, [r2, #0]
#endif

	return status;
 8004842:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8004846:	4618      	mov	r0, r3
 8004848:	3740      	adds	r7, #64	@ 0x40
 800484a:	46bd      	mov	sp, r7
 800484c:	bdb0      	pop	{r4, r5, r7, pc}
 800484e:	bf00      	nop
 8004850:	0803f3a0 	.word	0x0803f3a0
 8004854:	20009c10 	.word	0x20009c10
 8004858:	20000034 	.word	0x20000034

0800485c <vl53lmz_send_output_config_and_start>:


uint8_t vl53lmz_send_output_config_and_start(
		VL53LMZ_Configuration	  *p_dev ) {
 800485c:	b580      	push	{r7, lr}
 800485e:	b08c      	sub	sp, #48	@ 0x30
 8004860:	af02      	add	r7, sp, #8
 8004862:	6078      	str	r0, [r7, #4]

	uint8_t resolution, status = VL53LMZ_STATUS_OK;
 8004864:	2300      	movs	r3, #0
 8004866:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint16_t tmp;
	uint32_t i;
	uint32_t header_config[2] = {0, 0};
 800486a:	2300      	movs	r3, #0
 800486c:	613b      	str	r3, [r7, #16]
 800486e:	2300      	movs	r3, #0
 8004870:	617b      	str	r3, [r7, #20]

	union Block_header *bh_ptr;
	uint8_t cmd[] = {0x00, 0x03, 0x00, 0x00};
 8004872:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004876:	60fb      	str	r3, [r7, #12]

	status |= vl53lmz_get_resolution(p_dev, &resolution);
 8004878:	f107 031b 	add.w	r3, r7, #27
 800487c:	4619      	mov	r1, r3
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f7ff f9e4 	bl	8003c4c <vl53lmz_get_resolution>
 8004884:	4603      	mov	r3, r0
 8004886:	461a      	mov	r2, r3
 8004888:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800488c:	4313      	orrs	r3, r2
 800488e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	p_dev->data_read_size = 0;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	609a      	str	r2, [r3, #8]
	p_dev->streamcount = 255;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	22ff      	movs	r2, #255	@ 0xff
 800489c:	711a      	strb	r2, [r3, #4]

	/* Update data size */
	for (i = 0; i < (uint32_t)(sizeof(g_output_config)/sizeof(uint32_t)); i++)
 800489e:	2300      	movs	r3, #0
 80048a0:	623b      	str	r3, [r7, #32]
 80048a2:	e072      	b.n	800498a <vl53lmz_send_output_config_and_start+0x12e>
	{
		if ((g_output_config[i] == (uint8_t)0)
 80048a4:	4a93      	ldr	r2, [pc, #588]	@ (8004af4 <vl53lmz_send_output_config_and_start+0x298>)
 80048a6:	6a3b      	ldr	r3, [r7, #32]
 80048a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d068      	beq.n	8004982 <vl53lmz_send_output_config_and_start+0x126>
					|| ((g_output_bh_enable[i/(uint32_t)32]
 80048b0:	6a3b      	ldr	r3, [r7, #32]
 80048b2:	095b      	lsrs	r3, r3, #5
 80048b4:	4a90      	ldr	r2, [pc, #576]	@ (8004af8 <vl53lmz_send_output_config_and_start+0x29c>)
 80048b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
						 &((uint32_t)1 << (i%(uint32_t)32))) == (uint32_t)0))
 80048ba:	6a3b      	ldr	r3, [r7, #32]
 80048bc:	f003 031f 	and.w	r3, r3, #31
 80048c0:	fa22 f303 	lsr.w	r3, r2, r3
 80048c4:	f003 0301 	and.w	r3, r3, #1
					|| ((g_output_bh_enable[i/(uint32_t)32]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d05a      	beq.n	8004982 <vl53lmz_send_output_config_and_start+0x126>
		{
			continue;
		}

		bh_ptr = (union Block_header *)&(g_output_config[i]);
 80048cc:	6a3b      	ldr	r3, [r7, #32]
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	4a88      	ldr	r2, [pc, #544]	@ (8004af4 <vl53lmz_send_output_config_and_start+0x298>)
 80048d2:	4413      	add	r3, r2
 80048d4:	61fb      	str	r3, [r7, #28]
		if ( (bh_ptr->type >= 0x1) && (bh_ptr->type < 0x0d))
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	f003 030f 	and.w	r3, r3, #15
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d03e      	beq.n	8004962 <vl53lmz_send_output_config_and_start+0x106>
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b0c      	cmp	r3, #12
 80048f0:	d837      	bhi.n	8004962 <vl53lmz_send_output_config_and_start+0x106>
		{
			if ( bh_ptr->idx >= 0x54d0 ) {
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	885b      	ldrh	r3, [r3, #2]
 80048f6:	f245 42cf 	movw	r2, #21711	@ 0x54cf
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d91e      	bls.n	800493c <vl53lmz_send_output_config_and_start+0xe0>
				/* might be a zone or target data block */
				if ( bh_ptr->idx < (0x5890) )
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	885b      	ldrh	r3, [r3, #2]
 8004902:	f645 028f 	movw	r2, #22671	@ 0x588f
 8004906:	4293      	cmp	r3, r2
 8004908:	d809      	bhi.n	800491e <vl53lmz_send_output_config_and_start+0xc2>
				{
					/* it is zone data (does not depend on NB_TARGET_PER_ZONE) */
					bh_ptr->size = resolution;
 800490a:	7efb      	ldrb	r3, [r7, #27]
 800490c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004910:	b299      	uxth	r1, r3
 8004912:	69fa      	ldr	r2, [r7, #28]
 8004914:	8813      	ldrh	r3, [r2, #0]
 8004916:	f361 130f 	bfi	r3, r1, #4, #12
 800491a:	8013      	strh	r3, [r2, #0]
 800491c:	e00e      	b.n	800493c <vl53lmz_send_output_config_and_start+0xe0>
				}
				else if (bh_ptr->idx < (uint16_t)(0x6C90))
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	885b      	ldrh	r3, [r3, #2]
 8004922:	f646 428f 	movw	r2, #27791	@ 0x6c8f
 8004926:	4293      	cmp	r3, r2
 8004928:	d808      	bhi.n	800493c <vl53lmz_send_output_config_and_start+0xe0>
				{
					/* it is a per-target data block (depends on NB_TARGET_PER_ZONE) */
					bh_ptr->size = resolution * VL53LMZ_NB_TARGET_PER_ZONE;
 800492a:	7efb      	ldrb	r3, [r7, #27]
 800492c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004930:	b299      	uxth	r1, r3
 8004932:	69fa      	ldr	r2, [r7, #28]
 8004934:	8813      	ldrh	r3, [r2, #0]
 8004936:	f361 130f 	bfi	r3, r1, #4, #12
 800493a:	8013      	strh	r3, [r2, #0]
				}
			}
			p_dev->data_read_size += bh_ptr->type * bh_ptr->size;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	69fa      	ldr	r2, [r7, #28]
 8004942:	7812      	ldrb	r2, [r2, #0]
 8004944:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8004948:	b2d2      	uxtb	r2, r2
 800494a:	4611      	mov	r1, r2
 800494c:	69fa      	ldr	r2, [r7, #28]
 800494e:	8812      	ldrh	r2, [r2, #0]
 8004950:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8004954:	b292      	uxth	r2, r2
 8004956:	fb01 f202 	mul.w	r2, r1, r2
 800495a:	441a      	add	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	609a      	str	r2, [r3, #8]
 8004960:	e009      	b.n	8004976 <vl53lmz_send_output_config_and_start+0x11a>
		}
		else
		{
			p_dev->data_read_size += bh_ptr->size;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	69fa      	ldr	r2, [r7, #28]
 8004968:	8812      	ldrh	r2, [r2, #0]
 800496a:	f3c2 120b 	ubfx	r2, r2, #4, #12
 800496e:	b292      	uxth	r2, r2
 8004970:	441a      	add	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	609a      	str	r2, [r3, #8]
		}
		p_dev->data_read_size += (uint32_t)4;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	1d1a      	adds	r2, r3, #4
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	609a      	str	r2, [r3, #8]
 8004980:	e000      	b.n	8004984 <vl53lmz_send_output_config_and_start+0x128>
			continue;
 8004982:	bf00      	nop
	for (i = 0; i < (uint32_t)(sizeof(g_output_config)/sizeof(uint32_t)); i++)
 8004984:	6a3b      	ldr	r3, [r7, #32]
 8004986:	3301      	adds	r3, #1
 8004988:	623b      	str	r3, [r7, #32]
 800498a:	6a3b      	ldr	r3, [r7, #32]
 800498c:	2b1f      	cmp	r3, #31
 800498e:	d989      	bls.n	80048a4 <vl53lmz_send_output_config_and_start+0x48>
	}
	p_dev->data_read_size += (uint32_t)24;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f103 0218 	add.w	r2, r3, #24
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	609a      	str	r2, [r3, #8]


	if (p_dev->data_read_size > VL53LMZ_MAX_RESULTS_SIZE) {
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f641 62c8 	movw	r2, #7880	@ 0x1ec8
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d905      	bls.n	80049b4 <vl53lmz_send_output_config_and_start+0x158>
		status |= VL53LMZ_STATUS_ERROR;
 80049a8:	23ff      	movs	r3, #255	@ 0xff
 80049aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		return status;
 80049ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80049b2:	e09b      	b.n	8004aec <vl53lmz_send_output_config_and_start+0x290>
	}

	status |= vl53lmz_dci_write_data(p_dev,
 80049b4:	2380      	movs	r3, #128	@ 0x80
 80049b6:	f64d 1280 	movw	r2, #55680	@ 0xd980
 80049ba:	494e      	ldr	r1, [pc, #312]	@ (8004af4 <vl53lmz_send_output_config_and_start+0x298>)
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f7ff fe13 	bl	80045e8 <vl53lmz_dci_write_data>
 80049c2:	4603      	mov	r3, r0
 80049c4:	461a      	mov	r2, r3
 80049c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80049ca:	4313      	orrs	r3, r2
 80049cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			(uint8_t*)&(g_output_config), VL53LMZ_DCI_OUTPUT_LIST,
			(uint16_t)sizeof(g_output_config));

	header_config[0] = p_dev->data_read_size;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	613b      	str	r3, [r7, #16]
	header_config[1] = i + (uint32_t)1;
 80049d6:	6a3b      	ldr	r3, [r7, #32]
 80049d8:	3301      	adds	r3, #1
 80049da:	617b      	str	r3, [r7, #20]

	status |= vl53lmz_dci_write_data(p_dev,
 80049dc:	f107 0110 	add.w	r1, r7, #16
 80049e0:	2308      	movs	r3, #8
 80049e2:	f64d 1268 	movw	r2, #55656	@ 0xd968
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f7ff fdfe 	bl	80045e8 <vl53lmz_dci_write_data>
 80049ec:	4603      	mov	r3, r0
 80049ee:	461a      	mov	r2, r3
 80049f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80049f4:	4313      	orrs	r3, r2
 80049f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			(uint8_t*)&(header_config), VL53LMZ_DCI_OUTPUT_CONFIG,
			(uint16_t)sizeof(header_config));

	status |= vl53lmz_dci_write_data(p_dev,
 80049fa:	2310      	movs	r3, #16
 80049fc:	f64d 1270 	movw	r2, #55664	@ 0xd970
 8004a00:	493d      	ldr	r1, [pc, #244]	@ (8004af8 <vl53lmz_send_output_config_and_start+0x29c>)
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f7ff fdf0 	bl	80045e8 <vl53lmz_dci_write_data>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004a10:	4313      	orrs	r3, r2
 8004a12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			(uint8_t*)&(g_output_bh_enable), VL53LMZ_DCI_OUTPUT_ENABLES,
			(uint16_t)sizeof(g_output_bh_enable));

	/* Start xshut bypass (interrupt mode) */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f000 fe00 	bl	8005624 <WrByte>
 8004a24:	4603      	mov	r3, r0
 8004a26:	461a      	mov	r2, r3
 8004a28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	status |= WrByte(&(p_dev->platform), 0x09, 0x05);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2205      	movs	r2, #5
 8004a36:	2109      	movs	r1, #9
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f000 fdf3 	bl	8005624 <WrByte>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	461a      	mov	r2, r3
 8004a42:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004a46:	4313      	orrs	r3, r2
 8004a48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004a54:	4618      	mov	r0, r3
 8004a56:	f000 fde5 	bl	8005624 <WrByte>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004a62:	4313      	orrs	r3, r2
 8004a64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	/* Start ranging session */
	status |= WrMulti(&(p_dev->platform), VL53LMZ_UI_CMD_END -
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f107 020c 	add.w	r2, r7, #12
 8004a6e:	2304      	movs	r3, #4
 8004a70:	f642 71fc 	movw	r1, #12284	@ 0x2ffc
 8004a74:	f000 fdfe 	bl	8005674 <WrMulti>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004a80:	4313      	orrs	r3, r2
 8004a82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			(uint16_t)(4 - 1), (uint8_t*)cmd, sizeof(cmd));
	status |= _vl53lmz_poll_for_answer(p_dev, 4, 1,
 8004a86:	2303      	movs	r3, #3
 8004a88:	9301      	str	r3, [sp, #4]
 8004a8a:	23ff      	movs	r3, #255	@ 0xff
 8004a8c:	9300      	str	r3, [sp, #0]
 8004a8e:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8004a92:	2201      	movs	r2, #1
 8004a94:	2104      	movs	r1, #4
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f7fd fc3a 	bl	8002310 <_vl53lmz_poll_for_answer>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53LMZ_UI_CMD_STATUS, 0xff, 0x03);

	/* Read ui range data content and compare if data size is the correct one */
	status |= vl53lmz_dci_read_data(p_dev,
			(uint8_t*)p_dev->temp_buffer, 0x5440, 12);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f203 5104 	addw	r1, r3, #1284	@ 0x504
	status |= vl53lmz_dci_read_data(p_dev,
 8004ab0:	230c      	movs	r3, #12
 8004ab2:	f245 4240 	movw	r2, #21568	@ 0x5440
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7ff fd0c 	bl	80044d4 <vl53lmz_dci_read_data>
 8004abc:	4603      	mov	r3, r0
 8004abe:	461a      	mov	r2, r3
 8004ac0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	(void)memcpy(&tmp, &(p_dev->temp_buffer[0x8]), sizeof(tmp));
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f203 530c 	addw	r3, r3, #1292	@ 0x50c
 8004ad0:	881b      	ldrh	r3, [r3, #0]
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	833b      	strh	r3, [r7, #24]
	if(tmp != p_dev->data_read_size) {
 8004ad6:	8b3b      	ldrh	r3, [r7, #24]
 8004ad8:	461a      	mov	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d002      	beq.n	8004ae8 <vl53lmz_send_output_config_and_start+0x28c>
		status |= VL53LMZ_STATUS_ERROR;
 8004ae2:	23ff      	movs	r3, #255	@ 0xff
 8004ae4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	return status;
 8004ae8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3728      	adds	r7, #40	@ 0x28
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	20009c10 	.word	0x20009c10
 8004af8:	20000034 	.word	0x20000034

08004afc <vl53lmz_add_output_block>:

uint8_t vl53lmz_add_output_block(
		VL53LMZ_Configuration	  *p_dev,
		uint32_t				block_header ) {
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 8004b06:	2300      	movs	r3, #0
 8004b08:	73fb      	strb	r3, [r7, #15]
	uint8_t i;

	for(i=0;i<NUM_OUTPUT_CONFIG_WORDS;i++) {
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	73bb      	strb	r3, [r7, #14]
 8004b0e:	e00f      	b.n	8004b30 <vl53lmz_add_output_block+0x34>
		if ( (g_output_config[i] == VL53L5_NULL_BH)   		/* reached current end of list      */
 8004b10:	7bbb      	ldrb	r3, [r7, #14]
 8004b12:	4a16      	ldr	r2, [pc, #88]	@ (8004b6c <vl53lmz_add_output_block+0x70>)
 8004b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00c      	beq.n	8004b36 <vl53lmz_add_output_block+0x3a>
				|| (g_output_config[i] == block_header) )	/* OR, block already exists in list */
 8004b1c:	7bbb      	ldrb	r3, [r7, #14]
 8004b1e:	4a13      	ldr	r2, [pc, #76]	@ (8004b6c <vl53lmz_add_output_block+0x70>)
 8004b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b24:	683a      	ldr	r2, [r7, #0]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d005      	beq.n	8004b36 <vl53lmz_add_output_block+0x3a>
	for(i=0;i<NUM_OUTPUT_CONFIG_WORDS;i++) {
 8004b2a:	7bbb      	ldrb	r3, [r7, #14]
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	73bb      	strb	r3, [r7, #14]
 8004b30:	7bbb      	ldrb	r3, [r7, #14]
 8004b32:	2b1f      	cmp	r3, #31
 8004b34:	d9ec      	bls.n	8004b10 <vl53lmz_add_output_block+0x14>
			break;
	}

	if ( i == NUM_OUTPUT_CONFIG_WORDS ) {
 8004b36:	7bbb      	ldrb	r3, [r7, #14]
 8004b38:	2b20      	cmp	r3, #32
 8004b3a:	d102      	bne.n	8004b42 <vl53lmz_add_output_block+0x46>
		/* no space found in output config list */
		status = VL53LMZ_STATUS_ERROR;
 8004b3c:	23ff      	movs	r3, #255	@ 0xff
 8004b3e:	73fb      	strb	r3, [r7, #15]
 8004b40:	e00d      	b.n	8004b5e <vl53lmz_add_output_block+0x62>
	}
	else {
		g_output_config[i] = block_header;
 8004b42:	7bbb      	ldrb	r3, [r7, #14]
 8004b44:	4909      	ldr	r1, [pc, #36]	@ (8004b6c <vl53lmz_add_output_block+0x70>)
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_output_bh_enable[0] |= ((uint32_t)1U)<<i;
 8004b4c:	4b08      	ldr	r3, [pc, #32]	@ (8004b70 <vl53lmz_add_output_block+0x74>)
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	7bbb      	ldrb	r3, [r7, #14]
 8004b52:	2101      	movs	r1, #1
 8004b54:	fa01 f303 	lsl.w	r3, r1, r3
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	4a05      	ldr	r2, [pc, #20]	@ (8004b70 <vl53lmz_add_output_block+0x74>)
 8004b5c:	6013      	str	r3, [r2, #0]
	}

	return status;
 8004b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr
 8004b6c:	20009c10 	.word	0x20009c10
 8004b70:	20000034 	.word	0x20000034

08004b74 <vl53lmz_disable_output_block>:

uint8_t vl53lmz_disable_output_block(
		VL53LMZ_Configuration	  *p_dev,
		uint32_t				block_header ) {
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for(i=0;i<NUM_OUTPUT_CONFIG_WORDS;i++) {
 8004b82:	2300      	movs	r3, #0
 8004b84:	73fb      	strb	r3, [r7, #15]
 8004b86:	e01a      	b.n	8004bbe <vl53lmz_disable_output_block+0x4a>
		if (g_output_config[i] == block_header) {
 8004b88:	7bfb      	ldrb	r3, [r7, #15]
 8004b8a:	4a13      	ldr	r2, [pc, #76]	@ (8004bd8 <vl53lmz_disable_output_block+0x64>)
 8004b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b90:	683a      	ldr	r2, [r7, #0]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d10a      	bne.n	8004bac <vl53lmz_disable_output_block+0x38>
			g_output_bh_enable[0] &= ~(((uint32_t)1)<<i);
 8004b96:	4b11      	ldr	r3, [pc, #68]	@ (8004bdc <vl53lmz_disable_output_block+0x68>)
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	7bfb      	ldrb	r3, [r7, #15]
 8004b9c:	2101      	movs	r1, #1
 8004b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004ba2:	43db      	mvns	r3, r3
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	4a0d      	ldr	r2, [pc, #52]	@ (8004bdc <vl53lmz_disable_output_block+0x68>)
 8004ba8:	6013      	str	r3, [r2, #0]
			break;
 8004baa:	e00d      	b.n	8004bc8 <vl53lmz_disable_output_block+0x54>
		}

		if (g_output_config[i] == VL53L5_NULL_BH)
 8004bac:	7bfb      	ldrb	r3, [r7, #15]
 8004bae:	4a0a      	ldr	r2, [pc, #40]	@ (8004bd8 <vl53lmz_disable_output_block+0x64>)
 8004bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d006      	beq.n	8004bc6 <vl53lmz_disable_output_block+0x52>
	for(i=0;i<NUM_OUTPUT_CONFIG_WORDS;i++) {
 8004bb8:	7bfb      	ldrb	r3, [r7, #15]
 8004bba:	3301      	adds	r3, #1
 8004bbc:	73fb      	strb	r3, [r7, #15]
 8004bbe:	7bfb      	ldrb	r3, [r7, #15]
 8004bc0:	2b1f      	cmp	r3, #31
 8004bc2:	d9e1      	bls.n	8004b88 <vl53lmz_disable_output_block+0x14>
 8004bc4:	e000      	b.n	8004bc8 <vl53lmz_disable_output_block+0x54>
			break;
 8004bc6:	bf00      	nop
	}
	return status;
 8004bc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3714      	adds	r7, #20
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	20009c10 	.word	0x20009c10
 8004bdc:	20000034 	.word	0x20000034

08004be0 <vl53lmz_results_extract_block>:

uint8_t vl53lmz_results_extract_block(
		VL53LMZ_Configuration		*p_dev,
		uint32_t					blk_index,
		uint8_t						*p_data,
		uint16_t					data_size ) {
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b088      	sub	sp, #32
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]
 8004bec:	807b      	strh	r3, [r7, #2]

	uint8_t status = VL53LMZ_STATUS_INVALID_PARAM;
 8004bee:	237f      	movs	r3, #127	@ 0x7f
 8004bf0:	77fb      	strb	r3, [r7, #31]

	union Block_header *bh_ptr;
	uint32_t i, msize=0;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	617b      	str	r3, [r7, #20]

	for (i = 16; i < p_dev->data_read_size; )
 8004bf6:	2310      	movs	r3, #16
 8004bf8:	61bb      	str	r3, [r7, #24]
 8004bfa:	e04b      	b.n	8004c94 <vl53lmz_results_extract_block+0xb4>
	{
		bh_ptr = (union Block_header *)&(p_dev->temp_buffer[i]);
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	4413      	add	r3, r2
 8004c06:	3304      	adds	r3, #4
 8004c08:	613b      	str	r3, [r7, #16]

		if ((bh_ptr->type > 0x1) && (bh_ptr->type < 0xd)){
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d915      	bls.n	8004c44 <vl53lmz_results_extract_block+0x64>
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	2b0c      	cmp	r3, #12
 8004c24:	d80e      	bhi.n	8004c44 <vl53lmz_results_extract_block+0x64>
			msize = bh_ptr->size * bh_ptr->type;
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	881b      	ldrh	r3, [r3, #0]
 8004c2a:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	461a      	mov	r2, r3
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	fb02 f303 	mul.w	r3, r2, r3
 8004c40:	617b      	str	r3, [r7, #20]
 8004c42:	e005      	b.n	8004c50 <vl53lmz_results_extract_block+0x70>
		}
		else {
			msize = bh_ptr->size;
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	881b      	ldrh	r3, [r3, #0]
 8004c48:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	617b      	str	r3, [r7, #20]
		}

		i += 4; /* skip over the block header */
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	3304      	adds	r3, #4
 8004c54:	61bb      	str	r3, [r7, #24]

		if ( bh_ptr->idx == blk_index ) {
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	885b      	ldrh	r3, [r3, #2]
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d114      	bne.n	8004c8c <vl53lmz_results_extract_block+0xac>
			if (msize < data_size) {
 8004c62:	887b      	ldrh	r3, [r7, #2]
 8004c64:	697a      	ldr	r2, [r7, #20]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d202      	bcs.n	8004c70 <vl53lmz_results_extract_block+0x90>
				/* not enough data in block to fill requested buffer */
				status = VL53LMZ_STATUS_INVALID_PARAM;
 8004c6a:	237f      	movs	r3, #127	@ 0x7f
 8004c6c:	77fb      	strb	r3, [r7, #31]
			}
			else {
				memcpy(p_data, (uint8_t *)&(p_dev->temp_buffer[i]), data_size);
				status = VL53LMZ_STATUS_OK;
			}
			break;
 8004c6e:	e016      	b.n	8004c9e <vl53lmz_results_extract_block+0xbe>
				memcpy(p_data, (uint8_t *)&(p_dev->temp_buffer[i]), data_size);
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	4413      	add	r3, r2
 8004c7a:	3304      	adds	r3, #4
 8004c7c:	887a      	ldrh	r2, [r7, #2]
 8004c7e:	4619      	mov	r1, r3
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f01e fccc 	bl	802361e <memcpy>
				status = VL53LMZ_STATUS_OK;
 8004c86:	2300      	movs	r3, #0
 8004c88:	77fb      	strb	r3, [r7, #31]
			break;
 8004c8a:	e008      	b.n	8004c9e <vl53lmz_results_extract_block+0xbe>
		}
		i = i + msize;  /* add size of data block */
 8004c8c:	69ba      	ldr	r2, [r7, #24]
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	4413      	add	r3, r2
 8004c92:	61bb      	str	r3, [r7, #24]
	for (i = 16; i < p_dev->data_read_size; )
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	69ba      	ldr	r2, [r7, #24]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d3ae      	bcc.n	8004bfc <vl53lmz_results_extract_block+0x1c>
	}

	return status;
 8004c9e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3720      	adds	r7, #32
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <_vl53lmz_poll_for_answer>:

static uint8_t _vl53lmz_poll_for_answer(
		VL53LMZ_Configuration   *p_dev,
		uint16_t 				address,
		uint8_t 				expected_value)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	807b      	strh	r3, [r7, #2]
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	707b      	strb	r3, [r7, #1]
	uint8_t status = VL53LMZ_STATUS_OK;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	73fb      	strb	r3, [r7, #15]
	uint8_t timeout = 0;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	73bb      	strb	r3, [r7, #14]

	do {
		status |= RdMulti(&(p_dev->platform), 
 8004cc0:	6878      	ldr	r0, [r7, #4]
                                  address, p_dev->temp_buffer, 4);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f203 5204 	addw	r2, r3, #1284	@ 0x504
		status |= RdMulti(&(p_dev->platform), 
 8004cc8:	8879      	ldrh	r1, [r7, #2]
 8004cca:	2304      	movs	r3, #4
 8004ccc:	f000 fcf2 	bl	80056b4 <RdMulti>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	7bfb      	ldrb	r3, [r7, #15]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	73fb      	strb	r3, [r7, #15]
		status |= WaitMs(&(p_dev->platform), 10);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	210a      	movs	r1, #10
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 fd65 	bl	80057ae <WaitMs>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	7bfb      	ldrb	r3, [r7, #15]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	73fb      	strb	r3, [r7, #15]
		
                /* 2s timeout or FW error*/
		if((timeout >= (uint8_t)200) 
 8004cee:	7bbb      	ldrb	r3, [r7, #14]
 8004cf0:	2bc7      	cmp	r3, #199	@ 0xc7
 8004cf2:	d804      	bhi.n	8004cfe <_vl53lmz_poll_for_answer+0x56>
                   || (p_dev->temp_buffer[2] >= (uint8_t) 0x7f))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f893 3506 	ldrb.w	r3, [r3, #1286]	@ 0x506
 8004cfa:	2b7e      	cmp	r3, #126	@ 0x7e
 8004cfc:	d904      	bls.n	8004d08 <_vl53lmz_poll_for_answer+0x60>
		{
			status |= VL53LMZ_MCU_ERROR;
 8004cfe:	7bfb      	ldrb	r3, [r7, #15]
 8004d00:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8004d04:	73fb      	strb	r3, [r7, #15]
			break;
 8004d06:	e008      	b.n	8004d1a <_vl53lmz_poll_for_answer+0x72>
		}
                else
                {
                  timeout++;
 8004d08:	7bbb      	ldrb	r3, [r7, #14]
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	73bb      	strb	r3, [r7, #14]
                }
	}while ((p_dev->temp_buffer[0x1]) != expected_value);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 3505 	ldrb.w	r3, [r3, #1285]	@ 0x505
 8004d14:	787a      	ldrb	r2, [r7, #1]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d1d2      	bne.n	8004cc0 <_vl53lmz_poll_for_answer+0x18>
        
	return status;
 8004d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3710      	adds	r7, #16
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <_vl53lmz_program_output_config>:
 * program the output using the macro defined into the 'platform.h' file.
 */

static uint8_t _vl53lmz_program_output_config(
		VL53LMZ_Configuration 		 *p_dev)
{
 8004d24:	b590      	push	{r4, r7, lr}
 8004d26:	b09f      	sub	sp, #124	@ 0x7c
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
	uint8_t resolution, status = VL53LMZ_STATUS_OK;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
	uint32_t i;
	union Block_header *bh_ptr;
    uint32_t header_config[2] = {0, 0};
 8004d32:	2300      	movs	r3, #0
 8004d34:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d36:	2300      	movs	r3, #0
 8004d38:	667b      	str	r3, [r7, #100]	@ 0x64
	

	status |= vl53lmz_get_resolution(p_dev, &resolution);
 8004d3a:	f107 036b 	add.w	r3, r7, #107	@ 0x6b
 8004d3e:	4619      	mov	r1, r3
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f7fe ff83 	bl	8003c4c <vl53lmz_get_resolution>
 8004d46:	4603      	mov	r3, r0
 8004d48:	461a      	mov	r2, r3
 8004d4a:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
	p_dev->data_read_size = 0;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	609a      	str	r2, [r3, #8]

	/* Enable mandatory output (meta and common data) */
	uint32_t output_bh_enable[] = {
 8004d5a:	4b63      	ldr	r3, [pc, #396]	@ (8004ee8 <_vl53lmz_program_output_config+0x1c4>)
 8004d5c:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8004d60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			0x00000000U,
			0x00000000U,
			0xC0000000U};

	/* Send addresses of possible output */
	uint32_t output[] ={
 8004d66:	4a61      	ldr	r2, [pc, #388]	@ (8004eec <_vl53lmz_program_output_config+0x1c8>)
 8004d68:	f107 030c 	add.w	r3, r7, #12
 8004d6c:	4611      	mov	r1, r2
 8004d6e:	2244      	movs	r2, #68	@ 0x44
 8004d70:	4618      	mov	r0, r3
 8004d72:	f01e fc54 	bl	802361e <memcpy>
			0xA2640081U,
			0xA26C0084U,
			0xA28C0082U};

	/* Update data size */
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 8004d76:	2300      	movs	r3, #0
 8004d78:	677b      	str	r3, [r7, #116]	@ 0x74
 8004d7a:	e073      	b.n	8004e64 <_vl53lmz_program_output_config+0x140>
	{
		if ((output[i] == (uint8_t)0) 
 8004d7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	3378      	adds	r3, #120	@ 0x78
 8004d82:	443b      	add	r3, r7
 8004d84:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d067      	beq.n	8004e5c <_vl53lmz_program_output_config+0x138>
                    || ((output_bh_enable[i/(uint32_t)32]
 8004d8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d8e:	095b      	lsrs	r3, r3, #5
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	3378      	adds	r3, #120	@ 0x78
 8004d94:	443b      	add	r3, r7
 8004d96:	f853 2c28 	ldr.w	r2, [r3, #-40]
                         &((uint32_t)1 << (i%(uint32_t)32))) == (uint32_t)0))
 8004d9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d9c:	f003 031f 	and.w	r3, r3, #31
 8004da0:	fa22 f303 	lsr.w	r3, r2, r3
 8004da4:	f003 0301 	and.w	r3, r3, #1
                    || ((output_bh_enable[i/(uint32_t)32]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d057      	beq.n	8004e5c <_vl53lmz_program_output_config+0x138>
		{
			continue;
		}

		bh_ptr = (union Block_header *)&(output[i]);
 8004dac:	f107 020c 	add.w	r2, r7, #12
 8004db0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	4413      	add	r3, r2
 8004db6:	66fb      	str	r3, [r7, #108]	@ 0x6c
		if (((uint8_t)bh_ptr->type >= (uint8_t)0x1) 
 8004db8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	f003 030f 	and.w	r3, r3, #15
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d03a      	beq.n	8004e3c <_vl53lmz_program_output_config+0x118>
                    && ((uint8_t)bh_ptr->type < (uint8_t)0x0d))
 8004dc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	2b0c      	cmp	r3, #12
 8004dd2:	d833      	bhi.n	8004e3c <_vl53lmz_program_output_config+0x118>
		{
			if ((bh_ptr->idx >= (uint16_t)0x54d0) 
 8004dd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004dd6:	885b      	ldrh	r3, [r3, #2]
 8004dd8:	f245 42cf 	movw	r2, #21711	@ 0x54cf
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d910      	bls.n	8004e02 <_vl53lmz_program_output_config+0xde>
                            && (bh_ptr->idx < (uint16_t)(0x54d0 + 960)))
 8004de0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004de2:	885b      	ldrh	r3, [r3, #2]
 8004de4:	f645 028f 	movw	r2, #22671	@ 0x588f
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d80a      	bhi.n	8004e02 <_vl53lmz_program_output_config+0xde>
			{
				bh_ptr->size = resolution;
 8004dec:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8004df0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004df4:	b299      	uxth	r1, r3
 8004df6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004df8:	8813      	ldrh	r3, [r2, #0]
 8004dfa:	f361 130f 	bfi	r3, r1, #4, #12
 8004dfe:	8013      	strh	r3, [r2, #0]
 8004e00:	e009      	b.n	8004e16 <_vl53lmz_program_output_config+0xf2>
			}	
			else 
			{
				bh_ptr->size = (uint8_t)(resolution 
 8004e02:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8004e06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e0a:	b299      	uxth	r1, r3
 8004e0c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004e0e:	8813      	ldrh	r3, [r2, #0]
 8004e10:	f361 130f 	bfi	r3, r1, #4, #12
 8004e14:	8013      	strh	r3, [r2, #0]
                                  * (uint8_t)VL53LMZ_NB_TARGET_PER_ZONE);
			}

                        
			p_dev->data_read_size += bh_ptr->type * bh_ptr->size;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004e1c:	7812      	ldrb	r2, [r2, #0]
 8004e1e:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8004e22:	b2d2      	uxtb	r2, r2
 8004e24:	4611      	mov	r1, r2
 8004e26:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004e28:	8812      	ldrh	r2, [r2, #0]
 8004e2a:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8004e2e:	b292      	uxth	r2, r2
 8004e30:	fb01 f202 	mul.w	r2, r1, r2
 8004e34:	441a      	add	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	609a      	str	r2, [r3, #8]
 8004e3a:	e009      	b.n	8004e50 <_vl53lmz_program_output_config+0x12c>
		}
		else
		{
			p_dev->data_read_size += bh_ptr->size;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004e42:	8812      	ldrh	r2, [r2, #0]
 8004e44:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8004e48:	b292      	uxth	r2, r2
 8004e4a:	441a      	add	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	609a      	str	r2, [r3, #8]
		}

		p_dev->data_read_size += (uint32_t)4;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	1d1a      	adds	r2, r3, #4
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	609a      	str	r2, [r3, #8]
 8004e5a:	e000      	b.n	8004e5e <_vl53lmz_program_output_config+0x13a>
			continue;
 8004e5c:	bf00      	nop
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 8004e5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e60:	3301      	adds	r3, #1
 8004e62:	677b      	str	r3, [r7, #116]	@ 0x74
 8004e64:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e66:	2b10      	cmp	r3, #16
 8004e68:	d988      	bls.n	8004d7c <_vl53lmz_program_output_config+0x58>
	}
	p_dev->data_read_size += (uint32_t)24;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f103 0218 	add.w	r2, r3, #24
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	609a      	str	r2, [r3, #8]

	status |= vl53lmz_dci_write_data(p_dev,
 8004e76:	f107 010c 	add.w	r1, r7, #12
 8004e7a:	2344      	movs	r3, #68	@ 0x44
 8004e7c:	f64d 1280 	movw	r2, #55680	@ 0xd980
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f7ff fbb1 	bl	80045e8 <vl53lmz_dci_write_data>
 8004e86:	4603      	mov	r3, r0
 8004e88:	461a      	mov	r2, r3
 8004e8a:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
			(uint8_t*)&(output), 
                        VL53LMZ_DCI_OUTPUT_LIST, (uint16_t)sizeof(output));
        
	header_config[0] = p_dev->data_read_size;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	663b      	str	r3, [r7, #96]	@ 0x60
	header_config[1] = i + (uint32_t)1;
 8004e9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	667b      	str	r3, [r7, #100]	@ 0x64

	status |= vl53lmz_dci_write_data(p_dev, (uint8_t*)&(header_config),
 8004ea0:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8004ea4:	2308      	movs	r3, #8
 8004ea6:	f64d 1268 	movw	r2, #55656	@ 0xd968
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f7ff fb9c 	bl	80045e8 <vl53lmz_dci_write_data>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
			VL53LMZ_DCI_OUTPUT_CONFIG,
                        (uint16_t)sizeof(header_config));
	status |= vl53lmz_dci_write_data(p_dev, (uint8_t*)&(output_bh_enable),
 8004ebe:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8004ec2:	2310      	movs	r3, #16
 8004ec4:	f64d 1270 	movw	r2, #55664	@ 0xd970
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f7ff fb8d 	bl	80045e8 <vl53lmz_dci_write_data>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
			VL53LMZ_DCI_OUTPUT_ENABLES,
                        (uint16_t)sizeof(output_bh_enable));

	return status;
 8004edc:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	377c      	adds	r7, #124	@ 0x7c
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd90      	pop	{r4, r7, pc}
 8004ee8:	0803f7f0 	.word	0x0803f7f0
 8004eec:	0803f800 	.word	0x0803f800

08004ef0 <vl53lmz_calibrate_xtalk>:
uint8_t vl53lmz_calibrate_xtalk(
		VL53LMZ_Configuration		*p_dev,
		uint16_t			reflectance_percent,
		uint8_t				nb_samples,
		uint16_t			distance_mm)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b092      	sub	sp, #72	@ 0x48
 8004ef4:	af04      	add	r7, sp, #16
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	4608      	mov	r0, r1
 8004efa:	4611      	mov	r1, r2
 8004efc:	461a      	mov	r2, r3
 8004efe:	4603      	mov	r3, r0
 8004f00:	817b      	strh	r3, [r7, #10]
 8004f02:	460b      	mov	r3, r1
 8004f04:	727b      	strb	r3, [r7, #9]
 8004f06:	4613      	mov	r3, r2
 8004f08:	80fb      	strh	r3, [r7, #6]
	uint16_t timeout = 0;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	86fb      	strh	r3, [r7, #54]	@ 0x36
	uint8_t cmd[] = {0x00, 0x03, 0x00, 0x00};
 8004f0e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004f12:	633b      	str	r3, [r7, #48]	@ 0x30
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0x03, 0x04};
 8004f14:	4ab4      	ldr	r2, [pc, #720]	@ (80051e8 <vl53lmz_calibrate_xtalk+0x2f8>)
 8004f16:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004f1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f1e:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t continue_loop = 1, status = VL53LMZ_STATUS_OK;
 8004f22:	2301      	movs	r3, #1
 8004f24:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8004f28:	2300      	movs	r3, #0
 8004f2a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

	uint8_t resolution, frequency, target_order, sharp_prct, ranging_mode;
	uint32_t integration_time_ms, xtalk_margin;
        
	uint16_t reflectance = reflectance_percent;
 8004f2e:	897b      	ldrh	r3, [r7, #10]
 8004f30:	82fb      	strh	r3, [r7, #22]
	uint8_t	samples = nb_samples;
 8004f32:	7a7b      	ldrb	r3, [r7, #9]
 8004f34:	757b      	strb	r3, [r7, #21]
	uint16_t distance = distance_mm;
 8004f36:	88fb      	ldrh	r3, [r7, #6]
 8004f38:	827b      	strh	r3, [r7, #18]

	/* Get initial configuration */
	status |= vl53lmz_get_resolution(p_dev, &resolution);
 8004f3a:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 8004f3e:	4619      	mov	r1, r3
 8004f40:	68f8      	ldr	r0, [r7, #12]
 8004f42:	f7fe fe83 	bl	8003c4c <vl53lmz_get_resolution>
 8004f46:	4603      	mov	r3, r0
 8004f48:	461a      	mov	r2, r3
 8004f4a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	status |= vl53lmz_get_ranging_frequency_hz(p_dev, &frequency);
 8004f54:	f107 0326 	add.w	r3, r7, #38	@ 0x26
 8004f58:	4619      	mov	r1, r3
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f7fe ff6f 	bl	8003e3e <vl53lmz_get_ranging_frequency_hz>
 8004f60:	4603      	mov	r3, r0
 8004f62:	461a      	mov	r2, r3
 8004f64:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	status |= vl53lmz_get_integration_time_ms(p_dev, &integration_time_ms);
 8004f6e:	f107 031c 	add.w	r3, r7, #28
 8004f72:	4619      	mov	r1, r3
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	f7fe ffa2 	bl	8003ebe <vl53lmz_get_integration_time_ms>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004f82:	4313      	orrs	r3, r2
 8004f84:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	status |= vl53lmz_get_sharpener_percent(p_dev, &sharp_prct);
 8004f88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f7fe fff5 	bl	8003f7e <vl53lmz_get_sharpener_percent>
 8004f94:	4603      	mov	r3, r0
 8004f96:	461a      	mov	r2, r3
 8004f98:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	status |= vl53lmz_get_target_order(p_dev, &target_order);
 8004fa2:	f107 0325 	add.w	r3, r7, #37	@ 0x25
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	68f8      	ldr	r0, [r7, #12]
 8004faa:	f7ff f84d 	bl	8004048 <vl53lmz_get_target_order>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	status |= vl53lmz_get_xtalk_margin(p_dev, &xtalk_margin);
 8004fbc:	f107 0318 	add.w	r3, r7, #24
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f000 fa96 	bl	80054f4 <vl53lmz_get_xtalk_margin>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	461a      	mov	r2, r3
 8004fcc:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	status |= vl53lmz_get_ranging_mode(p_dev, &ranging_mode);
 8004fd6:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 8004fda:	4619      	mov	r1, r3
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f7ff f87e 	bl	80040de <vl53lmz_get_ranging_mode>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004fea:	4313      	orrs	r3, r2
 8004fec:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

	/* Check input arguments validity */
	if(((reflectance < (uint16_t)1) || (reflectance > (uint16_t)99))
 8004ff0:	8afb      	ldrh	r3, [r7, #22]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d011      	beq.n	800501a <vl53lmz_calibrate_xtalk+0x12a>
 8004ff6:	8afb      	ldrh	r3, [r7, #22]
 8004ff8:	2b63      	cmp	r3, #99	@ 0x63
 8004ffa:	d80e      	bhi.n	800501a <vl53lmz_calibrate_xtalk+0x12a>
		|| ((distance < (uint16_t)600) || (distance > (uint16_t)3000))
 8004ffc:	8a7b      	ldrh	r3, [r7, #18]
 8004ffe:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8005002:	d30a      	bcc.n	800501a <vl53lmz_calibrate_xtalk+0x12a>
 8005004:	8a7b      	ldrh	r3, [r7, #18]
 8005006:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800500a:	4293      	cmp	r3, r2
 800500c:	d805      	bhi.n	800501a <vl53lmz_calibrate_xtalk+0x12a>
		|| ((samples < (uint8_t)1) || (samples > (uint8_t)16)))
 800500e:	7d7b      	ldrb	r3, [r7, #21]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d002      	beq.n	800501a <vl53lmz_calibrate_xtalk+0x12a>
 8005014:	7d7b      	ldrb	r3, [r7, #21]
 8005016:	2b10      	cmp	r3, #16
 8005018:	d906      	bls.n	8005028 <vl53lmz_calibrate_xtalk+0x138>
	{
		status |= VL53LMZ_STATUS_INVALID_PARAM;
 800501a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800501e:	f043 037f 	orr.w	r3, r3, #127	@ 0x7f
 8005022:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8005026:	e0f6      	b.n	8005216 <vl53lmz_calibrate_xtalk+0x326>
	}
	else
	{
		status |= vl53lmz_set_resolution(p_dev,
 8005028:	2140      	movs	r1, #64	@ 0x40
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f7fe fe33 	bl	8003c96 <vl53lmz_set_resolution>
 8005030:	4603      	mov	r3, r0
 8005032:	461a      	mov	r2, r3
 8005034:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8005038:	4313      	orrs	r3, r2
 800503a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
				VL53LMZ_RESOLUTION_8X8);

		/* Send Xtalk calibration buffer */
                (void)memcpy(p_dev->temp_buffer, VL53LMZ_CALIBRATE_XTALK,
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f203 5304 	addw	r3, r3, #1284	@ 0x504
 8005044:	4a69      	ldr	r2, [pc, #420]	@ (80051ec <vl53lmz_calibrate_xtalk+0x2fc>)
 8005046:	4618      	mov	r0, r3
 8005048:	4611      	mov	r1, r2
 800504a:	f44f 7376 	mov.w	r3, #984	@ 0x3d8
 800504e:	461a      	mov	r2, r3
 8005050:	f01e fae5 	bl	802361e <memcpy>
                       sizeof(VL53LMZ_CALIBRATE_XTALK));
		status |= WrMulti(&(p_dev->platform), 0x2c28,
 8005054:	68f8      	ldr	r0, [r7, #12]
				p_dev->temp_buffer, 
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f203 5204 	addw	r2, r3, #1284	@ 0x504
		status |= WrMulti(&(p_dev->platform), 0x2c28,
 800505c:	f44f 7376 	mov.w	r3, #984	@ 0x3d8
 8005060:	f642 4128 	movw	r1, #11304	@ 0x2c28
 8005064:	f000 fb06 	bl	8005674 <WrMulti>
 8005068:	4603      	mov	r3, r0
 800506a:	461a      	mov	r2, r3
 800506c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8005070:	4313      	orrs	r3, r2
 8005072:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                       (uint16_t)sizeof(VL53LMZ_CALIBRATE_XTALK));
		status |= _vl53lmz_poll_for_answer(p_dev,
 8005076:	2203      	movs	r2, #3
 8005078:	f44f 5130 	mov.w	r1, #11264	@ 0x2c00
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	f7ff fe13 	bl	8004ca8 <_vl53lmz_poll_for_answer>
 8005082:	4603      	mov	r3, r0
 8005084:	461a      	mov	r2, r3
 8005086:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800508a:	4313      	orrs	r3, r2
 800508c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
				VL53LMZ_UI_CMD_STATUS, 0x3);

		/* Format input argument */
		reflectance = reflectance * (uint16_t)16;
 8005090:	8afb      	ldrh	r3, [r7, #22]
 8005092:	011b      	lsls	r3, r3, #4
 8005094:	b29b      	uxth	r3, r3
 8005096:	82fb      	strh	r3, [r7, #22]
		distance = distance * (uint16_t)4;
 8005098:	8a7b      	ldrh	r3, [r7, #18]
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	b29b      	uxth	r3, r3
 800509e:	827b      	strh	r3, [r7, #18]

		/* Update required fields */
		status |= vl53lmz_dci_replace_data(p_dev, p_dev->temp_buffer,
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f203 5104 	addw	r1, r3, #1284	@ 0x504
 80050a6:	2300      	movs	r3, #0
 80050a8:	9302      	str	r3, [sp, #8]
 80050aa:	2302      	movs	r3, #2
 80050ac:	9301      	str	r3, [sp, #4]
 80050ae:	f107 0312 	add.w	r3, r7, #18
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	2308      	movs	r3, #8
 80050b6:	f245 4270 	movw	r2, #21616	@ 0x5470
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f7ff fb34 	bl	8004728 <vl53lmz_dci_replace_data>
 80050c0:	4603      	mov	r3, r0
 80050c2:	461a      	mov	r2, r3
 80050c4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80050c8:	4313      	orrs	r3, r2
 80050ca:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
				VL53LMZ_DCI_CAL_CFG, 8,
                                (uint8_t*)&distance, 2, 0x00);

		status |= vl53lmz_dci_replace_data(p_dev, p_dev->temp_buffer,
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f203 5104 	addw	r1, r3, #1284	@ 0x504
 80050d4:	2302      	movs	r3, #2
 80050d6:	9302      	str	r3, [sp, #8]
 80050d8:	2302      	movs	r3, #2
 80050da:	9301      	str	r3, [sp, #4]
 80050dc:	f107 0316 	add.w	r3, r7, #22
 80050e0:	9300      	str	r3, [sp, #0]
 80050e2:	2308      	movs	r3, #8
 80050e4:	f245 4270 	movw	r2, #21616	@ 0x5470
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f7ff fb1d 	bl	8004728 <vl53lmz_dci_replace_data>
 80050ee:	4603      	mov	r3, r0
 80050f0:	461a      	mov	r2, r3
 80050f2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80050f6:	4313      	orrs	r3, r2
 80050f8:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
				VL53LMZ_DCI_CAL_CFG, 8,
                                (uint8_t*)&reflectance, 2,0x02);

		status |= vl53lmz_dci_replace_data(p_dev, p_dev->temp_buffer,
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f203 5104 	addw	r1, r3, #1284	@ 0x504
 8005102:	2304      	movs	r3, #4
 8005104:	9302      	str	r3, [sp, #8]
 8005106:	2301      	movs	r3, #1
 8005108:	9301      	str	r3, [sp, #4]
 800510a:	f107 0315 	add.w	r3, r7, #21
 800510e:	9300      	str	r3, [sp, #0]
 8005110:	2308      	movs	r3, #8
 8005112:	f245 4270 	movw	r2, #21616	@ 0x5470
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f7ff fb06 	bl	8004728 <vl53lmz_dci_replace_data>
 800511c:	4603      	mov	r3, r0
 800511e:	461a      	mov	r2, r3
 8005120:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8005124:	4313      	orrs	r3, r2
 8005126:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
				VL53LMZ_DCI_CAL_CFG, 8,
                                (uint8_t*)&samples, 1, 0x04);

		/* Program output for Xtalk calibration */
		status |= _vl53lmz_program_output_config(p_dev);
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f7ff fdfa 	bl	8004d24 <_vl53lmz_program_output_config>
 8005130:	4603      	mov	r3, r0
 8005132:	461a      	mov	r2, r3
 8005134:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8005138:	4313      	orrs	r3, r2
 800513a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

		/* Start ranging session */
		status |= WrMulti(&(p_dev->platform),
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8005144:	2304      	movs	r3, #4
 8005146:	f642 71fc 	movw	r1, #12284	@ 0x2ffc
 800514a:	f000 fa93 	bl	8005674 <WrMulti>
 800514e:	4603      	mov	r3, r0
 8005150:	461a      	mov	r2, r3
 8005152:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8005156:	4313      	orrs	r3, r2
 8005158:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
				VL53LMZ_UI_CMD_END - (uint16_t)(4 - 1),
				(uint8_t*)cmd, sizeof(cmd));
		status |= _vl53lmz_poll_for_answer(p_dev,
 800515c:	2203      	movs	r2, #3
 800515e:	f44f 5130 	mov.w	r1, #11264	@ 0x2c00
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	f7ff fda0 	bl	8004ca8 <_vl53lmz_poll_for_answer>
 8005168:	4603      	mov	r3, r0
 800516a:	461a      	mov	r2, r3
 800516c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8005170:	4313      	orrs	r3, r2
 8005172:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
				VL53LMZ_UI_CMD_STATUS, 0x3);

		/* Wait for end of calibration */
		do {
			status |= RdMulti(&(p_dev->platform), 
 8005176:	68f8      	ldr	r0, [r7, #12]
                                          0x0, p_dev->temp_buffer, 4);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f203 5204 	addw	r2, r3, #1284	@ 0x504
			status |= RdMulti(&(p_dev->platform), 
 800517e:	2304      	movs	r3, #4
 8005180:	2100      	movs	r1, #0
 8005182:	f000 fa97 	bl	80056b4 <RdMulti>
 8005186:	4603      	mov	r3, r0
 8005188:	461a      	mov	r2, r3
 800518a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800518e:	4313      	orrs	r3, r2
 8005190:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
			if(p_dev->temp_buffer[0] != VL53LMZ_STATUS_ERROR)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f893 3504 	ldrb.w	r3, [r3, #1284]	@ 0x504
 800519a:	2bff      	cmp	r3, #255	@ 0xff
 800519c:	d019      	beq.n	80051d2 <vl53lmz_calibrate_xtalk+0x2e2>
			{
				/* Coverglass too good for Xtalk calibration */
				if((p_dev->temp_buffer[2] >= (uint8_t)0x7f) &&
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f893 3506 	ldrb.w	r3, [r3, #1286]	@ 0x506
 80051a4:	2b7e      	cmp	r3, #126	@ 0x7e
 80051a6:	d910      	bls.n	80051ca <vl53lmz_calibrate_xtalk+0x2da>
				(((uint16_t)(p_dev->temp_buffer[3] & 
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f893 3507 	ldrb.w	r3, [r3, #1287]	@ 0x507
                                 (uint16_t)0x80) >> 7) == (uint16_t)1))
 80051ae:	09db      	lsrs	r3, r3, #7
 80051b0:	b2db      	uxtb	r3, r3
				if((p_dev->temp_buffer[2] >= (uint8_t)0x7f) &&
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d109      	bne.n	80051ca <vl53lmz_calibrate_xtalk+0x2da>
				{
					(void)memcpy(p_dev->xtalk_data, 
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f503 70fe 	add.w	r0, r3, #508	@ 0x1fc
                                               p_dev->default_xtalk,
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	691b      	ldr	r3, [r3, #16]
					(void)memcpy(p_dev->xtalk_data, 
 80051c0:	f44f 7242 	mov.w	r2, #776	@ 0x308
 80051c4:	4619      	mov	r1, r3
 80051c6:	f01e fa2a 	bl	802361e <memcpy>
                                               VL53LMZ_XTALK_BUFFER_SIZE);
				}
				continue_loop = (uint8_t)0;
 80051ca:	2300      	movs	r3, #0
 80051cc:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 80051d0:	e01d      	b.n	800520e <vl53lmz_calibrate_xtalk+0x31e>
			}
			else if(timeout >= (uint16_t)400)
 80051d2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80051d4:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80051d8:	d30a      	bcc.n	80051f0 <vl53lmz_calibrate_xtalk+0x300>
			{
				status |= VL53LMZ_STATUS_ERROR;
 80051da:	23ff      	movs	r3, #255	@ 0xff
 80051dc:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
				continue_loop = (uint8_t)0;
 80051e0:	2300      	movs	r3, #0
 80051e2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 80051e6:	e012      	b.n	800520e <vl53lmz_calibrate_xtalk+0x31e>
 80051e8:	0803f844 	.word	0x0803f844
 80051ec:	0803f418 	.word	0x0803f418
			}
			else
			{
				timeout++;
 80051f0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80051f2:	3301      	adds	r3, #1
 80051f4:	86fb      	strh	r3, [r7, #54]	@ 0x36
				status |= WaitMs(&(p_dev->platform), 50);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2132      	movs	r1, #50	@ 0x32
 80051fa:	4618      	mov	r0, r3
 80051fc:	f000 fad7 	bl	80057ae <WaitMs>
 8005200:	4603      	mov	r3, r0
 8005202:	461a      	mov	r2, r3
 8005204:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8005208:	4313      	orrs	r3, r2
 800520a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
			}

		}while (continue_loop == (uint8_t)1);
 800520e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8005212:	2b01      	cmp	r3, #1
 8005214:	d0af      	beq.n	8005176 <vl53lmz_calibrate_xtalk+0x286>
	}

	/* Save Xtalk data into the Xtalk buffer */
        (void)memcpy(p_dev->temp_buffer, VL53LMZ_GET_XTALK_CMD,
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f203 5304 	addw	r3, r3, #1284	@ 0x504
 800521c:	4a62      	ldr	r2, [pc, #392]	@ (80053a8 <vl53lmz_calibrate_xtalk+0x4b8>)
 800521e:	4618      	mov	r0, r3
 8005220:	4611      	mov	r1, r2
 8005222:	2348      	movs	r3, #72	@ 0x48
 8005224:	461a      	mov	r2, r3
 8005226:	f01e f9fa 	bl	802361e <memcpy>
               sizeof(VL53LMZ_GET_XTALK_CMD));
	status |= WrMulti(&(p_dev->platform), 0x2fb8,
 800522a:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer, 
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f203 5204 	addw	r2, r3, #1284	@ 0x504
	status |= WrMulti(&(p_dev->platform), 0x2fb8,
 8005232:	2348      	movs	r3, #72	@ 0x48
 8005234:	f642 71b8 	movw	r1, #12216	@ 0x2fb8
 8005238:	f000 fa1c 	bl	8005674 <WrMulti>
 800523c:	4603      	mov	r3, r0
 800523e:	461a      	mov	r2, r3
 8005240:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8005244:	4313      	orrs	r3, r2
 8005246:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                        (uint16_t)sizeof(VL53LMZ_GET_XTALK_CMD));
	status |= _vl53lmz_poll_for_answer(p_dev,VL53LMZ_UI_CMD_STATUS, 0x03);
 800524a:	2203      	movs	r2, #3
 800524c:	f44f 5130 	mov.w	r1, #11264	@ 0x2c00
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f7ff fd29 	bl	8004ca8 <_vl53lmz_poll_for_answer>
 8005256:	4603      	mov	r3, r0
 8005258:	461a      	mov	r2, r3
 800525a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800525e:	4313      	orrs	r3, r2
 8005260:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	status |= RdMulti(&(p_dev->platform), VL53LMZ_UI_CMD_START,
 8005264:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer, 
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f203 5204 	addw	r2, r3, #1284	@ 0x504
	status |= RdMulti(&(p_dev->platform), VL53LMZ_UI_CMD_START,
 800526c:	f44f 7343 	mov.w	r3, #780	@ 0x30c
 8005270:	f642 4104 	movw	r1, #11268	@ 0x2c04
 8005274:	f000 fa1e 	bl	80056b4 <RdMulti>
 8005278:	4603      	mov	r3, r0
 800527a:	461a      	mov	r2, r3
 800527c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8005280:	4313      	orrs	r3, r2
 8005282:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                        VL53LMZ_XTALK_BUFFER_SIZE + (uint16_t)4);

	(void)memcpy(&(p_dev->xtalk_data[0]), &(p_dev->temp_buffer[8]),
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f503 70fe 	add.w	r0, r3, #508	@ 0x1fc
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f203 530c 	addw	r3, r3, #1292	@ 0x50c
 8005292:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8005296:	4619      	mov	r1, r3
 8005298:	f01e f9c1 	bl	802361e <memcpy>
			VL53LMZ_XTALK_BUFFER_SIZE - (uint16_t)8);
	(void)memcpy(&(p_dev->xtalk_data[VL53LMZ_XTALK_BUFFER_SIZE
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f203 43fc 	addw	r3, r3, #1276	@ 0x4fc
 80052a2:	461a      	mov	r2, r3
 80052a4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80052a8:	cb03      	ldmia	r3!, {r0, r1}
 80052aa:	6010      	str	r0, [r2, #0]
 80052ac:	6051      	str	r1, [r2, #4]
                       - (uint16_t)8]), footer, sizeof(footer));

	/* Reset default buffer */
	status |= WrMulti(&(p_dev->platform), 0x2c34,
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	68da      	ldr	r2, [r3, #12]
 80052b4:	f44f 7373 	mov.w	r3, #972	@ 0x3cc
 80052b8:	f642 4134 	movw	r1, #11316	@ 0x2c34
 80052bc:	f000 f9da 	bl	8005674 <WrMulti>
 80052c0:	4603      	mov	r3, r0
 80052c2:	461a      	mov	r2, r3
 80052c4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80052c8:	4313      	orrs	r3, r2
 80052ca:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
			p_dev->default_configuration,
			VL53LMZ_CONFIGURATION_SIZE);
	status |= _vl53lmz_poll_for_answer(p_dev,VL53LMZ_UI_CMD_STATUS, 0x03);
 80052ce:	2203      	movs	r2, #3
 80052d0:	f44f 5130 	mov.w	r1, #11264	@ 0x2c00
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f7ff fce7 	bl	8004ca8 <_vl53lmz_poll_for_answer>
 80052da:	4603      	mov	r3, r0
 80052dc:	461a      	mov	r2, r3
 80052de:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80052e2:	4313      	orrs	r3, r2
 80052e4:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

	/* Reset initial configuration */
	status |= vl53lmz_set_resolution(p_dev, resolution);
 80052e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80052ec:	4619      	mov	r1, r3
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f7fe fcd1 	bl	8003c96 <vl53lmz_set_resolution>
 80052f4:	4603      	mov	r3, r0
 80052f6:	461a      	mov	r2, r3
 80052f8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80052fc:	4313      	orrs	r3, r2
 80052fe:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	status |= vl53lmz_set_ranging_frequency_hz(p_dev, frequency);
 8005302:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005306:	4619      	mov	r1, r3
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	f7fe fdb7 	bl	8003e7c <vl53lmz_set_ranging_frequency_hz>
 800530e:	4603      	mov	r3, r0
 8005310:	461a      	mov	r2, r3
 8005312:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8005316:	4313      	orrs	r3, r2
 8005318:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	status |= vl53lmz_set_integration_time_ms(p_dev, integration_time_ms);
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	4619      	mov	r1, r3
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f7fe fdf7 	bl	8003f14 <vl53lmz_set_integration_time_ms>
 8005326:	4603      	mov	r3, r0
 8005328:	461a      	mov	r2, r3
 800532a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800532e:	4313      	orrs	r3, r2
 8005330:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	status |= vl53lmz_set_sharpener_percent(p_dev, sharp_prct);
 8005334:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005338:	4619      	mov	r1, r3
 800533a:	68f8      	ldr	r0, [r7, #12]
 800533c:	f7fe fe4c 	bl	8003fd8 <vl53lmz_set_sharpener_percent>
 8005340:	4603      	mov	r3, r0
 8005342:	461a      	mov	r2, r3
 8005344:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8005348:	4313      	orrs	r3, r2
 800534a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	status |= vl53lmz_set_target_order(p_dev, target_order);
 800534e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005352:	4619      	mov	r1, r3
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f7fe fe96 	bl	8004086 <vl53lmz_set_target_order>
 800535a:	4603      	mov	r3, r0
 800535c:	461a      	mov	r2, r3
 800535e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8005362:	4313      	orrs	r3, r2
 8005364:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	status |= vl53lmz_set_xtalk_margin(p_dev, xtalk_margin);
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	4619      	mov	r1, r3
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f000 f8e7 	bl	8005540 <vl53lmz_set_xtalk_margin>
 8005372:	4603      	mov	r3, r0
 8005374:	461a      	mov	r2, r3
 8005376:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800537a:	4313      	orrs	r3, r2
 800537c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	status |= vl53lmz_set_ranging_mode(p_dev, ranging_mode);
 8005380:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005384:	4619      	mov	r1, r3
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	f7fe fecf 	bl	800412a <vl53lmz_set_ranging_mode>
 800538c:	4603      	mov	r3, r0
 800538e:	461a      	mov	r2, r3
 8005390:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8005394:	4313      	orrs	r3, r2
 8005396:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

	return status;
 800539a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3738      	adds	r7, #56	@ 0x38
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	0803f3d0 	.word	0x0803f3d0

080053ac <vl53lmz_get_caldata_xtalk>:

uint8_t vl53lmz_get_caldata_xtalk(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				*p_xtalk_data)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b086      	sub	sp, #24
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53LMZ_STATUS_OK, resolution;
 80053b6:	2300      	movs	r3, #0
 80053b8:	75fb      	strb	r3, [r7, #23]
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0x03, 0x04};
 80053ba:	4a37      	ldr	r2, [pc, #220]	@ (8005498 <vl53lmz_get_caldata_xtalk+0xec>)
 80053bc:	f107 030c 	add.w	r3, r7, #12
 80053c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80053c4:	e883 0003 	stmia.w	r3, {r0, r1}

	status |= vl53lmz_get_resolution(p_dev, &resolution);
 80053c8:	f107 0316 	add.w	r3, r7, #22
 80053cc:	4619      	mov	r1, r3
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f7fe fc3c 	bl	8003c4c <vl53lmz_get_resolution>
 80053d4:	4603      	mov	r3, r0
 80053d6:	461a      	mov	r2, r3
 80053d8:	7dfb      	ldrb	r3, [r7, #23]
 80053da:	4313      	orrs	r3, r2
 80053dc:	75fb      	strb	r3, [r7, #23]
	status |= vl53lmz_set_resolution(p_dev, VL53LMZ_RESOLUTION_8X8);
 80053de:	2140      	movs	r1, #64	@ 0x40
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f7fe fc58 	bl	8003c96 <vl53lmz_set_resolution>
 80053e6:	4603      	mov	r3, r0
 80053e8:	461a      	mov	r2, r3
 80053ea:	7dfb      	ldrb	r3, [r7, #23]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	75fb      	strb	r3, [r7, #23]

        (void)memcpy(p_dev->temp_buffer, VL53LMZ_GET_XTALK_CMD,
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f203 5304 	addw	r3, r3, #1284	@ 0x504
 80053f6:	4a29      	ldr	r2, [pc, #164]	@ (800549c <vl53lmz_get_caldata_xtalk+0xf0>)
 80053f8:	4618      	mov	r0, r3
 80053fa:	4611      	mov	r1, r2
 80053fc:	2348      	movs	r3, #72	@ 0x48
 80053fe:	461a      	mov	r2, r3
 8005400:	f01e f90d 	bl	802361e <memcpy>
               sizeof(VL53LMZ_GET_XTALK_CMD));
	status |= WrMulti(&(p_dev->platform), 0x2fb8,
 8005404:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer,  sizeof(VL53LMZ_GET_XTALK_CMD));
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f203 5204 	addw	r2, r3, #1284	@ 0x504
	status |= WrMulti(&(p_dev->platform), 0x2fb8,
 800540c:	2348      	movs	r3, #72	@ 0x48
 800540e:	f642 71b8 	movw	r1, #12216	@ 0x2fb8
 8005412:	f000 f92f 	bl	8005674 <WrMulti>
 8005416:	4603      	mov	r3, r0
 8005418:	461a      	mov	r2, r3
 800541a:	7dfb      	ldrb	r3, [r7, #23]
 800541c:	4313      	orrs	r3, r2
 800541e:	75fb      	strb	r3, [r7, #23]
	status |= _vl53lmz_poll_for_answer(p_dev,VL53LMZ_UI_CMD_STATUS, 0x03);
 8005420:	2203      	movs	r2, #3
 8005422:	f44f 5130 	mov.w	r1, #11264	@ 0x2c00
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f7ff fc3e 	bl	8004ca8 <_vl53lmz_poll_for_answer>
 800542c:	4603      	mov	r3, r0
 800542e:	461a      	mov	r2, r3
 8005430:	7dfb      	ldrb	r3, [r7, #23]
 8005432:	4313      	orrs	r3, r2
 8005434:	75fb      	strb	r3, [r7, #23]
	status |= RdMulti(&(p_dev->platform), VL53LMZ_UI_CMD_START,
 8005436:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, 
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f203 5204 	addw	r2, r3, #1284	@ 0x504
	status |= RdMulti(&(p_dev->platform), VL53LMZ_UI_CMD_START,
 800543e:	f44f 7343 	mov.w	r3, #780	@ 0x30c
 8005442:	f642 4104 	movw	r1, #11268	@ 0x2c04
 8005446:	f000 f935 	bl	80056b4 <RdMulti>
 800544a:	4603      	mov	r3, r0
 800544c:	461a      	mov	r2, r3
 800544e:	7dfb      	ldrb	r3, [r7, #23]
 8005450:	4313      	orrs	r3, r2
 8005452:	75fb      	strb	r3, [r7, #23]
                        VL53LMZ_XTALK_BUFFER_SIZE + (uint16_t)4);

	(void)memcpy(&(p_xtalk_data[0]), &(p_dev->temp_buffer[8]),
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f203 530c 	addw	r3, r3, #1292	@ 0x50c
 800545a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800545e:	4619      	mov	r1, r3
 8005460:	6838      	ldr	r0, [r7, #0]
 8005462:	f01e f8dc 	bl	802361e <memcpy>
			VL53LMZ_XTALK_BUFFER_SIZE-(uint16_t)8);
	(void)memcpy(&(p_xtalk_data[VL53LMZ_XTALK_BUFFER_SIZE - (uint16_t)8]),
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800546c:	461a      	mov	r2, r3
 800546e:	f107 030c 	add.w	r3, r7, #12
 8005472:	cb03      	ldmia	r3!, {r0, r1}
 8005474:	6010      	str	r0, [r2, #0]
 8005476:	6051      	str	r1, [r2, #4]
			footer, sizeof(footer));

	status |= vl53lmz_set_resolution(p_dev, resolution);
 8005478:	7dbb      	ldrb	r3, [r7, #22]
 800547a:	4619      	mov	r1, r3
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f7fe fc0a 	bl	8003c96 <vl53lmz_set_resolution>
 8005482:	4603      	mov	r3, r0
 8005484:	461a      	mov	r2, r3
 8005486:	7dfb      	ldrb	r3, [r7, #23]
 8005488:	4313      	orrs	r3, r2
 800548a:	75fb      	strb	r3, [r7, #23]

	return status;
 800548c:	7dfb      	ldrb	r3, [r7, #23]
}
 800548e:	4618      	mov	r0, r3
 8005490:	3718      	adds	r7, #24
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	0803f844 	.word	0x0803f844
 800549c:	0803f3d0 	.word	0x0803f3d0

080054a0 <vl53lmz_set_caldata_xtalk>:

uint8_t vl53lmz_set_caldata_xtalk(
		VL53LMZ_Configuration		*p_dev,
		uint8_t				*p_xtalk_data)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
	uint8_t resolution, status = VL53LMZ_STATUS_OK;
 80054aa:	2300      	movs	r3, #0
 80054ac:	73fb      	strb	r3, [r7, #15]

	status |= vl53lmz_get_resolution(p_dev, &resolution);
 80054ae:	f107 030e 	add.w	r3, r7, #14
 80054b2:	4619      	mov	r1, r3
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f7fe fbc9 	bl	8003c4c <vl53lmz_get_resolution>
 80054ba:	4603      	mov	r3, r0
 80054bc:	461a      	mov	r2, r3
 80054be:	7bfb      	ldrb	r3, [r7, #15]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	73fb      	strb	r3, [r7, #15]
	(void)memcpy(p_dev->xtalk_data, p_xtalk_data, VL53LMZ_XTALK_BUFFER_SIZE);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 80054ca:	f44f 7242 	mov.w	r2, #776	@ 0x308
 80054ce:	6839      	ldr	r1, [r7, #0]
 80054d0:	4618      	mov	r0, r3
 80054d2:	f01e f8a4 	bl	802361e <memcpy>
	status |= vl53lmz_set_resolution(p_dev, resolution);
 80054d6:	7bbb      	ldrb	r3, [r7, #14]
 80054d8:	4619      	mov	r1, r3
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f7fe fbdb 	bl	8003c96 <vl53lmz_set_resolution>
 80054e0:	4603      	mov	r3, r0
 80054e2:	461a      	mov	r2, r3
 80054e4:	7bfb      	ldrb	r3, [r7, #15]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	73fb      	strb	r3, [r7, #15]

	return status;
 80054ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3710      	adds	r7, #16
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <vl53lmz_get_xtalk_margin>:

uint8_t vl53lmz_get_xtalk_margin(
		VL53LMZ_Configuration		*p_dev,
		uint32_t			*p_xtalk_margin)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 80054fe:	2300      	movs	r3, #0
 8005500:	73fb      	strb	r3, [r7, #15]

	status |= vl53lmz_dci_read_data(p_dev, (uint8_t*)p_dev->temp_buffer,
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f203 5104 	addw	r1, r3, #1284	@ 0x504
 8005508:	2310      	movs	r3, #16
 800550a:	f64a 5294 	movw	r2, #44436	@ 0xad94
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f7fe ffe0 	bl	80044d4 <vl53lmz_dci_read_data>
 8005514:	4603      	mov	r3, r0
 8005516:	461a      	mov	r2, r3
 8005518:	7bfb      	ldrb	r3, [r7, #15]
 800551a:	4313      	orrs	r3, r2
 800551c:	73fb      	strb	r3, [r7, #15]
			VL53LMZ_DCI_XTALK_CFG, 16);

	(void)memcpy(p_xtalk_margin, p_dev->temp_buffer, 4);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f203 5304 	addw	r3, r3, #1284	@ 0x504
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	461a      	mov	r2, r3
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	601a      	str	r2, [r3, #0]
	*p_xtalk_margin = *p_xtalk_margin/(uint32_t)2048;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	0ada      	lsrs	r2, r3, #11
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	601a      	str	r2, [r3, #0]

	return status;
 8005536:	7bfb      	ldrb	r3, [r7, #15]
}
 8005538:	4618      	mov	r0, r3
 800553a:	3710      	adds	r7, #16
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <vl53lmz_set_xtalk_margin>:

uint8_t vl53lmz_set_xtalk_margin(
		VL53LMZ_Configuration		*p_dev,
		uint32_t			xtalk_margin)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b088      	sub	sp, #32
 8005544:	af04      	add	r7, sp, #16
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53LMZ_STATUS_OK;
 800554a:	2300      	movs	r3, #0
 800554c:	73fb      	strb	r3, [r7, #15]
        uint32_t margin_kcps = xtalk_margin;
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	60bb      	str	r3, [r7, #8]

	if(margin_kcps > (uint32_t)10000)
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005558:	4293      	cmp	r3, r2
 800555a:	d904      	bls.n	8005566 <vl53lmz_set_xtalk_margin+0x26>
	{
		status |= VL53LMZ_STATUS_INVALID_PARAM;
 800555c:	7bfb      	ldrb	r3, [r7, #15]
 800555e:	f043 037f 	orr.w	r3, r3, #127	@ 0x7f
 8005562:	73fb      	strb	r3, [r7, #15]
 8005564:	e017      	b.n	8005596 <vl53lmz_set_xtalk_margin+0x56>
	}
	else
	{
		margin_kcps = margin_kcps*(uint32_t)2048;
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	02db      	lsls	r3, r3, #11
 800556a:	60bb      	str	r3, [r7, #8]
		status |= vl53lmz_dci_replace_data(p_dev, p_dev->temp_buffer,
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f203 5104 	addw	r1, r3, #1284	@ 0x504
 8005572:	2300      	movs	r3, #0
 8005574:	9302      	str	r3, [sp, #8]
 8005576:	2304      	movs	r3, #4
 8005578:	9301      	str	r3, [sp, #4]
 800557a:	f107 0308 	add.w	r3, r7, #8
 800557e:	9300      	str	r3, [sp, #0]
 8005580:	2310      	movs	r3, #16
 8005582:	f64a 5294 	movw	r2, #44436	@ 0xad94
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f7ff f8ce 	bl	8004728 <vl53lmz_dci_replace_data>
 800558c:	4603      	mov	r3, r0
 800558e:	461a      	mov	r2, r3
 8005590:	7bfb      	ldrb	r3, [r7, #15]
 8005592:	4313      	orrs	r3, r2
 8005594:	73fb      	strb	r3, [r7, #15]
				VL53LMZ_DCI_XTALK_CFG, 16,
                                (uint8_t*)&margin_kcps, 4, 0x00);
	}

	return status;
 8005596:	7bfb      	ldrb	r3, [r7, #15]
}
 8005598:	4618      	mov	r0, r3
 800559a:	3710      	adds	r7, #16
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <LMZ_platform_init>:

extern I2C_HandleTypeDef 	hi2c1;

uint8_t LMZ_platform_init(
		VL53LMZ_Platform *p_platform)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
	p_platform->address = 0x52;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2252      	movs	r2, #82	@ 0x52
 80055ac:	801a      	strh	r2, [r3, #0]

	return(0);
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <RdByte>:

uint8_t RdByte(
		VL53LMZ_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_value)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b088      	sub	sp, #32
 80055c0:	af02      	add	r7, sp, #8
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	460b      	mov	r3, r1
 80055c6:	607a      	str	r2, [r7, #4]
 80055c8:	817b      	strh	r3, [r7, #10]
	int8_t status = 0;
 80055ca:	2300      	movs	r3, #0
 80055cc:	75fb      	strb	r3, [r7, #23]
	uint8_t data_write[2];
	uint8_t data_read[1];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 80055ce:	897b      	ldrh	r3, [r7, #10]
 80055d0:	0a1b      	lsrs	r3, r3, #8
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	753b      	strb	r3, [r7, #20]
	data_write[1] = RegisterAdress & 0xFF;
 80055d8:	897b      	ldrh	r3, [r7, #10]
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	757b      	strb	r3, [r7, #21]
	status = HAL_I2C_Master_Transmit(&hi2c1, p_platform->address, data_write, 2, 100);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	8819      	ldrh	r1, [r3, #0]
 80055e2:	f107 0214 	add.w	r2, r7, #20
 80055e6:	2364      	movs	r3, #100	@ 0x64
 80055e8:	9300      	str	r3, [sp, #0]
 80055ea:	2302      	movs	r3, #2
 80055ec:	480c      	ldr	r0, [pc, #48]	@ (8005620 <RdByte+0x64>)
 80055ee:	f002 f921 	bl	8007834 <HAL_I2C_Master_Transmit>
 80055f2:	4603      	mov	r3, r0
 80055f4:	75fb      	strb	r3, [r7, #23]
	status = HAL_I2C_Master_Receive(&hi2c1, p_platform->address, data_read, 1, 100);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	8819      	ldrh	r1, [r3, #0]
 80055fa:	f107 0210 	add.w	r2, r7, #16
 80055fe:	2364      	movs	r3, #100	@ 0x64
 8005600:	9300      	str	r3, [sp, #0]
 8005602:	2301      	movs	r3, #1
 8005604:	4806      	ldr	r0, [pc, #24]	@ (8005620 <RdByte+0x64>)
 8005606:	f002 fa13 	bl	8007a30 <HAL_I2C_Master_Receive>
 800560a:	4603      	mov	r3, r0
 800560c:	75fb      	strb	r3, [r7, #23]
	*p_value = data_read[0];
 800560e:	7c3a      	ldrb	r2, [r7, #16]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	701a      	strb	r2, [r3, #0]

	return(status);
 8005614:	7dfb      	ldrb	r3, [r7, #23]
}
 8005616:	4618      	mov	r0, r3
 8005618:	3718      	adds	r7, #24
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	20009ae0 	.word	0x20009ae0

08005624 <WrByte>:

uint8_t WrByte(
		VL53LMZ_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t value)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b086      	sub	sp, #24
 8005628:	af02      	add	r7, sp, #8
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	460b      	mov	r3, r1
 800562e:	807b      	strh	r3, [r7, #2]
 8005630:	4613      	mov	r3, r2
 8005632:	707b      	strb	r3, [r7, #1]
	uint8_t data_write[3];
	int8_t status = 0;
 8005634:	2300      	movs	r3, #0
 8005636:	73fb      	strb	r3, [r7, #15]

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8005638:	887b      	ldrh	r3, [r7, #2]
 800563a:	0a1b      	lsrs	r3, r3, #8
 800563c:	b29b      	uxth	r3, r3
 800563e:	b2db      	uxtb	r3, r3
 8005640:	733b      	strb	r3, [r7, #12]
	data_write[1] = RegisterAdress & 0xFF;
 8005642:	887b      	ldrh	r3, [r7, #2]
 8005644:	b2db      	uxtb	r3, r3
 8005646:	737b      	strb	r3, [r7, #13]
	data_write[2] = value & 0xFF;
 8005648:	787b      	ldrb	r3, [r7, #1]
 800564a:	73bb      	strb	r3, [r7, #14]
	status = HAL_I2C_Master_Transmit(&hi2c1, p_platform->address, data_write, 3, 100);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	8819      	ldrh	r1, [r3, #0]
 8005650:	f107 020c 	add.w	r2, r7, #12
 8005654:	2364      	movs	r3, #100	@ 0x64
 8005656:	9300      	str	r3, [sp, #0]
 8005658:	2303      	movs	r3, #3
 800565a:	4805      	ldr	r0, [pc, #20]	@ (8005670 <WrByte+0x4c>)
 800565c:	f002 f8ea 	bl	8007834 <HAL_I2C_Master_Transmit>
 8005660:	4603      	mov	r3, r0
 8005662:	73fb      	strb	r3, [r7, #15]

	return(status);
 8005664:	7bfb      	ldrb	r3, [r7, #15]
}
 8005666:	4618      	mov	r0, r3
 8005668:	3710      	adds	r7, #16
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	20009ae0 	.word	0x20009ae0

08005674 <WrMulti>:
uint8_t WrMulti(
		VL53LMZ_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b08a      	sub	sp, #40	@ 0x28
 8005678:	af04      	add	r7, sp, #16
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	607a      	str	r2, [r7, #4]
 800567e:	603b      	str	r3, [r7, #0]
 8005680:	460b      	mov	r3, r1
 8005682:	817b      	strh	r3, [r7, #10]
	int8_t status = HAL_I2C_Mem_Write(&hi2c1, p_platform->address, RegisterAdress,
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	8819      	ldrh	r1, [r3, #0]
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	b29b      	uxth	r3, r3
 800568c:	897a      	ldrh	r2, [r7, #10]
 800568e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8005692:	9002      	str	r0, [sp, #8]
 8005694:	9301      	str	r3, [sp, #4]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	9300      	str	r3, [sp, #0]
 800569a:	2310      	movs	r3, #16
 800569c:	4804      	ldr	r0, [pc, #16]	@ (80056b0 <WrMulti+0x3c>)
 800569e:	f003 fc41 	bl	8008f24 <HAL_I2C_Mem_Write>
 80056a2:	4603      	mov	r3, r0
 80056a4:	75fb      	strb	r3, [r7, #23]
			I2C_MEMADD_SIZE_16BIT, p_values, size, 65535);

	return(status);
 80056a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3718      	adds	r7, #24
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	20009ae0 	.word	0x20009ae0

080056b4 <RdMulti>:
uint8_t RdMulti(
		VL53LMZ_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b088      	sub	sp, #32
 80056b8:	af02      	add	r7, sp, #8
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	607a      	str	r2, [r7, #4]
 80056be:	603b      	str	r3, [r7, #0]
 80056c0:	460b      	mov	r3, r1
 80056c2:	817b      	strh	r3, [r7, #10]
	uint8_t status;
	uint8_t data_write[2];
	data_write[0] = (RegisterAdress>>8) & 0xFF;
 80056c4:	897b      	ldrh	r3, [r7, #10]
 80056c6:	0a1b      	lsrs	r3, r3, #8
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	753b      	strb	r3, [r7, #20]
	data_write[1] = RegisterAdress & 0xFF;
 80056ce:	897b      	ldrh	r3, [r7, #10]
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	757b      	strb	r3, [r7, #21]

	status = HAL_I2C_Master_Transmit(&hi2c1, p_platform->address, data_write, 2, 10);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	8819      	ldrh	r1, [r3, #0]
 80056d8:	f107 0214 	add.w	r2, r7, #20
 80056dc:	230a      	movs	r3, #10
 80056de:	9300      	str	r3, [sp, #0]
 80056e0:	2302      	movs	r3, #2
 80056e2:	480d      	ldr	r0, [pc, #52]	@ (8005718 <RdMulti+0x64>)
 80056e4:	f002 f8a6 	bl	8007834 <HAL_I2C_Master_Transmit>
 80056e8:	4603      	mov	r3, r0
 80056ea:	75fb      	strb	r3, [r7, #23]
	status += HAL_I2C_Master_Receive(&hi2c1, p_platform->address, p_values, size, 400);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	8819      	ldrh	r1, [r3, #0]
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80056f8:	9200      	str	r2, [sp, #0]
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	4806      	ldr	r0, [pc, #24]	@ (8005718 <RdMulti+0x64>)
 80056fe:	f002 f997 	bl	8007a30 <HAL_I2C_Master_Receive>
 8005702:	4603      	mov	r3, r0
 8005704:	461a      	mov	r2, r3
 8005706:	7dfb      	ldrb	r3, [r7, #23]
 8005708:	4413      	add	r3, r2
 800570a:	75fb      	strb	r3, [r7, #23]

	return status;
 800570c:	7dfb      	ldrb	r3, [r7, #23]
}
 800570e:	4618      	mov	r0, r3
 8005710:	3718      	adds	r7, #24
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	20009ae0 	.word	0x20009ae0

0800571c <Reset_Sensor>:

uint8_t Reset_Sensor(
		VL53LMZ_Platform *p_platform)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
	uint8_t status = 0;
 8005724:	2300      	movs	r3, #0
 8005726:	73fb      	strb	r3, [r7, #15]
//	HAL_GPIO_WritePin(LPn_C_GPIO_Port, LPn_C_Pin, GPIO_PIN_RESET);
	/* Set pin AVDD to LOW */
	/* Set pin VDDIO  to LOW */
	/* Set 0 to pin DUT_PWR */
//	HAL_GPIO_WritePin(PWR_EN_C_GPIO_Port, PWR_EN_C_Pin, GPIO_PIN_RESET);
	WaitMs(p_platform, 100);
 8005728:	2164      	movs	r1, #100	@ 0x64
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 f83f 	bl	80057ae <WaitMs>
//	HAL_GPIO_WritePin(LPn_C_GPIO_Port, LPn_C_Pin, GPIO_PIN_SET);
	/* Set pin AVDD of to HIGH */
	/* Set pin VDDIO of  to HIGH */
	/* Set 1 to pin DUT_PWR */
//	HAL_GPIO_WritePin(PWR_EN_C_GPIO_Port, PWR_EN_C_Pin, GPIO_PIN_RESET);
	WaitMs(p_platform, 100);
 8005730:	2164      	movs	r1, #100	@ 0x64
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 f83b 	bl	80057ae <WaitMs>

	return status;
 8005738:	7bfb      	ldrb	r3, [r7, #15]
}
 800573a:	4618      	mov	r0, r3
 800573c:	3710      	adds	r7, #16
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}

08005742 <SwapBuffer>:

void SwapBuffer(
		uint8_t 		*buffer,
		uint16_t 	 	 size)
{
 8005742:	b480      	push	{r7}
 8005744:	b085      	sub	sp, #20
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
 800574a:	460b      	mov	r3, r1
 800574c:	807b      	strh	r3, [r7, #2]
	uint32_t i;
	uint32_t tmp;
	
	/* Example of possible implementation using <string.h> */
	for(i = 0; i < size; i = i + 4) 
 800574e:	2300      	movs	r3, #0
 8005750:	60fb      	str	r3, [r7, #12]
 8005752:	e021      	b.n	8005798 <SwapBuffer+0x56>
	{
		tmp = (
		  buffer[i]<<24)
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	4413      	add	r3, r2
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	061a      	lsls	r2, r3, #24
		|(buffer[i+1]<<16)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	3301      	adds	r3, #1
 8005762:	6879      	ldr	r1, [r7, #4]
 8005764:	440b      	add	r3, r1
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	041b      	lsls	r3, r3, #16
 800576a:	431a      	orrs	r2, r3
		|(buffer[i+2]<<8)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	3302      	adds	r3, #2
 8005770:	6879      	ldr	r1, [r7, #4]
 8005772:	440b      	add	r3, r1
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	021b      	lsls	r3, r3, #8
 8005778:	4313      	orrs	r3, r2
		|(buffer[i+3]);
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	3203      	adds	r2, #3
 800577e:	6879      	ldr	r1, [r7, #4]
 8005780:	440a      	add	r2, r1
 8005782:	7812      	ldrb	r2, [r2, #0]
 8005784:	4313      	orrs	r3, r2
		tmp = (
 8005786:	60bb      	str	r3, [r7, #8]
		
		memcpy(&(buffer[i]), &tmp, 4);
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	4413      	add	r3, r2
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	601a      	str	r2, [r3, #0]
	for(i = 0; i < size; i = i + 4) 
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	3304      	adds	r3, #4
 8005796:	60fb      	str	r3, [r7, #12]
 8005798:	887b      	ldrh	r3, [r7, #2]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	429a      	cmp	r2, r3
 800579e:	d3d9      	bcc.n	8005754 <SwapBuffer+0x12>
	}
}	
 80057a0:	bf00      	nop
 80057a2:	bf00      	nop
 80057a4:	3714      	adds	r7, #20
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr

080057ae <WaitMs>:

uint8_t WaitMs(
		VL53LMZ_Platform *p_platform,
		uint32_t TimeMs)
{
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b082      	sub	sp, #8
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
 80057b6:	6039      	str	r1, [r7, #0]
	HAL_Delay(TimeMs);
 80057b8:	6838      	ldr	r0, [r7, #0]
 80057ba:	f000 f90b 	bl	80059d4 <HAL_Delay>
	return 0;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3708      	adds	r7, #8
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <wait_for_ToF_interrupt>:

uint8_t wait_for_ToF_interrupt(
	VL53LMZ_Platform *p_platform,
    volatile int *IntrCount)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
	(void)p_platform;

	HAL_SuspendTick();
 80057d2:	f000 f923 	bl	8005a1c <HAL_SuspendTick>
	__WFI(); /* Wait For Interrupt */
 80057d6:	bf30      	wfi
	HAL_ResumeTick();
 80057d8:	f000 f930 	bl	8005a3c <HAL_ResumeTick>
	if (*IntrCount != 0) {
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d004      	beq.n	80057ee <wait_for_ToF_interrupt+0x26>
		*IntrCount = 0;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	2200      	movs	r2, #0
 80057e8:	601a      	str	r2, [r3, #0]
		return(0);
 80057ea:	2300      	movs	r3, #0
 80057ec:	e000      	b.n	80057f0 <wait_for_ToF_interrupt+0x28>
	}

	return(1);
 80057ee:	2301      	movs	r3, #1
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3708      	adds	r7, #8
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80057fc:	4b0e      	ldr	r3, [pc, #56]	@ (8005838 <HAL_Init+0x40>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a0d      	ldr	r2, [pc, #52]	@ (8005838 <HAL_Init+0x40>)
 8005802:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005806:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005808:	4b0b      	ldr	r3, [pc, #44]	@ (8005838 <HAL_Init+0x40>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a0a      	ldr	r2, [pc, #40]	@ (8005838 <HAL_Init+0x40>)
 800580e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005812:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005814:	4b08      	ldr	r3, [pc, #32]	@ (8005838 <HAL_Init+0x40>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a07      	ldr	r2, [pc, #28]	@ (8005838 <HAL_Init+0x40>)
 800581a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800581e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005820:	2003      	movs	r0, #3
 8005822:	f000 fbc3 	bl	8005fac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005826:	2000      	movs	r0, #0
 8005828:	f000 f844 	bl	80058b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800582c:	f7fc f99a 	bl	8001b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	40023c00 	.word	0x40023c00

0800583c <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8005840:	4b11      	ldr	r3, [pc, #68]	@ (8005888 <HAL_DeInit+0x4c>)
 8005842:	4a12      	ldr	r2, [pc, #72]	@ (800588c <HAL_DeInit+0x50>)
 8005844:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8005846:	4b10      	ldr	r3, [pc, #64]	@ (8005888 <HAL_DeInit+0x4c>)
 8005848:	2200      	movs	r2, #0
 800584a:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 800584c:	4b0e      	ldr	r3, [pc, #56]	@ (8005888 <HAL_DeInit+0x4c>)
 800584e:	4a10      	ldr	r2, [pc, #64]	@ (8005890 <HAL_DeInit+0x54>)
 8005850:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8005852:	4b0d      	ldr	r3, [pc, #52]	@ (8005888 <HAL_DeInit+0x4c>)
 8005854:	2200      	movs	r2, #0
 8005856:	625a      	str	r2, [r3, #36]	@ 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8005858:	4b0b      	ldr	r3, [pc, #44]	@ (8005888 <HAL_DeInit+0x4c>)
 800585a:	4a0e      	ldr	r2, [pc, #56]	@ (8005894 <HAL_DeInit+0x58>)
 800585c:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 800585e:	4b0a      	ldr	r3, [pc, #40]	@ (8005888 <HAL_DeInit+0x4c>)
 8005860:	2200      	movs	r2, #0
 8005862:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8005864:	4b08      	ldr	r3, [pc, #32]	@ (8005888 <HAL_DeInit+0x4c>)
 8005866:	2280      	movs	r2, #128	@ 0x80
 8005868:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 800586a:	4b07      	ldr	r3, [pc, #28]	@ (8005888 <HAL_DeInit+0x4c>)
 800586c:	2200      	movs	r2, #0
 800586e:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8005870:	4b05      	ldr	r3, [pc, #20]	@ (8005888 <HAL_DeInit+0x4c>)
 8005872:	f04f 32ff 	mov.w	r2, #4294967295
 8005876:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8005878:	4b03      	ldr	r3, [pc, #12]	@ (8005888 <HAL_DeInit+0x4c>)
 800587a:	2200      	movs	r2, #0
 800587c:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800587e:	f000 f812 	bl	80058a6 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	bd80      	pop	{r7, pc}
 8005888:	40023800 	.word	0x40023800
 800588c:	10e2c80f 	.word	0x10e2c80f
 8005890:	00077931 	.word	0x00077931
 8005894:	0060109f 	.word	0x0060109f
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8005898:	b480      	push	{r7}
 800589a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800589c:	bf00      	nop
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr

080058a6 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80058a6:	b480      	push	{r7}
 80058a8:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 80058aa:	bf00      	nop
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80058bc:	4b12      	ldr	r3, [pc, #72]	@ (8005908 <HAL_InitTick+0x54>)
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	4b12      	ldr	r3, [pc, #72]	@ (800590c <HAL_InitTick+0x58>)
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	4619      	mov	r1, r3
 80058c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80058ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80058ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d2:	4618      	mov	r0, r3
 80058d4:	f000 fbb1 	bl	800603a <HAL_SYSTICK_Config>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d001      	beq.n	80058e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e00e      	b.n	8005900 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2b0f      	cmp	r3, #15
 80058e6:	d80a      	bhi.n	80058fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80058e8:	2200      	movs	r2, #0
 80058ea:	6879      	ldr	r1, [r7, #4]
 80058ec:	f04f 30ff 	mov.w	r0, #4294967295
 80058f0:	f000 fb67 	bl	8005fc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80058f4:	4a06      	ldr	r2, [pc, #24]	@ (8005910 <HAL_InitTick+0x5c>)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80058fa:	2300      	movs	r3, #0
 80058fc:	e000      	b.n	8005900 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
}
 8005900:	4618      	mov	r0, r3
 8005902:	3708      	adds	r7, #8
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	20000030 	.word	0x20000030
 800590c:	20000048 	.word	0x20000048
 8005910:	20000044 	.word	0x20000044

08005914 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005914:	b480      	push	{r7}
 8005916:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005918:	4b06      	ldr	r3, [pc, #24]	@ (8005934 <HAL_IncTick+0x20>)
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	461a      	mov	r2, r3
 800591e:	4b06      	ldr	r3, [pc, #24]	@ (8005938 <HAL_IncTick+0x24>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4413      	add	r3, r2
 8005924:	4a04      	ldr	r2, [pc, #16]	@ (8005938 <HAL_IncTick+0x24>)
 8005926:	6013      	str	r3, [r2, #0]
}
 8005928:	bf00      	nop
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	20000048 	.word	0x20000048
 8005938:	20009c90 	.word	0x20009c90

0800593c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800593c:	b480      	push	{r7}
 800593e:	af00      	add	r7, sp, #0
  return uwTick;
 8005940:	4b03      	ldr	r3, [pc, #12]	@ (8005950 <HAL_GetTick+0x14>)
 8005942:	681b      	ldr	r3, [r3, #0]
}
 8005944:	4618      	mov	r0, r3
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	20009c90 	.word	0x20009c90

08005954 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8005954:	b480      	push	{r7}
 8005956:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8005958:	4b03      	ldr	r3, [pc, #12]	@ (8005968 <HAL_GetTickPrio+0x14>)
 800595a:	681b      	ldr	r3, [r3, #0]
}
 800595c:	4618      	mov	r0, r3
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	20000044 	.word	0x20000044

0800596c <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	4603      	mov	r3, r0
 8005974:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status  = HAL_OK;
 8005976:	2300      	movs	r3, #0
 8005978:	73fb      	strb	r3, [r7, #15]
  HAL_TickFreqTypeDef prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 800597a:	4b0e      	ldr	r3, [pc, #56]	@ (80059b4 <HAL_SetTickFreq+0x48>)
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	79fa      	ldrb	r2, [r7, #7]
 8005980:	429a      	cmp	r2, r3
 8005982:	d012      	beq.n	80059aa <HAL_SetTickFreq+0x3e>
  {
    /* Back up uwTickFreq frequency */
    prevTickFreq = uwTickFreq;
 8005984:	4b0b      	ldr	r3, [pc, #44]	@ (80059b4 <HAL_SetTickFreq+0x48>)
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	73bb      	strb	r3, [r7, #14]

    /* Update uwTickFreq global variable used by HAL_InitTick() */
    uwTickFreq = Freq;
 800598a:	4a0a      	ldr	r2, [pc, #40]	@ (80059b4 <HAL_SetTickFreq+0x48>)
 800598c:	79fb      	ldrb	r3, [r7, #7]
 800598e:	7013      	strb	r3, [r2, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 8005990:	4b09      	ldr	r3, [pc, #36]	@ (80059b8 <HAL_SetTickFreq+0x4c>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4618      	mov	r0, r3
 8005996:	f7ff ff8d 	bl	80058b4 <HAL_InitTick>
 800599a:	4603      	mov	r3, r0
 800599c:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK)
 800599e:	7bfb      	ldrb	r3, [r7, #15]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d002      	beq.n	80059aa <HAL_SetTickFreq+0x3e>
    {
      /* Restore previous tick frequency */
      uwTickFreq = prevTickFreq;
 80059a4:	4a03      	ldr	r2, [pc, #12]	@ (80059b4 <HAL_SetTickFreq+0x48>)
 80059a6:	7bbb      	ldrb	r3, [r7, #14]
 80059a8:	7013      	strb	r3, [r2, #0]
    }
  }

  return status;
 80059aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	20000048 	.word	0x20000048
 80059b8:	20000044 	.word	0x20000044

080059bc <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80059bc:	b480      	push	{r7}
 80059be:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80059c0:	4b03      	ldr	r3, [pc, #12]	@ (80059d0 <HAL_GetTickFreq+0x14>)
 80059c2:	781b      	ldrb	r3, [r3, #0]
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	20000048 	.word	0x20000048

080059d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80059dc:	f7ff ffae 	bl	800593c <HAL_GetTick>
 80059e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ec:	d005      	beq.n	80059fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80059ee:	4b0a      	ldr	r3, [pc, #40]	@ (8005a18 <HAL_Delay+0x44>)
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	461a      	mov	r2, r3
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	4413      	add	r3, r2
 80059f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80059fa:	bf00      	nop
 80059fc:	f7ff ff9e 	bl	800593c <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d8f7      	bhi.n	80059fc <HAL_Delay+0x28>
  {
  }
}
 8005a0c:	bf00      	nop
 8005a0e:	bf00      	nop
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	20000048 	.word	0x20000048

08005a1c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8005a20:	4b05      	ldr	r3, [pc, #20]	@ (8005a38 <HAL_SuspendTick+0x1c>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a04      	ldr	r2, [pc, #16]	@ (8005a38 <HAL_SuspendTick+0x1c>)
 8005a26:	f023 0302 	bic.w	r3, r3, #2
 8005a2a:	6013      	str	r3, [r2, #0]
}
 8005a2c:	bf00      	nop
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	e000e010 	.word	0xe000e010

08005a3c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8005a40:	4b05      	ldr	r3, [pc, #20]	@ (8005a58 <HAL_ResumeTick+0x1c>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a04      	ldr	r2, [pc, #16]	@ (8005a58 <HAL_ResumeTick+0x1c>)
 8005a46:	f043 0302 	orr.w	r3, r3, #2
 8005a4a:	6013      	str	r3, [r2, #0]
}
 8005a4c:	bf00      	nop
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	e000e010 	.word	0xe000e010

08005a5c <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	af00      	add	r7, sp, #0
  return __STM32F4xx_HAL_VERSION;
 8005a60:	4b02      	ldr	r3, [pc, #8]	@ (8005a6c <HAL_GetHalVersion+0x10>)
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr
 8005a6c:	01080200 	.word	0x01080200

08005a70 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005a70:	b480      	push	{r7}
 8005a72:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) >> 16U);
 8005a74:	4b03      	ldr	r3, [pc, #12]	@ (8005a84 <HAL_GetREVID+0x14>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	0c1b      	lsrs	r3, r3, #16
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr
 8005a84:	e0042000 	.word	0xe0042000

08005a88 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8005a8c:	4b04      	ldr	r3, [pc, #16]	@ (8005aa0 <HAL_GetDEVID+0x18>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	e0042000 	.word	0xe0042000

08005aa4 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8005aa8:	4b05      	ldr	r3, [pc, #20]	@ (8005ac0 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	4a04      	ldr	r2, [pc, #16]	@ (8005ac0 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8005aae:	f043 0301 	orr.w	r3, r3, #1
 8005ab2:	6053      	str	r3, [r2, #4]
}
 8005ab4:	bf00      	nop
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	e0042000 	.word	0xe0042000

08005ac4 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8005ac8:	4b05      	ldr	r3, [pc, #20]	@ (8005ae0 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	4a04      	ldr	r2, [pc, #16]	@ (8005ae0 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
 8005ace:	f023 0301 	bic.w	r3, r3, #1
 8005ad2:	6053      	str	r3, [r2, #4]
}
 8005ad4:	bf00      	nop
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	e0042000 	.word	0xe0042000

08005ae4 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8005ae8:	4b05      	ldr	r3, [pc, #20]	@ (8005b00 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	4a04      	ldr	r2, [pc, #16]	@ (8005b00 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 8005aee:	f043 0302 	orr.w	r3, r3, #2
 8005af2:	6053      	str	r3, [r2, #4]
}
 8005af4:	bf00      	nop
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	e0042000 	.word	0xe0042000

08005b04 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8005b04:	b480      	push	{r7}
 8005b06:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8005b08:	4b05      	ldr	r3, [pc, #20]	@ (8005b20 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	4a04      	ldr	r2, [pc, #16]	@ (8005b20 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
 8005b0e:	f023 0302 	bic.w	r3, r3, #2
 8005b12:	6053      	str	r3, [r2, #4]
}
 8005b14:	bf00      	nop
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	e0042000 	.word	0xe0042000

08005b24 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8005b24:	b480      	push	{r7}
 8005b26:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8005b28:	4b05      	ldr	r3, [pc, #20]	@ (8005b40 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	4a04      	ldr	r2, [pc, #16]	@ (8005b40 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 8005b2e:	f043 0304 	orr.w	r3, r3, #4
 8005b32:	6053      	str	r3, [r2, #4]
}
 8005b34:	bf00      	nop
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	e0042000 	.word	0xe0042000

08005b44 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8005b44:	b480      	push	{r7}
 8005b46:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8005b48:	4b05      	ldr	r3, [pc, #20]	@ (8005b60 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	4a04      	ldr	r2, [pc, #16]	@ (8005b60 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 8005b4e:	f023 0304 	bic.w	r3, r3, #4
 8005b52:	6053      	str	r3, [r2, #4]
}
 8005b54:	bf00      	nop
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	e0042000 	.word	0xe0042000

08005b64 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8005b64:	b480      	push	{r7}
 8005b66:	af00      	add	r7, sp, #0
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)ENABLE;
 8005b68:	4b03      	ldr	r3, [pc, #12]	@ (8005b78 <HAL_EnableCompensationCell+0x14>)
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	601a      	str	r2, [r3, #0]
}
 8005b6e:	bf00      	nop
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr
 8005b78:	42270400 	.word	0x42270400

08005b7c <HAL_DisableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_DisableCompensationCell(void)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)DISABLE;
 8005b80:	4b03      	ldr	r3, [pc, #12]	@ (8005b90 <HAL_DisableCompensationCell+0x14>)
 8005b82:	2200      	movs	r2, #0
 8005b84:	601a      	str	r2, [r3, #0]
}
 8005b86:	bf00      	nop
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr
 8005b90:	42270400 	.word	0x42270400

08005b94 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8005b94:	b480      	push	{r7}
 8005b96:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8005b98:	4b03      	ldr	r3, [pc, #12]	@ (8005ba8 <HAL_GetUIDw0+0x14>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	1fff7a10 	.word	0x1fff7a10

08005bac <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8005bac:	b480      	push	{r7}
 8005bae:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8005bb0:	4b03      	ldr	r3, [pc, #12]	@ (8005bc0 <HAL_GetUIDw1+0x14>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	1fff7a14 	.word	0x1fff7a14

08005bc4 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8005bc8:	4b03      	ldr	r3, [pc, #12]	@ (8005bd8 <HAL_GetUIDw2+0x14>)
 8005bca:	681b      	ldr	r3, [r3, #0]
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop
 8005bd8:	1fff7a18 	.word	0x1fff7a18

08005bdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f003 0307 	and.w	r3, r3, #7
 8005bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005bec:	4b0c      	ldr	r3, [pc, #48]	@ (8005c20 <__NVIC_SetPriorityGrouping+0x44>)
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005bf2:	68ba      	ldr	r2, [r7, #8]
 8005bf4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005c04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005c08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c0e:	4a04      	ldr	r2, [pc, #16]	@ (8005c20 <__NVIC_SetPriorityGrouping+0x44>)
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	60d3      	str	r3, [r2, #12]
}
 8005c14:	bf00      	nop
 8005c16:	3714      	adds	r7, #20
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr
 8005c20:	e000ed00 	.word	0xe000ed00

08005c24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c24:	b480      	push	{r7}
 8005c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c28:	4b04      	ldr	r3, [pc, #16]	@ (8005c3c <__NVIC_GetPriorityGrouping+0x18>)
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	0a1b      	lsrs	r3, r3, #8
 8005c2e:	f003 0307 	and.w	r3, r3, #7
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr
 8005c3c:	e000ed00 	.word	0xe000ed00

08005c40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	4603      	mov	r3, r0
 8005c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	db0b      	blt.n	8005c6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c52:	79fb      	ldrb	r3, [r7, #7]
 8005c54:	f003 021f 	and.w	r2, r3, #31
 8005c58:	4907      	ldr	r1, [pc, #28]	@ (8005c78 <__NVIC_EnableIRQ+0x38>)
 8005c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c5e:	095b      	lsrs	r3, r3, #5
 8005c60:	2001      	movs	r0, #1
 8005c62:	fa00 f202 	lsl.w	r2, r0, r2
 8005c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005c6a:	bf00      	nop
 8005c6c:	370c      	adds	r7, #12
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	e000e100 	.word	0xe000e100

08005c7c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	4603      	mov	r3, r0
 8005c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	db12      	blt.n	8005cb4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c8e:	79fb      	ldrb	r3, [r7, #7]
 8005c90:	f003 021f 	and.w	r2, r3, #31
 8005c94:	490a      	ldr	r1, [pc, #40]	@ (8005cc0 <__NVIC_DisableIRQ+0x44>)
 8005c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c9a:	095b      	lsrs	r3, r3, #5
 8005c9c:	2001      	movs	r0, #1
 8005c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8005ca2:	3320      	adds	r3, #32
 8005ca4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005ca8:	f3bf 8f4f 	dsb	sy
}
 8005cac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005cae:	f3bf 8f6f 	isb	sy
}
 8005cb2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005cb4:	bf00      	nop
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr
 8005cc0:	e000e100 	.word	0xe000e100

08005cc4 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	4603      	mov	r3, r0
 8005ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	db0e      	blt.n	8005cf4 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8005cd6:	4a0b      	ldr	r2, [pc, #44]	@ (8005d04 <__NVIC_GetPendingIRQ+0x40>)
 8005cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cdc:	095b      	lsrs	r3, r3, #5
 8005cde:	3340      	adds	r3, #64	@ 0x40
 8005ce0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005ce4:	79fb      	ldrb	r3, [r7, #7]
 8005ce6:	f003 031f 	and.w	r3, r3, #31
 8005cea:	fa22 f303 	lsr.w	r3, r2, r3
 8005cee:	f003 0301 	and.w	r3, r3, #1
 8005cf2:	e000      	b.n	8005cf6 <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 8005cf4:	2300      	movs	r3, #0
  }
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	370c      	adds	r7, #12
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	e000e100 	.word	0xe000e100

08005d08 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	4603      	mov	r3, r0
 8005d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	db0c      	blt.n	8005d34 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d1a:	79fb      	ldrb	r3, [r7, #7]
 8005d1c:	f003 021f 	and.w	r2, r3, #31
 8005d20:	4907      	ldr	r1, [pc, #28]	@ (8005d40 <__NVIC_SetPendingIRQ+0x38>)
 8005d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d26:	095b      	lsrs	r3, r3, #5
 8005d28:	2001      	movs	r0, #1
 8005d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8005d2e:	3340      	adds	r3, #64	@ 0x40
 8005d30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005d34:	bf00      	nop
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr
 8005d40:	e000e100 	.word	0xe000e100

08005d44 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	db0c      	blt.n	8005d70 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d56:	79fb      	ldrb	r3, [r7, #7]
 8005d58:	f003 021f 	and.w	r2, r3, #31
 8005d5c:	4907      	ldr	r1, [pc, #28]	@ (8005d7c <__NVIC_ClearPendingIRQ+0x38>)
 8005d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d62:	095b      	lsrs	r3, r3, #5
 8005d64:	2001      	movs	r0, #1
 8005d66:	fa00 f202 	lsl.w	r2, r0, r2
 8005d6a:	3360      	adds	r3, #96	@ 0x60
 8005d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005d70:	bf00      	nop
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr
 8005d7c:	e000e100 	.word	0xe000e100

08005d80 <__NVIC_GetActive>:
  \return             0  Interrupt status is not active.
  \return             1  Interrupt status is active.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	4603      	mov	r3, r0
 8005d88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	db0e      	blt.n	8005db0 <__NVIC_GetActive+0x30>
  {
    return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8005d92:	4a0b      	ldr	r2, [pc, #44]	@ (8005dc0 <__NVIC_GetActive+0x40>)
 8005d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d98:	095b      	lsrs	r3, r3, #5
 8005d9a:	3380      	adds	r3, #128	@ 0x80
 8005d9c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005da0:	79fb      	ldrb	r3, [r7, #7]
 8005da2:	f003 031f 	and.w	r3, r3, #31
 8005da6:	fa22 f303 	lsr.w	r3, r2, r3
 8005daa:	f003 0301 	and.w	r3, r3, #1
 8005dae:	e000      	b.n	8005db2 <__NVIC_GetActive+0x32>
  }
  else
  {
    return(0U);
 8005db0:	2300      	movs	r3, #0
  }
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	370c      	adds	r7, #12
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	e000e100 	.word	0xe000e100

08005dc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	4603      	mov	r3, r0
 8005dcc:	6039      	str	r1, [r7, #0]
 8005dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	db0a      	blt.n	8005dee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	b2da      	uxtb	r2, r3
 8005ddc:	490c      	ldr	r1, [pc, #48]	@ (8005e10 <__NVIC_SetPriority+0x4c>)
 8005dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005de2:	0112      	lsls	r2, r2, #4
 8005de4:	b2d2      	uxtb	r2, r2
 8005de6:	440b      	add	r3, r1
 8005de8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005dec:	e00a      	b.n	8005e04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	b2da      	uxtb	r2, r3
 8005df2:	4908      	ldr	r1, [pc, #32]	@ (8005e14 <__NVIC_SetPriority+0x50>)
 8005df4:	79fb      	ldrb	r3, [r7, #7]
 8005df6:	f003 030f 	and.w	r3, r3, #15
 8005dfa:	3b04      	subs	r3, #4
 8005dfc:	0112      	lsls	r2, r2, #4
 8005dfe:	b2d2      	uxtb	r2, r2
 8005e00:	440b      	add	r3, r1
 8005e02:	761a      	strb	r2, [r3, #24]
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr
 8005e10:	e000e100 	.word	0xe000e100
 8005e14:	e000ed00 	.word	0xe000ed00

08005e18 <__NVIC_GetPriority>:
  \param [in]   IRQn  Interrupt number.
  \return             Interrupt Priority.
                      Value is aligned automatically to the implemented priority bits of the microcontroller.
 */
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	4603      	mov	r3, r0
 8005e20:	71fb      	strb	r3, [r7, #7]

  if ((int32_t)(IRQn) >= 0)
 8005e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	db09      	blt.n	8005e3e <__NVIC_GetPriority+0x26>
  {
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 8005e2a:	4a0d      	ldr	r2, [pc, #52]	@ (8005e60 <__NVIC_GetPriority+0x48>)
 8005e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e30:	4413      	add	r3, r2
 8005e32:	f893 3300 	ldrb.w	r3, [r3, #768]	@ 0x300
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	091b      	lsrs	r3, r3, #4
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	e009      	b.n	8005e52 <__NVIC_GetPriority+0x3a>
  }
  else
  {
    return(((uint32_t)SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 8005e3e:	4a09      	ldr	r2, [pc, #36]	@ (8005e64 <__NVIC_GetPriority+0x4c>)
 8005e40:	79fb      	ldrb	r3, [r7, #7]
 8005e42:	f003 030f 	and.w	r3, r3, #15
 8005e46:	3b04      	subs	r3, #4
 8005e48:	4413      	add	r3, r2
 8005e4a:	7e1b      	ldrb	r3, [r3, #24]
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	091b      	lsrs	r3, r3, #4
 8005e50:	b2db      	uxtb	r3, r3
  }
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	370c      	adds	r7, #12
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	e000e100 	.word	0xe000e100
 8005e64:	e000ed00 	.word	0xe000ed00

08005e68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b089      	sub	sp, #36	@ 0x24
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f003 0307 	and.w	r3, r3, #7
 8005e7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	f1c3 0307 	rsb	r3, r3, #7
 8005e82:	2b04      	cmp	r3, #4
 8005e84:	bf28      	it	cs
 8005e86:	2304      	movcs	r3, #4
 8005e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	3304      	adds	r3, #4
 8005e8e:	2b06      	cmp	r3, #6
 8005e90:	d902      	bls.n	8005e98 <NVIC_EncodePriority+0x30>
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	3b03      	subs	r3, #3
 8005e96:	e000      	b.n	8005e9a <NVIC_EncodePriority+0x32>
 8005e98:	2300      	movs	r3, #0
 8005e9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea6:	43da      	mvns	r2, r3
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	401a      	ands	r2, r3
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8005eba:	43d9      	mvns	r1, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ec0:	4313      	orrs	r3, r2
         );
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3724      	adds	r7, #36	@ 0x24
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr

08005ece <NVIC_DecodePriority>:
  \param [in]     PriorityGroup  Used priority group.
  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
  \param [out]     pSubPriority  Subpriority value (starting from 0).
 */
__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
 8005ece:	b480      	push	{r7}
 8005ed0:	b089      	sub	sp, #36	@ 0x24
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	60f8      	str	r0, [r7, #12]
 8005ed6:	60b9      	str	r1, [r7, #8]
 8005ed8:	607a      	str	r2, [r7, #4]
 8005eda:	603b      	str	r3, [r7, #0]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	f003 0307 	and.w	r3, r3, #7
 8005ee2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	f1c3 0307 	rsb	r3, r3, #7
 8005eea:	2b04      	cmp	r3, #4
 8005eec:	bf28      	it	cs
 8005eee:	2304      	movcs	r3, #4
 8005ef0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	3304      	adds	r3, #4
 8005ef6:	2b06      	cmp	r3, #6
 8005ef8:	d902      	bls.n	8005f00 <NVIC_DecodePriority+0x32>
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	3b03      	subs	r3, #3
 8005efe:	e000      	b.n	8005f02 <NVIC_DecodePriority+0x34>
 8005f00:	2300      	movs	r3, #0
 8005f02:	617b      	str	r3, [r7, #20]

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	40da      	lsrs	r2, r3
 8005f0a:	f04f 31ff 	mov.w	r1, #4294967295
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	fa01 f303 	lsl.w	r3, r1, r3
 8005f14:	43db      	mvns	r3, r3
 8005f16:	401a      	ands	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	601a      	str	r2, [r3, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 8005f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	fa02 f303 	lsl.w	r3, r2, r3
 8005f26:	43da      	mvns	r2, r3
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	401a      	ands	r2, r3
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	601a      	str	r2, [r3, #0]
}
 8005f30:	bf00      	nop
 8005f32:	3724      	adds	r7, #36	@ 0x24
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8005f40:	f3bf 8f4f 	dsb	sy
}
 8005f44:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005f46:	4b06      	ldr	r3, [pc, #24]	@ (8005f60 <__NVIC_SystemReset+0x24>)
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005f4e:	4904      	ldr	r1, [pc, #16]	@ (8005f60 <__NVIC_SystemReset+0x24>)
 8005f50:	4b04      	ldr	r3, [pc, #16]	@ (8005f64 <__NVIC_SystemReset+0x28>)
 8005f52:	4313      	orrs	r3, r2
 8005f54:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005f56:	f3bf 8f4f 	dsb	sy
}
 8005f5a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8005f5c:	bf00      	nop
 8005f5e:	e7fd      	b.n	8005f5c <__NVIC_SystemReset+0x20>
 8005f60:	e000ed00 	.word	0xe000ed00
 8005f64:	05fa0004 	.word	0x05fa0004

08005f68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	3b01      	subs	r3, #1
 8005f74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f78:	d301      	bcc.n	8005f7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e00f      	b.n	8005f9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005f7e:	4a0a      	ldr	r2, [pc, #40]	@ (8005fa8 <SysTick_Config+0x40>)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	3b01      	subs	r3, #1
 8005f84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005f86:	210f      	movs	r1, #15
 8005f88:	f04f 30ff 	mov.w	r0, #4294967295
 8005f8c:	f7ff ff1a 	bl	8005dc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005f90:	4b05      	ldr	r3, [pc, #20]	@ (8005fa8 <SysTick_Config+0x40>)
 8005f92:	2200      	movs	r2, #0
 8005f94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005f96:	4b04      	ldr	r3, [pc, #16]	@ (8005fa8 <SysTick_Config+0x40>)
 8005f98:	2207      	movs	r2, #7
 8005f9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3708      	adds	r7, #8
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	e000e010 	.word	0xe000e010

08005fac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f7ff fe11 	bl	8005bdc <__NVIC_SetPriorityGrouping>
}
 8005fba:	bf00      	nop
 8005fbc:	3708      	adds	r7, #8
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b086      	sub	sp, #24
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	4603      	mov	r3, r0
 8005fca:	60b9      	str	r1, [r7, #8]
 8005fcc:	607a      	str	r2, [r7, #4]
 8005fce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005fd4:	f7ff fe26 	bl	8005c24 <__NVIC_GetPriorityGrouping>
 8005fd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	68b9      	ldr	r1, [r7, #8]
 8005fde:	6978      	ldr	r0, [r7, #20]
 8005fe0:	f7ff ff42 	bl	8005e68 <NVIC_EncodePriority>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fea:	4611      	mov	r1, r2
 8005fec:	4618      	mov	r0, r3
 8005fee:	f7ff fee9 	bl	8005dc4 <__NVIC_SetPriority>
}
 8005ff2:	bf00      	nop
 8005ff4:	3718      	adds	r7, #24
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b082      	sub	sp, #8
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	4603      	mov	r3, r0
 8006002:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006008:	4618      	mov	r0, r3
 800600a:	f7ff fe19 	bl	8005c40 <__NVIC_EnableIRQ>
}
 800600e:	bf00      	nop
 8006010:	3708      	adds	r7, #8
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}

08006016 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006016:	b580      	push	{r7, lr}
 8006018:	b082      	sub	sp, #8
 800601a:	af00      	add	r7, sp, #0
 800601c:	4603      	mov	r3, r0
 800601e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006024:	4618      	mov	r0, r3
 8006026:	f7ff fe29 	bl	8005c7c <__NVIC_DisableIRQ>
}
 800602a:	bf00      	nop
 800602c:	3708      	adds	r7, #8
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8006032:	b580      	push	{r7, lr}
 8006034:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8006036:	f7ff ff81 	bl	8005f3c <__NVIC_SystemReset>

0800603a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800603a:	b580      	push	{r7, lr}
 800603c:	b082      	sub	sp, #8
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f7ff ff90 	bl	8005f68 <SysTick_Config>
 8006048:	4603      	mov	r3, r0
}
 800604a:	4618      	mov	r0, r3
 800604c:	3708      	adds	r7, #8
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}

08006052 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8006052:	b480      	push	{r7}
 8006054:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8006056:	f3bf 8f5f 	dmb	sy
}
 800605a:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800605c:	4b06      	ldr	r3, [pc, #24]	@ (8006078 <HAL_MPU_Disable+0x26>)
 800605e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006060:	4a05      	ldr	r2, [pc, #20]	@ (8006078 <HAL_MPU_Disable+0x26>)
 8006062:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006066:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0U;
 8006068:	4b04      	ldr	r3, [pc, #16]	@ (800607c <HAL_MPU_Disable+0x2a>)
 800606a:	2200      	movs	r2, #0
 800606c:	605a      	str	r2, [r3, #4]
}
 800606e:	bf00      	nop
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr
 8006078:	e000ed00 	.word	0xe000ed00
 800607c:	e000ed90 	.word	0xe000ed90

08006080 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006088:	4a0b      	ldr	r2, [pc, #44]	@ (80060b8 <HAL_MPU_Enable+0x38>)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f043 0301 	orr.w	r3, r3, #1
 8006090:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006092:	4b0a      	ldr	r3, [pc, #40]	@ (80060bc <HAL_MPU_Enable+0x3c>)
 8006094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006096:	4a09      	ldr	r2, [pc, #36]	@ (80060bc <HAL_MPU_Enable+0x3c>)
 8006098:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800609c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800609e:	f3bf 8f4f 	dsb	sy
}
 80060a2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80060a4:	f3bf 8f6f 	isb	sy
}
 80060a8:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80060aa:	bf00      	nop
 80060ac:	370c      	adds	r7, #12
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop
 80060b8:	e000ed90 	.word	0xe000ed90
 80060bc:	e000ed00 	.word	0xe000ed00

080060c0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	785a      	ldrb	r2, [r3, #1]
 80060cc:	4b1d      	ldr	r3, [pc, #116]	@ (8006144 <HAL_MPU_ConfigRegion+0x84>)
 80060ce:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d029      	beq.n	800612c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 80060d8:	4a1a      	ldr	r2, [pc, #104]	@ (8006144 <HAL_MPU_ConfigRegion+0x84>)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	7b1b      	ldrb	r3, [r3, #12]
 80060e4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	7adb      	ldrb	r3, [r3, #11]
 80060ea:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80060ec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	7a9b      	ldrb	r3, [r3, #10]
 80060f2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80060f4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	7b5b      	ldrb	r3, [r3, #13]
 80060fa:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80060fc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	7b9b      	ldrb	r3, [r3, #14]
 8006102:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006104:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	7bdb      	ldrb	r3, [r3, #15]
 800610a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800610c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	7a5b      	ldrb	r3, [r3, #9]
 8006112:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006114:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	7a1b      	ldrb	r3, [r3, #8]
 800611a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800611c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	7812      	ldrb	r2, [r2, #0]
 8006122:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006124:	4a07      	ldr	r2, [pc, #28]	@ (8006144 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006126:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006128:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00U;
    MPU->RASR = 0x00U;
  }
}
 800612a:	e005      	b.n	8006138 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00U;
 800612c:	4b05      	ldr	r3, [pc, #20]	@ (8006144 <HAL_MPU_ConfigRegion+0x84>)
 800612e:	2200      	movs	r2, #0
 8006130:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00U;
 8006132:	4b04      	ldr	r3, [pc, #16]	@ (8006144 <HAL_MPU_ConfigRegion+0x84>)
 8006134:	2200      	movs	r2, #0
 8006136:	611a      	str	r2, [r3, #16]
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr
 8006144:	e000ed90 	.word	0xe000ed90

08006148 <HAL_CORTEX_ClearEvent>:
/**
  * @brief  Clear pending events.
  * @retval None
  */
void HAL_CORTEX_ClearEvent(void)
{
 8006148:	b480      	push	{r7}
 800614a:	af00      	add	r7, sp, #0
  __SEV();
 800614c:	bf40      	sev
  __WFE();
 800614e:	bf20      	wfe
}
 8006150:	bf00      	nop
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr

0800615a <HAL_NVIC_GetPriorityGrouping>:
/**
  * @brief  Gets the priority grouping field from the NVIC Interrupt Controller.
  * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
 800615a:	b580      	push	{r7, lr}
 800615c:	af00      	add	r7, sp, #0
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
 800615e:	f7ff fd61 	bl	8005c24 <__NVIC_GetPriorityGrouping>
 8006162:	4603      	mov	r3, r0
}
 8006164:	4618      	mov	r0, r3
 8006166:	bd80      	pop	{r7, pc}

08006168 <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	60b9      	str	r1, [r7, #8]
 8006170:	607a      	str	r2, [r7, #4]
 8006172:	603b      	str	r3, [r7, #0]
 8006174:	4603      	mov	r3, r0
 8006176:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
 8006178:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800617c:	4618      	mov	r0, r3
 800617e:	f7ff fe4b 	bl	8005e18 <__NVIC_GetPriority>
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	68b9      	ldr	r1, [r7, #8]
 8006188:	f7ff fea1 	bl	8005ece <NVIC_DecodePriority>
}
 800618c:	bf00      	nop
 800618e:	3710      	adds	r7, #16
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
 800619a:	4603      	mov	r3, r0
 800619c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 800619e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7ff fdb0 	bl	8005d08 <__NVIC_SetPendingIRQ>
}
 80061a8:	bf00      	nop
 80061aa:	3708      	adds	r7, #8
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	4603      	mov	r3, r0
 80061b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 80061ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061be:	4618      	mov	r0, r3
 80061c0:	f7ff fd80 	bl	8005cc4 <__NVIC_GetPendingIRQ>
 80061c4:	4603      	mov	r3, r0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3708      	adds	r7, #8
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b082      	sub	sp, #8
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	4603      	mov	r3, r0
 80061d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80061d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061dc:	4618      	mov	r0, r3
 80061de:	f7ff fdb1 	bl	8005d44 <__NVIC_ClearPendingIRQ>
}
 80061e2:	bf00      	nop
 80061e4:	3708      	adds	r7, #8
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <HAL_NVIC_GetActive>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b082      	sub	sp, #8
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	4603      	mov	r3, r0
 80061f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
 80061f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7ff fdc1 	bl	8005d80 <__NVIC_GetActive>
 80061fe:	4603      	mov	r3, r0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3708      	adds	r7, #8
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b04      	cmp	r3, #4
 8006214:	d106      	bne.n	8006224 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8006216:	4b09      	ldr	r3, [pc, #36]	@ (800623c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a08      	ldr	r2, [pc, #32]	@ (800623c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800621c:	f043 0304 	orr.w	r3, r3, #4
 8006220:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8006222:	e005      	b.n	8006230 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8006224:	4b05      	ldr	r3, [pc, #20]	@ (800623c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a04      	ldr	r2, [pc, #16]	@ (800623c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800622a:	f023 0304 	bic.w	r3, r3, #4
 800622e:	6013      	str	r3, [r2, #0]
}
 8006230:	bf00      	nop
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr
 800623c:	e000e010 	.word	0xe000e010

08006240 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8006244:	f000 f802 	bl	800624c <HAL_SYSTICK_Callback>
}
 8006248:	bf00      	nop
 800624a:	bd80      	pop	{r7, pc}

0800624c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800624c:	b480      	push	{r7}
 800624e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8006250:	bf00      	nop
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop

0800625c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b086      	sub	sp, #24
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006264:	2300      	movs	r3, #0
 8006266:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006268:	f7ff fb68 	bl	800593c <HAL_GetTick>
 800626c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d101      	bne.n	8006278 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e099      	b.n	80063ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2202      	movs	r2, #2
 800627c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f022 0201 	bic.w	r2, r2, #1
 8006296:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006298:	e00f      	b.n	80062ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800629a:	f7ff fb4f 	bl	800593c <HAL_GetTick>
 800629e:	4602      	mov	r2, r0
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	2b05      	cmp	r3, #5
 80062a6:	d908      	bls.n	80062ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2220      	movs	r2, #32
 80062ac:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2203      	movs	r2, #3
 80062b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e078      	b.n	80063ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0301 	and.w	r3, r3, #1
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d1e8      	bne.n	800629a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80062d0:	697a      	ldr	r2, [r7, #20]
 80062d2:	4b38      	ldr	r3, [pc, #224]	@ (80063b4 <HAL_DMA_Init+0x158>)
 80062d4:	4013      	ands	r3, r2
 80062d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	685a      	ldr	r2, [r3, #4]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80062e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	699b      	ldr	r3, [r3, #24]
 80062f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6a1b      	ldr	r3, [r3, #32]
 8006304:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006306:	697a      	ldr	r2, [r7, #20]
 8006308:	4313      	orrs	r3, r2
 800630a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006310:	2b04      	cmp	r3, #4
 8006312:	d107      	bne.n	8006324 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800631c:	4313      	orrs	r3, r2
 800631e:	697a      	ldr	r2, [r7, #20]
 8006320:	4313      	orrs	r3, r2
 8006322:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	697a      	ldr	r2, [r7, #20]
 800632a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	f023 0307 	bic.w	r3, r3, #7
 800633a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006340:	697a      	ldr	r2, [r7, #20]
 8006342:	4313      	orrs	r3, r2
 8006344:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800634a:	2b04      	cmp	r3, #4
 800634c:	d117      	bne.n	800637e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	4313      	orrs	r3, r2
 8006356:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00e      	beq.n	800637e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 fd4f 	bl	8006e04 <DMA_CheckFifoParam>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d008      	beq.n	800637e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2240      	movs	r2, #64	@ 0x40
 8006370:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2201      	movs	r2, #1
 8006376:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800637a:	2301      	movs	r3, #1
 800637c:	e016      	b.n	80063ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	697a      	ldr	r2, [r7, #20]
 8006384:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 fd07 	bl	8006d9a <DMA_CalcBaseAndBitshift>
 800638c:	4603      	mov	r3, r0
 800638e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006394:	223f      	movs	r2, #63	@ 0x3f
 8006396:	409a      	lsls	r2, r3
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3718      	adds	r7, #24
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	f010803f 	.word	0xf010803f

080063b8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d101      	bne.n	80063ca <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e050      	b.n	800646c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d101      	bne.n	80063da <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80063d6:	2302      	movs	r3, #2
 80063d8:	e048      	b.n	800646c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f022 0201 	bic.w	r2, r2, #1
 80063e8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2200      	movs	r2, #0
 80063f0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2200      	movs	r2, #0
 80063f8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2200      	movs	r2, #0
 8006400:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2200      	movs	r2, #0
 8006408:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2200      	movs	r2, #0
 8006410:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2221      	movs	r2, #33	@ 0x21
 8006418:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 fcbd 	bl	8006d9a <DMA_CalcBaseAndBitshift>
 8006420:	4603      	mov	r3, r0
 8006422:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800644c:	223f      	movs	r2, #63	@ 0x3f
 800644e:	409a      	lsls	r2, r3
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b086      	sub	sp, #24
 8006478:	af00      	add	r7, sp, #0
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	60b9      	str	r1, [r7, #8]
 800647e:	607a      	str	r2, [r7, #4]
 8006480:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006482:	2300      	movs	r3, #0
 8006484:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800648c:	2b01      	cmp	r3, #1
 800648e:	d101      	bne.n	8006494 <HAL_DMA_Start+0x20>
 8006490:	2302      	movs	r3, #2
 8006492:	e026      	b.n	80064e2 <HAL_DMA_Start+0x6e>
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d115      	bne.n	80064d4 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2202      	movs	r2, #2
 80064ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2200      	movs	r2, #0
 80064b4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	68b9      	ldr	r1, [r7, #8]
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f000 fc3e 	bl	8006d3e <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f042 0201 	orr.w	r2, r2, #1
 80064d0:	601a      	str	r2, [r3, #0]
 80064d2:	e005      	b.n	80064e0 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80064dc:	2302      	movs	r3, #2
 80064de:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 80064e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3718      	adds	r7, #24
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b086      	sub	sp, #24
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	60f8      	str	r0, [r7, #12]
 80064f2:	60b9      	str	r1, [r7, #8]
 80064f4:	607a      	str	r2, [r7, #4]
 80064f6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064f8:	2300      	movs	r3, #0
 80064fa:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006500:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006508:	2b01      	cmp	r3, #1
 800650a:	d101      	bne.n	8006510 <HAL_DMA_Start_IT+0x26>
 800650c:	2302      	movs	r3, #2
 800650e:	e040      	b.n	8006592 <HAL_DMA_Start_IT+0xa8>
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b01      	cmp	r3, #1
 8006522:	d12f      	bne.n	8006584 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2202      	movs	r2, #2
 8006528:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2200      	movs	r2, #0
 8006530:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	68b9      	ldr	r1, [r7, #8]
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f000 fc00 	bl	8006d3e <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006542:	223f      	movs	r2, #63	@ 0x3f
 8006544:	409a      	lsls	r2, r3
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f042 0216 	orr.w	r2, r2, #22
 8006558:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800655e:	2b00      	cmp	r3, #0
 8006560:	d007      	beq.n	8006572 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f042 0208 	orr.w	r2, r2, #8
 8006570:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f042 0201 	orr.w	r2, r2, #1
 8006580:	601a      	str	r2, [r3, #0]
 8006582:	e005      	b.n	8006590 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800658c:	2302      	movs	r3, #2
 800658e:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006590:	7dfb      	ldrb	r3, [r7, #23]
}
 8006592:	4618      	mov	r0, r3
 8006594:	3718      	adds	r7, #24
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}

0800659a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800659a:	b580      	push	{r7, lr}
 800659c:	b084      	sub	sp, #16
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065a6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80065a8:	f7ff f9c8 	bl	800593c <HAL_GetTick>
 80065ac:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	d008      	beq.n	80065cc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2280      	movs	r2, #128	@ 0x80
 80065be:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e052      	b.n	8006672 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f022 0216 	bic.w	r2, r2, #22
 80065da:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	695a      	ldr	r2, [r3, #20]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80065ea:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d103      	bne.n	80065fc <HAL_DMA_Abort+0x62>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d007      	beq.n	800660c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f022 0208 	bic.w	r2, r2, #8
 800660a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f022 0201 	bic.w	r2, r2, #1
 800661a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800661c:	e013      	b.n	8006646 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800661e:	f7ff f98d 	bl	800593c <HAL_GetTick>
 8006622:	4602      	mov	r2, r0
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	2b05      	cmp	r3, #5
 800662a:	d90c      	bls.n	8006646 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2220      	movs	r2, #32
 8006630:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2203      	movs	r2, #3
 8006636:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8006642:	2303      	movs	r3, #3
 8006644:	e015      	b.n	8006672 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 0301 	and.w	r3, r3, #1
 8006650:	2b00      	cmp	r3, #0
 8006652:	d1e4      	bne.n	800661e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006658:	223f      	movs	r2, #63	@ 0x3f
 800665a:	409a      	lsls	r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	3710      	adds	r7, #16
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}

0800667a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800667a:	b480      	push	{r7}
 800667c:	b083      	sub	sp, #12
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006688:	b2db      	uxtb	r3, r3
 800668a:	2b02      	cmp	r3, #2
 800668c:	d004      	beq.n	8006698 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2280      	movs	r2, #128	@ 0x80
 8006692:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	e00c      	b.n	80066b2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2205      	movs	r2, #5
 800669c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f022 0201 	bic.w	r2, r2, #1
 80066ae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	370c      	adds	r7, #12
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr

080066be <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode). 
  * @param  Timeout       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 80066be:	b580      	push	{r7, lr}
 80066c0:	b08a      	sub	sp, #40	@ 0x28
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	60f8      	str	r0, [r7, #12]
 80066c6:	460b      	mov	r3, r1
 80066c8:	607a      	str	r2, [r7, #4]
 80066ca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK; 
 80066cc:	2300      	movs	r3, #0
 80066ce:	77fb      	strb	r3, [r7, #31]
  uint32_t mask_cpltlevel;
  uint32_t tickstart = HAL_GetTick(); 
 80066d0:	f7ff f934 	bl	800593c <HAL_GetTick>
 80066d4:	61b8      	str	r0, [r7, #24]
  uint32_t tmpisr;
  
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	2b02      	cmp	r3, #2
 80066e0:	d008      	beq.n	80066f4 <HAL_DMA_PollForTransfer+0x36>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2280      	movs	r2, #128	@ 0x80
 80066e6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e0bf      	b.n	8006874 <HAL_DMA_PollForTransfer+0x1b6>
  }

  /* Polling mode not supported in circular mode and double buffering mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != RESET)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d005      	beq.n	800670e <HAL_DMA_PollForTransfer+0x50>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006708:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	e0b2      	b.n	8006874 <HAL_DMA_PollForTransfer+0x1b6>
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 800670e:	7afb      	ldrb	r3, [r7, #11]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d106      	bne.n	8006722 <HAL_DMA_PollForTransfer+0x64>
  {
    /* Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006718:	2220      	movs	r2, #32
 800671a:	fa02 f303 	lsl.w	r3, r2, r3
 800671e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006720:	e005      	b.n	800672e <HAL_DMA_PollForTransfer+0x70>
  }
  else
  {
    /* Half Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006726:	2210      	movs	r2, #16
 8006728:	fa02 f303 	lsl.w	r3, r2, r3
 800672c:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006732:	617b      	str	r3, [r7, #20]
  tmpisr = regs->ISR;
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	623b      	str	r3, [r7, #32]
  
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 800673a:	e05a      	b.n	80067f2 <HAL_DMA_PollForTransfer+0x134>
  {
    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006742:	d017      	beq.n	8006774 <HAL_DMA_PollForTransfer+0xb6>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d007      	beq.n	800675a <HAL_DMA_PollForTransfer+0x9c>
 800674a:	f7ff f8f7 	bl	800593c <HAL_GetTick>
 800674e:	4602      	mov	r2, r0
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	429a      	cmp	r2, r3
 8006758:	d20c      	bcs.n	8006774 <HAL_DMA_PollForTransfer+0xb6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2220      	movs	r2, #32
 800675e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8006770:	2303      	movs	r3, #3
 8006772:	e07f      	b.n	8006874 <HAL_DMA_PollForTransfer+0x1b6>
      }
    }

    /* Get the ISR register value */
    tmpisr = regs->ISR;
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	623b      	str	r3, [r7, #32]

    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800677e:	2208      	movs	r2, #8
 8006780:	409a      	lsls	r2, r3
 8006782:	6a3b      	ldr	r3, [r7, #32]
 8006784:	4013      	ands	r3, r2
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00b      	beq.n	80067a2 <HAL_DMA_PollForTransfer+0xe4>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800678e:	f043 0201 	orr.w	r2, r3, #1
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800679a:	2208      	movs	r2, #8
 800679c:	409a      	lsls	r2, r3
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067a6:	2201      	movs	r2, #1
 80067a8:	409a      	lsls	r2, r3
 80067aa:	6a3b      	ldr	r3, [r7, #32]
 80067ac:	4013      	ands	r3, r2
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00b      	beq.n	80067ca <HAL_DMA_PollForTransfer+0x10c>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067b6:	f043 0202 	orr.w	r2, r3, #2
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067c2:	2201      	movs	r2, #1
 80067c4:	409a      	lsls	r2, r3
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067ce:	2204      	movs	r2, #4
 80067d0:	409a      	lsls	r2, r3
 80067d2:	6a3b      	ldr	r3, [r7, #32]
 80067d4:	4013      	ands	r3, r2
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00b      	beq.n	80067f2 <HAL_DMA_PollForTransfer+0x134>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067de:	f043 0204 	orr.w	r2, r3, #4
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Clear the Direct Mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067ea:	2204      	movs	r2, #4
 80067ec:	409a      	lsls	r2, r3
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	609a      	str	r2, [r3, #8]
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 80067f2:	6a3a      	ldr	r2, [r7, #32]
 80067f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f6:	4013      	ands	r3, r2
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d105      	bne.n	8006808 <HAL_DMA_PollForTransfer+0x14a>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006800:	f003 0301 	and.w	r3, r3, #1
 8006804:	2b00      	cmp	r3, #0
 8006806:	d099      	beq.n	800673c <HAL_DMA_PollForTransfer+0x7e>
    }
  }
  
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800680c:	2b00      	cmp	r3, #0
 800680e:	d018      	beq.n	8006842 <HAL_DMA_PollForTransfer+0x184>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006814:	f003 0301 	and.w	r3, r3, #1
 8006818:	2b00      	cmp	r3, #0
 800681a:	d012      	beq.n	8006842 <HAL_DMA_PollForTransfer+0x184>
    {
      HAL_DMA_Abort(hdma);
 800681c:	68f8      	ldr	r0, [r7, #12]
 800681e:	f7ff febc 	bl	800659a <HAL_DMA_Abort>
    
      /* Clear the half transfer and transfer complete flags */
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006826:	2230      	movs	r2, #48	@ 0x30
 8006828:	409a      	lsls	r2, r3
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	609a      	str	r2, [r3, #8]
    
      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2201      	movs	r2, #1
 8006832:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e018      	b.n	8006874 <HAL_DMA_PollForTransfer+0x1b6>
   }
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8006842:	7afb      	ldrb	r3, [r7, #11]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d10e      	bne.n	8006866 <HAL_DMA_PollForTransfer+0x1a8>
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800684c:	2230      	movs	r2, #48	@ 0x30
 800684e:	409a      	lsls	r2, r3
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	609a      	str	r2, [r3, #8]
    
    hdma->State = HAL_DMA_STATE_READY;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2200      	movs	r2, #0
 8006860:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8006864:	e005      	b.n	8006872 <HAL_DMA_PollForTransfer+0x1b4>
  }
  else
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800686a:	2210      	movs	r2, #16
 800686c:	409a      	lsls	r2, r3
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	609a      	str	r2, [r3, #8]
  }
  
  return status;
 8006872:	7ffb      	ldrb	r3, [r7, #31]
}
 8006874:	4618      	mov	r0, r3
 8006876:	3728      	adds	r7, #40	@ 0x28
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b086      	sub	sp, #24
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006884:	2300      	movs	r3, #0
 8006886:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006888:	4b8e      	ldr	r3, [pc, #568]	@ (8006ac4 <HAL_DMA_IRQHandler+0x248>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a8e      	ldr	r2, [pc, #568]	@ (8006ac8 <HAL_DMA_IRQHandler+0x24c>)
 800688e:	fba2 2303 	umull	r2, r3, r2, r3
 8006892:	0a9b      	lsrs	r3, r3, #10
 8006894:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800689a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068a6:	2208      	movs	r2, #8
 80068a8:	409a      	lsls	r2, r3
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	4013      	ands	r3, r2
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d01a      	beq.n	80068e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 0304 	and.w	r3, r3, #4
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d013      	beq.n	80068e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f022 0204 	bic.w	r2, r2, #4
 80068ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068d4:	2208      	movs	r2, #8
 80068d6:	409a      	lsls	r2, r3
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068e0:	f043 0201 	orr.w	r2, r3, #1
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068ec:	2201      	movs	r2, #1
 80068ee:	409a      	lsls	r2, r3
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	4013      	ands	r3, r2
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d012      	beq.n	800691e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	695b      	ldr	r3, [r3, #20]
 80068fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00b      	beq.n	800691e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800690a:	2201      	movs	r2, #1
 800690c:	409a      	lsls	r2, r3
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006916:	f043 0202 	orr.w	r2, r3, #2
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006922:	2204      	movs	r2, #4
 8006924:	409a      	lsls	r2, r3
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	4013      	ands	r3, r2
 800692a:	2b00      	cmp	r3, #0
 800692c:	d012      	beq.n	8006954 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f003 0302 	and.w	r3, r3, #2
 8006938:	2b00      	cmp	r3, #0
 800693a:	d00b      	beq.n	8006954 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006940:	2204      	movs	r2, #4
 8006942:	409a      	lsls	r2, r3
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800694c:	f043 0204 	orr.w	r2, r3, #4
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006958:	2210      	movs	r2, #16
 800695a:	409a      	lsls	r2, r3
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	4013      	ands	r3, r2
 8006960:	2b00      	cmp	r3, #0
 8006962:	d043      	beq.n	80069ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 0308 	and.w	r3, r3, #8
 800696e:	2b00      	cmp	r3, #0
 8006970:	d03c      	beq.n	80069ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006976:	2210      	movs	r2, #16
 8006978:	409a      	lsls	r2, r3
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006988:	2b00      	cmp	r3, #0
 800698a:	d018      	beq.n	80069be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006996:	2b00      	cmp	r3, #0
 8006998:	d108      	bne.n	80069ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d024      	beq.n	80069ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	4798      	blx	r3
 80069aa:	e01f      	b.n	80069ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d01b      	beq.n	80069ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	4798      	blx	r3
 80069bc:	e016      	b.n	80069ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d107      	bne.n	80069dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f022 0208 	bic.w	r2, r2, #8
 80069da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d003      	beq.n	80069ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069f0:	2220      	movs	r2, #32
 80069f2:	409a      	lsls	r2, r3
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	4013      	ands	r3, r2
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f000 808f 	beq.w	8006b1c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 0310 	and.w	r3, r3, #16
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	f000 8087 	beq.w	8006b1c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a12:	2220      	movs	r2, #32
 8006a14:	409a      	lsls	r2, r3
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	2b05      	cmp	r3, #5
 8006a24:	d136      	bne.n	8006a94 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f022 0216 	bic.w	r2, r2, #22
 8006a34:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	695a      	ldr	r2, [r3, #20]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006a44:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d103      	bne.n	8006a56 <HAL_DMA_IRQHandler+0x1da>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d007      	beq.n	8006a66 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f022 0208 	bic.w	r2, r2, #8
 8006a64:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a6a:	223f      	movs	r2, #63	@ 0x3f
 8006a6c:	409a      	lsls	r2, r3
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2201      	movs	r2, #1
 8006a76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d07e      	beq.n	8006b88 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	4798      	blx	r3
        }
        return;
 8006a92:	e079      	b.n	8006b88 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d01d      	beq.n	8006ade <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d10d      	bne.n	8006acc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d031      	beq.n	8006b1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	4798      	blx	r3
 8006ac0:	e02c      	b.n	8006b1c <HAL_DMA_IRQHandler+0x2a0>
 8006ac2:	bf00      	nop
 8006ac4:	20000030 	.word	0x20000030
 8006ac8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d023      	beq.n	8006b1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	4798      	blx	r3
 8006adc:	e01e      	b.n	8006b1c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d10f      	bne.n	8006b0c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f022 0210 	bic.w	r2, r2, #16
 8006afa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d003      	beq.n	8006b1c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d032      	beq.n	8006b8a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b28:	f003 0301 	and.w	r3, r3, #1
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d022      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2205      	movs	r2, #5
 8006b34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f022 0201 	bic.w	r2, r2, #1
 8006b46:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	60bb      	str	r3, [r7, #8]
 8006b4e:	697a      	ldr	r2, [r7, #20]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d307      	bcc.n	8006b64 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 0301 	and.w	r3, r3, #1
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1f2      	bne.n	8006b48 <HAL_DMA_IRQHandler+0x2cc>
 8006b62:	e000      	b.n	8006b66 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006b64:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d005      	beq.n	8006b8a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	4798      	blx	r3
 8006b86:	e000      	b.n	8006b8a <HAL_DMA_IRQHandler+0x30e>
        return;
 8006b88:	bf00      	nop
    }
  }
}
 8006b8a:	3718      	adds	r7, #24
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callback function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8006b90:	b480      	push	{r7}
 8006b92:	b087      	sub	sp, #28
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	460b      	mov	r3, r1
 8006b9a:	607a      	str	r2, [r7, #4]
 8006b9c:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d101      	bne.n	8006bb0 <HAL_DMA_RegisterCallback+0x20>
 8006bac:	2302      	movs	r3, #2
 8006bae:	e03d      	b.n	8006c2c <HAL_DMA_RegisterCallback+0x9c>
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d12c      	bne.n	8006c1e <HAL_DMA_RegisterCallback+0x8e>
  {
    switch (CallbackID)
 8006bc4:	7afb      	ldrb	r3, [r7, #11]
 8006bc6:	2b05      	cmp	r3, #5
 8006bc8:	d826      	bhi.n	8006c18 <HAL_DMA_RegisterCallback+0x88>
 8006bca:	a201      	add	r2, pc, #4	@ (adr r2, 8006bd0 <HAL_DMA_RegisterCallback+0x40>)
 8006bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd0:	08006be9 	.word	0x08006be9
 8006bd4:	08006bf1 	.word	0x08006bf1
 8006bd8:	08006bf9 	.word	0x08006bf9
 8006bdc:	08006c01 	.word	0x08006c01
 8006be0:	08006c09 	.word	0x08006c09
 8006be4:	08006c11 	.word	0x08006c11
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 8006bee:	e018      	b.n	8006c22 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8006bf6:	e014      	b.n	8006c22 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	645a      	str	r2, [r3, #68]	@ 0x44
      break;
 8006bfe:	e010      	b.n	8006c22 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	649a      	str	r2, [r3, #72]	@ 0x48
      break;
 8006c06:	e00c      	b.n	8006c22 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	64da      	str	r2, [r3, #76]	@ 0x4c
      break;
 8006c0e:	e008      	b.n	8006c22 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006c16:	e004      	b.n	8006c22 <HAL_DMA_RegisterCallback+0x92>

    default:
      /* Return error status */
      status =  HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c1c:	e001      	b.n	8006c22 <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  return status;
 8006c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	371c      	adds	r7, #28
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <HAL_DMA_UnRegisterCallback>:
  * @param  CallbackID           User Callback identifier
  *                               a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */              
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b085      	sub	sp, #20
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	460b      	mov	r3, r1
 8006c42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8006c44:	2300      	movs	r3, #0
 8006c46:	73fb      	strb	r3, [r7, #15]
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d101      	bne.n	8006c56 <HAL_DMA_UnRegisterCallback+0x1e>
 8006c52:	2302      	movs	r3, #2
 8006c54:	e053      	b.n	8006cfe <HAL_DMA_UnRegisterCallback+0xc6>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2201      	movs	r2, #1
 8006c5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d142      	bne.n	8006cf0 <HAL_DMA_UnRegisterCallback+0xb8>
  {
    switch (CallbackID)
 8006c6a:	78fb      	ldrb	r3, [r7, #3]
 8006c6c:	2b06      	cmp	r3, #6
 8006c6e:	d83c      	bhi.n	8006cea <HAL_DMA_UnRegisterCallback+0xb2>
 8006c70:	a201      	add	r2, pc, #4	@ (adr r2, 8006c78 <HAL_DMA_UnRegisterCallback+0x40>)
 8006c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c76:	bf00      	nop
 8006c78:	08006c95 	.word	0x08006c95
 8006c7c:	08006c9d 	.word	0x08006c9d
 8006c80:	08006ca5 	.word	0x08006ca5
 8006c84:	08006cad 	.word	0x08006cad
 8006c88:	08006cb5 	.word	0x08006cb5
 8006c8c:	08006cbd 	.word	0x08006cbd
 8006c90:	08006cc5 	.word	0x08006cc5
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = NULL;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 8006c9a:	e02b      	b.n	8006cf4 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = NULL;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8006ca2:	e027      	b.n	8006cf4 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = NULL;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	645a      	str	r2, [r3, #68]	@ 0x44
      break;
 8006caa:	e023      	b.n	8006cf4 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = NULL;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	649a      	str	r2, [r3, #72]	@ 0x48
      break;
 8006cb2:	e01f      	b.n	8006cf4 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = NULL;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	64da      	str	r2, [r3, #76]	@ 0x4c
      break;
 8006cba:	e01b      	b.n	8006cf4 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = NULL;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	651a      	str	r2, [r3, #80]	@ 0x50
      break; 
 8006cc2:	e017      	b.n	8006cf4 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case   HAL_DMA_XFER_ALL_CB_ID:
      hdma->XferCpltCallback = NULL;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	63da      	str	r2, [r3, #60]	@ 0x3c
      hdma->XferHalfCpltCallback = NULL;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	641a      	str	r2, [r3, #64]	@ 0x40
      hdma->XferM1CpltCallback = NULL;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	645a      	str	r2, [r3, #68]	@ 0x44
      hdma->XferM1HalfCpltCallback = NULL;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	649a      	str	r2, [r3, #72]	@ 0x48
      hdma->XferErrorCallback = NULL;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	64da      	str	r2, [r3, #76]	@ 0x4c
      hdma->XferAbortCallback = NULL;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	651a      	str	r2, [r3, #80]	@ 0x50
      break; 
 8006ce8:	e004      	b.n	8006cf4 <HAL_DMA_UnRegisterCallback+0xbc>
      
    default:
      status = HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	73fb      	strb	r3, [r7, #15]
      break;
 8006cee:	e001      	b.n	8006cf4 <HAL_DMA_UnRegisterCallback+0xbc>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  return status;
 8006cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3714      	adds	r7, #20
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr

08006d0a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006d0a:	b480      	push	{r7}
 8006d0c:	b083      	sub	sp, #12
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006d18:	b2db      	uxtb	r3, r3
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	370c      	adds	r7, #12
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr

08006d26 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006d26:	b480      	push	{r7}
 8006d28:	b083      	sub	sp, #12
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	370c      	adds	r7, #12
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr

08006d3e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006d3e:	b480      	push	{r7}
 8006d40:	b085      	sub	sp, #20
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	60f8      	str	r0, [r7, #12]
 8006d46:	60b9      	str	r1, [r7, #8]
 8006d48:	607a      	str	r2, [r7, #4]
 8006d4a:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006d5a:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	683a      	ldr	r2, [r7, #0]
 8006d62:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	2b40      	cmp	r3, #64	@ 0x40
 8006d6a:	d108      	bne.n	8006d7e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68ba      	ldr	r2, [r7, #8]
 8006d7a:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006d7c:	e007      	b.n	8006d8e <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	68ba      	ldr	r2, [r7, #8]
 8006d84:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	60da      	str	r2, [r3, #12]
}
 8006d8e:	bf00      	nop
 8006d90:	3714      	adds	r7, #20
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr

08006d9a <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006d9a:	b480      	push	{r7}
 8006d9c:	b085      	sub	sp, #20
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	3b10      	subs	r3, #16
 8006daa:	4a14      	ldr	r2, [pc, #80]	@ (8006dfc <DMA_CalcBaseAndBitshift+0x62>)
 8006dac:	fba2 2303 	umull	r2, r3, r2, r3
 8006db0:	091b      	lsrs	r3, r3, #4
 8006db2:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006db4:	4a12      	ldr	r2, [pc, #72]	@ (8006e00 <DMA_CalcBaseAndBitshift+0x66>)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	4413      	add	r3, r2
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2b03      	cmp	r3, #3
 8006dc6:	d909      	bls.n	8006ddc <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006dd0:	f023 0303 	bic.w	r3, r3, #3
 8006dd4:	1d1a      	adds	r2, r3, #4
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	659a      	str	r2, [r3, #88]	@ 0x58
 8006dda:	e007      	b.n	8006dec <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006de4:	f023 0303 	bic.w	r3, r3, #3
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3714      	adds	r7, #20
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr
 8006dfc:	aaaaaaab 	.word	0xaaaaaaab
 8006e00:	0803f84c 	.word	0x0803f84c

08006e04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b085      	sub	sp, #20
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d11f      	bne.n	8006e5e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	2b03      	cmp	r3, #3
 8006e22:	d856      	bhi.n	8006ed2 <DMA_CheckFifoParam+0xce>
 8006e24:	a201      	add	r2, pc, #4	@ (adr r2, 8006e2c <DMA_CheckFifoParam+0x28>)
 8006e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e2a:	bf00      	nop
 8006e2c:	08006e3d 	.word	0x08006e3d
 8006e30:	08006e4f 	.word	0x08006e4f
 8006e34:	08006e3d 	.word	0x08006e3d
 8006e38:	08006ed3 	.word	0x08006ed3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d046      	beq.n	8006ed6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e4c:	e043      	b.n	8006ed6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e52:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006e56:	d140      	bne.n	8006eda <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e5c:	e03d      	b.n	8006eda <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	699b      	ldr	r3, [r3, #24]
 8006e62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e66:	d121      	bne.n	8006eac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	2b03      	cmp	r3, #3
 8006e6c:	d837      	bhi.n	8006ede <DMA_CheckFifoParam+0xda>
 8006e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8006e74 <DMA_CheckFifoParam+0x70>)
 8006e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e74:	08006e85 	.word	0x08006e85
 8006e78:	08006e8b 	.word	0x08006e8b
 8006e7c:	08006e85 	.word	0x08006e85
 8006e80:	08006e9d 	.word	0x08006e9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	73fb      	strb	r3, [r7, #15]
      break;
 8006e88:	e030      	b.n	8006eec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e8e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d025      	beq.n	8006ee2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e9a:	e022      	b.n	8006ee2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006ea4:	d11f      	bne.n	8006ee6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006eaa:	e01c      	b.n	8006ee6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	d903      	bls.n	8006eba <DMA_CheckFifoParam+0xb6>
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	2b03      	cmp	r3, #3
 8006eb6:	d003      	beq.n	8006ec0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006eb8:	e018      	b.n	8006eec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	73fb      	strb	r3, [r7, #15]
      break;
 8006ebe:	e015      	b.n	8006eec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ec4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d00e      	beq.n	8006eea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	73fb      	strb	r3, [r7, #15]
      break;
 8006ed0:	e00b      	b.n	8006eea <DMA_CheckFifoParam+0xe6>
      break;
 8006ed2:	bf00      	nop
 8006ed4:	e00a      	b.n	8006eec <DMA_CheckFifoParam+0xe8>
      break;
 8006ed6:	bf00      	nop
 8006ed8:	e008      	b.n	8006eec <DMA_CheckFifoParam+0xe8>
      break;
 8006eda:	bf00      	nop
 8006edc:	e006      	b.n	8006eec <DMA_CheckFifoParam+0xe8>
      break;
 8006ede:	bf00      	nop
 8006ee0:	e004      	b.n	8006eec <DMA_CheckFifoParam+0xe8>
      break;
 8006ee2:	bf00      	nop
 8006ee4:	e002      	b.n	8006eec <DMA_CheckFifoParam+0xe8>
      break;   
 8006ee6:	bf00      	nop
 8006ee8:	e000      	b.n	8006eec <DMA_CheckFifoParam+0xe8>
      break;
 8006eea:	bf00      	nop
    }
  } 
  
  return status; 
 8006eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3714      	adds	r7, #20
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop

08006efc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b089      	sub	sp, #36	@ 0x24
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006f06:	2300      	movs	r3, #0
 8006f08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006f12:	2300      	movs	r3, #0
 8006f14:	61fb      	str	r3, [r7, #28]
 8006f16:	e159      	b.n	80071cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006f18:	2201      	movs	r2, #1
 8006f1a:	69fb      	ldr	r3, [r7, #28]
 8006f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	697a      	ldr	r2, [r7, #20]
 8006f28:	4013      	ands	r3, r2
 8006f2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006f2c:	693a      	ldr	r2, [r7, #16]
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	f040 8148 	bne.w	80071c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	f003 0303 	and.w	r3, r3, #3
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d005      	beq.n	8006f4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006f4a:	2b02      	cmp	r3, #2
 8006f4c:	d130      	bne.n	8006fb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006f54:	69fb      	ldr	r3, [r7, #28]
 8006f56:	005b      	lsls	r3, r3, #1
 8006f58:	2203      	movs	r2, #3
 8006f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f5e:	43db      	mvns	r3, r3
 8006f60:	69ba      	ldr	r2, [r7, #24]
 8006f62:	4013      	ands	r3, r2
 8006f64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	68da      	ldr	r2, [r3, #12]
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	005b      	lsls	r3, r3, #1
 8006f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f72:	69ba      	ldr	r2, [r7, #24]
 8006f74:	4313      	orrs	r3, r2
 8006f76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	69ba      	ldr	r2, [r7, #24]
 8006f7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006f84:	2201      	movs	r2, #1
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	fa02 f303 	lsl.w	r3, r2, r3
 8006f8c:	43db      	mvns	r3, r3
 8006f8e:	69ba      	ldr	r2, [r7, #24]
 8006f90:	4013      	ands	r3, r2
 8006f92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	091b      	lsrs	r3, r3, #4
 8006f9a:	f003 0201 	and.w	r2, r3, #1
 8006f9e:	69fb      	ldr	r3, [r7, #28]
 8006fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa4:	69ba      	ldr	r2, [r7, #24]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	69ba      	ldr	r2, [r7, #24]
 8006fae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	f003 0303 	and.w	r3, r3, #3
 8006fb8:	2b03      	cmp	r3, #3
 8006fba:	d017      	beq.n	8006fec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	005b      	lsls	r3, r3, #1
 8006fc6:	2203      	movs	r2, #3
 8006fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8006fcc:	43db      	mvns	r3, r3
 8006fce:	69ba      	ldr	r2, [r7, #24]
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	689a      	ldr	r2, [r3, #8]
 8006fd8:	69fb      	ldr	r3, [r7, #28]
 8006fda:	005b      	lsls	r3, r3, #1
 8006fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe0:	69ba      	ldr	r2, [r7, #24]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	69ba      	ldr	r2, [r7, #24]
 8006fea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	f003 0303 	and.w	r3, r3, #3
 8006ff4:	2b02      	cmp	r3, #2
 8006ff6:	d123      	bne.n	8007040 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	08da      	lsrs	r2, r3, #3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	3208      	adds	r2, #8
 8007000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007004:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007006:	69fb      	ldr	r3, [r7, #28]
 8007008:	f003 0307 	and.w	r3, r3, #7
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	220f      	movs	r2, #15
 8007010:	fa02 f303 	lsl.w	r3, r2, r3
 8007014:	43db      	mvns	r3, r3
 8007016:	69ba      	ldr	r2, [r7, #24]
 8007018:	4013      	ands	r3, r2
 800701a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	691a      	ldr	r2, [r3, #16]
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	f003 0307 	and.w	r3, r3, #7
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	fa02 f303 	lsl.w	r3, r2, r3
 800702c:	69ba      	ldr	r2, [r7, #24]
 800702e:	4313      	orrs	r3, r2
 8007030:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	08da      	lsrs	r2, r3, #3
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	3208      	adds	r2, #8
 800703a:	69b9      	ldr	r1, [r7, #24]
 800703c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	005b      	lsls	r3, r3, #1
 800704a:	2203      	movs	r2, #3
 800704c:	fa02 f303 	lsl.w	r3, r2, r3
 8007050:	43db      	mvns	r3, r3
 8007052:	69ba      	ldr	r2, [r7, #24]
 8007054:	4013      	ands	r3, r2
 8007056:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	f003 0203 	and.w	r2, r3, #3
 8007060:	69fb      	ldr	r3, [r7, #28]
 8007062:	005b      	lsls	r3, r3, #1
 8007064:	fa02 f303 	lsl.w	r3, r2, r3
 8007068:	69ba      	ldr	r2, [r7, #24]
 800706a:	4313      	orrs	r3, r2
 800706c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	69ba      	ldr	r2, [r7, #24]
 8007072:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800707c:	2b00      	cmp	r3, #0
 800707e:	f000 80a2 	beq.w	80071c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007082:	2300      	movs	r3, #0
 8007084:	60fb      	str	r3, [r7, #12]
 8007086:	4b57      	ldr	r3, [pc, #348]	@ (80071e4 <HAL_GPIO_Init+0x2e8>)
 8007088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800708a:	4a56      	ldr	r2, [pc, #344]	@ (80071e4 <HAL_GPIO_Init+0x2e8>)
 800708c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007090:	6453      	str	r3, [r2, #68]	@ 0x44
 8007092:	4b54      	ldr	r3, [pc, #336]	@ (80071e4 <HAL_GPIO_Init+0x2e8>)
 8007094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007096:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800709a:	60fb      	str	r3, [r7, #12]
 800709c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800709e:	4a52      	ldr	r2, [pc, #328]	@ (80071e8 <HAL_GPIO_Init+0x2ec>)
 80070a0:	69fb      	ldr	r3, [r7, #28]
 80070a2:	089b      	lsrs	r3, r3, #2
 80070a4:	3302      	adds	r3, #2
 80070a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80070ac:	69fb      	ldr	r3, [r7, #28]
 80070ae:	f003 0303 	and.w	r3, r3, #3
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	220f      	movs	r2, #15
 80070b6:	fa02 f303 	lsl.w	r3, r2, r3
 80070ba:	43db      	mvns	r3, r3
 80070bc:	69ba      	ldr	r2, [r7, #24]
 80070be:	4013      	ands	r3, r2
 80070c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4a49      	ldr	r2, [pc, #292]	@ (80071ec <HAL_GPIO_Init+0x2f0>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d019      	beq.n	80070fe <HAL_GPIO_Init+0x202>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4a48      	ldr	r2, [pc, #288]	@ (80071f0 <HAL_GPIO_Init+0x2f4>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d013      	beq.n	80070fa <HAL_GPIO_Init+0x1fe>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4a47      	ldr	r2, [pc, #284]	@ (80071f4 <HAL_GPIO_Init+0x2f8>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d00d      	beq.n	80070f6 <HAL_GPIO_Init+0x1fa>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4a46      	ldr	r2, [pc, #280]	@ (80071f8 <HAL_GPIO_Init+0x2fc>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d007      	beq.n	80070f2 <HAL_GPIO_Init+0x1f6>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a45      	ldr	r2, [pc, #276]	@ (80071fc <HAL_GPIO_Init+0x300>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d101      	bne.n	80070ee <HAL_GPIO_Init+0x1f2>
 80070ea:	2304      	movs	r3, #4
 80070ec:	e008      	b.n	8007100 <HAL_GPIO_Init+0x204>
 80070ee:	2307      	movs	r3, #7
 80070f0:	e006      	b.n	8007100 <HAL_GPIO_Init+0x204>
 80070f2:	2303      	movs	r3, #3
 80070f4:	e004      	b.n	8007100 <HAL_GPIO_Init+0x204>
 80070f6:	2302      	movs	r3, #2
 80070f8:	e002      	b.n	8007100 <HAL_GPIO_Init+0x204>
 80070fa:	2301      	movs	r3, #1
 80070fc:	e000      	b.n	8007100 <HAL_GPIO_Init+0x204>
 80070fe:	2300      	movs	r3, #0
 8007100:	69fa      	ldr	r2, [r7, #28]
 8007102:	f002 0203 	and.w	r2, r2, #3
 8007106:	0092      	lsls	r2, r2, #2
 8007108:	4093      	lsls	r3, r2
 800710a:	69ba      	ldr	r2, [r7, #24]
 800710c:	4313      	orrs	r3, r2
 800710e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007110:	4935      	ldr	r1, [pc, #212]	@ (80071e8 <HAL_GPIO_Init+0x2ec>)
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	089b      	lsrs	r3, r3, #2
 8007116:	3302      	adds	r3, #2
 8007118:	69ba      	ldr	r2, [r7, #24]
 800711a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800711e:	4b38      	ldr	r3, [pc, #224]	@ (8007200 <HAL_GPIO_Init+0x304>)
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	43db      	mvns	r3, r3
 8007128:	69ba      	ldr	r2, [r7, #24]
 800712a:	4013      	ands	r3, r2
 800712c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007136:	2b00      	cmp	r3, #0
 8007138:	d003      	beq.n	8007142 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800713a:	69ba      	ldr	r2, [r7, #24]
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	4313      	orrs	r3, r2
 8007140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007142:	4a2f      	ldr	r2, [pc, #188]	@ (8007200 <HAL_GPIO_Init+0x304>)
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007148:	4b2d      	ldr	r3, [pc, #180]	@ (8007200 <HAL_GPIO_Init+0x304>)
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	43db      	mvns	r3, r3
 8007152:	69ba      	ldr	r2, [r7, #24]
 8007154:	4013      	ands	r3, r2
 8007156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007160:	2b00      	cmp	r3, #0
 8007162:	d003      	beq.n	800716c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007164:	69ba      	ldr	r2, [r7, #24]
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	4313      	orrs	r3, r2
 800716a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800716c:	4a24      	ldr	r2, [pc, #144]	@ (8007200 <HAL_GPIO_Init+0x304>)
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007172:	4b23      	ldr	r3, [pc, #140]	@ (8007200 <HAL_GPIO_Init+0x304>)
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	43db      	mvns	r3, r3
 800717c:	69ba      	ldr	r2, [r7, #24]
 800717e:	4013      	ands	r3, r2
 8007180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800718a:	2b00      	cmp	r3, #0
 800718c:	d003      	beq.n	8007196 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800718e:	69ba      	ldr	r2, [r7, #24]
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	4313      	orrs	r3, r2
 8007194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007196:	4a1a      	ldr	r2, [pc, #104]	@ (8007200 <HAL_GPIO_Init+0x304>)
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800719c:	4b18      	ldr	r3, [pc, #96]	@ (8007200 <HAL_GPIO_Init+0x304>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	43db      	mvns	r3, r3
 80071a6:	69ba      	ldr	r2, [r7, #24]
 80071a8:	4013      	ands	r3, r2
 80071aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d003      	beq.n	80071c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80071b8:	69ba      	ldr	r2, [r7, #24]
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	4313      	orrs	r3, r2
 80071be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80071c0:	4a0f      	ldr	r2, [pc, #60]	@ (8007200 <HAL_GPIO_Init+0x304>)
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	3301      	adds	r3, #1
 80071ca:	61fb      	str	r3, [r7, #28]
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	2b0f      	cmp	r3, #15
 80071d0:	f67f aea2 	bls.w	8006f18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80071d4:	bf00      	nop
 80071d6:	bf00      	nop
 80071d8:	3724      	adds	r7, #36	@ 0x24
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
 80071e4:	40023800 	.word	0x40023800
 80071e8:	40013800 	.word	0x40013800
 80071ec:	40020000 	.word	0x40020000
 80071f0:	40020400 	.word	0x40020400
 80071f4:	40020800 	.word	0x40020800
 80071f8:	40020c00 	.word	0x40020c00
 80071fc:	40021000 	.word	0x40021000
 8007200:	40013c00 	.word	0x40013c00

08007204 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007204:	b480      	push	{r7}
 8007206:	b087      	sub	sp, #28
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800720e:	2300      	movs	r3, #0
 8007210:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8007212:	2300      	movs	r3, #0
 8007214:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8007216:	2300      	movs	r3, #0
 8007218:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800721a:	2300      	movs	r3, #0
 800721c:	617b      	str	r3, [r7, #20]
 800721e:	e0bb      	b.n	8007398 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007220:	2201      	movs	r2, #1
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	fa02 f303 	lsl.w	r3, r2, r3
 8007228:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800722a:	683a      	ldr	r2, [r7, #0]
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	4013      	ands	r3, r2
 8007230:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	429a      	cmp	r2, r3
 8007238:	f040 80ab 	bne.w	8007392 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800723c:	4a5c      	ldr	r2, [pc, #368]	@ (80073b0 <HAL_GPIO_DeInit+0x1ac>)
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	089b      	lsrs	r3, r3, #2
 8007242:	3302      	adds	r3, #2
 8007244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007248:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	f003 0303 	and.w	r3, r3, #3
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	220f      	movs	r2, #15
 8007254:	fa02 f303 	lsl.w	r3, r2, r3
 8007258:	68ba      	ldr	r2, [r7, #8]
 800725a:	4013      	ands	r3, r2
 800725c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	4a54      	ldr	r2, [pc, #336]	@ (80073b4 <HAL_GPIO_DeInit+0x1b0>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d019      	beq.n	800729a <HAL_GPIO_DeInit+0x96>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	4a53      	ldr	r2, [pc, #332]	@ (80073b8 <HAL_GPIO_DeInit+0x1b4>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d013      	beq.n	8007296 <HAL_GPIO_DeInit+0x92>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	4a52      	ldr	r2, [pc, #328]	@ (80073bc <HAL_GPIO_DeInit+0x1b8>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d00d      	beq.n	8007292 <HAL_GPIO_DeInit+0x8e>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	4a51      	ldr	r2, [pc, #324]	@ (80073c0 <HAL_GPIO_DeInit+0x1bc>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d007      	beq.n	800728e <HAL_GPIO_DeInit+0x8a>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	4a50      	ldr	r2, [pc, #320]	@ (80073c4 <HAL_GPIO_DeInit+0x1c0>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d101      	bne.n	800728a <HAL_GPIO_DeInit+0x86>
 8007286:	2304      	movs	r3, #4
 8007288:	e008      	b.n	800729c <HAL_GPIO_DeInit+0x98>
 800728a:	2307      	movs	r3, #7
 800728c:	e006      	b.n	800729c <HAL_GPIO_DeInit+0x98>
 800728e:	2303      	movs	r3, #3
 8007290:	e004      	b.n	800729c <HAL_GPIO_DeInit+0x98>
 8007292:	2302      	movs	r3, #2
 8007294:	e002      	b.n	800729c <HAL_GPIO_DeInit+0x98>
 8007296:	2301      	movs	r3, #1
 8007298:	e000      	b.n	800729c <HAL_GPIO_DeInit+0x98>
 800729a:	2300      	movs	r3, #0
 800729c:	697a      	ldr	r2, [r7, #20]
 800729e:	f002 0203 	and.w	r2, r2, #3
 80072a2:	0092      	lsls	r2, r2, #2
 80072a4:	4093      	lsls	r3, r2
 80072a6:	68ba      	ldr	r2, [r7, #8]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d132      	bne.n	8007312 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80072ac:	4b46      	ldr	r3, [pc, #280]	@ (80073c8 <HAL_GPIO_DeInit+0x1c4>)
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	43db      	mvns	r3, r3
 80072b4:	4944      	ldr	r1, [pc, #272]	@ (80073c8 <HAL_GPIO_DeInit+0x1c4>)
 80072b6:	4013      	ands	r3, r2
 80072b8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80072ba:	4b43      	ldr	r3, [pc, #268]	@ (80073c8 <HAL_GPIO_DeInit+0x1c4>)
 80072bc:	685a      	ldr	r2, [r3, #4]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	43db      	mvns	r3, r3
 80072c2:	4941      	ldr	r1, [pc, #260]	@ (80073c8 <HAL_GPIO_DeInit+0x1c4>)
 80072c4:	4013      	ands	r3, r2
 80072c6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80072c8:	4b3f      	ldr	r3, [pc, #252]	@ (80073c8 <HAL_GPIO_DeInit+0x1c4>)
 80072ca:	68da      	ldr	r2, [r3, #12]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	43db      	mvns	r3, r3
 80072d0:	493d      	ldr	r1, [pc, #244]	@ (80073c8 <HAL_GPIO_DeInit+0x1c4>)
 80072d2:	4013      	ands	r3, r2
 80072d4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80072d6:	4b3c      	ldr	r3, [pc, #240]	@ (80073c8 <HAL_GPIO_DeInit+0x1c4>)
 80072d8:	689a      	ldr	r2, [r3, #8]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	43db      	mvns	r3, r3
 80072de:	493a      	ldr	r1, [pc, #232]	@ (80073c8 <HAL_GPIO_DeInit+0x1c4>)
 80072e0:	4013      	ands	r3, r2
 80072e2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	f003 0303 	and.w	r3, r3, #3
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	220f      	movs	r2, #15
 80072ee:	fa02 f303 	lsl.w	r3, r2, r3
 80072f2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80072f4:	4a2e      	ldr	r2, [pc, #184]	@ (80073b0 <HAL_GPIO_DeInit+0x1ac>)
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	089b      	lsrs	r3, r3, #2
 80072fa:	3302      	adds	r3, #2
 80072fc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	43da      	mvns	r2, r3
 8007304:	482a      	ldr	r0, [pc, #168]	@ (80073b0 <HAL_GPIO_DeInit+0x1ac>)
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	089b      	lsrs	r3, r3, #2
 800730a:	400a      	ands	r2, r1
 800730c:	3302      	adds	r3, #2
 800730e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	005b      	lsls	r3, r3, #1
 800731a:	2103      	movs	r1, #3
 800731c:	fa01 f303 	lsl.w	r3, r1, r3
 8007320:	43db      	mvns	r3, r3
 8007322:	401a      	ands	r2, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	08da      	lsrs	r2, r3, #3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	3208      	adds	r2, #8
 8007330:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	f003 0307 	and.w	r3, r3, #7
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	220f      	movs	r2, #15
 800733e:	fa02 f303 	lsl.w	r3, r2, r3
 8007342:	43db      	mvns	r3, r3
 8007344:	697a      	ldr	r2, [r7, #20]
 8007346:	08d2      	lsrs	r2, r2, #3
 8007348:	4019      	ands	r1, r3
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	3208      	adds	r2, #8
 800734e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	68da      	ldr	r2, [r3, #12]
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	005b      	lsls	r3, r3, #1
 800735a:	2103      	movs	r1, #3
 800735c:	fa01 f303 	lsl.w	r3, r1, r3
 8007360:	43db      	mvns	r3, r3
 8007362:	401a      	ands	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	685a      	ldr	r2, [r3, #4]
 800736c:	2101      	movs	r1, #1
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	fa01 f303 	lsl.w	r3, r1, r3
 8007374:	43db      	mvns	r3, r3
 8007376:	401a      	ands	r2, r3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	689a      	ldr	r2, [r3, #8]
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	005b      	lsls	r3, r3, #1
 8007384:	2103      	movs	r1, #3
 8007386:	fa01 f303 	lsl.w	r3, r1, r3
 800738a:	43db      	mvns	r3, r3
 800738c:	401a      	ands	r2, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	3301      	adds	r3, #1
 8007396:	617b      	str	r3, [r7, #20]
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	2b0f      	cmp	r3, #15
 800739c:	f67f af40 	bls.w	8007220 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80073a0:	bf00      	nop
 80073a2:	bf00      	nop
 80073a4:	371c      	adds	r7, #28
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop
 80073b0:	40013800 	.word	0x40013800
 80073b4:	40020000 	.word	0x40020000
 80073b8:	40020400 	.word	0x40020400
 80073bc:	40020800 	.word	0x40020800
 80073c0:	40020c00 	.word	0x40020c00
 80073c4:	40021000 	.word	0x40021000
 80073c8:	40013c00 	.word	0x40013c00

080073cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b085      	sub	sp, #20
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	460b      	mov	r3, r1
 80073d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	691a      	ldr	r2, [r3, #16]
 80073dc:	887b      	ldrh	r3, [r7, #2]
 80073de:	4013      	ands	r3, r2
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d002      	beq.n	80073ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80073e4:	2301      	movs	r3, #1
 80073e6:	73fb      	strb	r3, [r7, #15]
 80073e8:	e001      	b.n	80073ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80073ea:	2300      	movs	r3, #0
 80073ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80073ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3714      	adds	r7, #20
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	460b      	mov	r3, r1
 8007406:	807b      	strh	r3, [r7, #2]
 8007408:	4613      	mov	r3, r2
 800740a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800740c:	787b      	ldrb	r3, [r7, #1]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d003      	beq.n	800741a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007412:	887a      	ldrh	r2, [r7, #2]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007418:	e003      	b.n	8007422 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800741a:	887b      	ldrh	r3, [r7, #2]
 800741c:	041a      	lsls	r2, r3, #16
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	619a      	str	r2, [r3, #24]
}
 8007422:	bf00      	nop
 8007424:	370c      	adds	r7, #12
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr

0800742e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800742e:	b480      	push	{r7}
 8007430:	b085      	sub	sp, #20
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
 8007436:	460b      	mov	r3, r1
 8007438:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	695b      	ldr	r3, [r3, #20]
 800743e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007440:	887a      	ldrh	r2, [r7, #2]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	4013      	ands	r3, r2
 8007446:	041a      	lsls	r2, r3, #16
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	43d9      	mvns	r1, r3
 800744c:	887b      	ldrh	r3, [r7, #2]
 800744e:	400b      	ands	r3, r1
 8007450:	431a      	orrs	r2, r3
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	619a      	str	r2, [r3, #24]
}
 8007456:	bf00      	nop
 8007458:	3714      	adds	r7, #20
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr

08007462 <HAL_GPIO_LockPin>:
  * @param  GPIO_Pin specifies the port bit to be locked.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007462:	b480      	push	{r7}
 8007464:	b085      	sub	sp, #20
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
 800746a:	460b      	mov	r3, r1
 800746c:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 800746e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007472:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
 8007474:	887a      	ldrh	r2, [r7, #2]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	4313      	orrs	r3, r2
 800747a:	60fb      	str	r3, [r7, #12]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	61da      	str	r2, [r3, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 8007482:	887a      	ldrh	r2, [r7, #2]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	61da      	str	r2, [r3, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8007488:	68fa      	ldr	r2, [r7, #12]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	61da      	str	r2, [r3, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  tmp = GPIOx->LCKR;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	69db      	ldr	r3, [r3, #28]
 8007492:	60fb      	str	r3, [r7, #12]

  /* Read again in order to confirm lock is active */
 if((GPIOx->LCKR & GPIO_LCKR_LCKK) != RESET)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	69db      	ldr	r3, [r3, #28]
 8007498:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800749c:	2b00      	cmp	r3, #0
 800749e:	d001      	beq.n	80074a4 <HAL_GPIO_LockPin+0x42>
  {
    return HAL_OK;
 80074a0:	2300      	movs	r3, #0
 80074a2:	e000      	b.n	80074a6 <HAL_GPIO_LockPin+0x44>
  }
  else
  {
    return HAL_ERROR;
 80074a4:	2301      	movs	r3, #1
  }
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3714      	adds	r7, #20
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr

080074b2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b082      	sub	sp, #8
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	4603      	mov	r3, r0
 80074ba:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80074bc:	4b08      	ldr	r3, [pc, #32]	@ (80074e0 <HAL_GPIO_EXTI_IRQHandler+0x2e>)
 80074be:	695a      	ldr	r2, [r3, #20]
 80074c0:	88fb      	ldrh	r3, [r7, #6]
 80074c2:	4013      	ands	r3, r2
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d006      	beq.n	80074d6 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80074c8:	4a05      	ldr	r2, [pc, #20]	@ (80074e0 <HAL_GPIO_EXTI_IRQHandler+0x2e>)
 80074ca:	88fb      	ldrh	r3, [r7, #6]
 80074cc:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80074ce:	88fb      	ldrh	r3, [r7, #6]
 80074d0:	4618      	mov	r0, r3
 80074d2:	f7f9 fddf 	bl	8001094 <HAL_GPIO_EXTI_Callback>
  }
}
 80074d6:	bf00      	nop
 80074d8:	3708      	adds	r7, #8
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	40013c00 	.word	0x40013c00
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	4603      	mov	r3, r0
 80074ec:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80074ee:	bf00      	nop
 80074f0:	370c      	adds	r7, #12
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop

080074fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d101      	bne.n	800750e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e12b      	b.n	8007766 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007514:	b2db      	uxtb	r3, r3
 8007516:	2b00      	cmp	r3, #0
 8007518:	d106      	bne.n	8007528 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f7fa fb46 	bl	8001bb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2224      	movs	r2, #36	@ 0x24
 800752c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f022 0201 	bic.w	r2, r2, #1
 800753e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800754e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800755e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007560:	f006 fed4 	bl	800e30c <HAL_RCC_GetPCLK1Freq>
 8007564:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	4a81      	ldr	r2, [pc, #516]	@ (8007770 <HAL_I2C_Init+0x274>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d807      	bhi.n	8007580 <HAL_I2C_Init+0x84>
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	4a80      	ldr	r2, [pc, #512]	@ (8007774 <HAL_I2C_Init+0x278>)
 8007574:	4293      	cmp	r3, r2
 8007576:	bf94      	ite	ls
 8007578:	2301      	movls	r3, #1
 800757a:	2300      	movhi	r3, #0
 800757c:	b2db      	uxtb	r3, r3
 800757e:	e006      	b.n	800758e <HAL_I2C_Init+0x92>
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	4a7d      	ldr	r2, [pc, #500]	@ (8007778 <HAL_I2C_Init+0x27c>)
 8007584:	4293      	cmp	r3, r2
 8007586:	bf94      	ite	ls
 8007588:	2301      	movls	r3, #1
 800758a:	2300      	movhi	r3, #0
 800758c:	b2db      	uxtb	r3, r3
 800758e:	2b00      	cmp	r3, #0
 8007590:	d001      	beq.n	8007596 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e0e7      	b.n	8007766 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	4a78      	ldr	r2, [pc, #480]	@ (800777c <HAL_I2C_Init+0x280>)
 800759a:	fba2 2303 	umull	r2, r3, r2, r3
 800759e:	0c9b      	lsrs	r3, r3, #18
 80075a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	68ba      	ldr	r2, [r7, #8]
 80075b2:	430a      	orrs	r2, r1
 80075b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	6a1b      	ldr	r3, [r3, #32]
 80075bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	4a6a      	ldr	r2, [pc, #424]	@ (8007770 <HAL_I2C_Init+0x274>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d802      	bhi.n	80075d0 <HAL_I2C_Init+0xd4>
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	3301      	adds	r3, #1
 80075ce:	e009      	b.n	80075e4 <HAL_I2C_Init+0xe8>
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80075d6:	fb02 f303 	mul.w	r3, r2, r3
 80075da:	4a69      	ldr	r2, [pc, #420]	@ (8007780 <HAL_I2C_Init+0x284>)
 80075dc:	fba2 2303 	umull	r2, r3, r2, r3
 80075e0:	099b      	lsrs	r3, r3, #6
 80075e2:	3301      	adds	r3, #1
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	6812      	ldr	r2, [r2, #0]
 80075e8:	430b      	orrs	r3, r1
 80075ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	69db      	ldr	r3, [r3, #28]
 80075f2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80075f6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	495c      	ldr	r1, [pc, #368]	@ (8007770 <HAL_I2C_Init+0x274>)
 8007600:	428b      	cmp	r3, r1
 8007602:	d819      	bhi.n	8007638 <HAL_I2C_Init+0x13c>
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	1e59      	subs	r1, r3, #1
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	005b      	lsls	r3, r3, #1
 800760e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007612:	1c59      	adds	r1, r3, #1
 8007614:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007618:	400b      	ands	r3, r1
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00a      	beq.n	8007634 <HAL_I2C_Init+0x138>
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	1e59      	subs	r1, r3, #1
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	005b      	lsls	r3, r3, #1
 8007628:	fbb1 f3f3 	udiv	r3, r1, r3
 800762c:	3301      	adds	r3, #1
 800762e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007632:	e051      	b.n	80076d8 <HAL_I2C_Init+0x1dc>
 8007634:	2304      	movs	r3, #4
 8007636:	e04f      	b.n	80076d8 <HAL_I2C_Init+0x1dc>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d111      	bne.n	8007664 <HAL_I2C_Init+0x168>
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	1e58      	subs	r0, r3, #1
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6859      	ldr	r1, [r3, #4]
 8007648:	460b      	mov	r3, r1
 800764a:	005b      	lsls	r3, r3, #1
 800764c:	440b      	add	r3, r1
 800764e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007652:	3301      	adds	r3, #1
 8007654:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007658:	2b00      	cmp	r3, #0
 800765a:	bf0c      	ite	eq
 800765c:	2301      	moveq	r3, #1
 800765e:	2300      	movne	r3, #0
 8007660:	b2db      	uxtb	r3, r3
 8007662:	e012      	b.n	800768a <HAL_I2C_Init+0x18e>
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	1e58      	subs	r0, r3, #1
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6859      	ldr	r1, [r3, #4]
 800766c:	460b      	mov	r3, r1
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	440b      	add	r3, r1
 8007672:	0099      	lsls	r1, r3, #2
 8007674:	440b      	add	r3, r1
 8007676:	fbb0 f3f3 	udiv	r3, r0, r3
 800767a:	3301      	adds	r3, #1
 800767c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007680:	2b00      	cmp	r3, #0
 8007682:	bf0c      	ite	eq
 8007684:	2301      	moveq	r3, #1
 8007686:	2300      	movne	r3, #0
 8007688:	b2db      	uxtb	r3, r3
 800768a:	2b00      	cmp	r3, #0
 800768c:	d001      	beq.n	8007692 <HAL_I2C_Init+0x196>
 800768e:	2301      	movs	r3, #1
 8007690:	e022      	b.n	80076d8 <HAL_I2C_Init+0x1dc>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d10e      	bne.n	80076b8 <HAL_I2C_Init+0x1bc>
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	1e58      	subs	r0, r3, #1
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6859      	ldr	r1, [r3, #4]
 80076a2:	460b      	mov	r3, r1
 80076a4:	005b      	lsls	r3, r3, #1
 80076a6:	440b      	add	r3, r1
 80076a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80076ac:	3301      	adds	r3, #1
 80076ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076b6:	e00f      	b.n	80076d8 <HAL_I2C_Init+0x1dc>
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	1e58      	subs	r0, r3, #1
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6859      	ldr	r1, [r3, #4]
 80076c0:	460b      	mov	r3, r1
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	440b      	add	r3, r1
 80076c6:	0099      	lsls	r1, r3, #2
 80076c8:	440b      	add	r3, r1
 80076ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80076ce:	3301      	adds	r3, #1
 80076d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80076d8:	6879      	ldr	r1, [r7, #4]
 80076da:	6809      	ldr	r1, [r1, #0]
 80076dc:	4313      	orrs	r3, r2
 80076de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	69da      	ldr	r2, [r3, #28]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a1b      	ldr	r3, [r3, #32]
 80076f2:	431a      	orrs	r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	430a      	orrs	r2, r1
 80076fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8007706:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	6911      	ldr	r1, [r2, #16]
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	68d2      	ldr	r2, [r2, #12]
 8007712:	4311      	orrs	r1, r2
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	6812      	ldr	r2, [r2, #0]
 8007718:	430b      	orrs	r3, r1
 800771a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	695a      	ldr	r2, [r3, #20]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	699b      	ldr	r3, [r3, #24]
 800772e:	431a      	orrs	r2, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	430a      	orrs	r2, r1
 8007736:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f042 0201 	orr.w	r2, r2, #1
 8007746:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2220      	movs	r2, #32
 8007752:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3710      	adds	r7, #16
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	000186a0 	.word	0x000186a0
 8007774:	001e847f 	.word	0x001e847f
 8007778:	003d08ff 	.word	0x003d08ff
 800777c:	431bde83 	.word	0x431bde83
 8007780:	10624dd3 	.word	0x10624dd3

08007784 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d101      	bne.n	8007796 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	e021      	b.n	80077da <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2224      	movs	r2, #36	@ 0x24
 800779a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f022 0201 	bic.w	r2, r2, #1
 80077ac:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f7fa fa48 	bl	8001c44 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3708      	adds	r7, #8
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80077e2:	b480      	push	{r7}
 80077e4:	b083      	sub	sp, #12
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80077ea:	bf00      	nop
 80077ec:	370c      	adds	r7, #12
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80077f6:	b480      	push	{r7}
 80077f8:	b083      	sub	sp, #12
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80077fe:	bf00      	nop
 8007800:	370c      	adds	r7, #12
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr

0800780a <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800780a:	b480      	push	{r7}
 800780c:	b083      	sub	sp, #12
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	695b      	ldr	r3, [r3, #20]
 8007818:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800781c:	2b80      	cmp	r3, #128	@ 0x80
 800781e:	d103      	bne.n	8007828 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	2200      	movs	r2, #0
 8007826:	611a      	str	r2, [r3, #16]
  }
}
 8007828:	bf00      	nop
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b088      	sub	sp, #32
 8007838:	af02      	add	r7, sp, #8
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	607a      	str	r2, [r7, #4]
 800783e:	461a      	mov	r2, r3
 8007840:	460b      	mov	r3, r1
 8007842:	817b      	strh	r3, [r7, #10]
 8007844:	4613      	mov	r3, r2
 8007846:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007848:	f7fe f878 	bl	800593c <HAL_GetTick>
 800784c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007854:	b2db      	uxtb	r3, r3
 8007856:	2b20      	cmp	r3, #32
 8007858:	f040 80e0 	bne.w	8007a1c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	9300      	str	r3, [sp, #0]
 8007860:	2319      	movs	r3, #25
 8007862:	2201      	movs	r2, #1
 8007864:	4970      	ldr	r1, [pc, #448]	@ (8007a28 <HAL_I2C_Master_Transmit+0x1f4>)
 8007866:	68f8      	ldr	r0, [r7, #12]
 8007868:	f005 fd90 	bl	800d38c <I2C_WaitOnFlagUntilTimeout>
 800786c:	4603      	mov	r3, r0
 800786e:	2b00      	cmp	r3, #0
 8007870:	d001      	beq.n	8007876 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007872:	2302      	movs	r3, #2
 8007874:	e0d3      	b.n	8007a1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800787c:	2b01      	cmp	r3, #1
 800787e:	d101      	bne.n	8007884 <HAL_I2C_Master_Transmit+0x50>
 8007880:	2302      	movs	r3, #2
 8007882:	e0cc      	b.n	8007a1e <HAL_I2C_Master_Transmit+0x1ea>
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2201      	movs	r2, #1
 8007888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f003 0301 	and.w	r3, r3, #1
 8007896:	2b01      	cmp	r3, #1
 8007898:	d007      	beq.n	80078aa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	681a      	ldr	r2, [r3, #0]
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f042 0201 	orr.w	r2, r2, #1
 80078a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80078b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2221      	movs	r2, #33	@ 0x21
 80078be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2210      	movs	r2, #16
 80078c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2200      	movs	r2, #0
 80078ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	893a      	ldrh	r2, [r7, #8]
 80078da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	4a50      	ldr	r2, [pc, #320]	@ (8007a2c <HAL_I2C_Master_Transmit+0x1f8>)
 80078ea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80078ec:	8979      	ldrh	r1, [r7, #10]
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	6a3a      	ldr	r2, [r7, #32]
 80078f2:	68f8      	ldr	r0, [r7, #12]
 80078f4:	f005 f8b8 	bl	800ca68 <I2C_MasterRequestWrite>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d001      	beq.n	8007902 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80078fe:	2301      	movs	r3, #1
 8007900:	e08d      	b.n	8007a1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007902:	2300      	movs	r3, #0
 8007904:	613b      	str	r3, [r7, #16]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	695b      	ldr	r3, [r3, #20]
 800790c:	613b      	str	r3, [r7, #16]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	699b      	ldr	r3, [r3, #24]
 8007914:	613b      	str	r3, [r7, #16]
 8007916:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007918:	e066      	b.n	80079e8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800791a:	697a      	ldr	r2, [r7, #20]
 800791c:	6a39      	ldr	r1, [r7, #32]
 800791e:	68f8      	ldr	r0, [r7, #12]
 8007920:	f005 fe4e 	bl	800d5c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007924:	4603      	mov	r3, r0
 8007926:	2b00      	cmp	r3, #0
 8007928:	d00d      	beq.n	8007946 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800792e:	2b04      	cmp	r3, #4
 8007930:	d107      	bne.n	8007942 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007940:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	e06b      	b.n	8007a1e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800794a:	781a      	ldrb	r2, [r3, #0]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007956:	1c5a      	adds	r2, r3, #1
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007960:	b29b      	uxth	r3, r3
 8007962:	3b01      	subs	r3, #1
 8007964:	b29a      	uxth	r2, r3
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800796e:	3b01      	subs	r3, #1
 8007970:	b29a      	uxth	r2, r3
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	695b      	ldr	r3, [r3, #20]
 800797c:	f003 0304 	and.w	r3, r3, #4
 8007980:	2b04      	cmp	r3, #4
 8007982:	d11b      	bne.n	80079bc <HAL_I2C_Master_Transmit+0x188>
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007988:	2b00      	cmp	r3, #0
 800798a:	d017      	beq.n	80079bc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007990:	781a      	ldrb	r2, [r3, #0]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800799c:	1c5a      	adds	r2, r3, #1
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	3b01      	subs	r3, #1
 80079aa:	b29a      	uxth	r2, r3
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079b4:	3b01      	subs	r3, #1
 80079b6:	b29a      	uxth	r2, r3
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079bc:	697a      	ldr	r2, [r7, #20]
 80079be:	6a39      	ldr	r1, [r7, #32]
 80079c0:	68f8      	ldr	r0, [r7, #12]
 80079c2:	f005 fe45 	bl	800d650 <I2C_WaitOnBTFFlagUntilTimeout>
 80079c6:	4603      	mov	r3, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d00d      	beq.n	80079e8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079d0:	2b04      	cmp	r3, #4
 80079d2:	d107      	bne.n	80079e4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80079e2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80079e4:	2301      	movs	r3, #1
 80079e6:	e01a      	b.n	8007a1e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d194      	bne.n	800791a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80079fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2220      	movs	r2, #32
 8007a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	e000      	b.n	8007a1e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007a1c:	2302      	movs	r3, #2
  }
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3718      	adds	r7, #24
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	00100002 	.word	0x00100002
 8007a2c:	ffff0000 	.word	0xffff0000

08007a30 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b08c      	sub	sp, #48	@ 0x30
 8007a34:	af02      	add	r7, sp, #8
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	607a      	str	r2, [r7, #4]
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	817b      	strh	r3, [r7, #10]
 8007a40:	4613      	mov	r3, r2
 8007a42:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007a44:	f7fd ff7a 	bl	800593c <HAL_GetTick>
 8007a48:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	2b20      	cmp	r3, #32
 8007a54:	f040 8217 	bne.w	8007e86 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a5a:	9300      	str	r3, [sp, #0]
 8007a5c:	2319      	movs	r3, #25
 8007a5e:	2201      	movs	r2, #1
 8007a60:	497c      	ldr	r1, [pc, #496]	@ (8007c54 <HAL_I2C_Master_Receive+0x224>)
 8007a62:	68f8      	ldr	r0, [r7, #12]
 8007a64:	f005 fc92 	bl	800d38c <I2C_WaitOnFlagUntilTimeout>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d001      	beq.n	8007a72 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8007a6e:	2302      	movs	r3, #2
 8007a70:	e20a      	b.n	8007e88 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d101      	bne.n	8007a80 <HAL_I2C_Master_Receive+0x50>
 8007a7c:	2302      	movs	r3, #2
 8007a7e:	e203      	b.n	8007e88 <HAL_I2C_Master_Receive+0x458>
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2201      	movs	r2, #1
 8007a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f003 0301 	and.w	r3, r3, #1
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d007      	beq.n	8007aa6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f042 0201 	orr.w	r2, r2, #1
 8007aa4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007ab4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2222      	movs	r2, #34	@ 0x22
 8007aba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2210      	movs	r2, #16
 8007ac2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	893a      	ldrh	r2, [r7, #8]
 8007ad6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007adc:	b29a      	uxth	r2, r3
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	4a5c      	ldr	r2, [pc, #368]	@ (8007c58 <HAL_I2C_Master_Receive+0x228>)
 8007ae6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007ae8:	8979      	ldrh	r1, [r7, #10]
 8007aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007aee:	68f8      	ldr	r0, [r7, #12]
 8007af0:	f005 f83c 	bl	800cb6c <I2C_MasterRequestRead>
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d001      	beq.n	8007afe <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	e1c4      	b.n	8007e88 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d113      	bne.n	8007b2e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b06:	2300      	movs	r3, #0
 8007b08:	623b      	str	r3, [r7, #32]
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	695b      	ldr	r3, [r3, #20]
 8007b10:	623b      	str	r3, [r7, #32]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	699b      	ldr	r3, [r3, #24]
 8007b18:	623b      	str	r3, [r7, #32]
 8007b1a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681a      	ldr	r2, [r3, #0]
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007b2a:	601a      	str	r2, [r3, #0]
 8007b2c:	e198      	b.n	8007e60 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d11b      	bne.n	8007b6e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007b44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b46:	2300      	movs	r3, #0
 8007b48:	61fb      	str	r3, [r7, #28]
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	695b      	ldr	r3, [r3, #20]
 8007b50:	61fb      	str	r3, [r7, #28]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	699b      	ldr	r3, [r3, #24]
 8007b58:	61fb      	str	r3, [r7, #28]
 8007b5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007b6a:	601a      	str	r2, [r3, #0]
 8007b6c:	e178      	b.n	8007e60 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b72:	2b02      	cmp	r3, #2
 8007b74:	d11b      	bne.n	8007bae <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007b84:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007b94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b96:	2300      	movs	r3, #0
 8007b98:	61bb      	str	r3, [r7, #24]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	695b      	ldr	r3, [r3, #20]
 8007ba0:	61bb      	str	r3, [r7, #24]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	699b      	ldr	r3, [r3, #24]
 8007ba8:	61bb      	str	r3, [r7, #24]
 8007baa:	69bb      	ldr	r3, [r7, #24]
 8007bac:	e158      	b.n	8007e60 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007bbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	617b      	str	r3, [r7, #20]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	695b      	ldr	r3, [r3, #20]
 8007bc8:	617b      	str	r3, [r7, #20]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	699b      	ldr	r3, [r3, #24]
 8007bd0:	617b      	str	r3, [r7, #20]
 8007bd2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007bd4:	e144      	b.n	8007e60 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bda:	2b03      	cmp	r3, #3
 8007bdc:	f200 80f1 	bhi.w	8007dc2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d123      	bne.n	8007c30 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007be8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007bec:	68f8      	ldr	r0, [r7, #12]
 8007bee:	f005 fded 	bl	800d7cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d001      	beq.n	8007bfc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e145      	b.n	8007e88 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	691a      	ldr	r2, [r3, #16]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c06:	b2d2      	uxtb	r2, r2
 8007c08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c0e:	1c5a      	adds	r2, r3, #1
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c18:	3b01      	subs	r3, #1
 8007c1a:	b29a      	uxth	r2, r3
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	3b01      	subs	r3, #1
 8007c28:	b29a      	uxth	r2, r3
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007c2e:	e117      	b.n	8007e60 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c34:	2b02      	cmp	r3, #2
 8007c36:	d14e      	bne.n	8007cd6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c3a:	9300      	str	r3, [sp, #0]
 8007c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c3e:	2200      	movs	r2, #0
 8007c40:	4906      	ldr	r1, [pc, #24]	@ (8007c5c <HAL_I2C_Master_Receive+0x22c>)
 8007c42:	68f8      	ldr	r0, [r7, #12]
 8007c44:	f005 fba2 	bl	800d38c <I2C_WaitOnFlagUntilTimeout>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d008      	beq.n	8007c60 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e11a      	b.n	8007e88 <HAL_I2C_Master_Receive+0x458>
 8007c52:	bf00      	nop
 8007c54:	00100002 	.word	0x00100002
 8007c58:	ffff0000 	.word	0xffff0000
 8007c5c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	691a      	ldr	r2, [r3, #16]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c7a:	b2d2      	uxtb	r2, r2
 8007c7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c82:	1c5a      	adds	r2, r3, #1
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c8c:	3b01      	subs	r3, #1
 8007c8e:	b29a      	uxth	r2, r3
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	b29a      	uxth	r2, r3
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	691a      	ldr	r2, [r3, #16]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cac:	b2d2      	uxtb	r2, r2
 8007cae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cb4:	1c5a      	adds	r2, r3, #1
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cbe:	3b01      	subs	r3, #1
 8007cc0:	b29a      	uxth	r2, r3
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	3b01      	subs	r3, #1
 8007cce:	b29a      	uxth	r2, r3
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007cd4:	e0c4      	b.n	8007e60 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd8:	9300      	str	r3, [sp, #0]
 8007cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cdc:	2200      	movs	r2, #0
 8007cde:	496c      	ldr	r1, [pc, #432]	@ (8007e90 <HAL_I2C_Master_Receive+0x460>)
 8007ce0:	68f8      	ldr	r0, [r7, #12]
 8007ce2:	f005 fb53 	bl	800d38c <I2C_WaitOnFlagUntilTimeout>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d001      	beq.n	8007cf0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	e0cb      	b.n	8007e88 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007cfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	691a      	ldr	r2, [r3, #16]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d0a:	b2d2      	uxtb	r2, r2
 8007d0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d12:	1c5a      	adds	r2, r3, #1
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d1c:	3b01      	subs	r3, #1
 8007d1e:	b29a      	uxth	r2, r3
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d34:	9300      	str	r3, [sp, #0]
 8007d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d38:	2200      	movs	r2, #0
 8007d3a:	4955      	ldr	r1, [pc, #340]	@ (8007e90 <HAL_I2C_Master_Receive+0x460>)
 8007d3c:	68f8      	ldr	r0, [r7, #12]
 8007d3e:	f005 fb25 	bl	800d38c <I2C_WaitOnFlagUntilTimeout>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d001      	beq.n	8007d4c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	e09d      	b.n	8007e88 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007d5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	691a      	ldr	r2, [r3, #16]
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d66:	b2d2      	uxtb	r2, r2
 8007d68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d6e:	1c5a      	adds	r2, r3, #1
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d78:	3b01      	subs	r3, #1
 8007d7a:	b29a      	uxth	r2, r3
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	3b01      	subs	r3, #1
 8007d88:	b29a      	uxth	r2, r3
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	691a      	ldr	r2, [r3, #16]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d98:	b2d2      	uxtb	r2, r2
 8007d9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007da0:	1c5a      	adds	r2, r3, #1
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007daa:	3b01      	subs	r3, #1
 8007dac:	b29a      	uxth	r2, r3
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	3b01      	subs	r3, #1
 8007dba:	b29a      	uxth	r2, r3
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007dc0:	e04e      	b.n	8007e60 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007dc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007dc4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007dc6:	68f8      	ldr	r0, [r7, #12]
 8007dc8:	f005 fd00 	bl	800d7cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d001      	beq.n	8007dd6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e058      	b.n	8007e88 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	691a      	ldr	r2, [r3, #16]
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007de0:	b2d2      	uxtb	r2, r2
 8007de2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007de8:	1c5a      	adds	r2, r3, #1
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007df2:	3b01      	subs	r3, #1
 8007df4:	b29a      	uxth	r2, r3
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	3b01      	subs	r3, #1
 8007e02:	b29a      	uxth	r2, r3
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	695b      	ldr	r3, [r3, #20]
 8007e0e:	f003 0304 	and.w	r3, r3, #4
 8007e12:	2b04      	cmp	r3, #4
 8007e14:	d124      	bne.n	8007e60 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e1a:	2b03      	cmp	r3, #3
 8007e1c:	d107      	bne.n	8007e2e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e2c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	691a      	ldr	r2, [r3, #16]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e38:	b2d2      	uxtb	r2, r2
 8007e3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e40:	1c5a      	adds	r2, r3, #1
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e4a:	3b01      	subs	r3, #1
 8007e4c:	b29a      	uxth	r2, r3
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	3b01      	subs	r3, #1
 8007e5a:	b29a      	uxth	r2, r3
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	f47f aeb6 	bne.w	8007bd6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2220      	movs	r2, #32
 8007e6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2200      	movs	r2, #0
 8007e76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007e82:	2300      	movs	r3, #0
 8007e84:	e000      	b.n	8007e88 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8007e86:	2302      	movs	r3, #2
  }
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3728      	adds	r7, #40	@ 0x28
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	00010004 	.word	0x00010004

08007e94 <HAL_I2C_Slave_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b08a      	sub	sp, #40	@ 0x28
 8007e98:	af02      	add	r7, sp, #8
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	603b      	str	r3, [r7, #0]
 8007ea0:	4613      	mov	r3, r2
 8007ea2:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007ea4:	f7fd fd4a 	bl	800593c <HAL_GetTick>
 8007ea8:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	2b20      	cmp	r3, #32
 8007eb4:	f040 80fb 	bne.w	80080ae <HAL_I2C_Slave_Transmit+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d002      	beq.n	8007ec4 <HAL_I2C_Slave_Transmit+0x30>
 8007ebe:	88fb      	ldrh	r3, [r7, #6]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d101      	bne.n	8007ec8 <HAL_I2C_Slave_Transmit+0x34>
    {
      return  HAL_ERROR;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	e0f3      	b.n	80080b0 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	d101      	bne.n	8007ed6 <HAL_I2C_Slave_Transmit+0x42>
 8007ed2:	2302      	movs	r3, #2
 8007ed4:	e0ec      	b.n	80080b0 <HAL_I2C_Slave_Transmit+0x21c>
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2201      	movs	r2, #1
 8007eda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f003 0301 	and.w	r3, r3, #1
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d007      	beq.n	8007efc <HAL_I2C_Slave_Transmit+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f042 0201 	orr.w	r2, r2, #1
 8007efa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007f0a:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2221      	movs	r2, #33	@ 0x21
 8007f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2220      	movs	r2, #32
 8007f18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	68ba      	ldr	r2, [r7, #8]
 8007f26:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	88fa      	ldrh	r2, [r7, #6]
 8007f2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	4a5f      	ldr	r2, [pc, #380]	@ (80080b8 <HAL_I2C_Slave_Transmit+0x224>)
 8007f3c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007f4c:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8007f4e:	69fb      	ldr	r3, [r7, #28]
 8007f50:	9300      	str	r3, [sp, #0]
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	2200      	movs	r2, #0
 8007f56:	4959      	ldr	r1, [pc, #356]	@ (80080bc <HAL_I2C_Slave_Transmit+0x228>)
 8007f58:	68f8      	ldr	r0, [r7, #12]
 8007f5a:	f005 fa17 	bl	800d38c <I2C_WaitOnFlagUntilTimeout>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d001      	beq.n	8007f68 <HAL_I2C_Slave_Transmit+0xd4>
    {
      return HAL_ERROR;
 8007f64:	2301      	movs	r3, #1
 8007f66:	e0a3      	b.n	80080b0 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f68:	2300      	movs	r3, #0
 8007f6a:	61bb      	str	r3, [r7, #24]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	695b      	ldr	r3, [r3, #20]
 8007f72:	61bb      	str	r3, [r7, #24]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	699b      	ldr	r3, [r3, #24]
 8007f7a:	61bb      	str	r3, [r7, #24]
 8007f7c:	69bb      	ldr	r3, [r7, #24]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	691b      	ldr	r3, [r3, #16]
 8007f82:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007f86:	d165      	bne.n	8008054 <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	9300      	str	r3, [sp, #0]
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	494a      	ldr	r1, [pc, #296]	@ (80080bc <HAL_I2C_Slave_Transmit+0x228>)
 8007f92:	68f8      	ldr	r0, [r7, #12]
 8007f94:	f005 f9fa 	bl	800d38c <I2C_WaitOnFlagUntilTimeout>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d001      	beq.n	8007fa2 <HAL_I2C_Slave_Transmit+0x10e>
      {
        return HAL_ERROR;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e086      	b.n	80080b0 <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	617b      	str	r3, [r7, #20]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	695b      	ldr	r3, [r3, #20]
 8007fac:	617b      	str	r3, [r7, #20]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	699b      	ldr	r3, [r3, #24]
 8007fb4:	617b      	str	r3, [r7, #20]
 8007fb6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007fb8:	e04c      	b.n	8008054 <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007fba:	69fa      	ldr	r2, [r7, #28]
 8007fbc:	6839      	ldr	r1, [r7, #0]
 8007fbe:	68f8      	ldr	r0, [r7, #12]
 8007fc0:	f005 fafe 	bl	800d5c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d009      	beq.n	8007fde <HAL_I2C_Slave_Transmit+0x14a>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007fd8:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e068      	b.n	80080b0 <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fe2:	781a      	ldrb	r2, [r3, #0]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fee:	1c5a      	adds	r2, r3, #1
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	3b01      	subs	r3, #1
 8007ffc:	b29a      	uxth	r2, r3
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008006:	3b01      	subs	r3, #1
 8008008:	b29a      	uxth	r2, r3
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	695b      	ldr	r3, [r3, #20]
 8008014:	f003 0304 	and.w	r3, r3, #4
 8008018:	2b04      	cmp	r3, #4
 800801a:	d11b      	bne.n	8008054 <HAL_I2C_Slave_Transmit+0x1c0>
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008020:	2b00      	cmp	r3, #0
 8008022:	d017      	beq.n	8008054 <HAL_I2C_Slave_Transmit+0x1c0>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008028:	781a      	ldrb	r2, [r3, #0]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008034:	1c5a      	adds	r2, r3, #1
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800803e:	b29b      	uxth	r3, r3
 8008040:	3b01      	subs	r3, #1
 8008042:	b29a      	uxth	r2, r3
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800804c:	3b01      	subs	r3, #1
 800804e:	b29a      	uxth	r2, r3
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	851a      	strh	r2, [r3, #40]	@ 0x28
    while (hi2c->XferSize > 0U)
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008058:	2b00      	cmp	r3, #0
 800805a:	d1ae      	bne.n	8007fba <HAL_I2C_Slave_Transmit+0x126>
      }
    }

    /* Wait until AF flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_AF, RESET, Timeout, tickstart) != HAL_OK)
 800805c:	69fb      	ldr	r3, [r7, #28]
 800805e:	9300      	str	r3, [sp, #0]
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	2200      	movs	r2, #0
 8008064:	f44f 3182 	mov.w	r1, #66560	@ 0x10400
 8008068:	68f8      	ldr	r0, [r7, #12]
 800806a:	f005 f98f 	bl	800d38c <I2C_WaitOnFlagUntilTimeout>
 800806e:	4603      	mov	r3, r0
 8008070:	2b00      	cmp	r3, #0
 8008072:	d001      	beq.n	8008078 <HAL_I2C_Slave_Transmit+0x1e4>
    {
      return HAL_ERROR;
 8008074:	2301      	movs	r3, #1
 8008076:	e01b      	b.n	80080b0 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008080:	615a      	str	r2, [r3, #20]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008090:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2220      	movs	r2, #32
 8008096:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2200      	movs	r2, #0
 800809e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2200      	movs	r2, #0
 80080a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80080aa:	2300      	movs	r3, #0
 80080ac:	e000      	b.n	80080b0 <HAL_I2C_Slave_Transmit+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80080ae:	2302      	movs	r3, #2
  }
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3720      	adds	r7, #32
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	ffff0000 	.word	0xffff0000
 80080bc:	00010002 	.word	0x00010002

080080c0 <HAL_I2C_Slave_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b08a      	sub	sp, #40	@ 0x28
 80080c4:	af02      	add	r7, sp, #8
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	60b9      	str	r1, [r7, #8]
 80080ca:	603b      	str	r3, [r7, #0]
 80080cc:	4613      	mov	r3, r2
 80080ce:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80080d0:	f7fd fc34 	bl	800593c <HAL_GetTick>
 80080d4:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	2b20      	cmp	r3, #32
 80080e0:	f040 80ee 	bne.w	80082c0 <HAL_I2C_Slave_Receive+0x200>
  {
    if ((pData == NULL) || (Size == (uint16_t)0))
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d002      	beq.n	80080f0 <HAL_I2C_Slave_Receive+0x30>
 80080ea:	88fb      	ldrh	r3, [r7, #6]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d101      	bne.n	80080f4 <HAL_I2C_Slave_Receive+0x34>
    {
      return HAL_ERROR;
 80080f0:	2301      	movs	r3, #1
 80080f2:	e0e6      	b.n	80082c2 <HAL_I2C_Slave_Receive+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d101      	bne.n	8008102 <HAL_I2C_Slave_Receive+0x42>
 80080fe:	2302      	movs	r3, #2
 8008100:	e0df      	b.n	80082c2 <HAL_I2C_Slave_Receive+0x202>
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2201      	movs	r2, #1
 8008106:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f003 0301 	and.w	r3, r3, #1
 8008114:	2b01      	cmp	r3, #1
 8008116:	d007      	beq.n	8008128 <HAL_I2C_Slave_Receive+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f042 0201 	orr.w	r2, r2, #1
 8008126:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008136:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2222      	movs	r2, #34	@ 0x22
 800813c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2220      	movs	r2, #32
 8008144:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2200      	movs	r2, #0
 800814c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	68ba      	ldr	r2, [r7, #8]
 8008152:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	88fa      	ldrh	r2, [r7, #6]
 8008158:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800815e:	b29a      	uxth	r2, r3
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	4a59      	ldr	r2, [pc, #356]	@ (80082cc <HAL_I2C_Slave_Receive+0x20c>)
 8008168:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008178:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800817a:	69fb      	ldr	r3, [r7, #28]
 800817c:	9300      	str	r3, [sp, #0]
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	2200      	movs	r2, #0
 8008182:	4953      	ldr	r1, [pc, #332]	@ (80082d0 <HAL_I2C_Slave_Receive+0x210>)
 8008184:	68f8      	ldr	r0, [r7, #12]
 8008186:	f005 f901 	bl	800d38c <I2C_WaitOnFlagUntilTimeout>
 800818a:	4603      	mov	r3, r0
 800818c:	2b00      	cmp	r3, #0
 800818e:	d001      	beq.n	8008194 <HAL_I2C_Slave_Receive+0xd4>
    {
      return HAL_ERROR;
 8008190:	2301      	movs	r3, #1
 8008192:	e096      	b.n	80082c2 <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008194:	2300      	movs	r3, #0
 8008196:	61bb      	str	r3, [r7, #24]
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	695b      	ldr	r3, [r3, #20]
 800819e:	61bb      	str	r3, [r7, #24]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	699b      	ldr	r3, [r3, #24]
 80081a6:	61bb      	str	r3, [r7, #24]
 80081a8:	69bb      	ldr	r3, [r7, #24]

    while (hi2c->XferSize > 0U)
 80081aa:	e04e      	b.n	800824a <HAL_I2C_Slave_Receive+0x18a>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80081ac:	69fa      	ldr	r2, [r7, #28]
 80081ae:	6839      	ldr	r1, [r7, #0]
 80081b0:	68f8      	ldr	r0, [r7, #12]
 80081b2:	f005 fb0b 	bl	800d7cc <I2C_WaitOnRXNEFlagUntilTimeout>
 80081b6:	4603      	mov	r3, r0
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d009      	beq.n	80081d0 <HAL_I2C_Slave_Receive+0x110>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80081ca:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 80081cc:	2301      	movs	r3, #1
 80081ce:	e078      	b.n	80082c2 <HAL_I2C_Slave_Receive+0x202>
      }

      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	691a      	ldr	r2, [r3, #16]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081da:	b2d2      	uxtb	r2, r2
 80081dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081e2:	1c5a      	adds	r2, r3, #1
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081ec:	3b01      	subs	r3, #1
 80081ee:	b29a      	uxth	r2, r3
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	3b01      	subs	r3, #1
 80081fc:	b29a      	uxth	r2, r3
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	695b      	ldr	r3, [r3, #20]
 8008208:	f003 0304 	and.w	r3, r3, #4
 800820c:	2b04      	cmp	r3, #4
 800820e:	d11c      	bne.n	800824a <HAL_I2C_Slave_Receive+0x18a>
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008214:	2b00      	cmp	r3, #0
 8008216:	d018      	beq.n	800824a <HAL_I2C_Slave_Receive+0x18a>
      {
        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	691a      	ldr	r2, [r3, #16]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008222:	b2d2      	uxtb	r2, r2
 8008224:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800822a:	1c5a      	adds	r2, r3, #1
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008234:	3b01      	subs	r3, #1
 8008236:	b29a      	uxth	r2, r3
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008240:	b29b      	uxth	r3, r3
 8008242:	3b01      	subs	r3, #1
 8008244:	b29a      	uxth	r2, r3
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800824e:	2b00      	cmp	r3, #0
 8008250:	d1ac      	bne.n	80081ac <HAL_I2C_Slave_Receive+0xec>
      }
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008252:	69fa      	ldr	r2, [r7, #28]
 8008254:	6839      	ldr	r1, [r7, #0]
 8008256:	68f8      	ldr	r0, [r7, #12]
 8008258:	f005 fa42 	bl	800d6e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800825c:	4603      	mov	r3, r0
 800825e:	2b00      	cmp	r3, #0
 8008260:	d009      	beq.n	8008276 <HAL_I2C_Slave_Receive+0x1b6>
    {
      /* Disable Address Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008270:	601a      	str	r2, [r3, #0]

      return HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	e025      	b.n	80082c2 <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8008276:	2300      	movs	r3, #0
 8008278:	617b      	str	r3, [r7, #20]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	695b      	ldr	r3, [r3, #20]
 8008280:	617b      	str	r3, [r7, #20]
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f042 0201 	orr.w	r2, r2, #1
 8008290:	601a      	str	r2, [r3, #0]
 8008292:	697b      	ldr	r3, [r7, #20]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80082a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2220      	movs	r2, #32
 80082a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2200      	movs	r2, #0
 80082b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80082bc:	2300      	movs	r3, #0
 80082be:	e000      	b.n	80082c2 <HAL_I2C_Slave_Receive+0x202>
  }
  else
  {
    return HAL_BUSY;
 80082c0:	2302      	movs	r3, #2
  }
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3720      	adds	r7, #32
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	bf00      	nop
 80082cc:	ffff0000 	.word	0xffff0000
 80082d0:	00010002 	.word	0x00010002

080082d4 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b087      	sub	sp, #28
 80082d8:	af00      	add	r7, sp, #0
 80082da:	60f8      	str	r0, [r7, #12]
 80082dc:	607a      	str	r2, [r7, #4]
 80082de:	461a      	mov	r2, r3
 80082e0:	460b      	mov	r3, r1
 80082e2:	817b      	strh	r3, [r7, #10]
 80082e4:	4613      	mov	r3, r2
 80082e6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80082e8:	2300      	movs	r3, #0
 80082ea:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	2b20      	cmp	r3, #32
 80082f6:	f040 8081 	bne.w	80083fc <HAL_I2C_Master_Transmit_IT+0x128>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80082fa:	4b44      	ldr	r3, [pc, #272]	@ (800840c <HAL_I2C_Master_Transmit_IT+0x138>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	08db      	lsrs	r3, r3, #3
 8008300:	4a43      	ldr	r2, [pc, #268]	@ (8008410 <HAL_I2C_Master_Transmit_IT+0x13c>)
 8008302:	fba2 2303 	umull	r2, r3, r2, r3
 8008306:	0a1a      	lsrs	r2, r3, #8
 8008308:	4613      	mov	r3, r2
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	4413      	add	r3, r2
 800830e:	009a      	lsls	r2, r3, #2
 8008310:	4413      	add	r3, r2
 8008312:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	3b01      	subs	r3, #1
 8008318:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d112      	bne.n	8008346 <HAL_I2C_Master_Transmit_IT+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2200      	movs	r2, #0
 8008324:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2220      	movs	r2, #32
 800832a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2200      	movs	r2, #0
 8008332:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800833a:	f043 0220 	orr.w	r2, r3, #32
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8008342:	2302      	movs	r3, #2
 8008344:	e05b      	b.n	80083fe <HAL_I2C_Master_Transmit_IT+0x12a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	699b      	ldr	r3, [r3, #24]
 800834c:	f003 0302 	and.w	r3, r3, #2
 8008350:	2b02      	cmp	r3, #2
 8008352:	d0df      	beq.n	8008314 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800835a:	2b01      	cmp	r3, #1
 800835c:	d101      	bne.n	8008362 <HAL_I2C_Master_Transmit_IT+0x8e>
 800835e:	2302      	movs	r3, #2
 8008360:	e04d      	b.n	80083fe <HAL_I2C_Master_Transmit_IT+0x12a>
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2201      	movs	r2, #1
 8008366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f003 0301 	and.w	r3, r3, #1
 8008374:	2b01      	cmp	r3, #1
 8008376:	d007      	beq.n	8008388 <HAL_I2C_Master_Transmit_IT+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f042 0201 	orr.w	r2, r2, #1
 8008386:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	681a      	ldr	r2, [r3, #0]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008396:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2221      	movs	r2, #33	@ 0x21
 800839c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2210      	movs	r2, #16
 80083a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2200      	movs	r2, #0
 80083ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	893a      	ldrh	r2, [r7, #8]
 80083b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083be:	b29a      	uxth	r2, r3
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	4a13      	ldr	r2, [pc, #76]	@ (8008414 <HAL_I2C_Master_Transmit_IT+0x140>)
 80083c8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80083ca:	897a      	ldrh	r2, [r7, #10]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2200      	movs	r2, #0
 80083d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	685a      	ldr	r2, [r3, #4]
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80083e6:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	681a      	ldr	r2, [r3, #0]
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80083f6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80083f8:	2300      	movs	r3, #0
 80083fa:	e000      	b.n	80083fe <HAL_I2C_Master_Transmit_IT+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80083fc:	2302      	movs	r3, #2
  }
}
 80083fe:	4618      	mov	r0, r3
 8008400:	371c      	adds	r7, #28
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr
 800840a:	bf00      	nop
 800840c:	20000030 	.word	0x20000030
 8008410:	14f8b589 	.word	0x14f8b589
 8008414:	ffff0000 	.word	0xffff0000

08008418 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8008418:	b480      	push	{r7}
 800841a:	b087      	sub	sp, #28
 800841c:	af00      	add	r7, sp, #0
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	607a      	str	r2, [r7, #4]
 8008422:	461a      	mov	r2, r3
 8008424:	460b      	mov	r3, r1
 8008426:	817b      	strh	r3, [r7, #10]
 8008428:	4613      	mov	r3, r2
 800842a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800842c:	2300      	movs	r3, #0
 800842e:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008436:	b2db      	uxtb	r3, r3
 8008438:	2b20      	cmp	r3, #32
 800843a:	f040 8089 	bne.w	8008550 <HAL_I2C_Master_Receive_IT+0x138>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800843e:	4b48      	ldr	r3, [pc, #288]	@ (8008560 <HAL_I2C_Master_Receive_IT+0x148>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	08db      	lsrs	r3, r3, #3
 8008444:	4a47      	ldr	r2, [pc, #284]	@ (8008564 <HAL_I2C_Master_Receive_IT+0x14c>)
 8008446:	fba2 2303 	umull	r2, r3, r2, r3
 800844a:	0a1a      	lsrs	r2, r3, #8
 800844c:	4613      	mov	r3, r2
 800844e:	009b      	lsls	r3, r3, #2
 8008450:	4413      	add	r3, r2
 8008452:	009a      	lsls	r2, r3, #2
 8008454:	4413      	add	r3, r2
 8008456:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	3b01      	subs	r3, #1
 800845c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d112      	bne.n	800848a <HAL_I2C_Master_Receive_IT+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2200      	movs	r2, #0
 8008468:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2220      	movs	r2, #32
 800846e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2200      	movs	r2, #0
 8008476:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800847e:	f043 0220 	orr.w	r2, r3, #32
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8008486:	2302      	movs	r3, #2
 8008488:	e063      	b.n	8008552 <HAL_I2C_Master_Receive_IT+0x13a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	699b      	ldr	r3, [r3, #24]
 8008490:	f003 0302 	and.w	r3, r3, #2
 8008494:	2b02      	cmp	r3, #2
 8008496:	d0df      	beq.n	8008458 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d101      	bne.n	80084a6 <HAL_I2C_Master_Receive_IT+0x8e>
 80084a2:	2302      	movs	r3, #2
 80084a4:	e055      	b.n	8008552 <HAL_I2C_Master_Receive_IT+0x13a>
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2201      	movs	r2, #1
 80084aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f003 0301 	and.w	r3, r3, #1
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d007      	beq.n	80084cc <HAL_I2C_Master_Receive_IT+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f042 0201 	orr.w	r2, r2, #1
 80084ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	681a      	ldr	r2, [r3, #0]
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80084da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2222      	movs	r2, #34	@ 0x22
 80084e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2210      	movs	r2, #16
 80084e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2200      	movs	r2, #0
 80084f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	893a      	ldrh	r2, [r7, #8]
 80084fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008502:	b29a      	uxth	r2, r3
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	4a17      	ldr	r2, [pc, #92]	@ (8008568 <HAL_I2C_Master_Receive_IT+0x150>)
 800850c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800850e:	897a      	ldrh	r2, [r7, #10]
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	645a      	str	r2, [r3, #68]	@ 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2200      	movs	r2, #0
 8008518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	685a      	ldr	r2, [r3, #4]
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 800852a:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800853a:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800854a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800854c:	2300      	movs	r3, #0
 800854e:	e000      	b.n	8008552 <HAL_I2C_Master_Receive_IT+0x13a>
  }
  else
  {
    return HAL_BUSY;
 8008550:	2302      	movs	r3, #2
  }
}
 8008552:	4618      	mov	r0, r3
 8008554:	371c      	adds	r7, #28
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr
 800855e:	bf00      	nop
 8008560:	20000030 	.word	0x20000030
 8008564:	14f8b589 	.word	0x14f8b589
 8008568:	ffff0000 	.word	0xffff0000

0800856c <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800856c:	b480      	push	{r7}
 800856e:	b085      	sub	sp, #20
 8008570:	af00      	add	r7, sp, #0
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	4613      	mov	r3, r2
 8008578:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008580:	b2db      	uxtb	r3, r3
 8008582:	2b20      	cmp	r3, #32
 8008584:	d158      	bne.n	8008638 <HAL_I2C_Slave_Transmit_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d002      	beq.n	8008592 <HAL_I2C_Slave_Transmit_IT+0x26>
 800858c:	88fb      	ldrh	r3, [r7, #6]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d101      	bne.n	8008596 <HAL_I2C_Slave_Transmit_IT+0x2a>
    {
      return  HAL_ERROR;
 8008592:	2301      	movs	r3, #1
 8008594:	e051      	b.n	800863a <HAL_I2C_Slave_Transmit_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800859c:	2b01      	cmp	r3, #1
 800859e:	d101      	bne.n	80085a4 <HAL_I2C_Slave_Transmit_IT+0x38>
 80085a0:	2302      	movs	r3, #2
 80085a2:	e04a      	b.n	800863a <HAL_I2C_Slave_Transmit_IT+0xce>
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2201      	movs	r2, #1
 80085a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f003 0301 	and.w	r3, r3, #1
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d007      	beq.n	80085ca <HAL_I2C_Slave_Transmit_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	681a      	ldr	r2, [r3, #0]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f042 0201 	orr.w	r2, r2, #1
 80085c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80085d8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2221      	movs	r2, #33	@ 0x21
 80085de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2220      	movs	r2, #32
 80085e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2200      	movs	r2, #0
 80085ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	68ba      	ldr	r2, [r7, #8]
 80085f4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	88fa      	ldrh	r2, [r7, #6]
 80085fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008600:	b29a      	uxth	r2, r3
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	4a0f      	ldr	r2, [pc, #60]	@ (8008648 <HAL_I2C_Slave_Transmit_IT+0xdc>)
 800860a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800861a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2200      	movs	r2, #0
 8008620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	685a      	ldr	r2, [r3, #4]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8008632:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8008634:	2300      	movs	r3, #0
 8008636:	e000      	b.n	800863a <HAL_I2C_Slave_Transmit_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 8008638:	2302      	movs	r3, #2
  }
}
 800863a:	4618      	mov	r0, r3
 800863c:	3714      	adds	r7, #20
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr
 8008646:	bf00      	nop
 8008648:	ffff0000 	.word	0xffff0000

0800864c <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800864c:	b480      	push	{r7}
 800864e:	b085      	sub	sp, #20
 8008650:	af00      	add	r7, sp, #0
 8008652:	60f8      	str	r0, [r7, #12]
 8008654:	60b9      	str	r1, [r7, #8]
 8008656:	4613      	mov	r3, r2
 8008658:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008660:	b2db      	uxtb	r3, r3
 8008662:	2b20      	cmp	r3, #32
 8008664:	d158      	bne.n	8008718 <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d002      	beq.n	8008672 <HAL_I2C_Slave_Receive_IT+0x26>
 800866c:	88fb      	ldrh	r3, [r7, #6]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d101      	bne.n	8008676 <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 8008672:	2301      	movs	r3, #1
 8008674:	e051      	b.n	800871a <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800867c:	2b01      	cmp	r3, #1
 800867e:	d101      	bne.n	8008684 <HAL_I2C_Slave_Receive_IT+0x38>
 8008680:	2302      	movs	r3, #2
 8008682:	e04a      	b.n	800871a <HAL_I2C_Slave_Receive_IT+0xce>
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f003 0301 	and.w	r3, r3, #1
 8008696:	2b01      	cmp	r3, #1
 8008698:	d007      	beq.n	80086aa <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f042 0201 	orr.w	r2, r2, #1
 80086a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	681a      	ldr	r2, [r3, #0]
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80086b8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2222      	movs	r2, #34	@ 0x22
 80086be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2220      	movs	r2, #32
 80086c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2200      	movs	r2, #0
 80086ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	68ba      	ldr	r2, [r7, #8]
 80086d4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	88fa      	ldrh	r2, [r7, #6]
 80086da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086e0:	b29a      	uxth	r2, r3
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	4a0f      	ldr	r2, [pc, #60]	@ (8008728 <HAL_I2C_Slave_Receive_IT+0xdc>)
 80086ea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	681a      	ldr	r2, [r3, #0]
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80086fa:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2200      	movs	r2, #0
 8008700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	685a      	ldr	r2, [r3, #4]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8008712:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8008714:	2300      	movs	r3, #0
 8008716:	e000      	b.n	800871a <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 8008718:	2302      	movs	r3, #2
  }
}
 800871a:	4618      	mov	r0, r3
 800871c:	3714      	adds	r7, #20
 800871e:	46bd      	mov	sp, r7
 8008720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008724:	4770      	bx	lr
 8008726:	bf00      	nop
 8008728:	ffff0000 	.word	0xffff0000

0800872c <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b086      	sub	sp, #24
 8008730:	af00      	add	r7, sp, #0
 8008732:	60f8      	str	r0, [r7, #12]
 8008734:	607a      	str	r2, [r7, #4]
 8008736:	461a      	mov	r2, r3
 8008738:	460b      	mov	r3, r1
 800873a:	817b      	strh	r3, [r7, #10]
 800873c:	4613      	mov	r3, r2
 800873e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8008740:	2300      	movs	r3, #0
 8008742:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800874a:	b2db      	uxtb	r3, r3
 800874c:	2b20      	cmp	r3, #32
 800874e:	f040 8109 	bne.w	8008964 <HAL_I2C_Master_Transmit_DMA+0x238>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8008752:	4b87      	ldr	r3, [pc, #540]	@ (8008970 <HAL_I2C_Master_Transmit_DMA+0x244>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	08db      	lsrs	r3, r3, #3
 8008758:	4a86      	ldr	r2, [pc, #536]	@ (8008974 <HAL_I2C_Master_Transmit_DMA+0x248>)
 800875a:	fba2 2303 	umull	r2, r3, r2, r3
 800875e:	0a1a      	lsrs	r2, r3, #8
 8008760:	4613      	mov	r3, r2
 8008762:	009b      	lsls	r3, r3, #2
 8008764:	4413      	add	r3, r2
 8008766:	009a      	lsls	r2, r3, #2
 8008768:	4413      	add	r3, r2
 800876a:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	3b01      	subs	r3, #1
 8008770:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d112      	bne.n	800879e <HAL_I2C_Master_Transmit_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2200      	movs	r2, #0
 800877c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2220      	movs	r2, #32
 8008782:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2200      	movs	r2, #0
 800878a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008792:	f043 0220 	orr.w	r2, r3, #32
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800879a:	2302      	movs	r3, #2
 800879c:	e0e3      	b.n	8008966 <HAL_I2C_Master_Transmit_DMA+0x23a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	699b      	ldr	r3, [r3, #24]
 80087a4:	f003 0302 	and.w	r3, r3, #2
 80087a8:	2b02      	cmp	r3, #2
 80087aa:	d0df      	beq.n	800876c <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087b2:	2b01      	cmp	r3, #1
 80087b4:	d101      	bne.n	80087ba <HAL_I2C_Master_Transmit_DMA+0x8e>
 80087b6:	2302      	movs	r3, #2
 80087b8:	e0d5      	b.n	8008966 <HAL_I2C_Master_Transmit_DMA+0x23a>
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2201      	movs	r2, #1
 80087be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f003 0301 	and.w	r3, r3, #1
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d007      	beq.n	80087e0 <HAL_I2C_Master_Transmit_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	681a      	ldr	r2, [r3, #0]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f042 0201 	orr.w	r2, r2, #1
 80087de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	681a      	ldr	r2, [r3, #0]
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80087ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2221      	movs	r2, #33	@ 0x21
 80087f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2210      	movs	r2, #16
 80087fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2200      	movs	r2, #0
 8008804:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	893a      	ldrh	r2, [r7, #8]
 8008810:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008816:	b29a      	uxth	r2, r3
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	4a56      	ldr	r2, [pc, #344]	@ (8008978 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 8008820:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8008822:	897a      	ldrh	r2, [r7, #10]
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800882c:	2b00      	cmp	r3, #0
 800882e:	d07b      	beq.n	8008928 <HAL_I2C_Master_Transmit_DMA+0x1fc>
    {
      if (hi2c->hdmatx != NULL)
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008834:	2b00      	cmp	r3, #0
 8008836:	d02a      	beq.n	800888e <HAL_I2C_Master_Transmit_DMA+0x162>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800883c:	4a4f      	ldr	r2, [pc, #316]	@ (800897c <HAL_I2C_Master_Transmit_DMA+0x250>)
 800883e:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008844:	4a4e      	ldr	r2, [pc, #312]	@ (8008980 <HAL_I2C_Master_Transmit_DMA+0x254>)
 8008846:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800884c:	2200      	movs	r2, #0
 800884e:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008854:	2200      	movs	r2, #0
 8008856:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800885c:	2200      	movs	r2, #0
 800885e:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008864:	2200      	movs	r2, #0
 8008866:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008870:	4619      	mov	r1, r3
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	3310      	adds	r3, #16
 8008878:	461a      	mov	r2, r3
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800887e:	f7fd fe34 	bl	80064ea <HAL_DMA_Start_IT>
 8008882:	4603      	mov	r3, r0
 8008884:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8008886:	7dfb      	ldrb	r3, [r7, #23]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d139      	bne.n	8008900 <HAL_I2C_Master_Transmit_DMA+0x1d4>
 800888c:	e013      	b.n	80088b6 <HAL_I2C_Master_Transmit_DMA+0x18a>
        hi2c->State     = HAL_I2C_STATE_READY;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2220      	movs	r2, #32
 8008892:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2200      	movs	r2, #0
 800889a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088a2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80088b2:	2301      	movs	r3, #1
 80088b4:	e057      	b.n	8008966 <HAL_I2C_Master_Transmit_DMA+0x23a>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	685a      	ldr	r2, [r3, #4]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80088cc:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	685a      	ldr	r2, [r3, #4]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80088dc:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80088ec:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	681a      	ldr	r2, [r3, #0]
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80088fc:	601a      	str	r2, [r3, #0]
 80088fe:	e02f      	b.n	8008960 <HAL_I2C_Master_Transmit_DMA+0x234>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2220      	movs	r2, #32
 8008904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2200      	movs	r2, #0
 800890c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008914:	f043 0210 	orr.w	r2, r3, #16
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2200      	movs	r2, #0
 8008920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008924:	2301      	movs	r3, #1
 8008926:	e01e      	b.n	8008966 <HAL_I2C_Master_Transmit_DMA+0x23a>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	681a      	ldr	r2, [r3, #0]
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008936:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	681a      	ldr	r2, [r3, #0]
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008946:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2200      	movs	r2, #0
 800894c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	685a      	ldr	r2, [r3, #4]
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 800895e:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8008960:	2300      	movs	r3, #0
 8008962:	e000      	b.n	8008966 <HAL_I2C_Master_Transmit_DMA+0x23a>
  }
  else
  {
    return HAL_BUSY;
 8008964:	2302      	movs	r3, #2
  }
}
 8008966:	4618      	mov	r0, r3
 8008968:	3718      	adds	r7, #24
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop
 8008970:	20000030 	.word	0x20000030
 8008974:	14f8b589 	.word	0x14f8b589
 8008978:	ffff0000 	.word	0xffff0000
 800897c:	0800d005 	.word	0x0800d005
 8008980:	0800d1c3 	.word	0x0800d1c3

08008984 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b086      	sub	sp, #24
 8008988:	af00      	add	r7, sp, #0
 800898a:	60f8      	str	r0, [r7, #12]
 800898c:	607a      	str	r2, [r7, #4]
 800898e:	461a      	mov	r2, r3
 8008990:	460b      	mov	r3, r1
 8008992:	817b      	strh	r3, [r7, #10]
 8008994:	4613      	mov	r3, r2
 8008996:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8008998:	2300      	movs	r3, #0
 800899a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	2b20      	cmp	r3, #32
 80089a6:	f040 8109 	bne.w	8008bbc <HAL_I2C_Master_Receive_DMA+0x238>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80089aa:	4b87      	ldr	r3, [pc, #540]	@ (8008bc8 <HAL_I2C_Master_Receive_DMA+0x244>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	08db      	lsrs	r3, r3, #3
 80089b0:	4a86      	ldr	r2, [pc, #536]	@ (8008bcc <HAL_I2C_Master_Receive_DMA+0x248>)
 80089b2:	fba2 2303 	umull	r2, r3, r2, r3
 80089b6:	0a1a      	lsrs	r2, r3, #8
 80089b8:	4613      	mov	r3, r2
 80089ba:	009b      	lsls	r3, r3, #2
 80089bc:	4413      	add	r3, r2
 80089be:	009a      	lsls	r2, r3, #2
 80089c0:	4413      	add	r3, r2
 80089c2:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	3b01      	subs	r3, #1
 80089c8:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d112      	bne.n	80089f6 <HAL_I2C_Master_Receive_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2200      	movs	r2, #0
 80089d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2220      	movs	r2, #32
 80089da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2200      	movs	r2, #0
 80089e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089ea:	f043 0220 	orr.w	r2, r3, #32
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80089f2:	2302      	movs	r3, #2
 80089f4:	e0e3      	b.n	8008bbe <HAL_I2C_Master_Receive_DMA+0x23a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	699b      	ldr	r3, [r3, #24]
 80089fc:	f003 0302 	and.w	r3, r3, #2
 8008a00:	2b02      	cmp	r3, #2
 8008a02:	d0df      	beq.n	80089c4 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a0a:	2b01      	cmp	r3, #1
 8008a0c:	d101      	bne.n	8008a12 <HAL_I2C_Master_Receive_DMA+0x8e>
 8008a0e:	2302      	movs	r3, #2
 8008a10:	e0d5      	b.n	8008bbe <HAL_I2C_Master_Receive_DMA+0x23a>
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2201      	movs	r2, #1
 8008a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f003 0301 	and.w	r3, r3, #1
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d007      	beq.n	8008a38 <HAL_I2C_Master_Receive_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f042 0201 	orr.w	r2, r2, #1
 8008a36:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008a46:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2222      	movs	r2, #34	@ 0x22
 8008a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2210      	movs	r2, #16
 8008a54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	893a      	ldrh	r2, [r7, #8]
 8008a68:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a6e:	b29a      	uxth	r2, r3
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	4a56      	ldr	r2, [pc, #344]	@ (8008bd0 <HAL_I2C_Master_Receive_DMA+0x24c>)
 8008a78:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8008a7a:	897a      	ldrh	r2, [r7, #10]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d07b      	beq.n	8008b80 <HAL_I2C_Master_Receive_DMA+0x1fc>
    {
      if (hi2c->hdmarx != NULL)
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d02a      	beq.n	8008ae6 <HAL_I2C_Master_Receive_DMA+0x162>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a94:	4a4f      	ldr	r2, [pc, #316]	@ (8008bd4 <HAL_I2C_Master_Receive_DMA+0x250>)
 8008a96:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a9c:	4a4e      	ldr	r2, [pc, #312]	@ (8008bd8 <HAL_I2C_Master_Receive_DMA+0x254>)
 8008a9e:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008aac:	2200      	movs	r2, #0
 8008aae:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008abc:	2200      	movs	r2, #0
 8008abe:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	3310      	adds	r3, #16
 8008aca:	4619      	mov	r1, r3
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ad6:	f7fd fd08 	bl	80064ea <HAL_DMA_Start_IT>
 8008ada:	4603      	mov	r3, r0
 8008adc:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8008ade:	7dfb      	ldrb	r3, [r7, #23]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d139      	bne.n	8008b58 <HAL_I2C_Master_Receive_DMA+0x1d4>
 8008ae4:	e013      	b.n	8008b0e <HAL_I2C_Master_Receive_DMA+0x18a>
        hi2c->State     = HAL_I2C_STATE_READY;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	2220      	movs	r2, #32
 8008aea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2200      	movs	r2, #0
 8008af2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008afa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2200      	movs	r2, #0
 8008b06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	e057      	b.n	8008bbe <HAL_I2C_Master_Receive_DMA+0x23a>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008b1c:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	681a      	ldr	r2, [r3, #0]
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008b2c:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2200      	movs	r2, #0
 8008b32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	685a      	ldr	r2, [r3, #4]
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8008b44:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	685a      	ldr	r2, [r3, #4]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008b54:	605a      	str	r2, [r3, #4]
 8008b56:	e02f      	b.n	8008bb8 <HAL_I2C_Master_Receive_DMA+0x234>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2220      	movs	r2, #32
 8008b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2200      	movs	r2, #0
 8008b64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b6c:	f043 0210 	orr.w	r2, r3, #16
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2200      	movs	r2, #0
 8008b78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	e01e      	b.n	8008bbe <HAL_I2C_Master_Receive_DMA+0x23a>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2200      	movs	r2, #0
 8008b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	685a      	ldr	r2, [r3, #4]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8008b96:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	681a      	ldr	r2, [r3, #0]
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008ba6:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008bb6:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	e000      	b.n	8008bbe <HAL_I2C_Master_Receive_DMA+0x23a>
  }
  else
  {
    return HAL_BUSY;
 8008bbc:	2302      	movs	r3, #2
  }
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3718      	adds	r7, #24
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
 8008bc6:	bf00      	nop
 8008bc8:	20000030 	.word	0x20000030
 8008bcc:	14f8b589 	.word	0x14f8b589
 8008bd0:	ffff0000 	.word	0xffff0000
 8008bd4:	0800d005 	.word	0x0800d005
 8008bd8:	0800d1c3 	.word	0x0800d1c3

08008bdc <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b086      	sub	sp, #24
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	60f8      	str	r0, [r7, #12]
 8008be4:	60b9      	str	r1, [r7, #8]
 8008be6:	4613      	mov	r3, r2
 8008be8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008bf0:	b2db      	uxtb	r3, r3
 8008bf2:	2b20      	cmp	r3, #32
 8008bf4:	f040 80b8 	bne.w	8008d68 <HAL_I2C_Slave_Transmit_DMA+0x18c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d002      	beq.n	8008c04 <HAL_I2C_Slave_Transmit_DMA+0x28>
 8008bfe:	88fb      	ldrh	r3, [r7, #6]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d101      	bne.n	8008c08 <HAL_I2C_Slave_Transmit_DMA+0x2c>
    {
      return  HAL_ERROR;
 8008c04:	2301      	movs	r3, #1
 8008c06:	e0b0      	b.n	8008d6a <HAL_I2C_Slave_Transmit_DMA+0x18e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	d101      	bne.n	8008c16 <HAL_I2C_Slave_Transmit_DMA+0x3a>
 8008c12:	2302      	movs	r3, #2
 8008c14:	e0a9      	b.n	8008d6a <HAL_I2C_Slave_Transmit_DMA+0x18e>
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2201      	movs	r2, #1
 8008c1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f003 0301 	and.w	r3, r3, #1
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d007      	beq.n	8008c3c <HAL_I2C_Slave_Transmit_DMA+0x60>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f042 0201 	orr.w	r2, r2, #1
 8008c3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008c4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2221      	movs	r2, #33	@ 0x21
 8008c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2220      	movs	r2, #32
 8008c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	68ba      	ldr	r2, [r7, #8]
 8008c66:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	88fa      	ldrh	r2, [r7, #6]
 8008c6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c72:	b29a      	uxth	r2, r3
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	4a3e      	ldr	r2, [pc, #248]	@ (8008d74 <HAL_I2C_Slave_Transmit_DMA+0x198>)
 8008c7c:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hi2c->hdmatx != NULL)
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d02a      	beq.n	8008cdc <HAL_I2C_Slave_Transmit_DMA+0x100>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c8a:	4a3b      	ldr	r2, [pc, #236]	@ (8008d78 <HAL_I2C_Slave_Transmit_DMA+0x19c>)
 8008c8c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c92:	4a3a      	ldr	r2, [pc, #232]	@ (8008d7c <HAL_I2C_Slave_Transmit_DMA+0x1a0>)
 8008c94:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	641a      	str	r2, [r3, #64]	@ 0x40
      hi2c->hdmatx->XferM1CpltCallback = NULL;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008caa:	2200      	movs	r2, #0
 8008cac:	649a      	str	r2, [r3, #72]	@ 0x48
      hi2c->hdmatx->XferAbortCallback = NULL;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	3310      	adds	r3, #16
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ccc:	f7fd fc0d 	bl	80064ea <HAL_DMA_Start_IT>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8008cd4:	7dfb      	ldrb	r3, [r7, #23]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d132      	bne.n	8008d40 <HAL_I2C_Slave_Transmit_DMA+0x164>
 8008cda:	e013      	b.n	8008d04 <HAL_I2C_Slave_Transmit_DMA+0x128>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2228      	movs	r2, #40	@ 0x28
 8008ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cf0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	641a      	str	r2, [r3, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      return HAL_ERROR;
 8008d00:	2301      	movs	r3, #1
 8008d02:	e032      	b.n	8008d6a <HAL_I2C_Slave_Transmit_DMA+0x18e>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008d12:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2200      	movs	r2, #0
 8008d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	685a      	ldr	r2, [r3, #4]
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8008d2a:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	685a      	ldr	r2, [r3, #4]
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008d3a:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	e014      	b.n	8008d6a <HAL_I2C_Slave_Transmit_DMA+0x18e>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2220      	movs	r2, #32
 8008d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d54:	f043 0210 	orr.w	r2, r3, #16
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008d64:	2301      	movs	r3, #1
 8008d66:	e000      	b.n	8008d6a <HAL_I2C_Slave_Transmit_DMA+0x18e>
    }
  }
  else
  {
    return HAL_BUSY;
 8008d68:	2302      	movs	r3, #2
  }
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3718      	adds	r7, #24
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
 8008d72:	bf00      	nop
 8008d74:	ffff0000 	.word	0xffff0000
 8008d78:	0800d005 	.word	0x0800d005
 8008d7c:	0800d1c3 	.word	0x0800d1c3

08008d80 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b086      	sub	sp, #24
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	60f8      	str	r0, [r7, #12]
 8008d88:	60b9      	str	r1, [r7, #8]
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	2b20      	cmp	r3, #32
 8008d98:	f040 80b8 	bne.w	8008f0c <HAL_I2C_Slave_Receive_DMA+0x18c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d002      	beq.n	8008da8 <HAL_I2C_Slave_Receive_DMA+0x28>
 8008da2:	88fb      	ldrh	r3, [r7, #6]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d101      	bne.n	8008dac <HAL_I2C_Slave_Receive_DMA+0x2c>
    {
      return  HAL_ERROR;
 8008da8:	2301      	movs	r3, #1
 8008daa:	e0b0      	b.n	8008f0e <HAL_I2C_Slave_Receive_DMA+0x18e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d101      	bne.n	8008dba <HAL_I2C_Slave_Receive_DMA+0x3a>
 8008db6:	2302      	movs	r3, #2
 8008db8:	e0a9      	b.n	8008f0e <HAL_I2C_Slave_Receive_DMA+0x18e>
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f003 0301 	and.w	r3, r3, #1
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d007      	beq.n	8008de0 <HAL_I2C_Slave_Receive_DMA+0x60>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	681a      	ldr	r2, [r3, #0]
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f042 0201 	orr.w	r2, r2, #1
 8008dde:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	681a      	ldr	r2, [r3, #0]
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008dee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2222      	movs	r2, #34	@ 0x22
 8008df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2220      	movs	r2, #32
 8008dfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2200      	movs	r2, #0
 8008e04:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	68ba      	ldr	r2, [r7, #8]
 8008e0a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	88fa      	ldrh	r2, [r7, #6]
 8008e10:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e16:	b29a      	uxth	r2, r3
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	4a3e      	ldr	r2, [pc, #248]	@ (8008f18 <HAL_I2C_Slave_Receive_DMA+0x198>)
 8008e20:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hi2c->hdmarx != NULL)
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d02a      	beq.n	8008e80 <HAL_I2C_Slave_Receive_DMA+0x100>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e2e:	4a3b      	ldr	r2, [pc, #236]	@ (8008f1c <HAL_I2C_Slave_Receive_DMA+0x19c>)
 8008e30:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e36:	4a3a      	ldr	r2, [pc, #232]	@ (8008f20 <HAL_I2C_Slave_Receive_DMA+0x1a0>)
 8008e38:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e3e:	2200      	movs	r2, #0
 8008e40:	641a      	str	r2, [r3, #64]	@ 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e46:	2200      	movs	r2, #0
 8008e48:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e4e:	2200      	movs	r2, #0
 8008e50:	649a      	str	r2, [r3, #72]	@ 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e56:	2200      	movs	r2, #0
 8008e58:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	3310      	adds	r3, #16
 8008e64:	4619      	mov	r1, r3
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e70:	f7fd fb3b 	bl	80064ea <HAL_DMA_Start_IT>
 8008e74:	4603      	mov	r3, r0
 8008e76:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8008e78:	7dfb      	ldrb	r3, [r7, #23]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d132      	bne.n	8008ee4 <HAL_I2C_Slave_Receive_DMA+0x164>
 8008e7e:	e013      	b.n	8008ea8 <HAL_I2C_Slave_Receive_DMA+0x128>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2228      	movs	r2, #40	@ 0x28
 8008e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e94:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	641a      	str	r2, [r3, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      return HAL_ERROR;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	e032      	b.n	8008f0e <HAL_I2C_Slave_Receive_DMA+0x18e>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008eb6:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	685a      	ldr	r2, [r3, #4]
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8008ece:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	685a      	ldr	r2, [r3, #4]
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008ede:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	e014      	b.n	8008f0e <HAL_I2C_Slave_Receive_DMA+0x18e>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2220      	movs	r2, #32
 8008ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ef8:	f043 0210 	orr.w	r2, r3, #16
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2200      	movs	r2, #0
 8008f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	e000      	b.n	8008f0e <HAL_I2C_Slave_Receive_DMA+0x18e>
    }
  }
  else
  {
    return HAL_BUSY;
 8008f0c:	2302      	movs	r3, #2
  }
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3718      	adds	r7, #24
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}
 8008f16:	bf00      	nop
 8008f18:	ffff0000 	.word	0xffff0000
 8008f1c:	0800d005 	.word	0x0800d005
 8008f20:	0800d1c3 	.word	0x0800d1c3

08008f24 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b088      	sub	sp, #32
 8008f28:	af02      	add	r7, sp, #8
 8008f2a:	60f8      	str	r0, [r7, #12]
 8008f2c:	4608      	mov	r0, r1
 8008f2e:	4611      	mov	r1, r2
 8008f30:	461a      	mov	r2, r3
 8008f32:	4603      	mov	r3, r0
 8008f34:	817b      	strh	r3, [r7, #10]
 8008f36:	460b      	mov	r3, r1
 8008f38:	813b      	strh	r3, [r7, #8]
 8008f3a:	4613      	mov	r3, r2
 8008f3c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008f3e:	f7fc fcfd 	bl	800593c <HAL_GetTick>
 8008f42:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	2b20      	cmp	r3, #32
 8008f4e:	f040 80d9 	bne.w	8009104 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	9300      	str	r3, [sp, #0]
 8008f56:	2319      	movs	r3, #25
 8008f58:	2201      	movs	r2, #1
 8008f5a:	496d      	ldr	r1, [pc, #436]	@ (8009110 <HAL_I2C_Mem_Write+0x1ec>)
 8008f5c:	68f8      	ldr	r0, [r7, #12]
 8008f5e:	f004 fa15 	bl	800d38c <I2C_WaitOnFlagUntilTimeout>
 8008f62:	4603      	mov	r3, r0
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d001      	beq.n	8008f6c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008f68:	2302      	movs	r3, #2
 8008f6a:	e0cc      	b.n	8009106 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d101      	bne.n	8008f7a <HAL_I2C_Mem_Write+0x56>
 8008f76:	2302      	movs	r3, #2
 8008f78:	e0c5      	b.n	8009106 <HAL_I2C_Mem_Write+0x1e2>
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f003 0301 	and.w	r3, r3, #1
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d007      	beq.n	8008fa0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	681a      	ldr	r2, [r3, #0]
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f042 0201 	orr.w	r2, r2, #1
 8008f9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008fae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2221      	movs	r2, #33	@ 0x21
 8008fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2240      	movs	r2, #64	@ 0x40
 8008fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	6a3a      	ldr	r2, [r7, #32]
 8008fca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008fd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008fd6:	b29a      	uxth	r2, r3
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	4a4d      	ldr	r2, [pc, #308]	@ (8009114 <HAL_I2C_Mem_Write+0x1f0>)
 8008fe0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008fe2:	88f8      	ldrh	r0, [r7, #6]
 8008fe4:	893a      	ldrh	r2, [r7, #8]
 8008fe6:	8979      	ldrh	r1, [r7, #10]
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	9301      	str	r3, [sp, #4]
 8008fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fee:	9300      	str	r3, [sp, #0]
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	68f8      	ldr	r0, [r7, #12]
 8008ff4:	f003 fe88 	bl	800cd08 <I2C_RequestMemoryWrite>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d052      	beq.n	80090a4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008ffe:	2301      	movs	r3, #1
 8009000:	e081      	b.n	8009106 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009002:	697a      	ldr	r2, [r7, #20]
 8009004:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009006:	68f8      	ldr	r0, [r7, #12]
 8009008:	f004 fada 	bl	800d5c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800900c:	4603      	mov	r3, r0
 800900e:	2b00      	cmp	r3, #0
 8009010:	d00d      	beq.n	800902e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009016:	2b04      	cmp	r3, #4
 8009018:	d107      	bne.n	800902a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	681a      	ldr	r2, [r3, #0]
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009028:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800902a:	2301      	movs	r3, #1
 800902c:	e06b      	b.n	8009106 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009032:	781a      	ldrb	r2, [r3, #0]
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800903e:	1c5a      	adds	r2, r3, #1
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009048:	3b01      	subs	r3, #1
 800904a:	b29a      	uxth	r2, r3
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009054:	b29b      	uxth	r3, r3
 8009056:	3b01      	subs	r3, #1
 8009058:	b29a      	uxth	r2, r3
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	695b      	ldr	r3, [r3, #20]
 8009064:	f003 0304 	and.w	r3, r3, #4
 8009068:	2b04      	cmp	r3, #4
 800906a:	d11b      	bne.n	80090a4 <HAL_I2C_Mem_Write+0x180>
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009070:	2b00      	cmp	r3, #0
 8009072:	d017      	beq.n	80090a4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009078:	781a      	ldrb	r2, [r3, #0]
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009084:	1c5a      	adds	r2, r3, #1
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800908e:	3b01      	subs	r3, #1
 8009090:	b29a      	uxth	r2, r3
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800909a:	b29b      	uxth	r3, r3
 800909c:	3b01      	subs	r3, #1
 800909e:	b29a      	uxth	r2, r3
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d1aa      	bne.n	8009002 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80090ac:	697a      	ldr	r2, [r7, #20]
 80090ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80090b0:	68f8      	ldr	r0, [r7, #12]
 80090b2:	f004 facd 	bl	800d650 <I2C_WaitOnBTFFlagUntilTimeout>
 80090b6:	4603      	mov	r3, r0
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d00d      	beq.n	80090d8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090c0:	2b04      	cmp	r3, #4
 80090c2:	d107      	bne.n	80090d4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80090d2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80090d4:	2301      	movs	r3, #1
 80090d6:	e016      	b.n	8009106 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	681a      	ldr	r2, [r3, #0]
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80090e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2220      	movs	r2, #32
 80090ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2200      	movs	r2, #0
 80090f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2200      	movs	r2, #0
 80090fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009100:	2300      	movs	r3, #0
 8009102:	e000      	b.n	8009106 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009104:	2302      	movs	r3, #2
  }
}
 8009106:	4618      	mov	r0, r3
 8009108:	3718      	adds	r7, #24
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	00100002 	.word	0x00100002
 8009114:	ffff0000 	.word	0xffff0000

08009118 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b08c      	sub	sp, #48	@ 0x30
 800911c:	af02      	add	r7, sp, #8
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	4608      	mov	r0, r1
 8009122:	4611      	mov	r1, r2
 8009124:	461a      	mov	r2, r3
 8009126:	4603      	mov	r3, r0
 8009128:	817b      	strh	r3, [r7, #10]
 800912a:	460b      	mov	r3, r1
 800912c:	813b      	strh	r3, [r7, #8]
 800912e:	4613      	mov	r3, r2
 8009130:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009132:	f7fc fc03 	bl	800593c <HAL_GetTick>
 8009136:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800913e:	b2db      	uxtb	r3, r3
 8009140:	2b20      	cmp	r3, #32
 8009142:	f040 8214 	bne.w	800956e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009148:	9300      	str	r3, [sp, #0]
 800914a:	2319      	movs	r3, #25
 800914c:	2201      	movs	r2, #1
 800914e:	497b      	ldr	r1, [pc, #492]	@ (800933c <HAL_I2C_Mem_Read+0x224>)
 8009150:	68f8      	ldr	r0, [r7, #12]
 8009152:	f004 f91b 	bl	800d38c <I2C_WaitOnFlagUntilTimeout>
 8009156:	4603      	mov	r3, r0
 8009158:	2b00      	cmp	r3, #0
 800915a:	d001      	beq.n	8009160 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800915c:	2302      	movs	r3, #2
 800915e:	e207      	b.n	8009570 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009166:	2b01      	cmp	r3, #1
 8009168:	d101      	bne.n	800916e <HAL_I2C_Mem_Read+0x56>
 800916a:	2302      	movs	r3, #2
 800916c:	e200      	b.n	8009570 <HAL_I2C_Mem_Read+0x458>
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2201      	movs	r2, #1
 8009172:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f003 0301 	and.w	r3, r3, #1
 8009180:	2b01      	cmp	r3, #1
 8009182:	d007      	beq.n	8009194 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	681a      	ldr	r2, [r3, #0]
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f042 0201 	orr.w	r2, r2, #1
 8009192:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	681a      	ldr	r2, [r3, #0]
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80091a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2222      	movs	r2, #34	@ 0x22
 80091a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	2240      	movs	r2, #64	@ 0x40
 80091b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2200      	movs	r2, #0
 80091b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80091c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091ca:	b29a      	uxth	r2, r3
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	4a5b      	ldr	r2, [pc, #364]	@ (8009340 <HAL_I2C_Mem_Read+0x228>)
 80091d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80091d6:	88f8      	ldrh	r0, [r7, #6]
 80091d8:	893a      	ldrh	r2, [r7, #8]
 80091da:	8979      	ldrh	r1, [r7, #10]
 80091dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091de:	9301      	str	r3, [sp, #4]
 80091e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091e2:	9300      	str	r3, [sp, #0]
 80091e4:	4603      	mov	r3, r0
 80091e6:	68f8      	ldr	r0, [r7, #12]
 80091e8:	f003 fe24 	bl	800ce34 <I2C_RequestMemoryRead>
 80091ec:	4603      	mov	r3, r0
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d001      	beq.n	80091f6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80091f2:	2301      	movs	r3, #1
 80091f4:	e1bc      	b.n	8009570 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d113      	bne.n	8009226 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80091fe:	2300      	movs	r3, #0
 8009200:	623b      	str	r3, [r7, #32]
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	695b      	ldr	r3, [r3, #20]
 8009208:	623b      	str	r3, [r7, #32]
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	699b      	ldr	r3, [r3, #24]
 8009210:	623b      	str	r3, [r7, #32]
 8009212:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	681a      	ldr	r2, [r3, #0]
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009222:	601a      	str	r2, [r3, #0]
 8009224:	e190      	b.n	8009548 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800922a:	2b01      	cmp	r3, #1
 800922c:	d11b      	bne.n	8009266 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	681a      	ldr	r2, [r3, #0]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800923c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800923e:	2300      	movs	r3, #0
 8009240:	61fb      	str	r3, [r7, #28]
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	695b      	ldr	r3, [r3, #20]
 8009248:	61fb      	str	r3, [r7, #28]
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	699b      	ldr	r3, [r3, #24]
 8009250:	61fb      	str	r3, [r7, #28]
 8009252:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	681a      	ldr	r2, [r3, #0]
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009262:	601a      	str	r2, [r3, #0]
 8009264:	e170      	b.n	8009548 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800926a:	2b02      	cmp	r3, #2
 800926c:	d11b      	bne.n	80092a6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	681a      	ldr	r2, [r3, #0]
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800927c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800928c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800928e:	2300      	movs	r3, #0
 8009290:	61bb      	str	r3, [r7, #24]
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	695b      	ldr	r3, [r3, #20]
 8009298:	61bb      	str	r3, [r7, #24]
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	699b      	ldr	r3, [r3, #24]
 80092a0:	61bb      	str	r3, [r7, #24]
 80092a2:	69bb      	ldr	r3, [r7, #24]
 80092a4:	e150      	b.n	8009548 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80092a6:	2300      	movs	r3, #0
 80092a8:	617b      	str	r3, [r7, #20]
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	695b      	ldr	r3, [r3, #20]
 80092b0:	617b      	str	r3, [r7, #20]
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	699b      	ldr	r3, [r3, #24]
 80092b8:	617b      	str	r3, [r7, #20]
 80092ba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80092bc:	e144      	b.n	8009548 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80092c2:	2b03      	cmp	r3, #3
 80092c4:	f200 80f1 	bhi.w	80094aa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80092cc:	2b01      	cmp	r3, #1
 80092ce:	d123      	bne.n	8009318 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80092d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092d2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80092d4:	68f8      	ldr	r0, [r7, #12]
 80092d6:	f004 fa79 	bl	800d7cc <I2C_WaitOnRXNEFlagUntilTimeout>
 80092da:	4603      	mov	r3, r0
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d001      	beq.n	80092e4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80092e0:	2301      	movs	r3, #1
 80092e2:	e145      	b.n	8009570 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	691a      	ldr	r2, [r3, #16]
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092ee:	b2d2      	uxtb	r2, r2
 80092f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092f6:	1c5a      	adds	r2, r3, #1
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009300:	3b01      	subs	r3, #1
 8009302:	b29a      	uxth	r2, r3
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800930c:	b29b      	uxth	r3, r3
 800930e:	3b01      	subs	r3, #1
 8009310:	b29a      	uxth	r2, r3
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009316:	e117      	b.n	8009548 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800931c:	2b02      	cmp	r3, #2
 800931e:	d14e      	bne.n	80093be <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009322:	9300      	str	r3, [sp, #0]
 8009324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009326:	2200      	movs	r2, #0
 8009328:	4906      	ldr	r1, [pc, #24]	@ (8009344 <HAL_I2C_Mem_Read+0x22c>)
 800932a:	68f8      	ldr	r0, [r7, #12]
 800932c:	f004 f82e 	bl	800d38c <I2C_WaitOnFlagUntilTimeout>
 8009330:	4603      	mov	r3, r0
 8009332:	2b00      	cmp	r3, #0
 8009334:	d008      	beq.n	8009348 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8009336:	2301      	movs	r3, #1
 8009338:	e11a      	b.n	8009570 <HAL_I2C_Mem_Read+0x458>
 800933a:	bf00      	nop
 800933c:	00100002 	.word	0x00100002
 8009340:	ffff0000 	.word	0xffff0000
 8009344:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	681a      	ldr	r2, [r3, #0]
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009356:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	691a      	ldr	r2, [r3, #16]
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009362:	b2d2      	uxtb	r2, r2
 8009364:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800936a:	1c5a      	adds	r2, r3, #1
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009374:	3b01      	subs	r3, #1
 8009376:	b29a      	uxth	r2, r3
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009380:	b29b      	uxth	r3, r3
 8009382:	3b01      	subs	r3, #1
 8009384:	b29a      	uxth	r2, r3
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	691a      	ldr	r2, [r3, #16]
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009394:	b2d2      	uxtb	r2, r2
 8009396:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800939c:	1c5a      	adds	r2, r3, #1
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80093a6:	3b01      	subs	r3, #1
 80093a8:	b29a      	uxth	r2, r3
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093b2:	b29b      	uxth	r3, r3
 80093b4:	3b01      	subs	r3, #1
 80093b6:	b29a      	uxth	r2, r3
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80093bc:	e0c4      	b.n	8009548 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80093be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093c0:	9300      	str	r3, [sp, #0]
 80093c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093c4:	2200      	movs	r2, #0
 80093c6:	496c      	ldr	r1, [pc, #432]	@ (8009578 <HAL_I2C_Mem_Read+0x460>)
 80093c8:	68f8      	ldr	r0, [r7, #12]
 80093ca:	f003 ffdf 	bl	800d38c <I2C_WaitOnFlagUntilTimeout>
 80093ce:	4603      	mov	r3, r0
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d001      	beq.n	80093d8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80093d4:	2301      	movs	r3, #1
 80093d6:	e0cb      	b.n	8009570 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	681a      	ldr	r2, [r3, #0]
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80093e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	691a      	ldr	r2, [r3, #16]
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093f2:	b2d2      	uxtb	r2, r2
 80093f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093fa:	1c5a      	adds	r2, r3, #1
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009404:	3b01      	subs	r3, #1
 8009406:	b29a      	uxth	r2, r3
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009410:	b29b      	uxth	r3, r3
 8009412:	3b01      	subs	r3, #1
 8009414:	b29a      	uxth	r2, r3
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800941a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800941c:	9300      	str	r3, [sp, #0]
 800941e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009420:	2200      	movs	r2, #0
 8009422:	4955      	ldr	r1, [pc, #340]	@ (8009578 <HAL_I2C_Mem_Read+0x460>)
 8009424:	68f8      	ldr	r0, [r7, #12]
 8009426:	f003 ffb1 	bl	800d38c <I2C_WaitOnFlagUntilTimeout>
 800942a:	4603      	mov	r3, r0
 800942c:	2b00      	cmp	r3, #0
 800942e:	d001      	beq.n	8009434 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009430:	2301      	movs	r3, #1
 8009432:	e09d      	b.n	8009570 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	681a      	ldr	r2, [r3, #0]
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009442:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	691a      	ldr	r2, [r3, #16]
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800944e:	b2d2      	uxtb	r2, r2
 8009450:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009456:	1c5a      	adds	r2, r3, #1
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009460:	3b01      	subs	r3, #1
 8009462:	b29a      	uxth	r2, r3
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800946c:	b29b      	uxth	r3, r3
 800946e:	3b01      	subs	r3, #1
 8009470:	b29a      	uxth	r2, r3
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	691a      	ldr	r2, [r3, #16]
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009480:	b2d2      	uxtb	r2, r2
 8009482:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009488:	1c5a      	adds	r2, r3, #1
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009492:	3b01      	subs	r3, #1
 8009494:	b29a      	uxth	r2, r3
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800949e:	b29b      	uxth	r3, r3
 80094a0:	3b01      	subs	r3, #1
 80094a2:	b29a      	uxth	r2, r3
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80094a8:	e04e      	b.n	8009548 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80094aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094ac:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80094ae:	68f8      	ldr	r0, [r7, #12]
 80094b0:	f004 f98c 	bl	800d7cc <I2C_WaitOnRXNEFlagUntilTimeout>
 80094b4:	4603      	mov	r3, r0
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d001      	beq.n	80094be <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80094ba:	2301      	movs	r3, #1
 80094bc:	e058      	b.n	8009570 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	691a      	ldr	r2, [r3, #16]
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094c8:	b2d2      	uxtb	r2, r2
 80094ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094d0:	1c5a      	adds	r2, r3, #1
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094da:	3b01      	subs	r3, #1
 80094dc:	b29a      	uxth	r2, r3
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	3b01      	subs	r3, #1
 80094ea:	b29a      	uxth	r2, r3
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	695b      	ldr	r3, [r3, #20]
 80094f6:	f003 0304 	and.w	r3, r3, #4
 80094fa:	2b04      	cmp	r3, #4
 80094fc:	d124      	bne.n	8009548 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009502:	2b03      	cmp	r3, #3
 8009504:	d107      	bne.n	8009516 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009514:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	691a      	ldr	r2, [r3, #16]
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009520:	b2d2      	uxtb	r2, r2
 8009522:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009528:	1c5a      	adds	r2, r3, #1
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009532:	3b01      	subs	r3, #1
 8009534:	b29a      	uxth	r2, r3
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800953e:	b29b      	uxth	r3, r3
 8009540:	3b01      	subs	r3, #1
 8009542:	b29a      	uxth	r2, r3
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800954c:	2b00      	cmp	r3, #0
 800954e:	f47f aeb6 	bne.w	80092be <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2220      	movs	r2, #32
 8009556:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2200      	movs	r2, #0
 800955e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2200      	movs	r2, #0
 8009566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800956a:	2300      	movs	r3, #0
 800956c:	e000      	b.n	8009570 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800956e:	2302      	movs	r3, #2
  }
}
 8009570:	4618      	mov	r0, r3
 8009572:	3728      	adds	r7, #40	@ 0x28
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}
 8009578:	00010004 	.word	0x00010004

0800957c <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800957c:	b480      	push	{r7}
 800957e:	b087      	sub	sp, #28
 8009580:	af00      	add	r7, sp, #0
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	4608      	mov	r0, r1
 8009586:	4611      	mov	r1, r2
 8009588:	461a      	mov	r2, r3
 800958a:	4603      	mov	r3, r0
 800958c:	817b      	strh	r3, [r7, #10]
 800958e:	460b      	mov	r3, r1
 8009590:	813b      	strh	r3, [r7, #8]
 8009592:	4613      	mov	r3, r2
 8009594:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8009596:	2300      	movs	r3, #0
 8009598:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	2b20      	cmp	r3, #32
 80095a4:	f040 808a 	bne.w	80096bc <HAL_I2C_Mem_Write_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80095a8:	4b48      	ldr	r3, [pc, #288]	@ (80096cc <HAL_I2C_Mem_Write_IT+0x150>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	08db      	lsrs	r3, r3, #3
 80095ae:	4a48      	ldr	r2, [pc, #288]	@ (80096d0 <HAL_I2C_Mem_Write_IT+0x154>)
 80095b0:	fba2 2303 	umull	r2, r3, r2, r3
 80095b4:	0a1a      	lsrs	r2, r3, #8
 80095b6:	4613      	mov	r3, r2
 80095b8:	009b      	lsls	r3, r3, #2
 80095ba:	4413      	add	r3, r2
 80095bc:	009a      	lsls	r2, r3, #2
 80095be:	4413      	add	r3, r2
 80095c0:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	3b01      	subs	r3, #1
 80095c6:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d112      	bne.n	80095f4 <HAL_I2C_Mem_Write_IT+0x78>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2200      	movs	r2, #0
 80095d2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	2220      	movs	r2, #32
 80095d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2200      	movs	r2, #0
 80095e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095e8:	f043 0220 	orr.w	r2, r3, #32
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80095f0:	2302      	movs	r3, #2
 80095f2:	e064      	b.n	80096be <HAL_I2C_Mem_Write_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	699b      	ldr	r3, [r3, #24]
 80095fa:	f003 0302 	and.w	r3, r3, #2
 80095fe:	2b02      	cmp	r3, #2
 8009600:	d0df      	beq.n	80095c2 <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009608:	2b01      	cmp	r3, #1
 800960a:	d101      	bne.n	8009610 <HAL_I2C_Mem_Write_IT+0x94>
 800960c:	2302      	movs	r3, #2
 800960e:	e056      	b.n	80096be <HAL_I2C_Mem_Write_IT+0x142>
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2201      	movs	r2, #1
 8009614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f003 0301 	and.w	r3, r3, #1
 8009622:	2b01      	cmp	r3, #1
 8009624:	d007      	beq.n	8009636 <HAL_I2C_Mem_Write_IT+0xba>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	681a      	ldr	r2, [r3, #0]
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f042 0201 	orr.w	r2, r2, #1
 8009634:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	681a      	ldr	r2, [r3, #0]
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009644:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2221      	movs	r2, #33	@ 0x21
 800964a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2240      	movs	r2, #64	@ 0x40
 8009652:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2200      	movs	r2, #0
 800965a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	6a3a      	ldr	r2, [r7, #32]
 8009660:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009666:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800966c:	b29a      	uxth	r2, r3
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	4a17      	ldr	r2, [pc, #92]	@ (80096d4 <HAL_I2C_Mem_Write_IT+0x158>)
 8009676:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8009678:	897a      	ldrh	r2, [r7, #10]
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 800967e:	893a      	ldrh	r2, [r7, #8]
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8009684:	88fa      	ldrh	r2, [r7, #6]
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2200      	movs	r2, #0
 800968e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	681a      	ldr	r2, [r3, #0]
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800969e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2200      	movs	r2, #0
 80096a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	685a      	ldr	r2, [r3, #4]
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80096b6:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80096b8:	2300      	movs	r3, #0
 80096ba:	e000      	b.n	80096be <HAL_I2C_Mem_Write_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 80096bc:	2302      	movs	r3, #2
  }
}
 80096be:	4618      	mov	r0, r3
 80096c0:	371c      	adds	r7, #28
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr
 80096ca:	bf00      	nop
 80096cc:	20000030 	.word	0x20000030
 80096d0:	14f8b589 	.word	0x14f8b589
 80096d4:	ffff0000 	.word	0xffff0000

080096d8 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80096d8:	b480      	push	{r7}
 80096da:	b087      	sub	sp, #28
 80096dc:	af00      	add	r7, sp, #0
 80096de:	60f8      	str	r0, [r7, #12]
 80096e0:	4608      	mov	r0, r1
 80096e2:	4611      	mov	r1, r2
 80096e4:	461a      	mov	r2, r3
 80096e6:	4603      	mov	r3, r0
 80096e8:	817b      	strh	r3, [r7, #10]
 80096ea:	460b      	mov	r3, r1
 80096ec:	813b      	strh	r3, [r7, #8]
 80096ee:	4613      	mov	r3, r2
 80096f0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80096f2:	2300      	movs	r3, #0
 80096f4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80096fc:	b2db      	uxtb	r3, r3
 80096fe:	2b20      	cmp	r3, #32
 8009700:	f040 8096 	bne.w	8009830 <HAL_I2C_Mem_Read_IT+0x158>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8009704:	4b4e      	ldr	r3, [pc, #312]	@ (8009840 <HAL_I2C_Mem_Read_IT+0x168>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	08db      	lsrs	r3, r3, #3
 800970a:	4a4e      	ldr	r2, [pc, #312]	@ (8009844 <HAL_I2C_Mem_Read_IT+0x16c>)
 800970c:	fba2 2303 	umull	r2, r3, r2, r3
 8009710:	0a1a      	lsrs	r2, r3, #8
 8009712:	4613      	mov	r3, r2
 8009714:	009b      	lsls	r3, r3, #2
 8009716:	4413      	add	r3, r2
 8009718:	009a      	lsls	r2, r3, #2
 800971a:	4413      	add	r3, r2
 800971c:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	3b01      	subs	r3, #1
 8009722:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d112      	bne.n	8009750 <HAL_I2C_Mem_Read_IT+0x78>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2200      	movs	r2, #0
 800972e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	2220      	movs	r2, #32
 8009734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2200      	movs	r2, #0
 800973c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009744:	f043 0220 	orr.w	r2, r3, #32
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800974c:	2302      	movs	r3, #2
 800974e:	e070      	b.n	8009832 <HAL_I2C_Mem_Read_IT+0x15a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	699b      	ldr	r3, [r3, #24]
 8009756:	f003 0302 	and.w	r3, r3, #2
 800975a:	2b02      	cmp	r3, #2
 800975c:	d0df      	beq.n	800971e <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009764:	2b01      	cmp	r3, #1
 8009766:	d101      	bne.n	800976c <HAL_I2C_Mem_Read_IT+0x94>
 8009768:	2302      	movs	r3, #2
 800976a:	e062      	b.n	8009832 <HAL_I2C_Mem_Read_IT+0x15a>
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2201      	movs	r2, #1
 8009770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f003 0301 	and.w	r3, r3, #1
 800977e:	2b01      	cmp	r3, #1
 8009780:	d007      	beq.n	8009792 <HAL_I2C_Mem_Read_IT+0xba>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	681a      	ldr	r2, [r3, #0]
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f042 0201 	orr.w	r2, r2, #1
 8009790:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	681a      	ldr	r2, [r3, #0]
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80097a0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2222      	movs	r2, #34	@ 0x22
 80097a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2240      	movs	r2, #64	@ 0x40
 80097ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	2200      	movs	r2, #0
 80097b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	6a3a      	ldr	r2, [r7, #32]
 80097bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80097c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80097c8:	b29a      	uxth	r2, r3
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	4a1d      	ldr	r2, [pc, #116]	@ (8009848 <HAL_I2C_Mem_Read_IT+0x170>)
 80097d2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80097d4:	897a      	ldrh	r2, [r7, #10]
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80097da:	893a      	ldrh	r2, [r7, #8]
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80097e0:	88fa      	ldrh	r2, [r7, #6]
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2200      	movs	r2, #0
 80097ea:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80097fa:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800980a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2200      	movs	r2, #0
 8009810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if (hi2c->XferSize > 0U)
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009818:	2b00      	cmp	r3, #0
 800981a:	d007      	beq.n	800982c <HAL_I2C_Mem_Read_IT+0x154>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	685a      	ldr	r2, [r3, #4]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 800982a:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 800982c:	2300      	movs	r3, #0
 800982e:	e000      	b.n	8009832 <HAL_I2C_Mem_Read_IT+0x15a>
  }
  else
  {
    return HAL_BUSY;
 8009830:	2302      	movs	r3, #2
  }
}
 8009832:	4618      	mov	r0, r3
 8009834:	371c      	adds	r7, #28
 8009836:	46bd      	mov	sp, r7
 8009838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983c:	4770      	bx	lr
 800983e:	bf00      	nop
 8009840:	20000030 	.word	0x20000030
 8009844:	14f8b589 	.word	0x14f8b589
 8009848:	ffff0000 	.word	0xffff0000

0800984c <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b08a      	sub	sp, #40	@ 0x28
 8009850:	af02      	add	r7, sp, #8
 8009852:	60f8      	str	r0, [r7, #12]
 8009854:	4608      	mov	r0, r1
 8009856:	4611      	mov	r1, r2
 8009858:	461a      	mov	r2, r3
 800985a:	4603      	mov	r3, r0
 800985c:	817b      	strh	r3, [r7, #10]
 800985e:	460b      	mov	r3, r1
 8009860:	813b      	strh	r3, [r7, #8]
 8009862:	4613      	mov	r3, r2
 8009864:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8009866:	2300      	movs	r3, #0
 8009868:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800986a:	f7fc f867 	bl	800593c <HAL_GetTick>
 800986e:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009876:	b2db      	uxtb	r3, r3
 8009878:	2b20      	cmp	r3, #32
 800987a:	f040 8136 	bne.w	8009aea <HAL_I2C_Mem_Write_DMA+0x29e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800987e:	4b9d      	ldr	r3, [pc, #628]	@ (8009af4 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	08db      	lsrs	r3, r3, #3
 8009884:	4a9c      	ldr	r2, [pc, #624]	@ (8009af8 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 8009886:	fba2 2303 	umull	r2, r3, r2, r3
 800988a:	0a1a      	lsrs	r2, r3, #8
 800988c:	4613      	mov	r3, r2
 800988e:	009b      	lsls	r3, r3, #2
 8009890:	4413      	add	r3, r2
 8009892:	009a      	lsls	r2, r3, #2
 8009894:	4413      	add	r3, r2
 8009896:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	3b01      	subs	r3, #1
 800989c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d112      	bne.n	80098ca <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	2200      	movs	r2, #0
 80098a8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2220      	movs	r2, #32
 80098ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2200      	movs	r2, #0
 80098b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098be:	f043 0220 	orr.w	r2, r3, #32
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80098c6:	2302      	movs	r3, #2
 80098c8:	e110      	b.n	8009aec <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	699b      	ldr	r3, [r3, #24]
 80098d0:	f003 0302 	and.w	r3, r3, #2
 80098d4:	2b02      	cmp	r3, #2
 80098d6:	d0df      	beq.n	8009898 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80098de:	2b01      	cmp	r3, #1
 80098e0:	d101      	bne.n	80098e6 <HAL_I2C_Mem_Write_DMA+0x9a>
 80098e2:	2302      	movs	r3, #2
 80098e4:	e102      	b.n	8009aec <HAL_I2C_Mem_Write_DMA+0x2a0>
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2201      	movs	r2, #1
 80098ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f003 0301 	and.w	r3, r3, #1
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	d007      	beq.n	800990c <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	681a      	ldr	r2, [r3, #0]
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f042 0201 	orr.w	r2, r2, #1
 800990a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	681a      	ldr	r2, [r3, #0]
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800991a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2221      	movs	r2, #33	@ 0x21
 8009920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2240      	movs	r2, #64	@ 0x40
 8009928:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	2200      	movs	r2, #0
 8009930:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009936:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800993c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009942:	b29a      	uxth	r2, r3
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	4a6c      	ldr	r2, [pc, #432]	@ (8009afc <HAL_I2C_Mem_Write_DMA+0x2b0>)
 800994c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800994e:	897a      	ldrh	r2, [r7, #10]
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8009954:	893a      	ldrh	r2, [r7, #8]
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 800995a:	88fa      	ldrh	r2, [r7, #6]
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2200      	movs	r2, #0
 8009964:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800996a:	2b00      	cmp	r3, #0
 800996c:	f000 80a9 	beq.w	8009ac2 <HAL_I2C_Mem_Write_DMA+0x276>
    {
      if (hi2c->hdmatx != NULL)
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009974:	2b00      	cmp	r3, #0
 8009976:	d02a      	beq.n	80099ce <HAL_I2C_Mem_Write_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800997c:	4a60      	ldr	r2, [pc, #384]	@ (8009b00 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 800997e:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009984:	4a5f      	ldr	r2, [pc, #380]	@ (8009b04 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 8009986:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800998c:	2200      	movs	r2, #0
 800998e:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009994:	2200      	movs	r2, #0
 8009996:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800999c:	2200      	movs	r2, #0
 800999e:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099a4:	2200      	movs	r2, #0
 80099a6:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099b0:	4619      	mov	r1, r3
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	3310      	adds	r3, #16
 80099b8:	461a      	mov	r2, r3
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80099be:	f7fc fd94 	bl	80064ea <HAL_DMA_Start_IT>
 80099c2:	4603      	mov	r3, r0
 80099c4:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80099c6:	7efb      	ldrb	r3, [r7, #27]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d166      	bne.n	8009a9a <HAL_I2C_Mem_Write_DMA+0x24e>
 80099cc:	e013      	b.n	80099f6 <HAL_I2C_Mem_Write_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	2220      	movs	r2, #32
 80099d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2200      	movs	r2, #0
 80099da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099e2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2200      	movs	r2, #0
 80099ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80099f2:	2301      	movs	r3, #1
 80099f4:	e07a      	b.n	8009aec <HAL_I2C_Mem_Write_DMA+0x2a0>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80099f6:	88f8      	ldrh	r0, [r7, #6]
 80099f8:	893a      	ldrh	r2, [r7, #8]
 80099fa:	8979      	ldrh	r1, [r7, #10]
 80099fc:	69fb      	ldr	r3, [r7, #28]
 80099fe:	9301      	str	r3, [sp, #4]
 8009a00:	2323      	movs	r3, #35	@ 0x23
 8009a02:	9300      	str	r3, [sp, #0]
 8009a04:	4603      	mov	r3, r0
 8009a06:	68f8      	ldr	r0, [r7, #12]
 8009a08:	f003 f97e 	bl	800cd08 <I2C_RequestMemoryWrite>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d022      	beq.n	8009a58 <HAL_I2C_Mem_Write_DMA+0x20c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a16:	4618      	mov	r0, r3
 8009a18:	f7fc fe2f 	bl	800667a <HAL_DMA_Abort_IT>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a24:	2200      	movs	r2, #0
 8009a26:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	681a      	ldr	r2, [r3, #0]
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009a36:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	2200      	movs	r2, #0
 8009a42:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	681a      	ldr	r2, [r3, #0]
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f022 0201 	bic.w	r2, r2, #1
 8009a52:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8009a54:	2301      	movs	r3, #1
 8009a56:	e049      	b.n	8009aec <HAL_I2C_Mem_Write_DMA+0x2a0>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a58:	2300      	movs	r3, #0
 8009a5a:	613b      	str	r3, [r7, #16]
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	695b      	ldr	r3, [r3, #20]
 8009a62:	613b      	str	r3, [r7, #16]
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	699b      	ldr	r3, [r3, #24]
 8009a6a:	613b      	str	r3, [r7, #16]
 8009a6c:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2200      	movs	r2, #0
 8009a72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	685a      	ldr	r2, [r3, #4]
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009a84:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	685a      	ldr	r2, [r3, #4]
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009a94:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 8009a96:	2300      	movs	r3, #0
 8009a98:	e028      	b.n	8009aec <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	2220      	movs	r2, #32
 8009a9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009aae:	f043 0210 	orr.w	r2, r3, #16
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8009abe:	2301      	movs	r3, #1
 8009ac0:	e014      	b.n	8009aec <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	2220      	movs	r2, #32
 8009ac6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2200      	movs	r2, #0
 8009ace:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ad6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	e000      	b.n	8009aec <HAL_I2C_Mem_Write_DMA+0x2a0>
    }
  }
  else
  {
    return HAL_BUSY;
 8009aea:	2302      	movs	r3, #2
  }
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3720      	adds	r7, #32
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}
 8009af4:	20000030 	.word	0x20000030
 8009af8:	14f8b589 	.word	0x14f8b589
 8009afc:	ffff0000 	.word	0xffff0000
 8009b00:	0800d005 	.word	0x0800d005
 8009b04:	0800d1c3 	.word	0x0800d1c3

08009b08 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b08c      	sub	sp, #48	@ 0x30
 8009b0c:	af02      	add	r7, sp, #8
 8009b0e:	60f8      	str	r0, [r7, #12]
 8009b10:	4608      	mov	r0, r1
 8009b12:	4611      	mov	r1, r2
 8009b14:	461a      	mov	r2, r3
 8009b16:	4603      	mov	r3, r0
 8009b18:	817b      	strh	r3, [r7, #10]
 8009b1a:	460b      	mov	r3, r1
 8009b1c:	813b      	strh	r3, [r7, #8]
 8009b1e:	4613      	mov	r3, r2
 8009b20:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009b22:	f7fb ff0b 	bl	800593c <HAL_GetTick>
 8009b26:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009b32:	b2db      	uxtb	r3, r3
 8009b34:	2b20      	cmp	r3, #32
 8009b36:	f040 8172 	bne.w	8009e1e <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8009b3a:	4b93      	ldr	r3, [pc, #588]	@ (8009d88 <HAL_I2C_Mem_Read_DMA+0x280>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	08db      	lsrs	r3, r3, #3
 8009b40:	4a92      	ldr	r2, [pc, #584]	@ (8009d8c <HAL_I2C_Mem_Read_DMA+0x284>)
 8009b42:	fba2 2303 	umull	r2, r3, r2, r3
 8009b46:	0a1a      	lsrs	r2, r3, #8
 8009b48:	4613      	mov	r3, r2
 8009b4a:	009b      	lsls	r3, r3, #2
 8009b4c:	4413      	add	r3, r2
 8009b4e:	009a      	lsls	r2, r3, #2
 8009b50:	4413      	add	r3, r2
 8009b52:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8009b54:	69fb      	ldr	r3, [r7, #28]
 8009b56:	3b01      	subs	r3, #1
 8009b58:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8009b5a:	69fb      	ldr	r3, [r7, #28]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d112      	bne.n	8009b86 <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2200      	movs	r2, #0
 8009b64:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	2220      	movs	r2, #32
 8009b6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	2200      	movs	r2, #0
 8009b72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b7a:	f043 0220 	orr.w	r2, r3, #32
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8009b82:	2302      	movs	r3, #2
 8009b84:	e14c      	b.n	8009e20 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	699b      	ldr	r3, [r3, #24]
 8009b8c:	f003 0302 	and.w	r3, r3, #2
 8009b90:	2b02      	cmp	r3, #2
 8009b92:	d0df      	beq.n	8009b54 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009b9a:	2b01      	cmp	r3, #1
 8009b9c:	d101      	bne.n	8009ba2 <HAL_I2C_Mem_Read_DMA+0x9a>
 8009b9e:	2302      	movs	r3, #2
 8009ba0:	e13e      	b.n	8009e20 <HAL_I2C_Mem_Read_DMA+0x318>
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f003 0301 	and.w	r3, r3, #1
 8009bb4:	2b01      	cmp	r3, #1
 8009bb6:	d007      	beq.n	8009bc8 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f042 0201 	orr.w	r2, r2, #1
 8009bc6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009bd6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2222      	movs	r2, #34	@ 0x22
 8009bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2240      	movs	r2, #64	@ 0x40
 8009be4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2200      	movs	r2, #0
 8009bec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bf2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8009bf8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009bfe:	b29a      	uxth	r2, r3
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	4a62      	ldr	r2, [pc, #392]	@ (8009d90 <HAL_I2C_Mem_Read_DMA+0x288>)
 8009c08:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8009c0a:	897a      	ldrh	r2, [r7, #10]
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8009c10:	893a      	ldrh	r2, [r7, #8]
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8009c16:	88fa      	ldrh	r2, [r7, #6]
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	f000 80cc 	beq.w	8009dc4 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d02d      	beq.n	8009c90 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c38:	4a56      	ldr	r2, [pc, #344]	@ (8009d94 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8009c3a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c40:	4a55      	ldr	r2, [pc, #340]	@ (8009d98 <HAL_I2C_Mem_Read_DMA+0x290>)
 8009c42:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c48:	2200      	movs	r2, #0
 8009c4a:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c50:	2200      	movs	r2, #0
 8009c52:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c58:	2200      	movs	r2, #0
 8009c5a:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c60:	2200      	movs	r2, #0
 8009c62:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	3310      	adds	r3, #16
 8009c6e:	4619      	mov	r1, r3
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c74:	461a      	mov	r2, r3
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c7a:	f7fc fc36 	bl	80064ea <HAL_DMA_Start_IT>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8009c84:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	f040 8087 	bne.w	8009d9c <HAL_I2C_Mem_Read_DMA+0x294>
 8009c8e:	e013      	b.n	8009cb8 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2220      	movs	r2, #32
 8009c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ca4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	e0b3      	b.n	8009e20 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8009cb8:	88f8      	ldrh	r0, [r7, #6]
 8009cba:	893a      	ldrh	r2, [r7, #8]
 8009cbc:	8979      	ldrh	r1, [r7, #10]
 8009cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cc0:	9301      	str	r3, [sp, #4]
 8009cc2:	2323      	movs	r3, #35	@ 0x23
 8009cc4:	9300      	str	r3, [sp, #0]
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	68f8      	ldr	r0, [r7, #12]
 8009cca:	f003 f8b3 	bl	800ce34 <I2C_RequestMemoryRead>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d023      	beq.n	8009d1c <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f7fc fcce 	bl	800667a <HAL_DMA_Abort_IT>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ce8:	2200      	movs	r2, #0
 8009cea:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	681a      	ldr	r2, [r3, #0]
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009cfa:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	2200      	movs	r2, #0
 8009d06:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	681a      	ldr	r2, [r3, #0]
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f022 0201 	bic.w	r2, r2, #1
 8009d16:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8009d18:	2301      	movs	r3, #1
 8009d1a:	e081      	b.n	8009e20 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d20:	2b01      	cmp	r3, #1
 8009d22:	d108      	bne.n	8009d36 <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	681a      	ldr	r2, [r3, #0]
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009d32:	601a      	str	r2, [r3, #0]
 8009d34:	e007      	b.n	8009d46 <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	685a      	ldr	r2, [r3, #4]
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009d44:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009d46:	2300      	movs	r3, #0
 8009d48:	61bb      	str	r3, [r7, #24]
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	695b      	ldr	r3, [r3, #20]
 8009d50:	61bb      	str	r3, [r7, #24]
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	699b      	ldr	r3, [r3, #24]
 8009d58:	61bb      	str	r3, [r7, #24]
 8009d5a:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	685a      	ldr	r2, [r3, #4]
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009d72:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	685a      	ldr	r2, [r3, #4]
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009d82:	605a      	str	r2, [r3, #4]
 8009d84:	e049      	b.n	8009e1a <HAL_I2C_Mem_Read_DMA+0x312>
 8009d86:	bf00      	nop
 8009d88:	20000030 	.word	0x20000030
 8009d8c:	14f8b589 	.word	0x14f8b589
 8009d90:	ffff0000 	.word	0xffff0000
 8009d94:	0800d005 	.word	0x0800d005
 8009d98:	0800d1c3 	.word	0x0800d1c3
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	2220      	movs	r2, #32
 8009da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	2200      	movs	r2, #0
 8009da8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009db0:	f043 0210 	orr.w	r2, r3, #16
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	e02d      	b.n	8009e20 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8009dc4:	88f8      	ldrh	r0, [r7, #6]
 8009dc6:	893a      	ldrh	r2, [r7, #8]
 8009dc8:	8979      	ldrh	r1, [r7, #10]
 8009dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dcc:	9301      	str	r3, [sp, #4]
 8009dce:	2323      	movs	r3, #35	@ 0x23
 8009dd0:	9300      	str	r3, [sp, #0]
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	68f8      	ldr	r0, [r7, #12]
 8009dd6:	f003 f82d 	bl	800ce34 <I2C_RequestMemoryRead>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d001      	beq.n	8009de4 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 8009de0:	2301      	movs	r3, #1
 8009de2:	e01d      	b.n	8009e20 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009de4:	2300      	movs	r3, #0
 8009de6:	617b      	str	r3, [r7, #20]
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	695b      	ldr	r3, [r3, #20]
 8009dee:	617b      	str	r3, [r7, #20]
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	699b      	ldr	r3, [r3, #24]
 8009df6:	617b      	str	r3, [r7, #20]
 8009df8:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	681a      	ldr	r2, [r3, #0]
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009e08:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2220      	movs	r2, #32
 8009e0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2200      	movs	r2, #0
 8009e16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	e000      	b.n	8009e20 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 8009e1e:	2302      	movs	r3, #2
  }
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3728      	adds	r7, #40	@ 0x28
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}

08009e28 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b08a      	sub	sp, #40	@ 0x28
 8009e2c:	af02      	add	r7, sp, #8
 8009e2e:	60f8      	str	r0, [r7, #12]
 8009e30:	607a      	str	r2, [r7, #4]
 8009e32:	603b      	str	r3, [r7, #0]
 8009e34:	460b      	mov	r3, r1
 8009e36:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8009e38:	f7fb fd80 	bl	800593c <HAL_GetTick>
 8009e3c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e48:	b2db      	uxtb	r3, r3
 8009e4a:	2b20      	cmp	r3, #32
 8009e4c:	f040 8111 	bne.w	800a072 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009e50:	69fb      	ldr	r3, [r7, #28]
 8009e52:	9300      	str	r3, [sp, #0]
 8009e54:	2319      	movs	r3, #25
 8009e56:	2201      	movs	r2, #1
 8009e58:	4988      	ldr	r1, [pc, #544]	@ (800a07c <HAL_I2C_IsDeviceReady+0x254>)
 8009e5a:	68f8      	ldr	r0, [r7, #12]
 8009e5c:	f003 fa96 	bl	800d38c <I2C_WaitOnFlagUntilTimeout>
 8009e60:	4603      	mov	r3, r0
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d001      	beq.n	8009e6a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8009e66:	2302      	movs	r3, #2
 8009e68:	e104      	b.n	800a074 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009e70:	2b01      	cmp	r3, #1
 8009e72:	d101      	bne.n	8009e78 <HAL_I2C_IsDeviceReady+0x50>
 8009e74:	2302      	movs	r3, #2
 8009e76:	e0fd      	b.n	800a074 <HAL_I2C_IsDeviceReady+0x24c>
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f003 0301 	and.w	r3, r3, #1
 8009e8a:	2b01      	cmp	r3, #1
 8009e8c:	d007      	beq.n	8009e9e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f042 0201 	orr.w	r2, r2, #1
 8009e9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	681a      	ldr	r2, [r3, #0]
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009eac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2224      	movs	r2, #36	@ 0x24
 8009eb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	4a70      	ldr	r2, [pc, #448]	@ (800a080 <HAL_I2C_IsDeviceReady+0x258>)
 8009ec0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	681a      	ldr	r2, [r3, #0]
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009ed0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8009ed2:	69fb      	ldr	r3, [r7, #28]
 8009ed4:	9300      	str	r3, [sp, #0]
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009ede:	68f8      	ldr	r0, [r7, #12]
 8009ee0:	f003 fa54 	bl	800d38c <I2C_WaitOnFlagUntilTimeout>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d00d      	beq.n	8009f06 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ef4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ef8:	d103      	bne.n	8009f02 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009f00:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8009f02:	2303      	movs	r3, #3
 8009f04:	e0b6      	b.n	800a074 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009f06:	897b      	ldrh	r3, [r7, #10]
 8009f08:	b2db      	uxtb	r3, r3
 8009f0a:	461a      	mov	r2, r3
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009f14:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8009f16:	f7fb fd11 	bl	800593c <HAL_GetTick>
 8009f1a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	695b      	ldr	r3, [r3, #20]
 8009f22:	f003 0302 	and.w	r3, r3, #2
 8009f26:	2b02      	cmp	r3, #2
 8009f28:	bf0c      	ite	eq
 8009f2a:	2301      	moveq	r3, #1
 8009f2c:	2300      	movne	r3, #0
 8009f2e:	b2db      	uxtb	r3, r3
 8009f30:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	695b      	ldr	r3, [r3, #20]
 8009f38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009f3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f40:	bf0c      	ite	eq
 8009f42:	2301      	moveq	r3, #1
 8009f44:	2300      	movne	r3, #0
 8009f46:	b2db      	uxtb	r3, r3
 8009f48:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8009f4a:	e025      	b.n	8009f98 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009f4c:	f7fb fcf6 	bl	800593c <HAL_GetTick>
 8009f50:	4602      	mov	r2, r0
 8009f52:	69fb      	ldr	r3, [r7, #28]
 8009f54:	1ad3      	subs	r3, r2, r3
 8009f56:	683a      	ldr	r2, [r7, #0]
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d302      	bcc.n	8009f62 <HAL_I2C_IsDeviceReady+0x13a>
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d103      	bne.n	8009f6a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	22a0      	movs	r2, #160	@ 0xa0
 8009f66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	695b      	ldr	r3, [r3, #20]
 8009f70:	f003 0302 	and.w	r3, r3, #2
 8009f74:	2b02      	cmp	r3, #2
 8009f76:	bf0c      	ite	eq
 8009f78:	2301      	moveq	r3, #1
 8009f7a:	2300      	movne	r3, #0
 8009f7c:	b2db      	uxtb	r3, r3
 8009f7e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	695b      	ldr	r3, [r3, #20]
 8009f86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009f8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f8e:	bf0c      	ite	eq
 8009f90:	2301      	moveq	r3, #1
 8009f92:	2300      	movne	r3, #0
 8009f94:	b2db      	uxtb	r3, r3
 8009f96:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f9e:	b2db      	uxtb	r3, r3
 8009fa0:	2ba0      	cmp	r3, #160	@ 0xa0
 8009fa2:	d005      	beq.n	8009fb0 <HAL_I2C_IsDeviceReady+0x188>
 8009fa4:	7dfb      	ldrb	r3, [r7, #23]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d102      	bne.n	8009fb0 <HAL_I2C_IsDeviceReady+0x188>
 8009faa:	7dbb      	ldrb	r3, [r7, #22]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d0cd      	beq.n	8009f4c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	2220      	movs	r2, #32
 8009fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	695b      	ldr	r3, [r3, #20]
 8009fbe:	f003 0302 	and.w	r3, r3, #2
 8009fc2:	2b02      	cmp	r3, #2
 8009fc4:	d129      	bne.n	800a01a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	681a      	ldr	r2, [r3, #0]
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009fd4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	613b      	str	r3, [r7, #16]
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	695b      	ldr	r3, [r3, #20]
 8009fe0:	613b      	str	r3, [r7, #16]
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	699b      	ldr	r3, [r3, #24]
 8009fe8:	613b      	str	r3, [r7, #16]
 8009fea:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009fec:	69fb      	ldr	r3, [r7, #28]
 8009fee:	9300      	str	r3, [sp, #0]
 8009ff0:	2319      	movs	r3, #25
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	4921      	ldr	r1, [pc, #132]	@ (800a07c <HAL_I2C_IsDeviceReady+0x254>)
 8009ff6:	68f8      	ldr	r0, [r7, #12]
 8009ff8:	f003 f9c8 	bl	800d38c <I2C_WaitOnFlagUntilTimeout>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d001      	beq.n	800a006 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800a002:	2301      	movs	r3, #1
 800a004:	e036      	b.n	800a074 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2220      	movs	r2, #32
 800a00a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2200      	movs	r2, #0
 800a012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800a016:	2300      	movs	r3, #0
 800a018:	e02c      	b.n	800a074 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	681a      	ldr	r2, [r3, #0]
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a028:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a032:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a034:	69fb      	ldr	r3, [r7, #28]
 800a036:	9300      	str	r3, [sp, #0]
 800a038:	2319      	movs	r3, #25
 800a03a:	2201      	movs	r2, #1
 800a03c:	490f      	ldr	r1, [pc, #60]	@ (800a07c <HAL_I2C_IsDeviceReady+0x254>)
 800a03e:	68f8      	ldr	r0, [r7, #12]
 800a040:	f003 f9a4 	bl	800d38c <I2C_WaitOnFlagUntilTimeout>
 800a044:	4603      	mov	r3, r0
 800a046:	2b00      	cmp	r3, #0
 800a048:	d001      	beq.n	800a04e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800a04a:	2301      	movs	r3, #1
 800a04c:	e012      	b.n	800a074 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800a04e:	69bb      	ldr	r3, [r7, #24]
 800a050:	3301      	adds	r3, #1
 800a052:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800a054:	69ba      	ldr	r2, [r7, #24]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	429a      	cmp	r2, r3
 800a05a:	f4ff af32 	bcc.w	8009ec2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	2220      	movs	r2, #32
 800a062:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2200      	movs	r2, #0
 800a06a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800a06e:	2301      	movs	r3, #1
 800a070:	e000      	b.n	800a074 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800a072:	2302      	movs	r3, #2
  }
}
 800a074:	4618      	mov	r0, r3
 800a076:	3720      	adds	r7, #32
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}
 800a07c:	00100002 	.word	0x00100002
 800a080:	ffff0000 	.word	0xffff0000

0800a084 <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800a084:	b480      	push	{r7}
 800a086:	b087      	sub	sp, #28
 800a088:	af00      	add	r7, sp, #0
 800a08a:	60f8      	str	r0, [r7, #12]
 800a08c:	607a      	str	r2, [r7, #4]
 800a08e:	461a      	mov	r2, r3
 800a090:	460b      	mov	r3, r1
 800a092:	817b      	strh	r3, [r7, #10]
 800a094:	4613      	mov	r3, r2
 800a096:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 800a098:	2300      	movs	r3, #0
 800a09a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count      = 0x00U;
 800a09c:	2300      	movs	r3, #0
 800a09e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a0a6:	b2db      	uxtb	r3, r3
 800a0a8:	2b20      	cmp	r3, #32
 800a0aa:	f040 80a2 	bne.w	800a1f2 <HAL_I2C_Master_Seq_Transmit_IT+0x16e>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a0b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0bc:	d005      	beq.n	800a0ca <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 800a0be:	6a3b      	ldr	r3, [r7, #32]
 800a0c0:	2b08      	cmp	r3, #8
 800a0c2:	d002      	beq.n	800a0ca <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 800a0c4:	6a3b      	ldr	r3, [r7, #32]
 800a0c6:	2b01      	cmp	r3, #1
 800a0c8:	d12c      	bne.n	800a124 <HAL_I2C_Master_Seq_Transmit_IT+0xa0>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800a0ca:	4b4d      	ldr	r3, [pc, #308]	@ (800a200 <HAL_I2C_Master_Seq_Transmit_IT+0x17c>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	08db      	lsrs	r3, r3, #3
 800a0d0:	4a4c      	ldr	r2, [pc, #304]	@ (800a204 <HAL_I2C_Master_Seq_Transmit_IT+0x180>)
 800a0d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a0d6:	0a1a      	lsrs	r2, r3, #8
 800a0d8:	4613      	mov	r3, r2
 800a0da:	009b      	lsls	r3, r3, #2
 800a0dc:	4413      	add	r3, r2
 800a0de:	009a      	lsls	r2, r3, #2
 800a0e0:	4413      	add	r3, r2
 800a0e2:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	3b01      	subs	r3, #1
 800a0e8:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d112      	bne.n	800a116 <HAL_I2C_Master_Seq_Transmit_IT+0x92>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2220      	movs	r2, #32
 800a0fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	2200      	movs	r2, #0
 800a102:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a10a:	f043 0220 	orr.w	r2, r3, #32
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	641a      	str	r2, [r3, #64]	@ 0x40

          return HAL_BUSY;
 800a112:	2302      	movs	r3, #2
 800a114:	e06e      	b.n	800a1f4 <HAL_I2C_Master_Seq_Transmit_IT+0x170>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	699b      	ldr	r3, [r3, #24]
 800a11c:	f003 0302 	and.w	r3, r3, #2
 800a120:	2b02      	cmp	r3, #2
 800a122:	d0df      	beq.n	800a0e4 <HAL_I2C_Master_Seq_Transmit_IT+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a12a:	2b01      	cmp	r3, #1
 800a12c:	d101      	bne.n	800a132 <HAL_I2C_Master_Seq_Transmit_IT+0xae>
 800a12e:	2302      	movs	r3, #2
 800a130:	e060      	b.n	800a1f4 <HAL_I2C_Master_Seq_Transmit_IT+0x170>
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	2201      	movs	r2, #1
 800a136:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f003 0301 	and.w	r3, r3, #1
 800a144:	2b01      	cmp	r3, #1
 800a146:	d007      	beq.n	800a158 <HAL_I2C_Master_Seq_Transmit_IT+0xd4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	681a      	ldr	r2, [r3, #0]
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f042 0201 	orr.w	r2, r2, #1
 800a156:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	681a      	ldr	r2, [r3, #0]
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a166:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	2221      	movs	r2, #33	@ 0x21
 800a16c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	2210      	movs	r2, #16
 800a174:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2200      	movs	r2, #0
 800a17c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	687a      	ldr	r2, [r7, #4]
 800a182:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	893a      	ldrh	r2, [r7, #8]
 800a188:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a18e:	b29a      	uxth	r2, r3
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	6a3a      	ldr	r2, [r7, #32]
 800a198:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800a19a:	897a      	ldrh	r2, [r7, #10]
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	645a      	str	r2, [r3, #68]	@ 0x44

    Prev_State = hi2c->PreviousState;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1a4:	617b      	str	r3, [r7, #20]

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	2b11      	cmp	r3, #17
 800a1aa:	d10c      	bne.n	800a1c6 <HAL_I2C_Master_Seq_Transmit_IT+0x142>
 800a1ac:	6a3b      	ldr	r3, [r7, #32]
 800a1ae:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800a1b2:	d003      	beq.n	800a1bc <HAL_I2C_Master_Seq_Transmit_IT+0x138>
 800a1b4:	6a3b      	ldr	r3, [r7, #32]
 800a1b6:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800a1ba:	d101      	bne.n	800a1c0 <HAL_I2C_Master_Seq_Transmit_IT+0x13c>
 800a1bc:	2301      	movs	r3, #1
 800a1be:	e000      	b.n	800a1c2 <HAL_I2C_Master_Seq_Transmit_IT+0x13e>
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	2b01      	cmp	r3, #1
 800a1c4:	d107      	bne.n	800a1d6 <HAL_I2C_Master_Seq_Transmit_IT+0x152>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	681a      	ldr	r2, [r3, #0]
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a1d4:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	685a      	ldr	r2, [r3, #4]
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 800a1ec:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	e000      	b.n	800a1f4 <HAL_I2C_Master_Seq_Transmit_IT+0x170>
  }
  else
  {
    return HAL_BUSY;
 800a1f2:	2302      	movs	r3, #2
  }
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	371c      	adds	r7, #28
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fe:	4770      	bx	lr
 800a200:	20000030 	.word	0x20000030
 800a204:	14f8b589 	.word	0x14f8b589

0800a208 <HAL_I2C_Master_Seq_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b088      	sub	sp, #32
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	60f8      	str	r0, [r7, #12]
 800a210:	607a      	str	r2, [r7, #4]
 800a212:	461a      	mov	r2, r3
 800a214:	460b      	mov	r3, r1
 800a216:	817b      	strh	r3, [r7, #10]
 800a218:	4613      	mov	r3, r2
 800a21a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 800a21c:	2300      	movs	r3, #0
 800a21e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count      = 0x00U;
 800a220:	2300      	movs	r3, #0
 800a222:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a22a:	b2db      	uxtb	r3, r3
 800a22c:	2b20      	cmp	r3, #32
 800a22e:	f040 813c 	bne.w	800a4aa <HAL_I2C_Master_Seq_Transmit_DMA+0x2a2>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a23c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a240:	d005      	beq.n	800a24e <HAL_I2C_Master_Seq_Transmit_DMA+0x46>
 800a242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a244:	2b08      	cmp	r3, #8
 800a246:	d002      	beq.n	800a24e <HAL_I2C_Master_Seq_Transmit_DMA+0x46>
 800a248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a24a:	2b01      	cmp	r3, #1
 800a24c:	d12c      	bne.n	800a2a8 <HAL_I2C_Master_Seq_Transmit_DMA+0xa0>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800a24e:	4b99      	ldr	r3, [pc, #612]	@ (800a4b4 <HAL_I2C_Master_Seq_Transmit_DMA+0x2ac>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	08db      	lsrs	r3, r3, #3
 800a254:	4a98      	ldr	r2, [pc, #608]	@ (800a4b8 <HAL_I2C_Master_Seq_Transmit_DMA+0x2b0>)
 800a256:	fba2 2303 	umull	r2, r3, r2, r3
 800a25a:	0a1a      	lsrs	r2, r3, #8
 800a25c:	4613      	mov	r3, r2
 800a25e:	009b      	lsls	r3, r3, #2
 800a260:	4413      	add	r3, r2
 800a262:	009a      	lsls	r2, r3, #2
 800a264:	4413      	add	r3, r2
 800a266:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	3b01      	subs	r3, #1
 800a26c:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d112      	bne.n	800a29a <HAL_I2C_Master_Seq_Transmit_DMA+0x92>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2200      	movs	r2, #0
 800a278:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2220      	movs	r2, #32
 800a27e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2200      	movs	r2, #0
 800a286:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a28e:	f043 0220 	orr.w	r2, r3, #32
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	641a      	str	r2, [r3, #64]	@ 0x40

          return HAL_BUSY;
 800a296:	2302      	movs	r3, #2
 800a298:	e108      	b.n	800a4ac <HAL_I2C_Master_Seq_Transmit_DMA+0x2a4>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	699b      	ldr	r3, [r3, #24]
 800a2a0:	f003 0302 	and.w	r3, r3, #2
 800a2a4:	2b02      	cmp	r3, #2
 800a2a6:	d0df      	beq.n	800a268 <HAL_I2C_Master_Seq_Transmit_DMA+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a2ae:	2b01      	cmp	r3, #1
 800a2b0:	d101      	bne.n	800a2b6 <HAL_I2C_Master_Seq_Transmit_DMA+0xae>
 800a2b2:	2302      	movs	r3, #2
 800a2b4:	e0fa      	b.n	800a4ac <HAL_I2C_Master_Seq_Transmit_DMA+0x2a4>
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	2201      	movs	r2, #1
 800a2ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f003 0301 	and.w	r3, r3, #1
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	d007      	beq.n	800a2dc <HAL_I2C_Master_Seq_Transmit_DMA+0xd4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	681a      	ldr	r2, [r3, #0]
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f042 0201 	orr.w	r2, r2, #1
 800a2da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	681a      	ldr	r2, [r3, #0]
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a2ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	2221      	movs	r2, #33	@ 0x21
 800a2f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	2210      	movs	r2, #16
 800a2f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2200      	movs	r2, #0
 800a300:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	687a      	ldr	r2, [r7, #4]
 800a306:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	893a      	ldrh	r2, [r7, #8]
 800a30c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a312:	b29a      	uxth	r2, r3
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a31c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800a31e:	897a      	ldrh	r2, [r7, #10]
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	645a      	str	r2, [r3, #68]	@ 0x44

    Prev_State = hi2c->PreviousState;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a328:	61bb      	str	r3, [r7, #24]

    if (hi2c->XferSize > 0U)
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a32e:	2b00      	cmp	r3, #0
 800a330:	f000 808d 	beq.w	800a44e <HAL_I2C_Master_Seq_Transmit_DMA+0x246>
    {
      if (hi2c->hdmatx != NULL)
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d022      	beq.n	800a382 <HAL_I2C_Master_Seq_Transmit_DMA+0x17a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a340:	4a5e      	ldr	r2, [pc, #376]	@ (800a4bc <HAL_I2C_Master_Seq_Transmit_DMA+0x2b4>)
 800a342:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a348:	4a5d      	ldr	r2, [pc, #372]	@ (800a4c0 <HAL_I2C_Master_Seq_Transmit_DMA+0x2b8>)
 800a34a:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a350:	2200      	movs	r2, #0
 800a352:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a358:	2200      	movs	r2, #0
 800a35a:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a364:	4619      	mov	r1, r3
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	3310      	adds	r3, #16
 800a36c:	461a      	mov	r2, r3
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a372:	f7fc f8ba 	bl	80064ea <HAL_DMA_Start_IT>
 800a376:	4603      	mov	r3, r0
 800a378:	77fb      	strb	r3, [r7, #31]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800a37a:	7ffb      	ldrb	r3, [r7, #31]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d152      	bne.n	800a426 <HAL_I2C_Master_Seq_Transmit_DMA+0x21e>
 800a380:	e013      	b.n	800a3aa <HAL_I2C_Master_Seq_Transmit_DMA+0x1a2>
        hi2c->State     = HAL_I2C_STATE_READY;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	2220      	movs	r2, #32
 800a386:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	2200      	movs	r2, #0
 800a38e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a396:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	e080      	b.n	800a4ac <HAL_I2C_Master_Seq_Transmit_DMA+0x2a4>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	681a      	ldr	r2, [r3, #0]
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a3b8:	601a      	str	r2, [r3, #0]

        /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
        /* Mean Previous state is same as current state */
        if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800a3ba:	69bb      	ldr	r3, [r7, #24]
 800a3bc:	2b11      	cmp	r3, #17
 800a3be:	d10c      	bne.n	800a3da <HAL_I2C_Master_Seq_Transmit_DMA+0x1d2>
 800a3c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3c2:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800a3c6:	d003      	beq.n	800a3d0 <HAL_I2C_Master_Seq_Transmit_DMA+0x1c8>
 800a3c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3ca:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800a3ce:	d101      	bne.n	800a3d4 <HAL_I2C_Master_Seq_Transmit_DMA+0x1cc>
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	e000      	b.n	800a3d6 <HAL_I2C_Master_Seq_Transmit_DMA+0x1ce>
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	2b01      	cmp	r3, #1
 800a3d8:	d107      	bne.n	800a3ea <HAL_I2C_Master_Seq_Transmit_DMA+0x1e2>
        {
          /* Generate Start */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	681a      	ldr	r2, [r3, #0]
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a3e8:	601a      	str	r2, [r3, #0]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* If XferOptions is not associated to a new frame, mean no start bit is request, enable directly the DMA request */
        /* In other cases, DMA request is enabled after Slave address treatment in IRQHandler */
        if ((XferOptions == I2C_NEXT_FRAME) || (XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 800a3f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3f4:	2b04      	cmp	r3, #4
 800a3f6:	d005      	beq.n	800a404 <HAL_I2C_Master_Seq_Transmit_DMA+0x1fc>
 800a3f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3fa:	2b20      	cmp	r3, #32
 800a3fc:	d002      	beq.n	800a404 <HAL_I2C_Master_Seq_Transmit_DMA+0x1fc>
 800a3fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a400:	2b10      	cmp	r3, #16
 800a402:	d107      	bne.n	800a414 <HAL_I2C_Master_Seq_Transmit_DMA+0x20c>
        {
          /* Enable DMA Request */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	685a      	ldr	r2, [r3, #4]
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a412:	605a      	str	r2, [r3, #4]
        }

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	685a      	ldr	r2, [r3, #4]
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800a422:	605a      	str	r2, [r3, #4]
 800a424:	e03f      	b.n	800a4a6 <HAL_I2C_Master_Seq_Transmit_DMA+0x29e>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	2220      	movs	r2, #32
 800a42a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	2200      	movs	r2, #0
 800a432:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a43a:	f043 0210 	orr.w	r2, r3, #16
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	2200      	movs	r2, #0
 800a446:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800a44a:	2301      	movs	r3, #1
 800a44c:	e02e      	b.n	800a4ac <HAL_I2C_Master_Seq_Transmit_DMA+0x2a4>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	681a      	ldr	r2, [r3, #0]
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a45c:	601a      	str	r2, [r3, #0]

      /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
      /* Mean Previous state is same as current state */
      if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800a45e:	69bb      	ldr	r3, [r7, #24]
 800a460:	2b11      	cmp	r3, #17
 800a462:	d10c      	bne.n	800a47e <HAL_I2C_Master_Seq_Transmit_DMA+0x276>
 800a464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a466:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800a46a:	d003      	beq.n	800a474 <HAL_I2C_Master_Seq_Transmit_DMA+0x26c>
 800a46c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a46e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800a472:	d101      	bne.n	800a478 <HAL_I2C_Master_Seq_Transmit_DMA+0x270>
 800a474:	2301      	movs	r3, #1
 800a476:	e000      	b.n	800a47a <HAL_I2C_Master_Seq_Transmit_DMA+0x272>
 800a478:	2300      	movs	r3, #0
 800a47a:	2b01      	cmp	r3, #1
 800a47c:	d107      	bne.n	800a48e <HAL_I2C_Master_Seq_Transmit_DMA+0x286>
      {
        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	681a      	ldr	r2, [r3, #0]
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a48c:	601a      	str	r2, [r3, #0]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	2200      	movs	r2, #0
 800a492:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	685a      	ldr	r2, [r3, #4]
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 800a4a4:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	e000      	b.n	800a4ac <HAL_I2C_Master_Seq_Transmit_DMA+0x2a4>
  }
  else
  {
    return HAL_BUSY;
 800a4aa:	2302      	movs	r3, #2
  }
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3720      	adds	r7, #32
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}
 800a4b4:	20000030 	.word	0x20000030
 800a4b8:	14f8b589 	.word	0x14f8b589
 800a4bc:	0800d005 	.word	0x0800d005
 800a4c0:	0800d1c3 	.word	0x0800d1c3

0800a4c4 <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b089      	sub	sp, #36	@ 0x24
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	60f8      	str	r0, [r7, #12]
 800a4cc:	607a      	str	r2, [r7, #4]
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	460b      	mov	r3, r1
 800a4d2:	817b      	strh	r3, [r7, #10]
 800a4d4:	4613      	mov	r3, r2
 800a4d6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	617b      	str	r3, [r7, #20]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a4e0:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800a4e4:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a4ec:	b2db      	uxtb	r3, r3
 800a4ee:	2b20      	cmp	r3, #32
 800a4f0:	f040 80d6 	bne.w	800a6a0 <HAL_I2C_Master_Seq_Receive_IT+0x1dc>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a4fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a502:	d005      	beq.n	800a510 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 800a504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a506:	2b08      	cmp	r3, #8
 800a508:	d002      	beq.n	800a510 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 800a50a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a50c:	2b01      	cmp	r3, #1
 800a50e:	d12c      	bne.n	800a56a <HAL_I2C_Master_Seq_Receive_IT+0xa6>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800a510:	4b67      	ldr	r3, [pc, #412]	@ (800a6b0 <HAL_I2C_Master_Seq_Receive_IT+0x1ec>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	08db      	lsrs	r3, r3, #3
 800a516:	4a67      	ldr	r2, [pc, #412]	@ (800a6b4 <HAL_I2C_Master_Seq_Receive_IT+0x1f0>)
 800a518:	fba2 2303 	umull	r2, r3, r2, r3
 800a51c:	0a1a      	lsrs	r2, r3, #8
 800a51e:	4613      	mov	r3, r2
 800a520:	009b      	lsls	r3, r3, #2
 800a522:	4413      	add	r3, r2
 800a524:	009a      	lsls	r2, r3, #2
 800a526:	4413      	add	r3, r2
 800a528:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	3b01      	subs	r3, #1
 800a52e:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d112      	bne.n	800a55c <HAL_I2C_Master_Seq_Receive_IT+0x98>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2200      	movs	r2, #0
 800a53a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2220      	movs	r2, #32
 800a540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2200      	movs	r2, #0
 800a548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a550:	f043 0220 	orr.w	r2, r3, #32
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	641a      	str	r2, [r3, #64]	@ 0x40

          return HAL_BUSY;
 800a558:	2302      	movs	r3, #2
 800a55a:	e0a2      	b.n	800a6a2 <HAL_I2C_Master_Seq_Receive_IT+0x1de>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	699b      	ldr	r3, [r3, #24]
 800a562:	f003 0302 	and.w	r3, r3, #2
 800a566:	2b02      	cmp	r3, #2
 800a568:	d0df      	beq.n	800a52a <HAL_I2C_Master_Seq_Receive_IT+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a570:	2b01      	cmp	r3, #1
 800a572:	d101      	bne.n	800a578 <HAL_I2C_Master_Seq_Receive_IT+0xb4>
 800a574:	2302      	movs	r3, #2
 800a576:	e094      	b.n	800a6a2 <HAL_I2C_Master_Seq_Receive_IT+0x1de>
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	2201      	movs	r2, #1
 800a57c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f003 0301 	and.w	r3, r3, #1
 800a58a:	2b01      	cmp	r3, #1
 800a58c:	d007      	beq.n	800a59e <HAL_I2C_Master_Seq_Receive_IT+0xda>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	681a      	ldr	r2, [r3, #0]
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f042 0201 	orr.w	r2, r2, #1
 800a59c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	681a      	ldr	r2, [r3, #0]
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a5ac:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2222      	movs	r2, #34	@ 0x22
 800a5b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2210      	movs	r2, #16
 800a5ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	687a      	ldr	r2, [r7, #4]
 800a5c8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	893a      	ldrh	r2, [r7, #8]
 800a5ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a5d4:	b29a      	uxth	r2, r3
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a5de:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800a5e0:	897a      	ldrh	r2, [r7, #10]
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	645a      	str	r2, [r3, #68]	@ 0x44

    Prev_State = hi2c->PreviousState;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5ea:	61bb      	str	r3, [r7, #24]

    if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a5f0:	b29b      	uxth	r3, r3
 800a5f2:	2b02      	cmp	r3, #2
 800a5f4:	d126      	bne.n	800a644 <HAL_I2C_Master_Seq_Receive_IT+0x180>
 800a5f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5f8:	2b20      	cmp	r3, #32
 800a5fa:	d002      	beq.n	800a602 <HAL_I2C_Master_Seq_Receive_IT+0x13e>
 800a5fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5fe:	2b10      	cmp	r3, #16
 800a600:	d120      	bne.n	800a644 <HAL_I2C_Master_Seq_Receive_IT+0x180>
    {
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800a602:	69bb      	ldr	r3, [r7, #24]
 800a604:	2b12      	cmp	r3, #18
 800a606:	d114      	bne.n	800a632 <HAL_I2C_Master_Seq_Receive_IT+0x16e>
      {
        /* Disable Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	681a      	ldr	r2, [r3, #0]
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a616:	601a      	str	r2, [r3, #0]

        /* Enable Pos */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	681a      	ldr	r2, [r3, #0]
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a626:	601a      	str	r2, [r3, #0]

        /* Remove Enabling of IT_BUF, mean RXNE treatment, treat the 2 bytes through BTF */
        enableIT &= ~I2C_IT_BUF;
 800a628:	69fb      	ldr	r3, [r7, #28]
 800a62a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a62e:	61fb      	str	r3, [r7, #28]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800a630:	e010      	b.n	800a654 <HAL_I2C_Master_Seq_Receive_IT+0x190>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	681a      	ldr	r2, [r3, #0]
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a640:	601a      	str	r2, [r3, #0]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800a642:	e007      	b.n	800a654 <HAL_I2C_Master_Seq_Receive_IT+0x190>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	681a      	ldr	r2, [r3, #0]
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a652:	601a      	str	r2, [r3, #0]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800a654:	69bb      	ldr	r3, [r7, #24]
 800a656:	2b12      	cmp	r3, #18
 800a658:	d10c      	bne.n	800a674 <HAL_I2C_Master_Seq_Receive_IT+0x1b0>
 800a65a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a65c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800a660:	d003      	beq.n	800a66a <HAL_I2C_Master_Seq_Receive_IT+0x1a6>
 800a662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a664:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800a668:	d101      	bne.n	800a66e <HAL_I2C_Master_Seq_Receive_IT+0x1aa>
 800a66a:	2301      	movs	r3, #1
 800a66c:	e000      	b.n	800a670 <HAL_I2C_Master_Seq_Receive_IT+0x1ac>
 800a66e:	2300      	movs	r3, #0
 800a670:	2b01      	cmp	r3, #1
 800a672:	d107      	bne.n	800a684 <HAL_I2C_Master_Seq_Receive_IT+0x1c0>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	681a      	ldr	r2, [r3, #0]
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a682:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2200      	movs	r2, #0
 800a688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable interrupts */
    __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	6859      	ldr	r1, [r3, #4]
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	69fa      	ldr	r2, [r7, #28]
 800a698:	430a      	orrs	r2, r1
 800a69a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800a69c:	2300      	movs	r3, #0
 800a69e:	e000      	b.n	800a6a2 <HAL_I2C_Master_Seq_Receive_IT+0x1de>
  }
  else
  {
    return HAL_BUSY;
 800a6a0:	2302      	movs	r3, #2
  }
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3724      	adds	r7, #36	@ 0x24
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ac:	4770      	bx	lr
 800a6ae:	bf00      	nop
 800a6b0:	20000030 	.word	0x20000030
 800a6b4:	14f8b589 	.word	0x14f8b589

0800a6b8 <HAL_I2C_Master_Seq_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b088      	sub	sp, #32
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	607a      	str	r2, [r7, #4]
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	460b      	mov	r3, r1
 800a6c6:	817b      	strh	r3, [r7, #10]
 800a6c8:	4613      	mov	r3, r2
 800a6ca:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	613b      	str	r3, [r7, #16]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a6d4:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800a6d8:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a6e0:	b2db      	uxtb	r3, r3
 800a6e2:	2b20      	cmp	r3, #32
 800a6e4:	f040 8195 	bne.w	800aa12 <HAL_I2C_Master_Seq_Receive_DMA+0x35a>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a6f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a6f6:	d005      	beq.n	800a704 <HAL_I2C_Master_Seq_Receive_DMA+0x4c>
 800a6f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6fa:	2b08      	cmp	r3, #8
 800a6fc:	d002      	beq.n	800a704 <HAL_I2C_Master_Seq_Receive_DMA+0x4c>
 800a6fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a700:	2b01      	cmp	r3, #1
 800a702:	d12c      	bne.n	800a75e <HAL_I2C_Master_Seq_Receive_DMA+0xa6>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800a704:	4b8d      	ldr	r3, [pc, #564]	@ (800a93c <HAL_I2C_Master_Seq_Receive_DMA+0x284>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	08db      	lsrs	r3, r3, #3
 800a70a:	4a8d      	ldr	r2, [pc, #564]	@ (800a940 <HAL_I2C_Master_Seq_Receive_DMA+0x288>)
 800a70c:	fba2 2303 	umull	r2, r3, r2, r3
 800a710:	0a1a      	lsrs	r2, r3, #8
 800a712:	4613      	mov	r3, r2
 800a714:	009b      	lsls	r3, r3, #2
 800a716:	4413      	add	r3, r2
 800a718:	009a      	lsls	r2, r3, #2
 800a71a:	4413      	add	r3, r2
 800a71c:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	3b01      	subs	r3, #1
 800a722:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d112      	bne.n	800a750 <HAL_I2C_Master_Seq_Receive_DMA+0x98>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	2200      	movs	r2, #0
 800a72e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	2220      	movs	r2, #32
 800a734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2200      	movs	r2, #0
 800a73c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a744:	f043 0220 	orr.w	r2, r3, #32
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	641a      	str	r2, [r3, #64]	@ 0x40

          return HAL_BUSY;
 800a74c:	2302      	movs	r3, #2
 800a74e:	e161      	b.n	800aa14 <HAL_I2C_Master_Seq_Receive_DMA+0x35c>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	699b      	ldr	r3, [r3, #24]
 800a756:	f003 0302 	and.w	r3, r3, #2
 800a75a:	2b02      	cmp	r3, #2
 800a75c:	d0df      	beq.n	800a71e <HAL_I2C_Master_Seq_Receive_DMA+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a764:	2b01      	cmp	r3, #1
 800a766:	d101      	bne.n	800a76c <HAL_I2C_Master_Seq_Receive_DMA+0xb4>
 800a768:	2302      	movs	r3, #2
 800a76a:	e153      	b.n	800aa14 <HAL_I2C_Master_Seq_Receive_DMA+0x35c>
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	2201      	movs	r2, #1
 800a770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f003 0301 	and.w	r3, r3, #1
 800a77e:	2b01      	cmp	r3, #1
 800a780:	d007      	beq.n	800a792 <HAL_I2C_Master_Seq_Receive_DMA+0xda>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	681a      	ldr	r2, [r3, #0]
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f042 0201 	orr.w	r2, r2, #1
 800a790:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	681a      	ldr	r2, [r3, #0]
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a7a0:	601a      	str	r2, [r3, #0]

    /* Clear Last DMA bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	685a      	ldr	r2, [r3, #4]
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a7b0:	605a      	str	r2, [r3, #4]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	2222      	movs	r2, #34	@ 0x22
 800a7b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	2210      	movs	r2, #16
 800a7be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	687a      	ldr	r2, [r7, #4]
 800a7cc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	893a      	ldrh	r2, [r7, #8]
 800a7d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a7d8:	b29a      	uxth	r2, r3
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a7e2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800a7e4:	897a      	ldrh	r2, [r7, #10]
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	645a      	str	r2, [r3, #68]	@ 0x44

    Prev_State = hi2c->PreviousState;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7ee:	617b      	str	r3, [r7, #20]

    if (hi2c->XferSize > 0U)
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	f000 80de 	beq.w	800a9b6 <HAL_I2C_Master_Seq_Receive_DMA+0x2fe>
    {
      if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a7fe:	b29b      	uxth	r3, r3
 800a800:	2b02      	cmp	r3, #2
 800a802:	d12a      	bne.n	800a85a <HAL_I2C_Master_Seq_Receive_DMA+0x1a2>
 800a804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a806:	2b20      	cmp	r3, #32
 800a808:	d002      	beq.n	800a810 <HAL_I2C_Master_Seq_Receive_DMA+0x158>
 800a80a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a80c:	2b10      	cmp	r3, #16
 800a80e:	d124      	bne.n	800a85a <HAL_I2C_Master_Seq_Receive_DMA+0x1a2>
      {
        if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800a810:	697b      	ldr	r3, [r7, #20]
 800a812:	2b12      	cmp	r3, #18
 800a814:	d118      	bne.n	800a848 <HAL_I2C_Master_Seq_Receive_DMA+0x190>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	681a      	ldr	r2, [r3, #0]
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a824:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	681a      	ldr	r2, [r3, #0]
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a834:	601a      	str	r2, [r3, #0]

          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	685a      	ldr	r2, [r3, #4]
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a844:	605a      	str	r2, [r3, #4]
        if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800a846:	e022      	b.n	800a88e <HAL_I2C_Master_Seq_Receive_DMA+0x1d6>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	681a      	ldr	r2, [r3, #0]
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a856:	601a      	str	r2, [r3, #0]
        if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800a858:	e019      	b.n	800a88e <HAL_I2C_Master_Seq_Receive_DMA+0x1d6>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	681a      	ldr	r2, [r3, #0]
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a868:	601a      	str	r2, [r3, #0]

        if ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_OTHER_AND_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 800a86a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a86c:	2b20      	cmp	r3, #32
 800a86e:	d006      	beq.n	800a87e <HAL_I2C_Master_Seq_Receive_DMA+0x1c6>
 800a870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a872:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800a876:	d002      	beq.n	800a87e <HAL_I2C_Master_Seq_Receive_DMA+0x1c6>
 800a878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a87a:	2b10      	cmp	r3, #16
 800a87c:	d107      	bne.n	800a88e <HAL_I2C_Master_Seq_Receive_DMA+0x1d6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	685a      	ldr	r2, [r3, #4]
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a88c:	605a      	str	r2, [r3, #4]
        }
      }
      if (hi2c->hdmarx != NULL)
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a892:	2b00      	cmp	r3, #0
 800a894:	d022      	beq.n	800a8dc <HAL_I2C_Master_Seq_Receive_DMA+0x224>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a89a:	4a2a      	ldr	r2, [pc, #168]	@ (800a944 <HAL_I2C_Master_Seq_Receive_DMA+0x28c>)
 800a89c:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8a2:	4a29      	ldr	r2, [pc, #164]	@ (800a948 <HAL_I2C_Master_Seq_Receive_DMA+0x290>)
 800a8a4:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	3310      	adds	r3, #16
 800a8c0:	4619      	mov	r1, r3
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8c6:	461a      	mov	r2, r3
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8cc:	f7fb fe0d 	bl	80064ea <HAL_DMA_Start_IT>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	76fb      	strb	r3, [r7, #27]
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }
      if (dmaxferstatus == HAL_OK)
 800a8d4:	7efb      	ldrb	r3, [r7, #27]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d159      	bne.n	800a98e <HAL_I2C_Master_Seq_Receive_DMA+0x2d6>
 800a8da:	e013      	b.n	800a904 <HAL_I2C_Master_Seq_Receive_DMA+0x24c>
        hi2c->State     = HAL_I2C_STATE_READY;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2220      	movs	r2, #32
 800a8e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8f0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800a900:	2301      	movs	r3, #1
 800a902:	e087      	b.n	800aa14 <HAL_I2C_Master_Seq_Receive_DMA+0x35c>
      {
        /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
        /* Mean Previous state is same as current state */
        if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	2b12      	cmp	r3, #18
 800a908:	d10c      	bne.n	800a924 <HAL_I2C_Master_Seq_Receive_DMA+0x26c>
 800a90a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a90c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800a910:	d003      	beq.n	800a91a <HAL_I2C_Master_Seq_Receive_DMA+0x262>
 800a912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a914:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800a918:	d101      	bne.n	800a91e <HAL_I2C_Master_Seq_Receive_DMA+0x266>
 800a91a:	2301      	movs	r3, #1
 800a91c:	e000      	b.n	800a920 <HAL_I2C_Master_Seq_Receive_DMA+0x268>
 800a91e:	2300      	movs	r3, #0
 800a920:	2b01      	cmp	r3, #1
 800a922:	d113      	bne.n	800a94c <HAL_I2C_Master_Seq_Receive_DMA+0x294>
        {
          /* Generate Start */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	681a      	ldr	r2, [r3, #0]
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a932:	601a      	str	r2, [r3, #0]

          /* Update interrupt for only EVT and ERR */
          enableIT = (I2C_IT_EVT | I2C_IT_ERR);
 800a934:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800a938:	61fb      	str	r3, [r7, #28]
 800a93a:	e00a      	b.n	800a952 <HAL_I2C_Master_Seq_Receive_DMA+0x29a>
 800a93c:	20000030 	.word	0x20000030
 800a940:	14f8b589 	.word	0x14f8b589
 800a944:	0800d005 	.word	0x0800d005
 800a948:	0800d1c3 	.word	0x0800d1c3
        }
        else
        {
          /* Update interrupt for only ERR */
          enableIT = I2C_IT_ERR;
 800a94c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a950:	61fb      	str	r3, [r7, #28]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	2200      	movs	r2, #0
 800a956:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* If XferOptions is not associated to a new frame, mean no start bit is request, enable directly the DMA request */
        /* In other cases, DMA request is enabled after Slave address treatment in IRQHandler */
        if ((XferOptions == I2C_NEXT_FRAME) || (XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 800a95a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a95c:	2b04      	cmp	r3, #4
 800a95e:	d005      	beq.n	800a96c <HAL_I2C_Master_Seq_Receive_DMA+0x2b4>
 800a960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a962:	2b20      	cmp	r3, #32
 800a964:	d002      	beq.n	800a96c <HAL_I2C_Master_Seq_Receive_DMA+0x2b4>
 800a966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a968:	2b10      	cmp	r3, #16
 800a96a:	d107      	bne.n	800a97c <HAL_I2C_Master_Seq_Receive_DMA+0x2c4>
        {
          /* Enable DMA Request */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	685a      	ldr	r2, [r3, #4]
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a97a:	605a      	str	r2, [r3, #4]
        }

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	6859      	ldr	r1, [r3, #4]
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	69fa      	ldr	r2, [r7, #28]
 800a988:	430a      	orrs	r2, r1
 800a98a:	605a      	str	r2, [r3, #4]
 800a98c:	e03f      	b.n	800aa0e <HAL_I2C_Master_Seq_Receive_DMA+0x356>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	2220      	movs	r2, #32
 800a992:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	2200      	movs	r2, #0
 800a99a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9a2:	f043 0210 	orr.w	r2, r3, #16
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	e02e      	b.n	800aa14 <HAL_I2C_Master_Seq_Receive_DMA+0x35c>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	681a      	ldr	r2, [r3, #0]
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a9c4:	601a      	str	r2, [r3, #0]

      /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
      /* Mean Previous state is same as current state */
      if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	2b12      	cmp	r3, #18
 800a9ca:	d10c      	bne.n	800a9e6 <HAL_I2C_Master_Seq_Receive_DMA+0x32e>
 800a9cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9ce:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800a9d2:	d003      	beq.n	800a9dc <HAL_I2C_Master_Seq_Receive_DMA+0x324>
 800a9d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9d6:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800a9da:	d101      	bne.n	800a9e0 <HAL_I2C_Master_Seq_Receive_DMA+0x328>
 800a9dc:	2301      	movs	r3, #1
 800a9de:	e000      	b.n	800a9e2 <HAL_I2C_Master_Seq_Receive_DMA+0x32a>
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	2b01      	cmp	r3, #1
 800a9e4:	d107      	bne.n	800a9f6 <HAL_I2C_Master_Seq_Receive_DMA+0x33e>
      {
        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	681a      	ldr	r2, [r3, #0]
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a9f4:	601a      	str	r2, [r3, #0]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable interrupts */
      __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	6859      	ldr	r1, [r3, #4]
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	69fa      	ldr	r2, [r7, #28]
 800aa0a:	430a      	orrs	r2, r1
 800aa0c:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	e000      	b.n	800aa14 <HAL_I2C_Master_Seq_Receive_DMA+0x35c>
  }
  else
  {
    return HAL_BUSY;
 800aa12:	2302      	movs	r3, #2
  }
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3720      	adds	r7, #32
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}

0800aa1c <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b087      	sub	sp, #28
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	60f8      	str	r0, [r7, #12]
 800aa24:	60b9      	str	r1, [r7, #8]
 800aa26:	603b      	str	r3, [r7, #0]
 800aa28:	4613      	mov	r3, r2
 800aa2a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aa32:	b2db      	uxtb	r3, r3
 800aa34:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800aa38:	2b28      	cmp	r3, #40	@ 0x28
 800aa3a:	d15b      	bne.n	800aaf4 <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d002      	beq.n	800aa48 <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 800aa42:	88fb      	ldrh	r3, [r7, #6]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d101      	bne.n	800aa4c <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 800aa48:	2301      	movs	r3, #1
 800aa4a:	e054      	b.n	800aaf6 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aa52:	2b01      	cmp	r3, #1
 800aa54:	d101      	bne.n	800aa5a <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 800aa56:	2302      	movs	r3, #2
 800aa58:	e04d      	b.n	800aaf6 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	2201      	movs	r2, #1
 800aa5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f003 0301 	and.w	r3, r3, #1
 800aa6c:	2b01      	cmp	r3, #1
 800aa6e:	d007      	beq.n	800aa80 <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	681a      	ldr	r2, [r3, #0]
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f042 0201 	orr.w	r2, r2, #1
 800aa7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	681a      	ldr	r2, [r3, #0]
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800aa8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	2229      	movs	r2, #41	@ 0x29
 800aa94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	2220      	movs	r2, #32
 800aa9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	68ba      	ldr	r2, [r7, #8]
 800aaaa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	88fa      	ldrh	r2, [r7, #6]
 800aab0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aab6:	b29a      	uxth	r2, r3
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	683a      	ldr	r2, [r7, #0]
 800aac0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aac2:	2300      	movs	r3, #0
 800aac4:	617b      	str	r3, [r7, #20]
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	695b      	ldr	r3, [r3, #20]
 800aacc:	617b      	str	r3, [r7, #20]
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	699b      	ldr	r3, [r3, #24]
 800aad4:	617b      	str	r3, [r7, #20]
 800aad6:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2200      	movs	r2, #0
 800aadc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	685a      	ldr	r2, [r3, #4]
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 800aaee:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	e000      	b.n	800aaf6 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 800aaf4:	2302      	movs	r3, #2
  }
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	371c      	adds	r7, #28
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr

0800ab02 <HAL_I2C_Slave_Seq_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800ab02:	b580      	push	{r7, lr}
 800ab04:	b086      	sub	sp, #24
 800ab06:	af00      	add	r7, sp, #0
 800ab08:	60f8      	str	r0, [r7, #12]
 800ab0a:	60b9      	str	r1, [r7, #8]
 800ab0c:	603b      	str	r3, [r7, #0]
 800ab0e:	4613      	mov	r3, r2
 800ab10:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ab18:	b2db      	uxtb	r3, r3
 800ab1a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800ab1e:	2b28      	cmp	r3, #40	@ 0x28
 800ab20:	f040 811e 	bne.w	800ad60 <HAL_I2C_Slave_Seq_Transmit_DMA+0x25e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d002      	beq.n	800ab30 <HAL_I2C_Slave_Seq_Transmit_DMA+0x2e>
 800ab2a:	88fb      	ldrh	r3, [r7, #6]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d101      	bne.n	800ab34 <HAL_I2C_Slave_Seq_Transmit_DMA+0x32>
    {
      return  HAL_ERROR;
 800ab30:	2301      	movs	r3, #1
 800ab32:	e116      	b.n	800ad62 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ab3a:	2b01      	cmp	r3, #1
 800ab3c:	d101      	bne.n	800ab42 <HAL_I2C_Slave_Seq_Transmit_DMA+0x40>
 800ab3e:	2302      	movs	r3, #2
 800ab40:	e10f      	b.n	800ad62 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	2201      	movs	r2, #1
 800ab46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	685a      	ldr	r2, [r3, #4]
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800ab58:	605a      	str	r2, [r3, #4]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ab60:	b2db      	uxtb	r3, r3
 800ab62:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab64:	d127      	bne.n	800abb6 <HAL_I2C_Slave_Seq_Transmit_DMA+0xb4>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	685b      	ldr	r3, [r3, #4]
 800ab6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ab70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ab74:	d14c      	bne.n	800ac10 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d048      	beq.n	800ac10 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
        {
          CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	685a      	ldr	r2, [r3, #4]
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ab8c:	605a      	str	r2, [r3, #4]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab92:	4a76      	ldr	r2, [pc, #472]	@ (800ad6c <HAL_I2C_Slave_Seq_Transmit_DMA+0x26a>)
 800ab94:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f7fb fd6d 	bl	800667a <HAL_DMA_Abort_IT>
 800aba0:	4603      	mov	r3, r0
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d034      	beq.n	800ac10 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800abac:	68fa      	ldr	r2, [r7, #12]
 800abae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800abb0:	4610      	mov	r0, r2
 800abb2:	4798      	blx	r3
 800abb4:	e02c      	b.n	800ac10 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800abbc:	b2db      	uxtb	r3, r3
 800abbe:	2b29      	cmp	r3, #41	@ 0x29
 800abc0:	d126      	bne.n	800ac10 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	685b      	ldr	r3, [r3, #4]
 800abc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800abcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800abd0:	d11e      	bne.n	800ac10 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
      {
        CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	685a      	ldr	r2, [r3, #4]
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800abe0:	605a      	str	r2, [r3, #4]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d012      	beq.n	800ac10 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abee:	4a5f      	ldr	r2, [pc, #380]	@ (800ad6c <HAL_I2C_Slave_Seq_Transmit_DMA+0x26a>)
 800abf0:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abf6:	4618      	mov	r0, r3
 800abf8:	f7fb fd3f 	bl	800667a <HAL_DMA_Abort_IT>
 800abfc:	4603      	mov	r3, r0
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d006      	beq.n	800ac10 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac08:	68fa      	ldr	r2, [r7, #12]
 800ac0a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800ac0c:	4610      	mov	r0, r2
 800ac0e:	4798      	blx	r3
    {
      /* Nothing to do */
    }

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f003 0301 	and.w	r3, r3, #1
 800ac1a:	2b01      	cmp	r3, #1
 800ac1c:	d007      	beq.n	800ac2e <HAL_I2C_Slave_Seq_Transmit_DMA+0x12c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	681a      	ldr	r2, [r3, #0]
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f042 0201 	orr.w	r2, r2, #1
 800ac2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	681a      	ldr	r2, [r3, #0]
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ac3c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	2229      	movs	r2, #41	@ 0x29
 800ac42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	2220      	movs	r2, #32
 800ac4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	2200      	movs	r2, #0
 800ac52:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	68ba      	ldr	r2, [r7, #8]
 800ac58:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	88fa      	ldrh	r2, [r7, #6]
 800ac5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac64:	b29a      	uxth	r2, r3
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	683a      	ldr	r2, [r7, #0]
 800ac6e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hi2c->hdmatx != NULL)
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d022      	beq.n	800acbe <HAL_I2C_Slave_Seq_Transmit_DMA+0x1bc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac7c:	4a3c      	ldr	r2, [pc, #240]	@ (800ad70 <HAL_I2C_Slave_Seq_Transmit_DMA+0x26e>)
 800ac7e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac84:	4a3b      	ldr	r2, [pc, #236]	@ (800ad74 <HAL_I2C_Slave_Seq_Transmit_DMA+0x272>)
 800ac86:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	641a      	str	r2, [r3, #64]	@ 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac94:	2200      	movs	r2, #0
 800ac96:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aca0:	4619      	mov	r1, r3
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	3310      	adds	r3, #16
 800aca8:	461a      	mov	r2, r3
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800acae:	f7fb fc1c 	bl	80064ea <HAL_DMA_Start_IT>
 800acb2:	4603      	mov	r3, r0
 800acb4:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800acb6:	7dfb      	ldrb	r3, [r7, #23]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d13d      	bne.n	800ad38 <HAL_I2C_Slave_Seq_Transmit_DMA+0x236>
 800acbc:	e013      	b.n	800ace6 <HAL_I2C_Slave_Seq_Transmit_DMA+0x1e4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	2228      	movs	r2, #40	@ 0x28
 800acc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	2200      	movs	r2, #0
 800acca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acd2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	641a      	str	r2, [r3, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	2200      	movs	r2, #0
 800acde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      return HAL_ERROR;
 800ace2:	2301      	movs	r3, #1
 800ace4:	e03d      	b.n	800ad62 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	681a      	ldr	r2, [r3, #0]
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800acf4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800acf6:	2300      	movs	r3, #0
 800acf8:	613b      	str	r3, [r7, #16]
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	695b      	ldr	r3, [r3, #20]
 800ad00:	613b      	str	r3, [r7, #16]
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	699b      	ldr	r3, [r3, #24]
 800ad08:	613b      	str	r3, [r7, #16]
 800ad0a:	693b      	ldr	r3, [r7, #16]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	685a      	ldr	r2, [r3, #4]
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800ad22:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	685a      	ldr	r2, [r3, #4]
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ad32:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 800ad34:	2300      	movs	r3, #0
 800ad36:	e014      	b.n	800ad62 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2220      	movs	r2, #32
 800ad3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	2200      	movs	r2, #0
 800ad44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad4c:	f043 0210 	orr.w	r2, r3, #16
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	2200      	movs	r2, #0
 800ad58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	e000      	b.n	800ad62 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }
  }
  else
  {
    return HAL_BUSY;
 800ad60:	2302      	movs	r3, #2
  }
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3718      	adds	r7, #24
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}
 800ad6a:	bf00      	nop
 800ad6c:	0800d23d 	.word	0x0800d23d
 800ad70:	0800d005 	.word	0x0800d005
 800ad74:	0800d1c3 	.word	0x0800d1c3

0800ad78 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800ad78:	b480      	push	{r7}
 800ad7a:	b087      	sub	sp, #28
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	60f8      	str	r0, [r7, #12]
 800ad80:	60b9      	str	r1, [r7, #8]
 800ad82:	603b      	str	r3, [r7, #0]
 800ad84:	4613      	mov	r3, r2
 800ad86:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ad8e:	b2db      	uxtb	r3, r3
 800ad90:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800ad94:	2b28      	cmp	r3, #40	@ 0x28
 800ad96:	d15b      	bne.n	800ae50 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d002      	beq.n	800ada4 <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 800ad9e:	88fb      	ldrh	r3, [r7, #6]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d101      	bne.n	800ada8 <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 800ada4:	2301      	movs	r3, #1
 800ada6:	e054      	b.n	800ae52 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800adae:	2b01      	cmp	r3, #1
 800adb0:	d101      	bne.n	800adb6 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 800adb2:	2302      	movs	r3, #2
 800adb4:	e04d      	b.n	800ae52 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2201      	movs	r2, #1
 800adba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f003 0301 	and.w	r3, r3, #1
 800adc8:	2b01      	cmp	r3, #1
 800adca:	d007      	beq.n	800addc <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	681a      	ldr	r2, [r3, #0]
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f042 0201 	orr.w	r2, r2, #1
 800adda:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	681a      	ldr	r2, [r3, #0]
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800adea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	222a      	movs	r2, #42	@ 0x2a
 800adf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	2220      	movs	r2, #32
 800adf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	2200      	movs	r2, #0
 800ae00:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	68ba      	ldr	r2, [r7, #8]
 800ae06:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	88fa      	ldrh	r2, [r7, #6]
 800ae0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ae12:	b29a      	uxth	r2, r3
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	683a      	ldr	r2, [r7, #0]
 800ae1c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ae1e:	2300      	movs	r3, #0
 800ae20:	617b      	str	r3, [r7, #20]
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	695b      	ldr	r3, [r3, #20]
 800ae28:	617b      	str	r3, [r7, #20]
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	699b      	ldr	r3, [r3, #24]
 800ae30:	617b      	str	r3, [r7, #20]
 800ae32:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	2200      	movs	r2, #0
 800ae38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	685a      	ldr	r2, [r3, #4]
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 800ae4a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	e000      	b.n	800ae52 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 800ae50:	2302      	movs	r3, #2
  }
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	371c      	adds	r7, #28
 800ae56:	46bd      	mov	sp, r7
 800ae58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5c:	4770      	bx	lr

0800ae5e <HAL_I2C_Slave_Seq_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800ae5e:	b580      	push	{r7, lr}
 800ae60:	b086      	sub	sp, #24
 800ae62:	af00      	add	r7, sp, #0
 800ae64:	60f8      	str	r0, [r7, #12]
 800ae66:	60b9      	str	r1, [r7, #8]
 800ae68:	603b      	str	r3, [r7, #0]
 800ae6a:	4613      	mov	r3, r2
 800ae6c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ae74:	b2db      	uxtb	r3, r3
 800ae76:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800ae7a:	2b28      	cmp	r3, #40	@ 0x28
 800ae7c:	f040 811e 	bne.w	800b0bc <HAL_I2C_Slave_Seq_Receive_DMA+0x25e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d002      	beq.n	800ae8c <HAL_I2C_Slave_Seq_Receive_DMA+0x2e>
 800ae86:	88fb      	ldrh	r3, [r7, #6]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d101      	bne.n	800ae90 <HAL_I2C_Slave_Seq_Receive_DMA+0x32>
    {
      return  HAL_ERROR;
 800ae8c:	2301      	movs	r3, #1
 800ae8e:	e116      	b.n	800b0be <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ae96:	2b01      	cmp	r3, #1
 800ae98:	d101      	bne.n	800ae9e <HAL_I2C_Slave_Seq_Receive_DMA+0x40>
 800ae9a:	2302      	movs	r3, #2
 800ae9c:	e10f      	b.n	800b0be <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	2201      	movs	r2, #1
 800aea2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	685a      	ldr	r2, [r3, #4]
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800aeb4:	605a      	str	r2, [r3, #4]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aebc:	b2db      	uxtb	r3, r3
 800aebe:	2b2a      	cmp	r3, #42	@ 0x2a
 800aec0:	d127      	bne.n	800af12 <HAL_I2C_Slave_Seq_Receive_DMA+0xb4>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	685b      	ldr	r3, [r3, #4]
 800aec8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aecc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aed0:	d14c      	bne.n	800af6c <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d048      	beq.n	800af6c <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
        {
          CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	685a      	ldr	r2, [r3, #4]
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800aee8:	605a      	str	r2, [r3, #4]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aeee:	4a76      	ldr	r2, [pc, #472]	@ (800b0c8 <HAL_I2C_Slave_Seq_Receive_DMA+0x26a>)
 800aef0:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aef6:	4618      	mov	r0, r3
 800aef8:	f7fb fbbf 	bl	800667a <HAL_DMA_Abort_IT>
 800aefc:	4603      	mov	r3, r0
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d034      	beq.n	800af6c <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af08:	68fa      	ldr	r2, [r7, #12]
 800af0a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800af0c:	4610      	mov	r0, r2
 800af0e:	4798      	blx	r3
 800af10:	e02c      	b.n	800af6c <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800af18:	b2db      	uxtb	r3, r3
 800af1a:	2b29      	cmp	r3, #41	@ 0x29
 800af1c:	d126      	bne.n	800af6c <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	685b      	ldr	r3, [r3, #4]
 800af24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800af28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800af2c:	d11e      	bne.n	800af6c <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
      {
        CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	685a      	ldr	r2, [r3, #4]
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800af3c:	605a      	str	r2, [r3, #4]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af42:	2b00      	cmp	r3, #0
 800af44:	d012      	beq.n	800af6c <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af4a:	4a5f      	ldr	r2, [pc, #380]	@ (800b0c8 <HAL_I2C_Slave_Seq_Receive_DMA+0x26a>)
 800af4c:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af52:	4618      	mov	r0, r3
 800af54:	f7fb fb91 	bl	800667a <HAL_DMA_Abort_IT>
 800af58:	4603      	mov	r3, r0
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d006      	beq.n	800af6c <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af64:	68fa      	ldr	r2, [r7, #12]
 800af66:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800af68:	4610      	mov	r0, r2
 800af6a:	4798      	blx	r3
    {
      /* Nothing to do */
    }

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f003 0301 	and.w	r3, r3, #1
 800af76:	2b01      	cmp	r3, #1
 800af78:	d007      	beq.n	800af8a <HAL_I2C_Slave_Seq_Receive_DMA+0x12c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	681a      	ldr	r2, [r3, #0]
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f042 0201 	orr.w	r2, r2, #1
 800af88:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	681a      	ldr	r2, [r3, #0]
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800af98:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	222a      	movs	r2, #42	@ 0x2a
 800af9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	2220      	movs	r2, #32
 800afa6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	2200      	movs	r2, #0
 800afae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	68ba      	ldr	r2, [r7, #8]
 800afb4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	88fa      	ldrh	r2, [r7, #6]
 800afba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800afc0:	b29a      	uxth	r2, r3
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	683a      	ldr	r2, [r7, #0]
 800afca:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hi2c->hdmarx != NULL)
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d022      	beq.n	800b01a <HAL_I2C_Slave_Seq_Receive_DMA+0x1bc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afd8:	4a3c      	ldr	r2, [pc, #240]	@ (800b0cc <HAL_I2C_Slave_Seq_Receive_DMA+0x26e>)
 800afda:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afe0:	4a3b      	ldr	r2, [pc, #236]	@ (800b0d0 <HAL_I2C_Slave_Seq_Receive_DMA+0x272>)
 800afe2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afe8:	2200      	movs	r2, #0
 800afea:	641a      	str	r2, [r3, #64]	@ 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aff0:	2200      	movs	r2, #0
 800aff2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	3310      	adds	r3, #16
 800affe:	4619      	mov	r1, r3
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b004:	461a      	mov	r2, r3
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b00a:	f7fb fa6e 	bl	80064ea <HAL_DMA_Start_IT>
 800b00e:	4603      	mov	r3, r0
 800b010:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800b012:	7dfb      	ldrb	r3, [r7, #23]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d13d      	bne.n	800b094 <HAL_I2C_Slave_Seq_Receive_DMA+0x236>
 800b018:	e013      	b.n	800b042 <HAL_I2C_Slave_Seq_Receive_DMA+0x1e4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	2228      	movs	r2, #40	@ 0x28
 800b01e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	2200      	movs	r2, #0
 800b026:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b02e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	641a      	str	r2, [r3, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	2200      	movs	r2, #0
 800b03a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      return HAL_ERROR;
 800b03e:	2301      	movs	r3, #1
 800b040:	e03d      	b.n	800b0be <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	681a      	ldr	r2, [r3, #0]
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b050:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b052:	2300      	movs	r3, #0
 800b054:	613b      	str	r3, [r7, #16]
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	695b      	ldr	r3, [r3, #20]
 800b05c:	613b      	str	r3, [r7, #16]
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	699b      	ldr	r3, [r3, #24]
 800b064:	613b      	str	r3, [r7, #16]
 800b066:	693b      	ldr	r3, [r7, #16]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	2200      	movs	r2, #0
 800b06c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	685a      	ldr	r2, [r3, #4]
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b07e:	605a      	str	r2, [r3, #4]

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	685a      	ldr	r2, [r3, #4]
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800b08e:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 800b090:	2300      	movs	r3, #0
 800b092:	e014      	b.n	800b0be <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	2220      	movs	r2, #32
 800b098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	2200      	movs	r2, #0
 800b0a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0a8:	f043 0210 	orr.w	r2, r3, #16
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	e000      	b.n	800b0be <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }
  }
  else
  {
    return HAL_BUSY;
 800b0bc:	2302      	movs	r3, #2
  }
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3718      	adds	r7, #24
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}
 800b0c6:	bf00      	nop
 800b0c8:	0800d23d 	.word	0x0800d23d
 800b0cc:	0800d005 	.word	0x0800d005
 800b0d0:	0800d1c3 	.word	0x0800d1c3

0800b0d4 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b083      	sub	sp, #12
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b0e2:	b2db      	uxtb	r3, r3
 800b0e4:	2b20      	cmp	r3, #32
 800b0e6:	d124      	bne.n	800b132 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2228      	movs	r2, #40	@ 0x28
 800b0ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f003 0301 	and.w	r3, r3, #1
 800b0fa:	2b01      	cmp	r3, #1
 800b0fc:	d007      	beq.n	800b10e <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	681a      	ldr	r2, [r3, #0]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f042 0201 	orr.w	r2, r2, #1
 800b10c:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	681a      	ldr	r2, [r3, #0]
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b11c:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	685a      	ldr	r2, [r3, #4]
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800b12c:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800b12e:	2300      	movs	r3, #0
 800b130:	e000      	b.n	800b134 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800b132:	2302      	movs	r3, #2
  }
}
 800b134:	4618      	mov	r0, r3
 800b136:	370c      	adds	r7, #12
 800b138:	46bd      	mov	sp, r7
 800b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13e:	4770      	bx	lr

0800b140 <HAL_I2C_DisableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DisableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800b140:	b480      	push	{r7}
 800b142:	b085      	sub	sp, #20
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp;

  /* Disable Address listen mode only if a transfer is not ongoing */
  if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b14e:	b2db      	uxtb	r3, r3
 800b150:	2b28      	cmp	r3, #40	@ 0x28
 800b152:	d129      	bne.n	800b1a8 <HAL_I2C_DisableListen_IT+0x68>
  {
    tmp = (uint32_t)(hi2c->State) & I2C_STATE_MSK;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b15a:	b2db      	uxtb	r3, r3
 800b15c:	f003 0303 	and.w	r3, r3, #3
 800b160:	60fb      	str	r3, [r7, #12]
    hi2c->PreviousState = tmp | (uint32_t)(hi2c->Mode);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b168:	b2db      	uxtb	r3, r3
 800b16a:	461a      	mov	r2, r3
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	431a      	orrs	r2, r3
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2220      	movs	r2, #32
 800b178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2200      	movs	r2, #0
 800b180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	681a      	ldr	r2, [r3, #0]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b192:	601a      	str	r2, [r3, #0]

    /* Disable EVT and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	685a      	ldr	r2, [r3, #4]
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800b1a2:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	e000      	b.n	800b1aa <HAL_I2C_DisableListen_IT+0x6a>
  }
  else
  {
    return HAL_BUSY;
 800b1a8:	2302      	movs	r3, #2
  }
}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	3714      	adds	r7, #20
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b4:	4770      	bx	lr

0800b1b6 <HAL_I2C_Master_Abort_IT>:
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Abort_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress)
{
 800b1b6:	b580      	push	{r7, lr}
 800b1b8:	b084      	sub	sp, #16
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	6078      	str	r0, [r7, #4]
 800b1be:	460b      	mov	r3, r1
 800b1c0:	807b      	strh	r3, [r7, #2]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b1c8:	73fb      	strb	r3, [r7, #15]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(DevAddress);

  /* Abort Master transfer during Receive or Transmit process    */
  if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && ((CurrentMode == HAL_I2C_MODE_MASTER) || 
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	699b      	ldr	r3, [r3, #24]
 800b1d0:	f003 0302 	and.w	r3, r3, #2
 800b1d4:	2b02      	cmp	r3, #2
 800b1d6:	d13b      	bne.n	800b250 <HAL_I2C_Master_Abort_IT+0x9a>
 800b1d8:	7bfb      	ldrb	r3, [r7, #15]
 800b1da:	2b10      	cmp	r3, #16
 800b1dc:	d002      	beq.n	800b1e4 <HAL_I2C_Master_Abort_IT+0x2e>
 800b1de:	7bfb      	ldrb	r3, [r7, #15]
 800b1e0:	2b40      	cmp	r3, #64	@ 0x40
 800b1e2:	d135      	bne.n	800b250 <HAL_I2C_Master_Abort_IT+0x9a>
                                                             (CurrentMode == HAL_I2C_MODE_MEM)))
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b1ea:	2b01      	cmp	r3, #1
 800b1ec:	d101      	bne.n	800b1f2 <HAL_I2C_Master_Abort_IT+0x3c>
 800b1ee:	2302      	movs	r3, #2
 800b1f0:	e02f      	b.n	800b252 <HAL_I2C_Master_Abort_IT+0x9c>
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2201      	movs	r2, #1
 800b1f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    hi2c->PreviousState = I2C_STATE_NONE;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_ABORT;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2260      	movs	r2, #96	@ 0x60
 800b204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	681a      	ldr	r2, [r3, #0]
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b216:	601a      	str	r2, [r3, #0]

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	681a      	ldr	r2, [r3, #0]
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b226:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2200      	movs	r2, #0
 800b22c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	685a      	ldr	r2, [r3, #4]
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b23c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2200      	movs	r2, #0
 800b242:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f001 fadc 	bl	800c804 <I2C_ITError>

    return HAL_OK;
 800b24c:	2300      	movs	r3, #0
 800b24e:	e000      	b.n	800b252 <HAL_I2C_Master_Abort_IT+0x9c>
  else
  {
    /* Wrong usage of abort function */
    /* This function should be used only in case of abort monitored by master device */
    /* Or periphal is not in busy state, mean there is no active sequence to be abort */
    return HAL_ERROR;
 800b250:	2301      	movs	r3, #1
  }
}
 800b252:	4618      	mov	r0, r3
 800b254:	3710      	adds	r7, #16
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}

0800b25a <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800b25a:	b580      	push	{r7, lr}
 800b25c:	b088      	sub	sp, #32
 800b25e:	af00      	add	r7, sp, #0
 800b260:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800b262:	2300      	movs	r3, #0
 800b264:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	685b      	ldr	r3, [r3, #4]
 800b26c:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b272:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b27a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b282:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800b284:	7bfb      	ldrb	r3, [r7, #15]
 800b286:	2b10      	cmp	r3, #16
 800b288:	d003      	beq.n	800b292 <HAL_I2C_EV_IRQHandler+0x38>
 800b28a:	7bfb      	ldrb	r3, [r7, #15]
 800b28c:	2b40      	cmp	r3, #64	@ 0x40
 800b28e:	f040 80b1 	bne.w	800b3f4 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	699b      	ldr	r3, [r3, #24]
 800b298:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	695b      	ldr	r3, [r3, #20]
 800b2a0:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800b2a2:	69fb      	ldr	r3, [r7, #28]
 800b2a4:	f003 0301 	and.w	r3, r3, #1
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d10d      	bne.n	800b2c8 <HAL_I2C_EV_IRQHandler+0x6e>
 800b2ac:	693b      	ldr	r3, [r7, #16]
 800b2ae:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800b2b2:	d003      	beq.n	800b2bc <HAL_I2C_EV_IRQHandler+0x62>
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800b2ba:	d101      	bne.n	800b2c0 <HAL_I2C_EV_IRQHandler+0x66>
 800b2bc:	2301      	movs	r3, #1
 800b2be:	e000      	b.n	800b2c2 <HAL_I2C_EV_IRQHandler+0x68>
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	2b01      	cmp	r3, #1
 800b2c4:	f000 8114 	beq.w	800b4f0 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b2c8:	69fb      	ldr	r3, [r7, #28]
 800b2ca:	f003 0301 	and.w	r3, r3, #1
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d00b      	beq.n	800b2ea <HAL_I2C_EV_IRQHandler+0x90>
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d006      	beq.n	800b2ea <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f002 fb01 	bl	800d8e4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f000 fda2 	bl	800be2c <I2C_Master_SB>
 800b2e8:	e083      	b.n	800b3f2 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b2ea:	69fb      	ldr	r3, [r7, #28]
 800b2ec:	f003 0308 	and.w	r3, r3, #8
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d008      	beq.n	800b306 <HAL_I2C_EV_IRQHandler+0xac>
 800b2f4:	697b      	ldr	r3, [r7, #20]
 800b2f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d003      	beq.n	800b306 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f000 fe1a 	bl	800bf38 <I2C_Master_ADD10>
 800b304:	e075      	b.n	800b3f2 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b306:	69fb      	ldr	r3, [r7, #28]
 800b308:	f003 0302 	and.w	r3, r3, #2
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d008      	beq.n	800b322 <HAL_I2C_EV_IRQHandler+0xc8>
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b316:	2b00      	cmp	r3, #0
 800b318:	d003      	beq.n	800b322 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f000 fe36 	bl	800bf8c <I2C_Master_ADDR>
 800b320:	e067      	b.n	800b3f2 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800b322:	69bb      	ldr	r3, [r7, #24]
 800b324:	f003 0304 	and.w	r3, r3, #4
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d036      	beq.n	800b39a <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	685b      	ldr	r3, [r3, #4]
 800b332:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b336:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b33a:	f000 80db 	beq.w	800b4f4 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800b33e:	69fb      	ldr	r3, [r7, #28]
 800b340:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b344:	2b00      	cmp	r3, #0
 800b346:	d00d      	beq.n	800b364 <HAL_I2C_EV_IRQHandler+0x10a>
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d008      	beq.n	800b364 <HAL_I2C_EV_IRQHandler+0x10a>
 800b352:	69fb      	ldr	r3, [r7, #28]
 800b354:	f003 0304 	and.w	r3, r3, #4
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d103      	bne.n	800b364 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f000 f9fe 	bl	800b75e <I2C_MasterTransmit_TXE>
 800b362:	e046      	b.n	800b3f2 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b364:	69fb      	ldr	r3, [r7, #28]
 800b366:	f003 0304 	and.w	r3, r3, #4
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	f000 80c2 	beq.w	800b4f4 <HAL_I2C_EV_IRQHandler+0x29a>
 800b370:	697b      	ldr	r3, [r7, #20]
 800b372:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b376:	2b00      	cmp	r3, #0
 800b378:	f000 80bc 	beq.w	800b4f4 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800b37c:	7bbb      	ldrb	r3, [r7, #14]
 800b37e:	2b21      	cmp	r3, #33	@ 0x21
 800b380:	d103      	bne.n	800b38a <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f000 fa87 	bl	800b896 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b388:	e0b4      	b.n	800b4f4 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800b38a:	7bfb      	ldrb	r3, [r7, #15]
 800b38c:	2b40      	cmp	r3, #64	@ 0x40
 800b38e:	f040 80b1 	bne.w	800b4f4 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f000 faf5 	bl	800b982 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b398:	e0ac      	b.n	800b4f4 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	685b      	ldr	r3, [r3, #4]
 800b3a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b3a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b3a8:	f000 80a4 	beq.w	800b4f4 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800b3ac:	69fb      	ldr	r3, [r7, #28]
 800b3ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d00d      	beq.n	800b3d2 <HAL_I2C_EV_IRQHandler+0x178>
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d008      	beq.n	800b3d2 <HAL_I2C_EV_IRQHandler+0x178>
 800b3c0:	69fb      	ldr	r3, [r7, #28]
 800b3c2:	f003 0304 	and.w	r3, r3, #4
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d103      	bne.n	800b3d2 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f000 fb71 	bl	800bab2 <I2C_MasterReceive_RXNE>
 800b3d0:	e00f      	b.n	800b3f2 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b3d2:	69fb      	ldr	r3, [r7, #28]
 800b3d4:	f003 0304 	and.w	r3, r3, #4
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	f000 808b 	beq.w	800b4f4 <HAL_I2C_EV_IRQHandler+0x29a>
 800b3de:	697b      	ldr	r3, [r7, #20]
 800b3e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	f000 8085 	beq.w	800b4f4 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f000 fc29 	bl	800bc42 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b3f0:	e080      	b.n	800b4f4 <HAL_I2C_EV_IRQHandler+0x29a>
 800b3f2:	e07f      	b.n	800b4f4 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d004      	beq.n	800b406 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	695b      	ldr	r3, [r3, #20]
 800b402:	61fb      	str	r3, [r7, #28]
 800b404:	e007      	b.n	800b416 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	699b      	ldr	r3, [r3, #24]
 800b40c:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	695b      	ldr	r3, [r3, #20]
 800b414:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b416:	69fb      	ldr	r3, [r7, #28]
 800b418:	f003 0302 	and.w	r3, r3, #2
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d011      	beq.n	800b444 <HAL_I2C_EV_IRQHandler+0x1ea>
 800b420:	697b      	ldr	r3, [r7, #20]
 800b422:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b426:	2b00      	cmp	r3, #0
 800b428:	d00c      	beq.n	800b444 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d003      	beq.n	800b43a <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	699b      	ldr	r3, [r3, #24]
 800b438:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800b43a:	69b9      	ldr	r1, [r7, #24]
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	f000 fff4 	bl	800c42a <I2C_Slave_ADDR>
 800b442:	e05a      	b.n	800b4fa <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b444:	69fb      	ldr	r3, [r7, #28]
 800b446:	f003 0310 	and.w	r3, r3, #16
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d008      	beq.n	800b460 <HAL_I2C_EV_IRQHandler+0x206>
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b454:	2b00      	cmp	r3, #0
 800b456:	d003      	beq.n	800b460 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f001 f82e 	bl	800c4ba <I2C_Slave_STOPF>
 800b45e:	e04c      	b.n	800b4fa <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b460:	7bbb      	ldrb	r3, [r7, #14]
 800b462:	2b21      	cmp	r3, #33	@ 0x21
 800b464:	d002      	beq.n	800b46c <HAL_I2C_EV_IRQHandler+0x212>
 800b466:	7bbb      	ldrb	r3, [r7, #14]
 800b468:	2b29      	cmp	r3, #41	@ 0x29
 800b46a:	d120      	bne.n	800b4ae <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800b46c:	69fb      	ldr	r3, [r7, #28]
 800b46e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b472:	2b00      	cmp	r3, #0
 800b474:	d00d      	beq.n	800b492 <HAL_I2C_EV_IRQHandler+0x238>
 800b476:	697b      	ldr	r3, [r7, #20]
 800b478:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d008      	beq.n	800b492 <HAL_I2C_EV_IRQHandler+0x238>
 800b480:	69fb      	ldr	r3, [r7, #28]
 800b482:	f003 0304 	and.w	r3, r3, #4
 800b486:	2b00      	cmp	r3, #0
 800b488:	d103      	bne.n	800b492 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f000 ff0f 	bl	800c2ae <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800b490:	e032      	b.n	800b4f8 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b492:	69fb      	ldr	r3, [r7, #28]
 800b494:	f003 0304 	and.w	r3, r3, #4
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d02d      	beq.n	800b4f8 <HAL_I2C_EV_IRQHandler+0x29e>
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d028      	beq.n	800b4f8 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f000 ff3e 	bl	800c328 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800b4ac:	e024      	b.n	800b4f8 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800b4ae:	69fb      	ldr	r3, [r7, #28]
 800b4b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d00d      	beq.n	800b4d4 <HAL_I2C_EV_IRQHandler+0x27a>
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d008      	beq.n	800b4d4 <HAL_I2C_EV_IRQHandler+0x27a>
 800b4c2:	69fb      	ldr	r3, [r7, #28]
 800b4c4:	f003 0304 	and.w	r3, r3, #4
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d103      	bne.n	800b4d4 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f000 ff4c 	bl	800c36a <I2C_SlaveReceive_RXNE>
 800b4d2:	e012      	b.n	800b4fa <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b4d4:	69fb      	ldr	r3, [r7, #28]
 800b4d6:	f003 0304 	and.w	r3, r3, #4
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d00d      	beq.n	800b4fa <HAL_I2C_EV_IRQHandler+0x2a0>
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d008      	beq.n	800b4fa <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f000 ff7c 	bl	800c3e6 <I2C_SlaveReceive_BTF>
 800b4ee:	e004      	b.n	800b4fa <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800b4f0:	bf00      	nop
 800b4f2:	e002      	b.n	800b4fa <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b4f4:	bf00      	nop
 800b4f6:	e000      	b.n	800b4fa <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800b4f8:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800b4fa:	3720      	adds	r7, #32
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}

0800b500 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b08a      	sub	sp, #40	@ 0x28
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	695b      	ldr	r3, [r3, #20]
 800b50e:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	685b      	ldr	r3, [r3, #4]
 800b516:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800b518:	2300      	movs	r3, #0
 800b51a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b522:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800b524:	6a3b      	ldr	r3, [r7, #32]
 800b526:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d00d      	beq.n	800b54a <HAL_I2C_ER_IRQHandler+0x4a>
 800b52e:	69fb      	ldr	r3, [r7, #28]
 800b530:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b534:	2b00      	cmp	r3, #0
 800b536:	d008      	beq.n	800b54a <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800b538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b53a:	f043 0301 	orr.w	r3, r3, #1
 800b53e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b548:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800b54a:	6a3b      	ldr	r3, [r7, #32]
 800b54c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b550:	2b00      	cmp	r3, #0
 800b552:	d00d      	beq.n	800b570 <HAL_I2C_ER_IRQHandler+0x70>
 800b554:	69fb      	ldr	r3, [r7, #28]
 800b556:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d008      	beq.n	800b570 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800b55e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b560:	f043 0302 	orr.w	r3, r3, #2
 800b564:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 800b56e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800b570:	6a3b      	ldr	r3, [r7, #32]
 800b572:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b576:	2b00      	cmp	r3, #0
 800b578:	d03e      	beq.n	800b5f8 <HAL_I2C_ER_IRQHandler+0xf8>
 800b57a:	69fb      	ldr	r3, [r7, #28]
 800b57c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b580:	2b00      	cmp	r3, #0
 800b582:	d039      	beq.n	800b5f8 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800b584:	7efb      	ldrb	r3, [r7, #27]
 800b586:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b58c:	b29b      	uxth	r3, r3
 800b58e:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b596:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b59c:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800b59e:	7ebb      	ldrb	r3, [r7, #26]
 800b5a0:	2b20      	cmp	r3, #32
 800b5a2:	d112      	bne.n	800b5ca <HAL_I2C_ER_IRQHandler+0xca>
 800b5a4:	697b      	ldr	r3, [r7, #20]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d10f      	bne.n	800b5ca <HAL_I2C_ER_IRQHandler+0xca>
 800b5aa:	7cfb      	ldrb	r3, [r7, #19]
 800b5ac:	2b21      	cmp	r3, #33	@ 0x21
 800b5ae:	d008      	beq.n	800b5c2 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800b5b0:	7cfb      	ldrb	r3, [r7, #19]
 800b5b2:	2b29      	cmp	r3, #41	@ 0x29
 800b5b4:	d005      	beq.n	800b5c2 <HAL_I2C_ER_IRQHandler+0xc2>
 800b5b6:	7cfb      	ldrb	r3, [r7, #19]
 800b5b8:	2b28      	cmp	r3, #40	@ 0x28
 800b5ba:	d106      	bne.n	800b5ca <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	2b21      	cmp	r3, #33	@ 0x21
 800b5c0:	d103      	bne.n	800b5ca <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f001 f8aa 	bl	800c71c <I2C_Slave_AF>
 800b5c8:	e016      	b.n	800b5f8 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b5d2:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800b5d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5d6:	f043 0304 	orr.w	r3, r3, #4
 800b5da:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800b5dc:	7efb      	ldrb	r3, [r7, #27]
 800b5de:	2b10      	cmp	r3, #16
 800b5e0:	d002      	beq.n	800b5e8 <HAL_I2C_ER_IRQHandler+0xe8>
 800b5e2:	7efb      	ldrb	r3, [r7, #27]
 800b5e4:	2b40      	cmp	r3, #64	@ 0x40
 800b5e6:	d107      	bne.n	800b5f8 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	681a      	ldr	r2, [r3, #0]
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b5f6:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800b5f8:	6a3b      	ldr	r3, [r7, #32]
 800b5fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d00d      	beq.n	800b61e <HAL_I2C_ER_IRQHandler+0x11e>
 800b602:	69fb      	ldr	r3, [r7, #28]
 800b604:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d008      	beq.n	800b61e <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800b60c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b60e:	f043 0308 	orr.w	r3, r3, #8
 800b612:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800b61c:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800b61e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b620:	2b00      	cmp	r3, #0
 800b622:	d008      	beq.n	800b636 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b62a:	431a      	orrs	r2, r3
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f001 f8e7 	bl	800c804 <I2C_ITError>
  }
}
 800b636:	bf00      	nop
 800b638:	3728      	adds	r7, #40	@ 0x28
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}

0800b63e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b63e:	b480      	push	{r7}
 800b640:	b083      	sub	sp, #12
 800b642:	af00      	add	r7, sp, #0
 800b644:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800b646:	bf00      	nop
 800b648:	370c      	adds	r7, #12
 800b64a:	46bd      	mov	sp, r7
 800b64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b650:	4770      	bx	lr

0800b652 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b652:	b480      	push	{r7}
 800b654:	b083      	sub	sp, #12
 800b656:	af00      	add	r7, sp, #0
 800b658:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800b65a:	bf00      	nop
 800b65c:	370c      	adds	r7, #12
 800b65e:	46bd      	mov	sp, r7
 800b660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b664:	4770      	bx	lr

0800b666 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b666:	b480      	push	{r7}
 800b668:	b083      	sub	sp, #12
 800b66a:	af00      	add	r7, sp, #0
 800b66c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800b66e:	bf00      	nop
 800b670:	370c      	adds	r7, #12
 800b672:	46bd      	mov	sp, r7
 800b674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b678:	4770      	bx	lr

0800b67a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b67a:	b480      	push	{r7}
 800b67c:	b083      	sub	sp, #12
 800b67e:	af00      	add	r7, sp, #0
 800b680:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800b682:	bf00      	nop
 800b684:	370c      	adds	r7, #12
 800b686:	46bd      	mov	sp, r7
 800b688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68c:	4770      	bx	lr

0800b68e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800b68e:	b480      	push	{r7}
 800b690:	b083      	sub	sp, #12
 800b692:	af00      	add	r7, sp, #0
 800b694:	6078      	str	r0, [r7, #4]
 800b696:	460b      	mov	r3, r1
 800b698:	70fb      	strb	r3, [r7, #3]
 800b69a:	4613      	mov	r3, r2
 800b69c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800b69e:	bf00      	nop
 800b6a0:	370c      	adds	r7, #12
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a8:	4770      	bx	lr

0800b6aa <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b6aa:	b480      	push	{r7}
 800b6ac:	b083      	sub	sp, #12
 800b6ae:	af00      	add	r7, sp, #0
 800b6b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800b6b2:	bf00      	nop
 800b6b4:	370c      	adds	r7, #12
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6bc:	4770      	bx	lr

0800b6be <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b6be:	b480      	push	{r7}
 800b6c0:	b083      	sub	sp, #12
 800b6c2:	af00      	add	r7, sp, #0
 800b6c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800b6c6:	bf00      	nop
 800b6c8:	370c      	adds	r7, #12
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d0:	4770      	bx	lr

0800b6d2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b6d2:	b480      	push	{r7}
 800b6d4:	b083      	sub	sp, #12
 800b6d6:	af00      	add	r7, sp, #0
 800b6d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800b6da:	bf00      	nop
 800b6dc:	370c      	adds	r7, #12
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e4:	4770      	bx	lr

0800b6e6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800b6e6:	b480      	push	{r7}
 800b6e8:	b083      	sub	sp, #12
 800b6ea:	af00      	add	r7, sp, #0
 800b6ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800b6ee:	bf00      	nop
 800b6f0:	370c      	adds	r7, #12
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f8:	4770      	bx	lr

0800b6fa <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b6fa:	b480      	push	{r7}
 800b6fc:	b083      	sub	sp, #12
 800b6fe:	af00      	add	r7, sp, #0
 800b700:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800b702:	bf00      	nop
 800b704:	370c      	adds	r7, #12
 800b706:	46bd      	mov	sp, r7
 800b708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70c:	4770      	bx	lr

0800b70e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800b70e:	b480      	push	{r7}
 800b710:	b083      	sub	sp, #12
 800b712:	af00      	add	r7, sp, #0
 800b714:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b71c:	b2db      	uxtb	r3, r3
}
 800b71e:	4618      	mov	r0, r3
 800b720:	370c      	adds	r7, #12
 800b722:	46bd      	mov	sp, r7
 800b724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b728:	4770      	bx	lr

0800b72a <HAL_I2C_GetMode>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL mode
  */
HAL_I2C_ModeTypeDef HAL_I2C_GetMode(I2C_HandleTypeDef *hi2c)
{
 800b72a:	b480      	push	{r7}
 800b72c:	b083      	sub	sp, #12
 800b72e:	af00      	add	r7, sp, #0
 800b730:	6078      	str	r0, [r7, #4]
  return hi2c->Mode;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b738:	b2db      	uxtb	r3, r3
}
 800b73a:	4618      	mov	r0, r3
 800b73c:	370c      	adds	r7, #12
 800b73e:	46bd      	mov	sp, r7
 800b740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b744:	4770      	bx	lr

0800b746 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800b746:	b480      	push	{r7}
 800b748:	b083      	sub	sp, #12
 800b74a:	af00      	add	r7, sp, #0
 800b74c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800b752:	4618      	mov	r0, r3
 800b754:	370c      	adds	r7, #12
 800b756:	46bd      	mov	sp, r7
 800b758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75c:	4770      	bx	lr

0800b75e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800b75e:	b580      	push	{r7, lr}
 800b760:	b084      	sub	sp, #16
 800b762:	af00      	add	r7, sp, #0
 800b764:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b76c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b774:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b77a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b780:	2b00      	cmp	r3, #0
 800b782:	d150      	bne.n	800b826 <I2C_MasterTransmit_TXE+0xc8>
 800b784:	7bfb      	ldrb	r3, [r7, #15]
 800b786:	2b21      	cmp	r3, #33	@ 0x21
 800b788:	d14d      	bne.n	800b826 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800b78a:	68bb      	ldr	r3, [r7, #8]
 800b78c:	2b08      	cmp	r3, #8
 800b78e:	d01d      	beq.n	800b7cc <I2C_MasterTransmit_TXE+0x6e>
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	2b20      	cmp	r3, #32
 800b794:	d01a      	beq.n	800b7cc <I2C_MasterTransmit_TXE+0x6e>
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b79c:	d016      	beq.n	800b7cc <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	685a      	ldr	r2, [r3, #4]
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b7ac:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2211      	movs	r2, #17
 800b7b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2220      	movs	r2, #32
 800b7c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f7ff ff3a 	bl	800b63e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800b7ca:	e060      	b.n	800b88e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	685a      	ldr	r2, [r3, #4]
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b7da:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	681a      	ldr	r2, [r3, #0]
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b7ea:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2220      	movs	r2, #32
 800b7f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b800:	b2db      	uxtb	r3, r3
 800b802:	2b40      	cmp	r3, #64	@ 0x40
 800b804:	d107      	bne.n	800b816 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2200      	movs	r2, #0
 800b80a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f7ff ff55 	bl	800b6be <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800b814:	e03b      	b.n	800b88e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2200      	movs	r2, #0
 800b81a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f7ff ff0d 	bl	800b63e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800b824:	e033      	b.n	800b88e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800b826:	7bfb      	ldrb	r3, [r7, #15]
 800b828:	2b21      	cmp	r3, #33	@ 0x21
 800b82a:	d005      	beq.n	800b838 <I2C_MasterTransmit_TXE+0xda>
 800b82c:	7bbb      	ldrb	r3, [r7, #14]
 800b82e:	2b40      	cmp	r3, #64	@ 0x40
 800b830:	d12d      	bne.n	800b88e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800b832:	7bfb      	ldrb	r3, [r7, #15]
 800b834:	2b22      	cmp	r3, #34	@ 0x22
 800b836:	d12a      	bne.n	800b88e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b83c:	b29b      	uxth	r3, r3
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d108      	bne.n	800b854 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	685a      	ldr	r2, [r3, #4]
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b850:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800b852:	e01c      	b.n	800b88e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b85a:	b2db      	uxtb	r3, r3
 800b85c:	2b40      	cmp	r3, #64	@ 0x40
 800b85e:	d103      	bne.n	800b868 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	f000 f88e 	bl	800b982 <I2C_MemoryTransmit_TXE_BTF>
}
 800b866:	e012      	b.n	800b88e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b86c:	781a      	ldrb	r2, [r3, #0]
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b878:	1c5a      	adds	r2, r3, #1
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b882:	b29b      	uxth	r3, r3
 800b884:	3b01      	subs	r3, #1
 800b886:	b29a      	uxth	r2, r3
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800b88c:	e7ff      	b.n	800b88e <I2C_MasterTransmit_TXE+0x130>
 800b88e:	bf00      	nop
 800b890:	3710      	adds	r7, #16
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}

0800b896 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800b896:	b580      	push	{r7, lr}
 800b898:	b084      	sub	sp, #16
 800b89a:	af00      	add	r7, sp, #0
 800b89c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8a2:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b8aa:	b2db      	uxtb	r3, r3
 800b8ac:	2b21      	cmp	r3, #33	@ 0x21
 800b8ae:	d164      	bne.n	800b97a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b8b4:	b29b      	uxth	r3, r3
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d012      	beq.n	800b8e0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8be:	781a      	ldrb	r2, [r3, #0]
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8ca:	1c5a      	adds	r2, r3, #1
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b8d4:	b29b      	uxth	r3, r3
 800b8d6:	3b01      	subs	r3, #1
 800b8d8:	b29a      	uxth	r2, r3
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800b8de:	e04c      	b.n	800b97a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	2b08      	cmp	r3, #8
 800b8e4:	d01d      	beq.n	800b922 <I2C_MasterTransmit_BTF+0x8c>
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	2b20      	cmp	r3, #32
 800b8ea:	d01a      	beq.n	800b922 <I2C_MasterTransmit_BTF+0x8c>
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b8f2:	d016      	beq.n	800b922 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	685a      	ldr	r2, [r3, #4]
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b902:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2211      	movs	r2, #17
 800b908:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2200      	movs	r2, #0
 800b90e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2220      	movs	r2, #32
 800b916:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f7ff fe8f 	bl	800b63e <HAL_I2C_MasterTxCpltCallback>
}
 800b920:	e02b      	b.n	800b97a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	685a      	ldr	r2, [r3, #4]
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b930:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	681a      	ldr	r2, [r3, #0]
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b940:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2200      	movs	r2, #0
 800b946:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2220      	movs	r2, #32
 800b94c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b956:	b2db      	uxtb	r3, r3
 800b958:	2b40      	cmp	r3, #64	@ 0x40
 800b95a:	d107      	bne.n	800b96c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2200      	movs	r2, #0
 800b960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800b964:	6878      	ldr	r0, [r7, #4]
 800b966:	f7ff feaa 	bl	800b6be <HAL_I2C_MemTxCpltCallback>
}
 800b96a:	e006      	b.n	800b97a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2200      	movs	r2, #0
 800b970:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f7ff fe62 	bl	800b63e <HAL_I2C_MasterTxCpltCallback>
}
 800b97a:	bf00      	nop
 800b97c:	3710      	adds	r7, #16
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}

0800b982 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800b982:	b580      	push	{r7, lr}
 800b984:	b084      	sub	sp, #16
 800b986:	af00      	add	r7, sp, #0
 800b988:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b990:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b996:	2b00      	cmp	r3, #0
 800b998:	d11d      	bne.n	800b9d6 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b99e:	2b01      	cmp	r3, #1
 800b9a0:	d10b      	bne.n	800b9ba <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b9a6:	b2da      	uxtb	r2, r3
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9b2:	1c9a      	adds	r2, r3, #2
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800b9b8:	e077      	b.n	800baaa <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b9be:	b29b      	uxth	r3, r3
 800b9c0:	121b      	asrs	r3, r3, #8
 800b9c2:	b2da      	uxtb	r2, r3
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9ce:	1c5a      	adds	r2, r3, #1
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800b9d4:	e069      	b.n	800baaa <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9da:	2b01      	cmp	r3, #1
 800b9dc:	d10b      	bne.n	800b9f6 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b9e2:	b2da      	uxtb	r2, r3
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9ee:	1c5a      	adds	r2, r3, #1
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800b9f4:	e059      	b.n	800baaa <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9fa:	2b02      	cmp	r3, #2
 800b9fc:	d152      	bne.n	800baa4 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800b9fe:	7bfb      	ldrb	r3, [r7, #15]
 800ba00:	2b22      	cmp	r3, #34	@ 0x22
 800ba02:	d10d      	bne.n	800ba20 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	681a      	ldr	r2, [r3, #0]
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ba12:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba18:	1c5a      	adds	r2, r3, #1
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800ba1e:	e044      	b.n	800baaa <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ba24:	b29b      	uxth	r3, r3
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d015      	beq.n	800ba56 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800ba2a:	7bfb      	ldrb	r3, [r7, #15]
 800ba2c:	2b21      	cmp	r3, #33	@ 0x21
 800ba2e:	d112      	bne.n	800ba56 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba34:	781a      	ldrb	r2, [r3, #0]
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba40:	1c5a      	adds	r2, r3, #1
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ba4a:	b29b      	uxth	r3, r3
 800ba4c:	3b01      	subs	r3, #1
 800ba4e:	b29a      	uxth	r2, r3
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800ba54:	e029      	b.n	800baaa <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ba5a:	b29b      	uxth	r3, r3
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d124      	bne.n	800baaa <I2C_MemoryTransmit_TXE_BTF+0x128>
 800ba60:	7bfb      	ldrb	r3, [r7, #15]
 800ba62:	2b21      	cmp	r3, #33	@ 0x21
 800ba64:	d121      	bne.n	800baaa <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	685a      	ldr	r2, [r3, #4]
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800ba74:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	681a      	ldr	r2, [r3, #0]
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ba84:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2200      	movs	r2, #0
 800ba8a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2220      	movs	r2, #32
 800ba90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2200      	movs	r2, #0
 800ba98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f7ff fe0e 	bl	800b6be <HAL_I2C_MemTxCpltCallback>
}
 800baa2:	e002      	b.n	800baaa <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f7fb feb0 	bl	800780a <I2C_Flush_DR>
}
 800baaa:	bf00      	nop
 800baac:	3710      	adds	r7, #16
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}

0800bab2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800bab2:	b580      	push	{r7, lr}
 800bab4:	b084      	sub	sp, #16
 800bab6:	af00      	add	r7, sp, #0
 800bab8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bac0:	b2db      	uxtb	r3, r3
 800bac2:	2b22      	cmp	r3, #34	@ 0x22
 800bac4:	f040 80b9 	bne.w	800bc3a <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bacc:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bad2:	b29b      	uxth	r3, r3
 800bad4:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	2b03      	cmp	r3, #3
 800bada:	d921      	bls.n	800bb20 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	691a      	ldr	r2, [r3, #16]
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bae6:	b2d2      	uxtb	r2, r2
 800bae8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baee:	1c5a      	adds	r2, r3, #1
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800baf8:	b29b      	uxth	r3, r3
 800bafa:	3b01      	subs	r3, #1
 800bafc:	b29a      	uxth	r2, r3
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bb06:	b29b      	uxth	r3, r3
 800bb08:	2b03      	cmp	r3, #3
 800bb0a:	f040 8096 	bne.w	800bc3a <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	685a      	ldr	r2, [r3, #4]
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bb1c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800bb1e:	e08c      	b.n	800bc3a <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb24:	2b02      	cmp	r3, #2
 800bb26:	d07f      	beq.n	800bc28 <I2C_MasterReceive_RXNE+0x176>
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	2b01      	cmp	r3, #1
 800bb2c:	d002      	beq.n	800bb34 <I2C_MasterReceive_RXNE+0x82>
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d179      	bne.n	800bc28 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f001 fe17 	bl	800d768 <I2C_WaitOnSTOPRequestThroughIT>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d14c      	bne.n	800bbda <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	681a      	ldr	r2, [r3, #0]
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bb4e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	685a      	ldr	r2, [r3, #4]
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800bb5e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	691a      	ldr	r2, [r3, #16]
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb6a:	b2d2      	uxtb	r2, r2
 800bb6c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb72:	1c5a      	adds	r2, r3, #1
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bb7c:	b29b      	uxth	r3, r3
 800bb7e:	3b01      	subs	r3, #1
 800bb80:	b29a      	uxth	r2, r3
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2220      	movs	r2, #32
 800bb8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800bb94:	b2db      	uxtb	r3, r3
 800bb96:	2b40      	cmp	r3, #64	@ 0x40
 800bb98:	d10a      	bne.n	800bbb0 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2200      	movs	r2, #0
 800bba6:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f7ff fd92 	bl	800b6d2 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800bbae:	e044      	b.n	800bc3a <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	2b08      	cmp	r3, #8
 800bbbc:	d002      	beq.n	800bbc4 <I2C_MasterReceive_RXNE+0x112>
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	2b20      	cmp	r3, #32
 800bbc2:	d103      	bne.n	800bbcc <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	631a      	str	r2, [r3, #48]	@ 0x30
 800bbca:	e002      	b.n	800bbd2 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2212      	movs	r2, #18
 800bbd0:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f7ff fd3d 	bl	800b652 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800bbd8:	e02f      	b.n	800bc3a <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	685a      	ldr	r2, [r3, #4]
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800bbe8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	691a      	ldr	r2, [r3, #16]
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbf4:	b2d2      	uxtb	r2, r2
 800bbf6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbfc:	1c5a      	adds	r2, r3, #1
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bc06:	b29b      	uxth	r3, r3
 800bc08:	3b01      	subs	r3, #1
 800bc0a:	b29a      	uxth	r2, r3
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2220      	movs	r2, #32
 800bc14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f7ff fd60 	bl	800b6e6 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800bc26:	e008      	b.n	800bc3a <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	685a      	ldr	r2, [r3, #4]
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bc36:	605a      	str	r2, [r3, #4]
}
 800bc38:	e7ff      	b.n	800bc3a <I2C_MasterReceive_RXNE+0x188>
 800bc3a:	bf00      	nop
 800bc3c:	3710      	adds	r7, #16
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}

0800bc42 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800bc42:	b580      	push	{r7, lr}
 800bc44:	b084      	sub	sp, #16
 800bc46:	af00      	add	r7, sp, #0
 800bc48:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc4e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bc54:	b29b      	uxth	r3, r3
 800bc56:	2b04      	cmp	r3, #4
 800bc58:	d11b      	bne.n	800bc92 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	685a      	ldr	r2, [r3, #4]
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bc68:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	691a      	ldr	r2, [r3, #16]
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc74:	b2d2      	uxtb	r2, r2
 800bc76:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc7c:	1c5a      	adds	r2, r3, #1
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bc86:	b29b      	uxth	r3, r3
 800bc88:	3b01      	subs	r3, #1
 800bc8a:	b29a      	uxth	r2, r3
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800bc90:	e0c8      	b.n	800be24 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bc96:	b29b      	uxth	r3, r3
 800bc98:	2b03      	cmp	r3, #3
 800bc9a:	d129      	bne.n	800bcf0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	685a      	ldr	r2, [r3, #4]
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bcaa:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	2b04      	cmp	r3, #4
 800bcb0:	d00a      	beq.n	800bcc8 <I2C_MasterReceive_BTF+0x86>
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	2b02      	cmp	r3, #2
 800bcb6:	d007      	beq.n	800bcc8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	681a      	ldr	r2, [r3, #0]
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bcc6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	691a      	ldr	r2, [r3, #16]
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcd2:	b2d2      	uxtb	r2, r2
 800bcd4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcda:	1c5a      	adds	r2, r3, #1
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bce4:	b29b      	uxth	r3, r3
 800bce6:	3b01      	subs	r3, #1
 800bce8:	b29a      	uxth	r2, r3
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800bcee:	e099      	b.n	800be24 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bcf4:	b29b      	uxth	r3, r3
 800bcf6:	2b02      	cmp	r3, #2
 800bcf8:	f040 8081 	bne.w	800bdfe <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	2b01      	cmp	r3, #1
 800bd00:	d002      	beq.n	800bd08 <I2C_MasterReceive_BTF+0xc6>
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	2b10      	cmp	r3, #16
 800bd06:	d108      	bne.n	800bd1a <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	681a      	ldr	r2, [r3, #0]
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bd16:	601a      	str	r2, [r3, #0]
 800bd18:	e019      	b.n	800bd4e <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	2b04      	cmp	r3, #4
 800bd1e:	d002      	beq.n	800bd26 <I2C_MasterReceive_BTF+0xe4>
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	2b02      	cmp	r3, #2
 800bd24:	d108      	bne.n	800bd38 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	681a      	ldr	r2, [r3, #0]
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800bd34:	601a      	str	r2, [r3, #0]
 800bd36:	e00a      	b.n	800bd4e <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	2b10      	cmp	r3, #16
 800bd3c:	d007      	beq.n	800bd4e <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	681a      	ldr	r2, [r3, #0]
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bd4c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	691a      	ldr	r2, [r3, #16]
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd58:	b2d2      	uxtb	r2, r2
 800bd5a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd60:	1c5a      	adds	r2, r3, #1
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bd6a:	b29b      	uxth	r3, r3
 800bd6c:	3b01      	subs	r3, #1
 800bd6e:	b29a      	uxth	r2, r3
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	691a      	ldr	r2, [r3, #16]
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd7e:	b2d2      	uxtb	r2, r2
 800bd80:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd86:	1c5a      	adds	r2, r3, #1
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bd90:	b29b      	uxth	r3, r3
 800bd92:	3b01      	subs	r3, #1
 800bd94:	b29a      	uxth	r2, r3
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	685a      	ldr	r2, [r3, #4]
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800bda8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	2220      	movs	r2, #32
 800bdae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800bdb8:	b2db      	uxtb	r3, r3
 800bdba:	2b40      	cmp	r3, #64	@ 0x40
 800bdbc:	d10a      	bne.n	800bdd4 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2200      	movs	r2, #0
 800bdca:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f7ff fc80 	bl	800b6d2 <HAL_I2C_MemRxCpltCallback>
}
 800bdd2:	e027      	b.n	800be24 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	2b08      	cmp	r3, #8
 800bde0:	d002      	beq.n	800bde8 <I2C_MasterReceive_BTF+0x1a6>
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	2b20      	cmp	r3, #32
 800bde6:	d103      	bne.n	800bdf0 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2200      	movs	r2, #0
 800bdec:	631a      	str	r2, [r3, #48]	@ 0x30
 800bdee:	e002      	b.n	800bdf6 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2212      	movs	r2, #18
 800bdf4:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	f7ff fc2b 	bl	800b652 <HAL_I2C_MasterRxCpltCallback>
}
 800bdfc:	e012      	b.n	800be24 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	691a      	ldr	r2, [r3, #16]
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be08:	b2d2      	uxtb	r2, r2
 800be0a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be10:	1c5a      	adds	r2, r3, #1
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800be1a:	b29b      	uxth	r3, r3
 800be1c:	3b01      	subs	r3, #1
 800be1e:	b29a      	uxth	r2, r3
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800be24:	bf00      	nop
 800be26:	3710      	adds	r7, #16
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}

0800be2c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800be2c:	b480      	push	{r7}
 800be2e:	b083      	sub	sp, #12
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800be3a:	b2db      	uxtb	r3, r3
 800be3c:	2b40      	cmp	r3, #64	@ 0x40
 800be3e:	d117      	bne.n	800be70 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be44:	2b00      	cmp	r3, #0
 800be46:	d109      	bne.n	800be5c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be4c:	b2db      	uxtb	r3, r3
 800be4e:	461a      	mov	r2, r3
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800be58:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800be5a:	e067      	b.n	800bf2c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be60:	b2db      	uxtb	r3, r3
 800be62:	f043 0301 	orr.w	r3, r3, #1
 800be66:	b2da      	uxtb	r2, r3
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	611a      	str	r2, [r3, #16]
}
 800be6e:	e05d      	b.n	800bf2c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	691b      	ldr	r3, [r3, #16]
 800be74:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800be78:	d133      	bne.n	800bee2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800be80:	b2db      	uxtb	r3, r3
 800be82:	2b21      	cmp	r3, #33	@ 0x21
 800be84:	d109      	bne.n	800be9a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be8a:	b2db      	uxtb	r3, r3
 800be8c:	461a      	mov	r2, r3
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800be96:	611a      	str	r2, [r3, #16]
 800be98:	e008      	b.n	800beac <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be9e:	b2db      	uxtb	r3, r3
 800bea0:	f043 0301 	orr.w	r3, r3, #1
 800bea4:	b2da      	uxtb	r2, r3
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d004      	beq.n	800bebe <I2C_Master_SB+0x92>
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800beb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d108      	bne.n	800bed0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d032      	beq.n	800bf2c <I2C_Master_SB+0x100>
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800beca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800becc:	2b00      	cmp	r3, #0
 800bece:	d02d      	beq.n	800bf2c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	685a      	ldr	r2, [r3, #4]
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bede:	605a      	str	r2, [r3, #4]
}
 800bee0:	e024      	b.n	800bf2c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d10e      	bne.n	800bf08 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800beee:	b29b      	uxth	r3, r3
 800bef0:	11db      	asrs	r3, r3, #7
 800bef2:	b2db      	uxtb	r3, r3
 800bef4:	f003 0306 	and.w	r3, r3, #6
 800bef8:	b2db      	uxtb	r3, r3
 800befa:	f063 030f 	orn	r3, r3, #15
 800befe:	b2da      	uxtb	r2, r3
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	611a      	str	r2, [r3, #16]
}
 800bf06:	e011      	b.n	800bf2c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bf0c:	2b01      	cmp	r3, #1
 800bf0e:	d10d      	bne.n	800bf2c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf14:	b29b      	uxth	r3, r3
 800bf16:	11db      	asrs	r3, r3, #7
 800bf18:	b2db      	uxtb	r3, r3
 800bf1a:	f003 0306 	and.w	r3, r3, #6
 800bf1e:	b2db      	uxtb	r3, r3
 800bf20:	f063 030e 	orn	r3, r3, #14
 800bf24:	b2da      	uxtb	r2, r3
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	611a      	str	r2, [r3, #16]
}
 800bf2c:	bf00      	nop
 800bf2e:	370c      	adds	r7, #12
 800bf30:	46bd      	mov	sp, r7
 800bf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf36:	4770      	bx	lr

0800bf38 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800bf38:	b480      	push	{r7}
 800bf3a:	b083      	sub	sp, #12
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf44:	b2da      	uxtb	r2, r3
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d004      	beq.n	800bf5e <I2C_Master_ADD10+0x26>
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d108      	bne.n	800bf70 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d00c      	beq.n	800bf80 <I2C_Master_ADD10+0x48>
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d007      	beq.n	800bf80 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	685a      	ldr	r2, [r3, #4]
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bf7e:	605a      	str	r2, [r3, #4]
  }
}
 800bf80:	bf00      	nop
 800bf82:	370c      	adds	r7, #12
 800bf84:	46bd      	mov	sp, r7
 800bf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8a:	4770      	bx	lr

0800bf8c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800bf8c:	b480      	push	{r7}
 800bf8e:	b091      	sub	sp, #68	@ 0x44
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800bf9a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfa2:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfa8:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bfb0:	b2db      	uxtb	r3, r3
 800bfb2:	2b22      	cmp	r3, #34	@ 0x22
 800bfb4:	f040 8169 	bne.w	800c28a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d10f      	bne.n	800bfe0 <I2C_Master_ADDR+0x54>
 800bfc0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bfc4:	2b40      	cmp	r3, #64	@ 0x40
 800bfc6:	d10b      	bne.n	800bfe0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bfc8:	2300      	movs	r3, #0
 800bfca:	633b      	str	r3, [r7, #48]	@ 0x30
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	695b      	ldr	r3, [r3, #20]
 800bfd2:	633b      	str	r3, [r7, #48]	@ 0x30
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	699b      	ldr	r3, [r3, #24]
 800bfda:	633b      	str	r3, [r7, #48]	@ 0x30
 800bfdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfde:	e160      	b.n	800c2a2 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d11d      	bne.n	800c024 <I2C_Master_ADDR+0x98>
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	691b      	ldr	r3, [r3, #16]
 800bfec:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800bff0:	d118      	bne.n	800c024 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bff2:	2300      	movs	r3, #0
 800bff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	695b      	ldr	r3, [r3, #20]
 800bffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	699b      	ldr	r3, [r3, #24]
 800c004:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	681a      	ldr	r2, [r3, #0]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c016:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c01c:	1c5a      	adds	r2, r3, #1
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	651a      	str	r2, [r3, #80]	@ 0x50
 800c022:	e13e      	b.n	800c2a2 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c028:	b29b      	uxth	r3, r3
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d113      	bne.n	800c056 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c02e:	2300      	movs	r3, #0
 800c030:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	695b      	ldr	r3, [r3, #20]
 800c038:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	699b      	ldr	r3, [r3, #24]
 800c040:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c042:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	681a      	ldr	r2, [r3, #0]
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c052:	601a      	str	r2, [r3, #0]
 800c054:	e115      	b.n	800c282 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c05a:	b29b      	uxth	r3, r3
 800c05c:	2b01      	cmp	r3, #1
 800c05e:	f040 808a 	bne.w	800c176 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800c062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c064:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800c068:	d137      	bne.n	800c0da <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	681a      	ldr	r2, [r3, #0]
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c078:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	685b      	ldr	r3, [r3, #4]
 800c080:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c084:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c088:	d113      	bne.n	800c0b2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	681a      	ldr	r2, [r3, #0]
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c098:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c09a:	2300      	movs	r3, #0
 800c09c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	695b      	ldr	r3, [r3, #20]
 800c0a4:	627b      	str	r3, [r7, #36]	@ 0x24
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	699b      	ldr	r3, [r3, #24]
 800c0ac:	627b      	str	r3, [r7, #36]	@ 0x24
 800c0ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0b0:	e0e7      	b.n	800c282 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	623b      	str	r3, [r7, #32]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	695b      	ldr	r3, [r3, #20]
 800c0bc:	623b      	str	r3, [r7, #32]
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	699b      	ldr	r3, [r3, #24]
 800c0c4:	623b      	str	r3, [r7, #32]
 800c0c6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	681a      	ldr	r2, [r3, #0]
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c0d6:	601a      	str	r2, [r3, #0]
 800c0d8:	e0d3      	b.n	800c282 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800c0da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0dc:	2b08      	cmp	r3, #8
 800c0de:	d02e      	beq.n	800c13e <I2C_Master_ADDR+0x1b2>
 800c0e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0e2:	2b20      	cmp	r3, #32
 800c0e4:	d02b      	beq.n	800c13e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800c0e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0e8:	2b12      	cmp	r3, #18
 800c0ea:	d102      	bne.n	800c0f2 <I2C_Master_ADDR+0x166>
 800c0ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0ee:	2b01      	cmp	r3, #1
 800c0f0:	d125      	bne.n	800c13e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800c0f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0f4:	2b04      	cmp	r3, #4
 800c0f6:	d00e      	beq.n	800c116 <I2C_Master_ADDR+0x18a>
 800c0f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0fa:	2b02      	cmp	r3, #2
 800c0fc:	d00b      	beq.n	800c116 <I2C_Master_ADDR+0x18a>
 800c0fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c100:	2b10      	cmp	r3, #16
 800c102:	d008      	beq.n	800c116 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	681a      	ldr	r2, [r3, #0]
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c112:	601a      	str	r2, [r3, #0]
 800c114:	e007      	b.n	800c126 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	681a      	ldr	r2, [r3, #0]
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c124:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c126:	2300      	movs	r3, #0
 800c128:	61fb      	str	r3, [r7, #28]
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	695b      	ldr	r3, [r3, #20]
 800c130:	61fb      	str	r3, [r7, #28]
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	699b      	ldr	r3, [r3, #24]
 800c138:	61fb      	str	r3, [r7, #28]
 800c13a:	69fb      	ldr	r3, [r7, #28]
 800c13c:	e0a1      	b.n	800c282 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	681a      	ldr	r2, [r3, #0]
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c14c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c14e:	2300      	movs	r3, #0
 800c150:	61bb      	str	r3, [r7, #24]
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	695b      	ldr	r3, [r3, #20]
 800c158:	61bb      	str	r3, [r7, #24]
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	699b      	ldr	r3, [r3, #24]
 800c160:	61bb      	str	r3, [r7, #24]
 800c162:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	681a      	ldr	r2, [r3, #0]
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c172:	601a      	str	r2, [r3, #0]
 800c174:	e085      	b.n	800c282 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c17a:	b29b      	uxth	r3, r3
 800c17c:	2b02      	cmp	r3, #2
 800c17e:	d14d      	bne.n	800c21c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800c180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c182:	2b04      	cmp	r3, #4
 800c184:	d016      	beq.n	800c1b4 <I2C_Master_ADDR+0x228>
 800c186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c188:	2b02      	cmp	r3, #2
 800c18a:	d013      	beq.n	800c1b4 <I2C_Master_ADDR+0x228>
 800c18c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c18e:	2b10      	cmp	r3, #16
 800c190:	d010      	beq.n	800c1b4 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	681a      	ldr	r2, [r3, #0]
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c1a0:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	681a      	ldr	r2, [r3, #0]
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c1b0:	601a      	str	r2, [r3, #0]
 800c1b2:	e007      	b.n	800c1c4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	681a      	ldr	r2, [r3, #0]
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c1c2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	685b      	ldr	r3, [r3, #4]
 800c1ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c1ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c1d2:	d117      	bne.n	800c204 <I2C_Master_ADDR+0x278>
 800c1d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1d6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800c1da:	d00b      	beq.n	800c1f4 <I2C_Master_ADDR+0x268>
 800c1dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1de:	2b01      	cmp	r3, #1
 800c1e0:	d008      	beq.n	800c1f4 <I2C_Master_ADDR+0x268>
 800c1e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1e4:	2b08      	cmp	r3, #8
 800c1e6:	d005      	beq.n	800c1f4 <I2C_Master_ADDR+0x268>
 800c1e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1ea:	2b10      	cmp	r3, #16
 800c1ec:	d002      	beq.n	800c1f4 <I2C_Master_ADDR+0x268>
 800c1ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1f0:	2b20      	cmp	r3, #32
 800c1f2:	d107      	bne.n	800c204 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	685a      	ldr	r2, [r3, #4]
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c202:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c204:	2300      	movs	r3, #0
 800c206:	617b      	str	r3, [r7, #20]
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	695b      	ldr	r3, [r3, #20]
 800c20e:	617b      	str	r3, [r7, #20]
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	699b      	ldr	r3, [r3, #24]
 800c216:	617b      	str	r3, [r7, #20]
 800c218:	697b      	ldr	r3, [r7, #20]
 800c21a:	e032      	b.n	800c282 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	681a      	ldr	r2, [r3, #0]
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c22a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	685b      	ldr	r3, [r3, #4]
 800c232:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c236:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c23a:	d117      	bne.n	800c26c <I2C_Master_ADDR+0x2e0>
 800c23c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c23e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800c242:	d00b      	beq.n	800c25c <I2C_Master_ADDR+0x2d0>
 800c244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c246:	2b01      	cmp	r3, #1
 800c248:	d008      	beq.n	800c25c <I2C_Master_ADDR+0x2d0>
 800c24a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c24c:	2b08      	cmp	r3, #8
 800c24e:	d005      	beq.n	800c25c <I2C_Master_ADDR+0x2d0>
 800c250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c252:	2b10      	cmp	r3, #16
 800c254:	d002      	beq.n	800c25c <I2C_Master_ADDR+0x2d0>
 800c256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c258:	2b20      	cmp	r3, #32
 800c25a:	d107      	bne.n	800c26c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	685a      	ldr	r2, [r3, #4]
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c26a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c26c:	2300      	movs	r3, #0
 800c26e:	613b      	str	r3, [r7, #16]
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	695b      	ldr	r3, [r3, #20]
 800c276:	613b      	str	r3, [r7, #16]
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	699b      	ldr	r3, [r3, #24]
 800c27e:	613b      	str	r3, [r7, #16]
 800c280:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2200      	movs	r2, #0
 800c286:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800c288:	e00b      	b.n	800c2a2 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c28a:	2300      	movs	r3, #0
 800c28c:	60fb      	str	r3, [r7, #12]
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	695b      	ldr	r3, [r3, #20]
 800c294:	60fb      	str	r3, [r7, #12]
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	699b      	ldr	r3, [r3, #24]
 800c29c:	60fb      	str	r3, [r7, #12]
 800c29e:	68fb      	ldr	r3, [r7, #12]
}
 800c2a0:	e7ff      	b.n	800c2a2 <I2C_Master_ADDR+0x316>
 800c2a2:	bf00      	nop
 800c2a4:	3744      	adds	r7, #68	@ 0x44
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ac:	4770      	bx	lr

0800c2ae <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800c2ae:	b580      	push	{r7, lr}
 800c2b0:	b084      	sub	sp, #16
 800c2b2:	af00      	add	r7, sp, #0
 800c2b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c2bc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c2c2:	b29b      	uxth	r3, r3
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d02b      	beq.n	800c320 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2cc:	781a      	ldrb	r2, [r3, #0]
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2d8:	1c5a      	adds	r2, r3, #1
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c2e2:	b29b      	uxth	r3, r3
 800c2e4:	3b01      	subs	r3, #1
 800c2e6:	b29a      	uxth	r2, r3
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c2f0:	b29b      	uxth	r3, r3
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d114      	bne.n	800c320 <I2C_SlaveTransmit_TXE+0x72>
 800c2f6:	7bfb      	ldrb	r3, [r7, #15]
 800c2f8:	2b29      	cmp	r3, #41	@ 0x29
 800c2fa:	d111      	bne.n	800c320 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	685a      	ldr	r2, [r3, #4]
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c30a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2221      	movs	r2, #33	@ 0x21
 800c310:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2228      	movs	r2, #40	@ 0x28
 800c316:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c31a:	6878      	ldr	r0, [r7, #4]
 800c31c:	f7ff f9a3 	bl	800b666 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800c320:	bf00      	nop
 800c322:	3710      	adds	r7, #16
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}

0800c328 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800c328:	b480      	push	{r7}
 800c32a:	b083      	sub	sp, #12
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c334:	b29b      	uxth	r3, r3
 800c336:	2b00      	cmp	r3, #0
 800c338:	d011      	beq.n	800c35e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c33e:	781a      	ldrb	r2, [r3, #0]
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c34a:	1c5a      	adds	r2, r3, #1
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c354:	b29b      	uxth	r3, r3
 800c356:	3b01      	subs	r3, #1
 800c358:	b29a      	uxth	r2, r3
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800c35e:	bf00      	nop
 800c360:	370c      	adds	r7, #12
 800c362:	46bd      	mov	sp, r7
 800c364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c368:	4770      	bx	lr

0800c36a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800c36a:	b580      	push	{r7, lr}
 800c36c:	b084      	sub	sp, #16
 800c36e:	af00      	add	r7, sp, #0
 800c370:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c378:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c37e:	b29b      	uxth	r3, r3
 800c380:	2b00      	cmp	r3, #0
 800c382:	d02c      	beq.n	800c3de <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	691a      	ldr	r2, [r3, #16]
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c38e:	b2d2      	uxtb	r2, r2
 800c390:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c396:	1c5a      	adds	r2, r3, #1
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c3a0:	b29b      	uxth	r3, r3
 800c3a2:	3b01      	subs	r3, #1
 800c3a4:	b29a      	uxth	r2, r3
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c3ae:	b29b      	uxth	r3, r3
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d114      	bne.n	800c3de <I2C_SlaveReceive_RXNE+0x74>
 800c3b4:	7bfb      	ldrb	r3, [r7, #15]
 800c3b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800c3b8:	d111      	bne.n	800c3de <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	685a      	ldr	r2, [r3, #4]
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c3c8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2222      	movs	r2, #34	@ 0x22
 800c3ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2228      	movs	r2, #40	@ 0x28
 800c3d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c3d8:	6878      	ldr	r0, [r7, #4]
 800c3da:	f7ff f94e 	bl	800b67a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800c3de:	bf00      	nop
 800c3e0:	3710      	adds	r7, #16
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}

0800c3e6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800c3e6:	b480      	push	{r7}
 800c3e8:	b083      	sub	sp, #12
 800c3ea:	af00      	add	r7, sp, #0
 800c3ec:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c3f2:	b29b      	uxth	r3, r3
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d012      	beq.n	800c41e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	691a      	ldr	r2, [r3, #16]
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c402:	b2d2      	uxtb	r2, r2
 800c404:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c40a:	1c5a      	adds	r2, r3, #1
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c414:	b29b      	uxth	r3, r3
 800c416:	3b01      	subs	r3, #1
 800c418:	b29a      	uxth	r2, r3
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800c41e:	bf00      	nop
 800c420:	370c      	adds	r7, #12
 800c422:	46bd      	mov	sp, r7
 800c424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c428:	4770      	bx	lr

0800c42a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800c42a:	b580      	push	{r7, lr}
 800c42c:	b084      	sub	sp, #16
 800c42e:	af00      	add	r7, sp, #0
 800c430:	6078      	str	r0, [r7, #4]
 800c432:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800c434:	2300      	movs	r3, #0
 800c436:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c43e:	b2db      	uxtb	r3, r3
 800c440:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800c444:	2b28      	cmp	r3, #40	@ 0x28
 800c446:	d125      	bne.n	800c494 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	685a      	ldr	r2, [r3, #4]
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c456:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	f003 0304 	and.w	r3, r3, #4
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d101      	bne.n	800c466 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800c462:	2301      	movs	r3, #1
 800c464:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d103      	bne.n	800c478 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	68db      	ldr	r3, [r3, #12]
 800c474:	81bb      	strh	r3, [r7, #12]
 800c476:	e002      	b.n	800c47e <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	699b      	ldr	r3, [r3, #24]
 800c47c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	2200      	movs	r2, #0
 800c482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800c486:	89ba      	ldrh	r2, [r7, #12]
 800c488:	7bfb      	ldrb	r3, [r7, #15]
 800c48a:	4619      	mov	r1, r3
 800c48c:	6878      	ldr	r0, [r7, #4]
 800c48e:	f7ff f8fe 	bl	800b68e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800c492:	e00e      	b.n	800c4b2 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c494:	2300      	movs	r3, #0
 800c496:	60bb      	str	r3, [r7, #8]
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	695b      	ldr	r3, [r3, #20]
 800c49e:	60bb      	str	r3, [r7, #8]
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	699b      	ldr	r3, [r3, #24]
 800c4a6:	60bb      	str	r3, [r7, #8]
 800c4a8:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800c4b2:	bf00      	nop
 800c4b4:	3710      	adds	r7, #16
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}

0800c4ba <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800c4ba:	b580      	push	{r7, lr}
 800c4bc:	b084      	sub	sp, #16
 800c4be:	af00      	add	r7, sp, #0
 800c4c0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c4c8:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	685a      	ldr	r2, [r3, #4]
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800c4d8:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800c4da:	2300      	movs	r3, #0
 800c4dc:	60bb      	str	r3, [r7, #8]
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	695b      	ldr	r3, [r3, #20]
 800c4e4:	60bb      	str	r3, [r7, #8]
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	681a      	ldr	r2, [r3, #0]
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f042 0201 	orr.w	r2, r2, #1
 800c4f4:	601a      	str	r2, [r3, #0]
 800c4f6:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	681a      	ldr	r2, [r3, #0]
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c506:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	685b      	ldr	r3, [r3, #4]
 800c50e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c512:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c516:	d172      	bne.n	800c5fe <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800c518:	7bfb      	ldrb	r3, [r7, #15]
 800c51a:	2b22      	cmp	r3, #34	@ 0x22
 800c51c:	d002      	beq.n	800c524 <I2C_Slave_STOPF+0x6a>
 800c51e:	7bfb      	ldrb	r3, [r7, #15]
 800c520:	2b2a      	cmp	r3, #42	@ 0x2a
 800c522:	d135      	bne.n	800c590 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	685b      	ldr	r3, [r3, #4]
 800c52c:	b29a      	uxth	r2, r3
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c536:	b29b      	uxth	r3, r3
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d005      	beq.n	800c548 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c540:	f043 0204 	orr.w	r2, r3, #4
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	685a      	ldr	r2, [r3, #4]
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c556:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c55c:	4618      	mov	r0, r3
 800c55e:	f7fa fbd4 	bl	8006d0a <HAL_DMA_GetState>
 800c562:	4603      	mov	r3, r0
 800c564:	2b01      	cmp	r3, #1
 800c566:	d049      	beq.n	800c5fc <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c56c:	4a69      	ldr	r2, [pc, #420]	@ (800c714 <I2C_Slave_STOPF+0x25a>)
 800c56e:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c574:	4618      	mov	r0, r3
 800c576:	f7fa f880 	bl	800667a <HAL_DMA_Abort_IT>
 800c57a:	4603      	mov	r3, r0
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d03d      	beq.n	800c5fc <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c584:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c586:	687a      	ldr	r2, [r7, #4]
 800c588:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800c58a:	4610      	mov	r0, r2
 800c58c:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c58e:	e035      	b.n	800c5fc <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	685b      	ldr	r3, [r3, #4]
 800c598:	b29a      	uxth	r2, r3
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c5a2:	b29b      	uxth	r3, r3
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d005      	beq.n	800c5b4 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5ac:	f043 0204 	orr.w	r2, r3, #4
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	685a      	ldr	r2, [r3, #4]
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c5c2:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f7fa fb9e 	bl	8006d0a <HAL_DMA_GetState>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	2b01      	cmp	r3, #1
 800c5d2:	d014      	beq.n	800c5fe <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c5d8:	4a4e      	ldr	r2, [pc, #312]	@ (800c714 <I2C_Slave_STOPF+0x25a>)
 800c5da:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	f7fa f84a 	bl	800667a <HAL_DMA_Abort_IT>
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d008      	beq.n	800c5fe <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c5f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c5f2:	687a      	ldr	r2, [r7, #4]
 800c5f4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800c5f6:	4610      	mov	r0, r2
 800c5f8:	4798      	blx	r3
 800c5fa:	e000      	b.n	800c5fe <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c5fc:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c602:	b29b      	uxth	r3, r3
 800c604:	2b00      	cmp	r3, #0
 800c606:	d03e      	beq.n	800c686 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	695b      	ldr	r3, [r3, #20]
 800c60e:	f003 0304 	and.w	r3, r3, #4
 800c612:	2b04      	cmp	r3, #4
 800c614:	d112      	bne.n	800c63c <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	691a      	ldr	r2, [r3, #16]
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c620:	b2d2      	uxtb	r2, r2
 800c622:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c628:	1c5a      	adds	r2, r3, #1
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c632:	b29b      	uxth	r3, r3
 800c634:	3b01      	subs	r3, #1
 800c636:	b29a      	uxth	r2, r3
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	695b      	ldr	r3, [r3, #20]
 800c642:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c646:	2b40      	cmp	r3, #64	@ 0x40
 800c648:	d112      	bne.n	800c670 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	691a      	ldr	r2, [r3, #16]
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c654:	b2d2      	uxtb	r2, r2
 800c656:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c65c:	1c5a      	adds	r2, r3, #1
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c666:	b29b      	uxth	r3, r3
 800c668:	3b01      	subs	r3, #1
 800c66a:	b29a      	uxth	r2, r3
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c674:	b29b      	uxth	r3, r3
 800c676:	2b00      	cmp	r3, #0
 800c678:	d005      	beq.n	800c686 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c67e:	f043 0204 	orr.w	r2, r3, #4
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d003      	beq.n	800c696 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f000 f8b8 	bl	800c804 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800c694:	e039      	b.n	800c70a <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800c696:	7bfb      	ldrb	r3, [r7, #15]
 800c698:	2b2a      	cmp	r3, #42	@ 0x2a
 800c69a:	d109      	bne.n	800c6b0 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2200      	movs	r2, #0
 800c6a0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2228      	movs	r2, #40	@ 0x28
 800c6a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	f7fe ffe5 	bl	800b67a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c6b6:	b2db      	uxtb	r3, r3
 800c6b8:	2b28      	cmp	r3, #40	@ 0x28
 800c6ba:	d111      	bne.n	800c6e0 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	4a16      	ldr	r2, [pc, #88]	@ (800c718 <I2C_Slave_STOPF+0x25e>)
 800c6c0:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2220      	movs	r2, #32
 800c6cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800c6d8:	6878      	ldr	r0, [r7, #4]
 800c6da:	f7fe ffe6 	bl	800b6aa <HAL_I2C_ListenCpltCallback>
}
 800c6de:	e014      	b.n	800c70a <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6e4:	2b22      	cmp	r3, #34	@ 0x22
 800c6e6:	d002      	beq.n	800c6ee <I2C_Slave_STOPF+0x234>
 800c6e8:	7bfb      	ldrb	r3, [r7, #15]
 800c6ea:	2b22      	cmp	r3, #34	@ 0x22
 800c6ec:	d10d      	bne.n	800c70a <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2220      	movs	r2, #32
 800c6f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2200      	movs	r2, #0
 800c700:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	f7fe ffb8 	bl	800b67a <HAL_I2C_SlaveRxCpltCallback>
}
 800c70a:	bf00      	nop
 800c70c:	3710      	adds	r7, #16
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}
 800c712:	bf00      	nop
 800c714:	0800d23d 	.word	0x0800d23d
 800c718:	ffff0000 	.word	0xffff0000

0800c71c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b084      	sub	sp, #16
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c72a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c730:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800c732:	68bb      	ldr	r3, [r7, #8]
 800c734:	2b08      	cmp	r3, #8
 800c736:	d002      	beq.n	800c73e <I2C_Slave_AF+0x22>
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	2b20      	cmp	r3, #32
 800c73c:	d129      	bne.n	800c792 <I2C_Slave_AF+0x76>
 800c73e:	7bfb      	ldrb	r3, [r7, #15]
 800c740:	2b28      	cmp	r3, #40	@ 0x28
 800c742:	d126      	bne.n	800c792 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	4a2e      	ldr	r2, [pc, #184]	@ (800c800 <I2C_Slave_AF+0xe4>)
 800c748:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	685a      	ldr	r2, [r3, #4]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800c758:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800c762:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	681a      	ldr	r2, [r3, #0]
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c772:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2200      	movs	r2, #0
 800c778:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	2220      	movs	r2, #32
 800c77e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2200      	movs	r2, #0
 800c786:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f7fe ff8d 	bl	800b6aa <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800c790:	e031      	b.n	800c7f6 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800c792:	7bfb      	ldrb	r3, [r7, #15]
 800c794:	2b21      	cmp	r3, #33	@ 0x21
 800c796:	d129      	bne.n	800c7ec <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	4a19      	ldr	r2, [pc, #100]	@ (800c800 <I2C_Slave_AF+0xe4>)
 800c79c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2221      	movs	r2, #33	@ 0x21
 800c7a2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2220      	movs	r2, #32
 800c7a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	685a      	ldr	r2, [r3, #4]
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800c7c2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800c7cc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	681a      	ldr	r2, [r3, #0]
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c7dc:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	f7fb f813 	bl	800780a <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	f7fe ff3e 	bl	800b666 <HAL_I2C_SlaveTxCpltCallback>
}
 800c7ea:	e004      	b.n	800c7f6 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800c7f4:	615a      	str	r2, [r3, #20]
}
 800c7f6:	bf00      	nop
 800c7f8:	3710      	adds	r7, #16
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bd80      	pop	{r7, pc}
 800c7fe:	bf00      	nop
 800c800:	ffff0000 	.word	0xffff0000

0800c804 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b084      	sub	sp, #16
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c812:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c81a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800c81c:	7bbb      	ldrb	r3, [r7, #14]
 800c81e:	2b10      	cmp	r3, #16
 800c820:	d002      	beq.n	800c828 <I2C_ITError+0x24>
 800c822:	7bbb      	ldrb	r3, [r7, #14]
 800c824:	2b40      	cmp	r3, #64	@ 0x40
 800c826:	d10a      	bne.n	800c83e <I2C_ITError+0x3a>
 800c828:	7bfb      	ldrb	r3, [r7, #15]
 800c82a:	2b22      	cmp	r3, #34	@ 0x22
 800c82c:	d107      	bne.n	800c83e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	681a      	ldr	r2, [r3, #0]
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c83c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c83e:	7bfb      	ldrb	r3, [r7, #15]
 800c840:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800c844:	2b28      	cmp	r3, #40	@ 0x28
 800c846:	d107      	bne.n	800c858 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2200      	movs	r2, #0
 800c84c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2228      	movs	r2, #40	@ 0x28
 800c852:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800c856:	e015      	b.n	800c884 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	685b      	ldr	r3, [r3, #4]
 800c85e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c862:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c866:	d00a      	beq.n	800c87e <I2C_ITError+0x7a>
 800c868:	7bfb      	ldrb	r3, [r7, #15]
 800c86a:	2b60      	cmp	r3, #96	@ 0x60
 800c86c:	d007      	beq.n	800c87e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2220      	movs	r2, #32
 800c872:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2200      	movs	r2, #0
 800c87a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2200      	movs	r2, #0
 800c882:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	685b      	ldr	r3, [r3, #4]
 800c88a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c88e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c892:	d162      	bne.n	800c95a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	685a      	ldr	r2, [r3, #4]
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c8a2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c8ac:	b2db      	uxtb	r3, r3
 800c8ae:	2b01      	cmp	r3, #1
 800c8b0:	d020      	beq.n	800c8f4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8b6:	4a6a      	ldr	r2, [pc, #424]	@ (800ca60 <I2C_ITError+0x25c>)
 800c8b8:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f7f9 fedb 	bl	800667a <HAL_DMA_Abort_IT>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	f000 8089 	beq.w	800c9de <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	681a      	ldr	r2, [r3, #0]
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	f022 0201 	bic.w	r2, r2, #1
 800c8da:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2220      	movs	r2, #32
 800c8e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c8ea:	687a      	ldr	r2, [r7, #4]
 800c8ec:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800c8ee:	4610      	mov	r0, r2
 800c8f0:	4798      	blx	r3
 800c8f2:	e074      	b.n	800c9de <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8f8:	4a59      	ldr	r2, [pc, #356]	@ (800ca60 <I2C_ITError+0x25c>)
 800c8fa:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c900:	4618      	mov	r0, r3
 800c902:	f7f9 feba 	bl	800667a <HAL_DMA_Abort_IT>
 800c906:	4603      	mov	r3, r0
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d068      	beq.n	800c9de <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	695b      	ldr	r3, [r3, #20]
 800c912:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c916:	2b40      	cmp	r3, #64	@ 0x40
 800c918:	d10b      	bne.n	800c932 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	691a      	ldr	r2, [r3, #16]
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c924:	b2d2      	uxtb	r2, r2
 800c926:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c92c:	1c5a      	adds	r2, r3, #1
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	681a      	ldr	r2, [r3, #0]
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	f022 0201 	bic.w	r2, r2, #1
 800c940:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	2220      	movs	r2, #32
 800c946:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c94e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c950:	687a      	ldr	r2, [r7, #4]
 800c952:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800c954:	4610      	mov	r0, r2
 800c956:	4798      	blx	r3
 800c958:	e041      	b.n	800c9de <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c960:	b2db      	uxtb	r3, r3
 800c962:	2b60      	cmp	r3, #96	@ 0x60
 800c964:	d125      	bne.n	800c9b2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	2220      	movs	r2, #32
 800c96a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2200      	movs	r2, #0
 800c972:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	695b      	ldr	r3, [r3, #20]
 800c97a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c97e:	2b40      	cmp	r3, #64	@ 0x40
 800c980:	d10b      	bne.n	800c99a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	691a      	ldr	r2, [r3, #16]
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c98c:	b2d2      	uxtb	r2, r2
 800c98e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c994:	1c5a      	adds	r2, r3, #1
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	681a      	ldr	r2, [r3, #0]
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	f022 0201 	bic.w	r2, r2, #1
 800c9a8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f7fe fea5 	bl	800b6fa <HAL_I2C_AbortCpltCallback>
 800c9b0:	e015      	b.n	800c9de <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	695b      	ldr	r3, [r3, #20]
 800c9b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9bc:	2b40      	cmp	r3, #64	@ 0x40
 800c9be:	d10b      	bne.n	800c9d8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	691a      	ldr	r2, [r3, #16]
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9ca:	b2d2      	uxtb	r2, r2
 800c9cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9d2:	1c5a      	adds	r2, r3, #1
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f7fe fe84 	bl	800b6e6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9e2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	f003 0301 	and.w	r3, r3, #1
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d10e      	bne.n	800ca0c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d109      	bne.n	800ca0c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d104      	bne.n	800ca0c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800ca02:	68bb      	ldr	r3, [r7, #8]
 800ca04:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d007      	beq.n	800ca1c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	685a      	ldr	r2, [r3, #4]
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800ca1a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ca22:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca28:	f003 0304 	and.w	r3, r3, #4
 800ca2c:	2b04      	cmp	r3, #4
 800ca2e:	d113      	bne.n	800ca58 <I2C_ITError+0x254>
 800ca30:	7bfb      	ldrb	r3, [r7, #15]
 800ca32:	2b28      	cmp	r3, #40	@ 0x28
 800ca34:	d110      	bne.n	800ca58 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	4a0a      	ldr	r2, [pc, #40]	@ (800ca64 <I2C_ITError+0x260>)
 800ca3a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2200      	movs	r2, #0
 800ca40:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2220      	movs	r2, #32
 800ca46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f7fe fe29 	bl	800b6aa <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ca58:	bf00      	nop
 800ca5a:	3710      	adds	r7, #16
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}
 800ca60:	0800d23d 	.word	0x0800d23d
 800ca64:	ffff0000 	.word	0xffff0000

0800ca68 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b088      	sub	sp, #32
 800ca6c:	af02      	add	r7, sp, #8
 800ca6e:	60f8      	str	r0, [r7, #12]
 800ca70:	607a      	str	r2, [r7, #4]
 800ca72:	603b      	str	r3, [r7, #0]
 800ca74:	460b      	mov	r3, r1
 800ca76:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca7c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800ca7e:	697b      	ldr	r3, [r7, #20]
 800ca80:	2b08      	cmp	r3, #8
 800ca82:	d006      	beq.n	800ca92 <I2C_MasterRequestWrite+0x2a>
 800ca84:	697b      	ldr	r3, [r7, #20]
 800ca86:	2b01      	cmp	r3, #1
 800ca88:	d003      	beq.n	800ca92 <I2C_MasterRequestWrite+0x2a>
 800ca8a:	697b      	ldr	r3, [r7, #20]
 800ca8c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800ca90:	d108      	bne.n	800caa4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	681a      	ldr	r2, [r3, #0]
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800caa0:	601a      	str	r2, [r3, #0]
 800caa2:	e00b      	b.n	800cabc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800caa8:	2b12      	cmp	r3, #18
 800caaa:	d107      	bne.n	800cabc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	681a      	ldr	r2, [r3, #0]
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800caba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	9300      	str	r3, [sp, #0]
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2200      	movs	r2, #0
 800cac4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800cac8:	68f8      	ldr	r0, [r7, #12]
 800caca:	f000 fc5f 	bl	800d38c <I2C_WaitOnFlagUntilTimeout>
 800cace:	4603      	mov	r3, r0
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d00d      	beq.n	800caf0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cade:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cae2:	d103      	bne.n	800caec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800caea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800caec:	2303      	movs	r3, #3
 800caee:	e035      	b.n	800cb5c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	691b      	ldr	r3, [r3, #16]
 800caf4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800caf8:	d108      	bne.n	800cb0c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800cafa:	897b      	ldrh	r3, [r7, #10]
 800cafc:	b2db      	uxtb	r3, r3
 800cafe:	461a      	mov	r2, r3
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800cb08:	611a      	str	r2, [r3, #16]
 800cb0a:	e01b      	b.n	800cb44 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800cb0c:	897b      	ldrh	r3, [r7, #10]
 800cb0e:	11db      	asrs	r3, r3, #7
 800cb10:	b2db      	uxtb	r3, r3
 800cb12:	f003 0306 	and.w	r3, r3, #6
 800cb16:	b2db      	uxtb	r3, r3
 800cb18:	f063 030f 	orn	r3, r3, #15
 800cb1c:	b2da      	uxtb	r2, r3
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	687a      	ldr	r2, [r7, #4]
 800cb28:	490e      	ldr	r1, [pc, #56]	@ (800cb64 <I2C_MasterRequestWrite+0xfc>)
 800cb2a:	68f8      	ldr	r0, [r7, #12]
 800cb2c:	f000 fca8 	bl	800d480 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800cb30:	4603      	mov	r3, r0
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d001      	beq.n	800cb3a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800cb36:	2301      	movs	r3, #1
 800cb38:	e010      	b.n	800cb5c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800cb3a:	897b      	ldrh	r3, [r7, #10]
 800cb3c:	b2da      	uxtb	r2, r3
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	687a      	ldr	r2, [r7, #4]
 800cb48:	4907      	ldr	r1, [pc, #28]	@ (800cb68 <I2C_MasterRequestWrite+0x100>)
 800cb4a:	68f8      	ldr	r0, [r7, #12]
 800cb4c:	f000 fc98 	bl	800d480 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800cb50:	4603      	mov	r3, r0
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d001      	beq.n	800cb5a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800cb56:	2301      	movs	r3, #1
 800cb58:	e000      	b.n	800cb5c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800cb5a:	2300      	movs	r3, #0
}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	3718      	adds	r7, #24
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}
 800cb64:	00010008 	.word	0x00010008
 800cb68:	00010002 	.word	0x00010002

0800cb6c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b088      	sub	sp, #32
 800cb70:	af02      	add	r7, sp, #8
 800cb72:	60f8      	str	r0, [r7, #12]
 800cb74:	607a      	str	r2, [r7, #4]
 800cb76:	603b      	str	r3, [r7, #0]
 800cb78:	460b      	mov	r3, r1
 800cb7a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb80:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	681a      	ldr	r2, [r3, #0]
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800cb90:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800cb92:	697b      	ldr	r3, [r7, #20]
 800cb94:	2b08      	cmp	r3, #8
 800cb96:	d006      	beq.n	800cba6 <I2C_MasterRequestRead+0x3a>
 800cb98:	697b      	ldr	r3, [r7, #20]
 800cb9a:	2b01      	cmp	r3, #1
 800cb9c:	d003      	beq.n	800cba6 <I2C_MasterRequestRead+0x3a>
 800cb9e:	697b      	ldr	r3, [r7, #20]
 800cba0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800cba4:	d108      	bne.n	800cbb8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	681a      	ldr	r2, [r3, #0]
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cbb4:	601a      	str	r2, [r3, #0]
 800cbb6:	e00b      	b.n	800cbd0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cbbc:	2b11      	cmp	r3, #17
 800cbbe:	d107      	bne.n	800cbd0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	681a      	ldr	r2, [r3, #0]
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cbce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	9300      	str	r3, [sp, #0]
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800cbdc:	68f8      	ldr	r0, [r7, #12]
 800cbde:	f000 fbd5 	bl	800d38c <I2C_WaitOnFlagUntilTimeout>
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d00d      	beq.n	800cc04 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cbf2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cbf6:	d103      	bne.n	800cc00 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cbfe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800cc00:	2303      	movs	r3, #3
 800cc02:	e079      	b.n	800ccf8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	691b      	ldr	r3, [r3, #16]
 800cc08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cc0c:	d108      	bne.n	800cc20 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800cc0e:	897b      	ldrh	r3, [r7, #10]
 800cc10:	b2db      	uxtb	r3, r3
 800cc12:	f043 0301 	orr.w	r3, r3, #1
 800cc16:	b2da      	uxtb	r2, r3
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	611a      	str	r2, [r3, #16]
 800cc1e:	e05f      	b.n	800cce0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800cc20:	897b      	ldrh	r3, [r7, #10]
 800cc22:	11db      	asrs	r3, r3, #7
 800cc24:	b2db      	uxtb	r3, r3
 800cc26:	f003 0306 	and.w	r3, r3, #6
 800cc2a:	b2db      	uxtb	r3, r3
 800cc2c:	f063 030f 	orn	r3, r3, #15
 800cc30:	b2da      	uxtb	r2, r3
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	687a      	ldr	r2, [r7, #4]
 800cc3c:	4930      	ldr	r1, [pc, #192]	@ (800cd00 <I2C_MasterRequestRead+0x194>)
 800cc3e:	68f8      	ldr	r0, [r7, #12]
 800cc40:	f000 fc1e 	bl	800d480 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800cc44:	4603      	mov	r3, r0
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d001      	beq.n	800cc4e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	e054      	b.n	800ccf8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800cc4e:	897b      	ldrh	r3, [r7, #10]
 800cc50:	b2da      	uxtb	r2, r3
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	687a      	ldr	r2, [r7, #4]
 800cc5c:	4929      	ldr	r1, [pc, #164]	@ (800cd04 <I2C_MasterRequestRead+0x198>)
 800cc5e:	68f8      	ldr	r0, [r7, #12]
 800cc60:	f000 fc0e 	bl	800d480 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800cc64:	4603      	mov	r3, r0
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d001      	beq.n	800cc6e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800cc6a:	2301      	movs	r3, #1
 800cc6c:	e044      	b.n	800ccf8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cc6e:	2300      	movs	r3, #0
 800cc70:	613b      	str	r3, [r7, #16]
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	695b      	ldr	r3, [r3, #20]
 800cc78:	613b      	str	r3, [r7, #16]
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	699b      	ldr	r3, [r3, #24]
 800cc80:	613b      	str	r3, [r7, #16]
 800cc82:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	681a      	ldr	r2, [r3, #0]
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cc92:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	9300      	str	r3, [sp, #0]
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800cca0:	68f8      	ldr	r0, [r7, #12]
 800cca2:	f000 fb73 	bl	800d38c <I2C_WaitOnFlagUntilTimeout>
 800cca6:	4603      	mov	r3, r0
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d00d      	beq.n	800ccc8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ccb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ccba:	d103      	bne.n	800ccc4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ccc2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800ccc4:	2303      	movs	r3, #3
 800ccc6:	e017      	b.n	800ccf8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800ccc8:	897b      	ldrh	r3, [r7, #10]
 800ccca:	11db      	asrs	r3, r3, #7
 800cccc:	b2db      	uxtb	r3, r3
 800ccce:	f003 0306 	and.w	r3, r3, #6
 800ccd2:	b2db      	uxtb	r3, r3
 800ccd4:	f063 030e 	orn	r3, r3, #14
 800ccd8:	b2da      	uxtb	r2, r3
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	687a      	ldr	r2, [r7, #4]
 800cce4:	4907      	ldr	r1, [pc, #28]	@ (800cd04 <I2C_MasterRequestRead+0x198>)
 800cce6:	68f8      	ldr	r0, [r7, #12]
 800cce8:	f000 fbca 	bl	800d480 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ccec:	4603      	mov	r3, r0
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d001      	beq.n	800ccf6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800ccf2:	2301      	movs	r3, #1
 800ccf4:	e000      	b.n	800ccf8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800ccf6:	2300      	movs	r3, #0
}
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	3718      	adds	r7, #24
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	bd80      	pop	{r7, pc}
 800cd00:	00010008 	.word	0x00010008
 800cd04:	00010002 	.word	0x00010002

0800cd08 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b088      	sub	sp, #32
 800cd0c:	af02      	add	r7, sp, #8
 800cd0e:	60f8      	str	r0, [r7, #12]
 800cd10:	4608      	mov	r0, r1
 800cd12:	4611      	mov	r1, r2
 800cd14:	461a      	mov	r2, r3
 800cd16:	4603      	mov	r3, r0
 800cd18:	817b      	strh	r3, [r7, #10]
 800cd1a:	460b      	mov	r3, r1
 800cd1c:	813b      	strh	r3, [r7, #8]
 800cd1e:	4613      	mov	r3, r2
 800cd20:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	681a      	ldr	r2, [r3, #0]
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cd30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800cd32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd34:	9300      	str	r3, [sp, #0]
 800cd36:	6a3b      	ldr	r3, [r7, #32]
 800cd38:	2200      	movs	r2, #0
 800cd3a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800cd3e:	68f8      	ldr	r0, [r7, #12]
 800cd40:	f000 fb24 	bl	800d38c <I2C_WaitOnFlagUntilTimeout>
 800cd44:	4603      	mov	r3, r0
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d00d      	beq.n	800cd66 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cd54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cd58:	d103      	bne.n	800cd62 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cd60:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800cd62:	2303      	movs	r3, #3
 800cd64:	e05f      	b.n	800ce26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800cd66:	897b      	ldrh	r3, [r7, #10]
 800cd68:	b2db      	uxtb	r3, r3
 800cd6a:	461a      	mov	r2, r3
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800cd74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800cd76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd78:	6a3a      	ldr	r2, [r7, #32]
 800cd7a:	492d      	ldr	r1, [pc, #180]	@ (800ce30 <I2C_RequestMemoryWrite+0x128>)
 800cd7c:	68f8      	ldr	r0, [r7, #12]
 800cd7e:	f000 fb7f 	bl	800d480 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800cd82:	4603      	mov	r3, r0
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d001      	beq.n	800cd8c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800cd88:	2301      	movs	r3, #1
 800cd8a:	e04c      	b.n	800ce26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	617b      	str	r3, [r7, #20]
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	695b      	ldr	r3, [r3, #20]
 800cd96:	617b      	str	r3, [r7, #20]
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	699b      	ldr	r3, [r3, #24]
 800cd9e:	617b      	str	r3, [r7, #20]
 800cda0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cda2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cda4:	6a39      	ldr	r1, [r7, #32]
 800cda6:	68f8      	ldr	r0, [r7, #12]
 800cda8:	f000 fc0a 	bl	800d5c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800cdac:	4603      	mov	r3, r0
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d00d      	beq.n	800cdce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdb6:	2b04      	cmp	r3, #4
 800cdb8:	d107      	bne.n	800cdca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	681a      	ldr	r2, [r3, #0]
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cdc8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800cdca:	2301      	movs	r3, #1
 800cdcc:	e02b      	b.n	800ce26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800cdce:	88fb      	ldrh	r3, [r7, #6]
 800cdd0:	2b01      	cmp	r3, #1
 800cdd2:	d105      	bne.n	800cde0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800cdd4:	893b      	ldrh	r3, [r7, #8]
 800cdd6:	b2da      	uxtb	r2, r3
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	611a      	str	r2, [r3, #16]
 800cdde:	e021      	b.n	800ce24 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800cde0:	893b      	ldrh	r3, [r7, #8]
 800cde2:	0a1b      	lsrs	r3, r3, #8
 800cde4:	b29b      	uxth	r3, r3
 800cde6:	b2da      	uxtb	r2, r3
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cdee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cdf0:	6a39      	ldr	r1, [r7, #32]
 800cdf2:	68f8      	ldr	r0, [r7, #12]
 800cdf4:	f000 fbe4 	bl	800d5c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d00d      	beq.n	800ce1a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce02:	2b04      	cmp	r3, #4
 800ce04:	d107      	bne.n	800ce16 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	681a      	ldr	r2, [r3, #0]
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ce14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800ce16:	2301      	movs	r3, #1
 800ce18:	e005      	b.n	800ce26 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ce1a:	893b      	ldrh	r3, [r7, #8]
 800ce1c:	b2da      	uxtb	r2, r3
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800ce24:	2300      	movs	r3, #0
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	3718      	adds	r7, #24
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}
 800ce2e:	bf00      	nop
 800ce30:	00010002 	.word	0x00010002

0800ce34 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b088      	sub	sp, #32
 800ce38:	af02      	add	r7, sp, #8
 800ce3a:	60f8      	str	r0, [r7, #12]
 800ce3c:	4608      	mov	r0, r1
 800ce3e:	4611      	mov	r1, r2
 800ce40:	461a      	mov	r2, r3
 800ce42:	4603      	mov	r3, r0
 800ce44:	817b      	strh	r3, [r7, #10]
 800ce46:	460b      	mov	r3, r1
 800ce48:	813b      	strh	r3, [r7, #8]
 800ce4a:	4613      	mov	r3, r2
 800ce4c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	681a      	ldr	r2, [r3, #0]
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ce5c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	681a      	ldr	r2, [r3, #0]
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ce6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ce6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce70:	9300      	str	r3, [sp, #0]
 800ce72:	6a3b      	ldr	r3, [r7, #32]
 800ce74:	2200      	movs	r2, #0
 800ce76:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800ce7a:	68f8      	ldr	r0, [r7, #12]
 800ce7c:	f000 fa86 	bl	800d38c <I2C_WaitOnFlagUntilTimeout>
 800ce80:	4603      	mov	r3, r0
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d00d      	beq.n	800cea2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ce90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ce94:	d103      	bne.n	800ce9e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ce9c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800ce9e:	2303      	movs	r3, #3
 800cea0:	e0aa      	b.n	800cff8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800cea2:	897b      	ldrh	r3, [r7, #10]
 800cea4:	b2db      	uxtb	r3, r3
 800cea6:	461a      	mov	r2, r3
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800ceb0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ceb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceb4:	6a3a      	ldr	r2, [r7, #32]
 800ceb6:	4952      	ldr	r1, [pc, #328]	@ (800d000 <I2C_RequestMemoryRead+0x1cc>)
 800ceb8:	68f8      	ldr	r0, [r7, #12]
 800ceba:	f000 fae1 	bl	800d480 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800cebe:	4603      	mov	r3, r0
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d001      	beq.n	800cec8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800cec4:	2301      	movs	r3, #1
 800cec6:	e097      	b.n	800cff8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cec8:	2300      	movs	r3, #0
 800ceca:	617b      	str	r3, [r7, #20]
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	695b      	ldr	r3, [r3, #20]
 800ced2:	617b      	str	r3, [r7, #20]
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	699b      	ldr	r3, [r3, #24]
 800ceda:	617b      	str	r3, [r7, #20]
 800cedc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cede:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cee0:	6a39      	ldr	r1, [r7, #32]
 800cee2:	68f8      	ldr	r0, [r7, #12]
 800cee4:	f000 fb6c 	bl	800d5c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800cee8:	4603      	mov	r3, r0
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d00d      	beq.n	800cf0a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cef2:	2b04      	cmp	r3, #4
 800cef4:	d107      	bne.n	800cf06 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	681a      	ldr	r2, [r3, #0]
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cf04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800cf06:	2301      	movs	r3, #1
 800cf08:	e076      	b.n	800cff8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800cf0a:	88fb      	ldrh	r3, [r7, #6]
 800cf0c:	2b01      	cmp	r3, #1
 800cf0e:	d105      	bne.n	800cf1c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800cf10:	893b      	ldrh	r3, [r7, #8]
 800cf12:	b2da      	uxtb	r2, r3
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	611a      	str	r2, [r3, #16]
 800cf1a:	e021      	b.n	800cf60 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800cf1c:	893b      	ldrh	r3, [r7, #8]
 800cf1e:	0a1b      	lsrs	r3, r3, #8
 800cf20:	b29b      	uxth	r3, r3
 800cf22:	b2da      	uxtb	r2, r3
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cf2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf2c:	6a39      	ldr	r1, [r7, #32]
 800cf2e:	68f8      	ldr	r0, [r7, #12]
 800cf30:	f000 fb46 	bl	800d5c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800cf34:	4603      	mov	r3, r0
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d00d      	beq.n	800cf56 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf3e:	2b04      	cmp	r3, #4
 800cf40:	d107      	bne.n	800cf52 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	681a      	ldr	r2, [r3, #0]
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cf50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800cf52:	2301      	movs	r3, #1
 800cf54:	e050      	b.n	800cff8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800cf56:	893b      	ldrh	r3, [r7, #8]
 800cf58:	b2da      	uxtb	r2, r3
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cf60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf62:	6a39      	ldr	r1, [r7, #32]
 800cf64:	68f8      	ldr	r0, [r7, #12]
 800cf66:	f000 fb2b 	bl	800d5c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d00d      	beq.n	800cf8c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf74:	2b04      	cmp	r3, #4
 800cf76:	d107      	bne.n	800cf88 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	681a      	ldr	r2, [r3, #0]
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cf86:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800cf88:	2301      	movs	r3, #1
 800cf8a:	e035      	b.n	800cff8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	681a      	ldr	r2, [r3, #0]
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cf9a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800cf9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf9e:	9300      	str	r3, [sp, #0]
 800cfa0:	6a3b      	ldr	r3, [r7, #32]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800cfa8:	68f8      	ldr	r0, [r7, #12]
 800cfaa:	f000 f9ef 	bl	800d38c <I2C_WaitOnFlagUntilTimeout>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d00d      	beq.n	800cfd0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cfbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cfc2:	d103      	bne.n	800cfcc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cfca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800cfcc:	2303      	movs	r3, #3
 800cfce:	e013      	b.n	800cff8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800cfd0:	897b      	ldrh	r3, [r7, #10]
 800cfd2:	b2db      	uxtb	r3, r3
 800cfd4:	f043 0301 	orr.w	r3, r3, #1
 800cfd8:	b2da      	uxtb	r2, r3
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800cfe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfe2:	6a3a      	ldr	r2, [r7, #32]
 800cfe4:	4906      	ldr	r1, [pc, #24]	@ (800d000 <I2C_RequestMemoryRead+0x1cc>)
 800cfe6:	68f8      	ldr	r0, [r7, #12]
 800cfe8:	f000 fa4a 	bl	800d480 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800cfec:	4603      	mov	r3, r0
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d001      	beq.n	800cff6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800cff2:	2301      	movs	r3, #1
 800cff4:	e000      	b.n	800cff8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800cff6:	2300      	movs	r3, #0
}
 800cff8:	4618      	mov	r0, r3
 800cffa:	3718      	adds	r7, #24
 800cffc:	46bd      	mov	sp, r7
 800cffe:	bd80      	pop	{r7, pc}
 800d000:	00010002 	.word	0x00010002

0800d004 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b086      	sub	sp, #24
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d010:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d012:	697b      	ldr	r3, [r7, #20]
 800d014:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d018:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800d01a:	697b      	ldr	r3, [r7, #20]
 800d01c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d020:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800d022:	697b      	ldr	r3, [r7, #20]
 800d024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d026:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800d028:	697b      	ldr	r3, [r7, #20]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	685a      	ldr	r2, [r3, #4]
 800d02e:	697b      	ldr	r3, [r7, #20]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800d036:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800d038:	697b      	ldr	r3, [r7, #20]
 800d03a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d003      	beq.n	800d048 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800d040:	697b      	ldr	r3, [r7, #20]
 800d042:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d044:	2200      	movs	r2, #0
 800d046:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d003      	beq.n	800d058 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800d050:	697b      	ldr	r3, [r7, #20]
 800d052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d054:	2200      	movs	r2, #0
 800d056:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800d058:	7cfb      	ldrb	r3, [r7, #19]
 800d05a:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800d05e:	2b21      	cmp	r3, #33	@ 0x21
 800d060:	d007      	beq.n	800d072 <I2C_DMAXferCplt+0x6e>
 800d062:	7cfb      	ldrb	r3, [r7, #19]
 800d064:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 800d068:	2b22      	cmp	r3, #34	@ 0x22
 800d06a:	d131      	bne.n	800d0d0 <I2C_DMAXferCplt+0xcc>
 800d06c:	7cbb      	ldrb	r3, [r7, #18]
 800d06e:	2b20      	cmp	r3, #32
 800d070:	d12e      	bne.n	800d0d0 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d072:	697b      	ldr	r3, [r7, #20]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	685a      	ldr	r2, [r3, #4]
 800d078:	697b      	ldr	r3, [r7, #20]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d080:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800d082:	697b      	ldr	r3, [r7, #20]
 800d084:	2200      	movs	r2, #0
 800d086:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800d088:	7cfb      	ldrb	r3, [r7, #19]
 800d08a:	2b29      	cmp	r3, #41	@ 0x29
 800d08c:	d10a      	bne.n	800d0a4 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800d08e:	697b      	ldr	r3, [r7, #20]
 800d090:	2221      	movs	r2, #33	@ 0x21
 800d092:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800d094:	697b      	ldr	r3, [r7, #20]
 800d096:	2228      	movs	r2, #40	@ 0x28
 800d098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800d09c:	6978      	ldr	r0, [r7, #20]
 800d09e:	f7fe fae2 	bl	800b666 <HAL_I2C_SlaveTxCpltCallback>
 800d0a2:	e00c      	b.n	800d0be <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800d0a4:	7cfb      	ldrb	r3, [r7, #19]
 800d0a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800d0a8:	d109      	bne.n	800d0be <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800d0aa:	697b      	ldr	r3, [r7, #20]
 800d0ac:	2222      	movs	r2, #34	@ 0x22
 800d0ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800d0b0:	697b      	ldr	r3, [r7, #20]
 800d0b2:	2228      	movs	r2, #40	@ 0x28
 800d0b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800d0b8:	6978      	ldr	r0, [r7, #20]
 800d0ba:	f7fe fade 	bl	800b67a <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800d0be:	697b      	ldr	r3, [r7, #20]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	685a      	ldr	r2, [r3, #4]
 800d0c4:	697b      	ldr	r3, [r7, #20]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800d0cc:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800d0ce:	e074      	b.n	800d1ba <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800d0d0:	697b      	ldr	r3, [r7, #20]
 800d0d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d0d6:	b2db      	uxtb	r3, r3
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d06e      	beq.n	800d1ba <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 800d0dc:	697b      	ldr	r3, [r7, #20]
 800d0de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d0e0:	b29b      	uxth	r3, r3
 800d0e2:	2b01      	cmp	r3, #1
 800d0e4:	d107      	bne.n	800d0f6 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d0e6:	697b      	ldr	r3, [r7, #20]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	681a      	ldr	r2, [r3, #0]
 800d0ec:	697b      	ldr	r3, [r7, #20]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d0f4:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800d0f6:	697b      	ldr	r3, [r7, #20]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	685a      	ldr	r2, [r3, #4]
 800d0fc:	697b      	ldr	r3, [r7, #20]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800d104:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800d10c:	d009      	beq.n	800d122 <I2C_DMAXferCplt+0x11e>
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	2b08      	cmp	r3, #8
 800d112:	d006      	beq.n	800d122 <I2C_DMAXferCplt+0x11e>
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800d11a:	d002      	beq.n	800d122 <I2C_DMAXferCplt+0x11e>
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	2b20      	cmp	r3, #32
 800d120:	d107      	bne.n	800d132 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d122:	697b      	ldr	r3, [r7, #20]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	681a      	ldr	r2, [r3, #0]
 800d128:	697b      	ldr	r3, [r7, #20]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d130:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800d132:	697b      	ldr	r3, [r7, #20]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	685a      	ldr	r2, [r3, #4]
 800d138:	697b      	ldr	r3, [r7, #20]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800d140:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d142:	697b      	ldr	r3, [r7, #20]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	685a      	ldr	r2, [r3, #4]
 800d148:	697b      	ldr	r3, [r7, #20]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d150:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800d152:	697b      	ldr	r3, [r7, #20]
 800d154:	2200      	movs	r2, #0
 800d156:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800d158:	697b      	ldr	r3, [r7, #20]
 800d15a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d003      	beq.n	800d168 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800d160:	6978      	ldr	r0, [r7, #20]
 800d162:	f7fe fac0 	bl	800b6e6 <HAL_I2C_ErrorCallback>
}
 800d166:	e028      	b.n	800d1ba <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 800d168:	697b      	ldr	r3, [r7, #20]
 800d16a:	2220      	movs	r2, #32
 800d16c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d170:	697b      	ldr	r3, [r7, #20]
 800d172:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d176:	b2db      	uxtb	r3, r3
 800d178:	2b40      	cmp	r3, #64	@ 0x40
 800d17a:	d10a      	bne.n	800d192 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d17c:	697b      	ldr	r3, [r7, #20]
 800d17e:	2200      	movs	r2, #0
 800d180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800d184:	697b      	ldr	r3, [r7, #20]
 800d186:	2200      	movs	r2, #0
 800d188:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800d18a:	6978      	ldr	r0, [r7, #20]
 800d18c:	f7fe faa1 	bl	800b6d2 <HAL_I2C_MemRxCpltCallback>
}
 800d190:	e013      	b.n	800d1ba <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d192:	697b      	ldr	r3, [r7, #20]
 800d194:	2200      	movs	r2, #0
 800d196:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	2b08      	cmp	r3, #8
 800d19e:	d002      	beq.n	800d1a6 <I2C_DMAXferCplt+0x1a2>
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	2b20      	cmp	r3, #32
 800d1a4:	d103      	bne.n	800d1ae <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 800d1a6:	697b      	ldr	r3, [r7, #20]
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	631a      	str	r2, [r3, #48]	@ 0x30
 800d1ac:	e002      	b.n	800d1b4 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800d1ae:	697b      	ldr	r3, [r7, #20]
 800d1b0:	2212      	movs	r2, #18
 800d1b2:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800d1b4:	6978      	ldr	r0, [r7, #20]
 800d1b6:	f7fe fa4c 	bl	800b652 <HAL_I2C_MasterRxCpltCallback>
}
 800d1ba:	bf00      	nop
 800d1bc:	3718      	adds	r7, #24
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}

0800d1c2 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800d1c2:	b580      	push	{r7, lr}
 800d1c4:	b084      	sub	sp, #16
 800d1c6:	af00      	add	r7, sp, #0
 800d1c8:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d1ce:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d003      	beq.n	800d1e0 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1dc:	2200      	movs	r2, #0
 800d1de:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d003      	beq.n	800d1f0 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	f7f9 fd98 	bl	8006d26 <HAL_DMA_GetError>
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	2b02      	cmp	r3, #2
 800d1fa:	d01b      	beq.n	800d234 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	681a      	ldr	r2, [r3, #0]
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d20a:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	2200      	movs	r2, #0
 800d210:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	2220      	movs	r2, #32
 800d216:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	2200      	movs	r2, #0
 800d21e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d226:	f043 0210 	orr.w	r2, r3, #16
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800d22e:	68f8      	ldr	r0, [r7, #12]
 800d230:	f7fe fa59 	bl	800b6e6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d234:	bf00      	nop
 800d236:	3710      	adds	r7, #16
 800d238:	46bd      	mov	sp, r7
 800d23a:	bd80      	pop	{r7, pc}

0800d23c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b086      	sub	sp, #24
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d244:	2300      	movs	r3, #0
 800d246:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d24c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d24e:	697b      	ldr	r3, [r7, #20]
 800d250:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d254:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800d256:	4b4b      	ldr	r3, [pc, #300]	@ (800d384 <I2C_DMAAbort+0x148>)
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	08db      	lsrs	r3, r3, #3
 800d25c:	4a4a      	ldr	r2, [pc, #296]	@ (800d388 <I2C_DMAAbort+0x14c>)
 800d25e:	fba2 2303 	umull	r2, r3, r2, r3
 800d262:	0a1a      	lsrs	r2, r3, #8
 800d264:	4613      	mov	r3, r2
 800d266:	009b      	lsls	r3, r3, #2
 800d268:	4413      	add	r3, r2
 800d26a:	00da      	lsls	r2, r3, #3
 800d26c:	1ad3      	subs	r3, r2, r3
 800d26e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d106      	bne.n	800d284 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d276:	697b      	ldr	r3, [r7, #20]
 800d278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d27a:	f043 0220 	orr.w	r2, r3, #32
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800d282:	e00a      	b.n	800d29a <I2C_DMAAbort+0x5e>
    }
    count--;
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	3b01      	subs	r3, #1
 800d288:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800d28a:	697b      	ldr	r3, [r7, #20]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d294:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d298:	d0ea      	beq.n	800d270 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800d29a:	697b      	ldr	r3, [r7, #20]
 800d29c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d003      	beq.n	800d2aa <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800d2a2:	697b      	ldr	r3, [r7, #20]
 800d2a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800d2aa:	697b      	ldr	r3, [r7, #20]
 800d2ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d003      	beq.n	800d2ba <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800d2b2:	697b      	ldr	r3, [r7, #20]
 800d2b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d2ba:	697b      	ldr	r3, [r7, #20]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	681a      	ldr	r2, [r3, #0]
 800d2c0:	697b      	ldr	r3, [r7, #20]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d2c8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800d2ca:	697b      	ldr	r3, [r7, #20]
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800d2d0:	697b      	ldr	r3, [r7, #20]
 800d2d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d003      	beq.n	800d2e0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800d2d8:	697b      	ldr	r3, [r7, #20]
 800d2da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2dc:	2200      	movs	r2, #0
 800d2de:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800d2e0:	697b      	ldr	r3, [r7, #20]
 800d2e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d003      	beq.n	800d2f0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800d2e8:	697b      	ldr	r3, [r7, #20]
 800d2ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800d2f0:	697b      	ldr	r3, [r7, #20]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	681a      	ldr	r2, [r3, #0]
 800d2f6:	697b      	ldr	r3, [r7, #20]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	f022 0201 	bic.w	r2, r2, #1
 800d2fe:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800d300:	697b      	ldr	r3, [r7, #20]
 800d302:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d306:	b2db      	uxtb	r3, r3
 800d308:	2b60      	cmp	r3, #96	@ 0x60
 800d30a:	d10e      	bne.n	800d32a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800d30c:	697b      	ldr	r3, [r7, #20]
 800d30e:	2220      	movs	r2, #32
 800d310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d314:	697b      	ldr	r3, [r7, #20]
 800d316:	2200      	movs	r2, #0
 800d318:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800d31c:	697b      	ldr	r3, [r7, #20]
 800d31e:	2200      	movs	r2, #0
 800d320:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800d322:	6978      	ldr	r0, [r7, #20]
 800d324:	f7fe f9e9 	bl	800b6fa <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d328:	e027      	b.n	800d37a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800d32a:	7cfb      	ldrb	r3, [r7, #19]
 800d32c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800d330:	2b28      	cmp	r3, #40	@ 0x28
 800d332:	d117      	bne.n	800d364 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800d334:	697b      	ldr	r3, [r7, #20]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	681a      	ldr	r2, [r3, #0]
 800d33a:	697b      	ldr	r3, [r7, #20]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	f042 0201 	orr.w	r2, r2, #1
 800d342:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d344:	697b      	ldr	r3, [r7, #20]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	681a      	ldr	r2, [r3, #0]
 800d34a:	697b      	ldr	r3, [r7, #20]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d352:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800d354:	697b      	ldr	r3, [r7, #20]
 800d356:	2200      	movs	r2, #0
 800d358:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800d35a:	697b      	ldr	r3, [r7, #20]
 800d35c:	2228      	movs	r2, #40	@ 0x28
 800d35e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800d362:	e007      	b.n	800d374 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800d364:	697b      	ldr	r3, [r7, #20]
 800d366:	2220      	movs	r2, #32
 800d368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d36c:	697b      	ldr	r3, [r7, #20]
 800d36e:	2200      	movs	r2, #0
 800d370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800d374:	6978      	ldr	r0, [r7, #20]
 800d376:	f7fe f9b6 	bl	800b6e6 <HAL_I2C_ErrorCallback>
}
 800d37a:	bf00      	nop
 800d37c:	3718      	adds	r7, #24
 800d37e:	46bd      	mov	sp, r7
 800d380:	bd80      	pop	{r7, pc}
 800d382:	bf00      	nop
 800d384:	20000030 	.word	0x20000030
 800d388:	14f8b589 	.word	0x14f8b589

0800d38c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b084      	sub	sp, #16
 800d390:	af00      	add	r7, sp, #0
 800d392:	60f8      	str	r0, [r7, #12]
 800d394:	60b9      	str	r1, [r7, #8]
 800d396:	603b      	str	r3, [r7, #0]
 800d398:	4613      	mov	r3, r2
 800d39a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d39c:	e048      	b.n	800d430 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d39e:	683b      	ldr	r3, [r7, #0]
 800d3a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3a4:	d044      	beq.n	800d430 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d3a6:	f7f8 fac9 	bl	800593c <HAL_GetTick>
 800d3aa:	4602      	mov	r2, r0
 800d3ac:	69bb      	ldr	r3, [r7, #24]
 800d3ae:	1ad3      	subs	r3, r2, r3
 800d3b0:	683a      	ldr	r2, [r7, #0]
 800d3b2:	429a      	cmp	r2, r3
 800d3b4:	d302      	bcc.n	800d3bc <I2C_WaitOnFlagUntilTimeout+0x30>
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d139      	bne.n	800d430 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800d3bc:	68bb      	ldr	r3, [r7, #8]
 800d3be:	0c1b      	lsrs	r3, r3, #16
 800d3c0:	b2db      	uxtb	r3, r3
 800d3c2:	2b01      	cmp	r3, #1
 800d3c4:	d10d      	bne.n	800d3e2 <I2C_WaitOnFlagUntilTimeout+0x56>
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	695b      	ldr	r3, [r3, #20]
 800d3cc:	43da      	mvns	r2, r3
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	4013      	ands	r3, r2
 800d3d2:	b29b      	uxth	r3, r3
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	bf0c      	ite	eq
 800d3d8:	2301      	moveq	r3, #1
 800d3da:	2300      	movne	r3, #0
 800d3dc:	b2db      	uxtb	r3, r3
 800d3de:	461a      	mov	r2, r3
 800d3e0:	e00c      	b.n	800d3fc <I2C_WaitOnFlagUntilTimeout+0x70>
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	699b      	ldr	r3, [r3, #24]
 800d3e8:	43da      	mvns	r2, r3
 800d3ea:	68bb      	ldr	r3, [r7, #8]
 800d3ec:	4013      	ands	r3, r2
 800d3ee:	b29b      	uxth	r3, r3
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	bf0c      	ite	eq
 800d3f4:	2301      	moveq	r3, #1
 800d3f6:	2300      	movne	r3, #0
 800d3f8:	b2db      	uxtb	r3, r3
 800d3fa:	461a      	mov	r2, r3
 800d3fc:	79fb      	ldrb	r3, [r7, #7]
 800d3fe:	429a      	cmp	r2, r3
 800d400:	d116      	bne.n	800d430 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	2200      	movs	r2, #0
 800d406:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	2220      	movs	r2, #32
 800d40c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	2200      	movs	r2, #0
 800d414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d41c:	f043 0220 	orr.w	r2, r3, #32
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	2200      	movs	r2, #0
 800d428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800d42c:	2301      	movs	r3, #1
 800d42e:	e023      	b.n	800d478 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d430:	68bb      	ldr	r3, [r7, #8]
 800d432:	0c1b      	lsrs	r3, r3, #16
 800d434:	b2db      	uxtb	r3, r3
 800d436:	2b01      	cmp	r3, #1
 800d438:	d10d      	bne.n	800d456 <I2C_WaitOnFlagUntilTimeout+0xca>
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	695b      	ldr	r3, [r3, #20]
 800d440:	43da      	mvns	r2, r3
 800d442:	68bb      	ldr	r3, [r7, #8]
 800d444:	4013      	ands	r3, r2
 800d446:	b29b      	uxth	r3, r3
 800d448:	2b00      	cmp	r3, #0
 800d44a:	bf0c      	ite	eq
 800d44c:	2301      	moveq	r3, #1
 800d44e:	2300      	movne	r3, #0
 800d450:	b2db      	uxtb	r3, r3
 800d452:	461a      	mov	r2, r3
 800d454:	e00c      	b.n	800d470 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	699b      	ldr	r3, [r3, #24]
 800d45c:	43da      	mvns	r2, r3
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	4013      	ands	r3, r2
 800d462:	b29b      	uxth	r3, r3
 800d464:	2b00      	cmp	r3, #0
 800d466:	bf0c      	ite	eq
 800d468:	2301      	moveq	r3, #1
 800d46a:	2300      	movne	r3, #0
 800d46c:	b2db      	uxtb	r3, r3
 800d46e:	461a      	mov	r2, r3
 800d470:	79fb      	ldrb	r3, [r7, #7]
 800d472:	429a      	cmp	r2, r3
 800d474:	d093      	beq.n	800d39e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d476:	2300      	movs	r3, #0
}
 800d478:	4618      	mov	r0, r3
 800d47a:	3710      	adds	r7, #16
 800d47c:	46bd      	mov	sp, r7
 800d47e:	bd80      	pop	{r7, pc}

0800d480 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b084      	sub	sp, #16
 800d484:	af00      	add	r7, sp, #0
 800d486:	60f8      	str	r0, [r7, #12]
 800d488:	60b9      	str	r1, [r7, #8]
 800d48a:	607a      	str	r2, [r7, #4]
 800d48c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800d48e:	e071      	b.n	800d574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	695b      	ldr	r3, [r3, #20]
 800d496:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d49a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d49e:	d123      	bne.n	800d4e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	681a      	ldr	r2, [r3, #0]
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d4ae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800d4b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	2200      	movs	r2, #0
 800d4be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	2220      	movs	r2, #32
 800d4c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4d4:	f043 0204 	orr.w	r2, r3, #4
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	2200      	movs	r2, #0
 800d4e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800d4e4:	2301      	movs	r3, #1
 800d4e6:	e067      	b.n	800d5b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4ee:	d041      	beq.n	800d574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d4f0:	f7f8 fa24 	bl	800593c <HAL_GetTick>
 800d4f4:	4602      	mov	r2, r0
 800d4f6:	683b      	ldr	r3, [r7, #0]
 800d4f8:	1ad3      	subs	r3, r2, r3
 800d4fa:	687a      	ldr	r2, [r7, #4]
 800d4fc:	429a      	cmp	r2, r3
 800d4fe:	d302      	bcc.n	800d506 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d136      	bne.n	800d574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800d506:	68bb      	ldr	r3, [r7, #8]
 800d508:	0c1b      	lsrs	r3, r3, #16
 800d50a:	b2db      	uxtb	r3, r3
 800d50c:	2b01      	cmp	r3, #1
 800d50e:	d10c      	bne.n	800d52a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	695b      	ldr	r3, [r3, #20]
 800d516:	43da      	mvns	r2, r3
 800d518:	68bb      	ldr	r3, [r7, #8]
 800d51a:	4013      	ands	r3, r2
 800d51c:	b29b      	uxth	r3, r3
 800d51e:	2b00      	cmp	r3, #0
 800d520:	bf14      	ite	ne
 800d522:	2301      	movne	r3, #1
 800d524:	2300      	moveq	r3, #0
 800d526:	b2db      	uxtb	r3, r3
 800d528:	e00b      	b.n	800d542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	699b      	ldr	r3, [r3, #24]
 800d530:	43da      	mvns	r2, r3
 800d532:	68bb      	ldr	r3, [r7, #8]
 800d534:	4013      	ands	r3, r2
 800d536:	b29b      	uxth	r3, r3
 800d538:	2b00      	cmp	r3, #0
 800d53a:	bf14      	ite	ne
 800d53c:	2301      	movne	r3, #1
 800d53e:	2300      	moveq	r3, #0
 800d540:	b2db      	uxtb	r3, r3
 800d542:	2b00      	cmp	r3, #0
 800d544:	d016      	beq.n	800d574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	2200      	movs	r2, #0
 800d54a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	2220      	movs	r2, #32
 800d550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	2200      	movs	r2, #0
 800d558:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d560:	f043 0220 	orr.w	r2, r3, #32
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	2200      	movs	r2, #0
 800d56c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800d570:	2301      	movs	r3, #1
 800d572:	e021      	b.n	800d5b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800d574:	68bb      	ldr	r3, [r7, #8]
 800d576:	0c1b      	lsrs	r3, r3, #16
 800d578:	b2db      	uxtb	r3, r3
 800d57a:	2b01      	cmp	r3, #1
 800d57c:	d10c      	bne.n	800d598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	695b      	ldr	r3, [r3, #20]
 800d584:	43da      	mvns	r2, r3
 800d586:	68bb      	ldr	r3, [r7, #8]
 800d588:	4013      	ands	r3, r2
 800d58a:	b29b      	uxth	r3, r3
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	bf14      	ite	ne
 800d590:	2301      	movne	r3, #1
 800d592:	2300      	moveq	r3, #0
 800d594:	b2db      	uxtb	r3, r3
 800d596:	e00b      	b.n	800d5b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	699b      	ldr	r3, [r3, #24]
 800d59e:	43da      	mvns	r2, r3
 800d5a0:	68bb      	ldr	r3, [r7, #8]
 800d5a2:	4013      	ands	r3, r2
 800d5a4:	b29b      	uxth	r3, r3
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	bf14      	ite	ne
 800d5aa:	2301      	movne	r3, #1
 800d5ac:	2300      	moveq	r3, #0
 800d5ae:	b2db      	uxtb	r3, r3
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	f47f af6d 	bne.w	800d490 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800d5b6:	2300      	movs	r3, #0
}
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	3710      	adds	r7, #16
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	bd80      	pop	{r7, pc}

0800d5c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b084      	sub	sp, #16
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	60f8      	str	r0, [r7, #12]
 800d5c8:	60b9      	str	r1, [r7, #8]
 800d5ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d5cc:	e034      	b.n	800d638 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800d5ce:	68f8      	ldr	r0, [r7, #12]
 800d5d0:	f000 f959 	bl	800d886 <I2C_IsAcknowledgeFailed>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d001      	beq.n	800d5de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800d5da:	2301      	movs	r3, #1
 800d5dc:	e034      	b.n	800d648 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d5de:	68bb      	ldr	r3, [r7, #8]
 800d5e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5e4:	d028      	beq.n	800d638 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d5e6:	f7f8 f9a9 	bl	800593c <HAL_GetTick>
 800d5ea:	4602      	mov	r2, r0
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	1ad3      	subs	r3, r2, r3
 800d5f0:	68ba      	ldr	r2, [r7, #8]
 800d5f2:	429a      	cmp	r2, r3
 800d5f4:	d302      	bcc.n	800d5fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800d5f6:	68bb      	ldr	r3, [r7, #8]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d11d      	bne.n	800d638 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	695b      	ldr	r3, [r3, #20]
 800d602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d606:	2b80      	cmp	r3, #128	@ 0x80
 800d608:	d016      	beq.n	800d638 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	2200      	movs	r2, #0
 800d60e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	2220      	movs	r2, #32
 800d614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	2200      	movs	r2, #0
 800d61c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d624:	f043 0220 	orr.w	r2, r3, #32
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	2200      	movs	r2, #0
 800d630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800d634:	2301      	movs	r3, #1
 800d636:	e007      	b.n	800d648 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	695b      	ldr	r3, [r3, #20]
 800d63e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d642:	2b80      	cmp	r3, #128	@ 0x80
 800d644:	d1c3      	bne.n	800d5ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800d646:	2300      	movs	r3, #0
}
 800d648:	4618      	mov	r0, r3
 800d64a:	3710      	adds	r7, #16
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}

0800d650 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b084      	sub	sp, #16
 800d654:	af00      	add	r7, sp, #0
 800d656:	60f8      	str	r0, [r7, #12]
 800d658:	60b9      	str	r1, [r7, #8]
 800d65a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800d65c:	e034      	b.n	800d6c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800d65e:	68f8      	ldr	r0, [r7, #12]
 800d660:	f000 f911 	bl	800d886 <I2C_IsAcknowledgeFailed>
 800d664:	4603      	mov	r3, r0
 800d666:	2b00      	cmp	r3, #0
 800d668:	d001      	beq.n	800d66e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800d66a:	2301      	movs	r3, #1
 800d66c:	e034      	b.n	800d6d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d66e:	68bb      	ldr	r3, [r7, #8]
 800d670:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d674:	d028      	beq.n	800d6c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d676:	f7f8 f961 	bl	800593c <HAL_GetTick>
 800d67a:	4602      	mov	r2, r0
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	1ad3      	subs	r3, r2, r3
 800d680:	68ba      	ldr	r2, [r7, #8]
 800d682:	429a      	cmp	r2, r3
 800d684:	d302      	bcc.n	800d68c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800d686:	68bb      	ldr	r3, [r7, #8]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d11d      	bne.n	800d6c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	695b      	ldr	r3, [r3, #20]
 800d692:	f003 0304 	and.w	r3, r3, #4
 800d696:	2b04      	cmp	r3, #4
 800d698:	d016      	beq.n	800d6c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	2200      	movs	r2, #0
 800d69e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	2220      	movs	r2, #32
 800d6a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6b4:	f043 0220 	orr.w	r2, r3, #32
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	2200      	movs	r2, #0
 800d6c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800d6c4:	2301      	movs	r3, #1
 800d6c6:	e007      	b.n	800d6d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	695b      	ldr	r3, [r3, #20]
 800d6ce:	f003 0304 	and.w	r3, r3, #4
 800d6d2:	2b04      	cmp	r3, #4
 800d6d4:	d1c3      	bne.n	800d65e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800d6d6:	2300      	movs	r3, #0
}
 800d6d8:	4618      	mov	r0, r3
 800d6da:	3710      	adds	r7, #16
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	bd80      	pop	{r7, pc}

0800d6e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b084      	sub	sp, #16
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	60f8      	str	r0, [r7, #12]
 800d6e8:	60b9      	str	r1, [r7, #8]
 800d6ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d6ec:	e030      	b.n	800d750 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800d6ee:	68f8      	ldr	r0, [r7, #12]
 800d6f0:	f000 f8c9 	bl	800d886 <I2C_IsAcknowledgeFailed>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d001      	beq.n	800d6fe <I2C_WaitOnSTOPFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800d6fa:	2301      	movs	r3, #1
 800d6fc:	e030      	b.n	800d760 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d6fe:	f7f8 f91d 	bl	800593c <HAL_GetTick>
 800d702:	4602      	mov	r2, r0
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	1ad3      	subs	r3, r2, r3
 800d708:	68ba      	ldr	r2, [r7, #8]
 800d70a:	429a      	cmp	r2, r3
 800d70c:	d302      	bcc.n	800d714 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d11d      	bne.n	800d750 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	695b      	ldr	r3, [r3, #20]
 800d71a:	f003 0310 	and.w	r3, r3, #16
 800d71e:	2b10      	cmp	r3, #16
 800d720:	d016      	beq.n	800d750 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	2200      	movs	r2, #0
 800d726:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	2220      	movs	r2, #32
 800d72c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	2200      	movs	r2, #0
 800d734:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d73c:	f043 0220 	orr.w	r2, r3, #32
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	2200      	movs	r2, #0
 800d748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800d74c:	2301      	movs	r3, #1
 800d74e:	e007      	b.n	800d760 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	695b      	ldr	r3, [r3, #20]
 800d756:	f003 0310 	and.w	r3, r3, #16
 800d75a:	2b10      	cmp	r3, #16
 800d75c:	d1c7      	bne.n	800d6ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d75e:	2300      	movs	r3, #0
}
 800d760:	4618      	mov	r0, r3
 800d762:	3710      	adds	r7, #16
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}

0800d768 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800d768:	b480      	push	{r7}
 800d76a:	b085      	sub	sp, #20
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d770:	2300      	movs	r3, #0
 800d772:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800d774:	4b13      	ldr	r3, [pc, #76]	@ (800d7c4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	08db      	lsrs	r3, r3, #3
 800d77a:	4a13      	ldr	r2, [pc, #76]	@ (800d7c8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800d77c:	fba2 2303 	umull	r2, r3, r2, r3
 800d780:	0a1a      	lsrs	r2, r3, #8
 800d782:	4613      	mov	r3, r2
 800d784:	009b      	lsls	r3, r3, #2
 800d786:	4413      	add	r3, r2
 800d788:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	3b01      	subs	r3, #1
 800d78e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d107      	bne.n	800d7a6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d79a:	f043 0220 	orr.w	r2, r3, #32
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800d7a2:	2301      	movs	r3, #1
 800d7a4:	e008      	b.n	800d7b8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d7b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d7b4:	d0e9      	beq.n	800d78a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800d7b6:	2300      	movs	r3, #0
}
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	3714      	adds	r7, #20
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c2:	4770      	bx	lr
 800d7c4:	20000030 	.word	0x20000030
 800d7c8:	14f8b589 	.word	0x14f8b589

0800d7cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b084      	sub	sp, #16
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	60f8      	str	r0, [r7, #12]
 800d7d4:	60b9      	str	r1, [r7, #8]
 800d7d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d7d8:	e049      	b.n	800d86e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	695b      	ldr	r3, [r3, #20]
 800d7e0:	f003 0310 	and.w	r3, r3, #16
 800d7e4:	2b10      	cmp	r3, #16
 800d7e6:	d119      	bne.n	800d81c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	f06f 0210 	mvn.w	r2, #16
 800d7f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	2220      	movs	r2, #32
 800d7fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	2200      	movs	r2, #0
 800d804:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	2200      	movs	r2, #0
 800d814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800d818:	2301      	movs	r3, #1
 800d81a:	e030      	b.n	800d87e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d81c:	f7f8 f88e 	bl	800593c <HAL_GetTick>
 800d820:	4602      	mov	r2, r0
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	1ad3      	subs	r3, r2, r3
 800d826:	68ba      	ldr	r2, [r7, #8]
 800d828:	429a      	cmp	r2, r3
 800d82a:	d302      	bcc.n	800d832 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800d82c:	68bb      	ldr	r3, [r7, #8]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d11d      	bne.n	800d86e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	695b      	ldr	r3, [r3, #20]
 800d838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d83c:	2b40      	cmp	r3, #64	@ 0x40
 800d83e:	d016      	beq.n	800d86e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	2200      	movs	r2, #0
 800d844:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	2220      	movs	r2, #32
 800d84a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	2200      	movs	r2, #0
 800d852:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d85a:	f043 0220 	orr.w	r2, r3, #32
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	2200      	movs	r2, #0
 800d866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800d86a:	2301      	movs	r3, #1
 800d86c:	e007      	b.n	800d87e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	695b      	ldr	r3, [r3, #20]
 800d874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d878:	2b40      	cmp	r3, #64	@ 0x40
 800d87a:	d1ae      	bne.n	800d7da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d87c:	2300      	movs	r3, #0
}
 800d87e:	4618      	mov	r0, r3
 800d880:	3710      	adds	r7, #16
 800d882:	46bd      	mov	sp, r7
 800d884:	bd80      	pop	{r7, pc}

0800d886 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800d886:	b480      	push	{r7}
 800d888:	b083      	sub	sp, #12
 800d88a:	af00      	add	r7, sp, #0
 800d88c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	695b      	ldr	r3, [r3, #20]
 800d894:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d898:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d89c:	d11b      	bne.n	800d8d6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800d8a6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	2220      	movs	r2, #32
 800d8b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8c2:	f043 0204 	orr.w	r2, r3, #4
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800d8d2:	2301      	movs	r3, #1
 800d8d4:	e000      	b.n	800d8d8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800d8d6:	2300      	movs	r3, #0
}
 800d8d8:	4618      	mov	r0, r3
 800d8da:	370c      	adds	r7, #12
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e2:	4770      	bx	lr

0800d8e4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800d8e4:	b480      	push	{r7}
 800d8e6:	b083      	sub	sp, #12
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8f0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800d8f4:	d103      	bne.n	800d8fe <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	2201      	movs	r2, #1
 800d8fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800d8fc:	e007      	b.n	800d90e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d902:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800d906:	d102      	bne.n	800d90e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2208      	movs	r2, #8
 800d90c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800d90e:	bf00      	nop
 800d910:	370c      	adds	r7, #12
 800d912:	46bd      	mov	sp, r7
 800d914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d918:	4770      	bx	lr
 800d91a:	bf00      	nop
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800d91c:	b480      	push	{r7}
 800d91e:	af00      	add	r7, sp, #0
  return HAL_OK;
 800d920:	2300      	movs	r3, #0
}
 800d922:	4618      	mov	r0, r3
 800d924:	46bd      	mov	sp, r7
 800d926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92a:	4770      	bx	lr

0800d92c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b086      	sub	sp, #24
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d101      	bne.n	800d93e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d93a:	2301      	movs	r3, #1
 800d93c:	e267      	b.n	800de0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	f003 0301 	and.w	r3, r3, #1
 800d946:	2b00      	cmp	r3, #0
 800d948:	d075      	beq.n	800da36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d94a:	4b88      	ldr	r3, [pc, #544]	@ (800db6c <HAL_RCC_OscConfig+0x240>)
 800d94c:	689b      	ldr	r3, [r3, #8]
 800d94e:	f003 030c 	and.w	r3, r3, #12
 800d952:	2b04      	cmp	r3, #4
 800d954:	d00c      	beq.n	800d970 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d956:	4b85      	ldr	r3, [pc, #532]	@ (800db6c <HAL_RCC_OscConfig+0x240>)
 800d958:	689b      	ldr	r3, [r3, #8]
 800d95a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d95e:	2b08      	cmp	r3, #8
 800d960:	d112      	bne.n	800d988 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d962:	4b82      	ldr	r3, [pc, #520]	@ (800db6c <HAL_RCC_OscConfig+0x240>)
 800d964:	685b      	ldr	r3, [r3, #4]
 800d966:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d96a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d96e:	d10b      	bne.n	800d988 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d970:	4b7e      	ldr	r3, [pc, #504]	@ (800db6c <HAL_RCC_OscConfig+0x240>)
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d05b      	beq.n	800da34 <HAL_RCC_OscConfig+0x108>
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	685b      	ldr	r3, [r3, #4]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d157      	bne.n	800da34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d984:	2301      	movs	r3, #1
 800d986:	e242      	b.n	800de0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	685b      	ldr	r3, [r3, #4]
 800d98c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d990:	d106      	bne.n	800d9a0 <HAL_RCC_OscConfig+0x74>
 800d992:	4b76      	ldr	r3, [pc, #472]	@ (800db6c <HAL_RCC_OscConfig+0x240>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	4a75      	ldr	r2, [pc, #468]	@ (800db6c <HAL_RCC_OscConfig+0x240>)
 800d998:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d99c:	6013      	str	r3, [r2, #0]
 800d99e:	e01d      	b.n	800d9dc <HAL_RCC_OscConfig+0xb0>
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	685b      	ldr	r3, [r3, #4]
 800d9a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d9a8:	d10c      	bne.n	800d9c4 <HAL_RCC_OscConfig+0x98>
 800d9aa:	4b70      	ldr	r3, [pc, #448]	@ (800db6c <HAL_RCC_OscConfig+0x240>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	4a6f      	ldr	r2, [pc, #444]	@ (800db6c <HAL_RCC_OscConfig+0x240>)
 800d9b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d9b4:	6013      	str	r3, [r2, #0]
 800d9b6:	4b6d      	ldr	r3, [pc, #436]	@ (800db6c <HAL_RCC_OscConfig+0x240>)
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	4a6c      	ldr	r2, [pc, #432]	@ (800db6c <HAL_RCC_OscConfig+0x240>)
 800d9bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d9c0:	6013      	str	r3, [r2, #0]
 800d9c2:	e00b      	b.n	800d9dc <HAL_RCC_OscConfig+0xb0>
 800d9c4:	4b69      	ldr	r3, [pc, #420]	@ (800db6c <HAL_RCC_OscConfig+0x240>)
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	4a68      	ldr	r2, [pc, #416]	@ (800db6c <HAL_RCC_OscConfig+0x240>)
 800d9ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d9ce:	6013      	str	r3, [r2, #0]
 800d9d0:	4b66      	ldr	r3, [pc, #408]	@ (800db6c <HAL_RCC_OscConfig+0x240>)
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	4a65      	ldr	r2, [pc, #404]	@ (800db6c <HAL_RCC_OscConfig+0x240>)
 800d9d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d9da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	685b      	ldr	r3, [r3, #4]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d013      	beq.n	800da0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d9e4:	f7f7 ffaa 	bl	800593c <HAL_GetTick>
 800d9e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d9ea:	e008      	b.n	800d9fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d9ec:	f7f7 ffa6 	bl	800593c <HAL_GetTick>
 800d9f0:	4602      	mov	r2, r0
 800d9f2:	693b      	ldr	r3, [r7, #16]
 800d9f4:	1ad3      	subs	r3, r2, r3
 800d9f6:	2b64      	cmp	r3, #100	@ 0x64
 800d9f8:	d901      	bls.n	800d9fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d9fa:	2303      	movs	r3, #3
 800d9fc:	e207      	b.n	800de0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d9fe:	4b5b      	ldr	r3, [pc, #364]	@ (800db6c <HAL_RCC_OscConfig+0x240>)
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800da06:	2b00      	cmp	r3, #0
 800da08:	d0f0      	beq.n	800d9ec <HAL_RCC_OscConfig+0xc0>
 800da0a:	e014      	b.n	800da36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800da0c:	f7f7 ff96 	bl	800593c <HAL_GetTick>
 800da10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800da12:	e008      	b.n	800da26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800da14:	f7f7 ff92 	bl	800593c <HAL_GetTick>
 800da18:	4602      	mov	r2, r0
 800da1a:	693b      	ldr	r3, [r7, #16]
 800da1c:	1ad3      	subs	r3, r2, r3
 800da1e:	2b64      	cmp	r3, #100	@ 0x64
 800da20:	d901      	bls.n	800da26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800da22:	2303      	movs	r3, #3
 800da24:	e1f3      	b.n	800de0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800da26:	4b51      	ldr	r3, [pc, #324]	@ (800db6c <HAL_RCC_OscConfig+0x240>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d1f0      	bne.n	800da14 <HAL_RCC_OscConfig+0xe8>
 800da32:	e000      	b.n	800da36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800da34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	f003 0302 	and.w	r3, r3, #2
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d063      	beq.n	800db0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800da42:	4b4a      	ldr	r3, [pc, #296]	@ (800db6c <HAL_RCC_OscConfig+0x240>)
 800da44:	689b      	ldr	r3, [r3, #8]
 800da46:	f003 030c 	and.w	r3, r3, #12
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d00b      	beq.n	800da66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800da4e:	4b47      	ldr	r3, [pc, #284]	@ (800db6c <HAL_RCC_OscConfig+0x240>)
 800da50:	689b      	ldr	r3, [r3, #8]
 800da52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800da56:	2b08      	cmp	r3, #8
 800da58:	d11c      	bne.n	800da94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800da5a:	4b44      	ldr	r3, [pc, #272]	@ (800db6c <HAL_RCC_OscConfig+0x240>)
 800da5c:	685b      	ldr	r3, [r3, #4]
 800da5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800da62:	2b00      	cmp	r3, #0
 800da64:	d116      	bne.n	800da94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800da66:	4b41      	ldr	r3, [pc, #260]	@ (800db6c <HAL_RCC_OscConfig+0x240>)
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	f003 0302 	and.w	r3, r3, #2
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d005      	beq.n	800da7e <HAL_RCC_OscConfig+0x152>
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	68db      	ldr	r3, [r3, #12]
 800da76:	2b01      	cmp	r3, #1
 800da78:	d001      	beq.n	800da7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800da7a:	2301      	movs	r3, #1
 800da7c:	e1c7      	b.n	800de0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800da7e:	4b3b      	ldr	r3, [pc, #236]	@ (800db6c <HAL_RCC_OscConfig+0x240>)
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	691b      	ldr	r3, [r3, #16]
 800da8a:	00db      	lsls	r3, r3, #3
 800da8c:	4937      	ldr	r1, [pc, #220]	@ (800db6c <HAL_RCC_OscConfig+0x240>)
 800da8e:	4313      	orrs	r3, r2
 800da90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800da92:	e03a      	b.n	800db0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	68db      	ldr	r3, [r3, #12]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d020      	beq.n	800dade <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800da9c:	4b34      	ldr	r3, [pc, #208]	@ (800db70 <HAL_RCC_OscConfig+0x244>)
 800da9e:	2201      	movs	r2, #1
 800daa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800daa2:	f7f7 ff4b 	bl	800593c <HAL_GetTick>
 800daa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800daa8:	e008      	b.n	800dabc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800daaa:	f7f7 ff47 	bl	800593c <HAL_GetTick>
 800daae:	4602      	mov	r2, r0
 800dab0:	693b      	ldr	r3, [r7, #16]
 800dab2:	1ad3      	subs	r3, r2, r3
 800dab4:	2b02      	cmp	r3, #2
 800dab6:	d901      	bls.n	800dabc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800dab8:	2303      	movs	r3, #3
 800daba:	e1a8      	b.n	800de0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dabc:	4b2b      	ldr	r3, [pc, #172]	@ (800db6c <HAL_RCC_OscConfig+0x240>)
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	f003 0302 	and.w	r3, r3, #2
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d0f0      	beq.n	800daaa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dac8:	4b28      	ldr	r3, [pc, #160]	@ (800db6c <HAL_RCC_OscConfig+0x240>)
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	691b      	ldr	r3, [r3, #16]
 800dad4:	00db      	lsls	r3, r3, #3
 800dad6:	4925      	ldr	r1, [pc, #148]	@ (800db6c <HAL_RCC_OscConfig+0x240>)
 800dad8:	4313      	orrs	r3, r2
 800dada:	600b      	str	r3, [r1, #0]
 800dadc:	e015      	b.n	800db0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800dade:	4b24      	ldr	r3, [pc, #144]	@ (800db70 <HAL_RCC_OscConfig+0x244>)
 800dae0:	2200      	movs	r2, #0
 800dae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dae4:	f7f7 ff2a 	bl	800593c <HAL_GetTick>
 800dae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800daea:	e008      	b.n	800dafe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800daec:	f7f7 ff26 	bl	800593c <HAL_GetTick>
 800daf0:	4602      	mov	r2, r0
 800daf2:	693b      	ldr	r3, [r7, #16]
 800daf4:	1ad3      	subs	r3, r2, r3
 800daf6:	2b02      	cmp	r3, #2
 800daf8:	d901      	bls.n	800dafe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800dafa:	2303      	movs	r3, #3
 800dafc:	e187      	b.n	800de0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800dafe:	4b1b      	ldr	r3, [pc, #108]	@ (800db6c <HAL_RCC_OscConfig+0x240>)
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	f003 0302 	and.w	r3, r3, #2
 800db06:	2b00      	cmp	r3, #0
 800db08:	d1f0      	bne.n	800daec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	f003 0308 	and.w	r3, r3, #8
 800db12:	2b00      	cmp	r3, #0
 800db14:	d036      	beq.n	800db84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	695b      	ldr	r3, [r3, #20]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d016      	beq.n	800db4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800db1e:	4b15      	ldr	r3, [pc, #84]	@ (800db74 <HAL_RCC_OscConfig+0x248>)
 800db20:	2201      	movs	r2, #1
 800db22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800db24:	f7f7 ff0a 	bl	800593c <HAL_GetTick>
 800db28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800db2a:	e008      	b.n	800db3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800db2c:	f7f7 ff06 	bl	800593c <HAL_GetTick>
 800db30:	4602      	mov	r2, r0
 800db32:	693b      	ldr	r3, [r7, #16]
 800db34:	1ad3      	subs	r3, r2, r3
 800db36:	2b02      	cmp	r3, #2
 800db38:	d901      	bls.n	800db3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800db3a:	2303      	movs	r3, #3
 800db3c:	e167      	b.n	800de0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800db3e:	4b0b      	ldr	r3, [pc, #44]	@ (800db6c <HAL_RCC_OscConfig+0x240>)
 800db40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800db42:	f003 0302 	and.w	r3, r3, #2
 800db46:	2b00      	cmp	r3, #0
 800db48:	d0f0      	beq.n	800db2c <HAL_RCC_OscConfig+0x200>
 800db4a:	e01b      	b.n	800db84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800db4c:	4b09      	ldr	r3, [pc, #36]	@ (800db74 <HAL_RCC_OscConfig+0x248>)
 800db4e:	2200      	movs	r2, #0
 800db50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800db52:	f7f7 fef3 	bl	800593c <HAL_GetTick>
 800db56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800db58:	e00e      	b.n	800db78 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800db5a:	f7f7 feef 	bl	800593c <HAL_GetTick>
 800db5e:	4602      	mov	r2, r0
 800db60:	693b      	ldr	r3, [r7, #16]
 800db62:	1ad3      	subs	r3, r2, r3
 800db64:	2b02      	cmp	r3, #2
 800db66:	d907      	bls.n	800db78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800db68:	2303      	movs	r3, #3
 800db6a:	e150      	b.n	800de0e <HAL_RCC_OscConfig+0x4e2>
 800db6c:	40023800 	.word	0x40023800
 800db70:	42470000 	.word	0x42470000
 800db74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800db78:	4b88      	ldr	r3, [pc, #544]	@ (800dd9c <HAL_RCC_OscConfig+0x470>)
 800db7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800db7c:	f003 0302 	and.w	r3, r3, #2
 800db80:	2b00      	cmp	r3, #0
 800db82:	d1ea      	bne.n	800db5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	f003 0304 	and.w	r3, r3, #4
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	f000 8097 	beq.w	800dcc0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800db92:	2300      	movs	r3, #0
 800db94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800db96:	4b81      	ldr	r3, [pc, #516]	@ (800dd9c <HAL_RCC_OscConfig+0x470>)
 800db98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d10f      	bne.n	800dbc2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800dba2:	2300      	movs	r3, #0
 800dba4:	60bb      	str	r3, [r7, #8]
 800dba6:	4b7d      	ldr	r3, [pc, #500]	@ (800dd9c <HAL_RCC_OscConfig+0x470>)
 800dba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dbaa:	4a7c      	ldr	r2, [pc, #496]	@ (800dd9c <HAL_RCC_OscConfig+0x470>)
 800dbac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dbb0:	6413      	str	r3, [r2, #64]	@ 0x40
 800dbb2:	4b7a      	ldr	r3, [pc, #488]	@ (800dd9c <HAL_RCC_OscConfig+0x470>)
 800dbb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dbb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800dbba:	60bb      	str	r3, [r7, #8]
 800dbbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800dbbe:	2301      	movs	r3, #1
 800dbc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800dbc2:	4b77      	ldr	r3, [pc, #476]	@ (800dda0 <HAL_RCC_OscConfig+0x474>)
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d118      	bne.n	800dc00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800dbce:	4b74      	ldr	r3, [pc, #464]	@ (800dda0 <HAL_RCC_OscConfig+0x474>)
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	4a73      	ldr	r2, [pc, #460]	@ (800dda0 <HAL_RCC_OscConfig+0x474>)
 800dbd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dbd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800dbda:	f7f7 feaf 	bl	800593c <HAL_GetTick>
 800dbde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800dbe0:	e008      	b.n	800dbf4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800dbe2:	f7f7 feab 	bl	800593c <HAL_GetTick>
 800dbe6:	4602      	mov	r2, r0
 800dbe8:	693b      	ldr	r3, [r7, #16]
 800dbea:	1ad3      	subs	r3, r2, r3
 800dbec:	2b02      	cmp	r3, #2
 800dbee:	d901      	bls.n	800dbf4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800dbf0:	2303      	movs	r3, #3
 800dbf2:	e10c      	b.n	800de0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800dbf4:	4b6a      	ldr	r3, [pc, #424]	@ (800dda0 <HAL_RCC_OscConfig+0x474>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d0f0      	beq.n	800dbe2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	689b      	ldr	r3, [r3, #8]
 800dc04:	2b01      	cmp	r3, #1
 800dc06:	d106      	bne.n	800dc16 <HAL_RCC_OscConfig+0x2ea>
 800dc08:	4b64      	ldr	r3, [pc, #400]	@ (800dd9c <HAL_RCC_OscConfig+0x470>)
 800dc0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dc0c:	4a63      	ldr	r2, [pc, #396]	@ (800dd9c <HAL_RCC_OscConfig+0x470>)
 800dc0e:	f043 0301 	orr.w	r3, r3, #1
 800dc12:	6713      	str	r3, [r2, #112]	@ 0x70
 800dc14:	e01c      	b.n	800dc50 <HAL_RCC_OscConfig+0x324>
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	689b      	ldr	r3, [r3, #8]
 800dc1a:	2b05      	cmp	r3, #5
 800dc1c:	d10c      	bne.n	800dc38 <HAL_RCC_OscConfig+0x30c>
 800dc1e:	4b5f      	ldr	r3, [pc, #380]	@ (800dd9c <HAL_RCC_OscConfig+0x470>)
 800dc20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dc22:	4a5e      	ldr	r2, [pc, #376]	@ (800dd9c <HAL_RCC_OscConfig+0x470>)
 800dc24:	f043 0304 	orr.w	r3, r3, #4
 800dc28:	6713      	str	r3, [r2, #112]	@ 0x70
 800dc2a:	4b5c      	ldr	r3, [pc, #368]	@ (800dd9c <HAL_RCC_OscConfig+0x470>)
 800dc2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dc2e:	4a5b      	ldr	r2, [pc, #364]	@ (800dd9c <HAL_RCC_OscConfig+0x470>)
 800dc30:	f043 0301 	orr.w	r3, r3, #1
 800dc34:	6713      	str	r3, [r2, #112]	@ 0x70
 800dc36:	e00b      	b.n	800dc50 <HAL_RCC_OscConfig+0x324>
 800dc38:	4b58      	ldr	r3, [pc, #352]	@ (800dd9c <HAL_RCC_OscConfig+0x470>)
 800dc3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dc3c:	4a57      	ldr	r2, [pc, #348]	@ (800dd9c <HAL_RCC_OscConfig+0x470>)
 800dc3e:	f023 0301 	bic.w	r3, r3, #1
 800dc42:	6713      	str	r3, [r2, #112]	@ 0x70
 800dc44:	4b55      	ldr	r3, [pc, #340]	@ (800dd9c <HAL_RCC_OscConfig+0x470>)
 800dc46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dc48:	4a54      	ldr	r2, [pc, #336]	@ (800dd9c <HAL_RCC_OscConfig+0x470>)
 800dc4a:	f023 0304 	bic.w	r3, r3, #4
 800dc4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	689b      	ldr	r3, [r3, #8]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d015      	beq.n	800dc84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dc58:	f7f7 fe70 	bl	800593c <HAL_GetTick>
 800dc5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800dc5e:	e00a      	b.n	800dc76 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800dc60:	f7f7 fe6c 	bl	800593c <HAL_GetTick>
 800dc64:	4602      	mov	r2, r0
 800dc66:	693b      	ldr	r3, [r7, #16]
 800dc68:	1ad3      	subs	r3, r2, r3
 800dc6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dc6e:	4293      	cmp	r3, r2
 800dc70:	d901      	bls.n	800dc76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800dc72:	2303      	movs	r3, #3
 800dc74:	e0cb      	b.n	800de0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800dc76:	4b49      	ldr	r3, [pc, #292]	@ (800dd9c <HAL_RCC_OscConfig+0x470>)
 800dc78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dc7a:	f003 0302 	and.w	r3, r3, #2
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d0ee      	beq.n	800dc60 <HAL_RCC_OscConfig+0x334>
 800dc82:	e014      	b.n	800dcae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800dc84:	f7f7 fe5a 	bl	800593c <HAL_GetTick>
 800dc88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800dc8a:	e00a      	b.n	800dca2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800dc8c:	f7f7 fe56 	bl	800593c <HAL_GetTick>
 800dc90:	4602      	mov	r2, r0
 800dc92:	693b      	ldr	r3, [r7, #16]
 800dc94:	1ad3      	subs	r3, r2, r3
 800dc96:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dc9a:	4293      	cmp	r3, r2
 800dc9c:	d901      	bls.n	800dca2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800dc9e:	2303      	movs	r3, #3
 800dca0:	e0b5      	b.n	800de0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800dca2:	4b3e      	ldr	r3, [pc, #248]	@ (800dd9c <HAL_RCC_OscConfig+0x470>)
 800dca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dca6:	f003 0302 	and.w	r3, r3, #2
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d1ee      	bne.n	800dc8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800dcae:	7dfb      	ldrb	r3, [r7, #23]
 800dcb0:	2b01      	cmp	r3, #1
 800dcb2:	d105      	bne.n	800dcc0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800dcb4:	4b39      	ldr	r3, [pc, #228]	@ (800dd9c <HAL_RCC_OscConfig+0x470>)
 800dcb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcb8:	4a38      	ldr	r2, [pc, #224]	@ (800dd9c <HAL_RCC_OscConfig+0x470>)
 800dcba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800dcbe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	699b      	ldr	r3, [r3, #24]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	f000 80a1 	beq.w	800de0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800dcca:	4b34      	ldr	r3, [pc, #208]	@ (800dd9c <HAL_RCC_OscConfig+0x470>)
 800dccc:	689b      	ldr	r3, [r3, #8]
 800dcce:	f003 030c 	and.w	r3, r3, #12
 800dcd2:	2b08      	cmp	r3, #8
 800dcd4:	d05c      	beq.n	800dd90 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	699b      	ldr	r3, [r3, #24]
 800dcda:	2b02      	cmp	r3, #2
 800dcdc:	d141      	bne.n	800dd62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dcde:	4b31      	ldr	r3, [pc, #196]	@ (800dda4 <HAL_RCC_OscConfig+0x478>)
 800dce0:	2200      	movs	r2, #0
 800dce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dce4:	f7f7 fe2a 	bl	800593c <HAL_GetTick>
 800dce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dcea:	e008      	b.n	800dcfe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800dcec:	f7f7 fe26 	bl	800593c <HAL_GetTick>
 800dcf0:	4602      	mov	r2, r0
 800dcf2:	693b      	ldr	r3, [r7, #16]
 800dcf4:	1ad3      	subs	r3, r2, r3
 800dcf6:	2b02      	cmp	r3, #2
 800dcf8:	d901      	bls.n	800dcfe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800dcfa:	2303      	movs	r3, #3
 800dcfc:	e087      	b.n	800de0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dcfe:	4b27      	ldr	r3, [pc, #156]	@ (800dd9c <HAL_RCC_OscConfig+0x470>)
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d1f0      	bne.n	800dcec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	69da      	ldr	r2, [r3, #28]
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	6a1b      	ldr	r3, [r3, #32]
 800dd12:	431a      	orrs	r2, r3
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd18:	019b      	lsls	r3, r3, #6
 800dd1a:	431a      	orrs	r2, r3
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd20:	085b      	lsrs	r3, r3, #1
 800dd22:	3b01      	subs	r3, #1
 800dd24:	041b      	lsls	r3, r3, #16
 800dd26:	431a      	orrs	r2, r3
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd2c:	061b      	lsls	r3, r3, #24
 800dd2e:	491b      	ldr	r1, [pc, #108]	@ (800dd9c <HAL_RCC_OscConfig+0x470>)
 800dd30:	4313      	orrs	r3, r2
 800dd32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800dd34:	4b1b      	ldr	r3, [pc, #108]	@ (800dda4 <HAL_RCC_OscConfig+0x478>)
 800dd36:	2201      	movs	r2, #1
 800dd38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dd3a:	f7f7 fdff 	bl	800593c <HAL_GetTick>
 800dd3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dd40:	e008      	b.n	800dd54 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800dd42:	f7f7 fdfb 	bl	800593c <HAL_GetTick>
 800dd46:	4602      	mov	r2, r0
 800dd48:	693b      	ldr	r3, [r7, #16]
 800dd4a:	1ad3      	subs	r3, r2, r3
 800dd4c:	2b02      	cmp	r3, #2
 800dd4e:	d901      	bls.n	800dd54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800dd50:	2303      	movs	r3, #3
 800dd52:	e05c      	b.n	800de0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dd54:	4b11      	ldr	r3, [pc, #68]	@ (800dd9c <HAL_RCC_OscConfig+0x470>)
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d0f0      	beq.n	800dd42 <HAL_RCC_OscConfig+0x416>
 800dd60:	e054      	b.n	800de0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dd62:	4b10      	ldr	r3, [pc, #64]	@ (800dda4 <HAL_RCC_OscConfig+0x478>)
 800dd64:	2200      	movs	r2, #0
 800dd66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dd68:	f7f7 fde8 	bl	800593c <HAL_GetTick>
 800dd6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dd6e:	e008      	b.n	800dd82 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800dd70:	f7f7 fde4 	bl	800593c <HAL_GetTick>
 800dd74:	4602      	mov	r2, r0
 800dd76:	693b      	ldr	r3, [r7, #16]
 800dd78:	1ad3      	subs	r3, r2, r3
 800dd7a:	2b02      	cmp	r3, #2
 800dd7c:	d901      	bls.n	800dd82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800dd7e:	2303      	movs	r3, #3
 800dd80:	e045      	b.n	800de0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dd82:	4b06      	ldr	r3, [pc, #24]	@ (800dd9c <HAL_RCC_OscConfig+0x470>)
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d1f0      	bne.n	800dd70 <HAL_RCC_OscConfig+0x444>
 800dd8e:	e03d      	b.n	800de0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	699b      	ldr	r3, [r3, #24]
 800dd94:	2b01      	cmp	r3, #1
 800dd96:	d107      	bne.n	800dda8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800dd98:	2301      	movs	r3, #1
 800dd9a:	e038      	b.n	800de0e <HAL_RCC_OscConfig+0x4e2>
 800dd9c:	40023800 	.word	0x40023800
 800dda0:	40007000 	.word	0x40007000
 800dda4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800dda8:	4b1b      	ldr	r3, [pc, #108]	@ (800de18 <HAL_RCC_OscConfig+0x4ec>)
 800ddaa:	685b      	ldr	r3, [r3, #4]
 800ddac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	699b      	ldr	r3, [r3, #24]
 800ddb2:	2b01      	cmp	r3, #1
 800ddb4:	d028      	beq.n	800de08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ddc0:	429a      	cmp	r2, r3
 800ddc2:	d121      	bne.n	800de08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ddce:	429a      	cmp	r2, r3
 800ddd0:	d11a      	bne.n	800de08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ddd2:	68fa      	ldr	r2, [r7, #12]
 800ddd4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800ddd8:	4013      	ands	r3, r2
 800ddda:	687a      	ldr	r2, [r7, #4]
 800dddc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ddde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800dde0:	4293      	cmp	r3, r2
 800dde2:	d111      	bne.n	800de08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddee:	085b      	lsrs	r3, r3, #1
 800ddf0:	3b01      	subs	r3, #1
 800ddf2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ddf4:	429a      	cmp	r2, r3
 800ddf6:	d107      	bne.n	800de08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800de04:	429a      	cmp	r2, r3
 800de06:	d001      	beq.n	800de0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800de08:	2301      	movs	r3, #1
 800de0a:	e000      	b.n	800de0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800de0c:	2300      	movs	r3, #0
}
 800de0e:	4618      	mov	r0, r3
 800de10:	3718      	adds	r7, #24
 800de12:	46bd      	mov	sp, r7
 800de14:	bd80      	pop	{r7, pc}
 800de16:	bf00      	nop
 800de18:	40023800 	.word	0x40023800

0800de1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b084      	sub	sp, #16
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
 800de24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d101      	bne.n	800de30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800de2c:	2301      	movs	r3, #1
 800de2e:	e0cc      	b.n	800dfca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800de30:	4b68      	ldr	r3, [pc, #416]	@ (800dfd4 <HAL_RCC_ClockConfig+0x1b8>)
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	f003 0307 	and.w	r3, r3, #7
 800de38:	683a      	ldr	r2, [r7, #0]
 800de3a:	429a      	cmp	r2, r3
 800de3c:	d90c      	bls.n	800de58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800de3e:	4b65      	ldr	r3, [pc, #404]	@ (800dfd4 <HAL_RCC_ClockConfig+0x1b8>)
 800de40:	683a      	ldr	r2, [r7, #0]
 800de42:	b2d2      	uxtb	r2, r2
 800de44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800de46:	4b63      	ldr	r3, [pc, #396]	@ (800dfd4 <HAL_RCC_ClockConfig+0x1b8>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	f003 0307 	and.w	r3, r3, #7
 800de4e:	683a      	ldr	r2, [r7, #0]
 800de50:	429a      	cmp	r2, r3
 800de52:	d001      	beq.n	800de58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800de54:	2301      	movs	r3, #1
 800de56:	e0b8      	b.n	800dfca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	f003 0302 	and.w	r3, r3, #2
 800de60:	2b00      	cmp	r3, #0
 800de62:	d020      	beq.n	800dea6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	f003 0304 	and.w	r3, r3, #4
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d005      	beq.n	800de7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800de70:	4b59      	ldr	r3, [pc, #356]	@ (800dfd8 <HAL_RCC_ClockConfig+0x1bc>)
 800de72:	689b      	ldr	r3, [r3, #8]
 800de74:	4a58      	ldr	r2, [pc, #352]	@ (800dfd8 <HAL_RCC_ClockConfig+0x1bc>)
 800de76:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800de7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	f003 0308 	and.w	r3, r3, #8
 800de84:	2b00      	cmp	r3, #0
 800de86:	d005      	beq.n	800de94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800de88:	4b53      	ldr	r3, [pc, #332]	@ (800dfd8 <HAL_RCC_ClockConfig+0x1bc>)
 800de8a:	689b      	ldr	r3, [r3, #8]
 800de8c:	4a52      	ldr	r2, [pc, #328]	@ (800dfd8 <HAL_RCC_ClockConfig+0x1bc>)
 800de8e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800de92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800de94:	4b50      	ldr	r3, [pc, #320]	@ (800dfd8 <HAL_RCC_ClockConfig+0x1bc>)
 800de96:	689b      	ldr	r3, [r3, #8]
 800de98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	689b      	ldr	r3, [r3, #8]
 800dea0:	494d      	ldr	r1, [pc, #308]	@ (800dfd8 <HAL_RCC_ClockConfig+0x1bc>)
 800dea2:	4313      	orrs	r3, r2
 800dea4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	f003 0301 	and.w	r3, r3, #1
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d044      	beq.n	800df3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	685b      	ldr	r3, [r3, #4]
 800deb6:	2b01      	cmp	r3, #1
 800deb8:	d107      	bne.n	800deca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800deba:	4b47      	ldr	r3, [pc, #284]	@ (800dfd8 <HAL_RCC_ClockConfig+0x1bc>)
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d119      	bne.n	800defa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dec6:	2301      	movs	r3, #1
 800dec8:	e07f      	b.n	800dfca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	685b      	ldr	r3, [r3, #4]
 800dece:	2b02      	cmp	r3, #2
 800ded0:	d003      	beq.n	800deda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ded6:	2b03      	cmp	r3, #3
 800ded8:	d107      	bne.n	800deea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800deda:	4b3f      	ldr	r3, [pc, #252]	@ (800dfd8 <HAL_RCC_ClockConfig+0x1bc>)
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d109      	bne.n	800defa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dee6:	2301      	movs	r3, #1
 800dee8:	e06f      	b.n	800dfca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800deea:	4b3b      	ldr	r3, [pc, #236]	@ (800dfd8 <HAL_RCC_ClockConfig+0x1bc>)
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	f003 0302 	and.w	r3, r3, #2
 800def2:	2b00      	cmp	r3, #0
 800def4:	d101      	bne.n	800defa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800def6:	2301      	movs	r3, #1
 800def8:	e067      	b.n	800dfca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800defa:	4b37      	ldr	r3, [pc, #220]	@ (800dfd8 <HAL_RCC_ClockConfig+0x1bc>)
 800defc:	689b      	ldr	r3, [r3, #8]
 800defe:	f023 0203 	bic.w	r2, r3, #3
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	685b      	ldr	r3, [r3, #4]
 800df06:	4934      	ldr	r1, [pc, #208]	@ (800dfd8 <HAL_RCC_ClockConfig+0x1bc>)
 800df08:	4313      	orrs	r3, r2
 800df0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800df0c:	f7f7 fd16 	bl	800593c <HAL_GetTick>
 800df10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800df12:	e00a      	b.n	800df2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800df14:	f7f7 fd12 	bl	800593c <HAL_GetTick>
 800df18:	4602      	mov	r2, r0
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	1ad3      	subs	r3, r2, r3
 800df1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800df22:	4293      	cmp	r3, r2
 800df24:	d901      	bls.n	800df2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800df26:	2303      	movs	r3, #3
 800df28:	e04f      	b.n	800dfca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800df2a:	4b2b      	ldr	r3, [pc, #172]	@ (800dfd8 <HAL_RCC_ClockConfig+0x1bc>)
 800df2c:	689b      	ldr	r3, [r3, #8]
 800df2e:	f003 020c 	and.w	r2, r3, #12
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	685b      	ldr	r3, [r3, #4]
 800df36:	009b      	lsls	r3, r3, #2
 800df38:	429a      	cmp	r2, r3
 800df3a:	d1eb      	bne.n	800df14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800df3c:	4b25      	ldr	r3, [pc, #148]	@ (800dfd4 <HAL_RCC_ClockConfig+0x1b8>)
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	f003 0307 	and.w	r3, r3, #7
 800df44:	683a      	ldr	r2, [r7, #0]
 800df46:	429a      	cmp	r2, r3
 800df48:	d20c      	bcs.n	800df64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800df4a:	4b22      	ldr	r3, [pc, #136]	@ (800dfd4 <HAL_RCC_ClockConfig+0x1b8>)
 800df4c:	683a      	ldr	r2, [r7, #0]
 800df4e:	b2d2      	uxtb	r2, r2
 800df50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800df52:	4b20      	ldr	r3, [pc, #128]	@ (800dfd4 <HAL_RCC_ClockConfig+0x1b8>)
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	f003 0307 	and.w	r3, r3, #7
 800df5a:	683a      	ldr	r2, [r7, #0]
 800df5c:	429a      	cmp	r2, r3
 800df5e:	d001      	beq.n	800df64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800df60:	2301      	movs	r3, #1
 800df62:	e032      	b.n	800dfca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	f003 0304 	and.w	r3, r3, #4
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d008      	beq.n	800df82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800df70:	4b19      	ldr	r3, [pc, #100]	@ (800dfd8 <HAL_RCC_ClockConfig+0x1bc>)
 800df72:	689b      	ldr	r3, [r3, #8]
 800df74:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	68db      	ldr	r3, [r3, #12]
 800df7c:	4916      	ldr	r1, [pc, #88]	@ (800dfd8 <HAL_RCC_ClockConfig+0x1bc>)
 800df7e:	4313      	orrs	r3, r2
 800df80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	f003 0308 	and.w	r3, r3, #8
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d009      	beq.n	800dfa2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800df8e:	4b12      	ldr	r3, [pc, #72]	@ (800dfd8 <HAL_RCC_ClockConfig+0x1bc>)
 800df90:	689b      	ldr	r3, [r3, #8]
 800df92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	691b      	ldr	r3, [r3, #16]
 800df9a:	00db      	lsls	r3, r3, #3
 800df9c:	490e      	ldr	r1, [pc, #56]	@ (800dfd8 <HAL_RCC_ClockConfig+0x1bc>)
 800df9e:	4313      	orrs	r3, r2
 800dfa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800dfa2:	f000 f8a1 	bl	800e0e8 <HAL_RCC_GetSysClockFreq>
 800dfa6:	4602      	mov	r2, r0
 800dfa8:	4b0b      	ldr	r3, [pc, #44]	@ (800dfd8 <HAL_RCC_ClockConfig+0x1bc>)
 800dfaa:	689b      	ldr	r3, [r3, #8]
 800dfac:	091b      	lsrs	r3, r3, #4
 800dfae:	f003 030f 	and.w	r3, r3, #15
 800dfb2:	490a      	ldr	r1, [pc, #40]	@ (800dfdc <HAL_RCC_ClockConfig+0x1c0>)
 800dfb4:	5ccb      	ldrb	r3, [r1, r3]
 800dfb6:	fa22 f303 	lsr.w	r3, r2, r3
 800dfba:	4a09      	ldr	r2, [pc, #36]	@ (800dfe0 <HAL_RCC_ClockConfig+0x1c4>)
 800dfbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800dfbe:	4b09      	ldr	r3, [pc, #36]	@ (800dfe4 <HAL_RCC_ClockConfig+0x1c8>)
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f7f7 fc76 	bl	80058b4 <HAL_InitTick>

  return HAL_OK;
 800dfc8:	2300      	movs	r3, #0
}
 800dfca:	4618      	mov	r0, r3
 800dfcc:	3710      	adds	r7, #16
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	bd80      	pop	{r7, pc}
 800dfd2:	bf00      	nop
 800dfd4:	40023c00 	.word	0x40023c00
 800dfd8:	40023800 	.word	0x40023800
 800dfdc:	08029894 	.word	0x08029894
 800dfe0:	20000030 	.word	0x20000030
 800dfe4:	20000044 	.word	0x20000044

0800dfe8 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b08c      	sub	sp, #48	@ 0x30
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	60f8      	str	r0, [r7, #12]
 800dff0:	60b9      	str	r1, [r7, #8]
 800dff2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d129      	bne.n	800e04e <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 800dffa:	2300      	movs	r3, #0
 800dffc:	61bb      	str	r3, [r7, #24]
 800dffe:	4b2b      	ldr	r3, [pc, #172]	@ (800e0ac <HAL_RCC_MCOConfig+0xc4>)
 800e000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e002:	4a2a      	ldr	r2, [pc, #168]	@ (800e0ac <HAL_RCC_MCOConfig+0xc4>)
 800e004:	f043 0301 	orr.w	r3, r3, #1
 800e008:	6313      	str	r3, [r2, #48]	@ 0x30
 800e00a:	4b28      	ldr	r3, [pc, #160]	@ (800e0ac <HAL_RCC_MCOConfig+0xc4>)
 800e00c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e00e:	f003 0301 	and.w	r3, r3, #1
 800e012:	61bb      	str	r3, [r7, #24]
 800e014:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800e016:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e01a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e01c:	2302      	movs	r3, #2
 800e01e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e020:	2303      	movs	r3, #3
 800e022:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e024:	2300      	movs	r3, #0
 800e026:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800e028:	2300      	movs	r3, #0
 800e02a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800e02c:	f107 031c 	add.w	r3, r7, #28
 800e030:	4619      	mov	r1, r3
 800e032:	481f      	ldr	r0, [pc, #124]	@ (800e0b0 <HAL_RCC_MCOConfig+0xc8>)
 800e034:	f7f8 ff62 	bl	8006efc <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800e038:	4b1c      	ldr	r3, [pc, #112]	@ (800e0ac <HAL_RCC_MCOConfig+0xc4>)
 800e03a:	689b      	ldr	r3, [r3, #8]
 800e03c:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 800e040:	68b9      	ldr	r1, [r7, #8]
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	430b      	orrs	r3, r1
 800e046:	4919      	ldr	r1, [pc, #100]	@ (800e0ac <HAL_RCC_MCOConfig+0xc4>)
 800e048:	4313      	orrs	r3, r2
 800e04a:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 800e04c:	e029      	b.n	800e0a2 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 800e04e:	2300      	movs	r3, #0
 800e050:	617b      	str	r3, [r7, #20]
 800e052:	4b16      	ldr	r3, [pc, #88]	@ (800e0ac <HAL_RCC_MCOConfig+0xc4>)
 800e054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e056:	4a15      	ldr	r2, [pc, #84]	@ (800e0ac <HAL_RCC_MCOConfig+0xc4>)
 800e058:	f043 0304 	orr.w	r3, r3, #4
 800e05c:	6313      	str	r3, [r2, #48]	@ 0x30
 800e05e:	4b13      	ldr	r3, [pc, #76]	@ (800e0ac <HAL_RCC_MCOConfig+0xc4>)
 800e060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e062:	f003 0304 	and.w	r3, r3, #4
 800e066:	617b      	str	r3, [r7, #20]
 800e068:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800e06a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e06e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e070:	2302      	movs	r3, #2
 800e072:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e074:	2303      	movs	r3, #3
 800e076:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e078:	2300      	movs	r3, #0
 800e07a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800e07c:	2300      	movs	r3, #0
 800e07e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800e080:	f107 031c 	add.w	r3, r7, #28
 800e084:	4619      	mov	r1, r3
 800e086:	480b      	ldr	r0, [pc, #44]	@ (800e0b4 <HAL_RCC_MCOConfig+0xcc>)
 800e088:	f7f8 ff38 	bl	8006efc <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 800e08c:	4b07      	ldr	r3, [pc, #28]	@ (800e0ac <HAL_RCC_MCOConfig+0xc4>)
 800e08e:	689b      	ldr	r3, [r3, #8]
 800e090:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	00d9      	lsls	r1, r3, #3
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	430b      	orrs	r3, r1
 800e09c:	4903      	ldr	r1, [pc, #12]	@ (800e0ac <HAL_RCC_MCOConfig+0xc4>)
 800e09e:	4313      	orrs	r3, r2
 800e0a0:	608b      	str	r3, [r1, #8]
}
 800e0a2:	bf00      	nop
 800e0a4:	3730      	adds	r7, #48	@ 0x30
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	bd80      	pop	{r7, pc}
 800e0aa:	bf00      	nop
 800e0ac:	40023800 	.word	0x40023800
 800e0b0:	40020000 	.word	0x40020000
 800e0b4:	40020800 	.word	0x40020800

0800e0b8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800e0b8:	b480      	push	{r7}
 800e0ba:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800e0bc:	4b03      	ldr	r3, [pc, #12]	@ (800e0cc <HAL_RCC_EnableCSS+0x14>)
 800e0be:	2201      	movs	r2, #1
 800e0c0:	601a      	str	r2, [r3, #0]
}
 800e0c2:	bf00      	nop
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ca:	4770      	bx	lr
 800e0cc:	4247004c 	.word	0x4247004c

0800e0d0 <HAL_RCC_DisableCSS>:
/**
  * @brief  Disables the Clock Security System.
  * @retval None
  */
void HAL_RCC_DisableCSS(void)
{
 800e0d0:	b480      	push	{r7}
 800e0d2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
 800e0d4:	4b03      	ldr	r3, [pc, #12]	@ (800e0e4 <HAL_RCC_DisableCSS+0x14>)
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	601a      	str	r2, [r3, #0]
}
 800e0da:	bf00      	nop
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e2:	4770      	bx	lr
 800e0e4:	4247004c 	.word	0x4247004c

0800e0e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e0e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e0ec:	b094      	sub	sp, #80	@ 0x50
 800e0ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	647b      	str	r3, [r7, #68]	@ 0x44
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e100:	4b79      	ldr	r3, [pc, #484]	@ (800e2e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800e102:	689b      	ldr	r3, [r3, #8]
 800e104:	f003 030c 	and.w	r3, r3, #12
 800e108:	2b08      	cmp	r3, #8
 800e10a:	d00d      	beq.n	800e128 <HAL_RCC_GetSysClockFreq+0x40>
 800e10c:	2b08      	cmp	r3, #8
 800e10e:	f200 80e1 	bhi.w	800e2d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 800e112:	2b00      	cmp	r3, #0
 800e114:	d002      	beq.n	800e11c <HAL_RCC_GetSysClockFreq+0x34>
 800e116:	2b04      	cmp	r3, #4
 800e118:	d003      	beq.n	800e122 <HAL_RCC_GetSysClockFreq+0x3a>
 800e11a:	e0db      	b.n	800e2d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800e11c:	4b73      	ldr	r3, [pc, #460]	@ (800e2ec <HAL_RCC_GetSysClockFreq+0x204>)
 800e11e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800e120:	e0db      	b.n	800e2da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800e122:	4b73      	ldr	r3, [pc, #460]	@ (800e2f0 <HAL_RCC_GetSysClockFreq+0x208>)
 800e124:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800e126:	e0d8      	b.n	800e2da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e128:	4b6f      	ldr	r3, [pc, #444]	@ (800e2e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800e12a:	685b      	ldr	r3, [r3, #4]
 800e12c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e130:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e132:	4b6d      	ldr	r3, [pc, #436]	@ (800e2e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800e134:	685b      	ldr	r3, [r3, #4]
 800e136:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d063      	beq.n	800e206 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e13e:	4b6a      	ldr	r3, [pc, #424]	@ (800e2e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800e140:	685b      	ldr	r3, [r3, #4]
 800e142:	099b      	lsrs	r3, r3, #6
 800e144:	2200      	movs	r2, #0
 800e146:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e148:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800e14a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e14c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e150:	633b      	str	r3, [r7, #48]	@ 0x30
 800e152:	2300      	movs	r3, #0
 800e154:	637b      	str	r3, [r7, #52]	@ 0x34
 800e156:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800e15a:	4622      	mov	r2, r4
 800e15c:	462b      	mov	r3, r5
 800e15e:	f04f 0000 	mov.w	r0, #0
 800e162:	f04f 0100 	mov.w	r1, #0
 800e166:	0159      	lsls	r1, r3, #5
 800e168:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e16c:	0150      	lsls	r0, r2, #5
 800e16e:	4602      	mov	r2, r0
 800e170:	460b      	mov	r3, r1
 800e172:	4621      	mov	r1, r4
 800e174:	1a51      	subs	r1, r2, r1
 800e176:	6139      	str	r1, [r7, #16]
 800e178:	4629      	mov	r1, r5
 800e17a:	eb63 0301 	sbc.w	r3, r3, r1
 800e17e:	617b      	str	r3, [r7, #20]
 800e180:	f04f 0200 	mov.w	r2, #0
 800e184:	f04f 0300 	mov.w	r3, #0
 800e188:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800e18c:	4659      	mov	r1, fp
 800e18e:	018b      	lsls	r3, r1, #6
 800e190:	4651      	mov	r1, sl
 800e192:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800e196:	4651      	mov	r1, sl
 800e198:	018a      	lsls	r2, r1, #6
 800e19a:	4651      	mov	r1, sl
 800e19c:	ebb2 0801 	subs.w	r8, r2, r1
 800e1a0:	4659      	mov	r1, fp
 800e1a2:	eb63 0901 	sbc.w	r9, r3, r1
 800e1a6:	f04f 0200 	mov.w	r2, #0
 800e1aa:	f04f 0300 	mov.w	r3, #0
 800e1ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e1b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e1b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e1ba:	4690      	mov	r8, r2
 800e1bc:	4699      	mov	r9, r3
 800e1be:	4623      	mov	r3, r4
 800e1c0:	eb18 0303 	adds.w	r3, r8, r3
 800e1c4:	60bb      	str	r3, [r7, #8]
 800e1c6:	462b      	mov	r3, r5
 800e1c8:	eb49 0303 	adc.w	r3, r9, r3
 800e1cc:	60fb      	str	r3, [r7, #12]
 800e1ce:	f04f 0200 	mov.w	r2, #0
 800e1d2:	f04f 0300 	mov.w	r3, #0
 800e1d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800e1da:	4629      	mov	r1, r5
 800e1dc:	024b      	lsls	r3, r1, #9
 800e1de:	4621      	mov	r1, r4
 800e1e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800e1e4:	4621      	mov	r1, r4
 800e1e6:	024a      	lsls	r2, r1, #9
 800e1e8:	4610      	mov	r0, r2
 800e1ea:	4619      	mov	r1, r3
 800e1ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e1f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e1f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800e1f8:	f00c f846 	bl	801a288 <__aeabi_uldivmod>
 800e1fc:	4602      	mov	r2, r0
 800e1fe:	460b      	mov	r3, r1
 800e200:	4613      	mov	r3, r2
 800e202:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e204:	e058      	b.n	800e2b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e206:	4b38      	ldr	r3, [pc, #224]	@ (800e2e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800e208:	685b      	ldr	r3, [r3, #4]
 800e20a:	099b      	lsrs	r3, r3, #6
 800e20c:	2200      	movs	r2, #0
 800e20e:	4618      	mov	r0, r3
 800e210:	4611      	mov	r1, r2
 800e212:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800e216:	623b      	str	r3, [r7, #32]
 800e218:	2300      	movs	r3, #0
 800e21a:	627b      	str	r3, [r7, #36]	@ 0x24
 800e21c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800e220:	4642      	mov	r2, r8
 800e222:	464b      	mov	r3, r9
 800e224:	f04f 0000 	mov.w	r0, #0
 800e228:	f04f 0100 	mov.w	r1, #0
 800e22c:	0159      	lsls	r1, r3, #5
 800e22e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e232:	0150      	lsls	r0, r2, #5
 800e234:	4602      	mov	r2, r0
 800e236:	460b      	mov	r3, r1
 800e238:	4641      	mov	r1, r8
 800e23a:	ebb2 0a01 	subs.w	sl, r2, r1
 800e23e:	4649      	mov	r1, r9
 800e240:	eb63 0b01 	sbc.w	fp, r3, r1
 800e244:	f04f 0200 	mov.w	r2, #0
 800e248:	f04f 0300 	mov.w	r3, #0
 800e24c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800e250:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800e254:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800e258:	ebb2 040a 	subs.w	r4, r2, sl
 800e25c:	eb63 050b 	sbc.w	r5, r3, fp
 800e260:	f04f 0200 	mov.w	r2, #0
 800e264:	f04f 0300 	mov.w	r3, #0
 800e268:	00eb      	lsls	r3, r5, #3
 800e26a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e26e:	00e2      	lsls	r2, r4, #3
 800e270:	4614      	mov	r4, r2
 800e272:	461d      	mov	r5, r3
 800e274:	4643      	mov	r3, r8
 800e276:	18e3      	adds	r3, r4, r3
 800e278:	603b      	str	r3, [r7, #0]
 800e27a:	464b      	mov	r3, r9
 800e27c:	eb45 0303 	adc.w	r3, r5, r3
 800e280:	607b      	str	r3, [r7, #4]
 800e282:	f04f 0200 	mov.w	r2, #0
 800e286:	f04f 0300 	mov.w	r3, #0
 800e28a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800e28e:	4629      	mov	r1, r5
 800e290:	028b      	lsls	r3, r1, #10
 800e292:	4621      	mov	r1, r4
 800e294:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800e298:	4621      	mov	r1, r4
 800e29a:	028a      	lsls	r2, r1, #10
 800e29c:	4610      	mov	r0, r2
 800e29e:	4619      	mov	r1, r3
 800e2a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	61bb      	str	r3, [r7, #24]
 800e2a6:	61fa      	str	r2, [r7, #28]
 800e2a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e2ac:	f00b ffec 	bl	801a288 <__aeabi_uldivmod>
 800e2b0:	4602      	mov	r2, r0
 800e2b2:	460b      	mov	r3, r1
 800e2b4:	4613      	mov	r3, r2
 800e2b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800e2b8:	4b0b      	ldr	r3, [pc, #44]	@ (800e2e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800e2ba:	685b      	ldr	r3, [r3, #4]
 800e2bc:	0c1b      	lsrs	r3, r3, #16
 800e2be:	f003 0303 	and.w	r3, r3, #3
 800e2c2:	3301      	adds	r3, #1
 800e2c4:	005b      	lsls	r3, r3, #1
 800e2c6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800e2c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e2ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e2cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800e2d2:	e002      	b.n	800e2da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800e2d4:	4b05      	ldr	r3, [pc, #20]	@ (800e2ec <HAL_RCC_GetSysClockFreq+0x204>)
 800e2d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800e2d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e2da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800e2dc:	4618      	mov	r0, r3
 800e2de:	3750      	adds	r7, #80	@ 0x50
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e2e6:	bf00      	nop
 800e2e8:	40023800 	.word	0x40023800
 800e2ec:	00f42400 	.word	0x00f42400
 800e2f0:	007a1200 	.word	0x007a1200

0800e2f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e2f4:	b480      	push	{r7}
 800e2f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e2f8:	4b03      	ldr	r3, [pc, #12]	@ (800e308 <HAL_RCC_GetHCLKFreq+0x14>)
 800e2fa:	681b      	ldr	r3, [r3, #0]
}
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	46bd      	mov	sp, r7
 800e300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e304:	4770      	bx	lr
 800e306:	bf00      	nop
 800e308:	20000030 	.word	0x20000030

0800e30c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800e310:	f7ff fff0 	bl	800e2f4 <HAL_RCC_GetHCLKFreq>
 800e314:	4602      	mov	r2, r0
 800e316:	4b05      	ldr	r3, [pc, #20]	@ (800e32c <HAL_RCC_GetPCLK1Freq+0x20>)
 800e318:	689b      	ldr	r3, [r3, #8]
 800e31a:	0a9b      	lsrs	r3, r3, #10
 800e31c:	f003 0307 	and.w	r3, r3, #7
 800e320:	4903      	ldr	r1, [pc, #12]	@ (800e330 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e322:	5ccb      	ldrb	r3, [r1, r3]
 800e324:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e328:	4618      	mov	r0, r3
 800e32a:	bd80      	pop	{r7, pc}
 800e32c:	40023800 	.word	0x40023800
 800e330:	080298a4 	.word	0x080298a4

0800e334 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e334:	b580      	push	{r7, lr}
 800e336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800e338:	f7ff ffdc 	bl	800e2f4 <HAL_RCC_GetHCLKFreq>
 800e33c:	4602      	mov	r2, r0
 800e33e:	4b05      	ldr	r3, [pc, #20]	@ (800e354 <HAL_RCC_GetPCLK2Freq+0x20>)
 800e340:	689b      	ldr	r3, [r3, #8]
 800e342:	0b5b      	lsrs	r3, r3, #13
 800e344:	f003 0307 	and.w	r3, r3, #7
 800e348:	4903      	ldr	r1, [pc, #12]	@ (800e358 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e34a:	5ccb      	ldrb	r3, [r1, r3]
 800e34c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e350:	4618      	mov	r0, r3
 800e352:	bd80      	pop	{r7, pc}
 800e354:	40023800 	.word	0x40023800
 800e358:	080298a4 	.word	0x080298a4

0800e35c <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that
  * will be configured.
  * @retval None
  */
__weak void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e35c:	b480      	push	{r7}
 800e35e:	b083      	sub	sp, #12
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	220f      	movs	r2, #15
 800e368:	601a      	str	r2, [r3, #0]

  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 800e36a:	4b45      	ldr	r3, [pc, #276]	@ (800e480 <HAL_RCC_GetOscConfig+0x124>)
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e372:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e376:	d104      	bne.n	800e382 <HAL_RCC_GetOscConfig+0x26>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 800e37e:	605a      	str	r2, [r3, #4]
 800e380:	e00e      	b.n	800e3a0 <HAL_RCC_GetOscConfig+0x44>
  }
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 800e382:	4b3f      	ldr	r3, [pc, #252]	@ (800e480 <HAL_RCC_GetOscConfig+0x124>)
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e38a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e38e:	d104      	bne.n	800e39a <HAL_RCC_GetOscConfig+0x3e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800e396:	605a      	str	r2, [r3, #4]
 800e398:	e002      	b.n	800e3a0 <HAL_RCC_GetOscConfig+0x44>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	2200      	movs	r2, #0
 800e39e:	605a      	str	r2, [r3, #4]
  }

  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 800e3a0:	4b37      	ldr	r3, [pc, #220]	@ (800e480 <HAL_RCC_GetOscConfig+0x124>)
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	f003 0301 	and.w	r3, r3, #1
 800e3a8:	2b01      	cmp	r3, #1
 800e3aa:	d103      	bne.n	800e3b4 <HAL_RCC_GetOscConfig+0x58>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	2201      	movs	r2, #1
 800e3b0:	60da      	str	r2, [r3, #12]
 800e3b2:	e002      	b.n	800e3ba <HAL_RCC_GetOscConfig+0x5e>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	60da      	str	r2, [r3, #12]
  }

  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
 800e3ba:	4b31      	ldr	r3, [pc, #196]	@ (800e480 <HAL_RCC_GetOscConfig+0x124>)
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	08db      	lsrs	r3, r3, #3
 800e3c0:	f003 021f 	and.w	r2, r3, #31
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	611a      	str	r2, [r3, #16]

  /* Get the LSE configuration -----------------------------------------------*/
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 800e3c8:	4b2d      	ldr	r3, [pc, #180]	@ (800e480 <HAL_RCC_GetOscConfig+0x124>)
 800e3ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e3cc:	f003 0304 	and.w	r3, r3, #4
 800e3d0:	2b04      	cmp	r3, #4
 800e3d2:	d103      	bne.n	800e3dc <HAL_RCC_GetOscConfig+0x80>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	2205      	movs	r2, #5
 800e3d8:	609a      	str	r2, [r3, #8]
 800e3da:	e00c      	b.n	800e3f6 <HAL_RCC_GetOscConfig+0x9a>
  }
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 800e3dc:	4b28      	ldr	r3, [pc, #160]	@ (800e480 <HAL_RCC_GetOscConfig+0x124>)
 800e3de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e3e0:	f003 0301 	and.w	r3, r3, #1
 800e3e4:	2b01      	cmp	r3, #1
 800e3e6:	d103      	bne.n	800e3f0 <HAL_RCC_GetOscConfig+0x94>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	2201      	movs	r2, #1
 800e3ec:	609a      	str	r2, [r3, #8]
 800e3ee:	e002      	b.n	800e3f6 <HAL_RCC_GetOscConfig+0x9a>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	609a      	str	r2, [r3, #8]
  }

  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 800e3f6:	4b22      	ldr	r3, [pc, #136]	@ (800e480 <HAL_RCC_GetOscConfig+0x124>)
 800e3f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e3fa:	f003 0301 	and.w	r3, r3, #1
 800e3fe:	2b01      	cmp	r3, #1
 800e400:	d103      	bne.n	800e40a <HAL_RCC_GetOscConfig+0xae>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	2201      	movs	r2, #1
 800e406:	615a      	str	r2, [r3, #20]
 800e408:	e002      	b.n	800e410 <HAL_RCC_GetOscConfig+0xb4>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	2200      	movs	r2, #0
 800e40e:	615a      	str	r2, [r3, #20]
  }

  /* Get the PLL configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 800e410:	4b1b      	ldr	r3, [pc, #108]	@ (800e480 <HAL_RCC_GetOscConfig+0x124>)
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e418:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e41c:	d103      	bne.n	800e426 <HAL_RCC_GetOscConfig+0xca>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	2202      	movs	r2, #2
 800e422:	619a      	str	r2, [r3, #24]
 800e424:	e002      	b.n	800e42c <HAL_RCC_GetOscConfig+0xd0>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	2201      	movs	r2, #1
 800e42a:	619a      	str	r2, [r3, #24]
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800e42c:	4b14      	ldr	r3, [pc, #80]	@ (800e480 <HAL_RCC_GetOscConfig+0x124>)
 800e42e:	685b      	ldr	r3, [r3, #4]
 800e430:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
 800e438:	4b11      	ldr	r3, [pc, #68]	@ (800e480 <HAL_RCC_GetOscConfig+0x124>)
 800e43a:	685b      	ldr	r3, [r3, #4]
 800e43c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800e444:	4b0e      	ldr	r3, [pc, #56]	@ (800e480 <HAL_RCC_GetOscConfig+0x124>)
 800e446:	685b      	ldr	r3, [r3, #4]
 800e448:	099b      	lsrs	r3, r3, #6
 800e44a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0) << 1U) >> RCC_PLLCFGR_PLLP_Pos);
 800e452:	4b0b      	ldr	r3, [pc, #44]	@ (800e480 <HAL_RCC_GetOscConfig+0x124>)
 800e454:	685b      	ldr	r3, [r3, #4]
 800e456:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800e45a:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800e45e:	005b      	lsls	r3, r3, #1
 800e460:	0c1a      	lsrs	r2, r3, #16
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos);
 800e466:	4b06      	ldr	r3, [pc, #24]	@ (800e480 <HAL_RCC_GetOscConfig+0x124>)
 800e468:	685b      	ldr	r3, [r3, #4]
 800e46a:	0e1b      	lsrs	r3, r3, #24
 800e46c:	f003 020f 	and.w	r2, r3, #15
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800e474:	bf00      	nop
 800e476:	370c      	adds	r7, #12
 800e478:	46bd      	mov	sp, r7
 800e47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47e:	4770      	bx	lr
 800e480:	40023800 	.word	0x40023800

0800e484 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800e484:	b480      	push	{r7}
 800e486:	b083      	sub	sp, #12
 800e488:	af00      	add	r7, sp, #0
 800e48a:	6078      	str	r0, [r7, #4]
 800e48c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	220f      	movs	r2, #15
 800e492:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800e494:	4b12      	ldr	r3, [pc, #72]	@ (800e4e0 <HAL_RCC_GetClockConfig+0x5c>)
 800e496:	689b      	ldr	r3, [r3, #8]
 800e498:	f003 0203 	and.w	r2, r3, #3
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800e4a0:	4b0f      	ldr	r3, [pc, #60]	@ (800e4e0 <HAL_RCC_GetClockConfig+0x5c>)
 800e4a2:	689b      	ldr	r3, [r3, #8]
 800e4a4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800e4ac:	4b0c      	ldr	r3, [pc, #48]	@ (800e4e0 <HAL_RCC_GetClockConfig+0x5c>)
 800e4ae:	689b      	ldr	r3, [r3, #8]
 800e4b0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800e4b8:	4b09      	ldr	r3, [pc, #36]	@ (800e4e0 <HAL_RCC_GetClockConfig+0x5c>)
 800e4ba:	689b      	ldr	r3, [r3, #8]
 800e4bc:	08db      	lsrs	r3, r3, #3
 800e4be:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800e4c6:	4b07      	ldr	r3, [pc, #28]	@ (800e4e4 <HAL_RCC_GetClockConfig+0x60>)
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	f003 0207 	and.w	r2, r3, #7
 800e4ce:	683b      	ldr	r3, [r7, #0]
 800e4d0:	601a      	str	r2, [r3, #0]
}
 800e4d2:	bf00      	nop
 800e4d4:	370c      	adds	r7, #12
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4dc:	4770      	bx	lr
 800e4de:	bf00      	nop
 800e4e0:	40023800 	.word	0x40023800
 800e4e4:	40023c00 	.word	0x40023c00

0800e4e8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800e4ec:	4b06      	ldr	r3, [pc, #24]	@ (800e508 <HAL_RCC_NMI_IRQHandler+0x20>)
 800e4ee:	68db      	ldr	r3, [r3, #12]
 800e4f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e4f4:	2b80      	cmp	r3, #128	@ 0x80
 800e4f6:	d104      	bne.n	800e502 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800e4f8:	f000 f80a 	bl	800e510 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800e4fc:	4b03      	ldr	r3, [pc, #12]	@ (800e50c <HAL_RCC_NMI_IRQHandler+0x24>)
 800e4fe:	2280      	movs	r2, #128	@ 0x80
 800e500:	701a      	strb	r2, [r3, #0]
  }
}
 800e502:	bf00      	nop
 800e504:	bd80      	pop	{r7, pc}
 800e506:	bf00      	nop
 800e508:	40023800 	.word	0x40023800
 800e50c:	4002380e 	.word	0x4002380e

0800e510 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800e510:	b480      	push	{r7}
 800e512:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800e514:	bf00      	nop
 800e516:	46bd      	mov	sp, r7
 800e518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51c:	4770      	bx	lr
 800e51e:	bf00      	nop

0800e520 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b082      	sub	sp, #8
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d101      	bne.n	800e532 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e52e:	2301      	movs	r3, #1
 800e530:	e041      	b.n	800e5b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e538:	b2db      	uxtb	r3, r3
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d106      	bne.n	800e54c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	2200      	movs	r2, #0
 800e542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e546:	6878      	ldr	r0, [r7, #4]
 800e548:	f7f3 fba0 	bl	8001c8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	2202      	movs	r2, #2
 800e550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681a      	ldr	r2, [r3, #0]
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	3304      	adds	r3, #4
 800e55c:	4619      	mov	r1, r3
 800e55e:	4610      	mov	r0, r2
 800e560:	f005 f8de 	bl	8013720 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	2201      	movs	r2, #1
 800e568:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	2201      	movs	r2, #1
 800e570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2201      	movs	r2, #1
 800e578:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	2201      	movs	r2, #1
 800e580:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2201      	movs	r2, #1
 800e588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	2201      	movs	r2, #1
 800e590:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	2201      	movs	r2, #1
 800e598:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	2201      	movs	r2, #1
 800e5a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	2201      	movs	r2, #1
 800e5a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2201      	movs	r2, #1
 800e5b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e5b4:	2300      	movs	r3, #0
}
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	3708      	adds	r7, #8
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	bd80      	pop	{r7, pc}

0800e5be <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 800e5be:	b580      	push	{r7, lr}
 800e5c0:	b082      	sub	sp, #8
 800e5c2:	af00      	add	r7, sp, #0
 800e5c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	2202      	movs	r2, #2
 800e5ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	6a1a      	ldr	r2, [r3, #32]
 800e5d4:	f241 1311 	movw	r3, #4369	@ 0x1111
 800e5d8:	4013      	ands	r3, r2
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d10f      	bne.n	800e5fe <HAL_TIM_Base_DeInit+0x40>
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	6a1a      	ldr	r2, [r3, #32]
 800e5e4:	f240 4344 	movw	r3, #1092	@ 0x444
 800e5e8:	4013      	ands	r3, r2
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d107      	bne.n	800e5fe <HAL_TIM_Base_DeInit+0x40>
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	681a      	ldr	r2, [r3, #0]
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	f022 0201 	bic.w	r2, r2, #1
 800e5fc:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 800e5fe:	6878      	ldr	r0, [r7, #4]
 800e600:	f7f3 fba0 	bl	8001d44 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	2200      	movs	r2, #0
 800e608:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	2200      	movs	r2, #0
 800e610:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	2200      	movs	r2, #0
 800e618:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	2200      	movs	r2, #0
 800e620:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	2200      	movs	r2, #0
 800e628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	2200      	movs	r2, #0
 800e630:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	2200      	movs	r2, #0
 800e638:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	2200      	movs	r2, #0
 800e640:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	2200      	movs	r2, #0
 800e648:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	2200      	movs	r2, #0
 800e650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2200      	movs	r2, #0
 800e658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e65c:	2300      	movs	r3, #0
}
 800e65e:	4618      	mov	r0, r3
 800e660:	3708      	adds	r7, #8
 800e662:	46bd      	mov	sp, r7
 800e664:	bd80      	pop	{r7, pc}
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800e666:	b480      	push	{r7}
 800e668:	b083      	sub	sp, #12
 800e66a:	af00      	add	r7, sp, #0
 800e66c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800e66e:	bf00      	nop
 800e670:	370c      	adds	r7, #12
 800e672:	46bd      	mov	sp, r7
 800e674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e678:	4770      	bx	lr
  * @brief  DeInitializes TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef *htim)
{
 800e67a:	b480      	push	{r7}
 800e67c:	b083      	sub	sp, #12
 800e67e:	af00      	add	r7, sp, #0
 800e680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspDeInit could be implemented in the user file
   */
}
 800e682:	bf00      	nop
 800e684:	370c      	adds	r7, #12
 800e686:	46bd      	mov	sp, r7
 800e688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e68c:	4770      	bx	lr

0800e68e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800e68e:	b480      	push	{r7}
 800e690:	b085      	sub	sp, #20
 800e692:	af00      	add	r7, sp, #0
 800e694:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e69c:	b2db      	uxtb	r3, r3
 800e69e:	2b01      	cmp	r3, #1
 800e6a0:	d001      	beq.n	800e6a6 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800e6a2:	2301      	movs	r3, #1
 800e6a4:	e03c      	b.n	800e720 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	2202      	movs	r2, #2
 800e6aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	4a1e      	ldr	r2, [pc, #120]	@ (800e72c <HAL_TIM_Base_Start+0x9e>)
 800e6b4:	4293      	cmp	r3, r2
 800e6b6:	d018      	beq.n	800e6ea <HAL_TIM_Base_Start+0x5c>
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e6c0:	d013      	beq.n	800e6ea <HAL_TIM_Base_Start+0x5c>
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	4a1a      	ldr	r2, [pc, #104]	@ (800e730 <HAL_TIM_Base_Start+0xa2>)
 800e6c8:	4293      	cmp	r3, r2
 800e6ca:	d00e      	beq.n	800e6ea <HAL_TIM_Base_Start+0x5c>
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	4a18      	ldr	r2, [pc, #96]	@ (800e734 <HAL_TIM_Base_Start+0xa6>)
 800e6d2:	4293      	cmp	r3, r2
 800e6d4:	d009      	beq.n	800e6ea <HAL_TIM_Base_Start+0x5c>
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	4a17      	ldr	r2, [pc, #92]	@ (800e738 <HAL_TIM_Base_Start+0xaa>)
 800e6dc:	4293      	cmp	r3, r2
 800e6de:	d004      	beq.n	800e6ea <HAL_TIM_Base_Start+0x5c>
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	4a15      	ldr	r2, [pc, #84]	@ (800e73c <HAL_TIM_Base_Start+0xae>)
 800e6e6:	4293      	cmp	r3, r2
 800e6e8:	d111      	bne.n	800e70e <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	689b      	ldr	r3, [r3, #8]
 800e6f0:	f003 0307 	and.w	r3, r3, #7
 800e6f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	2b06      	cmp	r3, #6
 800e6fa:	d010      	beq.n	800e71e <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	681a      	ldr	r2, [r3, #0]
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	f042 0201 	orr.w	r2, r2, #1
 800e70a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e70c:	e007      	b.n	800e71e <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	681a      	ldr	r2, [r3, #0]
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	f042 0201 	orr.w	r2, r2, #1
 800e71c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e71e:	2300      	movs	r3, #0
}
 800e720:	4618      	mov	r0, r3
 800e722:	3714      	adds	r7, #20
 800e724:	46bd      	mov	sp, r7
 800e726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72a:	4770      	bx	lr
 800e72c:	40010000 	.word	0x40010000
 800e730:	40000400 	.word	0x40000400
 800e734:	40000800 	.word	0x40000800
 800e738:	40000c00 	.word	0x40000c00
 800e73c:	40014000 	.word	0x40014000

0800e740 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800e740:	b480      	push	{r7}
 800e742:	b083      	sub	sp, #12
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	6a1a      	ldr	r2, [r3, #32]
 800e74e:	f241 1311 	movw	r3, #4369	@ 0x1111
 800e752:	4013      	ands	r3, r2
 800e754:	2b00      	cmp	r3, #0
 800e756:	d10f      	bne.n	800e778 <HAL_TIM_Base_Stop+0x38>
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	6a1a      	ldr	r2, [r3, #32]
 800e75e:	f240 4344 	movw	r3, #1092	@ 0x444
 800e762:	4013      	ands	r3, r2
 800e764:	2b00      	cmp	r3, #0
 800e766:	d107      	bne.n	800e778 <HAL_TIM_Base_Stop+0x38>
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	681a      	ldr	r2, [r3, #0]
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	f022 0201 	bic.w	r2, r2, #1
 800e776:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	2201      	movs	r2, #1
 800e77c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800e780:	2300      	movs	r3, #0
}
 800e782:	4618      	mov	r0, r3
 800e784:	370c      	adds	r7, #12
 800e786:	46bd      	mov	sp, r7
 800e788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78c:	4770      	bx	lr

0800e78e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e78e:	b480      	push	{r7}
 800e790:	b085      	sub	sp, #20
 800e792:	af00      	add	r7, sp, #0
 800e794:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e79c:	b2db      	uxtb	r3, r3
 800e79e:	2b01      	cmp	r3, #1
 800e7a0:	d001      	beq.n	800e7a6 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e7a2:	2301      	movs	r3, #1
 800e7a4:	e044      	b.n	800e830 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	2202      	movs	r2, #2
 800e7aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	68da      	ldr	r2, [r3, #12]
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	f042 0201 	orr.w	r2, r2, #1
 800e7bc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	4a1e      	ldr	r2, [pc, #120]	@ (800e83c <HAL_TIM_Base_Start_IT+0xae>)
 800e7c4:	4293      	cmp	r3, r2
 800e7c6:	d018      	beq.n	800e7fa <HAL_TIM_Base_Start_IT+0x6c>
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e7d0:	d013      	beq.n	800e7fa <HAL_TIM_Base_Start_IT+0x6c>
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	4a1a      	ldr	r2, [pc, #104]	@ (800e840 <HAL_TIM_Base_Start_IT+0xb2>)
 800e7d8:	4293      	cmp	r3, r2
 800e7da:	d00e      	beq.n	800e7fa <HAL_TIM_Base_Start_IT+0x6c>
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	4a18      	ldr	r2, [pc, #96]	@ (800e844 <HAL_TIM_Base_Start_IT+0xb6>)
 800e7e2:	4293      	cmp	r3, r2
 800e7e4:	d009      	beq.n	800e7fa <HAL_TIM_Base_Start_IT+0x6c>
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	4a17      	ldr	r2, [pc, #92]	@ (800e848 <HAL_TIM_Base_Start_IT+0xba>)
 800e7ec:	4293      	cmp	r3, r2
 800e7ee:	d004      	beq.n	800e7fa <HAL_TIM_Base_Start_IT+0x6c>
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	4a15      	ldr	r2, [pc, #84]	@ (800e84c <HAL_TIM_Base_Start_IT+0xbe>)
 800e7f6:	4293      	cmp	r3, r2
 800e7f8:	d111      	bne.n	800e81e <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	689b      	ldr	r3, [r3, #8]
 800e800:	f003 0307 	and.w	r3, r3, #7
 800e804:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	2b06      	cmp	r3, #6
 800e80a:	d010      	beq.n	800e82e <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	681a      	ldr	r2, [r3, #0]
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	f042 0201 	orr.w	r2, r2, #1
 800e81a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e81c:	e007      	b.n	800e82e <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	681a      	ldr	r2, [r3, #0]
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	f042 0201 	orr.w	r2, r2, #1
 800e82c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e82e:	2300      	movs	r3, #0
}
 800e830:	4618      	mov	r0, r3
 800e832:	3714      	adds	r7, #20
 800e834:	46bd      	mov	sp, r7
 800e836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83a:	4770      	bx	lr
 800e83c:	40010000 	.word	0x40010000
 800e840:	40000400 	.word	0x40000400
 800e844:	40000800 	.word	0x40000800
 800e848:	40000c00 	.word	0x40000c00
 800e84c:	40014000 	.word	0x40014000

0800e850 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800e850:	b480      	push	{r7}
 800e852:	b083      	sub	sp, #12
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	68da      	ldr	r2, [r3, #12]
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	f022 0201 	bic.w	r2, r2, #1
 800e866:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	6a1a      	ldr	r2, [r3, #32]
 800e86e:	f241 1311 	movw	r3, #4369	@ 0x1111
 800e872:	4013      	ands	r3, r2
 800e874:	2b00      	cmp	r3, #0
 800e876:	d10f      	bne.n	800e898 <HAL_TIM_Base_Stop_IT+0x48>
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	6a1a      	ldr	r2, [r3, #32]
 800e87e:	f240 4344 	movw	r3, #1092	@ 0x444
 800e882:	4013      	ands	r3, r2
 800e884:	2b00      	cmp	r3, #0
 800e886:	d107      	bne.n	800e898 <HAL_TIM_Base_Stop_IT+0x48>
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	681a      	ldr	r2, [r3, #0]
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	f022 0201 	bic.w	r2, r2, #1
 800e896:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	2201      	movs	r2, #1
 800e89c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800e8a0:	2300      	movs	r3, #0
}
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	370c      	adds	r7, #12
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ac:	4770      	bx	lr

0800e8ae <HAL_TIM_Base_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_DMA(TIM_HandleTypeDef *htim, const uint32_t *pData, uint16_t Length)
{
 800e8ae:	b580      	push	{r7, lr}
 800e8b0:	b086      	sub	sp, #24
 800e8b2:	af00      	add	r7, sp, #0
 800e8b4:	60f8      	str	r0, [r7, #12]
 800e8b6:	60b9      	str	r1, [r7, #8]
 800e8b8:	4613      	mov	r3, r2
 800e8ba:	80fb      	strh	r3, [r7, #6]

  /* Check the parameters */
  assert_param(IS_TIM_DMA_INSTANCE(htim->Instance));

  /* Set the TIM state */
  if (htim->State == HAL_TIM_STATE_BUSY)
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e8c2:	b2db      	uxtb	r3, r3
 800e8c4:	2b02      	cmp	r3, #2
 800e8c6:	d101      	bne.n	800e8cc <HAL_TIM_Base_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 800e8c8:	2302      	movs	r3, #2
 800e8ca:	e070      	b.n	800e9ae <HAL_TIM_Base_Start_DMA+0x100>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e8d2:	b2db      	uxtb	r3, r3
 800e8d4:	2b01      	cmp	r3, #1
 800e8d6:	d125      	bne.n	800e924 <HAL_TIM_Base_Start_DMA+0x76>
  {
    if ((pData == NULL) || (Length == 0U))
 800e8d8:	68bb      	ldr	r3, [r7, #8]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d002      	beq.n	800e8e4 <HAL_TIM_Base_Start_DMA+0x36>
 800e8de:	88fb      	ldrh	r3, [r7, #6]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d101      	bne.n	800e8e8 <HAL_TIM_Base_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 800e8e4:	2301      	movs	r3, #1
 800e8e6:	e062      	b.n	800e9ae <HAL_TIM_Base_Start_DMA+0x100>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	2202      	movs	r2, #2
 800e8ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  {
    return HAL_ERROR;
  }

  /* Set the DMA Period elapsed callbacks */
  htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	6a1b      	ldr	r3, [r3, #32]
 800e8f4:	4a30      	ldr	r2, [pc, #192]	@ (800e9b8 <HAL_TIM_Base_Start_DMA+0x10a>)
 800e8f6:	63da      	str	r2, [r3, #60]	@ 0x3c
  htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	6a1b      	ldr	r3, [r3, #32]
 800e8fc:	4a2f      	ldr	r2, [pc, #188]	@ (800e9bc <HAL_TIM_Base_Start_DMA+0x10e>)
 800e8fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	6a1b      	ldr	r3, [r3, #32]
 800e904:	4a2e      	ldr	r2, [pc, #184]	@ (800e9c0 <HAL_TIM_Base_Start_DMA+0x112>)
 800e906:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the DMA stream */
  if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)pData, (uint32_t)&htim->Instance->ARR,
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	6a18      	ldr	r0, [r3, #32]
 800e90c:	68b9      	ldr	r1, [r7, #8]
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	332c      	adds	r3, #44	@ 0x2c
 800e914:	461a      	mov	r2, r3
 800e916:	88fb      	ldrh	r3, [r7, #6]
 800e918:	f7f7 fde7 	bl	80064ea <HAL_DMA_Start_IT>
 800e91c:	4603      	mov	r3, r0
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d004      	beq.n	800e92c <HAL_TIM_Base_Start_DMA+0x7e>
 800e922:	e001      	b.n	800e928 <HAL_TIM_Base_Start_DMA+0x7a>
    return HAL_ERROR;
 800e924:	2301      	movs	r3, #1
 800e926:	e042      	b.n	800e9ae <HAL_TIM_Base_Start_DMA+0x100>
                       Length) != HAL_OK)
  {
    /* Return error status */
    return HAL_ERROR;
 800e928:	2301      	movs	r3, #1
 800e92a:	e040      	b.n	800e9ae <HAL_TIM_Base_Start_DMA+0x100>
  }

  /* Enable the TIM Update DMA request */
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_UPDATE);
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	68da      	ldr	r2, [r3, #12]
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e93a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	4a20      	ldr	r2, [pc, #128]	@ (800e9c4 <HAL_TIM_Base_Start_DMA+0x116>)
 800e942:	4293      	cmp	r3, r2
 800e944:	d018      	beq.n	800e978 <HAL_TIM_Base_Start_DMA+0xca>
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e94e:	d013      	beq.n	800e978 <HAL_TIM_Base_Start_DMA+0xca>
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	4a1c      	ldr	r2, [pc, #112]	@ (800e9c8 <HAL_TIM_Base_Start_DMA+0x11a>)
 800e956:	4293      	cmp	r3, r2
 800e958:	d00e      	beq.n	800e978 <HAL_TIM_Base_Start_DMA+0xca>
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	4a1b      	ldr	r2, [pc, #108]	@ (800e9cc <HAL_TIM_Base_Start_DMA+0x11e>)
 800e960:	4293      	cmp	r3, r2
 800e962:	d009      	beq.n	800e978 <HAL_TIM_Base_Start_DMA+0xca>
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	4a19      	ldr	r2, [pc, #100]	@ (800e9d0 <HAL_TIM_Base_Start_DMA+0x122>)
 800e96a:	4293      	cmp	r3, r2
 800e96c:	d004      	beq.n	800e978 <HAL_TIM_Base_Start_DMA+0xca>
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	4a18      	ldr	r2, [pc, #96]	@ (800e9d4 <HAL_TIM_Base_Start_DMA+0x126>)
 800e974:	4293      	cmp	r3, r2
 800e976:	d111      	bne.n	800e99c <HAL_TIM_Base_Start_DMA+0xee>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	689b      	ldr	r3, [r3, #8]
 800e97e:	f003 0307 	and.w	r3, r3, #7
 800e982:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e984:	697b      	ldr	r3, [r7, #20]
 800e986:	2b06      	cmp	r3, #6
 800e988:	d010      	beq.n	800e9ac <HAL_TIM_Base_Start_DMA+0xfe>
    {
      __HAL_TIM_ENABLE(htim);
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	681a      	ldr	r2, [r3, #0]
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	f042 0201 	orr.w	r2, r2, #1
 800e998:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e99a:	e007      	b.n	800e9ac <HAL_TIM_Base_Start_DMA+0xfe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	681a      	ldr	r2, [r3, #0]
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	f042 0201 	orr.w	r2, r2, #1
 800e9aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e9ac:	2300      	movs	r3, #0
}
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	3718      	adds	r7, #24
 800e9b2:	46bd      	mov	sp, r7
 800e9b4:	bd80      	pop	{r7, pc}
 800e9b6:	bf00      	nop
 800e9b8:	0801368d 	.word	0x0801368d
 800e9bc:	080136bb 	.word	0x080136bb
 800e9c0:	080133bb 	.word	0x080133bb
 800e9c4:	40010000 	.word	0x40010000
 800e9c8:	40000400 	.word	0x40000400
 800e9cc:	40000800 	.word	0x40000800
 800e9d0:	40000c00 	.word	0x40000c00
 800e9d4:	40014000 	.word	0x40014000

0800e9d8 <HAL_TIM_Base_Stop_DMA>:
  * @brief  Stops the TIM Base generation in DMA mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_DMA(TIM_HandleTypeDef *htim)
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b082      	sub	sp, #8
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_INSTANCE(htim->Instance));

  /* Disable the TIM Update DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_UPDATE);
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	68da      	ldr	r2, [r3, #12]
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800e9ee:	60da      	str	r2, [r3, #12]

  (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	6a1b      	ldr	r3, [r3, #32]
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	f7f7 fe40 	bl	800667a <HAL_DMA_Abort_IT>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	6a1a      	ldr	r2, [r3, #32]
 800ea00:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ea04:	4013      	ands	r3, r2
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d10f      	bne.n	800ea2a <HAL_TIM_Base_Stop_DMA+0x52>
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	6a1a      	ldr	r2, [r3, #32]
 800ea10:	f240 4344 	movw	r3, #1092	@ 0x444
 800ea14:	4013      	ands	r3, r2
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d107      	bne.n	800ea2a <HAL_TIM_Base_Stop_DMA+0x52>
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	681a      	ldr	r2, [r3, #0]
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	f022 0201 	bic.w	r2, r2, #1
 800ea28:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	2201      	movs	r2, #1
 800ea2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800ea32:	2300      	movs	r3, #0
}
 800ea34:	4618      	mov	r0, r3
 800ea36:	3708      	adds	r7, #8
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd80      	pop	{r7, pc}

0800ea3c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b082      	sub	sp, #8
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d101      	bne.n	800ea4e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800ea4a:	2301      	movs	r3, #1
 800ea4c:	e041      	b.n	800ead2 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ea54:	b2db      	uxtb	r3, r3
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d106      	bne.n	800ea68 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	2200      	movs	r2, #0
 800ea5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800ea62:	6878      	ldr	r0, [r7, #4]
 800ea64:	f000 f88d 	bl	800eb82 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	2202      	movs	r2, #2
 800ea6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	681a      	ldr	r2, [r3, #0]
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	3304      	adds	r3, #4
 800ea78:	4619      	mov	r1, r3
 800ea7a:	4610      	mov	r0, r2
 800ea7c:	f004 fe50 	bl	8013720 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	2201      	movs	r2, #1
 800ea84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	2201      	movs	r2, #1
 800ea8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	2201      	movs	r2, #1
 800ea94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	2201      	movs	r2, #1
 800ea9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	2201      	movs	r2, #1
 800eaa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	2201      	movs	r2, #1
 800eaac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	2201      	movs	r2, #1
 800eab4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	2201      	movs	r2, #1
 800eabc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	2201      	movs	r2, #1
 800eac4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	2201      	movs	r2, #1
 800eacc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ead0:	2300      	movs	r3, #0
}
 800ead2:	4618      	mov	r0, r3
 800ead4:	3708      	adds	r7, #8
 800ead6:	46bd      	mov	sp, r7
 800ead8:	bd80      	pop	{r7, pc}

0800eada <HAL_TIM_OC_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_DeInit(TIM_HandleTypeDef *htim)
{
 800eada:	b580      	push	{r7, lr}
 800eadc:	b082      	sub	sp, #8
 800eade:	af00      	add	r7, sp, #0
 800eae0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	2202      	movs	r2, #2
 800eae6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	6a1a      	ldr	r2, [r3, #32]
 800eaf0:	f241 1311 	movw	r3, #4369	@ 0x1111
 800eaf4:	4013      	ands	r3, r2
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d10f      	bne.n	800eb1a <HAL_TIM_OC_DeInit+0x40>
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	6a1a      	ldr	r2, [r3, #32]
 800eb00:	f240 4344 	movw	r3, #1092	@ 0x444
 800eb04:	4013      	ands	r3, r2
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d107      	bne.n	800eb1a <HAL_TIM_OC_DeInit+0x40>
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	681a      	ldr	r2, [r3, #0]
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	f022 0201 	bic.w	r2, r2, #1
 800eb18:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->OC_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_OC_MspDeInit(htim);
 800eb1a:	6878      	ldr	r0, [r7, #4]
 800eb1c:	f000 f83b 	bl	800eb96 <HAL_TIM_OC_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	2200      	movs	r2, #0
 800eb24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2200      	movs	r2, #0
 800eb34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	2200      	movs	r2, #0
 800eb44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	2200      	movs	r2, #0
 800eb54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	2200      	movs	r2, #0
 800eb64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	2200      	movs	r2, #0
 800eb74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800eb78:	2300      	movs	r3, #0
}
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	3708      	adds	r7, #8
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	bd80      	pop	{r7, pc}

0800eb82 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800eb82:	b480      	push	{r7}
 800eb84:	b083      	sub	sp, #12
 800eb86:	af00      	add	r7, sp, #0
 800eb88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800eb8a:	bf00      	nop
 800eb8c:	370c      	adds	r7, #12
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb94:	4770      	bx	lr

0800eb96 <HAL_TIM_OC_MspDeInit>:
  * @brief  DeInitializes TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspDeInit(TIM_HandleTypeDef *htim)
{
 800eb96:	b480      	push	{r7}
 800eb98:	b083      	sub	sp, #12
 800eb9a:	af00      	add	r7, sp, #0
 800eb9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspDeInit could be implemented in the user file
   */
}
 800eb9e:	bf00      	nop
 800eba0:	370c      	adds	r7, #12
 800eba2:	46bd      	mov	sp, r7
 800eba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba8:	4770      	bx	lr

0800ebaa <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ebaa:	b580      	push	{r7, lr}
 800ebac:	b084      	sub	sp, #16
 800ebae:	af00      	add	r7, sp, #0
 800ebb0:	6078      	str	r0, [r7, #4]
 800ebb2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ebb4:	683b      	ldr	r3, [r7, #0]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d109      	bne.n	800ebce <HAL_TIM_OC_Start+0x24>
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ebc0:	b2db      	uxtb	r3, r3
 800ebc2:	2b01      	cmp	r3, #1
 800ebc4:	bf14      	ite	ne
 800ebc6:	2301      	movne	r3, #1
 800ebc8:	2300      	moveq	r3, #0
 800ebca:	b2db      	uxtb	r3, r3
 800ebcc:	e022      	b.n	800ec14 <HAL_TIM_OC_Start+0x6a>
 800ebce:	683b      	ldr	r3, [r7, #0]
 800ebd0:	2b04      	cmp	r3, #4
 800ebd2:	d109      	bne.n	800ebe8 <HAL_TIM_OC_Start+0x3e>
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ebda:	b2db      	uxtb	r3, r3
 800ebdc:	2b01      	cmp	r3, #1
 800ebde:	bf14      	ite	ne
 800ebe0:	2301      	movne	r3, #1
 800ebe2:	2300      	moveq	r3, #0
 800ebe4:	b2db      	uxtb	r3, r3
 800ebe6:	e015      	b.n	800ec14 <HAL_TIM_OC_Start+0x6a>
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	2b08      	cmp	r3, #8
 800ebec:	d109      	bne.n	800ec02 <HAL_TIM_OC_Start+0x58>
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ebf4:	b2db      	uxtb	r3, r3
 800ebf6:	2b01      	cmp	r3, #1
 800ebf8:	bf14      	ite	ne
 800ebfa:	2301      	movne	r3, #1
 800ebfc:	2300      	moveq	r3, #0
 800ebfe:	b2db      	uxtb	r3, r3
 800ec00:	e008      	b.n	800ec14 <HAL_TIM_OC_Start+0x6a>
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ec08:	b2db      	uxtb	r3, r3
 800ec0a:	2b01      	cmp	r3, #1
 800ec0c:	bf14      	ite	ne
 800ec0e:	2301      	movne	r3, #1
 800ec10:	2300      	moveq	r3, #0
 800ec12:	b2db      	uxtb	r3, r3
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d001      	beq.n	800ec1c <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 800ec18:	2301      	movs	r3, #1
 800ec1a:	e068      	b.n	800ecee <HAL_TIM_OC_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d104      	bne.n	800ec2c <HAL_TIM_OC_Start+0x82>
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	2202      	movs	r2, #2
 800ec26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ec2a:	e013      	b.n	800ec54 <HAL_TIM_OC_Start+0xaa>
 800ec2c:	683b      	ldr	r3, [r7, #0]
 800ec2e:	2b04      	cmp	r3, #4
 800ec30:	d104      	bne.n	800ec3c <HAL_TIM_OC_Start+0x92>
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	2202      	movs	r2, #2
 800ec36:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ec3a:	e00b      	b.n	800ec54 <HAL_TIM_OC_Start+0xaa>
 800ec3c:	683b      	ldr	r3, [r7, #0]
 800ec3e:	2b08      	cmp	r3, #8
 800ec40:	d104      	bne.n	800ec4c <HAL_TIM_OC_Start+0xa2>
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	2202      	movs	r2, #2
 800ec46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ec4a:	e003      	b.n	800ec54 <HAL_TIM_OC_Start+0xaa>
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	2202      	movs	r2, #2
 800ec50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	2201      	movs	r2, #1
 800ec5a:	6839      	ldr	r1, [r7, #0]
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	f005 f9bf 	bl	8013fe0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	4a24      	ldr	r2, [pc, #144]	@ (800ecf8 <HAL_TIM_OC_Start+0x14e>)
 800ec68:	4293      	cmp	r3, r2
 800ec6a:	d107      	bne.n	800ec7c <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ec7a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	4a1d      	ldr	r2, [pc, #116]	@ (800ecf8 <HAL_TIM_OC_Start+0x14e>)
 800ec82:	4293      	cmp	r3, r2
 800ec84:	d018      	beq.n	800ecb8 <HAL_TIM_OC_Start+0x10e>
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ec8e:	d013      	beq.n	800ecb8 <HAL_TIM_OC_Start+0x10e>
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	4a19      	ldr	r2, [pc, #100]	@ (800ecfc <HAL_TIM_OC_Start+0x152>)
 800ec96:	4293      	cmp	r3, r2
 800ec98:	d00e      	beq.n	800ecb8 <HAL_TIM_OC_Start+0x10e>
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	4a18      	ldr	r2, [pc, #96]	@ (800ed00 <HAL_TIM_OC_Start+0x156>)
 800eca0:	4293      	cmp	r3, r2
 800eca2:	d009      	beq.n	800ecb8 <HAL_TIM_OC_Start+0x10e>
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	4a16      	ldr	r2, [pc, #88]	@ (800ed04 <HAL_TIM_OC_Start+0x15a>)
 800ecaa:	4293      	cmp	r3, r2
 800ecac:	d004      	beq.n	800ecb8 <HAL_TIM_OC_Start+0x10e>
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	4a15      	ldr	r2, [pc, #84]	@ (800ed08 <HAL_TIM_OC_Start+0x15e>)
 800ecb4:	4293      	cmp	r3, r2
 800ecb6:	d111      	bne.n	800ecdc <HAL_TIM_OC_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	689b      	ldr	r3, [r3, #8]
 800ecbe:	f003 0307 	and.w	r3, r3, #7
 800ecc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	2b06      	cmp	r3, #6
 800ecc8:	d010      	beq.n	800ecec <HAL_TIM_OC_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	681a      	ldr	r2, [r3, #0]
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	f042 0201 	orr.w	r2, r2, #1
 800ecd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ecda:	e007      	b.n	800ecec <HAL_TIM_OC_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	681a      	ldr	r2, [r3, #0]
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	f042 0201 	orr.w	r2, r2, #1
 800ecea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ecec:	2300      	movs	r3, #0
}
 800ecee:	4618      	mov	r0, r3
 800ecf0:	3710      	adds	r7, #16
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	bd80      	pop	{r7, pc}
 800ecf6:	bf00      	nop
 800ecf8:	40010000 	.word	0x40010000
 800ecfc:	40000400 	.word	0x40000400
 800ed00:	40000800 	.word	0x40000800
 800ed04:	40000c00 	.word	0x40000c00
 800ed08:	40014000 	.word	0x40014000

0800ed0c <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b082      	sub	sp, #8
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
 800ed14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	6839      	ldr	r1, [r7, #0]
 800ed1e:	4618      	mov	r0, r3
 800ed20:	f005 f95e 	bl	8013fe0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	4a29      	ldr	r2, [pc, #164]	@ (800edd0 <HAL_TIM_OC_Stop+0xc4>)
 800ed2a:	4293      	cmp	r3, r2
 800ed2c:	d117      	bne.n	800ed5e <HAL_TIM_OC_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	6a1a      	ldr	r2, [r3, #32]
 800ed34:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ed38:	4013      	ands	r3, r2
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d10f      	bne.n	800ed5e <HAL_TIM_OC_Stop+0x52>
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	6a1a      	ldr	r2, [r3, #32]
 800ed44:	f240 4344 	movw	r3, #1092	@ 0x444
 800ed48:	4013      	ands	r3, r2
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d107      	bne.n	800ed5e <HAL_TIM_OC_Stop+0x52>
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ed5c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	6a1a      	ldr	r2, [r3, #32]
 800ed64:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ed68:	4013      	ands	r3, r2
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d10f      	bne.n	800ed8e <HAL_TIM_OC_Stop+0x82>
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	6a1a      	ldr	r2, [r3, #32]
 800ed74:	f240 4344 	movw	r3, #1092	@ 0x444
 800ed78:	4013      	ands	r3, r2
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d107      	bne.n	800ed8e <HAL_TIM_OC_Stop+0x82>
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	681a      	ldr	r2, [r3, #0]
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	f022 0201 	bic.w	r2, r2, #1
 800ed8c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ed8e:	683b      	ldr	r3, [r7, #0]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d104      	bne.n	800ed9e <HAL_TIM_OC_Stop+0x92>
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	2201      	movs	r2, #1
 800ed98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ed9c:	e013      	b.n	800edc6 <HAL_TIM_OC_Stop+0xba>
 800ed9e:	683b      	ldr	r3, [r7, #0]
 800eda0:	2b04      	cmp	r3, #4
 800eda2:	d104      	bne.n	800edae <HAL_TIM_OC_Stop+0xa2>
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2201      	movs	r2, #1
 800eda8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800edac:	e00b      	b.n	800edc6 <HAL_TIM_OC_Stop+0xba>
 800edae:	683b      	ldr	r3, [r7, #0]
 800edb0:	2b08      	cmp	r3, #8
 800edb2:	d104      	bne.n	800edbe <HAL_TIM_OC_Stop+0xb2>
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	2201      	movs	r2, #1
 800edb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800edbc:	e003      	b.n	800edc6 <HAL_TIM_OC_Stop+0xba>
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	2201      	movs	r2, #1
 800edc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800edc6:	2300      	movs	r3, #0
}
 800edc8:	4618      	mov	r0, r3
 800edca:	3708      	adds	r7, #8
 800edcc:	46bd      	mov	sp, r7
 800edce:	bd80      	pop	{r7, pc}
 800edd0:	40010000 	.word	0x40010000

0800edd4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b084      	sub	sp, #16
 800edd8:	af00      	add	r7, sp, #0
 800edda:	6078      	str	r0, [r7, #4]
 800eddc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800edde:	2300      	movs	r3, #0
 800ede0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d109      	bne.n	800edfc <HAL_TIM_OC_Start_IT+0x28>
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800edee:	b2db      	uxtb	r3, r3
 800edf0:	2b01      	cmp	r3, #1
 800edf2:	bf14      	ite	ne
 800edf4:	2301      	movne	r3, #1
 800edf6:	2300      	moveq	r3, #0
 800edf8:	b2db      	uxtb	r3, r3
 800edfa:	e022      	b.n	800ee42 <HAL_TIM_OC_Start_IT+0x6e>
 800edfc:	683b      	ldr	r3, [r7, #0]
 800edfe:	2b04      	cmp	r3, #4
 800ee00:	d109      	bne.n	800ee16 <HAL_TIM_OC_Start_IT+0x42>
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ee08:	b2db      	uxtb	r3, r3
 800ee0a:	2b01      	cmp	r3, #1
 800ee0c:	bf14      	ite	ne
 800ee0e:	2301      	movne	r3, #1
 800ee10:	2300      	moveq	r3, #0
 800ee12:	b2db      	uxtb	r3, r3
 800ee14:	e015      	b.n	800ee42 <HAL_TIM_OC_Start_IT+0x6e>
 800ee16:	683b      	ldr	r3, [r7, #0]
 800ee18:	2b08      	cmp	r3, #8
 800ee1a:	d109      	bne.n	800ee30 <HAL_TIM_OC_Start_IT+0x5c>
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ee22:	b2db      	uxtb	r3, r3
 800ee24:	2b01      	cmp	r3, #1
 800ee26:	bf14      	ite	ne
 800ee28:	2301      	movne	r3, #1
 800ee2a:	2300      	moveq	r3, #0
 800ee2c:	b2db      	uxtb	r3, r3
 800ee2e:	e008      	b.n	800ee42 <HAL_TIM_OC_Start_IT+0x6e>
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ee36:	b2db      	uxtb	r3, r3
 800ee38:	2b01      	cmp	r3, #1
 800ee3a:	bf14      	ite	ne
 800ee3c:	2301      	movne	r3, #1
 800ee3e:	2300      	moveq	r3, #0
 800ee40:	b2db      	uxtb	r3, r3
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d001      	beq.n	800ee4a <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 800ee46:	2301      	movs	r3, #1
 800ee48:	e0b3      	b.n	800efb2 <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ee4a:	683b      	ldr	r3, [r7, #0]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d104      	bne.n	800ee5a <HAL_TIM_OC_Start_IT+0x86>
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	2202      	movs	r2, #2
 800ee54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ee58:	e013      	b.n	800ee82 <HAL_TIM_OC_Start_IT+0xae>
 800ee5a:	683b      	ldr	r3, [r7, #0]
 800ee5c:	2b04      	cmp	r3, #4
 800ee5e:	d104      	bne.n	800ee6a <HAL_TIM_OC_Start_IT+0x96>
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2202      	movs	r2, #2
 800ee64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ee68:	e00b      	b.n	800ee82 <HAL_TIM_OC_Start_IT+0xae>
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	2b08      	cmp	r3, #8
 800ee6e:	d104      	bne.n	800ee7a <HAL_TIM_OC_Start_IT+0xa6>
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	2202      	movs	r2, #2
 800ee74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ee78:	e003      	b.n	800ee82 <HAL_TIM_OC_Start_IT+0xae>
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	2202      	movs	r2, #2
 800ee7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 800ee82:	683b      	ldr	r3, [r7, #0]
 800ee84:	2b0c      	cmp	r3, #12
 800ee86:	d841      	bhi.n	800ef0c <HAL_TIM_OC_Start_IT+0x138>
 800ee88:	a201      	add	r2, pc, #4	@ (adr r2, 800ee90 <HAL_TIM_OC_Start_IT+0xbc>)
 800ee8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee8e:	bf00      	nop
 800ee90:	0800eec5 	.word	0x0800eec5
 800ee94:	0800ef0d 	.word	0x0800ef0d
 800ee98:	0800ef0d 	.word	0x0800ef0d
 800ee9c:	0800ef0d 	.word	0x0800ef0d
 800eea0:	0800eed7 	.word	0x0800eed7
 800eea4:	0800ef0d 	.word	0x0800ef0d
 800eea8:	0800ef0d 	.word	0x0800ef0d
 800eeac:	0800ef0d 	.word	0x0800ef0d
 800eeb0:	0800eee9 	.word	0x0800eee9
 800eeb4:	0800ef0d 	.word	0x0800ef0d
 800eeb8:	0800ef0d 	.word	0x0800ef0d
 800eebc:	0800ef0d 	.word	0x0800ef0d
 800eec0:	0800eefb 	.word	0x0800eefb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	68da      	ldr	r2, [r3, #12]
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	f042 0202 	orr.w	r2, r2, #2
 800eed2:	60da      	str	r2, [r3, #12]
      break;
 800eed4:	e01d      	b.n	800ef12 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	68da      	ldr	r2, [r3, #12]
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	f042 0204 	orr.w	r2, r2, #4
 800eee4:	60da      	str	r2, [r3, #12]
      break;
 800eee6:	e014      	b.n	800ef12 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	68da      	ldr	r2, [r3, #12]
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	f042 0208 	orr.w	r2, r2, #8
 800eef6:	60da      	str	r2, [r3, #12]
      break;
 800eef8:	e00b      	b.n	800ef12 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	68da      	ldr	r2, [r3, #12]
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	f042 0210 	orr.w	r2, r2, #16
 800ef08:	60da      	str	r2, [r3, #12]
      break;
 800ef0a:	e002      	b.n	800ef12 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800ef0c:	2301      	movs	r3, #1
 800ef0e:	73fb      	strb	r3, [r7, #15]
      break;
 800ef10:	bf00      	nop
  }

  if (status == HAL_OK)
 800ef12:	7bfb      	ldrb	r3, [r7, #15]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d14b      	bne.n	800efb0 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	2201      	movs	r2, #1
 800ef1e:	6839      	ldr	r1, [r7, #0]
 800ef20:	4618      	mov	r0, r3
 800ef22:	f005 f85d 	bl	8013fe0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	4a24      	ldr	r2, [pc, #144]	@ (800efbc <HAL_TIM_OC_Start_IT+0x1e8>)
 800ef2c:	4293      	cmp	r3, r2
 800ef2e:	d107      	bne.n	800ef40 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ef3e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	4a1d      	ldr	r2, [pc, #116]	@ (800efbc <HAL_TIM_OC_Start_IT+0x1e8>)
 800ef46:	4293      	cmp	r3, r2
 800ef48:	d018      	beq.n	800ef7c <HAL_TIM_OC_Start_IT+0x1a8>
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ef52:	d013      	beq.n	800ef7c <HAL_TIM_OC_Start_IT+0x1a8>
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	4a19      	ldr	r2, [pc, #100]	@ (800efc0 <HAL_TIM_OC_Start_IT+0x1ec>)
 800ef5a:	4293      	cmp	r3, r2
 800ef5c:	d00e      	beq.n	800ef7c <HAL_TIM_OC_Start_IT+0x1a8>
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	4a18      	ldr	r2, [pc, #96]	@ (800efc4 <HAL_TIM_OC_Start_IT+0x1f0>)
 800ef64:	4293      	cmp	r3, r2
 800ef66:	d009      	beq.n	800ef7c <HAL_TIM_OC_Start_IT+0x1a8>
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	4a16      	ldr	r2, [pc, #88]	@ (800efc8 <HAL_TIM_OC_Start_IT+0x1f4>)
 800ef6e:	4293      	cmp	r3, r2
 800ef70:	d004      	beq.n	800ef7c <HAL_TIM_OC_Start_IT+0x1a8>
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	4a15      	ldr	r2, [pc, #84]	@ (800efcc <HAL_TIM_OC_Start_IT+0x1f8>)
 800ef78:	4293      	cmp	r3, r2
 800ef7a:	d111      	bne.n	800efa0 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	689b      	ldr	r3, [r3, #8]
 800ef82:	f003 0307 	and.w	r3, r3, #7
 800ef86:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef88:	68bb      	ldr	r3, [r7, #8]
 800ef8a:	2b06      	cmp	r3, #6
 800ef8c:	d010      	beq.n	800efb0 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	681a      	ldr	r2, [r3, #0]
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	f042 0201 	orr.w	r2, r2, #1
 800ef9c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef9e:	e007      	b.n	800efb0 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	681a      	ldr	r2, [r3, #0]
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	f042 0201 	orr.w	r2, r2, #1
 800efae:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800efb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800efb2:	4618      	mov	r0, r3
 800efb4:	3710      	adds	r7, #16
 800efb6:	46bd      	mov	sp, r7
 800efb8:	bd80      	pop	{r7, pc}
 800efba:	bf00      	nop
 800efbc:	40010000 	.word	0x40010000
 800efc0:	40000400 	.word	0x40000400
 800efc4:	40000800 	.word	0x40000800
 800efc8:	40000c00 	.word	0x40000c00
 800efcc:	40014000 	.word	0x40014000

0800efd0 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b084      	sub	sp, #16
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
 800efd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800efda:	2300      	movs	r3, #0
 800efdc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800efde:	683b      	ldr	r3, [r7, #0]
 800efe0:	2b0c      	cmp	r3, #12
 800efe2:	d841      	bhi.n	800f068 <HAL_TIM_OC_Stop_IT+0x98>
 800efe4:	a201      	add	r2, pc, #4	@ (adr r2, 800efec <HAL_TIM_OC_Stop_IT+0x1c>)
 800efe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efea:	bf00      	nop
 800efec:	0800f021 	.word	0x0800f021
 800eff0:	0800f069 	.word	0x0800f069
 800eff4:	0800f069 	.word	0x0800f069
 800eff8:	0800f069 	.word	0x0800f069
 800effc:	0800f033 	.word	0x0800f033
 800f000:	0800f069 	.word	0x0800f069
 800f004:	0800f069 	.word	0x0800f069
 800f008:	0800f069 	.word	0x0800f069
 800f00c:	0800f045 	.word	0x0800f045
 800f010:	0800f069 	.word	0x0800f069
 800f014:	0800f069 	.word	0x0800f069
 800f018:	0800f069 	.word	0x0800f069
 800f01c:	0800f057 	.word	0x0800f057
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	68da      	ldr	r2, [r3, #12]
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	f022 0202 	bic.w	r2, r2, #2
 800f02e:	60da      	str	r2, [r3, #12]
      break;
 800f030:	e01d      	b.n	800f06e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	68da      	ldr	r2, [r3, #12]
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	f022 0204 	bic.w	r2, r2, #4
 800f040:	60da      	str	r2, [r3, #12]
      break;
 800f042:	e014      	b.n	800f06e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	68da      	ldr	r2, [r3, #12]
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	f022 0208 	bic.w	r2, r2, #8
 800f052:	60da      	str	r2, [r3, #12]
      break;
 800f054:	e00b      	b.n	800f06e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	68da      	ldr	r2, [r3, #12]
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	f022 0210 	bic.w	r2, r2, #16
 800f064:	60da      	str	r2, [r3, #12]
      break;
 800f066:	e002      	b.n	800f06e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800f068:	2301      	movs	r3, #1
 800f06a:	73fb      	strb	r3, [r7, #15]
      break;
 800f06c:	bf00      	nop
  }

  if (status == HAL_OK)
 800f06e:	7bfb      	ldrb	r3, [r7, #15]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d157      	bne.n	800f124 <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	2200      	movs	r2, #0
 800f07a:	6839      	ldr	r1, [r7, #0]
 800f07c:	4618      	mov	r0, r3
 800f07e:	f004 ffaf 	bl	8013fe0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	4a2a      	ldr	r2, [pc, #168]	@ (800f130 <HAL_TIM_OC_Stop_IT+0x160>)
 800f088:	4293      	cmp	r3, r2
 800f08a:	d117      	bne.n	800f0bc <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	6a1a      	ldr	r2, [r3, #32]
 800f092:	f241 1311 	movw	r3, #4369	@ 0x1111
 800f096:	4013      	ands	r3, r2
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d10f      	bne.n	800f0bc <HAL_TIM_OC_Stop_IT+0xec>
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	6a1a      	ldr	r2, [r3, #32]
 800f0a2:	f240 4344 	movw	r3, #1092	@ 0x444
 800f0a6:	4013      	ands	r3, r2
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d107      	bne.n	800f0bc <HAL_TIM_OC_Stop_IT+0xec>
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800f0ba:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	6a1a      	ldr	r2, [r3, #32]
 800f0c2:	f241 1311 	movw	r3, #4369	@ 0x1111
 800f0c6:	4013      	ands	r3, r2
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d10f      	bne.n	800f0ec <HAL_TIM_OC_Stop_IT+0x11c>
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	6a1a      	ldr	r2, [r3, #32]
 800f0d2:	f240 4344 	movw	r3, #1092	@ 0x444
 800f0d6:	4013      	ands	r3, r2
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d107      	bne.n	800f0ec <HAL_TIM_OC_Stop_IT+0x11c>
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	681a      	ldr	r2, [r3, #0]
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	f022 0201 	bic.w	r2, r2, #1
 800f0ea:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f0ec:	683b      	ldr	r3, [r7, #0]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d104      	bne.n	800f0fc <HAL_TIM_OC_Stop_IT+0x12c>
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	2201      	movs	r2, #1
 800f0f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f0fa:	e013      	b.n	800f124 <HAL_TIM_OC_Stop_IT+0x154>
 800f0fc:	683b      	ldr	r3, [r7, #0]
 800f0fe:	2b04      	cmp	r3, #4
 800f100:	d104      	bne.n	800f10c <HAL_TIM_OC_Stop_IT+0x13c>
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	2201      	movs	r2, #1
 800f106:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f10a:	e00b      	b.n	800f124 <HAL_TIM_OC_Stop_IT+0x154>
 800f10c:	683b      	ldr	r3, [r7, #0]
 800f10e:	2b08      	cmp	r3, #8
 800f110:	d104      	bne.n	800f11c <HAL_TIM_OC_Stop_IT+0x14c>
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	2201      	movs	r2, #1
 800f116:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f11a:	e003      	b.n	800f124 <HAL_TIM_OC_Stop_IT+0x154>
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	2201      	movs	r2, #1
 800f120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 800f124:	7bfb      	ldrb	r3, [r7, #15]
}
 800f126:	4618      	mov	r0, r3
 800f128:	3710      	adds	r7, #16
 800f12a:	46bd      	mov	sp, r7
 800f12c:	bd80      	pop	{r7, pc}
 800f12e:	bf00      	nop
 800f130:	40010000 	.word	0x40010000

0800f134 <HAL_TIM_OC_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                       uint16_t Length)
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b086      	sub	sp, #24
 800f138:	af00      	add	r7, sp, #0
 800f13a:	60f8      	str	r0, [r7, #12]
 800f13c:	60b9      	str	r1, [r7, #8]
 800f13e:	607a      	str	r2, [r7, #4]
 800f140:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800f142:	2300      	movs	r3, #0
 800f144:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800f146:	68bb      	ldr	r3, [r7, #8]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d109      	bne.n	800f160 <HAL_TIM_OC_Start_DMA+0x2c>
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800f152:	b2db      	uxtb	r3, r3
 800f154:	2b02      	cmp	r3, #2
 800f156:	bf0c      	ite	eq
 800f158:	2301      	moveq	r3, #1
 800f15a:	2300      	movne	r3, #0
 800f15c:	b2db      	uxtb	r3, r3
 800f15e:	e022      	b.n	800f1a6 <HAL_TIM_OC_Start_DMA+0x72>
 800f160:	68bb      	ldr	r3, [r7, #8]
 800f162:	2b04      	cmp	r3, #4
 800f164:	d109      	bne.n	800f17a <HAL_TIM_OC_Start_DMA+0x46>
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800f16c:	b2db      	uxtb	r3, r3
 800f16e:	2b02      	cmp	r3, #2
 800f170:	bf0c      	ite	eq
 800f172:	2301      	moveq	r3, #1
 800f174:	2300      	movne	r3, #0
 800f176:	b2db      	uxtb	r3, r3
 800f178:	e015      	b.n	800f1a6 <HAL_TIM_OC_Start_DMA+0x72>
 800f17a:	68bb      	ldr	r3, [r7, #8]
 800f17c:	2b08      	cmp	r3, #8
 800f17e:	d109      	bne.n	800f194 <HAL_TIM_OC_Start_DMA+0x60>
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f186:	b2db      	uxtb	r3, r3
 800f188:	2b02      	cmp	r3, #2
 800f18a:	bf0c      	ite	eq
 800f18c:	2301      	moveq	r3, #1
 800f18e:	2300      	movne	r3, #0
 800f190:	b2db      	uxtb	r3, r3
 800f192:	e008      	b.n	800f1a6 <HAL_TIM_OC_Start_DMA+0x72>
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f19a:	b2db      	uxtb	r3, r3
 800f19c:	2b02      	cmp	r3, #2
 800f19e:	bf0c      	ite	eq
 800f1a0:	2301      	moveq	r3, #1
 800f1a2:	2300      	movne	r3, #0
 800f1a4:	b2db      	uxtb	r3, r3
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d001      	beq.n	800f1ae <HAL_TIM_OC_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800f1aa:	2302      	movs	r3, #2
 800f1ac:	e15d      	b.n	800f46a <HAL_TIM_OC_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800f1ae:	68bb      	ldr	r3, [r7, #8]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d109      	bne.n	800f1c8 <HAL_TIM_OC_Start_DMA+0x94>
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800f1ba:	b2db      	uxtb	r3, r3
 800f1bc:	2b01      	cmp	r3, #1
 800f1be:	bf0c      	ite	eq
 800f1c0:	2301      	moveq	r3, #1
 800f1c2:	2300      	movne	r3, #0
 800f1c4:	b2db      	uxtb	r3, r3
 800f1c6:	e022      	b.n	800f20e <HAL_TIM_OC_Start_DMA+0xda>
 800f1c8:	68bb      	ldr	r3, [r7, #8]
 800f1ca:	2b04      	cmp	r3, #4
 800f1cc:	d109      	bne.n	800f1e2 <HAL_TIM_OC_Start_DMA+0xae>
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800f1d4:	b2db      	uxtb	r3, r3
 800f1d6:	2b01      	cmp	r3, #1
 800f1d8:	bf0c      	ite	eq
 800f1da:	2301      	moveq	r3, #1
 800f1dc:	2300      	movne	r3, #0
 800f1de:	b2db      	uxtb	r3, r3
 800f1e0:	e015      	b.n	800f20e <HAL_TIM_OC_Start_DMA+0xda>
 800f1e2:	68bb      	ldr	r3, [r7, #8]
 800f1e4:	2b08      	cmp	r3, #8
 800f1e6:	d109      	bne.n	800f1fc <HAL_TIM_OC_Start_DMA+0xc8>
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f1ee:	b2db      	uxtb	r3, r3
 800f1f0:	2b01      	cmp	r3, #1
 800f1f2:	bf0c      	ite	eq
 800f1f4:	2301      	moveq	r3, #1
 800f1f6:	2300      	movne	r3, #0
 800f1f8:	b2db      	uxtb	r3, r3
 800f1fa:	e008      	b.n	800f20e <HAL_TIM_OC_Start_DMA+0xda>
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f202:	b2db      	uxtb	r3, r3
 800f204:	2b01      	cmp	r3, #1
 800f206:	bf0c      	ite	eq
 800f208:	2301      	moveq	r3, #1
 800f20a:	2300      	movne	r3, #0
 800f20c:	b2db      	uxtb	r3, r3
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d024      	beq.n	800f25c <HAL_TIM_OC_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	2b00      	cmp	r3, #0
 800f216:	d002      	beq.n	800f21e <HAL_TIM_OC_Start_DMA+0xea>
 800f218:	887b      	ldrh	r3, [r7, #2]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d101      	bne.n	800f222 <HAL_TIM_OC_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800f21e:	2301      	movs	r3, #1
 800f220:	e123      	b.n	800f46a <HAL_TIM_OC_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f222:	68bb      	ldr	r3, [r7, #8]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d104      	bne.n	800f232 <HAL_TIM_OC_Start_DMA+0xfe>
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	2202      	movs	r2, #2
 800f22c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f230:	e016      	b.n	800f260 <HAL_TIM_OC_Start_DMA+0x12c>
 800f232:	68bb      	ldr	r3, [r7, #8]
 800f234:	2b04      	cmp	r3, #4
 800f236:	d104      	bne.n	800f242 <HAL_TIM_OC_Start_DMA+0x10e>
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	2202      	movs	r2, #2
 800f23c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f240:	e00e      	b.n	800f260 <HAL_TIM_OC_Start_DMA+0x12c>
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	2b08      	cmp	r3, #8
 800f246:	d104      	bne.n	800f252 <HAL_TIM_OC_Start_DMA+0x11e>
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	2202      	movs	r2, #2
 800f24c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f250:	e006      	b.n	800f260 <HAL_TIM_OC_Start_DMA+0x12c>
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	2202      	movs	r2, #2
 800f256:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f25a:	e001      	b.n	800f260 <HAL_TIM_OC_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 800f25c:	2301      	movs	r3, #1
 800f25e:	e104      	b.n	800f46a <HAL_TIM_OC_Start_DMA+0x336>
  }

  switch (Channel)
 800f260:	68bb      	ldr	r3, [r7, #8]
 800f262:	2b0c      	cmp	r3, #12
 800f264:	f200 80ae 	bhi.w	800f3c4 <HAL_TIM_OC_Start_DMA+0x290>
 800f268:	a201      	add	r2, pc, #4	@ (adr r2, 800f270 <HAL_TIM_OC_Start_DMA+0x13c>)
 800f26a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f26e:	bf00      	nop
 800f270:	0800f2a5 	.word	0x0800f2a5
 800f274:	0800f3c5 	.word	0x0800f3c5
 800f278:	0800f3c5 	.word	0x0800f3c5
 800f27c:	0800f3c5 	.word	0x0800f3c5
 800f280:	0800f2ed 	.word	0x0800f2ed
 800f284:	0800f3c5 	.word	0x0800f3c5
 800f288:	0800f3c5 	.word	0x0800f3c5
 800f28c:	0800f3c5 	.word	0x0800f3c5
 800f290:	0800f335 	.word	0x0800f335
 800f294:	0800f3c5 	.word	0x0800f3c5
 800f298:	0800f3c5 	.word	0x0800f3c5
 800f29c:	0800f3c5 	.word	0x0800f3c5
 800f2a0:	0800f37d 	.word	0x0800f37d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2a8:	4a72      	ldr	r2, [pc, #456]	@ (800f474 <HAL_TIM_OC_Start_DMA+0x340>)
 800f2aa:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2b0:	4a71      	ldr	r2, [pc, #452]	@ (800f478 <HAL_TIM_OC_Start_DMA+0x344>)
 800f2b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2b8:	4a70      	ldr	r2, [pc, #448]	@ (800f47c <HAL_TIM_OC_Start_DMA+0x348>)
 800f2ba:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800f2c0:	6879      	ldr	r1, [r7, #4]
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	3334      	adds	r3, #52	@ 0x34
 800f2c8:	461a      	mov	r2, r3
 800f2ca:	887b      	ldrh	r3, [r7, #2]
 800f2cc:	f7f7 f90d 	bl	80064ea <HAL_DMA_Start_IT>
 800f2d0:	4603      	mov	r3, r0
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d001      	beq.n	800f2da <HAL_TIM_OC_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f2d6:	2301      	movs	r3, #1
 800f2d8:	e0c7      	b.n	800f46a <HAL_TIM_OC_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	68da      	ldr	r2, [r3, #12]
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f2e8:	60da      	str	r2, [r3, #12]
      break;
 800f2ea:	e06e      	b.n	800f3ca <HAL_TIM_OC_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f2f0:	4a60      	ldr	r2, [pc, #384]	@ (800f474 <HAL_TIM_OC_Start_DMA+0x340>)
 800f2f2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f2f8:	4a5f      	ldr	r2, [pc, #380]	@ (800f478 <HAL_TIM_OC_Start_DMA+0x344>)
 800f2fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f300:	4a5e      	ldr	r2, [pc, #376]	@ (800f47c <HAL_TIM_OC_Start_DMA+0x348>)
 800f302:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800f308:	6879      	ldr	r1, [r7, #4]
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	3338      	adds	r3, #56	@ 0x38
 800f310:	461a      	mov	r2, r3
 800f312:	887b      	ldrh	r3, [r7, #2]
 800f314:	f7f7 f8e9 	bl	80064ea <HAL_DMA_Start_IT>
 800f318:	4603      	mov	r3, r0
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d001      	beq.n	800f322 <HAL_TIM_OC_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f31e:	2301      	movs	r3, #1
 800f320:	e0a3      	b.n	800f46a <HAL_TIM_OC_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	68da      	ldr	r2, [r3, #12]
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800f330:	60da      	str	r2, [r3, #12]
      break;
 800f332:	e04a      	b.n	800f3ca <HAL_TIM_OC_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f338:	4a4e      	ldr	r2, [pc, #312]	@ (800f474 <HAL_TIM_OC_Start_DMA+0x340>)
 800f33a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f340:	4a4d      	ldr	r2, [pc, #308]	@ (800f478 <HAL_TIM_OC_Start_DMA+0x344>)
 800f342:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f348:	4a4c      	ldr	r2, [pc, #304]	@ (800f47c <HAL_TIM_OC_Start_DMA+0x348>)
 800f34a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800f350:	6879      	ldr	r1, [r7, #4]
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	333c      	adds	r3, #60	@ 0x3c
 800f358:	461a      	mov	r2, r3
 800f35a:	887b      	ldrh	r3, [r7, #2]
 800f35c:	f7f7 f8c5 	bl	80064ea <HAL_DMA_Start_IT>
 800f360:	4603      	mov	r3, r0
 800f362:	2b00      	cmp	r3, #0
 800f364:	d001      	beq.n	800f36a <HAL_TIM_OC_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f366:	2301      	movs	r3, #1
 800f368:	e07f      	b.n	800f46a <HAL_TIM_OC_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	68da      	ldr	r2, [r3, #12]
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f378:	60da      	str	r2, [r3, #12]
      break;
 800f37a:	e026      	b.n	800f3ca <HAL_TIM_OC_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f380:	4a3c      	ldr	r2, [pc, #240]	@ (800f474 <HAL_TIM_OC_Start_DMA+0x340>)
 800f382:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f388:	4a3b      	ldr	r2, [pc, #236]	@ (800f478 <HAL_TIM_OC_Start_DMA+0x344>)
 800f38a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f390:	4a3a      	ldr	r2, [pc, #232]	@ (800f47c <HAL_TIM_OC_Start_DMA+0x348>)
 800f392:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800f398:	6879      	ldr	r1, [r7, #4]
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	3340      	adds	r3, #64	@ 0x40
 800f3a0:	461a      	mov	r2, r3
 800f3a2:	887b      	ldrh	r3, [r7, #2]
 800f3a4:	f7f7 f8a1 	bl	80064ea <HAL_DMA_Start_IT>
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d001      	beq.n	800f3b2 <HAL_TIM_OC_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f3ae:	2301      	movs	r3, #1
 800f3b0:	e05b      	b.n	800f46a <HAL_TIM_OC_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	68da      	ldr	r2, [r3, #12]
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800f3c0:	60da      	str	r2, [r3, #12]
      break;
 800f3c2:	e002      	b.n	800f3ca <HAL_TIM_OC_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 800f3c4:	2301      	movs	r3, #1
 800f3c6:	75fb      	strb	r3, [r7, #23]
      break;
 800f3c8:	bf00      	nop
  }

  if (status == HAL_OK)
 800f3ca:	7dfb      	ldrb	r3, [r7, #23]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d14b      	bne.n	800f468 <HAL_TIM_OC_Start_DMA+0x334>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	2201      	movs	r2, #1
 800f3d6:	68b9      	ldr	r1, [r7, #8]
 800f3d8:	4618      	mov	r0, r3
 800f3da:	f004 fe01 	bl	8013fe0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	4a27      	ldr	r2, [pc, #156]	@ (800f480 <HAL_TIM_OC_Start_DMA+0x34c>)
 800f3e4:	4293      	cmp	r3, r2
 800f3e6:	d107      	bne.n	800f3f8 <HAL_TIM_OC_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f3f6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	4a20      	ldr	r2, [pc, #128]	@ (800f480 <HAL_TIM_OC_Start_DMA+0x34c>)
 800f3fe:	4293      	cmp	r3, r2
 800f400:	d018      	beq.n	800f434 <HAL_TIM_OC_Start_DMA+0x300>
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f40a:	d013      	beq.n	800f434 <HAL_TIM_OC_Start_DMA+0x300>
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	4a1c      	ldr	r2, [pc, #112]	@ (800f484 <HAL_TIM_OC_Start_DMA+0x350>)
 800f412:	4293      	cmp	r3, r2
 800f414:	d00e      	beq.n	800f434 <HAL_TIM_OC_Start_DMA+0x300>
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	4a1b      	ldr	r2, [pc, #108]	@ (800f488 <HAL_TIM_OC_Start_DMA+0x354>)
 800f41c:	4293      	cmp	r3, r2
 800f41e:	d009      	beq.n	800f434 <HAL_TIM_OC_Start_DMA+0x300>
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	4a19      	ldr	r2, [pc, #100]	@ (800f48c <HAL_TIM_OC_Start_DMA+0x358>)
 800f426:	4293      	cmp	r3, r2
 800f428:	d004      	beq.n	800f434 <HAL_TIM_OC_Start_DMA+0x300>
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	4a18      	ldr	r2, [pc, #96]	@ (800f490 <HAL_TIM_OC_Start_DMA+0x35c>)
 800f430:	4293      	cmp	r3, r2
 800f432:	d111      	bne.n	800f458 <HAL_TIM_OC_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	689b      	ldr	r3, [r3, #8]
 800f43a:	f003 0307 	and.w	r3, r3, #7
 800f43e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f440:	693b      	ldr	r3, [r7, #16]
 800f442:	2b06      	cmp	r3, #6
 800f444:	d010      	beq.n	800f468 <HAL_TIM_OC_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	681a      	ldr	r2, [r3, #0]
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	f042 0201 	orr.w	r2, r2, #1
 800f454:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f456:	e007      	b.n	800f468 <HAL_TIM_OC_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	681a      	ldr	r2, [r3, #0]
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	f042 0201 	orr.w	r2, r2, #1
 800f466:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800f468:	7dfb      	ldrb	r3, [r7, #23]
}
 800f46a:	4618      	mov	r0, r3
 800f46c:	3718      	adds	r7, #24
 800f46e:	46bd      	mov	sp, r7
 800f470:	bd80      	pop	{r7, pc}
 800f472:	bf00      	nop
 800f474:	0801344d 	.word	0x0801344d
 800f478:	080134f5 	.word	0x080134f5
 800f47c:	080133bb 	.word	0x080133bb
 800f480:	40010000 	.word	0x40010000
 800f484:	40000400 	.word	0x40000400
 800f488:	40000800 	.word	0x40000800
 800f48c:	40000c00 	.word	0x40000c00
 800f490:	40014000 	.word	0x40014000

0800f494 <HAL_TIM_OC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b084      	sub	sp, #16
 800f498:	af00      	add	r7, sp, #0
 800f49a:	6078      	str	r0, [r7, #4]
 800f49c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f49e:	2300      	movs	r3, #0
 800f4a0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800f4a2:	683b      	ldr	r3, [r7, #0]
 800f4a4:	2b0c      	cmp	r3, #12
 800f4a6:	d855      	bhi.n	800f554 <HAL_TIM_OC_Stop_DMA+0xc0>
 800f4a8:	a201      	add	r2, pc, #4	@ (adr r2, 800f4b0 <HAL_TIM_OC_Stop_DMA+0x1c>)
 800f4aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4ae:	bf00      	nop
 800f4b0:	0800f4e5 	.word	0x0800f4e5
 800f4b4:	0800f555 	.word	0x0800f555
 800f4b8:	0800f555 	.word	0x0800f555
 800f4bc:	0800f555 	.word	0x0800f555
 800f4c0:	0800f501 	.word	0x0800f501
 800f4c4:	0800f555 	.word	0x0800f555
 800f4c8:	0800f555 	.word	0x0800f555
 800f4cc:	0800f555 	.word	0x0800f555
 800f4d0:	0800f51d 	.word	0x0800f51d
 800f4d4:	0800f555 	.word	0x0800f555
 800f4d8:	0800f555 	.word	0x0800f555
 800f4dc:	0800f555 	.word	0x0800f555
 800f4e0:	0800f539 	.word	0x0800f539
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	68da      	ldr	r2, [r3, #12]
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800f4f2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	f7f7 f8be 	bl	800667a <HAL_DMA_Abort_IT>
      break;
 800f4fe:	e02c      	b.n	800f55a <HAL_TIM_OC_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	68da      	ldr	r2, [r3, #12]
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f50e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f514:	4618      	mov	r0, r3
 800f516:	f7f7 f8b0 	bl	800667a <HAL_DMA_Abort_IT>
      break;
 800f51a:	e01e      	b.n	800f55a <HAL_TIM_OC_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	68da      	ldr	r2, [r3, #12]
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800f52a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f530:	4618      	mov	r0, r3
 800f532:	f7f7 f8a2 	bl	800667a <HAL_DMA_Abort_IT>
      break;
 800f536:	e010      	b.n	800f55a <HAL_TIM_OC_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	68da      	ldr	r2, [r3, #12]
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800f546:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f54c:	4618      	mov	r0, r3
 800f54e:	f7f7 f894 	bl	800667a <HAL_DMA_Abort_IT>
      break;
 800f552:	e002      	b.n	800f55a <HAL_TIM_OC_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800f554:	2301      	movs	r3, #1
 800f556:	73fb      	strb	r3, [r7, #15]
      break;
 800f558:	bf00      	nop
  }

  if (status == HAL_OK)
 800f55a:	7bfb      	ldrb	r3, [r7, #15]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d157      	bne.n	800f610 <HAL_TIM_OC_Stop_DMA+0x17c>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	2200      	movs	r2, #0
 800f566:	6839      	ldr	r1, [r7, #0]
 800f568:	4618      	mov	r0, r3
 800f56a:	f004 fd39 	bl	8013fe0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	4a2a      	ldr	r2, [pc, #168]	@ (800f61c <HAL_TIM_OC_Stop_DMA+0x188>)
 800f574:	4293      	cmp	r3, r2
 800f576:	d117      	bne.n	800f5a8 <HAL_TIM_OC_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	6a1a      	ldr	r2, [r3, #32]
 800f57e:	f241 1311 	movw	r3, #4369	@ 0x1111
 800f582:	4013      	ands	r3, r2
 800f584:	2b00      	cmp	r3, #0
 800f586:	d10f      	bne.n	800f5a8 <HAL_TIM_OC_Stop_DMA+0x114>
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	6a1a      	ldr	r2, [r3, #32]
 800f58e:	f240 4344 	movw	r3, #1092	@ 0x444
 800f592:	4013      	ands	r3, r2
 800f594:	2b00      	cmp	r3, #0
 800f596:	d107      	bne.n	800f5a8 <HAL_TIM_OC_Stop_DMA+0x114>
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800f5a6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	6a1a      	ldr	r2, [r3, #32]
 800f5ae:	f241 1311 	movw	r3, #4369	@ 0x1111
 800f5b2:	4013      	ands	r3, r2
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d10f      	bne.n	800f5d8 <HAL_TIM_OC_Stop_DMA+0x144>
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	6a1a      	ldr	r2, [r3, #32]
 800f5be:	f240 4344 	movw	r3, #1092	@ 0x444
 800f5c2:	4013      	ands	r3, r2
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d107      	bne.n	800f5d8 <HAL_TIM_OC_Stop_DMA+0x144>
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	681a      	ldr	r2, [r3, #0]
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	f022 0201 	bic.w	r2, r2, #1
 800f5d6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f5d8:	683b      	ldr	r3, [r7, #0]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d104      	bne.n	800f5e8 <HAL_TIM_OC_Stop_DMA+0x154>
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	2201      	movs	r2, #1
 800f5e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f5e6:	e013      	b.n	800f610 <HAL_TIM_OC_Stop_DMA+0x17c>
 800f5e8:	683b      	ldr	r3, [r7, #0]
 800f5ea:	2b04      	cmp	r3, #4
 800f5ec:	d104      	bne.n	800f5f8 <HAL_TIM_OC_Stop_DMA+0x164>
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	2201      	movs	r2, #1
 800f5f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f5f6:	e00b      	b.n	800f610 <HAL_TIM_OC_Stop_DMA+0x17c>
 800f5f8:	683b      	ldr	r3, [r7, #0]
 800f5fa:	2b08      	cmp	r3, #8
 800f5fc:	d104      	bne.n	800f608 <HAL_TIM_OC_Stop_DMA+0x174>
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	2201      	movs	r2, #1
 800f602:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f606:	e003      	b.n	800f610 <HAL_TIM_OC_Stop_DMA+0x17c>
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	2201      	movs	r2, #1
 800f60c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 800f610:	7bfb      	ldrb	r3, [r7, #15]
}
 800f612:	4618      	mov	r0, r3
 800f614:	3710      	adds	r7, #16
 800f616:	46bd      	mov	sp, r7
 800f618:	bd80      	pop	{r7, pc}
 800f61a:	bf00      	nop
 800f61c:	40010000 	.word	0x40010000

0800f620 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f620:	b580      	push	{r7, lr}
 800f622:	b082      	sub	sp, #8
 800f624:	af00      	add	r7, sp, #0
 800f626:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d101      	bne.n	800f632 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f62e:	2301      	movs	r3, #1
 800f630:	e041      	b.n	800f6b6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f638:	b2db      	uxtb	r3, r3
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d106      	bne.n	800f64c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	2200      	movs	r2, #0
 800f642:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f646:	6878      	ldr	r0, [r7, #4]
 800f648:	f000 f88d 	bl	800f766 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	2202      	movs	r2, #2
 800f650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	681a      	ldr	r2, [r3, #0]
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	3304      	adds	r3, #4
 800f65c:	4619      	mov	r1, r3
 800f65e:	4610      	mov	r0, r2
 800f660:	f004 f85e 	bl	8013720 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	2201      	movs	r2, #1
 800f668:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	2201      	movs	r2, #1
 800f670:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	2201      	movs	r2, #1
 800f678:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	2201      	movs	r2, #1
 800f680:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	2201      	movs	r2, #1
 800f688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	2201      	movs	r2, #1
 800f690:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	2201      	movs	r2, #1
 800f698:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	2201      	movs	r2, #1
 800f6a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	2201      	movs	r2, #1
 800f6a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	2201      	movs	r2, #1
 800f6b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f6b4:	2300      	movs	r3, #0
}
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	3708      	adds	r7, #8
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	bd80      	pop	{r7, pc}

0800f6be <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 800f6be:	b580      	push	{r7, lr}
 800f6c0:	b082      	sub	sp, #8
 800f6c2:	af00      	add	r7, sp, #0
 800f6c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	2202      	movs	r2, #2
 800f6ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	6a1a      	ldr	r2, [r3, #32]
 800f6d4:	f241 1311 	movw	r3, #4369	@ 0x1111
 800f6d8:	4013      	ands	r3, r2
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d10f      	bne.n	800f6fe <HAL_TIM_PWM_DeInit+0x40>
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	6a1a      	ldr	r2, [r3, #32]
 800f6e4:	f240 4344 	movw	r3, #1092	@ 0x444
 800f6e8:	4013      	ands	r3, r2
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d107      	bne.n	800f6fe <HAL_TIM_PWM_DeInit+0x40>
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	681a      	ldr	r2, [r3, #0]
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	f022 0201 	bic.w	r2, r2, #1
 800f6fc:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 800f6fe:	6878      	ldr	r0, [r7, #4]
 800f700:	f000 f83b 	bl	800f77a <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	2200      	movs	r2, #0
 800f708:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	2200      	movs	r2, #0
 800f710:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	2200      	movs	r2, #0
 800f718:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	2200      	movs	r2, #0
 800f720:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	2200      	movs	r2, #0
 800f728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	2200      	movs	r2, #0
 800f730:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	2200      	movs	r2, #0
 800f738:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	2200      	movs	r2, #0
 800f740:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	2200      	movs	r2, #0
 800f748:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	2200      	movs	r2, #0
 800f750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	2200      	movs	r2, #0
 800f758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f75c:	2300      	movs	r3, #0
}
 800f75e:	4618      	mov	r0, r3
 800f760:	3708      	adds	r7, #8
 800f762:	46bd      	mov	sp, r7
 800f764:	bd80      	pop	{r7, pc}

0800f766 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800f766:	b480      	push	{r7}
 800f768:	b083      	sub	sp, #12
 800f76a:	af00      	add	r7, sp, #0
 800f76c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800f76e:	bf00      	nop
 800f770:	370c      	adds	r7, #12
 800f772:	46bd      	mov	sp, r7
 800f774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f778:	4770      	bx	lr

0800f77a <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
 800f77a:	b480      	push	{r7}
 800f77c:	b083      	sub	sp, #12
 800f77e:	af00      	add	r7, sp, #0
 800f780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
 800f782:	bf00      	nop
 800f784:	370c      	adds	r7, #12
 800f786:	46bd      	mov	sp, r7
 800f788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78c:	4770      	bx	lr

0800f78e <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f78e:	b580      	push	{r7, lr}
 800f790:	b084      	sub	sp, #16
 800f792:	af00      	add	r7, sp, #0
 800f794:	6078      	str	r0, [r7, #4]
 800f796:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f798:	683b      	ldr	r3, [r7, #0]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d109      	bne.n	800f7b2 <HAL_TIM_PWM_Start+0x24>
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800f7a4:	b2db      	uxtb	r3, r3
 800f7a6:	2b01      	cmp	r3, #1
 800f7a8:	bf14      	ite	ne
 800f7aa:	2301      	movne	r3, #1
 800f7ac:	2300      	moveq	r3, #0
 800f7ae:	b2db      	uxtb	r3, r3
 800f7b0:	e022      	b.n	800f7f8 <HAL_TIM_PWM_Start+0x6a>
 800f7b2:	683b      	ldr	r3, [r7, #0]
 800f7b4:	2b04      	cmp	r3, #4
 800f7b6:	d109      	bne.n	800f7cc <HAL_TIM_PWM_Start+0x3e>
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800f7be:	b2db      	uxtb	r3, r3
 800f7c0:	2b01      	cmp	r3, #1
 800f7c2:	bf14      	ite	ne
 800f7c4:	2301      	movne	r3, #1
 800f7c6:	2300      	moveq	r3, #0
 800f7c8:	b2db      	uxtb	r3, r3
 800f7ca:	e015      	b.n	800f7f8 <HAL_TIM_PWM_Start+0x6a>
 800f7cc:	683b      	ldr	r3, [r7, #0]
 800f7ce:	2b08      	cmp	r3, #8
 800f7d0:	d109      	bne.n	800f7e6 <HAL_TIM_PWM_Start+0x58>
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f7d8:	b2db      	uxtb	r3, r3
 800f7da:	2b01      	cmp	r3, #1
 800f7dc:	bf14      	ite	ne
 800f7de:	2301      	movne	r3, #1
 800f7e0:	2300      	moveq	r3, #0
 800f7e2:	b2db      	uxtb	r3, r3
 800f7e4:	e008      	b.n	800f7f8 <HAL_TIM_PWM_Start+0x6a>
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f7ec:	b2db      	uxtb	r3, r3
 800f7ee:	2b01      	cmp	r3, #1
 800f7f0:	bf14      	ite	ne
 800f7f2:	2301      	movne	r3, #1
 800f7f4:	2300      	moveq	r3, #0
 800f7f6:	b2db      	uxtb	r3, r3
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d001      	beq.n	800f800 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800f7fc:	2301      	movs	r3, #1
 800f7fe:	e068      	b.n	800f8d2 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d104      	bne.n	800f810 <HAL_TIM_PWM_Start+0x82>
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	2202      	movs	r2, #2
 800f80a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f80e:	e013      	b.n	800f838 <HAL_TIM_PWM_Start+0xaa>
 800f810:	683b      	ldr	r3, [r7, #0]
 800f812:	2b04      	cmp	r3, #4
 800f814:	d104      	bne.n	800f820 <HAL_TIM_PWM_Start+0x92>
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	2202      	movs	r2, #2
 800f81a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f81e:	e00b      	b.n	800f838 <HAL_TIM_PWM_Start+0xaa>
 800f820:	683b      	ldr	r3, [r7, #0]
 800f822:	2b08      	cmp	r3, #8
 800f824:	d104      	bne.n	800f830 <HAL_TIM_PWM_Start+0xa2>
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	2202      	movs	r2, #2
 800f82a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f82e:	e003      	b.n	800f838 <HAL_TIM_PWM_Start+0xaa>
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	2202      	movs	r2, #2
 800f834:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	2201      	movs	r2, #1
 800f83e:	6839      	ldr	r1, [r7, #0]
 800f840:	4618      	mov	r0, r3
 800f842:	f004 fbcd 	bl	8013fe0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	4a24      	ldr	r2, [pc, #144]	@ (800f8dc <HAL_TIM_PWM_Start+0x14e>)
 800f84c:	4293      	cmp	r3, r2
 800f84e:	d107      	bne.n	800f860 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f85e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	4a1d      	ldr	r2, [pc, #116]	@ (800f8dc <HAL_TIM_PWM_Start+0x14e>)
 800f866:	4293      	cmp	r3, r2
 800f868:	d018      	beq.n	800f89c <HAL_TIM_PWM_Start+0x10e>
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f872:	d013      	beq.n	800f89c <HAL_TIM_PWM_Start+0x10e>
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	4a19      	ldr	r2, [pc, #100]	@ (800f8e0 <HAL_TIM_PWM_Start+0x152>)
 800f87a:	4293      	cmp	r3, r2
 800f87c:	d00e      	beq.n	800f89c <HAL_TIM_PWM_Start+0x10e>
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	4a18      	ldr	r2, [pc, #96]	@ (800f8e4 <HAL_TIM_PWM_Start+0x156>)
 800f884:	4293      	cmp	r3, r2
 800f886:	d009      	beq.n	800f89c <HAL_TIM_PWM_Start+0x10e>
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	4a16      	ldr	r2, [pc, #88]	@ (800f8e8 <HAL_TIM_PWM_Start+0x15a>)
 800f88e:	4293      	cmp	r3, r2
 800f890:	d004      	beq.n	800f89c <HAL_TIM_PWM_Start+0x10e>
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	4a15      	ldr	r2, [pc, #84]	@ (800f8ec <HAL_TIM_PWM_Start+0x15e>)
 800f898:	4293      	cmp	r3, r2
 800f89a:	d111      	bne.n	800f8c0 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	689b      	ldr	r3, [r3, #8]
 800f8a2:	f003 0307 	and.w	r3, r3, #7
 800f8a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	2b06      	cmp	r3, #6
 800f8ac:	d010      	beq.n	800f8d0 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	681a      	ldr	r2, [r3, #0]
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	f042 0201 	orr.w	r2, r2, #1
 800f8bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f8be:	e007      	b.n	800f8d0 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	681a      	ldr	r2, [r3, #0]
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	f042 0201 	orr.w	r2, r2, #1
 800f8ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f8d0:	2300      	movs	r3, #0
}
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	3710      	adds	r7, #16
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	bd80      	pop	{r7, pc}
 800f8da:	bf00      	nop
 800f8dc:	40010000 	.word	0x40010000
 800f8e0:	40000400 	.word	0x40000400
 800f8e4:	40000800 	.word	0x40000800
 800f8e8:	40000c00 	.word	0x40000c00
 800f8ec:	40014000 	.word	0x40014000

0800f8f0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b082      	sub	sp, #8
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]
 800f8f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	2200      	movs	r2, #0
 800f900:	6839      	ldr	r1, [r7, #0]
 800f902:	4618      	mov	r0, r3
 800f904:	f004 fb6c 	bl	8013fe0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	4a29      	ldr	r2, [pc, #164]	@ (800f9b4 <HAL_TIM_PWM_Stop+0xc4>)
 800f90e:	4293      	cmp	r3, r2
 800f910:	d117      	bne.n	800f942 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	6a1a      	ldr	r2, [r3, #32]
 800f918:	f241 1311 	movw	r3, #4369	@ 0x1111
 800f91c:	4013      	ands	r3, r2
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d10f      	bne.n	800f942 <HAL_TIM_PWM_Stop+0x52>
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	6a1a      	ldr	r2, [r3, #32]
 800f928:	f240 4344 	movw	r3, #1092	@ 0x444
 800f92c:	4013      	ands	r3, r2
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d107      	bne.n	800f942 <HAL_TIM_PWM_Stop+0x52>
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800f940:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	6a1a      	ldr	r2, [r3, #32]
 800f948:	f241 1311 	movw	r3, #4369	@ 0x1111
 800f94c:	4013      	ands	r3, r2
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d10f      	bne.n	800f972 <HAL_TIM_PWM_Stop+0x82>
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	6a1a      	ldr	r2, [r3, #32]
 800f958:	f240 4344 	movw	r3, #1092	@ 0x444
 800f95c:	4013      	ands	r3, r2
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d107      	bne.n	800f972 <HAL_TIM_PWM_Stop+0x82>
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	681a      	ldr	r2, [r3, #0]
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	f022 0201 	bic.w	r2, r2, #1
 800f970:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f972:	683b      	ldr	r3, [r7, #0]
 800f974:	2b00      	cmp	r3, #0
 800f976:	d104      	bne.n	800f982 <HAL_TIM_PWM_Stop+0x92>
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	2201      	movs	r2, #1
 800f97c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f980:	e013      	b.n	800f9aa <HAL_TIM_PWM_Stop+0xba>
 800f982:	683b      	ldr	r3, [r7, #0]
 800f984:	2b04      	cmp	r3, #4
 800f986:	d104      	bne.n	800f992 <HAL_TIM_PWM_Stop+0xa2>
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	2201      	movs	r2, #1
 800f98c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f990:	e00b      	b.n	800f9aa <HAL_TIM_PWM_Stop+0xba>
 800f992:	683b      	ldr	r3, [r7, #0]
 800f994:	2b08      	cmp	r3, #8
 800f996:	d104      	bne.n	800f9a2 <HAL_TIM_PWM_Stop+0xb2>
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	2201      	movs	r2, #1
 800f99c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f9a0:	e003      	b.n	800f9aa <HAL_TIM_PWM_Stop+0xba>
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	2201      	movs	r2, #1
 800f9a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800f9aa:	2300      	movs	r3, #0
}
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	3708      	adds	r7, #8
 800f9b0:	46bd      	mov	sp, r7
 800f9b2:	bd80      	pop	{r7, pc}
 800f9b4:	40010000 	.word	0x40010000

0800f9b8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b084      	sub	sp, #16
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
 800f9c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f9c6:	683b      	ldr	r3, [r7, #0]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d109      	bne.n	800f9e0 <HAL_TIM_PWM_Start_IT+0x28>
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800f9d2:	b2db      	uxtb	r3, r3
 800f9d4:	2b01      	cmp	r3, #1
 800f9d6:	bf14      	ite	ne
 800f9d8:	2301      	movne	r3, #1
 800f9da:	2300      	moveq	r3, #0
 800f9dc:	b2db      	uxtb	r3, r3
 800f9de:	e022      	b.n	800fa26 <HAL_TIM_PWM_Start_IT+0x6e>
 800f9e0:	683b      	ldr	r3, [r7, #0]
 800f9e2:	2b04      	cmp	r3, #4
 800f9e4:	d109      	bne.n	800f9fa <HAL_TIM_PWM_Start_IT+0x42>
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800f9ec:	b2db      	uxtb	r3, r3
 800f9ee:	2b01      	cmp	r3, #1
 800f9f0:	bf14      	ite	ne
 800f9f2:	2301      	movne	r3, #1
 800f9f4:	2300      	moveq	r3, #0
 800f9f6:	b2db      	uxtb	r3, r3
 800f9f8:	e015      	b.n	800fa26 <HAL_TIM_PWM_Start_IT+0x6e>
 800f9fa:	683b      	ldr	r3, [r7, #0]
 800f9fc:	2b08      	cmp	r3, #8
 800f9fe:	d109      	bne.n	800fa14 <HAL_TIM_PWM_Start_IT+0x5c>
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800fa06:	b2db      	uxtb	r3, r3
 800fa08:	2b01      	cmp	r3, #1
 800fa0a:	bf14      	ite	ne
 800fa0c:	2301      	movne	r3, #1
 800fa0e:	2300      	moveq	r3, #0
 800fa10:	b2db      	uxtb	r3, r3
 800fa12:	e008      	b.n	800fa26 <HAL_TIM_PWM_Start_IT+0x6e>
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fa1a:	b2db      	uxtb	r3, r3
 800fa1c:	2b01      	cmp	r3, #1
 800fa1e:	bf14      	ite	ne
 800fa20:	2301      	movne	r3, #1
 800fa22:	2300      	moveq	r3, #0
 800fa24:	b2db      	uxtb	r3, r3
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d001      	beq.n	800fa2e <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800fa2a:	2301      	movs	r3, #1
 800fa2c:	e0b3      	b.n	800fb96 <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fa2e:	683b      	ldr	r3, [r7, #0]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d104      	bne.n	800fa3e <HAL_TIM_PWM_Start_IT+0x86>
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	2202      	movs	r2, #2
 800fa38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800fa3c:	e013      	b.n	800fa66 <HAL_TIM_PWM_Start_IT+0xae>
 800fa3e:	683b      	ldr	r3, [r7, #0]
 800fa40:	2b04      	cmp	r3, #4
 800fa42:	d104      	bne.n	800fa4e <HAL_TIM_PWM_Start_IT+0x96>
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	2202      	movs	r2, #2
 800fa48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800fa4c:	e00b      	b.n	800fa66 <HAL_TIM_PWM_Start_IT+0xae>
 800fa4e:	683b      	ldr	r3, [r7, #0]
 800fa50:	2b08      	cmp	r3, #8
 800fa52:	d104      	bne.n	800fa5e <HAL_TIM_PWM_Start_IT+0xa6>
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	2202      	movs	r2, #2
 800fa58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800fa5c:	e003      	b.n	800fa66 <HAL_TIM_PWM_Start_IT+0xae>
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	2202      	movs	r2, #2
 800fa62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 800fa66:	683b      	ldr	r3, [r7, #0]
 800fa68:	2b0c      	cmp	r3, #12
 800fa6a:	d841      	bhi.n	800faf0 <HAL_TIM_PWM_Start_IT+0x138>
 800fa6c:	a201      	add	r2, pc, #4	@ (adr r2, 800fa74 <HAL_TIM_PWM_Start_IT+0xbc>)
 800fa6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa72:	bf00      	nop
 800fa74:	0800faa9 	.word	0x0800faa9
 800fa78:	0800faf1 	.word	0x0800faf1
 800fa7c:	0800faf1 	.word	0x0800faf1
 800fa80:	0800faf1 	.word	0x0800faf1
 800fa84:	0800fabb 	.word	0x0800fabb
 800fa88:	0800faf1 	.word	0x0800faf1
 800fa8c:	0800faf1 	.word	0x0800faf1
 800fa90:	0800faf1 	.word	0x0800faf1
 800fa94:	0800facd 	.word	0x0800facd
 800fa98:	0800faf1 	.word	0x0800faf1
 800fa9c:	0800faf1 	.word	0x0800faf1
 800faa0:	0800faf1 	.word	0x0800faf1
 800faa4:	0800fadf 	.word	0x0800fadf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	68da      	ldr	r2, [r3, #12]
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	f042 0202 	orr.w	r2, r2, #2
 800fab6:	60da      	str	r2, [r3, #12]
      break;
 800fab8:	e01d      	b.n	800faf6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	68da      	ldr	r2, [r3, #12]
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	f042 0204 	orr.w	r2, r2, #4
 800fac8:	60da      	str	r2, [r3, #12]
      break;
 800faca:	e014      	b.n	800faf6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	68da      	ldr	r2, [r3, #12]
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	f042 0208 	orr.w	r2, r2, #8
 800fada:	60da      	str	r2, [r3, #12]
      break;
 800fadc:	e00b      	b.n	800faf6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	68da      	ldr	r2, [r3, #12]
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	f042 0210 	orr.w	r2, r2, #16
 800faec:	60da      	str	r2, [r3, #12]
      break;
 800faee:	e002      	b.n	800faf6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800faf0:	2301      	movs	r3, #1
 800faf2:	73fb      	strb	r3, [r7, #15]
      break;
 800faf4:	bf00      	nop
  }

  if (status == HAL_OK)
 800faf6:	7bfb      	ldrb	r3, [r7, #15]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d14b      	bne.n	800fb94 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	2201      	movs	r2, #1
 800fb02:	6839      	ldr	r1, [r7, #0]
 800fb04:	4618      	mov	r0, r3
 800fb06:	f004 fa6b 	bl	8013fe0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	4a24      	ldr	r2, [pc, #144]	@ (800fba0 <HAL_TIM_PWM_Start_IT+0x1e8>)
 800fb10:	4293      	cmp	r3, r2
 800fb12:	d107      	bne.n	800fb24 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800fb22:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	4a1d      	ldr	r2, [pc, #116]	@ (800fba0 <HAL_TIM_PWM_Start_IT+0x1e8>)
 800fb2a:	4293      	cmp	r3, r2
 800fb2c:	d018      	beq.n	800fb60 <HAL_TIM_PWM_Start_IT+0x1a8>
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fb36:	d013      	beq.n	800fb60 <HAL_TIM_PWM_Start_IT+0x1a8>
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	4a19      	ldr	r2, [pc, #100]	@ (800fba4 <HAL_TIM_PWM_Start_IT+0x1ec>)
 800fb3e:	4293      	cmp	r3, r2
 800fb40:	d00e      	beq.n	800fb60 <HAL_TIM_PWM_Start_IT+0x1a8>
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	4a18      	ldr	r2, [pc, #96]	@ (800fba8 <HAL_TIM_PWM_Start_IT+0x1f0>)
 800fb48:	4293      	cmp	r3, r2
 800fb4a:	d009      	beq.n	800fb60 <HAL_TIM_PWM_Start_IT+0x1a8>
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	4a16      	ldr	r2, [pc, #88]	@ (800fbac <HAL_TIM_PWM_Start_IT+0x1f4>)
 800fb52:	4293      	cmp	r3, r2
 800fb54:	d004      	beq.n	800fb60 <HAL_TIM_PWM_Start_IT+0x1a8>
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	4a15      	ldr	r2, [pc, #84]	@ (800fbb0 <HAL_TIM_PWM_Start_IT+0x1f8>)
 800fb5c:	4293      	cmp	r3, r2
 800fb5e:	d111      	bne.n	800fb84 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	689b      	ldr	r3, [r3, #8]
 800fb66:	f003 0307 	and.w	r3, r3, #7
 800fb6a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fb6c:	68bb      	ldr	r3, [r7, #8]
 800fb6e:	2b06      	cmp	r3, #6
 800fb70:	d010      	beq.n	800fb94 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	681a      	ldr	r2, [r3, #0]
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	f042 0201 	orr.w	r2, r2, #1
 800fb80:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fb82:	e007      	b.n	800fb94 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	681a      	ldr	r2, [r3, #0]
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	f042 0201 	orr.w	r2, r2, #1
 800fb92:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800fb94:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb96:	4618      	mov	r0, r3
 800fb98:	3710      	adds	r7, #16
 800fb9a:	46bd      	mov	sp, r7
 800fb9c:	bd80      	pop	{r7, pc}
 800fb9e:	bf00      	nop
 800fba0:	40010000 	.word	0x40010000
 800fba4:	40000400 	.word	0x40000400
 800fba8:	40000800 	.word	0x40000800
 800fbac:	40000c00 	.word	0x40000c00
 800fbb0:	40014000 	.word	0x40014000

0800fbb4 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fbb4:	b580      	push	{r7, lr}
 800fbb6:	b084      	sub	sp, #16
 800fbb8:	af00      	add	r7, sp, #0
 800fbba:	6078      	str	r0, [r7, #4]
 800fbbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800fbc2:	683b      	ldr	r3, [r7, #0]
 800fbc4:	2b0c      	cmp	r3, #12
 800fbc6:	d841      	bhi.n	800fc4c <HAL_TIM_PWM_Stop_IT+0x98>
 800fbc8:	a201      	add	r2, pc, #4	@ (adr r2, 800fbd0 <HAL_TIM_PWM_Stop_IT+0x1c>)
 800fbca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbce:	bf00      	nop
 800fbd0:	0800fc05 	.word	0x0800fc05
 800fbd4:	0800fc4d 	.word	0x0800fc4d
 800fbd8:	0800fc4d 	.word	0x0800fc4d
 800fbdc:	0800fc4d 	.word	0x0800fc4d
 800fbe0:	0800fc17 	.word	0x0800fc17
 800fbe4:	0800fc4d 	.word	0x0800fc4d
 800fbe8:	0800fc4d 	.word	0x0800fc4d
 800fbec:	0800fc4d 	.word	0x0800fc4d
 800fbf0:	0800fc29 	.word	0x0800fc29
 800fbf4:	0800fc4d 	.word	0x0800fc4d
 800fbf8:	0800fc4d 	.word	0x0800fc4d
 800fbfc:	0800fc4d 	.word	0x0800fc4d
 800fc00:	0800fc3b 	.word	0x0800fc3b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	68da      	ldr	r2, [r3, #12]
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	f022 0202 	bic.w	r2, r2, #2
 800fc12:	60da      	str	r2, [r3, #12]
      break;
 800fc14:	e01d      	b.n	800fc52 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	68da      	ldr	r2, [r3, #12]
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	f022 0204 	bic.w	r2, r2, #4
 800fc24:	60da      	str	r2, [r3, #12]
      break;
 800fc26:	e014      	b.n	800fc52 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	68da      	ldr	r2, [r3, #12]
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	f022 0208 	bic.w	r2, r2, #8
 800fc36:	60da      	str	r2, [r3, #12]
      break;
 800fc38:	e00b      	b.n	800fc52 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	68da      	ldr	r2, [r3, #12]
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	f022 0210 	bic.w	r2, r2, #16
 800fc48:	60da      	str	r2, [r3, #12]
      break;
 800fc4a:	e002      	b.n	800fc52 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800fc4c:	2301      	movs	r3, #1
 800fc4e:	73fb      	strb	r3, [r7, #15]
      break;
 800fc50:	bf00      	nop
  }

  if (status == HAL_OK)
 800fc52:	7bfb      	ldrb	r3, [r7, #15]
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d157      	bne.n	800fd08 <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	2200      	movs	r2, #0
 800fc5e:	6839      	ldr	r1, [r7, #0]
 800fc60:	4618      	mov	r0, r3
 800fc62:	f004 f9bd 	bl	8013fe0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	4a2a      	ldr	r2, [pc, #168]	@ (800fd14 <HAL_TIM_PWM_Stop_IT+0x160>)
 800fc6c:	4293      	cmp	r3, r2
 800fc6e:	d117      	bne.n	800fca0 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	6a1a      	ldr	r2, [r3, #32]
 800fc76:	f241 1311 	movw	r3, #4369	@ 0x1111
 800fc7a:	4013      	ands	r3, r2
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d10f      	bne.n	800fca0 <HAL_TIM_PWM_Stop_IT+0xec>
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	6a1a      	ldr	r2, [r3, #32]
 800fc86:	f240 4344 	movw	r3, #1092	@ 0x444
 800fc8a:	4013      	ands	r3, r2
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d107      	bne.n	800fca0 <HAL_TIM_PWM_Stop_IT+0xec>
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800fc9e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	6a1a      	ldr	r2, [r3, #32]
 800fca6:	f241 1311 	movw	r3, #4369	@ 0x1111
 800fcaa:	4013      	ands	r3, r2
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d10f      	bne.n	800fcd0 <HAL_TIM_PWM_Stop_IT+0x11c>
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	6a1a      	ldr	r2, [r3, #32]
 800fcb6:	f240 4344 	movw	r3, #1092	@ 0x444
 800fcba:	4013      	ands	r3, r2
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d107      	bne.n	800fcd0 <HAL_TIM_PWM_Stop_IT+0x11c>
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	681a      	ldr	r2, [r3, #0]
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	f022 0201 	bic.w	r2, r2, #1
 800fcce:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800fcd0:	683b      	ldr	r3, [r7, #0]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d104      	bne.n	800fce0 <HAL_TIM_PWM_Stop_IT+0x12c>
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	2201      	movs	r2, #1
 800fcda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800fcde:	e013      	b.n	800fd08 <HAL_TIM_PWM_Stop_IT+0x154>
 800fce0:	683b      	ldr	r3, [r7, #0]
 800fce2:	2b04      	cmp	r3, #4
 800fce4:	d104      	bne.n	800fcf0 <HAL_TIM_PWM_Stop_IT+0x13c>
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	2201      	movs	r2, #1
 800fcea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800fcee:	e00b      	b.n	800fd08 <HAL_TIM_PWM_Stop_IT+0x154>
 800fcf0:	683b      	ldr	r3, [r7, #0]
 800fcf2:	2b08      	cmp	r3, #8
 800fcf4:	d104      	bne.n	800fd00 <HAL_TIM_PWM_Stop_IT+0x14c>
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	2201      	movs	r2, #1
 800fcfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800fcfe:	e003      	b.n	800fd08 <HAL_TIM_PWM_Stop_IT+0x154>
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	2201      	movs	r2, #1
 800fd04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 800fd08:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	3710      	adds	r7, #16
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	bd80      	pop	{r7, pc}
 800fd12:	bf00      	nop
 800fd14:	40010000 	.word	0x40010000

0800fd18 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800fd18:	b580      	push	{r7, lr}
 800fd1a:	b086      	sub	sp, #24
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	60f8      	str	r0, [r7, #12]
 800fd20:	60b9      	str	r1, [r7, #8]
 800fd22:	607a      	str	r2, [r7, #4]
 800fd24:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800fd26:	2300      	movs	r3, #0
 800fd28:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800fd2a:	68bb      	ldr	r3, [r7, #8]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d109      	bne.n	800fd44 <HAL_TIM_PWM_Start_DMA+0x2c>
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800fd36:	b2db      	uxtb	r3, r3
 800fd38:	2b02      	cmp	r3, #2
 800fd3a:	bf0c      	ite	eq
 800fd3c:	2301      	moveq	r3, #1
 800fd3e:	2300      	movne	r3, #0
 800fd40:	b2db      	uxtb	r3, r3
 800fd42:	e022      	b.n	800fd8a <HAL_TIM_PWM_Start_DMA+0x72>
 800fd44:	68bb      	ldr	r3, [r7, #8]
 800fd46:	2b04      	cmp	r3, #4
 800fd48:	d109      	bne.n	800fd5e <HAL_TIM_PWM_Start_DMA+0x46>
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800fd50:	b2db      	uxtb	r3, r3
 800fd52:	2b02      	cmp	r3, #2
 800fd54:	bf0c      	ite	eq
 800fd56:	2301      	moveq	r3, #1
 800fd58:	2300      	movne	r3, #0
 800fd5a:	b2db      	uxtb	r3, r3
 800fd5c:	e015      	b.n	800fd8a <HAL_TIM_PWM_Start_DMA+0x72>
 800fd5e:	68bb      	ldr	r3, [r7, #8]
 800fd60:	2b08      	cmp	r3, #8
 800fd62:	d109      	bne.n	800fd78 <HAL_TIM_PWM_Start_DMA+0x60>
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800fd6a:	b2db      	uxtb	r3, r3
 800fd6c:	2b02      	cmp	r3, #2
 800fd6e:	bf0c      	ite	eq
 800fd70:	2301      	moveq	r3, #1
 800fd72:	2300      	movne	r3, #0
 800fd74:	b2db      	uxtb	r3, r3
 800fd76:	e008      	b.n	800fd8a <HAL_TIM_PWM_Start_DMA+0x72>
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fd7e:	b2db      	uxtb	r3, r3
 800fd80:	2b02      	cmp	r3, #2
 800fd82:	bf0c      	ite	eq
 800fd84:	2301      	moveq	r3, #1
 800fd86:	2300      	movne	r3, #0
 800fd88:	b2db      	uxtb	r3, r3
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d001      	beq.n	800fd92 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800fd8e:	2302      	movs	r3, #2
 800fd90:	e15d      	b.n	801004e <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800fd92:	68bb      	ldr	r3, [r7, #8]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d109      	bne.n	800fdac <HAL_TIM_PWM_Start_DMA+0x94>
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800fd9e:	b2db      	uxtb	r3, r3
 800fda0:	2b01      	cmp	r3, #1
 800fda2:	bf0c      	ite	eq
 800fda4:	2301      	moveq	r3, #1
 800fda6:	2300      	movne	r3, #0
 800fda8:	b2db      	uxtb	r3, r3
 800fdaa:	e022      	b.n	800fdf2 <HAL_TIM_PWM_Start_DMA+0xda>
 800fdac:	68bb      	ldr	r3, [r7, #8]
 800fdae:	2b04      	cmp	r3, #4
 800fdb0:	d109      	bne.n	800fdc6 <HAL_TIM_PWM_Start_DMA+0xae>
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800fdb8:	b2db      	uxtb	r3, r3
 800fdba:	2b01      	cmp	r3, #1
 800fdbc:	bf0c      	ite	eq
 800fdbe:	2301      	moveq	r3, #1
 800fdc0:	2300      	movne	r3, #0
 800fdc2:	b2db      	uxtb	r3, r3
 800fdc4:	e015      	b.n	800fdf2 <HAL_TIM_PWM_Start_DMA+0xda>
 800fdc6:	68bb      	ldr	r3, [r7, #8]
 800fdc8:	2b08      	cmp	r3, #8
 800fdca:	d109      	bne.n	800fde0 <HAL_TIM_PWM_Start_DMA+0xc8>
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800fdd2:	b2db      	uxtb	r3, r3
 800fdd4:	2b01      	cmp	r3, #1
 800fdd6:	bf0c      	ite	eq
 800fdd8:	2301      	moveq	r3, #1
 800fdda:	2300      	movne	r3, #0
 800fddc:	b2db      	uxtb	r3, r3
 800fdde:	e008      	b.n	800fdf2 <HAL_TIM_PWM_Start_DMA+0xda>
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fde6:	b2db      	uxtb	r3, r3
 800fde8:	2b01      	cmp	r3, #1
 800fdea:	bf0c      	ite	eq
 800fdec:	2301      	moveq	r3, #1
 800fdee:	2300      	movne	r3, #0
 800fdf0:	b2db      	uxtb	r3, r3
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d024      	beq.n	800fe40 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d002      	beq.n	800fe02 <HAL_TIM_PWM_Start_DMA+0xea>
 800fdfc:	887b      	ldrh	r3, [r7, #2]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d101      	bne.n	800fe06 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800fe02:	2301      	movs	r3, #1
 800fe04:	e123      	b.n	801004e <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fe06:	68bb      	ldr	r3, [r7, #8]
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d104      	bne.n	800fe16 <HAL_TIM_PWM_Start_DMA+0xfe>
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	2202      	movs	r2, #2
 800fe10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800fe14:	e016      	b.n	800fe44 <HAL_TIM_PWM_Start_DMA+0x12c>
 800fe16:	68bb      	ldr	r3, [r7, #8]
 800fe18:	2b04      	cmp	r3, #4
 800fe1a:	d104      	bne.n	800fe26 <HAL_TIM_PWM_Start_DMA+0x10e>
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	2202      	movs	r2, #2
 800fe20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800fe24:	e00e      	b.n	800fe44 <HAL_TIM_PWM_Start_DMA+0x12c>
 800fe26:	68bb      	ldr	r3, [r7, #8]
 800fe28:	2b08      	cmp	r3, #8
 800fe2a:	d104      	bne.n	800fe36 <HAL_TIM_PWM_Start_DMA+0x11e>
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	2202      	movs	r2, #2
 800fe30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800fe34:	e006      	b.n	800fe44 <HAL_TIM_PWM_Start_DMA+0x12c>
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	2202      	movs	r2, #2
 800fe3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800fe3e:	e001      	b.n	800fe44 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 800fe40:	2301      	movs	r3, #1
 800fe42:	e104      	b.n	801004e <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 800fe44:	68bb      	ldr	r3, [r7, #8]
 800fe46:	2b0c      	cmp	r3, #12
 800fe48:	f200 80ae 	bhi.w	800ffa8 <HAL_TIM_PWM_Start_DMA+0x290>
 800fe4c:	a201      	add	r2, pc, #4	@ (adr r2, 800fe54 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800fe4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe52:	bf00      	nop
 800fe54:	0800fe89 	.word	0x0800fe89
 800fe58:	0800ffa9 	.word	0x0800ffa9
 800fe5c:	0800ffa9 	.word	0x0800ffa9
 800fe60:	0800ffa9 	.word	0x0800ffa9
 800fe64:	0800fed1 	.word	0x0800fed1
 800fe68:	0800ffa9 	.word	0x0800ffa9
 800fe6c:	0800ffa9 	.word	0x0800ffa9
 800fe70:	0800ffa9 	.word	0x0800ffa9
 800fe74:	0800ff19 	.word	0x0800ff19
 800fe78:	0800ffa9 	.word	0x0800ffa9
 800fe7c:	0800ffa9 	.word	0x0800ffa9
 800fe80:	0800ffa9 	.word	0x0800ffa9
 800fe84:	0800ff61 	.word	0x0800ff61
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe8c:	4a72      	ldr	r2, [pc, #456]	@ (8010058 <HAL_TIM_PWM_Start_DMA+0x340>)
 800fe8e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe94:	4a71      	ldr	r2, [pc, #452]	@ (801005c <HAL_TIM_PWM_Start_DMA+0x344>)
 800fe96:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe9c:	4a70      	ldr	r2, [pc, #448]	@ (8010060 <HAL_TIM_PWM_Start_DMA+0x348>)
 800fe9e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800fea4:	6879      	ldr	r1, [r7, #4]
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	3334      	adds	r3, #52	@ 0x34
 800feac:	461a      	mov	r2, r3
 800feae:	887b      	ldrh	r3, [r7, #2]
 800feb0:	f7f6 fb1b 	bl	80064ea <HAL_DMA_Start_IT>
 800feb4:	4603      	mov	r3, r0
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d001      	beq.n	800febe <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800feba:	2301      	movs	r3, #1
 800febc:	e0c7      	b.n	801004e <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	68da      	ldr	r2, [r3, #12]
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800fecc:	60da      	str	r2, [r3, #12]
      break;
 800fece:	e06e      	b.n	800ffae <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fed4:	4a60      	ldr	r2, [pc, #384]	@ (8010058 <HAL_TIM_PWM_Start_DMA+0x340>)
 800fed6:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fedc:	4a5f      	ldr	r2, [pc, #380]	@ (801005c <HAL_TIM_PWM_Start_DMA+0x344>)
 800fede:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fee4:	4a5e      	ldr	r2, [pc, #376]	@ (8010060 <HAL_TIM_PWM_Start_DMA+0x348>)
 800fee6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800feec:	6879      	ldr	r1, [r7, #4]
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	3338      	adds	r3, #56	@ 0x38
 800fef4:	461a      	mov	r2, r3
 800fef6:	887b      	ldrh	r3, [r7, #2]
 800fef8:	f7f6 faf7 	bl	80064ea <HAL_DMA_Start_IT>
 800fefc:	4603      	mov	r3, r0
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d001      	beq.n	800ff06 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800ff02:	2301      	movs	r3, #1
 800ff04:	e0a3      	b.n	801004e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	68da      	ldr	r2, [r3, #12]
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ff14:	60da      	str	r2, [r3, #12]
      break;
 800ff16:	e04a      	b.n	800ffae <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff1c:	4a4e      	ldr	r2, [pc, #312]	@ (8010058 <HAL_TIM_PWM_Start_DMA+0x340>)
 800ff1e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff24:	4a4d      	ldr	r2, [pc, #308]	@ (801005c <HAL_TIM_PWM_Start_DMA+0x344>)
 800ff26:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff2c:	4a4c      	ldr	r2, [pc, #304]	@ (8010060 <HAL_TIM_PWM_Start_DMA+0x348>)
 800ff2e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800ff34:	6879      	ldr	r1, [r7, #4]
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	333c      	adds	r3, #60	@ 0x3c
 800ff3c:	461a      	mov	r2, r3
 800ff3e:	887b      	ldrh	r3, [r7, #2]
 800ff40:	f7f6 fad3 	bl	80064ea <HAL_DMA_Start_IT>
 800ff44:	4603      	mov	r3, r0
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d001      	beq.n	800ff4e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800ff4a:	2301      	movs	r3, #1
 800ff4c:	e07f      	b.n	801004e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	68da      	ldr	r2, [r3, #12]
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ff5c:	60da      	str	r2, [r3, #12]
      break;
 800ff5e:	e026      	b.n	800ffae <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ff64:	4a3c      	ldr	r2, [pc, #240]	@ (8010058 <HAL_TIM_PWM_Start_DMA+0x340>)
 800ff66:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ff6c:	4a3b      	ldr	r2, [pc, #236]	@ (801005c <HAL_TIM_PWM_Start_DMA+0x344>)
 800ff6e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ff74:	4a3a      	ldr	r2, [pc, #232]	@ (8010060 <HAL_TIM_PWM_Start_DMA+0x348>)
 800ff76:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ff7c:	6879      	ldr	r1, [r7, #4]
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	3340      	adds	r3, #64	@ 0x40
 800ff84:	461a      	mov	r2, r3
 800ff86:	887b      	ldrh	r3, [r7, #2]
 800ff88:	f7f6 faaf 	bl	80064ea <HAL_DMA_Start_IT>
 800ff8c:	4603      	mov	r3, r0
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d001      	beq.n	800ff96 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800ff92:	2301      	movs	r3, #1
 800ff94:	e05b      	b.n	801004e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	68da      	ldr	r2, [r3, #12]
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ffa4:	60da      	str	r2, [r3, #12]
      break;
 800ffa6:	e002      	b.n	800ffae <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 800ffa8:	2301      	movs	r3, #1
 800ffaa:	75fb      	strb	r3, [r7, #23]
      break;
 800ffac:	bf00      	nop
  }

  if (status == HAL_OK)
 800ffae:	7dfb      	ldrb	r3, [r7, #23]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d14b      	bne.n	801004c <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	2201      	movs	r2, #1
 800ffba:	68b9      	ldr	r1, [r7, #8]
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	f004 f80f 	bl	8013fe0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	4a27      	ldr	r2, [pc, #156]	@ (8010064 <HAL_TIM_PWM_Start_DMA+0x34c>)
 800ffc8:	4293      	cmp	r3, r2
 800ffca:	d107      	bne.n	800ffdc <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ffda:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	4a20      	ldr	r2, [pc, #128]	@ (8010064 <HAL_TIM_PWM_Start_DMA+0x34c>)
 800ffe2:	4293      	cmp	r3, r2
 800ffe4:	d018      	beq.n	8010018 <HAL_TIM_PWM_Start_DMA+0x300>
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ffee:	d013      	beq.n	8010018 <HAL_TIM_PWM_Start_DMA+0x300>
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	4a1c      	ldr	r2, [pc, #112]	@ (8010068 <HAL_TIM_PWM_Start_DMA+0x350>)
 800fff6:	4293      	cmp	r3, r2
 800fff8:	d00e      	beq.n	8010018 <HAL_TIM_PWM_Start_DMA+0x300>
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	4a1b      	ldr	r2, [pc, #108]	@ (801006c <HAL_TIM_PWM_Start_DMA+0x354>)
 8010000:	4293      	cmp	r3, r2
 8010002:	d009      	beq.n	8010018 <HAL_TIM_PWM_Start_DMA+0x300>
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	4a19      	ldr	r2, [pc, #100]	@ (8010070 <HAL_TIM_PWM_Start_DMA+0x358>)
 801000a:	4293      	cmp	r3, r2
 801000c:	d004      	beq.n	8010018 <HAL_TIM_PWM_Start_DMA+0x300>
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	4a18      	ldr	r2, [pc, #96]	@ (8010074 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8010014:	4293      	cmp	r3, r2
 8010016:	d111      	bne.n	801003c <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	689b      	ldr	r3, [r3, #8]
 801001e:	f003 0307 	and.w	r3, r3, #7
 8010022:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010024:	693b      	ldr	r3, [r7, #16]
 8010026:	2b06      	cmp	r3, #6
 8010028:	d010      	beq.n	801004c <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	681a      	ldr	r2, [r3, #0]
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	f042 0201 	orr.w	r2, r2, #1
 8010038:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801003a:	e007      	b.n	801004c <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	681a      	ldr	r2, [r3, #0]
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	f042 0201 	orr.w	r2, r2, #1
 801004a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 801004c:	7dfb      	ldrb	r3, [r7, #23]
}
 801004e:	4618      	mov	r0, r3
 8010050:	3718      	adds	r7, #24
 8010052:	46bd      	mov	sp, r7
 8010054:	bd80      	pop	{r7, pc}
 8010056:	bf00      	nop
 8010058:	0801344d 	.word	0x0801344d
 801005c:	080134f5 	.word	0x080134f5
 8010060:	080133bb 	.word	0x080133bb
 8010064:	40010000 	.word	0x40010000
 8010068:	40000400 	.word	0x40000400
 801006c:	40000800 	.word	0x40000800
 8010070:	40000c00 	.word	0x40000c00
 8010074:	40014000 	.word	0x40014000

08010078 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010078:	b580      	push	{r7, lr}
 801007a:	b084      	sub	sp, #16
 801007c:	af00      	add	r7, sp, #0
 801007e:	6078      	str	r0, [r7, #4]
 8010080:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010082:	2300      	movs	r3, #0
 8010084:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8010086:	683b      	ldr	r3, [r7, #0]
 8010088:	2b0c      	cmp	r3, #12
 801008a:	d855      	bhi.n	8010138 <HAL_TIM_PWM_Stop_DMA+0xc0>
 801008c:	a201      	add	r2, pc, #4	@ (adr r2, 8010094 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 801008e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010092:	bf00      	nop
 8010094:	080100c9 	.word	0x080100c9
 8010098:	08010139 	.word	0x08010139
 801009c:	08010139 	.word	0x08010139
 80100a0:	08010139 	.word	0x08010139
 80100a4:	080100e5 	.word	0x080100e5
 80100a8:	08010139 	.word	0x08010139
 80100ac:	08010139 	.word	0x08010139
 80100b0:	08010139 	.word	0x08010139
 80100b4:	08010101 	.word	0x08010101
 80100b8:	08010139 	.word	0x08010139
 80100bc:	08010139 	.word	0x08010139
 80100c0:	08010139 	.word	0x08010139
 80100c4:	0801011d 	.word	0x0801011d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	68da      	ldr	r2, [r3, #12]
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80100d6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100dc:	4618      	mov	r0, r3
 80100de:	f7f6 facc 	bl	800667a <HAL_DMA_Abort_IT>
      break;
 80100e2:	e02c      	b.n	801013e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	68da      	ldr	r2, [r3, #12]
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80100f2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80100f8:	4618      	mov	r0, r3
 80100fa:	f7f6 fabe 	bl	800667a <HAL_DMA_Abort_IT>
      break;
 80100fe:	e01e      	b.n	801013e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	68da      	ldr	r2, [r3, #12]
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 801010e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010114:	4618      	mov	r0, r3
 8010116:	f7f6 fab0 	bl	800667a <HAL_DMA_Abort_IT>
      break;
 801011a:	e010      	b.n	801013e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	68da      	ldr	r2, [r3, #12]
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 801012a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010130:	4618      	mov	r0, r3
 8010132:	f7f6 faa2 	bl	800667a <HAL_DMA_Abort_IT>
      break;
 8010136:	e002      	b.n	801013e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8010138:	2301      	movs	r3, #1
 801013a:	73fb      	strb	r3, [r7, #15]
      break;
 801013c:	bf00      	nop
  }

  if (status == HAL_OK)
 801013e:	7bfb      	ldrb	r3, [r7, #15]
 8010140:	2b00      	cmp	r3, #0
 8010142:	d157      	bne.n	80101f4 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	2200      	movs	r2, #0
 801014a:	6839      	ldr	r1, [r7, #0]
 801014c:	4618      	mov	r0, r3
 801014e:	f003 ff47 	bl	8013fe0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	4a2a      	ldr	r2, [pc, #168]	@ (8010200 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8010158:	4293      	cmp	r3, r2
 801015a:	d117      	bne.n	801018c <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	6a1a      	ldr	r2, [r3, #32]
 8010162:	f241 1311 	movw	r3, #4369	@ 0x1111
 8010166:	4013      	ands	r3, r2
 8010168:	2b00      	cmp	r3, #0
 801016a:	d10f      	bne.n	801018c <HAL_TIM_PWM_Stop_DMA+0x114>
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	6a1a      	ldr	r2, [r3, #32]
 8010172:	f240 4344 	movw	r3, #1092	@ 0x444
 8010176:	4013      	ands	r3, r2
 8010178:	2b00      	cmp	r3, #0
 801017a:	d107      	bne.n	801018c <HAL_TIM_PWM_Stop_DMA+0x114>
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801018a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	6a1a      	ldr	r2, [r3, #32]
 8010192:	f241 1311 	movw	r3, #4369	@ 0x1111
 8010196:	4013      	ands	r3, r2
 8010198:	2b00      	cmp	r3, #0
 801019a:	d10f      	bne.n	80101bc <HAL_TIM_PWM_Stop_DMA+0x144>
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	6a1a      	ldr	r2, [r3, #32]
 80101a2:	f240 4344 	movw	r3, #1092	@ 0x444
 80101a6:	4013      	ands	r3, r2
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d107      	bne.n	80101bc <HAL_TIM_PWM_Stop_DMA+0x144>
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	681a      	ldr	r2, [r3, #0]
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	f022 0201 	bic.w	r2, r2, #1
 80101ba:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80101bc:	683b      	ldr	r3, [r7, #0]
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d104      	bne.n	80101cc <HAL_TIM_PWM_Stop_DMA+0x154>
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	2201      	movs	r2, #1
 80101c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80101ca:	e013      	b.n	80101f4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80101cc:	683b      	ldr	r3, [r7, #0]
 80101ce:	2b04      	cmp	r3, #4
 80101d0:	d104      	bne.n	80101dc <HAL_TIM_PWM_Stop_DMA+0x164>
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	2201      	movs	r2, #1
 80101d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80101da:	e00b      	b.n	80101f4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80101dc:	683b      	ldr	r3, [r7, #0]
 80101de:	2b08      	cmp	r3, #8
 80101e0:	d104      	bne.n	80101ec <HAL_TIM_PWM_Stop_DMA+0x174>
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	2201      	movs	r2, #1
 80101e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80101ea:	e003      	b.n	80101f4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	2201      	movs	r2, #1
 80101f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80101f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80101f6:	4618      	mov	r0, r3
 80101f8:	3710      	adds	r7, #16
 80101fa:	46bd      	mov	sp, r7
 80101fc:	bd80      	pop	{r7, pc}
 80101fe:	bf00      	nop
 8010200:	40010000 	.word	0x40010000

08010204 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8010204:	b580      	push	{r7, lr}
 8010206:	b082      	sub	sp, #8
 8010208:	af00      	add	r7, sp, #0
 801020a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	2b00      	cmp	r3, #0
 8010210:	d101      	bne.n	8010216 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8010212:	2301      	movs	r3, #1
 8010214:	e041      	b.n	801029a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801021c:	b2db      	uxtb	r3, r3
 801021e:	2b00      	cmp	r3, #0
 8010220:	d106      	bne.n	8010230 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	2200      	movs	r2, #0
 8010226:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 801022a:	6878      	ldr	r0, [r7, #4]
 801022c:	f000 f88d 	bl	801034a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	2202      	movs	r2, #2
 8010234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	681a      	ldr	r2, [r3, #0]
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	3304      	adds	r3, #4
 8010240:	4619      	mov	r1, r3
 8010242:	4610      	mov	r0, r2
 8010244:	f003 fa6c 	bl	8013720 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	2201      	movs	r2, #1
 801024c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	2201      	movs	r2, #1
 8010254:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	2201      	movs	r2, #1
 801025c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	2201      	movs	r2, #1
 8010264:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	2201      	movs	r2, #1
 801026c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	2201      	movs	r2, #1
 8010274:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	2201      	movs	r2, #1
 801027c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	2201      	movs	r2, #1
 8010284:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	2201      	movs	r2, #1
 801028c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	2201      	movs	r2, #1
 8010294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8010298:	2300      	movs	r3, #0
}
 801029a:	4618      	mov	r0, r3
 801029c:	3708      	adds	r7, #8
 801029e:	46bd      	mov	sp, r7
 80102a0:	bd80      	pop	{r7, pc}

080102a2 <HAL_TIM_IC_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_DeInit(TIM_HandleTypeDef *htim)
{
 80102a2:	b580      	push	{r7, lr}
 80102a4:	b082      	sub	sp, #8
 80102a6:	af00      	add	r7, sp, #0
 80102a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	2202      	movs	r2, #2
 80102ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	6a1a      	ldr	r2, [r3, #32]
 80102b8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80102bc:	4013      	ands	r3, r2
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d10f      	bne.n	80102e2 <HAL_TIM_IC_DeInit+0x40>
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	6a1a      	ldr	r2, [r3, #32]
 80102c8:	f240 4344 	movw	r3, #1092	@ 0x444
 80102cc:	4013      	ands	r3, r2
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d107      	bne.n	80102e2 <HAL_TIM_IC_DeInit+0x40>
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	681a      	ldr	r2, [r3, #0]
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	f022 0201 	bic.w	r2, r2, #1
 80102e0:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->IC_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_IC_MspDeInit(htim);
 80102e2:	6878      	ldr	r0, [r7, #4]
 80102e4:	f000 f83b 	bl	801035e <HAL_TIM_IC_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	2200      	movs	r2, #0
 80102ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	2200      	movs	r2, #0
 80102f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	2200      	movs	r2, #0
 80102fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	2200      	movs	r2, #0
 8010304:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	2200      	movs	r2, #0
 801030c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	2200      	movs	r2, #0
 8010314:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	2200      	movs	r2, #0
 801031c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	2200      	movs	r2, #0
 8010324:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	2200      	movs	r2, #0
 801032c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	2200      	movs	r2, #0
 8010334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	2200      	movs	r2, #0
 801033c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010340:	2300      	movs	r3, #0
}
 8010342:	4618      	mov	r0, r3
 8010344:	3708      	adds	r7, #8
 8010346:	46bd      	mov	sp, r7
 8010348:	bd80      	pop	{r7, pc}

0801034a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 801034a:	b480      	push	{r7}
 801034c:	b083      	sub	sp, #12
 801034e:	af00      	add	r7, sp, #0
 8010350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8010352:	bf00      	nop
 8010354:	370c      	adds	r7, #12
 8010356:	46bd      	mov	sp, r7
 8010358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801035c:	4770      	bx	lr

0801035e <HAL_TIM_IC_MspDeInit>:
  * @brief  DeInitializes TIM Input Capture MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspDeInit(TIM_HandleTypeDef *htim)
{
 801035e:	b480      	push	{r7}
 8010360:	b083      	sub	sp, #12
 8010362:	af00      	add	r7, sp, #0
 8010364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspDeInit could be implemented in the user file
   */
}
 8010366:	bf00      	nop
 8010368:	370c      	adds	r7, #12
 801036a:	46bd      	mov	sp, r7
 801036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010370:	4770      	bx	lr

08010372 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010372:	b580      	push	{r7, lr}
 8010374:	b084      	sub	sp, #16
 8010376:	af00      	add	r7, sp, #0
 8010378:	6078      	str	r0, [r7, #4]
 801037a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 801037c:	683b      	ldr	r3, [r7, #0]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d104      	bne.n	801038c <HAL_TIM_IC_Start+0x1a>
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8010388:	b2db      	uxtb	r3, r3
 801038a:	e013      	b.n	80103b4 <HAL_TIM_IC_Start+0x42>
 801038c:	683b      	ldr	r3, [r7, #0]
 801038e:	2b04      	cmp	r3, #4
 8010390:	d104      	bne.n	801039c <HAL_TIM_IC_Start+0x2a>
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8010398:	b2db      	uxtb	r3, r3
 801039a:	e00b      	b.n	80103b4 <HAL_TIM_IC_Start+0x42>
 801039c:	683b      	ldr	r3, [r7, #0]
 801039e:	2b08      	cmp	r3, #8
 80103a0:	d104      	bne.n	80103ac <HAL_TIM_IC_Start+0x3a>
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80103a8:	b2db      	uxtb	r3, r3
 80103aa:	e003      	b.n	80103b4 <HAL_TIM_IC_Start+0x42>
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80103b2:	b2db      	uxtb	r3, r3
 80103b4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80103b6:	683b      	ldr	r3, [r7, #0]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d104      	bne.n	80103c6 <HAL_TIM_IC_Start+0x54>
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80103c2:	b2db      	uxtb	r3, r3
 80103c4:	e013      	b.n	80103ee <HAL_TIM_IC_Start+0x7c>
 80103c6:	683b      	ldr	r3, [r7, #0]
 80103c8:	2b04      	cmp	r3, #4
 80103ca:	d104      	bne.n	80103d6 <HAL_TIM_IC_Start+0x64>
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80103d2:	b2db      	uxtb	r3, r3
 80103d4:	e00b      	b.n	80103ee <HAL_TIM_IC_Start+0x7c>
 80103d6:	683b      	ldr	r3, [r7, #0]
 80103d8:	2b08      	cmp	r3, #8
 80103da:	d104      	bne.n	80103e6 <HAL_TIM_IC_Start+0x74>
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80103e2:	b2db      	uxtb	r3, r3
 80103e4:	e003      	b.n	80103ee <HAL_TIM_IC_Start+0x7c>
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80103ec:	b2db      	uxtb	r3, r3
 80103ee:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80103f0:	7bfb      	ldrb	r3, [r7, #15]
 80103f2:	2b01      	cmp	r3, #1
 80103f4:	d102      	bne.n	80103fc <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80103f6:	7bbb      	ldrb	r3, [r7, #14]
 80103f8:	2b01      	cmp	r3, #1
 80103fa:	d001      	beq.n	8010400 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 80103fc:	2301      	movs	r3, #1
 80103fe:	e077      	b.n	80104f0 <HAL_TIM_IC_Start+0x17e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010400:	683b      	ldr	r3, [r7, #0]
 8010402:	2b00      	cmp	r3, #0
 8010404:	d104      	bne.n	8010410 <HAL_TIM_IC_Start+0x9e>
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	2202      	movs	r2, #2
 801040a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801040e:	e013      	b.n	8010438 <HAL_TIM_IC_Start+0xc6>
 8010410:	683b      	ldr	r3, [r7, #0]
 8010412:	2b04      	cmp	r3, #4
 8010414:	d104      	bne.n	8010420 <HAL_TIM_IC_Start+0xae>
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	2202      	movs	r2, #2
 801041a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801041e:	e00b      	b.n	8010438 <HAL_TIM_IC_Start+0xc6>
 8010420:	683b      	ldr	r3, [r7, #0]
 8010422:	2b08      	cmp	r3, #8
 8010424:	d104      	bne.n	8010430 <HAL_TIM_IC_Start+0xbe>
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	2202      	movs	r2, #2
 801042a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801042e:	e003      	b.n	8010438 <HAL_TIM_IC_Start+0xc6>
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	2202      	movs	r2, #2
 8010434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010438:	683b      	ldr	r3, [r7, #0]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d104      	bne.n	8010448 <HAL_TIM_IC_Start+0xd6>
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	2202      	movs	r2, #2
 8010442:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010446:	e013      	b.n	8010470 <HAL_TIM_IC_Start+0xfe>
 8010448:	683b      	ldr	r3, [r7, #0]
 801044a:	2b04      	cmp	r3, #4
 801044c:	d104      	bne.n	8010458 <HAL_TIM_IC_Start+0xe6>
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	2202      	movs	r2, #2
 8010452:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010456:	e00b      	b.n	8010470 <HAL_TIM_IC_Start+0xfe>
 8010458:	683b      	ldr	r3, [r7, #0]
 801045a:	2b08      	cmp	r3, #8
 801045c:	d104      	bne.n	8010468 <HAL_TIM_IC_Start+0xf6>
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	2202      	movs	r2, #2
 8010462:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010466:	e003      	b.n	8010470 <HAL_TIM_IC_Start+0xfe>
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	2202      	movs	r2, #2
 801046c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	2201      	movs	r2, #1
 8010476:	6839      	ldr	r1, [r7, #0]
 8010478:	4618      	mov	r0, r3
 801047a:	f003 fdb1 	bl	8013fe0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	4a1d      	ldr	r2, [pc, #116]	@ (80104f8 <HAL_TIM_IC_Start+0x186>)
 8010484:	4293      	cmp	r3, r2
 8010486:	d018      	beq.n	80104ba <HAL_TIM_IC_Start+0x148>
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010490:	d013      	beq.n	80104ba <HAL_TIM_IC_Start+0x148>
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	4a19      	ldr	r2, [pc, #100]	@ (80104fc <HAL_TIM_IC_Start+0x18a>)
 8010498:	4293      	cmp	r3, r2
 801049a:	d00e      	beq.n	80104ba <HAL_TIM_IC_Start+0x148>
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	4a17      	ldr	r2, [pc, #92]	@ (8010500 <HAL_TIM_IC_Start+0x18e>)
 80104a2:	4293      	cmp	r3, r2
 80104a4:	d009      	beq.n	80104ba <HAL_TIM_IC_Start+0x148>
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	4a16      	ldr	r2, [pc, #88]	@ (8010504 <HAL_TIM_IC_Start+0x192>)
 80104ac:	4293      	cmp	r3, r2
 80104ae:	d004      	beq.n	80104ba <HAL_TIM_IC_Start+0x148>
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	4a14      	ldr	r2, [pc, #80]	@ (8010508 <HAL_TIM_IC_Start+0x196>)
 80104b6:	4293      	cmp	r3, r2
 80104b8:	d111      	bne.n	80104de <HAL_TIM_IC_Start+0x16c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	689b      	ldr	r3, [r3, #8]
 80104c0:	f003 0307 	and.w	r3, r3, #7
 80104c4:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80104c6:	68bb      	ldr	r3, [r7, #8]
 80104c8:	2b06      	cmp	r3, #6
 80104ca:	d010      	beq.n	80104ee <HAL_TIM_IC_Start+0x17c>
    {
      __HAL_TIM_ENABLE(htim);
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	681a      	ldr	r2, [r3, #0]
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	f042 0201 	orr.w	r2, r2, #1
 80104da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80104dc:	e007      	b.n	80104ee <HAL_TIM_IC_Start+0x17c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	681a      	ldr	r2, [r3, #0]
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	f042 0201 	orr.w	r2, r2, #1
 80104ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80104ee:	2300      	movs	r3, #0
}
 80104f0:	4618      	mov	r0, r3
 80104f2:	3710      	adds	r7, #16
 80104f4:	46bd      	mov	sp, r7
 80104f6:	bd80      	pop	{r7, pc}
 80104f8:	40010000 	.word	0x40010000
 80104fc:	40000400 	.word	0x40000400
 8010500:	40000800 	.word	0x40000800
 8010504:	40000c00 	.word	0x40000c00
 8010508:	40014000 	.word	0x40014000

0801050c <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801050c:	b580      	push	{r7, lr}
 801050e:	b082      	sub	sp, #8
 8010510:	af00      	add	r7, sp, #0
 8010512:	6078      	str	r0, [r7, #4]
 8010514:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	2200      	movs	r2, #0
 801051c:	6839      	ldr	r1, [r7, #0]
 801051e:	4618      	mov	r0, r3
 8010520:	f003 fd5e 	bl	8013fe0 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	6a1a      	ldr	r2, [r3, #32]
 801052a:	f241 1311 	movw	r3, #4369	@ 0x1111
 801052e:	4013      	ands	r3, r2
 8010530:	2b00      	cmp	r3, #0
 8010532:	d10f      	bne.n	8010554 <HAL_TIM_IC_Stop+0x48>
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	6a1a      	ldr	r2, [r3, #32]
 801053a:	f240 4344 	movw	r3, #1092	@ 0x444
 801053e:	4013      	ands	r3, r2
 8010540:	2b00      	cmp	r3, #0
 8010542:	d107      	bne.n	8010554 <HAL_TIM_IC_Stop+0x48>
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	681a      	ldr	r2, [r3, #0]
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	f022 0201 	bic.w	r2, r2, #1
 8010552:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8010554:	683b      	ldr	r3, [r7, #0]
 8010556:	2b00      	cmp	r3, #0
 8010558:	d104      	bne.n	8010564 <HAL_TIM_IC_Stop+0x58>
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	2201      	movs	r2, #1
 801055e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010562:	e013      	b.n	801058c <HAL_TIM_IC_Stop+0x80>
 8010564:	683b      	ldr	r3, [r7, #0]
 8010566:	2b04      	cmp	r3, #4
 8010568:	d104      	bne.n	8010574 <HAL_TIM_IC_Stop+0x68>
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	2201      	movs	r2, #1
 801056e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010572:	e00b      	b.n	801058c <HAL_TIM_IC_Stop+0x80>
 8010574:	683b      	ldr	r3, [r7, #0]
 8010576:	2b08      	cmp	r3, #8
 8010578:	d104      	bne.n	8010584 <HAL_TIM_IC_Stop+0x78>
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	2201      	movs	r2, #1
 801057e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010582:	e003      	b.n	801058c <HAL_TIM_IC_Stop+0x80>
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	2201      	movs	r2, #1
 8010588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801058c:	683b      	ldr	r3, [r7, #0]
 801058e:	2b00      	cmp	r3, #0
 8010590:	d104      	bne.n	801059c <HAL_TIM_IC_Stop+0x90>
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	2201      	movs	r2, #1
 8010596:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801059a:	e013      	b.n	80105c4 <HAL_TIM_IC_Stop+0xb8>
 801059c:	683b      	ldr	r3, [r7, #0]
 801059e:	2b04      	cmp	r3, #4
 80105a0:	d104      	bne.n	80105ac <HAL_TIM_IC_Stop+0xa0>
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	2201      	movs	r2, #1
 80105a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80105aa:	e00b      	b.n	80105c4 <HAL_TIM_IC_Stop+0xb8>
 80105ac:	683b      	ldr	r3, [r7, #0]
 80105ae:	2b08      	cmp	r3, #8
 80105b0:	d104      	bne.n	80105bc <HAL_TIM_IC_Stop+0xb0>
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	2201      	movs	r2, #1
 80105b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80105ba:	e003      	b.n	80105c4 <HAL_TIM_IC_Stop+0xb8>
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	2201      	movs	r2, #1
 80105c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 80105c4:	2300      	movs	r3, #0
}
 80105c6:	4618      	mov	r0, r3
 80105c8:	3708      	adds	r7, #8
 80105ca:	46bd      	mov	sp, r7
 80105cc:	bd80      	pop	{r7, pc}

080105ce <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80105ce:	b580      	push	{r7, lr}
 80105d0:	b084      	sub	sp, #16
 80105d2:	af00      	add	r7, sp, #0
 80105d4:	6078      	str	r0, [r7, #4]
 80105d6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80105d8:	2300      	movs	r3, #0
 80105da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80105dc:	683b      	ldr	r3, [r7, #0]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d104      	bne.n	80105ec <HAL_TIM_IC_Start_IT+0x1e>
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80105e8:	b2db      	uxtb	r3, r3
 80105ea:	e013      	b.n	8010614 <HAL_TIM_IC_Start_IT+0x46>
 80105ec:	683b      	ldr	r3, [r7, #0]
 80105ee:	2b04      	cmp	r3, #4
 80105f0:	d104      	bne.n	80105fc <HAL_TIM_IC_Start_IT+0x2e>
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80105f8:	b2db      	uxtb	r3, r3
 80105fa:	e00b      	b.n	8010614 <HAL_TIM_IC_Start_IT+0x46>
 80105fc:	683b      	ldr	r3, [r7, #0]
 80105fe:	2b08      	cmp	r3, #8
 8010600:	d104      	bne.n	801060c <HAL_TIM_IC_Start_IT+0x3e>
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010608:	b2db      	uxtb	r3, r3
 801060a:	e003      	b.n	8010614 <HAL_TIM_IC_Start_IT+0x46>
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010612:	b2db      	uxtb	r3, r3
 8010614:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8010616:	683b      	ldr	r3, [r7, #0]
 8010618:	2b00      	cmp	r3, #0
 801061a:	d104      	bne.n	8010626 <HAL_TIM_IC_Start_IT+0x58>
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010622:	b2db      	uxtb	r3, r3
 8010624:	e013      	b.n	801064e <HAL_TIM_IC_Start_IT+0x80>
 8010626:	683b      	ldr	r3, [r7, #0]
 8010628:	2b04      	cmp	r3, #4
 801062a:	d104      	bne.n	8010636 <HAL_TIM_IC_Start_IT+0x68>
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010632:	b2db      	uxtb	r3, r3
 8010634:	e00b      	b.n	801064e <HAL_TIM_IC_Start_IT+0x80>
 8010636:	683b      	ldr	r3, [r7, #0]
 8010638:	2b08      	cmp	r3, #8
 801063a:	d104      	bne.n	8010646 <HAL_TIM_IC_Start_IT+0x78>
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010642:	b2db      	uxtb	r3, r3
 8010644:	e003      	b.n	801064e <HAL_TIM_IC_Start_IT+0x80>
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801064c:	b2db      	uxtb	r3, r3
 801064e:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8010650:	7bbb      	ldrb	r3, [r7, #14]
 8010652:	2b01      	cmp	r3, #1
 8010654:	d102      	bne.n	801065c <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8010656:	7b7b      	ldrb	r3, [r7, #13]
 8010658:	2b01      	cmp	r3, #1
 801065a:	d001      	beq.n	8010660 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 801065c:	2301      	movs	r3, #1
 801065e:	e0c1      	b.n	80107e4 <HAL_TIM_IC_Start_IT+0x216>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010660:	683b      	ldr	r3, [r7, #0]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d104      	bne.n	8010670 <HAL_TIM_IC_Start_IT+0xa2>
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	2202      	movs	r2, #2
 801066a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801066e:	e013      	b.n	8010698 <HAL_TIM_IC_Start_IT+0xca>
 8010670:	683b      	ldr	r3, [r7, #0]
 8010672:	2b04      	cmp	r3, #4
 8010674:	d104      	bne.n	8010680 <HAL_TIM_IC_Start_IT+0xb2>
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	2202      	movs	r2, #2
 801067a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801067e:	e00b      	b.n	8010698 <HAL_TIM_IC_Start_IT+0xca>
 8010680:	683b      	ldr	r3, [r7, #0]
 8010682:	2b08      	cmp	r3, #8
 8010684:	d104      	bne.n	8010690 <HAL_TIM_IC_Start_IT+0xc2>
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	2202      	movs	r2, #2
 801068a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801068e:	e003      	b.n	8010698 <HAL_TIM_IC_Start_IT+0xca>
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	2202      	movs	r2, #2
 8010694:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010698:	683b      	ldr	r3, [r7, #0]
 801069a:	2b00      	cmp	r3, #0
 801069c:	d104      	bne.n	80106a8 <HAL_TIM_IC_Start_IT+0xda>
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	2202      	movs	r2, #2
 80106a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80106a6:	e013      	b.n	80106d0 <HAL_TIM_IC_Start_IT+0x102>
 80106a8:	683b      	ldr	r3, [r7, #0]
 80106aa:	2b04      	cmp	r3, #4
 80106ac:	d104      	bne.n	80106b8 <HAL_TIM_IC_Start_IT+0xea>
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	2202      	movs	r2, #2
 80106b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80106b6:	e00b      	b.n	80106d0 <HAL_TIM_IC_Start_IT+0x102>
 80106b8:	683b      	ldr	r3, [r7, #0]
 80106ba:	2b08      	cmp	r3, #8
 80106bc:	d104      	bne.n	80106c8 <HAL_TIM_IC_Start_IT+0xfa>
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	2202      	movs	r2, #2
 80106c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80106c6:	e003      	b.n	80106d0 <HAL_TIM_IC_Start_IT+0x102>
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	2202      	movs	r2, #2
 80106cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80106d0:	683b      	ldr	r3, [r7, #0]
 80106d2:	2b0c      	cmp	r3, #12
 80106d4:	d840      	bhi.n	8010758 <HAL_TIM_IC_Start_IT+0x18a>
 80106d6:	a201      	add	r2, pc, #4	@ (adr r2, 80106dc <HAL_TIM_IC_Start_IT+0x10e>)
 80106d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106dc:	08010711 	.word	0x08010711
 80106e0:	08010759 	.word	0x08010759
 80106e4:	08010759 	.word	0x08010759
 80106e8:	08010759 	.word	0x08010759
 80106ec:	08010723 	.word	0x08010723
 80106f0:	08010759 	.word	0x08010759
 80106f4:	08010759 	.word	0x08010759
 80106f8:	08010759 	.word	0x08010759
 80106fc:	08010735 	.word	0x08010735
 8010700:	08010759 	.word	0x08010759
 8010704:	08010759 	.word	0x08010759
 8010708:	08010759 	.word	0x08010759
 801070c:	08010747 	.word	0x08010747
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	68da      	ldr	r2, [r3, #12]
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	f042 0202 	orr.w	r2, r2, #2
 801071e:	60da      	str	r2, [r3, #12]
      break;
 8010720:	e01d      	b.n	801075e <HAL_TIM_IC_Start_IT+0x190>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	68da      	ldr	r2, [r3, #12]
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	f042 0204 	orr.w	r2, r2, #4
 8010730:	60da      	str	r2, [r3, #12]
      break;
 8010732:	e014      	b.n	801075e <HAL_TIM_IC_Start_IT+0x190>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	68da      	ldr	r2, [r3, #12]
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	f042 0208 	orr.w	r2, r2, #8
 8010742:	60da      	str	r2, [r3, #12]
      break;
 8010744:	e00b      	b.n	801075e <HAL_TIM_IC_Start_IT+0x190>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	68da      	ldr	r2, [r3, #12]
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	f042 0210 	orr.w	r2, r2, #16
 8010754:	60da      	str	r2, [r3, #12]
      break;
 8010756:	e002      	b.n	801075e <HAL_TIM_IC_Start_IT+0x190>
    }

    default:
      status = HAL_ERROR;
 8010758:	2301      	movs	r3, #1
 801075a:	73fb      	strb	r3, [r7, #15]
      break;
 801075c:	bf00      	nop
  }

  if (status == HAL_OK)
 801075e:	7bfb      	ldrb	r3, [r7, #15]
 8010760:	2b00      	cmp	r3, #0
 8010762:	d13e      	bne.n	80107e2 <HAL_TIM_IC_Start_IT+0x214>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	2201      	movs	r2, #1
 801076a:	6839      	ldr	r1, [r7, #0]
 801076c:	4618      	mov	r0, r3
 801076e:	f003 fc37 	bl	8013fe0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	4a1d      	ldr	r2, [pc, #116]	@ (80107ec <HAL_TIM_IC_Start_IT+0x21e>)
 8010778:	4293      	cmp	r3, r2
 801077a:	d018      	beq.n	80107ae <HAL_TIM_IC_Start_IT+0x1e0>
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010784:	d013      	beq.n	80107ae <HAL_TIM_IC_Start_IT+0x1e0>
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	4a19      	ldr	r2, [pc, #100]	@ (80107f0 <HAL_TIM_IC_Start_IT+0x222>)
 801078c:	4293      	cmp	r3, r2
 801078e:	d00e      	beq.n	80107ae <HAL_TIM_IC_Start_IT+0x1e0>
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	4a17      	ldr	r2, [pc, #92]	@ (80107f4 <HAL_TIM_IC_Start_IT+0x226>)
 8010796:	4293      	cmp	r3, r2
 8010798:	d009      	beq.n	80107ae <HAL_TIM_IC_Start_IT+0x1e0>
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	4a16      	ldr	r2, [pc, #88]	@ (80107f8 <HAL_TIM_IC_Start_IT+0x22a>)
 80107a0:	4293      	cmp	r3, r2
 80107a2:	d004      	beq.n	80107ae <HAL_TIM_IC_Start_IT+0x1e0>
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	4a14      	ldr	r2, [pc, #80]	@ (80107fc <HAL_TIM_IC_Start_IT+0x22e>)
 80107aa:	4293      	cmp	r3, r2
 80107ac:	d111      	bne.n	80107d2 <HAL_TIM_IC_Start_IT+0x204>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	689b      	ldr	r3, [r3, #8]
 80107b4:	f003 0307 	and.w	r3, r3, #7
 80107b8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80107ba:	68bb      	ldr	r3, [r7, #8]
 80107bc:	2b06      	cmp	r3, #6
 80107be:	d010      	beq.n	80107e2 <HAL_TIM_IC_Start_IT+0x214>
      {
        __HAL_TIM_ENABLE(htim);
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	681a      	ldr	r2, [r3, #0]
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	f042 0201 	orr.w	r2, r2, #1
 80107ce:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80107d0:	e007      	b.n	80107e2 <HAL_TIM_IC_Start_IT+0x214>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	681a      	ldr	r2, [r3, #0]
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	f042 0201 	orr.w	r2, r2, #1
 80107e0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80107e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80107e4:	4618      	mov	r0, r3
 80107e6:	3710      	adds	r7, #16
 80107e8:	46bd      	mov	sp, r7
 80107ea:	bd80      	pop	{r7, pc}
 80107ec:	40010000 	.word	0x40010000
 80107f0:	40000400 	.word	0x40000400
 80107f4:	40000800 	.word	0x40000800
 80107f8:	40000c00 	.word	0x40000c00
 80107fc:	40014000 	.word	0x40014000

08010800 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010800:	b580      	push	{r7, lr}
 8010802:	b084      	sub	sp, #16
 8010804:	af00      	add	r7, sp, #0
 8010806:	6078      	str	r0, [r7, #4]
 8010808:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801080a:	2300      	movs	r3, #0
 801080c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 801080e:	683b      	ldr	r3, [r7, #0]
 8010810:	2b0c      	cmp	r3, #12
 8010812:	d841      	bhi.n	8010898 <HAL_TIM_IC_Stop_IT+0x98>
 8010814:	a201      	add	r2, pc, #4	@ (adr r2, 801081c <HAL_TIM_IC_Stop_IT+0x1c>)
 8010816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801081a:	bf00      	nop
 801081c:	08010851 	.word	0x08010851
 8010820:	08010899 	.word	0x08010899
 8010824:	08010899 	.word	0x08010899
 8010828:	08010899 	.word	0x08010899
 801082c:	08010863 	.word	0x08010863
 8010830:	08010899 	.word	0x08010899
 8010834:	08010899 	.word	0x08010899
 8010838:	08010899 	.word	0x08010899
 801083c:	08010875 	.word	0x08010875
 8010840:	08010899 	.word	0x08010899
 8010844:	08010899 	.word	0x08010899
 8010848:	08010899 	.word	0x08010899
 801084c:	08010887 	.word	0x08010887
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	68da      	ldr	r2, [r3, #12]
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	f022 0202 	bic.w	r2, r2, #2
 801085e:	60da      	str	r2, [r3, #12]
      break;
 8010860:	e01d      	b.n	801089e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	68da      	ldr	r2, [r3, #12]
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	f022 0204 	bic.w	r2, r2, #4
 8010870:	60da      	str	r2, [r3, #12]
      break;
 8010872:	e014      	b.n	801089e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	68da      	ldr	r2, [r3, #12]
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	f022 0208 	bic.w	r2, r2, #8
 8010882:	60da      	str	r2, [r3, #12]
      break;
 8010884:	e00b      	b.n	801089e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	68da      	ldr	r2, [r3, #12]
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	f022 0210 	bic.w	r2, r2, #16
 8010894:	60da      	str	r2, [r3, #12]
      break;
 8010896:	e002      	b.n	801089e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8010898:	2301      	movs	r3, #1
 801089a:	73fb      	strb	r3, [r7, #15]
      break;
 801089c:	bf00      	nop
  }

  if (status == HAL_OK)
 801089e:	7bfb      	ldrb	r3, [r7, #15]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d156      	bne.n	8010952 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	2200      	movs	r2, #0
 80108aa:	6839      	ldr	r1, [r7, #0]
 80108ac:	4618      	mov	r0, r3
 80108ae:	f003 fb97 	bl	8013fe0 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	6a1a      	ldr	r2, [r3, #32]
 80108b8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80108bc:	4013      	ands	r3, r2
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d10f      	bne.n	80108e2 <HAL_TIM_IC_Stop_IT+0xe2>
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	6a1a      	ldr	r2, [r3, #32]
 80108c8:	f240 4344 	movw	r3, #1092	@ 0x444
 80108cc:	4013      	ands	r3, r2
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d107      	bne.n	80108e2 <HAL_TIM_IC_Stop_IT+0xe2>
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	681a      	ldr	r2, [r3, #0]
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	f022 0201 	bic.w	r2, r2, #1
 80108e0:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80108e2:	683b      	ldr	r3, [r7, #0]
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d104      	bne.n	80108f2 <HAL_TIM_IC_Stop_IT+0xf2>
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	2201      	movs	r2, #1
 80108ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80108f0:	e013      	b.n	801091a <HAL_TIM_IC_Stop_IT+0x11a>
 80108f2:	683b      	ldr	r3, [r7, #0]
 80108f4:	2b04      	cmp	r3, #4
 80108f6:	d104      	bne.n	8010902 <HAL_TIM_IC_Stop_IT+0x102>
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	2201      	movs	r2, #1
 80108fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010900:	e00b      	b.n	801091a <HAL_TIM_IC_Stop_IT+0x11a>
 8010902:	683b      	ldr	r3, [r7, #0]
 8010904:	2b08      	cmp	r3, #8
 8010906:	d104      	bne.n	8010912 <HAL_TIM_IC_Stop_IT+0x112>
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	2201      	movs	r2, #1
 801090c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010910:	e003      	b.n	801091a <HAL_TIM_IC_Stop_IT+0x11a>
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	2201      	movs	r2, #1
 8010916:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801091a:	683b      	ldr	r3, [r7, #0]
 801091c:	2b00      	cmp	r3, #0
 801091e:	d104      	bne.n	801092a <HAL_TIM_IC_Stop_IT+0x12a>
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	2201      	movs	r2, #1
 8010924:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010928:	e013      	b.n	8010952 <HAL_TIM_IC_Stop_IT+0x152>
 801092a:	683b      	ldr	r3, [r7, #0]
 801092c:	2b04      	cmp	r3, #4
 801092e:	d104      	bne.n	801093a <HAL_TIM_IC_Stop_IT+0x13a>
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	2201      	movs	r2, #1
 8010934:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010938:	e00b      	b.n	8010952 <HAL_TIM_IC_Stop_IT+0x152>
 801093a:	683b      	ldr	r3, [r7, #0]
 801093c:	2b08      	cmp	r3, #8
 801093e:	d104      	bne.n	801094a <HAL_TIM_IC_Stop_IT+0x14a>
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	2201      	movs	r2, #1
 8010944:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010948:	e003      	b.n	8010952 <HAL_TIM_IC_Stop_IT+0x152>
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	2201      	movs	r2, #1
 801094e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 8010952:	7bfb      	ldrb	r3, [r7, #15]
}
 8010954:	4618      	mov	r0, r3
 8010956:	3710      	adds	r7, #16
 8010958:	46bd      	mov	sp, r7
 801095a:	bd80      	pop	{r7, pc}

0801095c <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 801095c:	b580      	push	{r7, lr}
 801095e:	b086      	sub	sp, #24
 8010960:	af00      	add	r7, sp, #0
 8010962:	60f8      	str	r0, [r7, #12]
 8010964:	60b9      	str	r1, [r7, #8]
 8010966:	607a      	str	r2, [r7, #4]
 8010968:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 801096a:	2300      	movs	r3, #0
 801096c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 801096e:	68bb      	ldr	r3, [r7, #8]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d104      	bne.n	801097e <HAL_TIM_IC_Start_DMA+0x22>
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 801097a:	b2db      	uxtb	r3, r3
 801097c:	e013      	b.n	80109a6 <HAL_TIM_IC_Start_DMA+0x4a>
 801097e:	68bb      	ldr	r3, [r7, #8]
 8010980:	2b04      	cmp	r3, #4
 8010982:	d104      	bne.n	801098e <HAL_TIM_IC_Start_DMA+0x32>
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 801098a:	b2db      	uxtb	r3, r3
 801098c:	e00b      	b.n	80109a6 <HAL_TIM_IC_Start_DMA+0x4a>
 801098e:	68bb      	ldr	r3, [r7, #8]
 8010990:	2b08      	cmp	r3, #8
 8010992:	d104      	bne.n	801099e <HAL_TIM_IC_Start_DMA+0x42>
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801099a:	b2db      	uxtb	r3, r3
 801099c:	e003      	b.n	80109a6 <HAL_TIM_IC_Start_DMA+0x4a>
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80109a4:	b2db      	uxtb	r3, r3
 80109a6:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80109a8:	68bb      	ldr	r3, [r7, #8]
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d104      	bne.n	80109b8 <HAL_TIM_IC_Start_DMA+0x5c>
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80109b4:	b2db      	uxtb	r3, r3
 80109b6:	e013      	b.n	80109e0 <HAL_TIM_IC_Start_DMA+0x84>
 80109b8:	68bb      	ldr	r3, [r7, #8]
 80109ba:	2b04      	cmp	r3, #4
 80109bc:	d104      	bne.n	80109c8 <HAL_TIM_IC_Start_DMA+0x6c>
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80109c4:	b2db      	uxtb	r3, r3
 80109c6:	e00b      	b.n	80109e0 <HAL_TIM_IC_Start_DMA+0x84>
 80109c8:	68bb      	ldr	r3, [r7, #8]
 80109ca:	2b08      	cmp	r3, #8
 80109cc:	d104      	bne.n	80109d8 <HAL_TIM_IC_Start_DMA+0x7c>
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80109d4:	b2db      	uxtb	r3, r3
 80109d6:	e003      	b.n	80109e0 <HAL_TIM_IC_Start_DMA+0x84>
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80109de:	b2db      	uxtb	r3, r3
 80109e0:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 80109e2:	7dbb      	ldrb	r3, [r7, #22]
 80109e4:	2b02      	cmp	r3, #2
 80109e6:	d002      	beq.n	80109ee <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 80109e8:	7d7b      	ldrb	r3, [r7, #21]
 80109ea:	2b02      	cmp	r3, #2
 80109ec:	d101      	bne.n	80109f2 <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 80109ee:	2302      	movs	r3, #2
 80109f0:	e13c      	b.n	8010c6c <HAL_TIM_IC_Start_DMA+0x310>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 80109f2:	7dbb      	ldrb	r3, [r7, #22]
 80109f4:	2b01      	cmp	r3, #1
 80109f6:	d143      	bne.n	8010a80 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 80109f8:	7d7b      	ldrb	r3, [r7, #21]
 80109fa:	2b01      	cmp	r3, #1
 80109fc:	d140      	bne.n	8010a80 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) || (Length == 0U))
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d002      	beq.n	8010a0a <HAL_TIM_IC_Start_DMA+0xae>
 8010a04:	887b      	ldrh	r3, [r7, #2]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d101      	bne.n	8010a0e <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 8010a0a:	2301      	movs	r3, #1
 8010a0c:	e12e      	b.n	8010c6c <HAL_TIM_IC_Start_DMA+0x310>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010a0e:	68bb      	ldr	r3, [r7, #8]
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d104      	bne.n	8010a1e <HAL_TIM_IC_Start_DMA+0xc2>
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	2202      	movs	r2, #2
 8010a18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010a1c:	e013      	b.n	8010a46 <HAL_TIM_IC_Start_DMA+0xea>
 8010a1e:	68bb      	ldr	r3, [r7, #8]
 8010a20:	2b04      	cmp	r3, #4
 8010a22:	d104      	bne.n	8010a2e <HAL_TIM_IC_Start_DMA+0xd2>
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	2202      	movs	r2, #2
 8010a28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010a2c:	e00b      	b.n	8010a46 <HAL_TIM_IC_Start_DMA+0xea>
 8010a2e:	68bb      	ldr	r3, [r7, #8]
 8010a30:	2b08      	cmp	r3, #8
 8010a32:	d104      	bne.n	8010a3e <HAL_TIM_IC_Start_DMA+0xe2>
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	2202      	movs	r2, #2
 8010a38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010a3c:	e003      	b.n	8010a46 <HAL_TIM_IC_Start_DMA+0xea>
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	2202      	movs	r2, #2
 8010a42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010a46:	68bb      	ldr	r3, [r7, #8]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d104      	bne.n	8010a56 <HAL_TIM_IC_Start_DMA+0xfa>
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	2202      	movs	r2, #2
 8010a50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    if ((pData == NULL) || (Length == 0U))
 8010a54:	e016      	b.n	8010a84 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010a56:	68bb      	ldr	r3, [r7, #8]
 8010a58:	2b04      	cmp	r3, #4
 8010a5a:	d104      	bne.n	8010a66 <HAL_TIM_IC_Start_DMA+0x10a>
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	2202      	movs	r2, #2
 8010a60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    if ((pData == NULL) || (Length == 0U))
 8010a64:	e00e      	b.n	8010a84 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010a66:	68bb      	ldr	r3, [r7, #8]
 8010a68:	2b08      	cmp	r3, #8
 8010a6a:	d104      	bne.n	8010a76 <HAL_TIM_IC_Start_DMA+0x11a>
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	2202      	movs	r2, #2
 8010a70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    if ((pData == NULL) || (Length == 0U))
 8010a74:	e006      	b.n	8010a84 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	2202      	movs	r2, #2
 8010a7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    if ((pData == NULL) || (Length == 0U))
 8010a7e:	e001      	b.n	8010a84 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8010a80:	2301      	movs	r3, #1
 8010a82:	e0f3      	b.n	8010c6c <HAL_TIM_IC_Start_DMA+0x310>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	2201      	movs	r2, #1
 8010a8a:	68b9      	ldr	r1, [r7, #8]
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	f003 faa7 	bl	8013fe0 <TIM_CCxChannelCmd>

  switch (Channel)
 8010a92:	68bb      	ldr	r3, [r7, #8]
 8010a94:	2b0c      	cmp	r3, #12
 8010a96:	f200 80ad 	bhi.w	8010bf4 <HAL_TIM_IC_Start_DMA+0x298>
 8010a9a:	a201      	add	r2, pc, #4	@ (adr r2, 8010aa0 <HAL_TIM_IC_Start_DMA+0x144>)
 8010a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010aa0:	08010ad5 	.word	0x08010ad5
 8010aa4:	08010bf5 	.word	0x08010bf5
 8010aa8:	08010bf5 	.word	0x08010bf5
 8010aac:	08010bf5 	.word	0x08010bf5
 8010ab0:	08010b1d 	.word	0x08010b1d
 8010ab4:	08010bf5 	.word	0x08010bf5
 8010ab8:	08010bf5 	.word	0x08010bf5
 8010abc:	08010bf5 	.word	0x08010bf5
 8010ac0:	08010b65 	.word	0x08010b65
 8010ac4:	08010bf5 	.word	0x08010bf5
 8010ac8:	08010bf5 	.word	0x08010bf5
 8010acc:	08010bf5 	.word	0x08010bf5
 8010ad0:	08010bad 	.word	0x08010bad
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ad8:	4a66      	ldr	r2, [pc, #408]	@ (8010c74 <HAL_TIM_IC_Start_DMA+0x318>)
 8010ada:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ae0:	4a65      	ldr	r2, [pc, #404]	@ (8010c78 <HAL_TIM_IC_Start_DMA+0x31c>)
 8010ae2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ae8:	4a64      	ldr	r2, [pc, #400]	@ (8010c7c <HAL_TIM_IC_Start_DMA+0x320>)
 8010aea:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	3334      	adds	r3, #52	@ 0x34
 8010af6:	4619      	mov	r1, r3
 8010af8:	687a      	ldr	r2, [r7, #4]
 8010afa:	887b      	ldrh	r3, [r7, #2]
 8010afc:	f7f5 fcf5 	bl	80064ea <HAL_DMA_Start_IT>
 8010b00:	4603      	mov	r3, r0
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d001      	beq.n	8010b0a <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8010b06:	2301      	movs	r3, #1
 8010b08:	e0b0      	b.n	8010c6c <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	68da      	ldr	r2, [r3, #12]
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010b18:	60da      	str	r2, [r3, #12]
      break;
 8010b1a:	e06e      	b.n	8010bfa <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b20:	4a54      	ldr	r2, [pc, #336]	@ (8010c74 <HAL_TIM_IC_Start_DMA+0x318>)
 8010b22:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b28:	4a53      	ldr	r2, [pc, #332]	@ (8010c78 <HAL_TIM_IC_Start_DMA+0x31c>)
 8010b2a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b30:	4a52      	ldr	r2, [pc, #328]	@ (8010c7c <HAL_TIM_IC_Start_DMA+0x320>)
 8010b32:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	3338      	adds	r3, #56	@ 0x38
 8010b3e:	4619      	mov	r1, r3
 8010b40:	687a      	ldr	r2, [r7, #4]
 8010b42:	887b      	ldrh	r3, [r7, #2]
 8010b44:	f7f5 fcd1 	bl	80064ea <HAL_DMA_Start_IT>
 8010b48:	4603      	mov	r3, r0
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d001      	beq.n	8010b52 <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8010b4e:	2301      	movs	r3, #1
 8010b50:	e08c      	b.n	8010c6c <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	68da      	ldr	r2, [r3, #12]
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8010b60:	60da      	str	r2, [r3, #12]
      break;
 8010b62:	e04a      	b.n	8010bfa <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b68:	4a42      	ldr	r2, [pc, #264]	@ (8010c74 <HAL_TIM_IC_Start_DMA+0x318>)
 8010b6a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b70:	4a41      	ldr	r2, [pc, #260]	@ (8010c78 <HAL_TIM_IC_Start_DMA+0x31c>)
 8010b72:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b78:	4a40      	ldr	r2, [pc, #256]	@ (8010c7c <HAL_TIM_IC_Start_DMA+0x320>)
 8010b7a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	333c      	adds	r3, #60	@ 0x3c
 8010b86:	4619      	mov	r1, r3
 8010b88:	687a      	ldr	r2, [r7, #4]
 8010b8a:	887b      	ldrh	r3, [r7, #2]
 8010b8c:	f7f5 fcad 	bl	80064ea <HAL_DMA_Start_IT>
 8010b90:	4603      	mov	r3, r0
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d001      	beq.n	8010b9a <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8010b96:	2301      	movs	r3, #1
 8010b98:	e068      	b.n	8010c6c <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	68da      	ldr	r2, [r3, #12]
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010ba8:	60da      	str	r2, [r3, #12]
      break;
 8010baa:	e026      	b.n	8010bfa <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010bb0:	4a30      	ldr	r2, [pc, #192]	@ (8010c74 <HAL_TIM_IC_Start_DMA+0x318>)
 8010bb2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010bb8:	4a2f      	ldr	r2, [pc, #188]	@ (8010c78 <HAL_TIM_IC_Start_DMA+0x31c>)
 8010bba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010bc0:	4a2e      	ldr	r2, [pc, #184]	@ (8010c7c <HAL_TIM_IC_Start_DMA+0x320>)
 8010bc2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	3340      	adds	r3, #64	@ 0x40
 8010bce:	4619      	mov	r1, r3
 8010bd0:	687a      	ldr	r2, [r7, #4]
 8010bd2:	887b      	ldrh	r3, [r7, #2]
 8010bd4:	f7f5 fc89 	bl	80064ea <HAL_DMA_Start_IT>
 8010bd8:	4603      	mov	r3, r0
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d001      	beq.n	8010be2 <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8010bde:	2301      	movs	r3, #1
 8010be0:	e044      	b.n	8010c6c <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	68da      	ldr	r2, [r3, #12]
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8010bf0:	60da      	str	r2, [r3, #12]
      break;
 8010bf2:	e002      	b.n	8010bfa <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 8010bf4:	2301      	movs	r3, #1
 8010bf6:	75fb      	strb	r3, [r7, #23]
      break;
 8010bf8:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	4a20      	ldr	r2, [pc, #128]	@ (8010c80 <HAL_TIM_IC_Start_DMA+0x324>)
 8010c00:	4293      	cmp	r3, r2
 8010c02:	d018      	beq.n	8010c36 <HAL_TIM_IC_Start_DMA+0x2da>
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010c0c:	d013      	beq.n	8010c36 <HAL_TIM_IC_Start_DMA+0x2da>
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	4a1c      	ldr	r2, [pc, #112]	@ (8010c84 <HAL_TIM_IC_Start_DMA+0x328>)
 8010c14:	4293      	cmp	r3, r2
 8010c16:	d00e      	beq.n	8010c36 <HAL_TIM_IC_Start_DMA+0x2da>
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	4a1a      	ldr	r2, [pc, #104]	@ (8010c88 <HAL_TIM_IC_Start_DMA+0x32c>)
 8010c1e:	4293      	cmp	r3, r2
 8010c20:	d009      	beq.n	8010c36 <HAL_TIM_IC_Start_DMA+0x2da>
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	4a19      	ldr	r2, [pc, #100]	@ (8010c8c <HAL_TIM_IC_Start_DMA+0x330>)
 8010c28:	4293      	cmp	r3, r2
 8010c2a:	d004      	beq.n	8010c36 <HAL_TIM_IC_Start_DMA+0x2da>
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	4a17      	ldr	r2, [pc, #92]	@ (8010c90 <HAL_TIM_IC_Start_DMA+0x334>)
 8010c32:	4293      	cmp	r3, r2
 8010c34:	d111      	bne.n	8010c5a <HAL_TIM_IC_Start_DMA+0x2fe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	689b      	ldr	r3, [r3, #8]
 8010c3c:	f003 0307 	and.w	r3, r3, #7
 8010c40:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010c42:	693b      	ldr	r3, [r7, #16]
 8010c44:	2b06      	cmp	r3, #6
 8010c46:	d010      	beq.n	8010c6a <HAL_TIM_IC_Start_DMA+0x30e>
    {
      __HAL_TIM_ENABLE(htim);
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	681a      	ldr	r2, [r3, #0]
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	f042 0201 	orr.w	r2, r2, #1
 8010c56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010c58:	e007      	b.n	8010c6a <HAL_TIM_IC_Start_DMA+0x30e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	681a      	ldr	r2, [r3, #0]
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	f042 0201 	orr.w	r2, r2, #1
 8010c68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8010c6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	3718      	adds	r7, #24
 8010c70:	46bd      	mov	sp, r7
 8010c72:	bd80      	pop	{r7, pc}
 8010c74:	0801355d 	.word	0x0801355d
 8010c78:	08013625 	.word	0x08013625
 8010c7c:	080133bb 	.word	0x080133bb
 8010c80:	40010000 	.word	0x40010000
 8010c84:	40000400 	.word	0x40000400
 8010c88:	40000800 	.word	0x40000800
 8010c8c:	40000c00 	.word	0x40000c00
 8010c90:	40014000 	.word	0x40014000

08010c94 <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010c94:	b580      	push	{r7, lr}
 8010c96:	b084      	sub	sp, #16
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	6078      	str	r0, [r7, #4]
 8010c9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	2200      	movs	r2, #0
 8010ca8:	6839      	ldr	r1, [r7, #0]
 8010caa:	4618      	mov	r0, r3
 8010cac:	f003 f998 	bl	8013fe0 <TIM_CCxChannelCmd>

  switch (Channel)
 8010cb0:	683b      	ldr	r3, [r7, #0]
 8010cb2:	2b0c      	cmp	r3, #12
 8010cb4:	d854      	bhi.n	8010d60 <HAL_TIM_IC_Stop_DMA+0xcc>
 8010cb6:	a201      	add	r2, pc, #4	@ (adr r2, 8010cbc <HAL_TIM_IC_Stop_DMA+0x28>)
 8010cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cbc:	08010cf1 	.word	0x08010cf1
 8010cc0:	08010d61 	.word	0x08010d61
 8010cc4:	08010d61 	.word	0x08010d61
 8010cc8:	08010d61 	.word	0x08010d61
 8010ccc:	08010d0d 	.word	0x08010d0d
 8010cd0:	08010d61 	.word	0x08010d61
 8010cd4:	08010d61 	.word	0x08010d61
 8010cd8:	08010d61 	.word	0x08010d61
 8010cdc:	08010d29 	.word	0x08010d29
 8010ce0:	08010d61 	.word	0x08010d61
 8010ce4:	08010d61 	.word	0x08010d61
 8010ce8:	08010d61 	.word	0x08010d61
 8010cec:	08010d45 	.word	0x08010d45
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	68da      	ldr	r2, [r3, #12]
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8010cfe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d04:	4618      	mov	r0, r3
 8010d06:	f7f5 fcb8 	bl	800667a <HAL_DMA_Abort_IT>
      break;
 8010d0a:	e02c      	b.n	8010d66 <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	68da      	ldr	r2, [r3, #12]
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8010d1a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d20:	4618      	mov	r0, r3
 8010d22:	f7f5 fcaa 	bl	800667a <HAL_DMA_Abort_IT>
      break;
 8010d26:	e01e      	b.n	8010d66 <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	68da      	ldr	r2, [r3, #12]
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8010d36:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	f7f5 fc9c 	bl	800667a <HAL_DMA_Abort_IT>
      break;
 8010d42:	e010      	b.n	8010d66 <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	68da      	ldr	r2, [r3, #12]
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8010d52:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010d58:	4618      	mov	r0, r3
 8010d5a:	f7f5 fc8e 	bl	800667a <HAL_DMA_Abort_IT>
      break;
 8010d5e:	e002      	b.n	8010d66 <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    default:
      status = HAL_ERROR;
 8010d60:	2301      	movs	r3, #1
 8010d62:	73fb      	strb	r3, [r7, #15]
      break;
 8010d64:	bf00      	nop
  }

  if (status == HAL_OK)
 8010d66:	7bfb      	ldrb	r3, [r7, #15]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d14f      	bne.n	8010e0c <HAL_TIM_IC_Stop_DMA+0x178>
  {
    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	6a1a      	ldr	r2, [r3, #32]
 8010d72:	f241 1311 	movw	r3, #4369	@ 0x1111
 8010d76:	4013      	ands	r3, r2
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d10f      	bne.n	8010d9c <HAL_TIM_IC_Stop_DMA+0x108>
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	6a1a      	ldr	r2, [r3, #32]
 8010d82:	f240 4344 	movw	r3, #1092	@ 0x444
 8010d86:	4013      	ands	r3, r2
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d107      	bne.n	8010d9c <HAL_TIM_IC_Stop_DMA+0x108>
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	681a      	ldr	r2, [r3, #0]
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	f022 0201 	bic.w	r2, r2, #1
 8010d9a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8010d9c:	683b      	ldr	r3, [r7, #0]
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d104      	bne.n	8010dac <HAL_TIM_IC_Stop_DMA+0x118>
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	2201      	movs	r2, #1
 8010da6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010daa:	e013      	b.n	8010dd4 <HAL_TIM_IC_Stop_DMA+0x140>
 8010dac:	683b      	ldr	r3, [r7, #0]
 8010dae:	2b04      	cmp	r3, #4
 8010db0:	d104      	bne.n	8010dbc <HAL_TIM_IC_Stop_DMA+0x128>
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	2201      	movs	r2, #1
 8010db6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010dba:	e00b      	b.n	8010dd4 <HAL_TIM_IC_Stop_DMA+0x140>
 8010dbc:	683b      	ldr	r3, [r7, #0]
 8010dbe:	2b08      	cmp	r3, #8
 8010dc0:	d104      	bne.n	8010dcc <HAL_TIM_IC_Stop_DMA+0x138>
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	2201      	movs	r2, #1
 8010dc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010dca:	e003      	b.n	8010dd4 <HAL_TIM_IC_Stop_DMA+0x140>
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	2201      	movs	r2, #1
 8010dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8010dd4:	683b      	ldr	r3, [r7, #0]
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d104      	bne.n	8010de4 <HAL_TIM_IC_Stop_DMA+0x150>
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	2201      	movs	r2, #1
 8010dde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010de2:	e013      	b.n	8010e0c <HAL_TIM_IC_Stop_DMA+0x178>
 8010de4:	683b      	ldr	r3, [r7, #0]
 8010de6:	2b04      	cmp	r3, #4
 8010de8:	d104      	bne.n	8010df4 <HAL_TIM_IC_Stop_DMA+0x160>
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	2201      	movs	r2, #1
 8010dee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010df2:	e00b      	b.n	8010e0c <HAL_TIM_IC_Stop_DMA+0x178>
 8010df4:	683b      	ldr	r3, [r7, #0]
 8010df6:	2b08      	cmp	r3, #8
 8010df8:	d104      	bne.n	8010e04 <HAL_TIM_IC_Stop_DMA+0x170>
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	2201      	movs	r2, #1
 8010dfe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010e02:	e003      	b.n	8010e0c <HAL_TIM_IC_Stop_DMA+0x178>
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	2201      	movs	r2, #1
 8010e08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 8010e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e0e:	4618      	mov	r0, r3
 8010e10:	3710      	adds	r7, #16
 8010e12:	46bd      	mov	sp, r7
 8010e14:	bd80      	pop	{r7, pc}

08010e16 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8010e16:	b580      	push	{r7, lr}
 8010e18:	b082      	sub	sp, #8
 8010e1a:	af00      	add	r7, sp, #0
 8010e1c:	6078      	str	r0, [r7, #4]
 8010e1e:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d101      	bne.n	8010e2a <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8010e26:	2301      	movs	r3, #1
 8010e28:	e041      	b.n	8010eae <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010e30:	b2db      	uxtb	r3, r3
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d106      	bne.n	8010e44 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	2200      	movs	r2, #0
 8010e3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8010e3e:	6878      	ldr	r0, [r7, #4]
 8010e40:	f000 f87d 	bl	8010f3e <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	2202      	movs	r2, #2
 8010e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	681a      	ldr	r2, [r3, #0]
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	3304      	adds	r3, #4
 8010e54:	4619      	mov	r1, r3
 8010e56:	4610      	mov	r0, r2
 8010e58:	f002 fc62 	bl	8013720 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	681a      	ldr	r2, [r3, #0]
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	f022 0208 	bic.w	r2, r2, #8
 8010e6a:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	6819      	ldr	r1, [r3, #0]
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	683a      	ldr	r2, [r7, #0]
 8010e78:	430a      	orrs	r2, r1
 8010e7a:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	2201      	movs	r2, #1
 8010e80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	2201      	movs	r2, #1
 8010e88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	2201      	movs	r2, #1
 8010e90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	2201      	movs	r2, #1
 8010e98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	2201      	movs	r2, #1
 8010ea0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	2201      	movs	r2, #1
 8010ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8010eac:	2300      	movs	r3, #0
}
 8010eae:	4618      	mov	r0, r3
 8010eb0:	3708      	adds	r7, #8
 8010eb2:	46bd      	mov	sp, r7
 8010eb4:	bd80      	pop	{r7, pc}

08010eb6 <HAL_TIM_OnePulse_DeInit>:
  * @brief  DeInitializes the TIM One Pulse
  * @param  htim TIM One Pulse handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_DeInit(TIM_HandleTypeDef *htim)
{
 8010eb6:	b580      	push	{r7, lr}
 8010eb8:	b082      	sub	sp, #8
 8010eba:	af00      	add	r7, sp, #0
 8010ebc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	2202      	movs	r2, #2
 8010ec2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	6a1a      	ldr	r2, [r3, #32]
 8010ecc:	f241 1311 	movw	r3, #4369	@ 0x1111
 8010ed0:	4013      	ands	r3, r2
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d10f      	bne.n	8010ef6 <HAL_TIM_OnePulse_DeInit+0x40>
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	6a1a      	ldr	r2, [r3, #32]
 8010edc:	f240 4344 	movw	r3, #1092	@ 0x444
 8010ee0:	4013      	ands	r3, r2
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d107      	bne.n	8010ef6 <HAL_TIM_OnePulse_DeInit+0x40>
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	681a      	ldr	r2, [r3, #0]
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	f022 0201 	bic.w	r2, r2, #1
 8010ef4:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->OnePulse_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_OnePulse_MspDeInit(htim);
 8010ef6:	6878      	ldr	r0, [r7, #4]
 8010ef8:	f000 f82b 	bl	8010f52 <HAL_TIM_OnePulse_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	2200      	movs	r2, #0
 8010f00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_RESET);
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	2200      	movs	r2, #0
 8010f08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_RESET);
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	2200      	movs	r2, #0
 8010f10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_RESET);
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	2200      	movs	r2, #0
 8010f18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_RESET);
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	2200      	movs	r2, #0
 8010f20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	2200      	movs	r2, #0
 8010f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	2200      	movs	r2, #0
 8010f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010f34:	2300      	movs	r3, #0
}
 8010f36:	4618      	mov	r0, r3
 8010f38:	3708      	adds	r7, #8
 8010f3a:	46bd      	mov	sp, r7
 8010f3c:	bd80      	pop	{r7, pc}

08010f3e <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8010f3e:	b480      	push	{r7}
 8010f40:	b083      	sub	sp, #12
 8010f42:	af00      	add	r7, sp, #0
 8010f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8010f46:	bf00      	nop
 8010f48:	370c      	adds	r7, #12
 8010f4a:	46bd      	mov	sp, r7
 8010f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f50:	4770      	bx	lr

08010f52 <HAL_TIM_OnePulse_MspDeInit>:
  * @brief  DeInitializes TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspDeInit(TIM_HandleTypeDef *htim)
{
 8010f52:	b480      	push	{r7}
 8010f54:	b083      	sub	sp, #12
 8010f56:	af00      	add	r7, sp, #0
 8010f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspDeInit could be implemented in the user file
   */
}
 8010f5a:	bf00      	nop
 8010f5c:	370c      	adds	r7, #12
 8010f5e:	46bd      	mov	sp, r7
 8010f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f64:	4770      	bx	lr

08010f66 <HAL_TIM_OnePulse_Start>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8010f66:	b580      	push	{r7, lr}
 8010f68:	b084      	sub	sp, #16
 8010f6a:	af00      	add	r7, sp, #0
 8010f6c:	6078      	str	r0, [r7, #4]
 8010f6e:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8010f76:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8010f7e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010f86:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010f8e:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8010f90:	7bfb      	ldrb	r3, [r7, #15]
 8010f92:	2b01      	cmp	r3, #1
 8010f94:	d108      	bne.n	8010fa8 <HAL_TIM_OnePulse_Start+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8010f96:	7bbb      	ldrb	r3, [r7, #14]
 8010f98:	2b01      	cmp	r3, #1
 8010f9a:	d105      	bne.n	8010fa8 <HAL_TIM_OnePulse_Start+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8010f9c:	7b7b      	ldrb	r3, [r7, #13]
 8010f9e:	2b01      	cmp	r3, #1
 8010fa0:	d102      	bne.n	8010fa8 <HAL_TIM_OnePulse_Start+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8010fa2:	7b3b      	ldrb	r3, [r7, #12]
 8010fa4:	2b01      	cmp	r3, #1
 8010fa6:	d001      	beq.n	8010fac <HAL_TIM_OnePulse_Start+0x46>
  {
    return HAL_ERROR;
 8010fa8:	2301      	movs	r3, #1
 8010faa:	e02b      	b.n	8011004 <HAL_TIM_OnePulse_Start+0x9e>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	2202      	movs	r2, #2
 8010fb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	2202      	movs	r2, #2
 8010fb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	2202      	movs	r2, #2
 8010fc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	2202      	movs	r2, #2
 8010fc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    whatever the combination, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	2201      	movs	r2, #1
 8010fd2:	2100      	movs	r1, #0
 8010fd4:	4618      	mov	r0, r3
 8010fd6:	f003 f803 	bl	8013fe0 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	2201      	movs	r2, #1
 8010fe0:	2104      	movs	r1, #4
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	f002 fffc 	bl	8013fe0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	4a07      	ldr	r2, [pc, #28]	@ (801100c <HAL_TIM_OnePulse_Start+0xa6>)
 8010fee:	4293      	cmp	r3, r2
 8010ff0:	d107      	bne.n	8011002 <HAL_TIM_OnePulse_Start+0x9c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8011000:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8011002:	2300      	movs	r3, #0
}
 8011004:	4618      	mov	r0, r3
 8011006:	3710      	adds	r7, #16
 8011008:	46bd      	mov	sp, r7
 801100a:	bd80      	pop	{r7, pc}
 801100c:	40010000 	.word	0x40010000

08011010 <HAL_TIM_OnePulse_Stop>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8011010:	b580      	push	{r7, lr}
 8011012:	b082      	sub	sp, #8
 8011014:	af00      	add	r7, sp, #0
 8011016:	6078      	str	r0, [r7, #4]
 8011018:	6039      	str	r1, [r7, #0]
  (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2)
  if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
  if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output
  whatever the combination, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be disabled together */

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	2200      	movs	r2, #0
 8011020:	2100      	movs	r1, #0
 8011022:	4618      	mov	r0, r3
 8011024:	f002 ffdc 	bl	8013fe0 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	2200      	movs	r2, #0
 801102e:	2104      	movs	r1, #4
 8011030:	4618      	mov	r0, r3
 8011032:	f002 ffd5 	bl	8013fe0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	4a24      	ldr	r2, [pc, #144]	@ (80110cc <HAL_TIM_OnePulse_Stop+0xbc>)
 801103c:	4293      	cmp	r3, r2
 801103e:	d117      	bne.n	8011070 <HAL_TIM_OnePulse_Stop+0x60>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	6a1a      	ldr	r2, [r3, #32]
 8011046:	f241 1311 	movw	r3, #4369	@ 0x1111
 801104a:	4013      	ands	r3, r2
 801104c:	2b00      	cmp	r3, #0
 801104e:	d10f      	bne.n	8011070 <HAL_TIM_OnePulse_Stop+0x60>
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	6a1a      	ldr	r2, [r3, #32]
 8011056:	f240 4344 	movw	r3, #1092	@ 0x444
 801105a:	4013      	ands	r3, r2
 801105c:	2b00      	cmp	r3, #0
 801105e:	d107      	bne.n	8011070 <HAL_TIM_OnePulse_Stop+0x60>
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801106e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	6a1a      	ldr	r2, [r3, #32]
 8011076:	f241 1311 	movw	r3, #4369	@ 0x1111
 801107a:	4013      	ands	r3, r2
 801107c:	2b00      	cmp	r3, #0
 801107e:	d10f      	bne.n	80110a0 <HAL_TIM_OnePulse_Stop+0x90>
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	6a1a      	ldr	r2, [r3, #32]
 8011086:	f240 4344 	movw	r3, #1092	@ 0x444
 801108a:	4013      	ands	r3, r2
 801108c:	2b00      	cmp	r3, #0
 801108e:	d107      	bne.n	80110a0 <HAL_TIM_OnePulse_Stop+0x90>
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	681a      	ldr	r2, [r3, #0]
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	f022 0201 	bic.w	r2, r2, #1
 801109e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	2201      	movs	r2, #1
 80110a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	2201      	movs	r2, #1
 80110ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	2201      	movs	r2, #1
 80110b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	2201      	movs	r2, #1
 80110bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80110c0:	2300      	movs	r3, #0
}
 80110c2:	4618      	mov	r0, r3
 80110c4:	3708      	adds	r7, #8
 80110c6:	46bd      	mov	sp, r7
 80110c8:	bd80      	pop	{r7, pc}
 80110ca:	bf00      	nop
 80110cc:	40010000 	.word	0x40010000

080110d0 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80110d0:	b580      	push	{r7, lr}
 80110d2:	b084      	sub	sp, #16
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	6078      	str	r0, [r7, #4]
 80110d8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80110e0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80110e8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80110f0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80110f8:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80110fa:	7bfb      	ldrb	r3, [r7, #15]
 80110fc:	2b01      	cmp	r3, #1
 80110fe:	d108      	bne.n	8011112 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8011100:	7bbb      	ldrb	r3, [r7, #14]
 8011102:	2b01      	cmp	r3, #1
 8011104:	d105      	bne.n	8011112 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8011106:	7b7b      	ldrb	r3, [r7, #13]
 8011108:	2b01      	cmp	r3, #1
 801110a:	d102      	bne.n	8011112 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 801110c:	7b3b      	ldrb	r3, [r7, #12]
 801110e:	2b01      	cmp	r3, #1
 8011110:	d001      	beq.n	8011116 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8011112:	2301      	movs	r3, #1
 8011114:	e03b      	b.n	801118e <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	2202      	movs	r2, #2
 801111a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	2202      	movs	r2, #2
 8011122:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	2202      	movs	r2, #2
 801112a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	2202      	movs	r2, #2
 8011132:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	68da      	ldr	r2, [r3, #12]
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	f042 0202 	orr.w	r2, r2, #2
 8011144:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	68da      	ldr	r2, [r3, #12]
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	f042 0204 	orr.w	r2, r2, #4
 8011154:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	2201      	movs	r2, #1
 801115c:	2100      	movs	r1, #0
 801115e:	4618      	mov	r0, r3
 8011160:	f002 ff3e 	bl	8013fe0 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	2201      	movs	r2, #1
 801116a:	2104      	movs	r1, #4
 801116c:	4618      	mov	r0, r3
 801116e:	f002 ff37 	bl	8013fe0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	4a08      	ldr	r2, [pc, #32]	@ (8011198 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 8011178:	4293      	cmp	r3, r2
 801117a:	d107      	bne.n	801118c <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801118a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 801118c:	2300      	movs	r3, #0
}
 801118e:	4618      	mov	r0, r3
 8011190:	3710      	adds	r7, #16
 8011192:	46bd      	mov	sp, r7
 8011194:	bd80      	pop	{r7, pc}
 8011196:	bf00      	nop
 8011198:	40010000 	.word	0x40010000

0801119c <HAL_TIM_OnePulse_Stop_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 801119c:	b580      	push	{r7, lr}
 801119e:	b082      	sub	sp, #8
 80111a0:	af00      	add	r7, sp, #0
 80111a2:	6078      	str	r0, [r7, #4]
 80111a4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Disable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	68da      	ldr	r2, [r3, #12]
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	f022 0202 	bic.w	r2, r2, #2
 80111b4:	60da      	str	r2, [r3, #12]

  /* Disable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	68da      	ldr	r2, [r3, #12]
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	f022 0204 	bic.w	r2, r2, #4
 80111c4:	60da      	str	r2, [r3, #12]
  /* Disable the Capture compare and the Input Capture channels
  (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2)
  if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
  if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output
  whatever the combination, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be disabled together */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	2200      	movs	r2, #0
 80111cc:	2100      	movs	r1, #0
 80111ce:	4618      	mov	r0, r3
 80111d0:	f002 ff06 	bl	8013fe0 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	2200      	movs	r2, #0
 80111da:	2104      	movs	r1, #4
 80111dc:	4618      	mov	r0, r3
 80111de:	f002 feff 	bl	8013fe0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	4a24      	ldr	r2, [pc, #144]	@ (8011278 <HAL_TIM_OnePulse_Stop_IT+0xdc>)
 80111e8:	4293      	cmp	r3, r2
 80111ea:	d117      	bne.n	801121c <HAL_TIM_OnePulse_Stop_IT+0x80>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	6a1a      	ldr	r2, [r3, #32]
 80111f2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80111f6:	4013      	ands	r3, r2
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d10f      	bne.n	801121c <HAL_TIM_OnePulse_Stop_IT+0x80>
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	6a1a      	ldr	r2, [r3, #32]
 8011202:	f240 4344 	movw	r3, #1092	@ 0x444
 8011206:	4013      	ands	r3, r2
 8011208:	2b00      	cmp	r3, #0
 801120a:	d107      	bne.n	801121c <HAL_TIM_OnePulse_Stop_IT+0x80>
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801121a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	6a1a      	ldr	r2, [r3, #32]
 8011222:	f241 1311 	movw	r3, #4369	@ 0x1111
 8011226:	4013      	ands	r3, r2
 8011228:	2b00      	cmp	r3, #0
 801122a:	d10f      	bne.n	801124c <HAL_TIM_OnePulse_Stop_IT+0xb0>
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	6a1a      	ldr	r2, [r3, #32]
 8011232:	f240 4344 	movw	r3, #1092	@ 0x444
 8011236:	4013      	ands	r3, r2
 8011238:	2b00      	cmp	r3, #0
 801123a:	d107      	bne.n	801124c <HAL_TIM_OnePulse_Stop_IT+0xb0>
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	681a      	ldr	r2, [r3, #0]
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	f022 0201 	bic.w	r2, r2, #1
 801124a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	2201      	movs	r2, #1
 8011250:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	2201      	movs	r2, #1
 8011258:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	2201      	movs	r2, #1
 8011260:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	2201      	movs	r2, #1
 8011268:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 801126c:	2300      	movs	r3, #0
}
 801126e:	4618      	mov	r0, r3
 8011270:	3708      	adds	r7, #8
 8011272:	46bd      	mov	sp, r7
 8011274:	bd80      	pop	{r7, pc}
 8011276:	bf00      	nop
 8011278:	40010000 	.word	0x40010000

0801127c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 801127c:	b580      	push	{r7, lr}
 801127e:	b086      	sub	sp, #24
 8011280:	af00      	add	r7, sp, #0
 8011282:	6078      	str	r0, [r7, #4]
 8011284:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	2b00      	cmp	r3, #0
 801128a:	d101      	bne.n	8011290 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 801128c:	2301      	movs	r3, #1
 801128e:	e097      	b.n	80113c0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011296:	b2db      	uxtb	r3, r3
 8011298:	2b00      	cmp	r3, #0
 801129a:	d106      	bne.n	80112aa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	2200      	movs	r2, #0
 80112a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80112a4:	6878      	ldr	r0, [r7, #4]
 80112a6:	f000 f8d3 	bl	8011450 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	2202      	movs	r2, #2
 80112ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	689b      	ldr	r3, [r3, #8]
 80112b8:	687a      	ldr	r2, [r7, #4]
 80112ba:	6812      	ldr	r2, [r2, #0]
 80112bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80112c0:	f023 0307 	bic.w	r3, r3, #7
 80112c4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	681a      	ldr	r2, [r3, #0]
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	3304      	adds	r3, #4
 80112ce:	4619      	mov	r1, r3
 80112d0:	4610      	mov	r0, r2
 80112d2:	f002 fa25 	bl	8013720 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	689b      	ldr	r3, [r3, #8]
 80112dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	699b      	ldr	r3, [r3, #24]
 80112e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	6a1b      	ldr	r3, [r3, #32]
 80112ec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80112ee:	683b      	ldr	r3, [r7, #0]
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	697a      	ldr	r2, [r7, #20]
 80112f4:	4313      	orrs	r3, r2
 80112f6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80112f8:	693b      	ldr	r3, [r7, #16]
 80112fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80112fe:	f023 0303 	bic.w	r3, r3, #3
 8011302:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8011304:	683b      	ldr	r3, [r7, #0]
 8011306:	689a      	ldr	r2, [r3, #8]
 8011308:	683b      	ldr	r3, [r7, #0]
 801130a:	699b      	ldr	r3, [r3, #24]
 801130c:	021b      	lsls	r3, r3, #8
 801130e:	4313      	orrs	r3, r2
 8011310:	693a      	ldr	r2, [r7, #16]
 8011312:	4313      	orrs	r3, r2
 8011314:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8011316:	693b      	ldr	r3, [r7, #16]
 8011318:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 801131c:	f023 030c 	bic.w	r3, r3, #12
 8011320:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8011322:	693b      	ldr	r3, [r7, #16]
 8011324:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8011328:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801132c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 801132e:	683b      	ldr	r3, [r7, #0]
 8011330:	68da      	ldr	r2, [r3, #12]
 8011332:	683b      	ldr	r3, [r7, #0]
 8011334:	69db      	ldr	r3, [r3, #28]
 8011336:	021b      	lsls	r3, r3, #8
 8011338:	4313      	orrs	r3, r2
 801133a:	693a      	ldr	r2, [r7, #16]
 801133c:	4313      	orrs	r3, r2
 801133e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8011340:	683b      	ldr	r3, [r7, #0]
 8011342:	691b      	ldr	r3, [r3, #16]
 8011344:	011a      	lsls	r2, r3, #4
 8011346:	683b      	ldr	r3, [r7, #0]
 8011348:	6a1b      	ldr	r3, [r3, #32]
 801134a:	031b      	lsls	r3, r3, #12
 801134c:	4313      	orrs	r3, r2
 801134e:	693a      	ldr	r2, [r7, #16]
 8011350:	4313      	orrs	r3, r2
 8011352:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 801135a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8011362:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8011364:	683b      	ldr	r3, [r7, #0]
 8011366:	685a      	ldr	r2, [r3, #4]
 8011368:	683b      	ldr	r3, [r7, #0]
 801136a:	695b      	ldr	r3, [r3, #20]
 801136c:	011b      	lsls	r3, r3, #4
 801136e:	4313      	orrs	r3, r2
 8011370:	68fa      	ldr	r2, [r7, #12]
 8011372:	4313      	orrs	r3, r2
 8011374:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	697a      	ldr	r2, [r7, #20]
 801137c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	693a      	ldr	r2, [r7, #16]
 8011384:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	68fa      	ldr	r2, [r7, #12]
 801138c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	2201      	movs	r2, #1
 8011392:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	2201      	movs	r2, #1
 801139a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	2201      	movs	r2, #1
 80113a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	2201      	movs	r2, #1
 80113aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	2201      	movs	r2, #1
 80113b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	2201      	movs	r2, #1
 80113ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80113be:	2300      	movs	r3, #0
}
 80113c0:	4618      	mov	r0, r3
 80113c2:	3718      	adds	r7, #24
 80113c4:	46bd      	mov	sp, r7
 80113c6:	bd80      	pop	{r7, pc}

080113c8 <HAL_TIM_Encoder_DeInit>:
  * @brief  DeInitializes the TIM Encoder interface
  * @param  htim TIM Encoder Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_DeInit(TIM_HandleTypeDef *htim)
{
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b082      	sub	sp, #8
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	2202      	movs	r2, #2
 80113d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	6a1a      	ldr	r2, [r3, #32]
 80113de:	f241 1311 	movw	r3, #4369	@ 0x1111
 80113e2:	4013      	ands	r3, r2
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d10f      	bne.n	8011408 <HAL_TIM_Encoder_DeInit+0x40>
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	6a1a      	ldr	r2, [r3, #32]
 80113ee:	f240 4344 	movw	r3, #1092	@ 0x444
 80113f2:	4013      	ands	r3, r2
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d107      	bne.n	8011408 <HAL_TIM_Encoder_DeInit+0x40>
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	681a      	ldr	r2, [r3, #0]
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	f022 0201 	bic.w	r2, r2, #1
 8011406:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Encoder_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Encoder_MspDeInit(htim);
 8011408:	6878      	ldr	r0, [r7, #4]
 801140a:	f000 f82b 	bl	8011464 <HAL_TIM_Encoder_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	2200      	movs	r2, #0
 8011412:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_RESET);
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	2200      	movs	r2, #0
 801141a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_RESET);
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	2200      	movs	r2, #0
 8011422:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_RESET);
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	2200      	movs	r2, #0
 801142a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_RESET);
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	2200      	movs	r2, #0
 8011432:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	2200      	movs	r2, #0
 801143a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	2200      	movs	r2, #0
 8011442:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8011446:	2300      	movs	r3, #0
}
 8011448:	4618      	mov	r0, r3
 801144a:	3708      	adds	r7, #8
 801144c:	46bd      	mov	sp, r7
 801144e:	bd80      	pop	{r7, pc}

08011450 <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 8011450:	b480      	push	{r7}
 8011452:	b083      	sub	sp, #12
 8011454:	af00      	add	r7, sp, #0
 8011456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 8011458:	bf00      	nop
 801145a:	370c      	adds	r7, #12
 801145c:	46bd      	mov	sp, r7
 801145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011462:	4770      	bx	lr

08011464 <HAL_TIM_Encoder_MspDeInit>:
  * @brief  DeInitializes TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspDeInit(TIM_HandleTypeDef *htim)
{
 8011464:	b480      	push	{r7}
 8011466:	b083      	sub	sp, #12
 8011468:	af00      	add	r7, sp, #0
 801146a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspDeInit could be implemented in the user file
   */
}
 801146c:	bf00      	nop
 801146e:	370c      	adds	r7, #12
 8011470:	46bd      	mov	sp, r7
 8011472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011476:	4770      	bx	lr

08011478 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011478:	b580      	push	{r7, lr}
 801147a:	b084      	sub	sp, #16
 801147c:	af00      	add	r7, sp, #0
 801147e:	6078      	str	r0, [r7, #4]
 8011480:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8011488:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8011490:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011498:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80114a0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80114a2:	683b      	ldr	r3, [r7, #0]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d110      	bne.n	80114ca <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80114a8:	7bfb      	ldrb	r3, [r7, #15]
 80114aa:	2b01      	cmp	r3, #1
 80114ac:	d102      	bne.n	80114b4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80114ae:	7b7b      	ldrb	r3, [r7, #13]
 80114b0:	2b01      	cmp	r3, #1
 80114b2:	d001      	beq.n	80114b8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80114b4:	2301      	movs	r3, #1
 80114b6:	e069      	b.n	801158c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	2202      	movs	r2, #2
 80114bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	2202      	movs	r2, #2
 80114c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80114c8:	e031      	b.n	801152e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80114ca:	683b      	ldr	r3, [r7, #0]
 80114cc:	2b04      	cmp	r3, #4
 80114ce:	d110      	bne.n	80114f2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80114d0:	7bbb      	ldrb	r3, [r7, #14]
 80114d2:	2b01      	cmp	r3, #1
 80114d4:	d102      	bne.n	80114dc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80114d6:	7b3b      	ldrb	r3, [r7, #12]
 80114d8:	2b01      	cmp	r3, #1
 80114da:	d001      	beq.n	80114e0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80114dc:	2301      	movs	r3, #1
 80114de:	e055      	b.n	801158c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	2202      	movs	r2, #2
 80114e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	2202      	movs	r2, #2
 80114ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80114f0:	e01d      	b.n	801152e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80114f2:	7bfb      	ldrb	r3, [r7, #15]
 80114f4:	2b01      	cmp	r3, #1
 80114f6:	d108      	bne.n	801150a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80114f8:	7bbb      	ldrb	r3, [r7, #14]
 80114fa:	2b01      	cmp	r3, #1
 80114fc:	d105      	bne.n	801150a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80114fe:	7b7b      	ldrb	r3, [r7, #13]
 8011500:	2b01      	cmp	r3, #1
 8011502:	d102      	bne.n	801150a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8011504:	7b3b      	ldrb	r3, [r7, #12]
 8011506:	2b01      	cmp	r3, #1
 8011508:	d001      	beq.n	801150e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 801150a:	2301      	movs	r3, #1
 801150c:	e03e      	b.n	801158c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	2202      	movs	r2, #2
 8011512:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	2202      	movs	r2, #2
 801151a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	2202      	movs	r2, #2
 8011522:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	2202      	movs	r2, #2
 801152a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 801152e:	683b      	ldr	r3, [r7, #0]
 8011530:	2b00      	cmp	r3, #0
 8011532:	d003      	beq.n	801153c <HAL_TIM_Encoder_Start+0xc4>
 8011534:	683b      	ldr	r3, [r7, #0]
 8011536:	2b04      	cmp	r3, #4
 8011538:	d008      	beq.n	801154c <HAL_TIM_Encoder_Start+0xd4>
 801153a:	e00f      	b.n	801155c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	2201      	movs	r2, #1
 8011542:	2100      	movs	r1, #0
 8011544:	4618      	mov	r0, r3
 8011546:	f002 fd4b 	bl	8013fe0 <TIM_CCxChannelCmd>
      break;
 801154a:	e016      	b.n	801157a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	2201      	movs	r2, #1
 8011552:	2104      	movs	r1, #4
 8011554:	4618      	mov	r0, r3
 8011556:	f002 fd43 	bl	8013fe0 <TIM_CCxChannelCmd>
      break;
 801155a:	e00e      	b.n	801157a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	2201      	movs	r2, #1
 8011562:	2100      	movs	r1, #0
 8011564:	4618      	mov	r0, r3
 8011566:	f002 fd3b 	bl	8013fe0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	2201      	movs	r2, #1
 8011570:	2104      	movs	r1, #4
 8011572:	4618      	mov	r0, r3
 8011574:	f002 fd34 	bl	8013fe0 <TIM_CCxChannelCmd>
      break;
 8011578:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	681a      	ldr	r2, [r3, #0]
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	f042 0201 	orr.w	r2, r2, #1
 8011588:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 801158a:	2300      	movs	r3, #0
}
 801158c:	4618      	mov	r0, r3
 801158e:	3710      	adds	r7, #16
 8011590:	46bd      	mov	sp, r7
 8011592:	bd80      	pop	{r7, pc}

08011594 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011594:	b580      	push	{r7, lr}
 8011596:	b082      	sub	sp, #8
 8011598:	af00      	add	r7, sp, #0
 801159a:	6078      	str	r0, [r7, #4]
 801159c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 801159e:	683b      	ldr	r3, [r7, #0]
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d003      	beq.n	80115ac <HAL_TIM_Encoder_Stop+0x18>
 80115a4:	683b      	ldr	r3, [r7, #0]
 80115a6:	2b04      	cmp	r3, #4
 80115a8:	d008      	beq.n	80115bc <HAL_TIM_Encoder_Stop+0x28>
 80115aa:	e00f      	b.n	80115cc <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	2200      	movs	r2, #0
 80115b2:	2100      	movs	r1, #0
 80115b4:	4618      	mov	r0, r3
 80115b6:	f002 fd13 	bl	8013fe0 <TIM_CCxChannelCmd>
      break;
 80115ba:	e016      	b.n	80115ea <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	2200      	movs	r2, #0
 80115c2:	2104      	movs	r1, #4
 80115c4:	4618      	mov	r0, r3
 80115c6:	f002 fd0b 	bl	8013fe0 <TIM_CCxChannelCmd>
      break;
 80115ca:	e00e      	b.n	80115ea <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	2200      	movs	r2, #0
 80115d2:	2100      	movs	r1, #0
 80115d4:	4618      	mov	r0, r3
 80115d6:	f002 fd03 	bl	8013fe0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	2200      	movs	r2, #0
 80115e0:	2104      	movs	r1, #4
 80115e2:	4618      	mov	r0, r3
 80115e4:	f002 fcfc 	bl	8013fe0 <TIM_CCxChannelCmd>
      break;
 80115e8:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	6a1a      	ldr	r2, [r3, #32]
 80115f0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80115f4:	4013      	ands	r3, r2
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d10f      	bne.n	801161a <HAL_TIM_Encoder_Stop+0x86>
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	6a1a      	ldr	r2, [r3, #32]
 8011600:	f240 4344 	movw	r3, #1092	@ 0x444
 8011604:	4013      	ands	r3, r2
 8011606:	2b00      	cmp	r3, #0
 8011608:	d107      	bne.n	801161a <HAL_TIM_Encoder_Stop+0x86>
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	681a      	ldr	r2, [r3, #0]
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	f022 0201 	bic.w	r2, r2, #1
 8011618:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 801161a:	683b      	ldr	r3, [r7, #0]
 801161c:	2b00      	cmp	r3, #0
 801161e:	d002      	beq.n	8011626 <HAL_TIM_Encoder_Stop+0x92>
 8011620:	683b      	ldr	r3, [r7, #0]
 8011622:	2b04      	cmp	r3, #4
 8011624:	d138      	bne.n	8011698 <HAL_TIM_Encoder_Stop+0x104>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011626:	683b      	ldr	r3, [r7, #0]
 8011628:	2b00      	cmp	r3, #0
 801162a:	d104      	bne.n	8011636 <HAL_TIM_Encoder_Stop+0xa2>
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	2201      	movs	r2, #1
 8011630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8011634:	e013      	b.n	801165e <HAL_TIM_Encoder_Stop+0xca>
 8011636:	683b      	ldr	r3, [r7, #0]
 8011638:	2b04      	cmp	r3, #4
 801163a:	d104      	bne.n	8011646 <HAL_TIM_Encoder_Stop+0xb2>
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	2201      	movs	r2, #1
 8011640:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8011644:	e00b      	b.n	801165e <HAL_TIM_Encoder_Stop+0xca>
 8011646:	683b      	ldr	r3, [r7, #0]
 8011648:	2b08      	cmp	r3, #8
 801164a:	d104      	bne.n	8011656 <HAL_TIM_Encoder_Stop+0xc2>
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	2201      	movs	r2, #1
 8011650:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8011654:	e003      	b.n	801165e <HAL_TIM_Encoder_Stop+0xca>
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	2201      	movs	r2, #1
 801165a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801165e:	683b      	ldr	r3, [r7, #0]
 8011660:	2b00      	cmp	r3, #0
 8011662:	d104      	bne.n	801166e <HAL_TIM_Encoder_Stop+0xda>
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	2201      	movs	r2, #1
 8011668:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801166c:	e024      	b.n	80116b8 <HAL_TIM_Encoder_Stop+0x124>
 801166e:	683b      	ldr	r3, [r7, #0]
 8011670:	2b04      	cmp	r3, #4
 8011672:	d104      	bne.n	801167e <HAL_TIM_Encoder_Stop+0xea>
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	2201      	movs	r2, #1
 8011678:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801167c:	e01c      	b.n	80116b8 <HAL_TIM_Encoder_Stop+0x124>
 801167e:	683b      	ldr	r3, [r7, #0]
 8011680:	2b08      	cmp	r3, #8
 8011682:	d104      	bne.n	801168e <HAL_TIM_Encoder_Stop+0xfa>
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	2201      	movs	r2, #1
 8011688:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801168c:	e014      	b.n	80116b8 <HAL_TIM_Encoder_Stop+0x124>
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	2201      	movs	r2, #1
 8011692:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011696:	e00f      	b.n	80116b8 <HAL_TIM_Encoder_Stop+0x124>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	2201      	movs	r2, #1
 801169c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	2201      	movs	r2, #1
 80116a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	2201      	movs	r2, #1
 80116ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	2201      	movs	r2, #1
 80116b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return HAL_OK;
 80116b8:	2300      	movs	r3, #0
}
 80116ba:	4618      	mov	r0, r3
 80116bc:	3708      	adds	r7, #8
 80116be:	46bd      	mov	sp, r7
 80116c0:	bd80      	pop	{r7, pc}

080116c2 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80116c2:	b580      	push	{r7, lr}
 80116c4:	b084      	sub	sp, #16
 80116c6:	af00      	add	r7, sp, #0
 80116c8:	6078      	str	r0, [r7, #4]
 80116ca:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80116d2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80116da:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80116e2:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80116ea:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80116ec:	683b      	ldr	r3, [r7, #0]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d110      	bne.n	8011714 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80116f2:	7bfb      	ldrb	r3, [r7, #15]
 80116f4:	2b01      	cmp	r3, #1
 80116f6:	d102      	bne.n	80116fe <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80116f8:	7b7b      	ldrb	r3, [r7, #13]
 80116fa:	2b01      	cmp	r3, #1
 80116fc:	d001      	beq.n	8011702 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80116fe:	2301      	movs	r3, #1
 8011700:	e089      	b.n	8011816 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	2202      	movs	r2, #2
 8011706:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	2202      	movs	r2, #2
 801170e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8011712:	e031      	b.n	8011778 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8011714:	683b      	ldr	r3, [r7, #0]
 8011716:	2b04      	cmp	r3, #4
 8011718:	d110      	bne.n	801173c <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 801171a:	7bbb      	ldrb	r3, [r7, #14]
 801171c:	2b01      	cmp	r3, #1
 801171e:	d102      	bne.n	8011726 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8011720:	7b3b      	ldrb	r3, [r7, #12]
 8011722:	2b01      	cmp	r3, #1
 8011724:	d001      	beq.n	801172a <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8011726:	2301      	movs	r3, #1
 8011728:	e075      	b.n	8011816 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	2202      	movs	r2, #2
 801172e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	2202      	movs	r2, #2
 8011736:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801173a:	e01d      	b.n	8011778 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 801173c:	7bfb      	ldrb	r3, [r7, #15]
 801173e:	2b01      	cmp	r3, #1
 8011740:	d108      	bne.n	8011754 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8011742:	7bbb      	ldrb	r3, [r7, #14]
 8011744:	2b01      	cmp	r3, #1
 8011746:	d105      	bne.n	8011754 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8011748:	7b7b      	ldrb	r3, [r7, #13]
 801174a:	2b01      	cmp	r3, #1
 801174c:	d102      	bne.n	8011754 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 801174e:	7b3b      	ldrb	r3, [r7, #12]
 8011750:	2b01      	cmp	r3, #1
 8011752:	d001      	beq.n	8011758 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8011754:	2301      	movs	r3, #1
 8011756:	e05e      	b.n	8011816 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	2202      	movs	r2, #2
 801175c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	2202      	movs	r2, #2
 8011764:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	2202      	movs	r2, #2
 801176c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	2202      	movs	r2, #2
 8011774:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8011778:	683b      	ldr	r3, [r7, #0]
 801177a:	2b00      	cmp	r3, #0
 801177c:	d003      	beq.n	8011786 <HAL_TIM_Encoder_Start_IT+0xc4>
 801177e:	683b      	ldr	r3, [r7, #0]
 8011780:	2b04      	cmp	r3, #4
 8011782:	d010      	beq.n	80117a6 <HAL_TIM_Encoder_Start_IT+0xe4>
 8011784:	e01f      	b.n	80117c6 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	2201      	movs	r2, #1
 801178c:	2100      	movs	r1, #0
 801178e:	4618      	mov	r0, r3
 8011790:	f002 fc26 	bl	8013fe0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	68da      	ldr	r2, [r3, #12]
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	f042 0202 	orr.w	r2, r2, #2
 80117a2:	60da      	str	r2, [r3, #12]
      break;
 80117a4:	e02e      	b.n	8011804 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	2201      	movs	r2, #1
 80117ac:	2104      	movs	r1, #4
 80117ae:	4618      	mov	r0, r3
 80117b0:	f002 fc16 	bl	8013fe0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	68da      	ldr	r2, [r3, #12]
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	f042 0204 	orr.w	r2, r2, #4
 80117c2:	60da      	str	r2, [r3, #12]
      break;
 80117c4:	e01e      	b.n	8011804 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	2201      	movs	r2, #1
 80117cc:	2100      	movs	r1, #0
 80117ce:	4618      	mov	r0, r3
 80117d0:	f002 fc06 	bl	8013fe0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	2201      	movs	r2, #1
 80117da:	2104      	movs	r1, #4
 80117dc:	4618      	mov	r0, r3
 80117de:	f002 fbff 	bl	8013fe0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	68da      	ldr	r2, [r3, #12]
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	f042 0202 	orr.w	r2, r2, #2
 80117f0:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	68da      	ldr	r2, [r3, #12]
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	f042 0204 	orr.w	r2, r2, #4
 8011800:	60da      	str	r2, [r3, #12]
      break;
 8011802:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	681a      	ldr	r2, [r3, #0]
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	f042 0201 	orr.w	r2, r2, #1
 8011812:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8011814:	2300      	movs	r3, #0
}
 8011816:	4618      	mov	r0, r3
 8011818:	3710      	adds	r7, #16
 801181a:	46bd      	mov	sp, r7
 801181c:	bd80      	pop	{r7, pc}

0801181e <HAL_TIM_Encoder_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801181e:	b580      	push	{r7, lr}
 8011820:	b082      	sub	sp, #8
 8011822:	af00      	add	r7, sp, #0
 8011824:	6078      	str	r0, [r7, #4]
 8011826:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  if (Channel == TIM_CHANNEL_1)
 8011828:	683b      	ldr	r3, [r7, #0]
 801182a:	2b00      	cmp	r3, #0
 801182c:	d10f      	bne.n	801184e <HAL_TIM_Encoder_Stop_IT+0x30>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	2200      	movs	r2, #0
 8011834:	2100      	movs	r1, #0
 8011836:	4618      	mov	r0, r3
 8011838:	f002 fbd2 	bl	8013fe0 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	68da      	ldr	r2, [r3, #12]
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	f022 0202 	bic.w	r2, r2, #2
 801184a:	60da      	str	r2, [r3, #12]
 801184c:	e030      	b.n	80118b0 <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else if (Channel == TIM_CHANNEL_2)
 801184e:	683b      	ldr	r3, [r7, #0]
 8011850:	2b04      	cmp	r3, #4
 8011852:	d10f      	bne.n	8011874 <HAL_TIM_Encoder_Stop_IT+0x56>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	2200      	movs	r2, #0
 801185a:	2104      	movs	r1, #4
 801185c:	4618      	mov	r0, r3
 801185e:	f002 fbbf 	bl	8013fe0 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	68da      	ldr	r2, [r3, #12]
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	f022 0204 	bic.w	r2, r2, #4
 8011870:	60da      	str	r2, [r3, #12]
 8011872:	e01d      	b.n	80118b0 <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	2200      	movs	r2, #0
 801187a:	2100      	movs	r1, #0
 801187c:	4618      	mov	r0, r3
 801187e:	f002 fbaf 	bl	8013fe0 <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	2200      	movs	r2, #0
 8011888:	2104      	movs	r1, #4
 801188a:	4618      	mov	r0, r3
 801188c:	f002 fba8 	bl	8013fe0 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 and 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	68da      	ldr	r2, [r3, #12]
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	f022 0202 	bic.w	r2, r2, #2
 801189e:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	68da      	ldr	r2, [r3, #12]
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	f022 0204 	bic.w	r2, r2, #4
 80118ae:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	6a1a      	ldr	r2, [r3, #32]
 80118b6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80118ba:	4013      	ands	r3, r2
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d10f      	bne.n	80118e0 <HAL_TIM_Encoder_Stop_IT+0xc2>
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	6a1a      	ldr	r2, [r3, #32]
 80118c6:	f240 4344 	movw	r3, #1092	@ 0x444
 80118ca:	4013      	ands	r3, r2
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d107      	bne.n	80118e0 <HAL_TIM_Encoder_Stop_IT+0xc2>
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	681a      	ldr	r2, [r3, #0]
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	f022 0201 	bic.w	r2, r2, #1
 80118de:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 80118e0:	683b      	ldr	r3, [r7, #0]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d002      	beq.n	80118ec <HAL_TIM_Encoder_Stop_IT+0xce>
 80118e6:	683b      	ldr	r3, [r7, #0]
 80118e8:	2b04      	cmp	r3, #4
 80118ea:	d138      	bne.n	801195e <HAL_TIM_Encoder_Stop_IT+0x140>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80118ec:	683b      	ldr	r3, [r7, #0]
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d104      	bne.n	80118fc <HAL_TIM_Encoder_Stop_IT+0xde>
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	2201      	movs	r2, #1
 80118f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80118fa:	e013      	b.n	8011924 <HAL_TIM_Encoder_Stop_IT+0x106>
 80118fc:	683b      	ldr	r3, [r7, #0]
 80118fe:	2b04      	cmp	r3, #4
 8011900:	d104      	bne.n	801190c <HAL_TIM_Encoder_Stop_IT+0xee>
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	2201      	movs	r2, #1
 8011906:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801190a:	e00b      	b.n	8011924 <HAL_TIM_Encoder_Stop_IT+0x106>
 801190c:	683b      	ldr	r3, [r7, #0]
 801190e:	2b08      	cmp	r3, #8
 8011910:	d104      	bne.n	801191c <HAL_TIM_Encoder_Stop_IT+0xfe>
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	2201      	movs	r2, #1
 8011916:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801191a:	e003      	b.n	8011924 <HAL_TIM_Encoder_Stop_IT+0x106>
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	2201      	movs	r2, #1
 8011920:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011924:	683b      	ldr	r3, [r7, #0]
 8011926:	2b00      	cmp	r3, #0
 8011928:	d104      	bne.n	8011934 <HAL_TIM_Encoder_Stop_IT+0x116>
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	2201      	movs	r2, #1
 801192e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8011932:	e024      	b.n	801197e <HAL_TIM_Encoder_Stop_IT+0x160>
 8011934:	683b      	ldr	r3, [r7, #0]
 8011936:	2b04      	cmp	r3, #4
 8011938:	d104      	bne.n	8011944 <HAL_TIM_Encoder_Stop_IT+0x126>
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	2201      	movs	r2, #1
 801193e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8011942:	e01c      	b.n	801197e <HAL_TIM_Encoder_Stop_IT+0x160>
 8011944:	683b      	ldr	r3, [r7, #0]
 8011946:	2b08      	cmp	r3, #8
 8011948:	d104      	bne.n	8011954 <HAL_TIM_Encoder_Stop_IT+0x136>
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	2201      	movs	r2, #1
 801194e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011952:	e014      	b.n	801197e <HAL_TIM_Encoder_Stop_IT+0x160>
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	2201      	movs	r2, #1
 8011958:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801195c:	e00f      	b.n	801197e <HAL_TIM_Encoder_Stop_IT+0x160>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	2201      	movs	r2, #1
 8011962:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	2201      	movs	r2, #1
 801196a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	2201      	movs	r2, #1
 8011972:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	2201      	movs	r2, #1
 801197a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return HAL_OK;
 801197e:	2300      	movs	r3, #0
}
 8011980:	4618      	mov	r0, r3
 8011982:	3708      	adds	r7, #8
 8011984:	46bd      	mov	sp, r7
 8011986:	bd80      	pop	{r7, pc}

08011988 <HAL_TIM_Encoder_Start_DMA>:
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData1,
                                            uint32_t *pData2, uint16_t Length)
{
 8011988:	b580      	push	{r7, lr}
 801198a:	b086      	sub	sp, #24
 801198c:	af00      	add	r7, sp, #0
 801198e:	60f8      	str	r0, [r7, #12]
 8011990:	60b9      	str	r1, [r7, #8]
 8011992:	607a      	str	r2, [r7, #4]
 8011994:	603b      	str	r3, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 801199c:	75fb      	strb	r3, [r7, #23]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80119a4:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80119ac:	757b      	strb	r3, [r7, #21]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80119b4:	753b      	strb	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80119b6:	68bb      	ldr	r3, [r7, #8]
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d120      	bne.n	80119fe <HAL_TIM_Encoder_Start_DMA+0x76>
  {
    if ((channel_1_state == HAL_TIM_CHANNEL_STATE_BUSY)
 80119bc:	7dfb      	ldrb	r3, [r7, #23]
 80119be:	2b02      	cmp	r3, #2
 80119c0:	d002      	beq.n	80119c8 <HAL_TIM_Encoder_Start_DMA+0x40>
        || (complementary_channel_1_state == HAL_TIM_CHANNEL_STATE_BUSY))
 80119c2:	7d7b      	ldrb	r3, [r7, #21]
 80119c4:	2b02      	cmp	r3, #2
 80119c6:	d101      	bne.n	80119cc <HAL_TIM_Encoder_Start_DMA+0x44>
    {
      return HAL_BUSY;
 80119c8:	2302      	movs	r3, #2
 80119ca:	e13f      	b.n	8011c4c <HAL_TIM_Encoder_Start_DMA+0x2c4>
    }
    else if ((channel_1_state == HAL_TIM_CHANNEL_STATE_READY)
 80119cc:	7dfb      	ldrb	r3, [r7, #23]
 80119ce:	2b01      	cmp	r3, #1
 80119d0:	d113      	bne.n	80119fa <HAL_TIM_Encoder_Start_DMA+0x72>
             && (complementary_channel_1_state == HAL_TIM_CHANNEL_STATE_READY))
 80119d2:	7d7b      	ldrb	r3, [r7, #21]
 80119d4:	2b01      	cmp	r3, #1
 80119d6:	d110      	bne.n	80119fa <HAL_TIM_Encoder_Start_DMA+0x72>
    {
      if ((pData1 == NULL) || (Length == 0U))
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d002      	beq.n	80119e4 <HAL_TIM_Encoder_Start_DMA+0x5c>
 80119de:	8c3b      	ldrh	r3, [r7, #32]
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d101      	bne.n	80119e8 <HAL_TIM_Encoder_Start_DMA+0x60>
      {
        return HAL_ERROR;
 80119e4:	2301      	movs	r3, #1
 80119e6:	e131      	b.n	8011c4c <HAL_TIM_Encoder_Start_DMA+0x2c4>
      }
      else
      {
        TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	2202      	movs	r2, #2
 80119ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	2202      	movs	r2, #2
 80119f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      if ((pData1 == NULL) || (Length == 0U))
 80119f8:	e05d      	b.n	8011ab6 <HAL_TIM_Encoder_Start_DMA+0x12e>
      }
    }
    else
    {
      return HAL_ERROR;
 80119fa:	2301      	movs	r3, #1
 80119fc:	e126      	b.n	8011c4c <HAL_TIM_Encoder_Start_DMA+0x2c4>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80119fe:	68bb      	ldr	r3, [r7, #8]
 8011a00:	2b04      	cmp	r3, #4
 8011a02:	d120      	bne.n	8011a46 <HAL_TIM_Encoder_Start_DMA+0xbe>
  {
    if ((channel_2_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8011a04:	7dbb      	ldrb	r3, [r7, #22]
 8011a06:	2b02      	cmp	r3, #2
 8011a08:	d002      	beq.n	8011a10 <HAL_TIM_Encoder_Start_DMA+0x88>
        || (complementary_channel_2_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8011a0a:	7d3b      	ldrb	r3, [r7, #20]
 8011a0c:	2b02      	cmp	r3, #2
 8011a0e:	d101      	bne.n	8011a14 <HAL_TIM_Encoder_Start_DMA+0x8c>
    {
      return HAL_BUSY;
 8011a10:	2302      	movs	r3, #2
 8011a12:	e11b      	b.n	8011c4c <HAL_TIM_Encoder_Start_DMA+0x2c4>
    }
    else if ((channel_2_state == HAL_TIM_CHANNEL_STATE_READY)
 8011a14:	7dbb      	ldrb	r3, [r7, #22]
 8011a16:	2b01      	cmp	r3, #1
 8011a18:	d113      	bne.n	8011a42 <HAL_TIM_Encoder_Start_DMA+0xba>
             && (complementary_channel_2_state == HAL_TIM_CHANNEL_STATE_READY))
 8011a1a:	7d3b      	ldrb	r3, [r7, #20]
 8011a1c:	2b01      	cmp	r3, #1
 8011a1e:	d110      	bne.n	8011a42 <HAL_TIM_Encoder_Start_DMA+0xba>
    {
      if ((pData2 == NULL) || (Length == 0U))
 8011a20:	683b      	ldr	r3, [r7, #0]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d002      	beq.n	8011a2c <HAL_TIM_Encoder_Start_DMA+0xa4>
 8011a26:	8c3b      	ldrh	r3, [r7, #32]
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d101      	bne.n	8011a30 <HAL_TIM_Encoder_Start_DMA+0xa8>
      {
        return HAL_ERROR;
 8011a2c:	2301      	movs	r3, #1
 8011a2e:	e10d      	b.n	8011c4c <HAL_TIM_Encoder_Start_DMA+0x2c4>
      }
      else
      {
        TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	2202      	movs	r2, #2
 8011a34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
        TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	2202      	movs	r2, #2
 8011a3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      if ((pData2 == NULL) || (Length == 0U))
 8011a40:	e039      	b.n	8011ab6 <HAL_TIM_Encoder_Start_DMA+0x12e>
      }
    }
    else
    {
      return HAL_ERROR;
 8011a42:	2301      	movs	r3, #1
 8011a44:	e102      	b.n	8011c4c <HAL_TIM_Encoder_Start_DMA+0x2c4>
    }
  }
  else
  {
    if ((channel_1_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8011a46:	7dfb      	ldrb	r3, [r7, #23]
 8011a48:	2b02      	cmp	r3, #2
 8011a4a:	d008      	beq.n	8011a5e <HAL_TIM_Encoder_Start_DMA+0xd6>
        || (channel_2_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8011a4c:	7dbb      	ldrb	r3, [r7, #22]
 8011a4e:	2b02      	cmp	r3, #2
 8011a50:	d005      	beq.n	8011a5e <HAL_TIM_Encoder_Start_DMA+0xd6>
        || (complementary_channel_1_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8011a52:	7d7b      	ldrb	r3, [r7, #21]
 8011a54:	2b02      	cmp	r3, #2
 8011a56:	d002      	beq.n	8011a5e <HAL_TIM_Encoder_Start_DMA+0xd6>
        || (complementary_channel_2_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8011a58:	7d3b      	ldrb	r3, [r7, #20]
 8011a5a:	2b02      	cmp	r3, #2
 8011a5c:	d101      	bne.n	8011a62 <HAL_TIM_Encoder_Start_DMA+0xda>
    {
      return HAL_BUSY;
 8011a5e:	2302      	movs	r3, #2
 8011a60:	e0f4      	b.n	8011c4c <HAL_TIM_Encoder_Start_DMA+0x2c4>
    }
    else if ((channel_1_state == HAL_TIM_CHANNEL_STATE_READY)
 8011a62:	7dfb      	ldrb	r3, [r7, #23]
 8011a64:	2b01      	cmp	r3, #1
 8011a66:	d124      	bne.n	8011ab2 <HAL_TIM_Encoder_Start_DMA+0x12a>
             && (channel_2_state == HAL_TIM_CHANNEL_STATE_READY)
 8011a68:	7dbb      	ldrb	r3, [r7, #22]
 8011a6a:	2b01      	cmp	r3, #1
 8011a6c:	d121      	bne.n	8011ab2 <HAL_TIM_Encoder_Start_DMA+0x12a>
             && (complementary_channel_1_state == HAL_TIM_CHANNEL_STATE_READY)
 8011a6e:	7d7b      	ldrb	r3, [r7, #21]
 8011a70:	2b01      	cmp	r3, #1
 8011a72:	d11e      	bne.n	8011ab2 <HAL_TIM_Encoder_Start_DMA+0x12a>
             && (complementary_channel_2_state == HAL_TIM_CHANNEL_STATE_READY))
 8011a74:	7d3b      	ldrb	r3, [r7, #20]
 8011a76:	2b01      	cmp	r3, #1
 8011a78:	d11b      	bne.n	8011ab2 <HAL_TIM_Encoder_Start_DMA+0x12a>
    {
      if ((((pData1 == NULL) || (pData2 == NULL))) || (Length == 0U))
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d005      	beq.n	8011a8c <HAL_TIM_Encoder_Start_DMA+0x104>
 8011a80:	683b      	ldr	r3, [r7, #0]
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d002      	beq.n	8011a8c <HAL_TIM_Encoder_Start_DMA+0x104>
 8011a86:	8c3b      	ldrh	r3, [r7, #32]
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d101      	bne.n	8011a90 <HAL_TIM_Encoder_Start_DMA+0x108>
      {
        return HAL_ERROR;
 8011a8c:	2301      	movs	r3, #1
 8011a8e:	e0dd      	b.n	8011c4c <HAL_TIM_Encoder_Start_DMA+0x2c4>
      }
      else
      {
        TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	2202      	movs	r2, #2
 8011a94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	2202      	movs	r2, #2
 8011a9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
        TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	2202      	movs	r2, #2
 8011aa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	2202      	movs	r2, #2
 8011aac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      if ((((pData1 == NULL) || (pData2 == NULL))) || (Length == 0U))
 8011ab0:	e001      	b.n	8011ab6 <HAL_TIM_Encoder_Start_DMA+0x12e>
      }
    }
    else
    {
      return HAL_ERROR;
 8011ab2:	2301      	movs	r3, #1
 8011ab4:	e0ca      	b.n	8011c4c <HAL_TIM_Encoder_Start_DMA+0x2c4>
    }
  }

  switch (Channel)
 8011ab6:	68bb      	ldr	r3, [r7, #8]
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d003      	beq.n	8011ac4 <HAL_TIM_Encoder_Start_DMA+0x13c>
 8011abc:	68bb      	ldr	r3, [r7, #8]
 8011abe:	2b04      	cmp	r3, #4
 8011ac0:	d033      	beq.n	8011b2a <HAL_TIM_Encoder_Start_DMA+0x1a2>
 8011ac2:	e065      	b.n	8011b90 <HAL_TIM_Encoder_Start_DMA+0x208>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ac8:	4a62      	ldr	r2, [pc, #392]	@ (8011c54 <HAL_TIM_Encoder_Start_DMA+0x2cc>)
 8011aca:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ad0:	4a61      	ldr	r2, [pc, #388]	@ (8011c58 <HAL_TIM_Encoder_Start_DMA+0x2d0>)
 8011ad2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ad8:	4a60      	ldr	r2, [pc, #384]	@ (8011c5c <HAL_TIM_Encoder_Start_DMA+0x2d4>)
 8011ada:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData1,
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	3334      	adds	r3, #52	@ 0x34
 8011ae6:	4619      	mov	r1, r3
 8011ae8:	687a      	ldr	r2, [r7, #4]
 8011aea:	8c3b      	ldrh	r3, [r7, #32]
 8011aec:	f7f4 fcfd 	bl	80064ea <HAL_DMA_Start_IT>
 8011af0:	4603      	mov	r3, r0
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d001      	beq.n	8011afa <HAL_TIM_Encoder_Start_DMA+0x172>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8011af6:	2301      	movs	r3, #1
 8011af8:	e0a8      	b.n	8011c4c <HAL_TIM_Encoder_Start_DMA+0x2c4>
      }
      /* Enable the TIM Input Capture DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	68da      	ldr	r2, [r3, #12]
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011b08:	60da      	str	r2, [r3, #12]

      /* Enable the Capture compare channel */
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	2201      	movs	r2, #1
 8011b10:	2100      	movs	r1, #0
 8011b12:	4618      	mov	r0, r3
 8011b14:	f002 fa64 	bl	8013fe0 <TIM_CCxChannelCmd>

      /* Enable the Peripheral */
      __HAL_TIM_ENABLE(htim);
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	681a      	ldr	r2, [r3, #0]
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	f042 0201 	orr.w	r2, r2, #1
 8011b26:	601a      	str	r2, [r3, #0]

      break;
 8011b28:	e08f      	b.n	8011c4a <HAL_TIM_Encoder_Start_DMA+0x2c2>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011b2e:	4a49      	ldr	r2, [pc, #292]	@ (8011c54 <HAL_TIM_Encoder_Start_DMA+0x2cc>)
 8011b30:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011b36:	4a48      	ldr	r2, [pc, #288]	@ (8011c58 <HAL_TIM_Encoder_Start_DMA+0x2d0>)
 8011b38:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError;
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011b3e:	4a47      	ldr	r2, [pc, #284]	@ (8011c5c <HAL_TIM_Encoder_Start_DMA+0x2d4>)
 8011b40:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2,
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8011b46:	68fb      	ldr	r3, [r7, #12]
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	3338      	adds	r3, #56	@ 0x38
 8011b4c:	4619      	mov	r1, r3
 8011b4e:	683a      	ldr	r2, [r7, #0]
 8011b50:	8c3b      	ldrh	r3, [r7, #32]
 8011b52:	f7f4 fcca 	bl	80064ea <HAL_DMA_Start_IT>
 8011b56:	4603      	mov	r3, r0
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d001      	beq.n	8011b60 <HAL_TIM_Encoder_Start_DMA+0x1d8>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8011b5c:	2301      	movs	r3, #1
 8011b5e:	e075      	b.n	8011c4c <HAL_TIM_Encoder_Start_DMA+0x2c4>
      }
      /* Enable the TIM Input Capture  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	68da      	ldr	r2, [r3, #12]
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8011b6e:	60da      	str	r2, [r3, #12]

      /* Enable the Capture compare channel */
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8011b70:	68fb      	ldr	r3, [r7, #12]
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	2201      	movs	r2, #1
 8011b76:	2104      	movs	r1, #4
 8011b78:	4618      	mov	r0, r3
 8011b7a:	f002 fa31 	bl	8013fe0 <TIM_CCxChannelCmd>

      /* Enable the Peripheral */
      __HAL_TIM_ENABLE(htim);
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	681a      	ldr	r2, [r3, #0]
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	f042 0201 	orr.w	r2, r2, #1
 8011b8c:	601a      	str	r2, [r3, #0]

      break;
 8011b8e:	e05c      	b.n	8011c4a <HAL_TIM_Encoder_Start_DMA+0x2c2>
    }

    default:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b94:	4a2f      	ldr	r2, [pc, #188]	@ (8011c54 <HAL_TIM_Encoder_Start_DMA+0x2cc>)
 8011b96:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b9c:	4a2e      	ldr	r2, [pc, #184]	@ (8011c58 <HAL_TIM_Encoder_Start_DMA+0x2d0>)
 8011b9e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ba4:	4a2d      	ldr	r2, [pc, #180]	@ (8011c5c <HAL_TIM_Encoder_Start_DMA+0x2d4>)
 8011ba6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData1,
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	3334      	adds	r3, #52	@ 0x34
 8011bb2:	4619      	mov	r1, r3
 8011bb4:	687a      	ldr	r2, [r7, #4]
 8011bb6:	8c3b      	ldrh	r3, [r7, #32]
 8011bb8:	f7f4 fc97 	bl	80064ea <HAL_DMA_Start_IT>
 8011bbc:	4603      	mov	r3, r0
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d001      	beq.n	8011bc6 <HAL_TIM_Encoder_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8011bc2:	2301      	movs	r3, #1
 8011bc4:	e042      	b.n	8011c4c <HAL_TIM_Encoder_Start_DMA+0x2c4>
      }

      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011bca:	4a22      	ldr	r2, [pc, #136]	@ (8011c54 <HAL_TIM_Encoder_Start_DMA+0x2cc>)
 8011bcc:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011bd2:	4a21      	ldr	r2, [pc, #132]	@ (8011c58 <HAL_TIM_Encoder_Start_DMA+0x2d0>)
 8011bd4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011bda:	4a20      	ldr	r2, [pc, #128]	@ (8011c5c <HAL_TIM_Encoder_Start_DMA+0x2d4>)
 8011bdc:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2,
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	3338      	adds	r3, #56	@ 0x38
 8011be8:	4619      	mov	r1, r3
 8011bea:	683a      	ldr	r2, [r7, #0]
 8011bec:	8c3b      	ldrh	r3, [r7, #32]
 8011bee:	f7f4 fc7c 	bl	80064ea <HAL_DMA_Start_IT>
 8011bf2:	4603      	mov	r3, r0
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d001      	beq.n	8011bfc <HAL_TIM_Encoder_Start_DMA+0x274>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8011bf8:	2301      	movs	r3, #1
 8011bfa:	e027      	b.n	8011c4c <HAL_TIM_Encoder_Start_DMA+0x2c4>
      }

      /* Enable the TIM Input Capture  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	68da      	ldr	r2, [r3, #12]
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011c0a:	60da      	str	r2, [r3, #12]
      /* Enable the TIM Input Capture  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	68da      	ldr	r2, [r3, #12]
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8011c1a:	60da      	str	r2, [r3, #12]

      /* Enable the Capture compare channel */
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	2201      	movs	r2, #1
 8011c22:	2100      	movs	r1, #0
 8011c24:	4618      	mov	r0, r3
 8011c26:	f002 f9db 	bl	8013fe0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	2201      	movs	r2, #1
 8011c30:	2104      	movs	r1, #4
 8011c32:	4618      	mov	r0, r3
 8011c34:	f002 f9d4 	bl	8013fe0 <TIM_CCxChannelCmd>

      /* Enable the Peripheral */
      __HAL_TIM_ENABLE(htim);
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	681a      	ldr	r2, [r3, #0]
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	f042 0201 	orr.w	r2, r2, #1
 8011c46:	601a      	str	r2, [r3, #0]

      break;
 8011c48:	bf00      	nop
    }
  }

  /* Return function status */
  return HAL_OK;
 8011c4a:	2300      	movs	r3, #0
}
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	3718      	adds	r7, #24
 8011c50:	46bd      	mov	sp, r7
 8011c52:	bd80      	pop	{r7, pc}
 8011c54:	0801355d 	.word	0x0801355d
 8011c58:	08013625 	.word	0x08013625
 8011c5c:	080133bb 	.word	0x080133bb

08011c60 <HAL_TIM_Encoder_Stop_DMA>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011c60:	b580      	push	{r7, lr}
 8011c62:	b082      	sub	sp, #8
 8011c64:	af00      	add	r7, sp, #0
 8011c66:	6078      	str	r0, [r7, #4]
 8011c68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  if (Channel == TIM_CHANNEL_1)
 8011c6a:	683b      	ldr	r3, [r7, #0]
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d114      	bne.n	8011c9a <HAL_TIM_Encoder_Stop_DMA+0x3a>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	2200      	movs	r2, #0
 8011c76:	2100      	movs	r1, #0
 8011c78:	4618      	mov	r0, r3
 8011c7a:	f002 f9b1 	bl	8013fe0 <TIM_CCxChannelCmd>

    /* Disable the capture compare DMA Request 1 */
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	68da      	ldr	r2, [r3, #12]
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8011c8c:	60da      	str	r2, [r3, #12]
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c92:	4618      	mov	r0, r3
 8011c94:	f7f4 fcf1 	bl	800667a <HAL_DMA_Abort_IT>
 8011c98:	e03f      	b.n	8011d1a <HAL_TIM_Encoder_Stop_DMA+0xba>
  }
  else if (Channel == TIM_CHANNEL_2)
 8011c9a:	683b      	ldr	r3, [r7, #0]
 8011c9c:	2b04      	cmp	r3, #4
 8011c9e:	d114      	bne.n	8011cca <HAL_TIM_Encoder_Stop_DMA+0x6a>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	2200      	movs	r2, #0
 8011ca6:	2104      	movs	r1, #4
 8011ca8:	4618      	mov	r0, r3
 8011caa:	f002 f999 	bl	8013fe0 <TIM_CCxChannelCmd>

    /* Disable the capture compare DMA Request 2 */
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	68da      	ldr	r2, [r3, #12]
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8011cbc:	60da      	str	r2, [r3, #12]
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	f7f4 fcd9 	bl	800667a <HAL_DMA_Abort_IT>
 8011cc8:	e027      	b.n	8011d1a <HAL_TIM_Encoder_Stop_DMA+0xba>
  }
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	2200      	movs	r2, #0
 8011cd0:	2100      	movs	r1, #0
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	f002 f984 	bl	8013fe0 <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	2200      	movs	r2, #0
 8011cde:	2104      	movs	r1, #4
 8011ce0:	4618      	mov	r0, r3
 8011ce2:	f002 f97d 	bl	8013fe0 <TIM_CCxChannelCmd>

    /* Disable the capture compare DMA Request 1 and 2 */
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	68da      	ldr	r2, [r3, #12]
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8011cf4:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	68da      	ldr	r2, [r3, #12]
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8011d04:	60da      	str	r2, [r3, #12]
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d0a:	4618      	mov	r0, r3
 8011d0c:	f7f4 fcb5 	bl	800667a <HAL_DMA_Abort_IT>
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011d14:	4618      	mov	r0, r3
 8011d16:	f7f4 fcb0 	bl	800667a <HAL_DMA_Abort_IT>
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	6a1a      	ldr	r2, [r3, #32]
 8011d20:	f241 1311 	movw	r3, #4369	@ 0x1111
 8011d24:	4013      	ands	r3, r2
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d10f      	bne.n	8011d4a <HAL_TIM_Encoder_Stop_DMA+0xea>
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	6a1a      	ldr	r2, [r3, #32]
 8011d30:	f240 4344 	movw	r3, #1092	@ 0x444
 8011d34:	4013      	ands	r3, r2
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d107      	bne.n	8011d4a <HAL_TIM_Encoder_Stop_DMA+0xea>
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	681a      	ldr	r2, [r3, #0]
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	f022 0201 	bic.w	r2, r2, #1
 8011d48:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8011d4a:	683b      	ldr	r3, [r7, #0]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d002      	beq.n	8011d56 <HAL_TIM_Encoder_Stop_DMA+0xf6>
 8011d50:	683b      	ldr	r3, [r7, #0]
 8011d52:	2b04      	cmp	r3, #4
 8011d54:	d138      	bne.n	8011dc8 <HAL_TIM_Encoder_Stop_DMA+0x168>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011d56:	683b      	ldr	r3, [r7, #0]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d104      	bne.n	8011d66 <HAL_TIM_Encoder_Stop_DMA+0x106>
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	2201      	movs	r2, #1
 8011d60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8011d64:	e013      	b.n	8011d8e <HAL_TIM_Encoder_Stop_DMA+0x12e>
 8011d66:	683b      	ldr	r3, [r7, #0]
 8011d68:	2b04      	cmp	r3, #4
 8011d6a:	d104      	bne.n	8011d76 <HAL_TIM_Encoder_Stop_DMA+0x116>
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	2201      	movs	r2, #1
 8011d70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8011d74:	e00b      	b.n	8011d8e <HAL_TIM_Encoder_Stop_DMA+0x12e>
 8011d76:	683b      	ldr	r3, [r7, #0]
 8011d78:	2b08      	cmp	r3, #8
 8011d7a:	d104      	bne.n	8011d86 <HAL_TIM_Encoder_Stop_DMA+0x126>
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	2201      	movs	r2, #1
 8011d80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8011d84:	e003      	b.n	8011d8e <HAL_TIM_Encoder_Stop_DMA+0x12e>
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	2201      	movs	r2, #1
 8011d8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011d8e:	683b      	ldr	r3, [r7, #0]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d104      	bne.n	8011d9e <HAL_TIM_Encoder_Stop_DMA+0x13e>
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	2201      	movs	r2, #1
 8011d98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8011d9c:	e024      	b.n	8011de8 <HAL_TIM_Encoder_Stop_DMA+0x188>
 8011d9e:	683b      	ldr	r3, [r7, #0]
 8011da0:	2b04      	cmp	r3, #4
 8011da2:	d104      	bne.n	8011dae <HAL_TIM_Encoder_Stop_DMA+0x14e>
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	2201      	movs	r2, #1
 8011da8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8011dac:	e01c      	b.n	8011de8 <HAL_TIM_Encoder_Stop_DMA+0x188>
 8011dae:	683b      	ldr	r3, [r7, #0]
 8011db0:	2b08      	cmp	r3, #8
 8011db2:	d104      	bne.n	8011dbe <HAL_TIM_Encoder_Stop_DMA+0x15e>
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	2201      	movs	r2, #1
 8011db8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011dbc:	e014      	b.n	8011de8 <HAL_TIM_Encoder_Stop_DMA+0x188>
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	2201      	movs	r2, #1
 8011dc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011dc6:	e00f      	b.n	8011de8 <HAL_TIM_Encoder_Stop_DMA+0x188>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	2201      	movs	r2, #1
 8011dcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	2201      	movs	r2, #1
 8011dd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	2201      	movs	r2, #1
 8011ddc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	2201      	movs	r2, #1
 8011de4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return HAL_OK;
 8011de8:	2300      	movs	r3, #0
}
 8011dea:	4618      	mov	r0, r3
 8011dec:	3708      	adds	r7, #8
 8011dee:	46bd      	mov	sp, r7
 8011df0:	bd80      	pop	{r7, pc}

08011df2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8011df2:	b580      	push	{r7, lr}
 8011df4:	b084      	sub	sp, #16
 8011df6:	af00      	add	r7, sp, #0
 8011df8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	68db      	ldr	r3, [r3, #12]
 8011e00:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	691b      	ldr	r3, [r3, #16]
 8011e08:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8011e0a:	68bb      	ldr	r3, [r7, #8]
 8011e0c:	f003 0302 	and.w	r3, r3, #2
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d020      	beq.n	8011e56 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	f003 0302 	and.w	r3, r3, #2
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d01b      	beq.n	8011e56 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	f06f 0202 	mvn.w	r2, #2
 8011e26:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	2201      	movs	r2, #1
 8011e2c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	699b      	ldr	r3, [r3, #24]
 8011e34:	f003 0303 	and.w	r3, r3, #3
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d003      	beq.n	8011e44 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8011e3c:	6878      	ldr	r0, [r7, #4]
 8011e3e:	f001 f9df 	bl	8013200 <HAL_TIM_IC_CaptureCallback>
 8011e42:	e005      	b.n	8011e50 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8011e44:	6878      	ldr	r0, [r7, #4]
 8011e46:	f001 f9d1 	bl	80131ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011e4a:	6878      	ldr	r0, [r7, #4]
 8011e4c:	f001 f9ec 	bl	8013228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	2200      	movs	r2, #0
 8011e54:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8011e56:	68bb      	ldr	r3, [r7, #8]
 8011e58:	f003 0304 	and.w	r3, r3, #4
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d020      	beq.n	8011ea2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	f003 0304 	and.w	r3, r3, #4
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d01b      	beq.n	8011ea2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	f06f 0204 	mvn.w	r2, #4
 8011e72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	2202      	movs	r2, #2
 8011e78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	699b      	ldr	r3, [r3, #24]
 8011e80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d003      	beq.n	8011e90 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011e88:	6878      	ldr	r0, [r7, #4]
 8011e8a:	f001 f9b9 	bl	8013200 <HAL_TIM_IC_CaptureCallback>
 8011e8e:	e005      	b.n	8011e9c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011e90:	6878      	ldr	r0, [r7, #4]
 8011e92:	f001 f9ab 	bl	80131ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011e96:	6878      	ldr	r0, [r7, #4]
 8011e98:	f001 f9c6 	bl	8013228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	2200      	movs	r2, #0
 8011ea0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8011ea2:	68bb      	ldr	r3, [r7, #8]
 8011ea4:	f003 0308 	and.w	r3, r3, #8
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d020      	beq.n	8011eee <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	f003 0308 	and.w	r3, r3, #8
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d01b      	beq.n	8011eee <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	f06f 0208 	mvn.w	r2, #8
 8011ebe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	2204      	movs	r2, #4
 8011ec4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	69db      	ldr	r3, [r3, #28]
 8011ecc:	f003 0303 	and.w	r3, r3, #3
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d003      	beq.n	8011edc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011ed4:	6878      	ldr	r0, [r7, #4]
 8011ed6:	f001 f993 	bl	8013200 <HAL_TIM_IC_CaptureCallback>
 8011eda:	e005      	b.n	8011ee8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011edc:	6878      	ldr	r0, [r7, #4]
 8011ede:	f001 f985 	bl	80131ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011ee2:	6878      	ldr	r0, [r7, #4]
 8011ee4:	f001 f9a0 	bl	8013228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	2200      	movs	r2, #0
 8011eec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8011eee:	68bb      	ldr	r3, [r7, #8]
 8011ef0:	f003 0310 	and.w	r3, r3, #16
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d020      	beq.n	8011f3a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	f003 0310 	and.w	r3, r3, #16
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d01b      	beq.n	8011f3a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	f06f 0210 	mvn.w	r2, #16
 8011f0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	2208      	movs	r2, #8
 8011f10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	69db      	ldr	r3, [r3, #28]
 8011f18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d003      	beq.n	8011f28 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011f20:	6878      	ldr	r0, [r7, #4]
 8011f22:	f001 f96d 	bl	8013200 <HAL_TIM_IC_CaptureCallback>
 8011f26:	e005      	b.n	8011f34 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011f28:	6878      	ldr	r0, [r7, #4]
 8011f2a:	f001 f95f 	bl	80131ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011f2e:	6878      	ldr	r0, [r7, #4]
 8011f30:	f001 f97a 	bl	8013228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	2200      	movs	r2, #0
 8011f38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8011f3a:	68bb      	ldr	r3, [r7, #8]
 8011f3c:	f003 0301 	and.w	r3, r3, #1
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d00c      	beq.n	8011f5e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	f003 0301 	and.w	r3, r3, #1
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d007      	beq.n	8011f5e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	f06f 0201 	mvn.w	r2, #1
 8011f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8011f58:	6878      	ldr	r0, [r7, #4]
 8011f5a:	f001 f933 	bl	80131c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8011f5e:	68bb      	ldr	r3, [r7, #8]
 8011f60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d00c      	beq.n	8011f82 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d007      	beq.n	8011f82 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8011f7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8011f7c:	6878      	ldr	r0, [r7, #4]
 8011f7e:	f004 f898 	bl	80160b2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8011f82:	68bb      	ldr	r3, [r7, #8]
 8011f84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d00c      	beq.n	8011fa6 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d007      	beq.n	8011fa6 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8011f9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8011fa0:	6878      	ldr	r0, [r7, #4]
 8011fa2:	f001 f955 	bl	8013250 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8011fa6:	68bb      	ldr	r3, [r7, #8]
 8011fa8:	f003 0320 	and.w	r3, r3, #32
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d00c      	beq.n	8011fca <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	f003 0320 	and.w	r3, r3, #32
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d007      	beq.n	8011fca <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	f06f 0220 	mvn.w	r2, #32
 8011fc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8011fc4:	6878      	ldr	r0, [r7, #4]
 8011fc6:	f004 f860 	bl	801608a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8011fca:	bf00      	nop
 8011fcc:	3710      	adds	r7, #16
 8011fce:	46bd      	mov	sp, r7
 8011fd0:	bd80      	pop	{r7, pc}

08011fd2 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8011fd2:	b580      	push	{r7, lr}
 8011fd4:	b086      	sub	sp, #24
 8011fd6:	af00      	add	r7, sp, #0
 8011fd8:	60f8      	str	r0, [r7, #12]
 8011fda:	60b9      	str	r1, [r7, #8]
 8011fdc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011fde:	2300      	movs	r3, #0
 8011fe0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011fe8:	2b01      	cmp	r3, #1
 8011fea:	d101      	bne.n	8011ff0 <HAL_TIM_OC_ConfigChannel+0x1e>
 8011fec:	2302      	movs	r3, #2
 8011fee:	e047      	b.n	8012080 <HAL_TIM_OC_ConfigChannel+0xae>
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	2201      	movs	r2, #1
 8011ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	2b0c      	cmp	r3, #12
 8011ffc:	d838      	bhi.n	8012070 <HAL_TIM_OC_ConfigChannel+0x9e>
 8011ffe:	a201      	add	r2, pc, #4	@ (adr r2, 8012004 <HAL_TIM_OC_ConfigChannel+0x32>)
 8012000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012004:	08012039 	.word	0x08012039
 8012008:	08012071 	.word	0x08012071
 801200c:	08012071 	.word	0x08012071
 8012010:	08012071 	.word	0x08012071
 8012014:	08012047 	.word	0x08012047
 8012018:	08012071 	.word	0x08012071
 801201c:	08012071 	.word	0x08012071
 8012020:	08012071 	.word	0x08012071
 8012024:	08012055 	.word	0x08012055
 8012028:	08012071 	.word	0x08012071
 801202c:	08012071 	.word	0x08012071
 8012030:	08012071 	.word	0x08012071
 8012034:	08012063 	.word	0x08012063
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	68b9      	ldr	r1, [r7, #8]
 801203e:	4618      	mov	r0, r3
 8012040:	f001 fbfa 	bl	8013838 <TIM_OC1_SetConfig>
      break;
 8012044:	e017      	b.n	8012076 <HAL_TIM_OC_ConfigChannel+0xa4>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	68b9      	ldr	r1, [r7, #8]
 801204c:	4618      	mov	r0, r3
 801204e:	f001 fc59 	bl	8013904 <TIM_OC2_SetConfig>
      break;
 8012052:	e010      	b.n	8012076 <HAL_TIM_OC_ConfigChannel+0xa4>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	68b9      	ldr	r1, [r7, #8]
 801205a:	4618      	mov	r0, r3
 801205c:	f001 fcbe 	bl	80139dc <TIM_OC3_SetConfig>
      break;
 8012060:	e009      	b.n	8012076 <HAL_TIM_OC_ConfigChannel+0xa4>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	68b9      	ldr	r1, [r7, #8]
 8012068:	4618      	mov	r0, r3
 801206a:	f001 fd21 	bl	8013ab0 <TIM_OC4_SetConfig>
      break;
 801206e:	e002      	b.n	8012076 <HAL_TIM_OC_ConfigChannel+0xa4>
    }

    default:
      status = HAL_ERROR;
 8012070:	2301      	movs	r3, #1
 8012072:	75fb      	strb	r3, [r7, #23]
      break;
 8012074:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	2200      	movs	r2, #0
 801207a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801207e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012080:	4618      	mov	r0, r3
 8012082:	3718      	adds	r7, #24
 8012084:	46bd      	mov	sp, r7
 8012086:	bd80      	pop	{r7, pc}

08012088 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8012088:	b580      	push	{r7, lr}
 801208a:	b086      	sub	sp, #24
 801208c:	af00      	add	r7, sp, #0
 801208e:	60f8      	str	r0, [r7, #12]
 8012090:	60b9      	str	r1, [r7, #8]
 8012092:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012094:	2300      	movs	r3, #0
 8012096:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801209e:	2b01      	cmp	r3, #1
 80120a0:	d101      	bne.n	80120a6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80120a2:	2302      	movs	r3, #2
 80120a4:	e088      	b.n	80121b8 <HAL_TIM_IC_ConfigChannel+0x130>
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	2201      	movs	r2, #1
 80120aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d11b      	bne.n	80120ec <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80120b8:	68bb      	ldr	r3, [r7, #8]
 80120ba:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80120bc:	68bb      	ldr	r3, [r7, #8]
 80120be:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80120c0:	68bb      	ldr	r3, [r7, #8]
 80120c2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80120c4:	f001 fdd5 	bl	8013c72 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	699a      	ldr	r2, [r3, #24]
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	f022 020c 	bic.w	r2, r2, #12
 80120d6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	6999      	ldr	r1, [r3, #24]
 80120de:	68bb      	ldr	r3, [r7, #8]
 80120e0:	689a      	ldr	r2, [r3, #8]
 80120e2:	68fb      	ldr	r3, [r7, #12]
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	430a      	orrs	r2, r1
 80120e8:	619a      	str	r2, [r3, #24]
 80120ea:	e060      	b.n	80121ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	2b04      	cmp	r3, #4
 80120f0:	d11c      	bne.n	801212c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80120f6:	68bb      	ldr	r3, [r7, #8]
 80120f8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80120fa:	68bb      	ldr	r3, [r7, #8]
 80120fc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80120fe:	68bb      	ldr	r3, [r7, #8]
 8012100:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8012102:	f001 fe4c 	bl	8013d9e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	699a      	ldr	r2, [r3, #24]
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8012114:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	6999      	ldr	r1, [r3, #24]
 801211c:	68bb      	ldr	r3, [r7, #8]
 801211e:	689b      	ldr	r3, [r3, #8]
 8012120:	021a      	lsls	r2, r3, #8
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	430a      	orrs	r2, r1
 8012128:	619a      	str	r2, [r3, #24]
 801212a:	e040      	b.n	80121ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	2b08      	cmp	r3, #8
 8012130:	d11b      	bne.n	801216a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8012136:	68bb      	ldr	r3, [r7, #8]
 8012138:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 801213a:	68bb      	ldr	r3, [r7, #8]
 801213c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 801213e:	68bb      	ldr	r3, [r7, #8]
 8012140:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8012142:	f001 fe99 	bl	8013e78 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	69da      	ldr	r2, [r3, #28]
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	f022 020c 	bic.w	r2, r2, #12
 8012154:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	69d9      	ldr	r1, [r3, #28]
 801215c:	68bb      	ldr	r3, [r7, #8]
 801215e:	689a      	ldr	r2, [r3, #8]
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	430a      	orrs	r2, r1
 8012166:	61da      	str	r2, [r3, #28]
 8012168:	e021      	b.n	80121ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	2b0c      	cmp	r3, #12
 801216e:	d11c      	bne.n	80121aa <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8012174:	68bb      	ldr	r3, [r7, #8]
 8012176:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8012178:	68bb      	ldr	r3, [r7, #8]
 801217a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 801217c:	68bb      	ldr	r3, [r7, #8]
 801217e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8012180:	f001 feb6 	bl	8013ef0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	69da      	ldr	r2, [r3, #28]
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8012192:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	69d9      	ldr	r1, [r3, #28]
 801219a:	68bb      	ldr	r3, [r7, #8]
 801219c:	689b      	ldr	r3, [r3, #8]
 801219e:	021a      	lsls	r2, r3, #8
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	430a      	orrs	r2, r1
 80121a6:	61da      	str	r2, [r3, #28]
 80121a8:	e001      	b.n	80121ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80121aa:	2301      	movs	r3, #1
 80121ac:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	2200      	movs	r2, #0
 80121b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80121b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80121b8:	4618      	mov	r0, r3
 80121ba:	3718      	adds	r7, #24
 80121bc:	46bd      	mov	sp, r7
 80121be:	bd80      	pop	{r7, pc}

080121c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80121c0:	b580      	push	{r7, lr}
 80121c2:	b086      	sub	sp, #24
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	60f8      	str	r0, [r7, #12]
 80121c8:	60b9      	str	r1, [r7, #8]
 80121ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80121cc:	2300      	movs	r3, #0
 80121ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80121d6:	2b01      	cmp	r3, #1
 80121d8:	d101      	bne.n	80121de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80121da:	2302      	movs	r3, #2
 80121dc:	e0ae      	b.n	801233c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	2201      	movs	r2, #1
 80121e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	2b0c      	cmp	r3, #12
 80121ea:	f200 809f 	bhi.w	801232c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80121ee:	a201      	add	r2, pc, #4	@ (adr r2, 80121f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80121f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121f4:	08012229 	.word	0x08012229
 80121f8:	0801232d 	.word	0x0801232d
 80121fc:	0801232d 	.word	0x0801232d
 8012200:	0801232d 	.word	0x0801232d
 8012204:	08012269 	.word	0x08012269
 8012208:	0801232d 	.word	0x0801232d
 801220c:	0801232d 	.word	0x0801232d
 8012210:	0801232d 	.word	0x0801232d
 8012214:	080122ab 	.word	0x080122ab
 8012218:	0801232d 	.word	0x0801232d
 801221c:	0801232d 	.word	0x0801232d
 8012220:	0801232d 	.word	0x0801232d
 8012224:	080122eb 	.word	0x080122eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	681b      	ldr	r3, [r3, #0]
 801222c:	68b9      	ldr	r1, [r7, #8]
 801222e:	4618      	mov	r0, r3
 8012230:	f001 fb02 	bl	8013838 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	699a      	ldr	r2, [r3, #24]
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	f042 0208 	orr.w	r2, r2, #8
 8012242:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	699a      	ldr	r2, [r3, #24]
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	f022 0204 	bic.w	r2, r2, #4
 8012252:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	6999      	ldr	r1, [r3, #24]
 801225a:	68bb      	ldr	r3, [r7, #8]
 801225c:	691a      	ldr	r2, [r3, #16]
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	430a      	orrs	r2, r1
 8012264:	619a      	str	r2, [r3, #24]
      break;
 8012266:	e064      	b.n	8012332 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	68b9      	ldr	r1, [r7, #8]
 801226e:	4618      	mov	r0, r3
 8012270:	f001 fb48 	bl	8013904 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	699a      	ldr	r2, [r3, #24]
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8012282:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	699a      	ldr	r2, [r3, #24]
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8012292:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	6999      	ldr	r1, [r3, #24]
 801229a:	68bb      	ldr	r3, [r7, #8]
 801229c:	691b      	ldr	r3, [r3, #16]
 801229e:	021a      	lsls	r2, r3, #8
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	430a      	orrs	r2, r1
 80122a6:	619a      	str	r2, [r3, #24]
      break;
 80122a8:	e043      	b.n	8012332 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	68b9      	ldr	r1, [r7, #8]
 80122b0:	4618      	mov	r0, r3
 80122b2:	f001 fb93 	bl	80139dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	69da      	ldr	r2, [r3, #28]
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	f042 0208 	orr.w	r2, r2, #8
 80122c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	69da      	ldr	r2, [r3, #28]
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	f022 0204 	bic.w	r2, r2, #4
 80122d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	69d9      	ldr	r1, [r3, #28]
 80122dc:	68bb      	ldr	r3, [r7, #8]
 80122de:	691a      	ldr	r2, [r3, #16]
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	430a      	orrs	r2, r1
 80122e6:	61da      	str	r2, [r3, #28]
      break;
 80122e8:	e023      	b.n	8012332 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	68b9      	ldr	r1, [r7, #8]
 80122f0:	4618      	mov	r0, r3
 80122f2:	f001 fbdd 	bl	8013ab0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	69da      	ldr	r2, [r3, #28]
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8012304:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	69da      	ldr	r2, [r3, #28]
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8012314:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	69d9      	ldr	r1, [r3, #28]
 801231c:	68bb      	ldr	r3, [r7, #8]
 801231e:	691b      	ldr	r3, [r3, #16]
 8012320:	021a      	lsls	r2, r3, #8
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	430a      	orrs	r2, r1
 8012328:	61da      	str	r2, [r3, #28]
      break;
 801232a:	e002      	b.n	8012332 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 801232c:	2301      	movs	r3, #1
 801232e:	75fb      	strb	r3, [r7, #23]
      break;
 8012330:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	2200      	movs	r2, #0
 8012336:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801233a:	7dfb      	ldrb	r3, [r7, #23]
}
 801233c:	4618      	mov	r0, r3
 801233e:	3718      	adds	r7, #24
 8012340:	46bd      	mov	sp, r7
 8012342:	bd80      	pop	{r7, pc}

08012344 <HAL_TIM_OnePulse_ConfigChannel>:
  *        without taking in account the comparison.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_ConfigChannel(TIM_HandleTypeDef *htim,  TIM_OnePulse_InitTypeDef *sConfig,
                                                 uint32_t OutputChannel,  uint32_t InputChannel)
{
 8012344:	b580      	push	{r7, lr}
 8012346:	b08c      	sub	sp, #48	@ 0x30
 8012348:	af00      	add	r7, sp, #0
 801234a:	60f8      	str	r0, [r7, #12]
 801234c:	60b9      	str	r1, [r7, #8]
 801234e:	607a      	str	r2, [r7, #4]
 8012350:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012352:	2300      	movs	r3, #0
 8012354:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check the parameters */
  assert_param(IS_TIM_OPM_CHANNELS(OutputChannel));
  assert_param(IS_TIM_OPM_CHANNELS(InputChannel));

  if (OutputChannel != InputChannel)
 8012358:	687a      	ldr	r2, [r7, #4]
 801235a:	683b      	ldr	r3, [r7, #0]
 801235c:	429a      	cmp	r2, r3
 801235e:	f000 80be 	beq.w	80124de <HAL_TIM_OnePulse_ConfigChannel+0x19a>
  {
    /* Process Locked */
    __HAL_LOCK(htim);
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012368:	2b01      	cmp	r3, #1
 801236a:	d101      	bne.n	8012370 <HAL_TIM_OnePulse_ConfigChannel+0x2c>
 801236c:	2302      	movs	r3, #2
 801236e:	e0b7      	b.n	80124e0 <HAL_TIM_OnePulse_ConfigChannel+0x19c>
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	2201      	movs	r2, #1
 8012374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    htim->State = HAL_TIM_STATE_BUSY;
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	2202      	movs	r2, #2
 801237c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Extract the Output compare configuration from sConfig structure */
    temp1.OCMode = sConfig->OCMode;
 8012380:	68bb      	ldr	r3, [r7, #8]
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	613b      	str	r3, [r7, #16]
    temp1.Pulse = sConfig->Pulse;
 8012386:	68bb      	ldr	r3, [r7, #8]
 8012388:	685b      	ldr	r3, [r3, #4]
 801238a:	617b      	str	r3, [r7, #20]
    temp1.OCPolarity = sConfig->OCPolarity;
 801238c:	68bb      	ldr	r3, [r7, #8]
 801238e:	689b      	ldr	r3, [r3, #8]
 8012390:	61bb      	str	r3, [r7, #24]
    temp1.OCNPolarity = sConfig->OCNPolarity;
 8012392:	68bb      	ldr	r3, [r7, #8]
 8012394:	68db      	ldr	r3, [r3, #12]
 8012396:	61fb      	str	r3, [r7, #28]
    temp1.OCIdleState = sConfig->OCIdleState;
 8012398:	68bb      	ldr	r3, [r7, #8]
 801239a:	691b      	ldr	r3, [r3, #16]
 801239c:	627b      	str	r3, [r7, #36]	@ 0x24
    temp1.OCNIdleState = sConfig->OCNIdleState;
 801239e:	68bb      	ldr	r3, [r7, #8]
 80123a0:	695b      	ldr	r3, [r3, #20]
 80123a2:	62bb      	str	r3, [r7, #40]	@ 0x28

    switch (OutputChannel)
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d003      	beq.n	80123b2 <HAL_TIM_OnePulse_ConfigChannel+0x6e>
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	2b04      	cmp	r3, #4
 80123ae:	d009      	beq.n	80123c4 <HAL_TIM_OnePulse_ConfigChannel+0x80>
 80123b0:	e011      	b.n	80123d6 <HAL_TIM_OnePulse_ConfigChannel+0x92>
    {
      case TIM_CHANNEL_1:
      {
        assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

        TIM_OC1_SetConfig(htim->Instance, &temp1);
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	f107 0210 	add.w	r2, r7, #16
 80123ba:	4611      	mov	r1, r2
 80123bc:	4618      	mov	r0, r3
 80123be:	f001 fa3b 	bl	8013838 <TIM_OC1_SetConfig>
        break;
 80123c2:	e00c      	b.n	80123de <HAL_TIM_OnePulse_ConfigChannel+0x9a>

      case TIM_CHANNEL_2:
      {
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

        TIM_OC2_SetConfig(htim->Instance, &temp1);
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	f107 0210 	add.w	r2, r7, #16
 80123cc:	4611      	mov	r1, r2
 80123ce:	4618      	mov	r0, r3
 80123d0:	f001 fa98 	bl	8013904 <TIM_OC2_SetConfig>
        break;
 80123d4:	e003      	b.n	80123de <HAL_TIM_OnePulse_ConfigChannel+0x9a>
      }

      default:
        status = HAL_ERROR;
 80123d6:	2301      	movs	r3, #1
 80123d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        break;
 80123dc:	bf00      	nop
    }

    if (status == HAL_OK)
 80123de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d170      	bne.n	80124c8 <HAL_TIM_OnePulse_ConfigChannel+0x184>
    {
      switch (InputChannel)
 80123e6:	683b      	ldr	r3, [r7, #0]
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d003      	beq.n	80123f4 <HAL_TIM_OnePulse_ConfigChannel+0xb0>
 80123ec:	683b      	ldr	r3, [r7, #0]
 80123ee:	2b04      	cmp	r3, #4
 80123f0:	d033      	beq.n	801245a <HAL_TIM_OnePulse_ConfigChannel+0x116>
 80123f2:	e065      	b.n	80124c0 <HAL_TIM_OnePulse_ConfigChannel+0x17c>
      {
        case TIM_CHANNEL_1:
        {
          assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

          TIM_TI1_SetConfig(htim->Instance, sConfig->ICPolarity,
 80123f4:	68fb      	ldr	r3, [r7, #12]
 80123f6:	6818      	ldr	r0, [r3, #0]
 80123f8:	68bb      	ldr	r3, [r7, #8]
 80123fa:	6999      	ldr	r1, [r3, #24]
 80123fc:	68bb      	ldr	r3, [r7, #8]
 80123fe:	69da      	ldr	r2, [r3, #28]
 8012400:	68bb      	ldr	r3, [r7, #8]
 8012402:	6a1b      	ldr	r3, [r3, #32]
 8012404:	f001 fc35 	bl	8013c72 <TIM_TI1_SetConfig>
                            sConfig->ICSelection, sConfig->ICFilter);

          /* Reset the IC1PSC Bits */
          htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	699a      	ldr	r2, [r3, #24]
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	f022 020c 	bic.w	r2, r2, #12
 8012416:	619a      	str	r2, [r3, #24]

          /* Select the Trigger source */
          htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	689a      	ldr	r2, [r3, #8]
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8012426:	609a      	str	r2, [r3, #8]
          htim->Instance->SMCR |= TIM_TS_TI1FP1;
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	689a      	ldr	r2, [r3, #8]
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8012436:	609a      	str	r2, [r3, #8]

          /* Select the Slave Mode */
          htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	689a      	ldr	r2, [r3, #8]
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	f022 0207 	bic.w	r2, r2, #7
 8012446:	609a      	str	r2, [r3, #8]
          htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	689a      	ldr	r2, [r3, #8]
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	f042 0206 	orr.w	r2, r2, #6
 8012456:	609a      	str	r2, [r3, #8]
          break;
 8012458:	e036      	b.n	80124c8 <HAL_TIM_OnePulse_ConfigChannel+0x184>

        case TIM_CHANNEL_2:
        {
          assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

          TIM_TI2_SetConfig(htim->Instance, sConfig->ICPolarity,
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	6818      	ldr	r0, [r3, #0]
 801245e:	68bb      	ldr	r3, [r7, #8]
 8012460:	6999      	ldr	r1, [r3, #24]
 8012462:	68bb      	ldr	r3, [r7, #8]
 8012464:	69da      	ldr	r2, [r3, #28]
 8012466:	68bb      	ldr	r3, [r7, #8]
 8012468:	6a1b      	ldr	r3, [r3, #32]
 801246a:	f001 fc98 	bl	8013d9e <TIM_TI2_SetConfig>
                            sConfig->ICSelection, sConfig->ICFilter);

          /* Reset the IC2PSC Bits */
          htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	699a      	ldr	r2, [r3, #24]
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 801247c:	619a      	str	r2, [r3, #24]

          /* Select the Trigger source */
          htim->Instance->SMCR &= ~TIM_SMCR_TS;
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	689a      	ldr	r2, [r3, #8]
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 801248c:	609a      	str	r2, [r3, #8]
          htim->Instance->SMCR |= TIM_TS_TI2FP2;
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	689a      	ldr	r2, [r3, #8]
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 801249c:	609a      	str	r2, [r3, #8]

          /* Select the Slave Mode */
          htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	689a      	ldr	r2, [r3, #8]
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	681b      	ldr	r3, [r3, #0]
 80124a8:	f022 0207 	bic.w	r2, r2, #7
 80124ac:	609a      	str	r2, [r3, #8]
          htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	689a      	ldr	r2, [r3, #8]
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	f042 0206 	orr.w	r2, r2, #6
 80124bc:	609a      	str	r2, [r3, #8]
          break;
 80124be:	e003      	b.n	80124c8 <HAL_TIM_OnePulse_ConfigChannel+0x184>
        }

        default:
          status = HAL_ERROR;
 80124c0:	2301      	movs	r3, #1
 80124c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 80124c6:	bf00      	nop
      }
    }

    htim->State = HAL_TIM_STATE_READY;
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	2201      	movs	r2, #1
 80124cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    __HAL_UNLOCK(htim);
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	2200      	movs	r2, #0
 80124d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return status;
 80124d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80124dc:	e000      	b.n	80124e0 <HAL_TIM_OnePulse_ConfigChannel+0x19c>
  }
  else
  {
    return HAL_ERROR;
 80124de:	2301      	movs	r3, #1
  }
}
 80124e0:	4618      	mov	r0, r3
 80124e2:	3730      	adds	r7, #48	@ 0x30
 80124e4:	46bd      	mov	sp, r7
 80124e6:	bd80      	pop	{r7, pc}

080124e8 <HAL_TIM_DMABurst_WriteStart>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_WriteStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress,
                                              uint32_t BurstRequestSrc, const uint32_t *BurstBuffer,
                                              uint32_t  BurstLength)
{
 80124e8:	b580      	push	{r7, lr}
 80124ea:	b088      	sub	sp, #32
 80124ec:	af02      	add	r7, sp, #8
 80124ee:	60f8      	str	r0, [r7, #12]
 80124f0:	60b9      	str	r1, [r7, #8]
 80124f2:	607a      	str	r2, [r7, #4]
 80124f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;

  status = HAL_TIM_DMABurst_MultiWriteStart(htim, BurstBaseAddress, BurstRequestSrc, BurstBuffer, BurstLength,
                                            ((BurstLength) >> 8U) + 1U);
 80124f6:	6a3b      	ldr	r3, [r7, #32]
 80124f8:	0a1b      	lsrs	r3, r3, #8
  status = HAL_TIM_DMABurst_MultiWriteStart(htim, BurstBaseAddress, BurstRequestSrc, BurstBuffer, BurstLength,
 80124fa:	3301      	adds	r3, #1
 80124fc:	9301      	str	r3, [sp, #4]
 80124fe:	6a3b      	ldr	r3, [r7, #32]
 8012500:	9300      	str	r3, [sp, #0]
 8012502:	683b      	ldr	r3, [r7, #0]
 8012504:	687a      	ldr	r2, [r7, #4]
 8012506:	68b9      	ldr	r1, [r7, #8]
 8012508:	68f8      	ldr	r0, [r7, #12]
 801250a:	f000 f807 	bl	801251c <HAL_TIM_DMABurst_MultiWriteStart>
 801250e:	4603      	mov	r3, r0
 8012510:	75fb      	strb	r3, [r7, #23]



  return status;
 8012512:	7dfb      	ldrb	r3, [r7, #23]
}
 8012514:	4618      	mov	r0, r3
 8012516:	3718      	adds	r7, #24
 8012518:	46bd      	mov	sp, r7
 801251a:	bd80      	pop	{r7, pc}

0801251c <HAL_TIM_DMABurst_MultiWriteStart>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_MultiWriteStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress,
                                                   uint32_t BurstRequestSrc, const uint32_t *BurstBuffer,
                                                   uint32_t  BurstLength,  uint32_t  DataLength)
{
 801251c:	b580      	push	{r7, lr}
 801251e:	b086      	sub	sp, #24
 8012520:	af00      	add	r7, sp, #0
 8012522:	60f8      	str	r0, [r7, #12]
 8012524:	60b9      	str	r1, [r7, #8]
 8012526:	607a      	str	r2, [r7, #4]
 8012528:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801252a:	2300      	movs	r3, #0
 801252c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_DMA_BASE(BurstBaseAddress));
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
  assert_param(IS_TIM_DMA_LENGTH(BurstLength));
  assert_param(IS_TIM_DMA_DATA_LENGTH(DataLength));

  if (htim->DMABurstState == HAL_DMA_BURST_STATE_BUSY)
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8012534:	b2db      	uxtb	r3, r3
 8012536:	2b02      	cmp	r3, #2
 8012538:	d101      	bne.n	801253e <HAL_TIM_DMABurst_MultiWriteStart+0x22>
  {
    return HAL_BUSY;
 801253a:	2302      	movs	r3, #2
 801253c:	e12b      	b.n	8012796 <HAL_TIM_DMABurst_MultiWriteStart+0x27a>
  }
  else if (htim->DMABurstState == HAL_DMA_BURST_STATE_READY)
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8012544:	b2db      	uxtb	r3, r3
 8012546:	2b01      	cmp	r3, #1
 8012548:	d10b      	bne.n	8012562 <HAL_TIM_DMABurst_MultiWriteStart+0x46>
  {
    if ((BurstBuffer == NULL) && (BurstLength > 0U))
 801254a:	683b      	ldr	r3, [r7, #0]
 801254c:	2b00      	cmp	r3, #0
 801254e:	d104      	bne.n	801255a <HAL_TIM_DMABurst_MultiWriteStart+0x3e>
 8012550:	6a3b      	ldr	r3, [r7, #32]
 8012552:	2b00      	cmp	r3, #0
 8012554:	d001      	beq.n	801255a <HAL_TIM_DMABurst_MultiWriteStart+0x3e>
    {
      return HAL_ERROR;
 8012556:	2301      	movs	r3, #1
 8012558:	e11d      	b.n	8012796 <HAL_TIM_DMABurst_MultiWriteStart+0x27a>
    }
    else
    {
      htim->DMABurstState = HAL_DMA_BURST_STATE_BUSY;
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	2202      	movs	r2, #2
 801255e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
  else
  {
    /* nothing to do */
  }

  switch (BurstRequestSrc)
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012568:	f000 80d8 	beq.w	801271c <HAL_TIM_DMABurst_MultiWriteStart+0x200>
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012572:	f200 80ee 	bhi.w	8012752 <HAL_TIM_DMABurst_MultiWriteStart+0x236>
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801257c:	f000 80b3 	beq.w	80126e6 <HAL_TIM_DMABurst_MultiWriteStart+0x1ca>
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012586:	f200 80e4 	bhi.w	8012752 <HAL_TIM_DMABurst_MultiWriteStart+0x236>
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012590:	f000 808e 	beq.w	80126b0 <HAL_TIM_DMABurst_MultiWriteStart+0x194>
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801259a:	f200 80da 	bhi.w	8012752 <HAL_TIM_DMABurst_MultiWriteStart+0x236>
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80125a4:	d069      	beq.n	801267a <HAL_TIM_DMABurst_MultiWriteStart+0x15e>
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80125ac:	f200 80d1 	bhi.w	8012752 <HAL_TIM_DMABurst_MultiWriteStart+0x236>
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80125b6:	d045      	beq.n	8012644 <HAL_TIM_DMABurst_MultiWriteStart+0x128>
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80125be:	f200 80c8 	bhi.w	8012752 <HAL_TIM_DMABurst_MultiWriteStart+0x236>
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80125c8:	d004      	beq.n	80125d4 <HAL_TIM_DMABurst_MultiWriteStart+0xb8>
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80125d0:	d01c      	beq.n	801260c <HAL_TIM_DMABurst_MultiWriteStart+0xf0>
 80125d2:	e0be      	b.n	8012752 <HAL_TIM_DMABurst_MultiWriteStart+0x236>
  {
    case TIM_DMA_UPDATE:
    {
      /* Set the DMA Period elapsed callbacks */
      htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	6a1b      	ldr	r3, [r3, #32]
 80125d8:	4a71      	ldr	r2, [pc, #452]	@ (80127a0 <HAL_TIM_DMABurst_MultiWriteStart+0x284>)
 80125da:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	6a1b      	ldr	r3, [r3, #32]
 80125e0:	4a70      	ldr	r2, [pc, #448]	@ (80127a4 <HAL_TIM_DMABurst_MultiWriteStart+0x288>)
 80125e2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	6a1b      	ldr	r3, [r3, #32]
 80125e8:	4a6f      	ldr	r2, [pc, #444]	@ (80127a8 <HAL_TIM_DMABurst_MultiWriteStart+0x28c>)
 80125ea:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)BurstBuffer,
 80125ec:	68fb      	ldr	r3, [r7, #12]
 80125ee:	6a18      	ldr	r0, [r3, #32]
 80125f0:	6839      	ldr	r1, [r7, #0]
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	334c      	adds	r3, #76	@ 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)BurstBuffer,
 80125f8:	461a      	mov	r2, r3
 80125fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125fc:	f7f3 ff75 	bl	80064ea <HAL_DMA_Start_IT>
 8012600:	4603      	mov	r3, r0
 8012602:	2b00      	cmp	r3, #0
 8012604:	f000 80a8 	beq.w	8012758 <HAL_TIM_DMABurst_MultiWriteStart+0x23c>
      {
        /* Return error status */
        return HAL_ERROR;
 8012608:	2301      	movs	r3, #1
 801260a:	e0c4      	b.n	8012796 <HAL_TIM_DMABurst_MultiWriteStart+0x27a>
      break;
    }
    case TIM_DMA_CC1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012610:	4a66      	ldr	r2, [pc, #408]	@ (80127ac <HAL_TIM_DMABurst_MultiWriteStart+0x290>)
 8012612:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8012614:	68fb      	ldr	r3, [r7, #12]
 8012616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012618:	4a65      	ldr	r2, [pc, #404]	@ (80127b0 <HAL_TIM_DMABurst_MultiWriteStart+0x294>)
 801261a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012620:	4a61      	ldr	r2, [pc, #388]	@ (80127a8 <HAL_TIM_DMABurst_MultiWriteStart+0x28c>)
 8012622:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)BurstBuffer,
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8012628:	6839      	ldr	r1, [r7, #0]
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	334c      	adds	r3, #76	@ 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)BurstBuffer,
 8012630:	461a      	mov	r2, r3
 8012632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012634:	f7f3 ff59 	bl	80064ea <HAL_DMA_Start_IT>
 8012638:	4603      	mov	r3, r0
 801263a:	2b00      	cmp	r3, #0
 801263c:	f000 808e 	beq.w	801275c <HAL_TIM_DMABurst_MultiWriteStart+0x240>
      {
        /* Return error status */
        return HAL_ERROR;
 8012640:	2301      	movs	r3, #1
 8012642:	e0a8      	b.n	8012796 <HAL_TIM_DMABurst_MultiWriteStart+0x27a>
      break;
    }
    case TIM_DMA_CC2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012648:	4a58      	ldr	r2, [pc, #352]	@ (80127ac <HAL_TIM_DMABurst_MultiWriteStart+0x290>)
 801264a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012650:	4a57      	ldr	r2, [pc, #348]	@ (80127b0 <HAL_TIM_DMABurst_MultiWriteStart+0x294>)
 8012652:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012658:	4a53      	ldr	r2, [pc, #332]	@ (80127a8 <HAL_TIM_DMABurst_MultiWriteStart+0x28c>)
 801265a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)BurstBuffer,
 801265c:	68fb      	ldr	r3, [r7, #12]
 801265e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8012660:	6839      	ldr	r1, [r7, #0]
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	334c      	adds	r3, #76	@ 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)BurstBuffer,
 8012668:	461a      	mov	r2, r3
 801266a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801266c:	f7f3 ff3d 	bl	80064ea <HAL_DMA_Start_IT>
 8012670:	4603      	mov	r3, r0
 8012672:	2b00      	cmp	r3, #0
 8012674:	d074      	beq.n	8012760 <HAL_TIM_DMABurst_MultiWriteStart+0x244>
      {
        /* Return error status */
        return HAL_ERROR;
 8012676:	2301      	movs	r3, #1
 8012678:	e08d      	b.n	8012796 <HAL_TIM_DMABurst_MultiWriteStart+0x27a>
      break;
    }
    case TIM_DMA_CC3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801267e:	4a4b      	ldr	r2, [pc, #300]	@ (80127ac <HAL_TIM_DMABurst_MultiWriteStart+0x290>)
 8012680:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012686:	4a4a      	ldr	r2, [pc, #296]	@ (80127b0 <HAL_TIM_DMABurst_MultiWriteStart+0x294>)
 8012688:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801268e:	4a46      	ldr	r2, [pc, #280]	@ (80127a8 <HAL_TIM_DMABurst_MultiWriteStart+0x28c>)
 8012690:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)BurstBuffer,
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8012696:	6839      	ldr	r1, [r7, #0]
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	334c      	adds	r3, #76	@ 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)BurstBuffer,
 801269e:	461a      	mov	r2, r3
 80126a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126a2:	f7f3 ff22 	bl	80064ea <HAL_DMA_Start_IT>
 80126a6:	4603      	mov	r3, r0
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d05b      	beq.n	8012764 <HAL_TIM_DMABurst_MultiWriteStart+0x248>
      {
        /* Return error status */
        return HAL_ERROR;
 80126ac:	2301      	movs	r3, #1
 80126ae:	e072      	b.n	8012796 <HAL_TIM_DMABurst_MultiWriteStart+0x27a>
      break;
    }
    case TIM_DMA_CC4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80126b4:	4a3d      	ldr	r2, [pc, #244]	@ (80127ac <HAL_TIM_DMABurst_MultiWriteStart+0x290>)
 80126b6:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80126bc:	4a3c      	ldr	r2, [pc, #240]	@ (80127b0 <HAL_TIM_DMABurst_MultiWriteStart+0x294>)
 80126be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80126c4:	4a38      	ldr	r2, [pc, #224]	@ (80127a8 <HAL_TIM_DMABurst_MultiWriteStart+0x28c>)
 80126c6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)BurstBuffer,
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80126cc:	6839      	ldr	r1, [r7, #0]
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	334c      	adds	r3, #76	@ 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)BurstBuffer,
 80126d4:	461a      	mov	r2, r3
 80126d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126d8:	f7f3 ff07 	bl	80064ea <HAL_DMA_Start_IT>
 80126dc:	4603      	mov	r3, r0
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d042      	beq.n	8012768 <HAL_TIM_DMABurst_MultiWriteStart+0x24c>
      {
        /* Return error status */
        return HAL_ERROR;
 80126e2:	2301      	movs	r3, #1
 80126e4:	e057      	b.n	8012796 <HAL_TIM_DMABurst_MultiWriteStart+0x27a>
      break;
    }
    case TIM_DMA_COM:
    {
      /* Set the DMA commutation callbacks */
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback =  TIMEx_DMACommutationCplt;
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80126ea:	4a32      	ldr	r2, [pc, #200]	@ (80127b4 <HAL_TIM_DMABurst_MultiWriteStart+0x298>)
 80126ec:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferHalfCpltCallback =  TIMEx_DMACommutationHalfCplt;
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80126f2:	4a31      	ldr	r2, [pc, #196]	@ (80127b8 <HAL_TIM_DMABurst_MultiWriteStart+0x29c>)
 80126f4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError ;
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80126fa:	4a2b      	ldr	r2, [pc, #172]	@ (80127a8 <HAL_TIM_DMABurst_MultiWriteStart+0x28c>)
 80126fc:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)BurstBuffer,
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8012702:	6839      	ldr	r1, [r7, #0]
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	681b      	ldr	r3, [r3, #0]
 8012708:	334c      	adds	r3, #76	@ 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)BurstBuffer,
 801270a:	461a      	mov	r2, r3
 801270c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801270e:	f7f3 feec 	bl	80064ea <HAL_DMA_Start_IT>
 8012712:	4603      	mov	r3, r0
 8012714:	2b00      	cmp	r3, #0
 8012716:	d029      	beq.n	801276c <HAL_TIM_DMABurst_MultiWriteStart+0x250>
      {
        /* Return error status */
        return HAL_ERROR;
 8012718:	2301      	movs	r3, #1
 801271a:	e03c      	b.n	8012796 <HAL_TIM_DMABurst_MultiWriteStart+0x27a>
      break;
    }
    case TIM_DMA_TRIGGER:
    {
      /* Set the DMA trigger callbacks */
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012720:	4a26      	ldr	r2, [pc, #152]	@ (80127bc <HAL_TIM_DMABurst_MultiWriteStart+0x2a0>)
 8012722:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferHalfCpltCallback = TIM_DMATriggerHalfCplt;
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012728:	4a25      	ldr	r2, [pc, #148]	@ (80127c0 <HAL_TIM_DMABurst_MultiWriteStart+0x2a4>)
 801272a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012730:	4a1d      	ldr	r2, [pc, #116]	@ (80127a8 <HAL_TIM_DMABurst_MultiWriteStart+0x28c>)
 8012732:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)BurstBuffer,
 8012734:	68fb      	ldr	r3, [r7, #12]
 8012736:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8012738:	6839      	ldr	r1, [r7, #0]
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	681b      	ldr	r3, [r3, #0]
 801273e:	334c      	adds	r3, #76	@ 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)BurstBuffer,
 8012740:	461a      	mov	r2, r3
 8012742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012744:	f7f3 fed1 	bl	80064ea <HAL_DMA_Start_IT>
 8012748:	4603      	mov	r3, r0
 801274a:	2b00      	cmp	r3, #0
 801274c:	d010      	beq.n	8012770 <HAL_TIM_DMABurst_MultiWriteStart+0x254>
      {
        /* Return error status */
        return HAL_ERROR;
 801274e:	2301      	movs	r3, #1
 8012750:	e021      	b.n	8012796 <HAL_TIM_DMABurst_MultiWriteStart+0x27a>
      }
      break;
    }
    default:
      status = HAL_ERROR;
 8012752:	2301      	movs	r3, #1
 8012754:	75fb      	strb	r3, [r7, #23]
      break;
 8012756:	e00c      	b.n	8012772 <HAL_TIM_DMABurst_MultiWriteStart+0x256>
      break;
 8012758:	bf00      	nop
 801275a:	e00a      	b.n	8012772 <HAL_TIM_DMABurst_MultiWriteStart+0x256>
      break;
 801275c:	bf00      	nop
 801275e:	e008      	b.n	8012772 <HAL_TIM_DMABurst_MultiWriteStart+0x256>
      break;
 8012760:	bf00      	nop
 8012762:	e006      	b.n	8012772 <HAL_TIM_DMABurst_MultiWriteStart+0x256>
      break;
 8012764:	bf00      	nop
 8012766:	e004      	b.n	8012772 <HAL_TIM_DMABurst_MultiWriteStart+0x256>
      break;
 8012768:	bf00      	nop
 801276a:	e002      	b.n	8012772 <HAL_TIM_DMABurst_MultiWriteStart+0x256>
      break;
 801276c:	bf00      	nop
 801276e:	e000      	b.n	8012772 <HAL_TIM_DMABurst_MultiWriteStart+0x256>
      break;
 8012770:	bf00      	nop
  }

  if (status == HAL_OK)
 8012772:	7dfb      	ldrb	r3, [r7, #23]
 8012774:	2b00      	cmp	r3, #0
 8012776:	d10d      	bne.n	8012794 <HAL_TIM_DMABurst_MultiWriteStart+0x278>
  {
    /* Configure the DMA Burst Mode */
    htim->Instance->DCR = (BurstBaseAddress | BurstLength);
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	68b9      	ldr	r1, [r7, #8]
 801277e:	6a3a      	ldr	r2, [r7, #32]
 8012780:	430a      	orrs	r2, r1
 8012782:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable the TIM DMA Request */
    __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	68d9      	ldr	r1, [r3, #12]
 801278a:	68fb      	ldr	r3, [r7, #12]
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	687a      	ldr	r2, [r7, #4]
 8012790:	430a      	orrs	r2, r1
 8012792:	60da      	str	r2, [r3, #12]
  }

  /* Return function status */
  return status;
 8012794:	7dfb      	ldrb	r3, [r7, #23]
}
 8012796:	4618      	mov	r0, r3
 8012798:	3718      	adds	r7, #24
 801279a:	46bd      	mov	sp, r7
 801279c:	bd80      	pop	{r7, pc}
 801279e:	bf00      	nop
 80127a0:	0801368d 	.word	0x0801368d
 80127a4:	080136bb 	.word	0x080136bb
 80127a8:	080133bb 	.word	0x080133bb
 80127ac:	0801344d 	.word	0x0801344d
 80127b0:	080134f5 	.word	0x080134f5
 80127b4:	08016135 	.word	0x08016135
 80127b8:	08016159 	.word	0x08016159
 80127bc:	080136d7 	.word	0x080136d7
 80127c0:	08013705 	.word	0x08013705

080127c4 <HAL_TIM_DMABurst_WriteStop>:
  * @param  htim TIM handle
  * @param  BurstRequestSrc TIM DMA Request sources to disable
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_WriteStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc)
{
 80127c4:	b580      	push	{r7, lr}
 80127c6:	b084      	sub	sp, #16
 80127c8:	af00      	add	r7, sp, #0
 80127ca:	6078      	str	r0, [r7, #4]
 80127cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80127ce:	2300      	movs	r3, #0
 80127d0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));

  /* Abort the DMA transfer (at least disable the DMA stream) */
  switch (BurstRequestSrc)
 80127d2:	683b      	ldr	r3, [r7, #0]
 80127d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80127d8:	d050      	beq.n	801287c <HAL_TIM_DMABurst_WriteStop+0xb8>
 80127da:	683b      	ldr	r3, [r7, #0]
 80127dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80127e0:	d852      	bhi.n	8012888 <HAL_TIM_DMABurst_WriteStop+0xc4>
 80127e2:	683b      	ldr	r3, [r7, #0]
 80127e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80127e8:	d042      	beq.n	8012870 <HAL_TIM_DMABurst_WriteStop+0xac>
 80127ea:	683b      	ldr	r3, [r7, #0]
 80127ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80127f0:	d84a      	bhi.n	8012888 <HAL_TIM_DMABurst_WriteStop+0xc4>
 80127f2:	683b      	ldr	r3, [r7, #0]
 80127f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80127f8:	d034      	beq.n	8012864 <HAL_TIM_DMABurst_WriteStop+0xa0>
 80127fa:	683b      	ldr	r3, [r7, #0]
 80127fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012800:	d842      	bhi.n	8012888 <HAL_TIM_DMABurst_WriteStop+0xc4>
 8012802:	683b      	ldr	r3, [r7, #0]
 8012804:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012808:	d026      	beq.n	8012858 <HAL_TIM_DMABurst_WriteStop+0x94>
 801280a:	683b      	ldr	r3, [r7, #0]
 801280c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012810:	d83a      	bhi.n	8012888 <HAL_TIM_DMABurst_WriteStop+0xc4>
 8012812:	683b      	ldr	r3, [r7, #0]
 8012814:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012818:	d018      	beq.n	801284c <HAL_TIM_DMABurst_WriteStop+0x88>
 801281a:	683b      	ldr	r3, [r7, #0]
 801281c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012820:	d832      	bhi.n	8012888 <HAL_TIM_DMABurst_WriteStop+0xc4>
 8012822:	683b      	ldr	r3, [r7, #0]
 8012824:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012828:	d004      	beq.n	8012834 <HAL_TIM_DMABurst_WriteStop+0x70>
 801282a:	683b      	ldr	r3, [r7, #0]
 801282c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012830:	d006      	beq.n	8012840 <HAL_TIM_DMABurst_WriteStop+0x7c>
 8012832:	e029      	b.n	8012888 <HAL_TIM_DMABurst_WriteStop+0xc4>
  {
    case TIM_DMA_UPDATE:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	6a1b      	ldr	r3, [r3, #32]
 8012838:	4618      	mov	r0, r3
 801283a:	f7f3 ff1e 	bl	800667a <HAL_DMA_Abort_IT>
      break;
 801283e:	e026      	b.n	801288e <HAL_TIM_DMABurst_WriteStop+0xca>
    }
    case TIM_DMA_CC1:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012844:	4618      	mov	r0, r3
 8012846:	f7f3 ff18 	bl	800667a <HAL_DMA_Abort_IT>
      break;
 801284a:	e020      	b.n	801288e <HAL_TIM_DMABurst_WriteStop+0xca>
    }
    case TIM_DMA_CC2:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012850:	4618      	mov	r0, r3
 8012852:	f7f3 ff12 	bl	800667a <HAL_DMA_Abort_IT>
      break;
 8012856:	e01a      	b.n	801288e <HAL_TIM_DMABurst_WriteStop+0xca>
    }
    case TIM_DMA_CC3:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801285c:	4618      	mov	r0, r3
 801285e:	f7f3 ff0c 	bl	800667a <HAL_DMA_Abort_IT>
      break;
 8012862:	e014      	b.n	801288e <HAL_TIM_DMABurst_WriteStop+0xca>
    }
    case TIM_DMA_CC4:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012868:	4618      	mov	r0, r3
 801286a:	f7f3 ff06 	bl	800667a <HAL_DMA_Abort_IT>
      break;
 801286e:	e00e      	b.n	801288e <HAL_TIM_DMABurst_WriteStop+0xca>
    }
    case TIM_DMA_COM:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_COMMUTATION]);
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012874:	4618      	mov	r0, r3
 8012876:	f7f3 ff00 	bl	800667a <HAL_DMA_Abort_IT>
      break;
 801287a:	e008      	b.n	801288e <HAL_TIM_DMABurst_WriteStop+0xca>
    }
    case TIM_DMA_TRIGGER:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_TRIGGER]);
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012880:	4618      	mov	r0, r3
 8012882:	f7f3 fefa 	bl	800667a <HAL_DMA_Abort_IT>
      break;
 8012886:	e002      	b.n	801288e <HAL_TIM_DMABurst_WriteStop+0xca>
    }
    default:
      status = HAL_ERROR;
 8012888:	2301      	movs	r3, #1
 801288a:	73fb      	strb	r3, [r7, #15]
      break;
 801288c:	bf00      	nop
  }

  if (status == HAL_OK)
 801288e:	7bfb      	ldrb	r3, [r7, #15]
 8012890:	2b00      	cmp	r3, #0
 8012892:	d10c      	bne.n	80128ae <HAL_TIM_DMABurst_WriteStop+0xea>
  {
    /* Disable the TIM Update DMA request */
    __HAL_TIM_DISABLE_DMA(htim, BurstRequestSrc);
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	68d9      	ldr	r1, [r3, #12]
 801289a:	683b      	ldr	r3, [r7, #0]
 801289c:	43da      	mvns	r2, r3
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	400a      	ands	r2, r1
 80128a4:	60da      	str	r2, [r3, #12]

    /* Change the DMA burst operation state */
    htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	2201      	movs	r2, #1
 80128aa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
  }

  /* Return function status */
  return status;
 80128ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80128b0:	4618      	mov	r0, r3
 80128b2:	3710      	adds	r7, #16
 80128b4:	46bd      	mov	sp, r7
 80128b6:	bd80      	pop	{r7, pc}

080128b8 <HAL_TIM_DMABurst_ReadStart>:
  * @note   This function should be used only when BurstLength is equal to DMA data transfer length.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_ReadStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress,
                                             uint32_t BurstRequestSrc, uint32_t  *BurstBuffer, uint32_t  BurstLength)
{
 80128b8:	b580      	push	{r7, lr}
 80128ba:	b088      	sub	sp, #32
 80128bc:	af02      	add	r7, sp, #8
 80128be:	60f8      	str	r0, [r7, #12]
 80128c0:	60b9      	str	r1, [r7, #8]
 80128c2:	607a      	str	r2, [r7, #4]
 80128c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;

  status = HAL_TIM_DMABurst_MultiReadStart(htim, BurstBaseAddress, BurstRequestSrc, BurstBuffer, BurstLength,
                                           ((BurstLength) >> 8U) + 1U);
 80128c6:	6a3b      	ldr	r3, [r7, #32]
 80128c8:	0a1b      	lsrs	r3, r3, #8
  status = HAL_TIM_DMABurst_MultiReadStart(htim, BurstBaseAddress, BurstRequestSrc, BurstBuffer, BurstLength,
 80128ca:	3301      	adds	r3, #1
 80128cc:	9301      	str	r3, [sp, #4]
 80128ce:	6a3b      	ldr	r3, [r7, #32]
 80128d0:	9300      	str	r3, [sp, #0]
 80128d2:	683b      	ldr	r3, [r7, #0]
 80128d4:	687a      	ldr	r2, [r7, #4]
 80128d6:	68b9      	ldr	r1, [r7, #8]
 80128d8:	68f8      	ldr	r0, [r7, #12]
 80128da:	f000 f807 	bl	80128ec <HAL_TIM_DMABurst_MultiReadStart>
 80128de:	4603      	mov	r3, r0
 80128e0:	75fb      	strb	r3, [r7, #23]


  return status;
 80128e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80128e4:	4618      	mov	r0, r3
 80128e6:	3718      	adds	r7, #24
 80128e8:	46bd      	mov	sp, r7
 80128ea:	bd80      	pop	{r7, pc}

080128ec <HAL_TIM_DMABurst_MultiReadStart>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_MultiReadStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress,
                                                  uint32_t BurstRequestSrc, uint32_t  *BurstBuffer,
                                                  uint32_t  BurstLength, uint32_t  DataLength)
{
 80128ec:	b580      	push	{r7, lr}
 80128ee:	b086      	sub	sp, #24
 80128f0:	af00      	add	r7, sp, #0
 80128f2:	60f8      	str	r0, [r7, #12]
 80128f4:	60b9      	str	r1, [r7, #8]
 80128f6:	607a      	str	r2, [r7, #4]
 80128f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80128fa:	2300      	movs	r3, #0
 80128fc:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_DMA_BASE(BurstBaseAddress));
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
  assert_param(IS_TIM_DMA_LENGTH(BurstLength));
  assert_param(IS_TIM_DMA_DATA_LENGTH(DataLength));

  if (htim->DMABurstState == HAL_DMA_BURST_STATE_BUSY)
 80128fe:	68fb      	ldr	r3, [r7, #12]
 8012900:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8012904:	b2db      	uxtb	r3, r3
 8012906:	2b02      	cmp	r3, #2
 8012908:	d101      	bne.n	801290e <HAL_TIM_DMABurst_MultiReadStart+0x22>
  {
    return HAL_BUSY;
 801290a:	2302      	movs	r3, #2
 801290c:	e12b      	b.n	8012b66 <HAL_TIM_DMABurst_MultiReadStart+0x27a>
  }
  else if (htim->DMABurstState == HAL_DMA_BURST_STATE_READY)
 801290e:	68fb      	ldr	r3, [r7, #12]
 8012910:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8012914:	b2db      	uxtb	r3, r3
 8012916:	2b01      	cmp	r3, #1
 8012918:	d10b      	bne.n	8012932 <HAL_TIM_DMABurst_MultiReadStart+0x46>
  {
    if ((BurstBuffer == NULL) && (BurstLength > 0U))
 801291a:	683b      	ldr	r3, [r7, #0]
 801291c:	2b00      	cmp	r3, #0
 801291e:	d104      	bne.n	801292a <HAL_TIM_DMABurst_MultiReadStart+0x3e>
 8012920:	6a3b      	ldr	r3, [r7, #32]
 8012922:	2b00      	cmp	r3, #0
 8012924:	d001      	beq.n	801292a <HAL_TIM_DMABurst_MultiReadStart+0x3e>
    {
      return HAL_ERROR;
 8012926:	2301      	movs	r3, #1
 8012928:	e11d      	b.n	8012b66 <HAL_TIM_DMABurst_MultiReadStart+0x27a>
    }
    else
    {
      htim->DMABurstState = HAL_DMA_BURST_STATE_BUSY;
 801292a:	68fb      	ldr	r3, [r7, #12]
 801292c:	2202      	movs	r2, #2
 801292e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
  }
  else
  {
    /* nothing to do */
  }
  switch (BurstRequestSrc)
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012938:	f000 80d8 	beq.w	8012aec <HAL_TIM_DMABurst_MultiReadStart+0x200>
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012942:	f200 80ee 	bhi.w	8012b22 <HAL_TIM_DMABurst_MultiReadStart+0x236>
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801294c:	f000 80b3 	beq.w	8012ab6 <HAL_TIM_DMABurst_MultiReadStart+0x1ca>
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012956:	f200 80e4 	bhi.w	8012b22 <HAL_TIM_DMABurst_MultiReadStart+0x236>
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012960:	f000 808e 	beq.w	8012a80 <HAL_TIM_DMABurst_MultiReadStart+0x194>
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801296a:	f200 80da 	bhi.w	8012b22 <HAL_TIM_DMABurst_MultiReadStart+0x236>
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012974:	d069      	beq.n	8012a4a <HAL_TIM_DMABurst_MultiReadStart+0x15e>
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801297c:	f200 80d1 	bhi.w	8012b22 <HAL_TIM_DMABurst_MultiReadStart+0x236>
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012986:	d045      	beq.n	8012a14 <HAL_TIM_DMABurst_MultiReadStart+0x128>
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801298e:	f200 80c8 	bhi.w	8012b22 <HAL_TIM_DMABurst_MultiReadStart+0x236>
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012998:	d004      	beq.n	80129a4 <HAL_TIM_DMABurst_MultiReadStart+0xb8>
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80129a0:	d01c      	beq.n	80129dc <HAL_TIM_DMABurst_MultiReadStart+0xf0>
 80129a2:	e0be      	b.n	8012b22 <HAL_TIM_DMABurst_MultiReadStart+0x236>
  {
    case TIM_DMA_UPDATE:
    {
      /* Set the DMA Period elapsed callbacks */
      htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	6a1b      	ldr	r3, [r3, #32]
 80129a8:	4a71      	ldr	r2, [pc, #452]	@ (8012b70 <HAL_TIM_DMABurst_MultiReadStart+0x284>)
 80129aa:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 80129ac:	68fb      	ldr	r3, [r7, #12]
 80129ae:	6a1b      	ldr	r3, [r3, #32]
 80129b0:	4a70      	ldr	r2, [pc, #448]	@ (8012b74 <HAL_TIM_DMABurst_MultiReadStart+0x288>)
 80129b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	6a1b      	ldr	r3, [r3, #32]
 80129b8:	4a6f      	ldr	r2, [pc, #444]	@ (8012b78 <HAL_TIM_DMABurst_MultiReadStart+0x28c>)
 80129ba:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer,
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	6a18      	ldr	r0, [r3, #32]
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	334c      	adds	r3, #76	@ 0x4c
 80129c6:	4619      	mov	r1, r3
 80129c8:	683a      	ldr	r2, [r7, #0]
 80129ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129cc:	f7f3 fd8d 	bl	80064ea <HAL_DMA_Start_IT>
 80129d0:	4603      	mov	r3, r0
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	f000 80a8 	beq.w	8012b28 <HAL_TIM_DMABurst_MultiReadStart+0x23c>
                           DataLength) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80129d8:	2301      	movs	r3, #1
 80129da:	e0c4      	b.n	8012b66 <HAL_TIM_DMABurst_MultiReadStart+0x27a>
      break;
    }
    case TIM_DMA_CC1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80129e0:	4a66      	ldr	r2, [pc, #408]	@ (8012b7c <HAL_TIM_DMABurst_MultiReadStart+0x290>)
 80129e2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80129e8:	4a65      	ldr	r2, [pc, #404]	@ (8012b80 <HAL_TIM_DMABurst_MultiReadStart+0x294>)
 80129ea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80129f0:	4a61      	ldr	r2, [pc, #388]	@ (8012b78 <HAL_TIM_DMABurst_MultiReadStart+0x28c>)
 80129f2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer,
 80129f4:	68fb      	ldr	r3, [r7, #12]
 80129f6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	334c      	adds	r3, #76	@ 0x4c
 80129fe:	4619      	mov	r1, r3
 8012a00:	683a      	ldr	r2, [r7, #0]
 8012a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a04:	f7f3 fd71 	bl	80064ea <HAL_DMA_Start_IT>
 8012a08:	4603      	mov	r3, r0
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	f000 808e 	beq.w	8012b2c <HAL_TIM_DMABurst_MultiReadStart+0x240>
                           DataLength) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8012a10:	2301      	movs	r3, #1
 8012a12:	e0a8      	b.n	8012b66 <HAL_TIM_DMABurst_MultiReadStart+0x27a>
      break;
    }
    case TIM_DMA_CC2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012a18:	4a58      	ldr	r2, [pc, #352]	@ (8012b7c <HAL_TIM_DMABurst_MultiReadStart+0x290>)
 8012a1a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8012a1c:	68fb      	ldr	r3, [r7, #12]
 8012a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012a20:	4a57      	ldr	r2, [pc, #348]	@ (8012b80 <HAL_TIM_DMABurst_MultiReadStart+0x294>)
 8012a22:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8012a24:	68fb      	ldr	r3, [r7, #12]
 8012a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012a28:	4a53      	ldr	r2, [pc, #332]	@ (8012b78 <HAL_TIM_DMABurst_MultiReadStart+0x28c>)
 8012a2a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer,
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	334c      	adds	r3, #76	@ 0x4c
 8012a36:	4619      	mov	r1, r3
 8012a38:	683a      	ldr	r2, [r7, #0]
 8012a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a3c:	f7f3 fd55 	bl	80064ea <HAL_DMA_Start_IT>
 8012a40:	4603      	mov	r3, r0
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d074      	beq.n	8012b30 <HAL_TIM_DMABurst_MultiReadStart+0x244>
                           DataLength) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8012a46:	2301      	movs	r3, #1
 8012a48:	e08d      	b.n	8012b66 <HAL_TIM_DMABurst_MultiReadStart+0x27a>
      break;
    }
    case TIM_DMA_CC3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a4e:	4a4b      	ldr	r2, [pc, #300]	@ (8012b7c <HAL_TIM_DMABurst_MultiReadStart+0x290>)
 8012a50:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a56:	4a4a      	ldr	r2, [pc, #296]	@ (8012b80 <HAL_TIM_DMABurst_MultiReadStart+0x294>)
 8012a58:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a5e:	4a46      	ldr	r2, [pc, #280]	@ (8012b78 <HAL_TIM_DMABurst_MultiReadStart+0x28c>)
 8012a60:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer,
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	681b      	ldr	r3, [r3, #0]
 8012a6a:	334c      	adds	r3, #76	@ 0x4c
 8012a6c:	4619      	mov	r1, r3
 8012a6e:	683a      	ldr	r2, [r7, #0]
 8012a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a72:	f7f3 fd3a 	bl	80064ea <HAL_DMA_Start_IT>
 8012a76:	4603      	mov	r3, r0
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d05b      	beq.n	8012b34 <HAL_TIM_DMABurst_MultiReadStart+0x248>
                           DataLength) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8012a7c:	2301      	movs	r3, #1
 8012a7e:	e072      	b.n	8012b66 <HAL_TIM_DMABurst_MultiReadStart+0x27a>
      break;
    }
    case TIM_DMA_CC4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8012a80:	68fb      	ldr	r3, [r7, #12]
 8012a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012a84:	4a3d      	ldr	r2, [pc, #244]	@ (8012b7c <HAL_TIM_DMABurst_MultiReadStart+0x290>)
 8012a86:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012a8c:	4a3c      	ldr	r2, [pc, #240]	@ (8012b80 <HAL_TIM_DMABurst_MultiReadStart+0x294>)
 8012a8e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012a94:	4a38      	ldr	r2, [pc, #224]	@ (8012b78 <HAL_TIM_DMABurst_MultiReadStart+0x28c>)
 8012a96:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer,
 8012a98:	68fb      	ldr	r3, [r7, #12]
 8012a9a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	334c      	adds	r3, #76	@ 0x4c
 8012aa2:	4619      	mov	r1, r3
 8012aa4:	683a      	ldr	r2, [r7, #0]
 8012aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012aa8:	f7f3 fd1f 	bl	80064ea <HAL_DMA_Start_IT>
 8012aac:	4603      	mov	r3, r0
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d042      	beq.n	8012b38 <HAL_TIM_DMABurst_MultiReadStart+0x24c>
                           DataLength) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8012ab2:	2301      	movs	r3, #1
 8012ab4:	e057      	b.n	8012b66 <HAL_TIM_DMABurst_MultiReadStart+0x27a>
      break;
    }
    case TIM_DMA_COM:
    {
      /* Set the DMA commutation callbacks */
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback =  TIMEx_DMACommutationCplt;
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012aba:	4a32      	ldr	r2, [pc, #200]	@ (8012b84 <HAL_TIM_DMABurst_MultiReadStart+0x298>)
 8012abc:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferHalfCpltCallback =  TIMEx_DMACommutationHalfCplt;
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012ac2:	4a31      	ldr	r2, [pc, #196]	@ (8012b88 <HAL_TIM_DMABurst_MultiReadStart+0x29c>)
 8012ac4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError ;
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012aca:	4a2b      	ldr	r2, [pc, #172]	@ (8012b78 <HAL_TIM_DMABurst_MultiReadStart+0x28c>)
 8012acc:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer,
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	334c      	adds	r3, #76	@ 0x4c
 8012ad8:	4619      	mov	r1, r3
 8012ada:	683a      	ldr	r2, [r7, #0]
 8012adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ade:	f7f3 fd04 	bl	80064ea <HAL_DMA_Start_IT>
 8012ae2:	4603      	mov	r3, r0
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d029      	beq.n	8012b3c <HAL_TIM_DMABurst_MultiReadStart+0x250>
                           DataLength) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8012ae8:	2301      	movs	r3, #1
 8012aea:	e03c      	b.n	8012b66 <HAL_TIM_DMABurst_MultiReadStart+0x27a>
      break;
    }
    case TIM_DMA_TRIGGER:
    {
      /* Set the DMA trigger callbacks */
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012af0:	4a26      	ldr	r2, [pc, #152]	@ (8012b8c <HAL_TIM_DMABurst_MultiReadStart+0x2a0>)
 8012af2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferHalfCpltCallback = TIM_DMATriggerHalfCplt;
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012af8:	4a25      	ldr	r2, [pc, #148]	@ (8012b90 <HAL_TIM_DMABurst_MultiReadStart+0x2a4>)
 8012afa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012b00:	4a1d      	ldr	r2, [pc, #116]	@ (8012b78 <HAL_TIM_DMABurst_MultiReadStart+0x28c>)
 8012b02:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer,
 8012b04:	68fb      	ldr	r3, [r7, #12]
 8012b06:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8012b08:	68fb      	ldr	r3, [r7, #12]
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	334c      	adds	r3, #76	@ 0x4c
 8012b0e:	4619      	mov	r1, r3
 8012b10:	683a      	ldr	r2, [r7, #0]
 8012b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b14:	f7f3 fce9 	bl	80064ea <HAL_DMA_Start_IT>
 8012b18:	4603      	mov	r3, r0
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d010      	beq.n	8012b40 <HAL_TIM_DMABurst_MultiReadStart+0x254>
                           DataLength) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8012b1e:	2301      	movs	r3, #1
 8012b20:	e021      	b.n	8012b66 <HAL_TIM_DMABurst_MultiReadStart+0x27a>
      }
      break;
    }
    default:
      status = HAL_ERROR;
 8012b22:	2301      	movs	r3, #1
 8012b24:	75fb      	strb	r3, [r7, #23]
      break;
 8012b26:	e00c      	b.n	8012b42 <HAL_TIM_DMABurst_MultiReadStart+0x256>
      break;
 8012b28:	bf00      	nop
 8012b2a:	e00a      	b.n	8012b42 <HAL_TIM_DMABurst_MultiReadStart+0x256>
      break;
 8012b2c:	bf00      	nop
 8012b2e:	e008      	b.n	8012b42 <HAL_TIM_DMABurst_MultiReadStart+0x256>
      break;
 8012b30:	bf00      	nop
 8012b32:	e006      	b.n	8012b42 <HAL_TIM_DMABurst_MultiReadStart+0x256>
      break;
 8012b34:	bf00      	nop
 8012b36:	e004      	b.n	8012b42 <HAL_TIM_DMABurst_MultiReadStart+0x256>
      break;
 8012b38:	bf00      	nop
 8012b3a:	e002      	b.n	8012b42 <HAL_TIM_DMABurst_MultiReadStart+0x256>
      break;
 8012b3c:	bf00      	nop
 8012b3e:	e000      	b.n	8012b42 <HAL_TIM_DMABurst_MultiReadStart+0x256>
      break;
 8012b40:	bf00      	nop
  }

  if (status == HAL_OK)
 8012b42:	7dfb      	ldrb	r3, [r7, #23]
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d10d      	bne.n	8012b64 <HAL_TIM_DMABurst_MultiReadStart+0x278>
  {
    /* Configure the DMA Burst Mode */
    htim->Instance->DCR = (BurstBaseAddress | BurstLength);
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	68b9      	ldr	r1, [r7, #8]
 8012b4e:	6a3a      	ldr	r2, [r7, #32]
 8012b50:	430a      	orrs	r2, r1
 8012b52:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Enable the TIM DMA Request */
    __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);
 8012b54:	68fb      	ldr	r3, [r7, #12]
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	68d9      	ldr	r1, [r3, #12]
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	687a      	ldr	r2, [r7, #4]
 8012b60:	430a      	orrs	r2, r1
 8012b62:	60da      	str	r2, [r3, #12]
  }

  /* Return function status */
  return status;
 8012b64:	7dfb      	ldrb	r3, [r7, #23]
}
 8012b66:	4618      	mov	r0, r3
 8012b68:	3718      	adds	r7, #24
 8012b6a:	46bd      	mov	sp, r7
 8012b6c:	bd80      	pop	{r7, pc}
 8012b6e:	bf00      	nop
 8012b70:	0801368d 	.word	0x0801368d
 8012b74:	080136bb 	.word	0x080136bb
 8012b78:	080133bb 	.word	0x080133bb
 8012b7c:	0801355d 	.word	0x0801355d
 8012b80:	08013625 	.word	0x08013625
 8012b84:	08016135 	.word	0x08016135
 8012b88:	08016159 	.word	0x08016159
 8012b8c:	080136d7 	.word	0x080136d7
 8012b90:	08013705 	.word	0x08013705

08012b94 <HAL_TIM_DMABurst_ReadStop>:
  * @param  htim TIM handle
  * @param  BurstRequestSrc TIM DMA Request sources to disable.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_ReadStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc)
{
 8012b94:	b580      	push	{r7, lr}
 8012b96:	b084      	sub	sp, #16
 8012b98:	af00      	add	r7, sp, #0
 8012b9a:	6078      	str	r0, [r7, #4]
 8012b9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012b9e:	2300      	movs	r3, #0
 8012ba0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));

  /* Abort the DMA transfer (at least disable the DMA stream) */
  switch (BurstRequestSrc)
 8012ba2:	683b      	ldr	r3, [r7, #0]
 8012ba4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012ba8:	d050      	beq.n	8012c4c <HAL_TIM_DMABurst_ReadStop+0xb8>
 8012baa:	683b      	ldr	r3, [r7, #0]
 8012bac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012bb0:	d852      	bhi.n	8012c58 <HAL_TIM_DMABurst_ReadStop+0xc4>
 8012bb2:	683b      	ldr	r3, [r7, #0]
 8012bb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012bb8:	d042      	beq.n	8012c40 <HAL_TIM_DMABurst_ReadStop+0xac>
 8012bba:	683b      	ldr	r3, [r7, #0]
 8012bbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012bc0:	d84a      	bhi.n	8012c58 <HAL_TIM_DMABurst_ReadStop+0xc4>
 8012bc2:	683b      	ldr	r3, [r7, #0]
 8012bc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012bc8:	d034      	beq.n	8012c34 <HAL_TIM_DMABurst_ReadStop+0xa0>
 8012bca:	683b      	ldr	r3, [r7, #0]
 8012bcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012bd0:	d842      	bhi.n	8012c58 <HAL_TIM_DMABurst_ReadStop+0xc4>
 8012bd2:	683b      	ldr	r3, [r7, #0]
 8012bd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012bd8:	d026      	beq.n	8012c28 <HAL_TIM_DMABurst_ReadStop+0x94>
 8012bda:	683b      	ldr	r3, [r7, #0]
 8012bdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012be0:	d83a      	bhi.n	8012c58 <HAL_TIM_DMABurst_ReadStop+0xc4>
 8012be2:	683b      	ldr	r3, [r7, #0]
 8012be4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012be8:	d018      	beq.n	8012c1c <HAL_TIM_DMABurst_ReadStop+0x88>
 8012bea:	683b      	ldr	r3, [r7, #0]
 8012bec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012bf0:	d832      	bhi.n	8012c58 <HAL_TIM_DMABurst_ReadStop+0xc4>
 8012bf2:	683b      	ldr	r3, [r7, #0]
 8012bf4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012bf8:	d004      	beq.n	8012c04 <HAL_TIM_DMABurst_ReadStop+0x70>
 8012bfa:	683b      	ldr	r3, [r7, #0]
 8012bfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012c00:	d006      	beq.n	8012c10 <HAL_TIM_DMABurst_ReadStop+0x7c>
 8012c02:	e029      	b.n	8012c58 <HAL_TIM_DMABurst_ReadStop+0xc4>
  {
    case TIM_DMA_UPDATE:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	6a1b      	ldr	r3, [r3, #32]
 8012c08:	4618      	mov	r0, r3
 8012c0a:	f7f3 fd36 	bl	800667a <HAL_DMA_Abort_IT>
      break;
 8012c0e:	e026      	b.n	8012c5e <HAL_TIM_DMABurst_ReadStop+0xca>
    }
    case TIM_DMA_CC1:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c14:	4618      	mov	r0, r3
 8012c16:	f7f3 fd30 	bl	800667a <HAL_DMA_Abort_IT>
      break;
 8012c1a:	e020      	b.n	8012c5e <HAL_TIM_DMABurst_ReadStop+0xca>
    }
    case TIM_DMA_CC2:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012c20:	4618      	mov	r0, r3
 8012c22:	f7f3 fd2a 	bl	800667a <HAL_DMA_Abort_IT>
      break;
 8012c26:	e01a      	b.n	8012c5e <HAL_TIM_DMABurst_ReadStop+0xca>
    }
    case TIM_DMA_CC3:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	f7f3 fd24 	bl	800667a <HAL_DMA_Abort_IT>
      break;
 8012c32:	e014      	b.n	8012c5e <HAL_TIM_DMABurst_ReadStop+0xca>
    }
    case TIM_DMA_CC4:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012c38:	4618      	mov	r0, r3
 8012c3a:	f7f3 fd1e 	bl	800667a <HAL_DMA_Abort_IT>
      break;
 8012c3e:	e00e      	b.n	8012c5e <HAL_TIM_DMABurst_ReadStop+0xca>
    }
    case TIM_DMA_COM:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_COMMUTATION]);
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012c44:	4618      	mov	r0, r3
 8012c46:	f7f3 fd18 	bl	800667a <HAL_DMA_Abort_IT>
      break;
 8012c4a:	e008      	b.n	8012c5e <HAL_TIM_DMABurst_ReadStop+0xca>
    }
    case TIM_DMA_TRIGGER:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_TRIGGER]);
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012c50:	4618      	mov	r0, r3
 8012c52:	f7f3 fd12 	bl	800667a <HAL_DMA_Abort_IT>
      break;
 8012c56:	e002      	b.n	8012c5e <HAL_TIM_DMABurst_ReadStop+0xca>
    }
    default:
      status = HAL_ERROR;
 8012c58:	2301      	movs	r3, #1
 8012c5a:	73fb      	strb	r3, [r7, #15]
      break;
 8012c5c:	bf00      	nop
  }

  if (status == HAL_OK)
 8012c5e:	7bfb      	ldrb	r3, [r7, #15]
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d10c      	bne.n	8012c7e <HAL_TIM_DMABurst_ReadStop+0xea>
  {
    /* Disable the TIM Update DMA request */
    __HAL_TIM_DISABLE_DMA(htim, BurstRequestSrc);
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	68d9      	ldr	r1, [r3, #12]
 8012c6a:	683b      	ldr	r3, [r7, #0]
 8012c6c:	43da      	mvns	r2, r3
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	400a      	ands	r2, r1
 8012c74:	60da      	str	r2, [r3, #12]

    /* Change the DMA burst operation state */
    htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	2201      	movs	r2, #1
 8012c7a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
  }

  /* Return function status */
  return status;
 8012c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c80:	4618      	mov	r0, r3
 8012c82:	3710      	adds	r7, #16
 8012c84:	46bd      	mov	sp, r7
 8012c86:	bd80      	pop	{r7, pc}

08012c88 <HAL_TIM_GenerateEvent>:
  *         supporting a break input.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 8012c88:	b480      	push	{r7}
 8012c8a:	b083      	sub	sp, #12
 8012c8c:	af00      	add	r7, sp, #0
 8012c8e:	6078      	str	r0, [r7, #4]
 8012c90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012c98:	2b01      	cmp	r3, #1
 8012c9a:	d101      	bne.n	8012ca0 <HAL_TIM_GenerateEvent+0x18>
 8012c9c:	2302      	movs	r3, #2
 8012c9e:	e014      	b.n	8012cca <HAL_TIM_GenerateEvent+0x42>
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	2201      	movs	r2, #1
 8012ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	2202      	movs	r2, #2
 8012cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	683a      	ldr	r2, [r7, #0]
 8012cb6:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	2201      	movs	r2, #1
 8012cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	2200      	movs	r2, #0
 8012cc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8012cc8:	2300      	movs	r3, #0
}
 8012cca:	4618      	mov	r0, r3
 8012ccc:	370c      	adds	r7, #12
 8012cce:	46bd      	mov	sp, r7
 8012cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd4:	4770      	bx	lr

08012cd6 <HAL_TIM_ConfigOCrefClear>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigOCrefClear(TIM_HandleTypeDef *htim,
                                           const TIM_ClearInputConfigTypeDef *sClearInputConfig,
                                           uint32_t Channel)
{
 8012cd6:	b580      	push	{r7, lr}
 8012cd8:	b086      	sub	sp, #24
 8012cda:	af00      	add	r7, sp, #0
 8012cdc:	60f8      	str	r0, [r7, #12]
 8012cde:	60b9      	str	r1, [r7, #8]
 8012ce0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012ce2:	2300      	movs	r3, #0
 8012ce4:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_TIM_OCXREF_CLEAR_INSTANCE(htim->Instance));
  assert_param(IS_TIM_CLEARINPUT_SOURCE(sClearInputConfig->ClearInputSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 8012ce6:	68fb      	ldr	r3, [r7, #12]
 8012ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012cec:	2b01      	cmp	r3, #1
 8012cee:	d101      	bne.n	8012cf4 <HAL_TIM_ConfigOCrefClear+0x1e>
 8012cf0:	2302      	movs	r3, #2
 8012cf2:	e0b9      	b.n	8012e68 <HAL_TIM_ConfigOCrefClear+0x192>
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	2201      	movs	r2, #1
 8012cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	2202      	movs	r2, #2
 8012d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  switch (sClearInputConfig->ClearInputSource)
 8012d04:	68bb      	ldr	r3, [r7, #8]
 8012d06:	685b      	ldr	r3, [r3, #4]
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d002      	beq.n	8012d12 <HAL_TIM_ConfigOCrefClear+0x3c>
 8012d0c:	2b01      	cmp	r3, #1
 8012d0e:	d009      	beq.n	8012d24 <HAL_TIM_ConfigOCrefClear+0x4e>
 8012d10:	e021      	b.n	8012d56 <HAL_TIM_ConfigOCrefClear+0x80>
  {
    case TIM_CLEARINPUTSOURCE_NONE:
    {
      /* Clear the OCREF clear selection bit and the the ETR Bits */
      CLEAR_BIT(htim->Instance->SMCR, (TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP));
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	689a      	ldr	r2, [r3, #8]
 8012d18:	68fb      	ldr	r3, [r7, #12]
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8012d20:	609a      	str	r2, [r3, #8]
      break;
 8012d22:	e01b      	b.n	8012d5c <HAL_TIM_ConfigOCrefClear+0x86>
      assert_param(IS_TIM_CLEARINPUT_POLARITY(sClearInputConfig->ClearInputPolarity));
      assert_param(IS_TIM_CLEARINPUT_PRESCALER(sClearInputConfig->ClearInputPrescaler));
      assert_param(IS_TIM_CLEARINPUT_FILTER(sClearInputConfig->ClearInputFilter));

      /* When OCRef clear feature is used with ETR source, ETR prescaler must be off */
      if (sClearInputConfig->ClearInputPrescaler != TIM_CLEARINPUTPRESCALER_DIV1)
 8012d24:	68bb      	ldr	r3, [r7, #8]
 8012d26:	68db      	ldr	r3, [r3, #12]
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d009      	beq.n	8012d40 <HAL_TIM_ConfigOCrefClear+0x6a>
      {
        htim->State = HAL_TIM_STATE_READY;
 8012d2c:	68fb      	ldr	r3, [r7, #12]
 8012d2e:	2201      	movs	r2, #1
 8012d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        __HAL_UNLOCK(htim);
 8012d34:	68fb      	ldr	r3, [r7, #12]
 8012d36:	2200      	movs	r2, #0
 8012d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8012d3c:	2301      	movs	r3, #1
 8012d3e:	e093      	b.n	8012e68 <HAL_TIM_ConfigOCrefClear+0x192>
      }

      TIM_ETR_SetConfig(htim->Instance,
 8012d40:	68fb      	ldr	r3, [r7, #12]
 8012d42:	6818      	ldr	r0, [r3, #0]
                        sClearInputConfig->ClearInputPrescaler,
 8012d44:	68bb      	ldr	r3, [r7, #8]
 8012d46:	68d9      	ldr	r1, [r3, #12]
                        sClearInputConfig->ClearInputPolarity,
 8012d48:	68bb      	ldr	r3, [r7, #8]
 8012d4a:	689a      	ldr	r2, [r3, #8]
                        sClearInputConfig->ClearInputFilter);
 8012d4c:	68bb      	ldr	r3, [r7, #8]
 8012d4e:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8012d50:	f001 f926 	bl	8013fa0 <TIM_ETR_SetConfig>
      break;
 8012d54:	e002      	b.n	8012d5c <HAL_TIM_ConfigOCrefClear+0x86>
    }

    default:
      status = HAL_ERROR;
 8012d56:	2301      	movs	r3, #1
 8012d58:	75fb      	strb	r3, [r7, #23]
      break;
 8012d5a:	bf00      	nop
  }

  if (status == HAL_OK)
 8012d5c:	7dfb      	ldrb	r3, [r7, #23]
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d179      	bne.n	8012e56 <HAL_TIM_ConfigOCrefClear+0x180>
  {
    switch (Channel)
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	2b0c      	cmp	r3, #12
 8012d66:	d875      	bhi.n	8012e54 <HAL_TIM_ConfigOCrefClear+0x17e>
 8012d68:	a201      	add	r2, pc, #4	@ (adr r2, 8012d70 <HAL_TIM_ConfigOCrefClear+0x9a>)
 8012d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d6e:	bf00      	nop
 8012d70:	08012da5 	.word	0x08012da5
 8012d74:	08012e55 	.word	0x08012e55
 8012d78:	08012e55 	.word	0x08012e55
 8012d7c:	08012e55 	.word	0x08012e55
 8012d80:	08012dd1 	.word	0x08012dd1
 8012d84:	08012e55 	.word	0x08012e55
 8012d88:	08012e55 	.word	0x08012e55
 8012d8c:	08012e55 	.word	0x08012e55
 8012d90:	08012dfd 	.word	0x08012dfd
 8012d94:	08012e55 	.word	0x08012e55
 8012d98:	08012e55 	.word	0x08012e55
 8012d9c:	08012e55 	.word	0x08012e55
 8012da0:	08012e29 	.word	0x08012e29
    {
      case TIM_CHANNEL_1:
      {
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 8012da4:	68bb      	ldr	r3, [r7, #8]
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d008      	beq.n	8012dbe <HAL_TIM_ConfigOCrefClear+0xe8>
        {
          /* Enable the OCREF clear feature for Channel 1 */
          SET_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
 8012dac:	68fb      	ldr	r3, [r7, #12]
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	699a      	ldr	r2, [r3, #24]
 8012db2:	68fb      	ldr	r3, [r7, #12]
 8012db4:	681b      	ldr	r3, [r3, #0]
 8012db6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8012dba:	619a      	str	r2, [r3, #24]
        else
        {
          /* Disable the OCREF clear feature for Channel 1 */
          CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
        }
        break;
 8012dbc:	e04b      	b.n	8012e56 <HAL_TIM_ConfigOCrefClear+0x180>
          CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
 8012dbe:	68fb      	ldr	r3, [r7, #12]
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	699a      	ldr	r2, [r3, #24]
 8012dc4:	68fb      	ldr	r3, [r7, #12]
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8012dcc:	619a      	str	r2, [r3, #24]
        break;
 8012dce:	e042      	b.n	8012e56 <HAL_TIM_ConfigOCrefClear+0x180>
      }
      case TIM_CHANNEL_2:
      {
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 8012dd0:	68bb      	ldr	r3, [r7, #8]
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d008      	beq.n	8012dea <HAL_TIM_ConfigOCrefClear+0x114>
        {
          /* Enable the OCREF clear feature for Channel 2 */
          SET_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	699a      	ldr	r2, [r3, #24]
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8012de6:	619a      	str	r2, [r3, #24]
        else
        {
          /* Disable the OCREF clear feature for Channel 2 */
          CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
        }
        break;
 8012de8:	e035      	b.n	8012e56 <HAL_TIM_ConfigOCrefClear+0x180>
          CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
 8012dea:	68fb      	ldr	r3, [r7, #12]
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	699a      	ldr	r2, [r3, #24]
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8012df8:	619a      	str	r2, [r3, #24]
        break;
 8012dfa:	e02c      	b.n	8012e56 <HAL_TIM_ConfigOCrefClear+0x180>
      }
      case TIM_CHANNEL_3:
      {
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 8012dfc:	68bb      	ldr	r3, [r7, #8]
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d008      	beq.n	8012e16 <HAL_TIM_ConfigOCrefClear+0x140>
        {
          /* Enable the OCREF clear feature for Channel 3 */
          SET_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	69da      	ldr	r2, [r3, #28]
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8012e12:	61da      	str	r2, [r3, #28]
        else
        {
          /* Disable the OCREF clear feature for Channel 3 */
          CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
        }
        break;
 8012e14:	e01f      	b.n	8012e56 <HAL_TIM_ConfigOCrefClear+0x180>
          CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	69da      	ldr	r2, [r3, #28]
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8012e24:	61da      	str	r2, [r3, #28]
        break;
 8012e26:	e016      	b.n	8012e56 <HAL_TIM_ConfigOCrefClear+0x180>
      }
      case TIM_CHANNEL_4:
      {
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 8012e28:	68bb      	ldr	r3, [r7, #8]
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d008      	beq.n	8012e42 <HAL_TIM_ConfigOCrefClear+0x16c>
        {
          /* Enable the OCREF clear feature for Channel 4 */
          SET_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	69da      	ldr	r2, [r3, #28]
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8012e3e:	61da      	str	r2, [r3, #28]
        else
        {
          /* Disable the OCREF clear feature for Channel 4 */
          CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
        }
        break;
 8012e40:	e009      	b.n	8012e56 <HAL_TIM_ConfigOCrefClear+0x180>
          CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	69da      	ldr	r2, [r3, #28]
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8012e50:	61da      	str	r2, [r3, #28]
        break;
 8012e52:	e000      	b.n	8012e56 <HAL_TIM_ConfigOCrefClear+0x180>
      }
      default:
        break;
 8012e54:	bf00      	nop
    }
  }

  htim->State = HAL_TIM_STATE_READY;
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	2201      	movs	r2, #1
 8012e5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	2200      	movs	r2, #0
 8012e62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8012e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e68:	4618      	mov	r0, r3
 8012e6a:	3718      	adds	r7, #24
 8012e6c:	46bd      	mov	sp, r7
 8012e6e:	bd80      	pop	{r7, pc}

08012e70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8012e70:	b580      	push	{r7, lr}
 8012e72:	b084      	sub	sp, #16
 8012e74:	af00      	add	r7, sp, #0
 8012e76:	6078      	str	r0, [r7, #4]
 8012e78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012e7a:	2300      	movs	r3, #0
 8012e7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012e84:	2b01      	cmp	r3, #1
 8012e86:	d101      	bne.n	8012e8c <HAL_TIM_ConfigClockSource+0x1c>
 8012e88:	2302      	movs	r3, #2
 8012e8a:	e0b4      	b.n	8012ff6 <HAL_TIM_ConfigClockSource+0x186>
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	2201      	movs	r2, #1
 8012e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	2202      	movs	r2, #2
 8012e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	681b      	ldr	r3, [r3, #0]
 8012ea0:	689b      	ldr	r3, [r3, #8]
 8012ea2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8012ea4:	68bb      	ldr	r3, [r7, #8]
 8012ea6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8012eaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012eac:	68bb      	ldr	r3, [r7, #8]
 8012eae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8012eb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	68ba      	ldr	r2, [r7, #8]
 8012eba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8012ebc:	683b      	ldr	r3, [r7, #0]
 8012ebe:	681b      	ldr	r3, [r3, #0]
 8012ec0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012ec4:	d03e      	beq.n	8012f44 <HAL_TIM_ConfigClockSource+0xd4>
 8012ec6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012eca:	f200 8087 	bhi.w	8012fdc <HAL_TIM_ConfigClockSource+0x16c>
 8012ece:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012ed2:	f000 8086 	beq.w	8012fe2 <HAL_TIM_ConfigClockSource+0x172>
 8012ed6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012eda:	d87f      	bhi.n	8012fdc <HAL_TIM_ConfigClockSource+0x16c>
 8012edc:	2b70      	cmp	r3, #112	@ 0x70
 8012ede:	d01a      	beq.n	8012f16 <HAL_TIM_ConfigClockSource+0xa6>
 8012ee0:	2b70      	cmp	r3, #112	@ 0x70
 8012ee2:	d87b      	bhi.n	8012fdc <HAL_TIM_ConfigClockSource+0x16c>
 8012ee4:	2b60      	cmp	r3, #96	@ 0x60
 8012ee6:	d050      	beq.n	8012f8a <HAL_TIM_ConfigClockSource+0x11a>
 8012ee8:	2b60      	cmp	r3, #96	@ 0x60
 8012eea:	d877      	bhi.n	8012fdc <HAL_TIM_ConfigClockSource+0x16c>
 8012eec:	2b50      	cmp	r3, #80	@ 0x50
 8012eee:	d03c      	beq.n	8012f6a <HAL_TIM_ConfigClockSource+0xfa>
 8012ef0:	2b50      	cmp	r3, #80	@ 0x50
 8012ef2:	d873      	bhi.n	8012fdc <HAL_TIM_ConfigClockSource+0x16c>
 8012ef4:	2b40      	cmp	r3, #64	@ 0x40
 8012ef6:	d058      	beq.n	8012faa <HAL_TIM_ConfigClockSource+0x13a>
 8012ef8:	2b40      	cmp	r3, #64	@ 0x40
 8012efa:	d86f      	bhi.n	8012fdc <HAL_TIM_ConfigClockSource+0x16c>
 8012efc:	2b30      	cmp	r3, #48	@ 0x30
 8012efe:	d064      	beq.n	8012fca <HAL_TIM_ConfigClockSource+0x15a>
 8012f00:	2b30      	cmp	r3, #48	@ 0x30
 8012f02:	d86b      	bhi.n	8012fdc <HAL_TIM_ConfigClockSource+0x16c>
 8012f04:	2b20      	cmp	r3, #32
 8012f06:	d060      	beq.n	8012fca <HAL_TIM_ConfigClockSource+0x15a>
 8012f08:	2b20      	cmp	r3, #32
 8012f0a:	d867      	bhi.n	8012fdc <HAL_TIM_ConfigClockSource+0x16c>
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d05c      	beq.n	8012fca <HAL_TIM_ConfigClockSource+0x15a>
 8012f10:	2b10      	cmp	r3, #16
 8012f12:	d05a      	beq.n	8012fca <HAL_TIM_ConfigClockSource+0x15a>
 8012f14:	e062      	b.n	8012fdc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8012f1a:	683b      	ldr	r3, [r7, #0]
 8012f1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8012f1e:	683b      	ldr	r3, [r7, #0]
 8012f20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8012f22:	683b      	ldr	r3, [r7, #0]
 8012f24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8012f26:	f001 f83b 	bl	8013fa0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	689b      	ldr	r3, [r3, #8]
 8012f30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8012f32:	68bb      	ldr	r3, [r7, #8]
 8012f34:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8012f38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	68ba      	ldr	r2, [r7, #8]
 8012f40:	609a      	str	r2, [r3, #8]
      break;
 8012f42:	e04f      	b.n	8012fe4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8012f48:	683b      	ldr	r3, [r7, #0]
 8012f4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8012f4c:	683b      	ldr	r3, [r7, #0]
 8012f4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8012f50:	683b      	ldr	r3, [r7, #0]
 8012f52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8012f54:	f001 f824 	bl	8013fa0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	689a      	ldr	r2, [r3, #8]
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8012f66:	609a      	str	r2, [r3, #8]
      break;
 8012f68:	e03c      	b.n	8012fe4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8012f6e:	683b      	ldr	r3, [r7, #0]
 8012f70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8012f72:	683b      	ldr	r3, [r7, #0]
 8012f74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012f76:	461a      	mov	r2, r3
 8012f78:	f000 fee2 	bl	8013d40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	2150      	movs	r1, #80	@ 0x50
 8012f82:	4618      	mov	r0, r3
 8012f84:	f000 fff1 	bl	8013f6a <TIM_ITRx_SetConfig>
      break;
 8012f88:	e02c      	b.n	8012fe4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8012f8e:	683b      	ldr	r3, [r7, #0]
 8012f90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8012f92:	683b      	ldr	r3, [r7, #0]
 8012f94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8012f96:	461a      	mov	r2, r3
 8012f98:	f000 ff3e 	bl	8013e18 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	2160      	movs	r1, #96	@ 0x60
 8012fa2:	4618      	mov	r0, r3
 8012fa4:	f000 ffe1 	bl	8013f6a <TIM_ITRx_SetConfig>
      break;
 8012fa8:	e01c      	b.n	8012fe4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8012fae:	683b      	ldr	r3, [r7, #0]
 8012fb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8012fb2:	683b      	ldr	r3, [r7, #0]
 8012fb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012fb6:	461a      	mov	r2, r3
 8012fb8:	f000 fec2 	bl	8013d40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	681b      	ldr	r3, [r3, #0]
 8012fc0:	2140      	movs	r1, #64	@ 0x40
 8012fc2:	4618      	mov	r0, r3
 8012fc4:	f000 ffd1 	bl	8013f6a <TIM_ITRx_SetConfig>
      break;
 8012fc8:	e00c      	b.n	8012fe4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	681a      	ldr	r2, [r3, #0]
 8012fce:	683b      	ldr	r3, [r7, #0]
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	4619      	mov	r1, r3
 8012fd4:	4610      	mov	r0, r2
 8012fd6:	f000 ffc8 	bl	8013f6a <TIM_ITRx_SetConfig>
      break;
 8012fda:	e003      	b.n	8012fe4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8012fdc:	2301      	movs	r3, #1
 8012fde:	73fb      	strb	r3, [r7, #15]
      break;
 8012fe0:	e000      	b.n	8012fe4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8012fe2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	2201      	movs	r2, #1
 8012fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	2200      	movs	r2, #0
 8012ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8012ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ff6:	4618      	mov	r0, r3
 8012ff8:	3710      	adds	r7, #16
 8012ffa:	46bd      	mov	sp, r7
 8012ffc:	bd80      	pop	{r7, pc}

08012ffe <HAL_TIM_ConfigTI1Input>:
  *            @arg TIM_TI1SELECTION_XORCOMBINATION: The TIMx_CH1, CH2 and CH3
  *            pins are connected to the TI1 input (XOR combination)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigTI1Input(TIM_HandleTypeDef *htim, uint32_t TI1_Selection)
{
 8012ffe:	b480      	push	{r7}
 8013000:	b085      	sub	sp, #20
 8013002:	af00      	add	r7, sp, #0
 8013004:	6078      	str	r0, [r7, #4]
 8013006:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TI1SELECTION(TI1_Selection));

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	681b      	ldr	r3, [r3, #0]
 801300c:	685b      	ldr	r3, [r3, #4]
 801300e:	60fb      	str	r3, [r7, #12]

  /* Reset the TI1 selection */
  tmpcr2 &= ~TIM_CR2_TI1S;
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013016:	60fb      	str	r3, [r7, #12]

  /* Set the TI1 selection */
  tmpcr2 |= TI1_Selection;
 8013018:	68fa      	ldr	r2, [r7, #12]
 801301a:	683b      	ldr	r3, [r7, #0]
 801301c:	4313      	orrs	r3, r2
 801301e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMxCR2 */
  htim->Instance->CR2 = tmpcr2;
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	68fa      	ldr	r2, [r7, #12]
 8013026:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8013028:	2300      	movs	r3, #0
}
 801302a:	4618      	mov	r0, r3
 801302c:	3714      	adds	r7, #20
 801302e:	46bd      	mov	sp, r7
 8013030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013034:	4770      	bx	lr

08013036 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8013036:	b580      	push	{r7, lr}
 8013038:	b082      	sub	sp, #8
 801303a:	af00      	add	r7, sp, #0
 801303c:	6078      	str	r0, [r7, #4]
 801303e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013046:	2b01      	cmp	r3, #1
 8013048:	d101      	bne.n	801304e <HAL_TIM_SlaveConfigSynchro+0x18>
 801304a:	2302      	movs	r3, #2
 801304c:	e031      	b.n	80130b2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	2201      	movs	r2, #1
 8013052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	2202      	movs	r2, #2
 801305a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 801305e:	6839      	ldr	r1, [r7, #0]
 8013060:	6878      	ldr	r0, [r7, #4]
 8013062:	f000 fd75 	bl	8013b50 <TIM_SlaveTimer_SetConfig>
 8013066:	4603      	mov	r3, r0
 8013068:	2b00      	cmp	r3, #0
 801306a:	d009      	beq.n	8013080 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	2201      	movs	r2, #1
 8013070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	2200      	movs	r2, #0
 8013078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 801307c:	2301      	movs	r3, #1
 801307e:	e018      	b.n	80130b2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	68da      	ldr	r2, [r3, #12]
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801308e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	68da      	ldr	r2, [r3, #12]
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	681b      	ldr	r3, [r3, #0]
 801309a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 801309e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	2201      	movs	r2, #1
 80130a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	2200      	movs	r2, #0
 80130ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80130b0:	2300      	movs	r3, #0
}
 80130b2:	4618      	mov	r0, r3
 80130b4:	3708      	adds	r7, #8
 80130b6:	46bd      	mov	sp, r7
 80130b8:	bd80      	pop	{r7, pc}

080130ba <HAL_TIM_SlaveConfigSynchro_IT>:
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro_IT(TIM_HandleTypeDef *htim,
                                                const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80130ba:	b580      	push	{r7, lr}
 80130bc:	b082      	sub	sp, #8
 80130be:	af00      	add	r7, sp, #0
 80130c0:	6078      	str	r0, [r7, #4]
 80130c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80130ca:	2b01      	cmp	r3, #1
 80130cc:	d101      	bne.n	80130d2 <HAL_TIM_SlaveConfigSynchro_IT+0x18>
 80130ce:	2302      	movs	r3, #2
 80130d0:	e031      	b.n	8013136 <HAL_TIM_SlaveConfigSynchro_IT+0x7c>
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	2201      	movs	r2, #1
 80130d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	2202      	movs	r2, #2
 80130de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80130e2:	6839      	ldr	r1, [r7, #0]
 80130e4:	6878      	ldr	r0, [r7, #4]
 80130e6:	f000 fd33 	bl	8013b50 <TIM_SlaveTimer_SetConfig>
 80130ea:	4603      	mov	r3, r0
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d009      	beq.n	8013104 <HAL_TIM_SlaveConfigSynchro_IT+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	2201      	movs	r2, #1
 80130f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	2200      	movs	r2, #0
 80130fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8013100:	2301      	movs	r3, #1
 8013102:	e018      	b.n	8013136 <HAL_TIM_SlaveConfigSynchro_IT+0x7c>
  }

  /* Enable Trigger Interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_TRIGGER);
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	68da      	ldr	r2, [r3, #12]
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013112:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	68da      	ldr	r2, [r3, #12]
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8013122:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	2201      	movs	r2, #1
 8013128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	2200      	movs	r2, #0
 8013130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8013134:	2300      	movs	r3, #0
}
 8013136:	4618      	mov	r0, r3
 8013138:	3708      	adds	r7, #8
 801313a:	46bd      	mov	sp, r7
 801313c:	bd80      	pop	{r7, pc}

0801313e <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801313e:	b480      	push	{r7}
 8013140:	b085      	sub	sp, #20
 8013142:	af00      	add	r7, sp, #0
 8013144:	6078      	str	r0, [r7, #4]
 8013146:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8013148:	2300      	movs	r3, #0
 801314a:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 801314c:	683b      	ldr	r3, [r7, #0]
 801314e:	2b0c      	cmp	r3, #12
 8013150:	d830      	bhi.n	80131b4 <HAL_TIM_ReadCapturedValue+0x76>
 8013152:	a201      	add	r2, pc, #4	@ (adr r2, 8013158 <HAL_TIM_ReadCapturedValue+0x1a>)
 8013154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013158:	0801318d 	.word	0x0801318d
 801315c:	080131b5 	.word	0x080131b5
 8013160:	080131b5 	.word	0x080131b5
 8013164:	080131b5 	.word	0x080131b5
 8013168:	08013197 	.word	0x08013197
 801316c:	080131b5 	.word	0x080131b5
 8013170:	080131b5 	.word	0x080131b5
 8013174:	080131b5 	.word	0x080131b5
 8013178:	080131a1 	.word	0x080131a1
 801317c:	080131b5 	.word	0x080131b5
 8013180:	080131b5 	.word	0x080131b5
 8013184:	080131b5 	.word	0x080131b5
 8013188:	080131ab 	.word	0x080131ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013192:	60fb      	str	r3, [r7, #12]

      break;
 8013194:	e00f      	b.n	80131b6 <HAL_TIM_ReadCapturedValue+0x78>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801319c:	60fb      	str	r3, [r7, #12]

      break;
 801319e:	e00a      	b.n	80131b6 <HAL_TIM_ReadCapturedValue+0x78>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80131a6:	60fb      	str	r3, [r7, #12]

      break;
 80131a8:	e005      	b.n	80131b6 <HAL_TIM_ReadCapturedValue+0x78>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80131b0:	60fb      	str	r3, [r7, #12]

      break;
 80131b2:	e000      	b.n	80131b6 <HAL_TIM_ReadCapturedValue+0x78>
    }

    default:
      break;
 80131b4:	bf00      	nop
  }

  return tmpreg;
 80131b6:	68fb      	ldr	r3, [r7, #12]
}
 80131b8:	4618      	mov	r0, r3
 80131ba:	3714      	adds	r7, #20
 80131bc:	46bd      	mov	sp, r7
 80131be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131c2:	4770      	bx	lr

080131c4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80131c4:	b480      	push	{r7}
 80131c6:	b083      	sub	sp, #12
 80131c8:	af00      	add	r7, sp, #0
 80131ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80131cc:	bf00      	nop
 80131ce:	370c      	adds	r7, #12
 80131d0:	46bd      	mov	sp, r7
 80131d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131d6:	4770      	bx	lr

080131d8 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80131d8:	b480      	push	{r7}
 80131da:	b083      	sub	sp, #12
 80131dc:	af00      	add	r7, sp, #0
 80131de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80131e0:	bf00      	nop
 80131e2:	370c      	adds	r7, #12
 80131e4:	46bd      	mov	sp, r7
 80131e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ea:	4770      	bx	lr

080131ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80131ec:	b480      	push	{r7}
 80131ee:	b083      	sub	sp, #12
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80131f4:	bf00      	nop
 80131f6:	370c      	adds	r7, #12
 80131f8:	46bd      	mov	sp, r7
 80131fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131fe:	4770      	bx	lr

08013200 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8013200:	b480      	push	{r7}
 8013202:	b083      	sub	sp, #12
 8013204:	af00      	add	r7, sp, #0
 8013206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8013208:	bf00      	nop
 801320a:	370c      	adds	r7, #12
 801320c:	46bd      	mov	sp, r7
 801320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013212:	4770      	bx	lr

08013214 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8013214:	b480      	push	{r7}
 8013216:	b083      	sub	sp, #12
 8013218:	af00      	add	r7, sp, #0
 801321a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 801321c:	bf00      	nop
 801321e:	370c      	adds	r7, #12
 8013220:	46bd      	mov	sp, r7
 8013222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013226:	4770      	bx	lr

08013228 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8013228:	b480      	push	{r7}
 801322a:	b083      	sub	sp, #12
 801322c:	af00      	add	r7, sp, #0
 801322e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8013230:	bf00      	nop
 8013232:	370c      	adds	r7, #12
 8013234:	46bd      	mov	sp, r7
 8013236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801323a:	4770      	bx	lr

0801323c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 801323c:	b480      	push	{r7}
 801323e:	b083      	sub	sp, #12
 8013240:	af00      	add	r7, sp, #0
 8013242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8013244:	bf00      	nop
 8013246:	370c      	adds	r7, #12
 8013248:	46bd      	mov	sp, r7
 801324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801324e:	4770      	bx	lr

08013250 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8013250:	b480      	push	{r7}
 8013252:	b083      	sub	sp, #12
 8013254:	af00      	add	r7, sp, #0
 8013256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8013258:	bf00      	nop
 801325a:	370c      	adds	r7, #12
 801325c:	46bd      	mov	sp, r7
 801325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013262:	4770      	bx	lr

08013264 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8013264:	b480      	push	{r7}
 8013266:	b083      	sub	sp, #12
 8013268:	af00      	add	r7, sp, #0
 801326a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 801326c:	bf00      	nop
 801326e:	370c      	adds	r7, #12
 8013270:	46bd      	mov	sp, r7
 8013272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013276:	4770      	bx	lr

08013278 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8013278:	b480      	push	{r7}
 801327a:	b083      	sub	sp, #12
 801327c:	af00      	add	r7, sp, #0
 801327e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8013280:	bf00      	nop
 8013282:	370c      	adds	r7, #12
 8013284:	46bd      	mov	sp, r7
 8013286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801328a:	4770      	bx	lr

0801328c <HAL_TIM_Base_GetState>:
  * @brief  Return the TIM Base handle state.
  * @param  htim TIM Base handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(const TIM_HandleTypeDef *htim)
{
 801328c:	b480      	push	{r7}
 801328e:	b083      	sub	sp, #12
 8013290:	af00      	add	r7, sp, #0
 8013292:	6078      	str	r0, [r7, #4]
  return htim->State;
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801329a:	b2db      	uxtb	r3, r3
}
 801329c:	4618      	mov	r0, r3
 801329e:	370c      	adds	r7, #12
 80132a0:	46bd      	mov	sp, r7
 80132a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132a6:	4770      	bx	lr

080132a8 <HAL_TIM_OC_GetState>:
  * @brief  Return the TIM OC handle state.
  * @param  htim TIM Output Compare handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_OC_GetState(const TIM_HandleTypeDef *htim)
{
 80132a8:	b480      	push	{r7}
 80132aa:	b083      	sub	sp, #12
 80132ac:	af00      	add	r7, sp, #0
 80132ae:	6078      	str	r0, [r7, #4]
  return htim->State;
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80132b6:	b2db      	uxtb	r3, r3
}
 80132b8:	4618      	mov	r0, r3
 80132ba:	370c      	adds	r7, #12
 80132bc:	46bd      	mov	sp, r7
 80132be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132c2:	4770      	bx	lr

080132c4 <HAL_TIM_PWM_GetState>:
  * @brief  Return the TIM PWM handle state.
  * @param  htim TIM handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_PWM_GetState(const TIM_HandleTypeDef *htim)
{
 80132c4:	b480      	push	{r7}
 80132c6:	b083      	sub	sp, #12
 80132c8:	af00      	add	r7, sp, #0
 80132ca:	6078      	str	r0, [r7, #4]
  return htim->State;
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80132d2:	b2db      	uxtb	r3, r3
}
 80132d4:	4618      	mov	r0, r3
 80132d6:	370c      	adds	r7, #12
 80132d8:	46bd      	mov	sp, r7
 80132da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132de:	4770      	bx	lr

080132e0 <HAL_TIM_IC_GetState>:
  * @brief  Return the TIM Input Capture handle state.
  * @param  htim TIM IC handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_IC_GetState(const TIM_HandleTypeDef *htim)
{
 80132e0:	b480      	push	{r7}
 80132e2:	b083      	sub	sp, #12
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	6078      	str	r0, [r7, #4]
  return htim->State;
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80132ee:	b2db      	uxtb	r3, r3
}
 80132f0:	4618      	mov	r0, r3
 80132f2:	370c      	adds	r7, #12
 80132f4:	46bd      	mov	sp, r7
 80132f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132fa:	4770      	bx	lr

080132fc <HAL_TIM_OnePulse_GetState>:
  * @brief  Return the TIM One Pulse Mode handle state.
  * @param  htim TIM OPM handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_OnePulse_GetState(const TIM_HandleTypeDef *htim)
{
 80132fc:	b480      	push	{r7}
 80132fe:	b083      	sub	sp, #12
 8013300:	af00      	add	r7, sp, #0
 8013302:	6078      	str	r0, [r7, #4]
  return htim->State;
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801330a:	b2db      	uxtb	r3, r3
}
 801330c:	4618      	mov	r0, r3
 801330e:	370c      	adds	r7, #12
 8013310:	46bd      	mov	sp, r7
 8013312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013316:	4770      	bx	lr

08013318 <HAL_TIM_Encoder_GetState>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM Encoder Interface handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Encoder_GetState(const TIM_HandleTypeDef *htim)
{
 8013318:	b480      	push	{r7}
 801331a:	b083      	sub	sp, #12
 801331c:	af00      	add	r7, sp, #0
 801331e:	6078      	str	r0, [r7, #4]
  return htim->State;
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8013326:	b2db      	uxtb	r3, r3
}
 8013328:	4618      	mov	r0, r3
 801332a:	370c      	adds	r7, #12
 801332c:	46bd      	mov	sp, r7
 801332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013332:	4770      	bx	lr

08013334 <HAL_TIM_GetActiveChannel>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM handle
  * @retval Active channel
  */
HAL_TIM_ActiveChannel HAL_TIM_GetActiveChannel(const TIM_HandleTypeDef *htim)
{
 8013334:	b480      	push	{r7}
 8013336:	b083      	sub	sp, #12
 8013338:	af00      	add	r7, sp, #0
 801333a:	6078      	str	r0, [r7, #4]
  return htim->Channel;
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	7f1b      	ldrb	r3, [r3, #28]
}
 8013340:	4618      	mov	r0, r3
 8013342:	370c      	adds	r7, #12
 8013344:	46bd      	mov	sp, r7
 8013346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801334a:	4770      	bx	lr

0801334c <HAL_TIM_GetChannelState>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5
  *            @arg TIM_CHANNEL_6: TIM Channel 6
  * @retval TIM Channel state
  */
HAL_TIM_ChannelStateTypeDef HAL_TIM_GetChannelState(const TIM_HandleTypeDef *htim,  uint32_t Channel)
{
 801334c:	b480      	push	{r7}
 801334e:	b085      	sub	sp, #20
 8013350:	af00      	add	r7, sp, #0
 8013352:	6078      	str	r0, [r7, #4]
 8013354:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_state;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8013356:	683b      	ldr	r3, [r7, #0]
 8013358:	2b00      	cmp	r3, #0
 801335a:	d104      	bne.n	8013366 <HAL_TIM_GetChannelState+0x1a>
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8013362:	b2db      	uxtb	r3, r3
 8013364:	e013      	b.n	801338e <HAL_TIM_GetChannelState+0x42>
 8013366:	683b      	ldr	r3, [r7, #0]
 8013368:	2b04      	cmp	r3, #4
 801336a:	d104      	bne.n	8013376 <HAL_TIM_GetChannelState+0x2a>
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8013372:	b2db      	uxtb	r3, r3
 8013374:	e00b      	b.n	801338e <HAL_TIM_GetChannelState+0x42>
 8013376:	683b      	ldr	r3, [r7, #0]
 8013378:	2b08      	cmp	r3, #8
 801337a:	d104      	bne.n	8013386 <HAL_TIM_GetChannelState+0x3a>
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8013382:	b2db      	uxtb	r3, r3
 8013384:	e003      	b.n	801338e <HAL_TIM_GetChannelState+0x42>
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801338c:	b2db      	uxtb	r3, r3
 801338e:	73fb      	strb	r3, [r7, #15]

  return channel_state;
 8013390:	7bfb      	ldrb	r3, [r7, #15]
}
 8013392:	4618      	mov	r0, r3
 8013394:	3714      	adds	r7, #20
 8013396:	46bd      	mov	sp, r7
 8013398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801339c:	4770      	bx	lr

0801339e <HAL_TIM_DMABurstState>:
  * @brief  Return actual state of a DMA burst operation.
  * @param  htim TIM handle
  * @retval DMA burst state
  */
HAL_TIM_DMABurstStateTypeDef HAL_TIM_DMABurstState(const TIM_HandleTypeDef *htim)
{
 801339e:	b480      	push	{r7}
 80133a0:	b083      	sub	sp, #12
 80133a2:	af00      	add	r7, sp, #0
 80133a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_DMABURST_INSTANCE(htim->Instance));

  return htim->DMABurstState;
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80133ac:	b2db      	uxtb	r3, r3
}
 80133ae:	4618      	mov	r0, r3
 80133b0:	370c      	adds	r7, #12
 80133b2:	46bd      	mov	sp, r7
 80133b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133b8:	4770      	bx	lr

080133ba <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80133ba:	b580      	push	{r7, lr}
 80133bc:	b084      	sub	sp, #16
 80133be:	af00      	add	r7, sp, #0
 80133c0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80133c6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80133cc:	687a      	ldr	r2, [r7, #4]
 80133ce:	429a      	cmp	r2, r3
 80133d0:	d107      	bne.n	80133e2 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	2201      	movs	r2, #1
 80133d6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80133d8:	68fb      	ldr	r3, [r7, #12]
 80133da:	2201      	movs	r2, #1
 80133dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80133e0:	e02a      	b.n	8013438 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80133e2:	68fb      	ldr	r3, [r7, #12]
 80133e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80133e6:	687a      	ldr	r2, [r7, #4]
 80133e8:	429a      	cmp	r2, r3
 80133ea:	d107      	bne.n	80133fc <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	2202      	movs	r2, #2
 80133f0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	2201      	movs	r2, #1
 80133f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80133fa:	e01d      	b.n	8013438 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013400:	687a      	ldr	r2, [r7, #4]
 8013402:	429a      	cmp	r2, r3
 8013404:	d107      	bne.n	8013416 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8013406:	68fb      	ldr	r3, [r7, #12]
 8013408:	2204      	movs	r2, #4
 801340a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 801340c:	68fb      	ldr	r3, [r7, #12]
 801340e:	2201      	movs	r2, #1
 8013410:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8013414:	e010      	b.n	8013438 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801341a:	687a      	ldr	r2, [r7, #4]
 801341c:	429a      	cmp	r2, r3
 801341e:	d107      	bne.n	8013430 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	2208      	movs	r2, #8
 8013424:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	2201      	movs	r2, #1
 801342a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801342e:	e003      	b.n	8013438 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	2201      	movs	r2, #1
 8013434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8013438:	68f8      	ldr	r0, [r7, #12]
 801343a:	f7ff ff1d 	bl	8013278 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	2200      	movs	r2, #0
 8013442:	771a      	strb	r2, [r3, #28]
}
 8013444:	bf00      	nop
 8013446:	3710      	adds	r7, #16
 8013448:	46bd      	mov	sp, r7
 801344a:	bd80      	pop	{r7, pc}

0801344c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 801344c:	b580      	push	{r7, lr}
 801344e:	b084      	sub	sp, #16
 8013450:	af00      	add	r7, sp, #0
 8013452:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013458:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801345e:	687a      	ldr	r2, [r7, #4]
 8013460:	429a      	cmp	r2, r3
 8013462:	d10b      	bne.n	801347c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8013464:	68fb      	ldr	r3, [r7, #12]
 8013466:	2201      	movs	r2, #1
 8013468:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	69db      	ldr	r3, [r3, #28]
 801346e:	2b00      	cmp	r3, #0
 8013470:	d136      	bne.n	80134e0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	2201      	movs	r2, #1
 8013476:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801347a:	e031      	b.n	80134e0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013480:	687a      	ldr	r2, [r7, #4]
 8013482:	429a      	cmp	r2, r3
 8013484:	d10b      	bne.n	801349e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	2202      	movs	r2, #2
 801348a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	69db      	ldr	r3, [r3, #28]
 8013490:	2b00      	cmp	r3, #0
 8013492:	d125      	bne.n	80134e0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	2201      	movs	r2, #1
 8013498:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801349c:	e020      	b.n	80134e0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80134a2:	687a      	ldr	r2, [r7, #4]
 80134a4:	429a      	cmp	r2, r3
 80134a6:	d10b      	bne.n	80134c0 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	2204      	movs	r2, #4
 80134ac:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	69db      	ldr	r3, [r3, #28]
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d114      	bne.n	80134e0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80134b6:	68fb      	ldr	r3, [r7, #12]
 80134b8:	2201      	movs	r2, #1
 80134ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80134be:	e00f      	b.n	80134e0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80134c0:	68fb      	ldr	r3, [r7, #12]
 80134c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80134c4:	687a      	ldr	r2, [r7, #4]
 80134c6:	429a      	cmp	r2, r3
 80134c8:	d10a      	bne.n	80134e0 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80134ca:	68fb      	ldr	r3, [r7, #12]
 80134cc:	2208      	movs	r2, #8
 80134ce:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	69db      	ldr	r3, [r3, #28]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d103      	bne.n	80134e0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	2201      	movs	r2, #1
 80134dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80134e0:	68f8      	ldr	r0, [r7, #12]
 80134e2:	f7ff fea1 	bl	8013228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	2200      	movs	r2, #0
 80134ea:	771a      	strb	r2, [r3, #28]
}
 80134ec:	bf00      	nop
 80134ee:	3710      	adds	r7, #16
 80134f0:	46bd      	mov	sp, r7
 80134f2:	bd80      	pop	{r7, pc}

080134f4 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80134f4:	b580      	push	{r7, lr}
 80134f6:	b084      	sub	sp, #16
 80134f8:	af00      	add	r7, sp, #0
 80134fa:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013500:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8013502:	68fb      	ldr	r3, [r7, #12]
 8013504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013506:	687a      	ldr	r2, [r7, #4]
 8013508:	429a      	cmp	r2, r3
 801350a:	d103      	bne.n	8013514 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	2201      	movs	r2, #1
 8013510:	771a      	strb	r2, [r3, #28]
 8013512:	e019      	b.n	8013548 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013518:	687a      	ldr	r2, [r7, #4]
 801351a:	429a      	cmp	r2, r3
 801351c:	d103      	bne.n	8013526 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	2202      	movs	r2, #2
 8013522:	771a      	strb	r2, [r3, #28]
 8013524:	e010      	b.n	8013548 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801352a:	687a      	ldr	r2, [r7, #4]
 801352c:	429a      	cmp	r2, r3
 801352e:	d103      	bne.n	8013538 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	2204      	movs	r2, #4
 8013534:	771a      	strb	r2, [r3, #28]
 8013536:	e007      	b.n	8013548 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801353c:	687a      	ldr	r2, [r7, #4]
 801353e:	429a      	cmp	r2, r3
 8013540:	d102      	bne.n	8013548 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	2208      	movs	r2, #8
 8013546:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8013548:	68f8      	ldr	r0, [r7, #12]
 801354a:	f7ff fe77 	bl	801323c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	2200      	movs	r2, #0
 8013552:	771a      	strb	r2, [r3, #28]
}
 8013554:	bf00      	nop
 8013556:	3710      	adds	r7, #16
 8013558:	46bd      	mov	sp, r7
 801355a:	bd80      	pop	{r7, pc}

0801355c <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 801355c:	b580      	push	{r7, lr}
 801355e:	b084      	sub	sp, #16
 8013560:	af00      	add	r7, sp, #0
 8013562:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013568:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801356e:	687a      	ldr	r2, [r7, #4]
 8013570:	429a      	cmp	r2, r3
 8013572:	d10f      	bne.n	8013594 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	2201      	movs	r2, #1
 8013578:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	69db      	ldr	r3, [r3, #28]
 801357e:	2b00      	cmp	r3, #0
 8013580:	d146      	bne.n	8013610 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8013582:	68fb      	ldr	r3, [r7, #12]
 8013584:	2201      	movs	r2, #1
 8013586:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801358a:	68fb      	ldr	r3, [r7, #12]
 801358c:	2201      	movs	r2, #1
 801358e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8013592:	e03d      	b.n	8013610 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8013594:	68fb      	ldr	r3, [r7, #12]
 8013596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013598:	687a      	ldr	r2, [r7, #4]
 801359a:	429a      	cmp	r2, r3
 801359c:	d10f      	bne.n	80135be <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	2202      	movs	r2, #2
 80135a2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	69db      	ldr	r3, [r3, #28]
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d131      	bne.n	8013610 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	2201      	movs	r2, #1
 80135b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	2201      	movs	r2, #1
 80135b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80135bc:	e028      	b.n	8013610 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80135c2:	687a      	ldr	r2, [r7, #4]
 80135c4:	429a      	cmp	r2, r3
 80135c6:	d10f      	bne.n	80135e8 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	2204      	movs	r2, #4
 80135cc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	69db      	ldr	r3, [r3, #28]
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d11c      	bne.n	8013610 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80135d6:	68fb      	ldr	r3, [r7, #12]
 80135d8:	2201      	movs	r2, #1
 80135da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	2201      	movs	r2, #1
 80135e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80135e6:	e013      	b.n	8013610 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80135ec:	687a      	ldr	r2, [r7, #4]
 80135ee:	429a      	cmp	r2, r3
 80135f0:	d10e      	bne.n	8013610 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	2208      	movs	r2, #8
 80135f6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	69db      	ldr	r3, [r3, #28]
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d107      	bne.n	8013610 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8013600:	68fb      	ldr	r3, [r7, #12]
 8013602:	2201      	movs	r2, #1
 8013604:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	2201      	movs	r2, #1
 801360c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8013610:	68f8      	ldr	r0, [r7, #12]
 8013612:	f7ff fdf5 	bl	8013200 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013616:	68fb      	ldr	r3, [r7, #12]
 8013618:	2200      	movs	r2, #0
 801361a:	771a      	strb	r2, [r3, #28]
}
 801361c:	bf00      	nop
 801361e:	3710      	adds	r7, #16
 8013620:	46bd      	mov	sp, r7
 8013622:	bd80      	pop	{r7, pc}

08013624 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013624:	b580      	push	{r7, lr}
 8013626:	b084      	sub	sp, #16
 8013628:	af00      	add	r7, sp, #0
 801362a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013630:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013636:	687a      	ldr	r2, [r7, #4]
 8013638:	429a      	cmp	r2, r3
 801363a:	d103      	bne.n	8013644 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	2201      	movs	r2, #1
 8013640:	771a      	strb	r2, [r3, #28]
 8013642:	e019      	b.n	8013678 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013648:	687a      	ldr	r2, [r7, #4]
 801364a:	429a      	cmp	r2, r3
 801364c:	d103      	bne.n	8013656 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	2202      	movs	r2, #2
 8013652:	771a      	strb	r2, [r3, #28]
 8013654:	e010      	b.n	8013678 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801365a:	687a      	ldr	r2, [r7, #4]
 801365c:	429a      	cmp	r2, r3
 801365e:	d103      	bne.n	8013668 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	2204      	movs	r2, #4
 8013664:	771a      	strb	r2, [r3, #28]
 8013666:	e007      	b.n	8013678 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8013668:	68fb      	ldr	r3, [r7, #12]
 801366a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801366c:	687a      	ldr	r2, [r7, #4]
 801366e:	429a      	cmp	r2, r3
 8013670:	d102      	bne.n	8013678 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8013672:	68fb      	ldr	r3, [r7, #12]
 8013674:	2208      	movs	r2, #8
 8013676:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8013678:	68f8      	ldr	r0, [r7, #12]
 801367a:	f7ff fdcb 	bl	8013214 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	2200      	movs	r2, #0
 8013682:	771a      	strb	r2, [r3, #28]
}
 8013684:	bf00      	nop
 8013686:	3710      	adds	r7, #16
 8013688:	46bd      	mov	sp, r7
 801368a:	bd80      	pop	{r7, pc}

0801368c <TIM_DMAPeriodElapsedCplt>:
  * @brief  TIM DMA Period Elapse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMAPeriodElapsedCplt(DMA_HandleTypeDef *hdma)
{
 801368c:	b580      	push	{r7, lr}
 801368e:	b084      	sub	sp, #16
 8013690:	af00      	add	r7, sp, #0
 8013692:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013698:	60fb      	str	r3, [r7, #12]

  if (htim->hdma[TIM_DMA_ID_UPDATE]->Init.Mode == DMA_NORMAL)
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	6a1b      	ldr	r3, [r3, #32]
 801369e:	69db      	ldr	r3, [r3, #28]
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d103      	bne.n	80136ac <TIM_DMAPeriodElapsedCplt+0x20>
  {
    htim->State = HAL_TIM_STATE_READY;
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	2201      	movs	r2, #1
 80136a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PeriodElapsedCallback(htim);
#else
  HAL_TIM_PeriodElapsedCallback(htim);
 80136ac:	68f8      	ldr	r0, [r7, #12]
 80136ae:	f7ff fd89 	bl	80131c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 80136b2:	bf00      	nop
 80136b4:	3710      	adds	r7, #16
 80136b6:	46bd      	mov	sp, r7
 80136b8:	bd80      	pop	{r7, pc}

080136ba <TIM_DMAPeriodElapsedHalfCplt>:
  * @brief  TIM DMA Period Elapse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMAPeriodElapsedHalfCplt(DMA_HandleTypeDef *hdma)
{
 80136ba:	b580      	push	{r7, lr}
 80136bc:	b084      	sub	sp, #16
 80136be:	af00      	add	r7, sp, #0
 80136c0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80136c6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PeriodElapsedHalfCpltCallback(htim);
#else
  HAL_TIM_PeriodElapsedHalfCpltCallback(htim);
 80136c8:	68f8      	ldr	r0, [r7, #12]
 80136ca:	f7ff fd85 	bl	80131d8 <HAL_TIM_PeriodElapsedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 80136ce:	bf00      	nop
 80136d0:	3710      	adds	r7, #16
 80136d2:	46bd      	mov	sp, r7
 80136d4:	bd80      	pop	{r7, pc}

080136d6 <TIM_DMATriggerCplt>:
  * @brief  TIM DMA Trigger callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMATriggerCplt(DMA_HandleTypeDef *hdma)
{
 80136d6:	b580      	push	{r7, lr}
 80136d8:	b084      	sub	sp, #16
 80136da:	af00      	add	r7, sp, #0
 80136dc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80136e2:	60fb      	str	r3, [r7, #12]

  if (htim->hdma[TIM_DMA_ID_TRIGGER]->Init.Mode == DMA_NORMAL)
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80136e8:	69db      	ldr	r3, [r3, #28]
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d103      	bne.n	80136f6 <TIM_DMATriggerCplt+0x20>
  {
    htim->State = HAL_TIM_STATE_READY;
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	2201      	movs	r2, #1
 80136f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->TriggerCallback(htim);
#else
  HAL_TIM_TriggerCallback(htim);
 80136f6:	68f8      	ldr	r0, [r7, #12]
 80136f8:	f7ff fdaa 	bl	8013250 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 80136fc:	bf00      	nop
 80136fe:	3710      	adds	r7, #16
 8013700:	46bd      	mov	sp, r7
 8013702:	bd80      	pop	{r7, pc}

08013704 <TIM_DMATriggerHalfCplt>:
  * @brief  TIM DMA Trigger half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMATriggerHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013704:	b580      	push	{r7, lr}
 8013706:	b084      	sub	sp, #16
 8013708:	af00      	add	r7, sp, #0
 801370a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013710:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->TriggerHalfCpltCallback(htim);
#else
  HAL_TIM_TriggerHalfCpltCallback(htim);
 8013712:	68f8      	ldr	r0, [r7, #12]
 8013714:	f7ff fda6 	bl	8013264 <HAL_TIM_TriggerHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8013718:	bf00      	nop
 801371a:	3710      	adds	r7, #16
 801371c:	46bd      	mov	sp, r7
 801371e:	bd80      	pop	{r7, pc}

08013720 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8013720:	b480      	push	{r7}
 8013722:	b085      	sub	sp, #20
 8013724:	af00      	add	r7, sp, #0
 8013726:	6078      	str	r0, [r7, #4]
 8013728:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	4a3a      	ldr	r2, [pc, #232]	@ (801381c <TIM_Base_SetConfig+0xfc>)
 8013734:	4293      	cmp	r3, r2
 8013736:	d00f      	beq.n	8013758 <TIM_Base_SetConfig+0x38>
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801373e:	d00b      	beq.n	8013758 <TIM_Base_SetConfig+0x38>
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	4a37      	ldr	r2, [pc, #220]	@ (8013820 <TIM_Base_SetConfig+0x100>)
 8013744:	4293      	cmp	r3, r2
 8013746:	d007      	beq.n	8013758 <TIM_Base_SetConfig+0x38>
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	4a36      	ldr	r2, [pc, #216]	@ (8013824 <TIM_Base_SetConfig+0x104>)
 801374c:	4293      	cmp	r3, r2
 801374e:	d003      	beq.n	8013758 <TIM_Base_SetConfig+0x38>
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	4a35      	ldr	r2, [pc, #212]	@ (8013828 <TIM_Base_SetConfig+0x108>)
 8013754:	4293      	cmp	r3, r2
 8013756:	d108      	bne.n	801376a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013758:	68fb      	ldr	r3, [r7, #12]
 801375a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801375e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8013760:	683b      	ldr	r3, [r7, #0]
 8013762:	685b      	ldr	r3, [r3, #4]
 8013764:	68fa      	ldr	r2, [r7, #12]
 8013766:	4313      	orrs	r3, r2
 8013768:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	4a2b      	ldr	r2, [pc, #172]	@ (801381c <TIM_Base_SetConfig+0xfc>)
 801376e:	4293      	cmp	r3, r2
 8013770:	d01b      	beq.n	80137aa <TIM_Base_SetConfig+0x8a>
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013778:	d017      	beq.n	80137aa <TIM_Base_SetConfig+0x8a>
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	4a28      	ldr	r2, [pc, #160]	@ (8013820 <TIM_Base_SetConfig+0x100>)
 801377e:	4293      	cmp	r3, r2
 8013780:	d013      	beq.n	80137aa <TIM_Base_SetConfig+0x8a>
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	4a27      	ldr	r2, [pc, #156]	@ (8013824 <TIM_Base_SetConfig+0x104>)
 8013786:	4293      	cmp	r3, r2
 8013788:	d00f      	beq.n	80137aa <TIM_Base_SetConfig+0x8a>
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	4a26      	ldr	r2, [pc, #152]	@ (8013828 <TIM_Base_SetConfig+0x108>)
 801378e:	4293      	cmp	r3, r2
 8013790:	d00b      	beq.n	80137aa <TIM_Base_SetConfig+0x8a>
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	4a25      	ldr	r2, [pc, #148]	@ (801382c <TIM_Base_SetConfig+0x10c>)
 8013796:	4293      	cmp	r3, r2
 8013798:	d007      	beq.n	80137aa <TIM_Base_SetConfig+0x8a>
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	4a24      	ldr	r2, [pc, #144]	@ (8013830 <TIM_Base_SetConfig+0x110>)
 801379e:	4293      	cmp	r3, r2
 80137a0:	d003      	beq.n	80137aa <TIM_Base_SetConfig+0x8a>
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	4a23      	ldr	r2, [pc, #140]	@ (8013834 <TIM_Base_SetConfig+0x114>)
 80137a6:	4293      	cmp	r3, r2
 80137a8:	d108      	bne.n	80137bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80137aa:	68fb      	ldr	r3, [r7, #12]
 80137ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80137b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80137b2:	683b      	ldr	r3, [r7, #0]
 80137b4:	68db      	ldr	r3, [r3, #12]
 80137b6:	68fa      	ldr	r2, [r7, #12]
 80137b8:	4313      	orrs	r3, r2
 80137ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80137bc:	68fb      	ldr	r3, [r7, #12]
 80137be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80137c2:	683b      	ldr	r3, [r7, #0]
 80137c4:	695b      	ldr	r3, [r3, #20]
 80137c6:	4313      	orrs	r3, r2
 80137c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	68fa      	ldr	r2, [r7, #12]
 80137ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80137d0:	683b      	ldr	r3, [r7, #0]
 80137d2:	689a      	ldr	r2, [r3, #8]
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80137d8:	683b      	ldr	r3, [r7, #0]
 80137da:	681a      	ldr	r2, [r3, #0]
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	4a0e      	ldr	r2, [pc, #56]	@ (801381c <TIM_Base_SetConfig+0xfc>)
 80137e4:	4293      	cmp	r3, r2
 80137e6:	d103      	bne.n	80137f0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80137e8:	683b      	ldr	r3, [r7, #0]
 80137ea:	691a      	ldr	r2, [r3, #16]
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	2201      	movs	r2, #1
 80137f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	691b      	ldr	r3, [r3, #16]
 80137fa:	f003 0301 	and.w	r3, r3, #1
 80137fe:	2b01      	cmp	r3, #1
 8013800:	d105      	bne.n	801380e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	691b      	ldr	r3, [r3, #16]
 8013806:	f023 0201 	bic.w	r2, r3, #1
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	611a      	str	r2, [r3, #16]
  }
}
 801380e:	bf00      	nop
 8013810:	3714      	adds	r7, #20
 8013812:	46bd      	mov	sp, r7
 8013814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013818:	4770      	bx	lr
 801381a:	bf00      	nop
 801381c:	40010000 	.word	0x40010000
 8013820:	40000400 	.word	0x40000400
 8013824:	40000800 	.word	0x40000800
 8013828:	40000c00 	.word	0x40000c00
 801382c:	40014000 	.word	0x40014000
 8013830:	40014400 	.word	0x40014400
 8013834:	40014800 	.word	0x40014800

08013838 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013838:	b480      	push	{r7}
 801383a:	b087      	sub	sp, #28
 801383c:	af00      	add	r7, sp, #0
 801383e:	6078      	str	r0, [r7, #4]
 8013840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	6a1b      	ldr	r3, [r3, #32]
 8013846:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	6a1b      	ldr	r3, [r3, #32]
 801384c:	f023 0201 	bic.w	r2, r3, #1
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	685b      	ldr	r3, [r3, #4]
 8013858:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	699b      	ldr	r3, [r3, #24]
 801385e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	f023 0303 	bic.w	r3, r3, #3
 801386e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013870:	683b      	ldr	r3, [r7, #0]
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	68fa      	ldr	r2, [r7, #12]
 8013876:	4313      	orrs	r3, r2
 8013878:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801387a:	697b      	ldr	r3, [r7, #20]
 801387c:	f023 0302 	bic.w	r3, r3, #2
 8013880:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8013882:	683b      	ldr	r3, [r7, #0]
 8013884:	689b      	ldr	r3, [r3, #8]
 8013886:	697a      	ldr	r2, [r7, #20]
 8013888:	4313      	orrs	r3, r2
 801388a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	4a1c      	ldr	r2, [pc, #112]	@ (8013900 <TIM_OC1_SetConfig+0xc8>)
 8013890:	4293      	cmp	r3, r2
 8013892:	d10c      	bne.n	80138ae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8013894:	697b      	ldr	r3, [r7, #20]
 8013896:	f023 0308 	bic.w	r3, r3, #8
 801389a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801389c:	683b      	ldr	r3, [r7, #0]
 801389e:	68db      	ldr	r3, [r3, #12]
 80138a0:	697a      	ldr	r2, [r7, #20]
 80138a2:	4313      	orrs	r3, r2
 80138a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80138a6:	697b      	ldr	r3, [r7, #20]
 80138a8:	f023 0304 	bic.w	r3, r3, #4
 80138ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	4a13      	ldr	r2, [pc, #76]	@ (8013900 <TIM_OC1_SetConfig+0xc8>)
 80138b2:	4293      	cmp	r3, r2
 80138b4:	d111      	bne.n	80138da <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80138b6:	693b      	ldr	r3, [r7, #16]
 80138b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80138bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80138be:	693b      	ldr	r3, [r7, #16]
 80138c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80138c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80138c6:	683b      	ldr	r3, [r7, #0]
 80138c8:	695b      	ldr	r3, [r3, #20]
 80138ca:	693a      	ldr	r2, [r7, #16]
 80138cc:	4313      	orrs	r3, r2
 80138ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80138d0:	683b      	ldr	r3, [r7, #0]
 80138d2:	699b      	ldr	r3, [r3, #24]
 80138d4:	693a      	ldr	r2, [r7, #16]
 80138d6:	4313      	orrs	r3, r2
 80138d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	693a      	ldr	r2, [r7, #16]
 80138de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	68fa      	ldr	r2, [r7, #12]
 80138e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80138e6:	683b      	ldr	r3, [r7, #0]
 80138e8:	685a      	ldr	r2, [r3, #4]
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	697a      	ldr	r2, [r7, #20]
 80138f2:	621a      	str	r2, [r3, #32]
}
 80138f4:	bf00      	nop
 80138f6:	371c      	adds	r7, #28
 80138f8:	46bd      	mov	sp, r7
 80138fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138fe:	4770      	bx	lr
 8013900:	40010000 	.word	0x40010000

08013904 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013904:	b480      	push	{r7}
 8013906:	b087      	sub	sp, #28
 8013908:	af00      	add	r7, sp, #0
 801390a:	6078      	str	r0, [r7, #4]
 801390c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	6a1b      	ldr	r3, [r3, #32]
 8013912:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	6a1b      	ldr	r3, [r3, #32]
 8013918:	f023 0210 	bic.w	r2, r3, #16
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	685b      	ldr	r3, [r3, #4]
 8013924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	699b      	ldr	r3, [r3, #24]
 801392a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8013932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801393a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801393c:	683b      	ldr	r3, [r7, #0]
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	021b      	lsls	r3, r3, #8
 8013942:	68fa      	ldr	r2, [r7, #12]
 8013944:	4313      	orrs	r3, r2
 8013946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8013948:	697b      	ldr	r3, [r7, #20]
 801394a:	f023 0320 	bic.w	r3, r3, #32
 801394e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8013950:	683b      	ldr	r3, [r7, #0]
 8013952:	689b      	ldr	r3, [r3, #8]
 8013954:	011b      	lsls	r3, r3, #4
 8013956:	697a      	ldr	r2, [r7, #20]
 8013958:	4313      	orrs	r3, r2
 801395a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	4a1e      	ldr	r2, [pc, #120]	@ (80139d8 <TIM_OC2_SetConfig+0xd4>)
 8013960:	4293      	cmp	r3, r2
 8013962:	d10d      	bne.n	8013980 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8013964:	697b      	ldr	r3, [r7, #20]
 8013966:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801396a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801396c:	683b      	ldr	r3, [r7, #0]
 801396e:	68db      	ldr	r3, [r3, #12]
 8013970:	011b      	lsls	r3, r3, #4
 8013972:	697a      	ldr	r2, [r7, #20]
 8013974:	4313      	orrs	r3, r2
 8013976:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8013978:	697b      	ldr	r3, [r7, #20]
 801397a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801397e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	4a15      	ldr	r2, [pc, #84]	@ (80139d8 <TIM_OC2_SetConfig+0xd4>)
 8013984:	4293      	cmp	r3, r2
 8013986:	d113      	bne.n	80139b0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8013988:	693b      	ldr	r3, [r7, #16]
 801398a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801398e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8013990:	693b      	ldr	r3, [r7, #16]
 8013992:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8013996:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8013998:	683b      	ldr	r3, [r7, #0]
 801399a:	695b      	ldr	r3, [r3, #20]
 801399c:	009b      	lsls	r3, r3, #2
 801399e:	693a      	ldr	r2, [r7, #16]
 80139a0:	4313      	orrs	r3, r2
 80139a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80139a4:	683b      	ldr	r3, [r7, #0]
 80139a6:	699b      	ldr	r3, [r3, #24]
 80139a8:	009b      	lsls	r3, r3, #2
 80139aa:	693a      	ldr	r2, [r7, #16]
 80139ac:	4313      	orrs	r3, r2
 80139ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	693a      	ldr	r2, [r7, #16]
 80139b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	68fa      	ldr	r2, [r7, #12]
 80139ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80139bc:	683b      	ldr	r3, [r7, #0]
 80139be:	685a      	ldr	r2, [r3, #4]
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	697a      	ldr	r2, [r7, #20]
 80139c8:	621a      	str	r2, [r3, #32]
}
 80139ca:	bf00      	nop
 80139cc:	371c      	adds	r7, #28
 80139ce:	46bd      	mov	sp, r7
 80139d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139d4:	4770      	bx	lr
 80139d6:	bf00      	nop
 80139d8:	40010000 	.word	0x40010000

080139dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80139dc:	b480      	push	{r7}
 80139de:	b087      	sub	sp, #28
 80139e0:	af00      	add	r7, sp, #0
 80139e2:	6078      	str	r0, [r7, #4]
 80139e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	6a1b      	ldr	r3, [r3, #32]
 80139ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	6a1b      	ldr	r3, [r3, #32]
 80139f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	685b      	ldr	r3, [r3, #4]
 80139fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	69db      	ldr	r3, [r3, #28]
 8013a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8013a04:	68fb      	ldr	r3, [r7, #12]
 8013a06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8013a0c:	68fb      	ldr	r3, [r7, #12]
 8013a0e:	f023 0303 	bic.w	r3, r3, #3
 8013a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013a14:	683b      	ldr	r3, [r7, #0]
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	68fa      	ldr	r2, [r7, #12]
 8013a1a:	4313      	orrs	r3, r2
 8013a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8013a1e:	697b      	ldr	r3, [r7, #20]
 8013a20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8013a24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8013a26:	683b      	ldr	r3, [r7, #0]
 8013a28:	689b      	ldr	r3, [r3, #8]
 8013a2a:	021b      	lsls	r3, r3, #8
 8013a2c:	697a      	ldr	r2, [r7, #20]
 8013a2e:	4313      	orrs	r3, r2
 8013a30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	4a1d      	ldr	r2, [pc, #116]	@ (8013aac <TIM_OC3_SetConfig+0xd0>)
 8013a36:	4293      	cmp	r3, r2
 8013a38:	d10d      	bne.n	8013a56 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8013a3a:	697b      	ldr	r3, [r7, #20]
 8013a3c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8013a40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8013a42:	683b      	ldr	r3, [r7, #0]
 8013a44:	68db      	ldr	r3, [r3, #12]
 8013a46:	021b      	lsls	r3, r3, #8
 8013a48:	697a      	ldr	r2, [r7, #20]
 8013a4a:	4313      	orrs	r3, r2
 8013a4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8013a4e:	697b      	ldr	r3, [r7, #20]
 8013a50:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8013a54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	4a14      	ldr	r2, [pc, #80]	@ (8013aac <TIM_OC3_SetConfig+0xd0>)
 8013a5a:	4293      	cmp	r3, r2
 8013a5c:	d113      	bne.n	8013a86 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8013a5e:	693b      	ldr	r3, [r7, #16]
 8013a60:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013a64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8013a66:	693b      	ldr	r3, [r7, #16]
 8013a68:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8013a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8013a6e:	683b      	ldr	r3, [r7, #0]
 8013a70:	695b      	ldr	r3, [r3, #20]
 8013a72:	011b      	lsls	r3, r3, #4
 8013a74:	693a      	ldr	r2, [r7, #16]
 8013a76:	4313      	orrs	r3, r2
 8013a78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8013a7a:	683b      	ldr	r3, [r7, #0]
 8013a7c:	699b      	ldr	r3, [r3, #24]
 8013a7e:	011b      	lsls	r3, r3, #4
 8013a80:	693a      	ldr	r2, [r7, #16]
 8013a82:	4313      	orrs	r3, r2
 8013a84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	693a      	ldr	r2, [r7, #16]
 8013a8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	68fa      	ldr	r2, [r7, #12]
 8013a90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8013a92:	683b      	ldr	r3, [r7, #0]
 8013a94:	685a      	ldr	r2, [r3, #4]
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	697a      	ldr	r2, [r7, #20]
 8013a9e:	621a      	str	r2, [r3, #32]
}
 8013aa0:	bf00      	nop
 8013aa2:	371c      	adds	r7, #28
 8013aa4:	46bd      	mov	sp, r7
 8013aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aaa:	4770      	bx	lr
 8013aac:	40010000 	.word	0x40010000

08013ab0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013ab0:	b480      	push	{r7}
 8013ab2:	b087      	sub	sp, #28
 8013ab4:	af00      	add	r7, sp, #0
 8013ab6:	6078      	str	r0, [r7, #4]
 8013ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	6a1b      	ldr	r3, [r3, #32]
 8013abe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	6a1b      	ldr	r3, [r3, #32]
 8013ac4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	685b      	ldr	r3, [r3, #4]
 8013ad0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	69db      	ldr	r3, [r3, #28]
 8013ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8013ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013ae6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013ae8:	683b      	ldr	r3, [r7, #0]
 8013aea:	681b      	ldr	r3, [r3, #0]
 8013aec:	021b      	lsls	r3, r3, #8
 8013aee:	68fa      	ldr	r2, [r7, #12]
 8013af0:	4313      	orrs	r3, r2
 8013af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8013af4:	693b      	ldr	r3, [r7, #16]
 8013af6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8013afa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8013afc:	683b      	ldr	r3, [r7, #0]
 8013afe:	689b      	ldr	r3, [r3, #8]
 8013b00:	031b      	lsls	r3, r3, #12
 8013b02:	693a      	ldr	r2, [r7, #16]
 8013b04:	4313      	orrs	r3, r2
 8013b06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	4a10      	ldr	r2, [pc, #64]	@ (8013b4c <TIM_OC4_SetConfig+0x9c>)
 8013b0c:	4293      	cmp	r3, r2
 8013b0e:	d109      	bne.n	8013b24 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8013b10:	697b      	ldr	r3, [r7, #20]
 8013b12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8013b16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8013b18:	683b      	ldr	r3, [r7, #0]
 8013b1a:	695b      	ldr	r3, [r3, #20]
 8013b1c:	019b      	lsls	r3, r3, #6
 8013b1e:	697a      	ldr	r2, [r7, #20]
 8013b20:	4313      	orrs	r3, r2
 8013b22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	697a      	ldr	r2, [r7, #20]
 8013b28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	68fa      	ldr	r2, [r7, #12]
 8013b2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8013b30:	683b      	ldr	r3, [r7, #0]
 8013b32:	685a      	ldr	r2, [r3, #4]
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	693a      	ldr	r2, [r7, #16]
 8013b3c:	621a      	str	r2, [r3, #32]
}
 8013b3e:	bf00      	nop
 8013b40:	371c      	adds	r7, #28
 8013b42:	46bd      	mov	sp, r7
 8013b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b48:	4770      	bx	lr
 8013b4a:	bf00      	nop
 8013b4c:	40010000 	.word	0x40010000

08013b50 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8013b50:	b580      	push	{r7, lr}
 8013b52:	b086      	sub	sp, #24
 8013b54:	af00      	add	r7, sp, #0
 8013b56:	6078      	str	r0, [r7, #4]
 8013b58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013b5a:	2300      	movs	r3, #0
 8013b5c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	681b      	ldr	r3, [r3, #0]
 8013b62:	689b      	ldr	r3, [r3, #8]
 8013b64:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8013b66:	693b      	ldr	r3, [r7, #16]
 8013b68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013b6c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8013b6e:	683b      	ldr	r3, [r7, #0]
 8013b70:	685b      	ldr	r3, [r3, #4]
 8013b72:	693a      	ldr	r2, [r7, #16]
 8013b74:	4313      	orrs	r3, r2
 8013b76:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8013b78:	693b      	ldr	r3, [r7, #16]
 8013b7a:	f023 0307 	bic.w	r3, r3, #7
 8013b7e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8013b80:	683b      	ldr	r3, [r7, #0]
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	693a      	ldr	r2, [r7, #16]
 8013b86:	4313      	orrs	r3, r2
 8013b88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	693a      	ldr	r2, [r7, #16]
 8013b90:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8013b92:	683b      	ldr	r3, [r7, #0]
 8013b94:	685b      	ldr	r3, [r3, #4]
 8013b96:	2b70      	cmp	r3, #112	@ 0x70
 8013b98:	d01a      	beq.n	8013bd0 <TIM_SlaveTimer_SetConfig+0x80>
 8013b9a:	2b70      	cmp	r3, #112	@ 0x70
 8013b9c:	d860      	bhi.n	8013c60 <TIM_SlaveTimer_SetConfig+0x110>
 8013b9e:	2b60      	cmp	r3, #96	@ 0x60
 8013ba0:	d054      	beq.n	8013c4c <TIM_SlaveTimer_SetConfig+0xfc>
 8013ba2:	2b60      	cmp	r3, #96	@ 0x60
 8013ba4:	d85c      	bhi.n	8013c60 <TIM_SlaveTimer_SetConfig+0x110>
 8013ba6:	2b50      	cmp	r3, #80	@ 0x50
 8013ba8:	d046      	beq.n	8013c38 <TIM_SlaveTimer_SetConfig+0xe8>
 8013baa:	2b50      	cmp	r3, #80	@ 0x50
 8013bac:	d858      	bhi.n	8013c60 <TIM_SlaveTimer_SetConfig+0x110>
 8013bae:	2b40      	cmp	r3, #64	@ 0x40
 8013bb0:	d019      	beq.n	8013be6 <TIM_SlaveTimer_SetConfig+0x96>
 8013bb2:	2b40      	cmp	r3, #64	@ 0x40
 8013bb4:	d854      	bhi.n	8013c60 <TIM_SlaveTimer_SetConfig+0x110>
 8013bb6:	2b30      	cmp	r3, #48	@ 0x30
 8013bb8:	d055      	beq.n	8013c66 <TIM_SlaveTimer_SetConfig+0x116>
 8013bba:	2b30      	cmp	r3, #48	@ 0x30
 8013bbc:	d850      	bhi.n	8013c60 <TIM_SlaveTimer_SetConfig+0x110>
 8013bbe:	2b20      	cmp	r3, #32
 8013bc0:	d051      	beq.n	8013c66 <TIM_SlaveTimer_SetConfig+0x116>
 8013bc2:	2b20      	cmp	r3, #32
 8013bc4:	d84c      	bhi.n	8013c60 <TIM_SlaveTimer_SetConfig+0x110>
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d04d      	beq.n	8013c66 <TIM_SlaveTimer_SetConfig+0x116>
 8013bca:	2b10      	cmp	r3, #16
 8013bcc:	d04b      	beq.n	8013c66 <TIM_SlaveTimer_SetConfig+0x116>
 8013bce:	e047      	b.n	8013c60 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8013bd4:	683b      	ldr	r3, [r7, #0]
 8013bd6:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8013bd8:	683b      	ldr	r3, [r7, #0]
 8013bda:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8013bdc:	683b      	ldr	r3, [r7, #0]
 8013bde:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8013be0:	f000 f9de 	bl	8013fa0 <TIM_ETR_SetConfig>
      break;
 8013be4:	e040      	b.n	8013c68 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8013be6:	683b      	ldr	r3, [r7, #0]
 8013be8:	681b      	ldr	r3, [r3, #0]
 8013bea:	2b05      	cmp	r3, #5
 8013bec:	d101      	bne.n	8013bf2 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8013bee:	2301      	movs	r3, #1
 8013bf0:	e03b      	b.n	8013c6a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	6a1b      	ldr	r3, [r3, #32]
 8013bf8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	681b      	ldr	r3, [r3, #0]
 8013bfe:	6a1a      	ldr	r2, [r3, #32]
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	f022 0201 	bic.w	r2, r2, #1
 8013c08:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	681b      	ldr	r3, [r3, #0]
 8013c0e:	699b      	ldr	r3, [r3, #24]
 8013c10:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8013c12:	68bb      	ldr	r3, [r7, #8]
 8013c14:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8013c18:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8013c1a:	683b      	ldr	r3, [r7, #0]
 8013c1c:	691b      	ldr	r3, [r3, #16]
 8013c1e:	011b      	lsls	r3, r3, #4
 8013c20:	68ba      	ldr	r2, [r7, #8]
 8013c22:	4313      	orrs	r3, r2
 8013c24:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	681b      	ldr	r3, [r3, #0]
 8013c2a:	68ba      	ldr	r2, [r7, #8]
 8013c2c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	681b      	ldr	r3, [r3, #0]
 8013c32:	68fa      	ldr	r2, [r7, #12]
 8013c34:	621a      	str	r2, [r3, #32]
      break;
 8013c36:	e017      	b.n	8013c68 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8013c3c:	683b      	ldr	r3, [r7, #0]
 8013c3e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8013c40:	683b      	ldr	r3, [r7, #0]
 8013c42:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8013c44:	461a      	mov	r2, r3
 8013c46:	f000 f87b 	bl	8013d40 <TIM_TI1_ConfigInputStage>
      break;
 8013c4a:	e00d      	b.n	8013c68 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8013c50:	683b      	ldr	r3, [r7, #0]
 8013c52:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8013c54:	683b      	ldr	r3, [r7, #0]
 8013c56:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8013c58:	461a      	mov	r2, r3
 8013c5a:	f000 f8dd 	bl	8013e18 <TIM_TI2_ConfigInputStage>
      break;
 8013c5e:	e003      	b.n	8013c68 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8013c60:	2301      	movs	r3, #1
 8013c62:	75fb      	strb	r3, [r7, #23]
      break;
 8013c64:	e000      	b.n	8013c68 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8013c66:	bf00      	nop
  }

  return status;
 8013c68:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c6a:	4618      	mov	r0, r3
 8013c6c:	3718      	adds	r7, #24
 8013c6e:	46bd      	mov	sp, r7
 8013c70:	bd80      	pop	{r7, pc}

08013c72 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8013c72:	b480      	push	{r7}
 8013c74:	b087      	sub	sp, #28
 8013c76:	af00      	add	r7, sp, #0
 8013c78:	60f8      	str	r0, [r7, #12]
 8013c7a:	60b9      	str	r1, [r7, #8]
 8013c7c:	607a      	str	r2, [r7, #4]
 8013c7e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8013c80:	68fb      	ldr	r3, [r7, #12]
 8013c82:	6a1b      	ldr	r3, [r3, #32]
 8013c84:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	6a1b      	ldr	r3, [r3, #32]
 8013c8a:	f023 0201 	bic.w	r2, r3, #1
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	699b      	ldr	r3, [r3, #24]
 8013c96:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	4a24      	ldr	r2, [pc, #144]	@ (8013d2c <TIM_TI1_SetConfig+0xba>)
 8013c9c:	4293      	cmp	r3, r2
 8013c9e:	d013      	beq.n	8013cc8 <TIM_TI1_SetConfig+0x56>
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013ca6:	d00f      	beq.n	8013cc8 <TIM_TI1_SetConfig+0x56>
 8013ca8:	68fb      	ldr	r3, [r7, #12]
 8013caa:	4a21      	ldr	r2, [pc, #132]	@ (8013d30 <TIM_TI1_SetConfig+0xbe>)
 8013cac:	4293      	cmp	r3, r2
 8013cae:	d00b      	beq.n	8013cc8 <TIM_TI1_SetConfig+0x56>
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	4a20      	ldr	r2, [pc, #128]	@ (8013d34 <TIM_TI1_SetConfig+0xc2>)
 8013cb4:	4293      	cmp	r3, r2
 8013cb6:	d007      	beq.n	8013cc8 <TIM_TI1_SetConfig+0x56>
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	4a1f      	ldr	r2, [pc, #124]	@ (8013d38 <TIM_TI1_SetConfig+0xc6>)
 8013cbc:	4293      	cmp	r3, r2
 8013cbe:	d003      	beq.n	8013cc8 <TIM_TI1_SetConfig+0x56>
 8013cc0:	68fb      	ldr	r3, [r7, #12]
 8013cc2:	4a1e      	ldr	r2, [pc, #120]	@ (8013d3c <TIM_TI1_SetConfig+0xca>)
 8013cc4:	4293      	cmp	r3, r2
 8013cc6:	d101      	bne.n	8013ccc <TIM_TI1_SetConfig+0x5a>
 8013cc8:	2301      	movs	r3, #1
 8013cca:	e000      	b.n	8013cce <TIM_TI1_SetConfig+0x5c>
 8013ccc:	2300      	movs	r3, #0
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d008      	beq.n	8013ce4 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8013cd2:	697b      	ldr	r3, [r7, #20]
 8013cd4:	f023 0303 	bic.w	r3, r3, #3
 8013cd8:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8013cda:	697a      	ldr	r2, [r7, #20]
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	4313      	orrs	r3, r2
 8013ce0:	617b      	str	r3, [r7, #20]
 8013ce2:	e003      	b.n	8013cec <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8013ce4:	697b      	ldr	r3, [r7, #20]
 8013ce6:	f043 0301 	orr.w	r3, r3, #1
 8013cea:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8013cec:	697b      	ldr	r3, [r7, #20]
 8013cee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8013cf2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8013cf4:	683b      	ldr	r3, [r7, #0]
 8013cf6:	011b      	lsls	r3, r3, #4
 8013cf8:	b2db      	uxtb	r3, r3
 8013cfa:	697a      	ldr	r2, [r7, #20]
 8013cfc:	4313      	orrs	r3, r2
 8013cfe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8013d00:	693b      	ldr	r3, [r7, #16]
 8013d02:	f023 030a 	bic.w	r3, r3, #10
 8013d06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8013d08:	68bb      	ldr	r3, [r7, #8]
 8013d0a:	f003 030a 	and.w	r3, r3, #10
 8013d0e:	693a      	ldr	r2, [r7, #16]
 8013d10:	4313      	orrs	r3, r2
 8013d12:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8013d14:	68fb      	ldr	r3, [r7, #12]
 8013d16:	697a      	ldr	r2, [r7, #20]
 8013d18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013d1a:	68fb      	ldr	r3, [r7, #12]
 8013d1c:	693a      	ldr	r2, [r7, #16]
 8013d1e:	621a      	str	r2, [r3, #32]
}
 8013d20:	bf00      	nop
 8013d22:	371c      	adds	r7, #28
 8013d24:	46bd      	mov	sp, r7
 8013d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d2a:	4770      	bx	lr
 8013d2c:	40010000 	.word	0x40010000
 8013d30:	40000400 	.word	0x40000400
 8013d34:	40000800 	.word	0x40000800
 8013d38:	40000c00 	.word	0x40000c00
 8013d3c:	40014000 	.word	0x40014000

08013d40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013d40:	b480      	push	{r7}
 8013d42:	b087      	sub	sp, #28
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	60f8      	str	r0, [r7, #12]
 8013d48:	60b9      	str	r1, [r7, #8]
 8013d4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8013d4c:	68fb      	ldr	r3, [r7, #12]
 8013d4e:	6a1b      	ldr	r3, [r3, #32]
 8013d50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013d52:	68fb      	ldr	r3, [r7, #12]
 8013d54:	6a1b      	ldr	r3, [r3, #32]
 8013d56:	f023 0201 	bic.w	r2, r3, #1
 8013d5a:	68fb      	ldr	r3, [r7, #12]
 8013d5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013d5e:	68fb      	ldr	r3, [r7, #12]
 8013d60:	699b      	ldr	r3, [r3, #24]
 8013d62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8013d64:	693b      	ldr	r3, [r7, #16]
 8013d66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8013d6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	011b      	lsls	r3, r3, #4
 8013d70:	693a      	ldr	r2, [r7, #16]
 8013d72:	4313      	orrs	r3, r2
 8013d74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8013d76:	697b      	ldr	r3, [r7, #20]
 8013d78:	f023 030a 	bic.w	r3, r3, #10
 8013d7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8013d7e:	697a      	ldr	r2, [r7, #20]
 8013d80:	68bb      	ldr	r3, [r7, #8]
 8013d82:	4313      	orrs	r3, r2
 8013d84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8013d86:	68fb      	ldr	r3, [r7, #12]
 8013d88:	693a      	ldr	r2, [r7, #16]
 8013d8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013d8c:	68fb      	ldr	r3, [r7, #12]
 8013d8e:	697a      	ldr	r2, [r7, #20]
 8013d90:	621a      	str	r2, [r3, #32]
}
 8013d92:	bf00      	nop
 8013d94:	371c      	adds	r7, #28
 8013d96:	46bd      	mov	sp, r7
 8013d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d9c:	4770      	bx	lr

08013d9e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8013d9e:	b480      	push	{r7}
 8013da0:	b087      	sub	sp, #28
 8013da2:	af00      	add	r7, sp, #0
 8013da4:	60f8      	str	r0, [r7, #12]
 8013da6:	60b9      	str	r1, [r7, #8]
 8013da8:	607a      	str	r2, [r7, #4]
 8013daa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	6a1b      	ldr	r3, [r3, #32]
 8013db0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013db2:	68fb      	ldr	r3, [r7, #12]
 8013db4:	6a1b      	ldr	r3, [r3, #32]
 8013db6:	f023 0210 	bic.w	r2, r3, #16
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	699b      	ldr	r3, [r3, #24]
 8013dc2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8013dc4:	693b      	ldr	r3, [r7, #16]
 8013dc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013dca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	021b      	lsls	r3, r3, #8
 8013dd0:	693a      	ldr	r2, [r7, #16]
 8013dd2:	4313      	orrs	r3, r2
 8013dd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8013dd6:	693b      	ldr	r3, [r7, #16]
 8013dd8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8013ddc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8013dde:	683b      	ldr	r3, [r7, #0]
 8013de0:	031b      	lsls	r3, r3, #12
 8013de2:	b29b      	uxth	r3, r3
 8013de4:	693a      	ldr	r2, [r7, #16]
 8013de6:	4313      	orrs	r3, r2
 8013de8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8013dea:	697b      	ldr	r3, [r7, #20]
 8013dec:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8013df0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8013df2:	68bb      	ldr	r3, [r7, #8]
 8013df4:	011b      	lsls	r3, r3, #4
 8013df6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8013dfa:	697a      	ldr	r2, [r7, #20]
 8013dfc:	4313      	orrs	r3, r2
 8013dfe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8013e00:	68fb      	ldr	r3, [r7, #12]
 8013e02:	693a      	ldr	r2, [r7, #16]
 8013e04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	697a      	ldr	r2, [r7, #20]
 8013e0a:	621a      	str	r2, [r3, #32]
}
 8013e0c:	bf00      	nop
 8013e0e:	371c      	adds	r7, #28
 8013e10:	46bd      	mov	sp, r7
 8013e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e16:	4770      	bx	lr

08013e18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013e18:	b480      	push	{r7}
 8013e1a:	b087      	sub	sp, #28
 8013e1c:	af00      	add	r7, sp, #0
 8013e1e:	60f8      	str	r0, [r7, #12]
 8013e20:	60b9      	str	r1, [r7, #8]
 8013e22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8013e24:	68fb      	ldr	r3, [r7, #12]
 8013e26:	6a1b      	ldr	r3, [r3, #32]
 8013e28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013e2a:	68fb      	ldr	r3, [r7, #12]
 8013e2c:	6a1b      	ldr	r3, [r3, #32]
 8013e2e:	f023 0210 	bic.w	r2, r3, #16
 8013e32:	68fb      	ldr	r3, [r7, #12]
 8013e34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	699b      	ldr	r3, [r3, #24]
 8013e3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8013e3c:	693b      	ldr	r3, [r7, #16]
 8013e3e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8013e42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	031b      	lsls	r3, r3, #12
 8013e48:	693a      	ldr	r2, [r7, #16]
 8013e4a:	4313      	orrs	r3, r2
 8013e4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8013e4e:	697b      	ldr	r3, [r7, #20]
 8013e50:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8013e54:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8013e56:	68bb      	ldr	r3, [r7, #8]
 8013e58:	011b      	lsls	r3, r3, #4
 8013e5a:	697a      	ldr	r2, [r7, #20]
 8013e5c:	4313      	orrs	r3, r2
 8013e5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8013e60:	68fb      	ldr	r3, [r7, #12]
 8013e62:	693a      	ldr	r2, [r7, #16]
 8013e64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	697a      	ldr	r2, [r7, #20]
 8013e6a:	621a      	str	r2, [r3, #32]
}
 8013e6c:	bf00      	nop
 8013e6e:	371c      	adds	r7, #28
 8013e70:	46bd      	mov	sp, r7
 8013e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e76:	4770      	bx	lr

08013e78 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8013e78:	b480      	push	{r7}
 8013e7a:	b087      	sub	sp, #28
 8013e7c:	af00      	add	r7, sp, #0
 8013e7e:	60f8      	str	r0, [r7, #12]
 8013e80:	60b9      	str	r1, [r7, #8]
 8013e82:	607a      	str	r2, [r7, #4]
 8013e84:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8013e86:	68fb      	ldr	r3, [r7, #12]
 8013e88:	6a1b      	ldr	r3, [r3, #32]
 8013e8a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8013e8c:	68fb      	ldr	r3, [r7, #12]
 8013e8e:	6a1b      	ldr	r3, [r3, #32]
 8013e90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8013e98:	68fb      	ldr	r3, [r7, #12]
 8013e9a:	69db      	ldr	r3, [r3, #28]
 8013e9c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8013e9e:	693b      	ldr	r3, [r7, #16]
 8013ea0:	f023 0303 	bic.w	r3, r3, #3
 8013ea4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8013ea6:	693a      	ldr	r2, [r7, #16]
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	4313      	orrs	r3, r2
 8013eac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8013eae:	693b      	ldr	r3, [r7, #16]
 8013eb0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8013eb4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8013eb6:	683b      	ldr	r3, [r7, #0]
 8013eb8:	011b      	lsls	r3, r3, #4
 8013eba:	b2db      	uxtb	r3, r3
 8013ebc:	693a      	ldr	r2, [r7, #16]
 8013ebe:	4313      	orrs	r3, r2
 8013ec0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8013ec2:	697b      	ldr	r3, [r7, #20]
 8013ec4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8013ec8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8013eca:	68bb      	ldr	r3, [r7, #8]
 8013ecc:	021b      	lsls	r3, r3, #8
 8013ece:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8013ed2:	697a      	ldr	r2, [r7, #20]
 8013ed4:	4313      	orrs	r3, r2
 8013ed6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	693a      	ldr	r2, [r7, #16]
 8013edc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8013ede:	68fb      	ldr	r3, [r7, #12]
 8013ee0:	697a      	ldr	r2, [r7, #20]
 8013ee2:	621a      	str	r2, [r3, #32]
}
 8013ee4:	bf00      	nop
 8013ee6:	371c      	adds	r7, #28
 8013ee8:	46bd      	mov	sp, r7
 8013eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eee:	4770      	bx	lr

08013ef0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8013ef0:	b480      	push	{r7}
 8013ef2:	b087      	sub	sp, #28
 8013ef4:	af00      	add	r7, sp, #0
 8013ef6:	60f8      	str	r0, [r7, #12]
 8013ef8:	60b9      	str	r1, [r7, #8]
 8013efa:	607a      	str	r2, [r7, #4]
 8013efc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8013efe:	68fb      	ldr	r3, [r7, #12]
 8013f00:	6a1b      	ldr	r3, [r3, #32]
 8013f02:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8013f04:	68fb      	ldr	r3, [r7, #12]
 8013f06:	6a1b      	ldr	r3, [r3, #32]
 8013f08:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8013f0c:	68fb      	ldr	r3, [r7, #12]
 8013f0e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8013f10:	68fb      	ldr	r3, [r7, #12]
 8013f12:	69db      	ldr	r3, [r3, #28]
 8013f14:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8013f16:	693b      	ldr	r3, [r7, #16]
 8013f18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013f1c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	021b      	lsls	r3, r3, #8
 8013f22:	693a      	ldr	r2, [r7, #16]
 8013f24:	4313      	orrs	r3, r2
 8013f26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8013f28:	693b      	ldr	r3, [r7, #16]
 8013f2a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8013f2e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8013f30:	683b      	ldr	r3, [r7, #0]
 8013f32:	031b      	lsls	r3, r3, #12
 8013f34:	b29b      	uxth	r3, r3
 8013f36:	693a      	ldr	r2, [r7, #16]
 8013f38:	4313      	orrs	r3, r2
 8013f3a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8013f3c:	697b      	ldr	r3, [r7, #20]
 8013f3e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8013f42:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8013f44:	68bb      	ldr	r3, [r7, #8]
 8013f46:	031b      	lsls	r3, r3, #12
 8013f48:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8013f4c:	697a      	ldr	r2, [r7, #20]
 8013f4e:	4313      	orrs	r3, r2
 8013f50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8013f52:	68fb      	ldr	r3, [r7, #12]
 8013f54:	693a      	ldr	r2, [r7, #16]
 8013f56:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	697a      	ldr	r2, [r7, #20]
 8013f5c:	621a      	str	r2, [r3, #32]
}
 8013f5e:	bf00      	nop
 8013f60:	371c      	adds	r7, #28
 8013f62:	46bd      	mov	sp, r7
 8013f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f68:	4770      	bx	lr

08013f6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8013f6a:	b480      	push	{r7}
 8013f6c:	b085      	sub	sp, #20
 8013f6e:	af00      	add	r7, sp, #0
 8013f70:	6078      	str	r0, [r7, #4]
 8013f72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	689b      	ldr	r3, [r3, #8]
 8013f78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8013f7a:	68fb      	ldr	r3, [r7, #12]
 8013f7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013f80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8013f82:	683a      	ldr	r2, [r7, #0]
 8013f84:	68fb      	ldr	r3, [r7, #12]
 8013f86:	4313      	orrs	r3, r2
 8013f88:	f043 0307 	orr.w	r3, r3, #7
 8013f8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	68fa      	ldr	r2, [r7, #12]
 8013f92:	609a      	str	r2, [r3, #8]
}
 8013f94:	bf00      	nop
 8013f96:	3714      	adds	r7, #20
 8013f98:	46bd      	mov	sp, r7
 8013f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f9e:	4770      	bx	lr

08013fa0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8013fa0:	b480      	push	{r7}
 8013fa2:	b087      	sub	sp, #28
 8013fa4:	af00      	add	r7, sp, #0
 8013fa6:	60f8      	str	r0, [r7, #12]
 8013fa8:	60b9      	str	r1, [r7, #8]
 8013faa:	607a      	str	r2, [r7, #4]
 8013fac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8013fae:	68fb      	ldr	r3, [r7, #12]
 8013fb0:	689b      	ldr	r3, [r3, #8]
 8013fb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013fb4:	697b      	ldr	r3, [r7, #20]
 8013fb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8013fba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8013fbc:	683b      	ldr	r3, [r7, #0]
 8013fbe:	021a      	lsls	r2, r3, #8
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	431a      	orrs	r2, r3
 8013fc4:	68bb      	ldr	r3, [r7, #8]
 8013fc6:	4313      	orrs	r3, r2
 8013fc8:	697a      	ldr	r2, [r7, #20]
 8013fca:	4313      	orrs	r3, r2
 8013fcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013fce:	68fb      	ldr	r3, [r7, #12]
 8013fd0:	697a      	ldr	r2, [r7, #20]
 8013fd2:	609a      	str	r2, [r3, #8]
}
 8013fd4:	bf00      	nop
 8013fd6:	371c      	adds	r7, #28
 8013fd8:	46bd      	mov	sp, r7
 8013fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fde:	4770      	bx	lr

08013fe0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8013fe0:	b480      	push	{r7}
 8013fe2:	b087      	sub	sp, #28
 8013fe4:	af00      	add	r7, sp, #0
 8013fe6:	60f8      	str	r0, [r7, #12]
 8013fe8:	60b9      	str	r1, [r7, #8]
 8013fea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8013fec:	68bb      	ldr	r3, [r7, #8]
 8013fee:	f003 031f 	and.w	r3, r3, #31
 8013ff2:	2201      	movs	r2, #1
 8013ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8013ff8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8013ffa:	68fb      	ldr	r3, [r7, #12]
 8013ffc:	6a1a      	ldr	r2, [r3, #32]
 8013ffe:	697b      	ldr	r3, [r7, #20]
 8014000:	43db      	mvns	r3, r3
 8014002:	401a      	ands	r2, r3
 8014004:	68fb      	ldr	r3, [r7, #12]
 8014006:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8014008:	68fb      	ldr	r3, [r7, #12]
 801400a:	6a1a      	ldr	r2, [r3, #32]
 801400c:	68bb      	ldr	r3, [r7, #8]
 801400e:	f003 031f 	and.w	r3, r3, #31
 8014012:	6879      	ldr	r1, [r7, #4]
 8014014:	fa01 f303 	lsl.w	r3, r1, r3
 8014018:	431a      	orrs	r2, r3
 801401a:	68fb      	ldr	r3, [r7, #12]
 801401c:	621a      	str	r2, [r3, #32]
}
 801401e:	bf00      	nop
 8014020:	371c      	adds	r7, #28
 8014022:	46bd      	mov	sp, r7
 8014024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014028:	4770      	bx	lr
 801402a:	bf00      	nop

0801402c <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 801402c:	b580      	push	{r7, lr}
 801402e:	b08a      	sub	sp, #40	@ 0x28
 8014030:	af00      	add	r7, sp, #0
 8014032:	6078      	str	r0, [r7, #4]
 8014034:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	2b00      	cmp	r3, #0
 801403a:	d101      	bne.n	8014040 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 801403c:	2301      	movs	r3, #1
 801403e:	e09a      	b.n	8014176 <HAL_TIMEx_HallSensor_Init+0x14a>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8014046:	b2db      	uxtb	r3, r3
 8014048:	2b00      	cmp	r3, #0
 801404a:	d106      	bne.n	801405a <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	2200      	movs	r2, #0
 8014050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8014054:	6878      	ldr	r0, [r7, #4]
 8014056:	f000 f8d6 	bl	8014206 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	2202      	movs	r2, #2
 801405e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	681a      	ldr	r2, [r3, #0]
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	3304      	adds	r3, #4
 801406a:	4619      	mov	r1, r3
 801406c:	4610      	mov	r0, r2
 801406e:	f7ff fb57 	bl	8013720 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	6818      	ldr	r0, [r3, #0]
 8014076:	683b      	ldr	r3, [r7, #0]
 8014078:	6819      	ldr	r1, [r3, #0]
 801407a:	683b      	ldr	r3, [r7, #0]
 801407c:	689b      	ldr	r3, [r3, #8]
 801407e:	2203      	movs	r2, #3
 8014080:	f7ff fdf7 	bl	8013c72 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	681b      	ldr	r3, [r3, #0]
 8014088:	699a      	ldr	r2, [r3, #24]
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	681b      	ldr	r3, [r3, #0]
 801408e:	f022 020c 	bic.w	r2, r2, #12
 8014092:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	6999      	ldr	r1, [r3, #24]
 801409a:	683b      	ldr	r3, [r7, #0]
 801409c:	685a      	ldr	r2, [r3, #4]
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	681b      	ldr	r3, [r3, #0]
 80140a2:	430a      	orrs	r2, r1
 80140a4:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	681b      	ldr	r3, [r3, #0]
 80140aa:	685a      	ldr	r2, [r3, #4]
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	681b      	ldr	r3, [r3, #0]
 80140b0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80140b4:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	681b      	ldr	r3, [r3, #0]
 80140ba:	689a      	ldr	r2, [r3, #8]
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80140c4:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	689a      	ldr	r2, [r3, #8]
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	681b      	ldr	r3, [r3, #0]
 80140d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80140d4:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	681b      	ldr	r3, [r3, #0]
 80140da:	689a      	ldr	r2, [r3, #8]
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	681b      	ldr	r3, [r3, #0]
 80140e0:	f022 0207 	bic.w	r2, r2, #7
 80140e4:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	681b      	ldr	r3, [r3, #0]
 80140ea:	689a      	ldr	r2, [r3, #8]
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	681b      	ldr	r3, [r3, #0]
 80140f0:	f042 0204 	orr.w	r2, r2, #4
 80140f4:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 80140f6:	2300      	movs	r3, #0
 80140f8:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 80140fa:	2300      	movs	r3, #0
 80140fc:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 80140fe:	2370      	movs	r3, #112	@ 0x70
 8014100:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8014102:	2300      	movs	r3, #0
 8014104:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8014106:	2300      	movs	r3, #0
 8014108:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 801410a:	2300      	movs	r3, #0
 801410c:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 801410e:	683b      	ldr	r3, [r7, #0]
 8014110:	68db      	ldr	r3, [r3, #12]
 8014112:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	681b      	ldr	r3, [r3, #0]
 8014118:	f107 020c 	add.w	r2, r7, #12
 801411c:	4611      	mov	r1, r2
 801411e:	4618      	mov	r0, r3
 8014120:	f7ff fbf0 	bl	8013904 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	681b      	ldr	r3, [r3, #0]
 8014128:	685a      	ldr	r2, [r3, #4]
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	681b      	ldr	r3, [r3, #0]
 801412e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8014132:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	681b      	ldr	r3, [r3, #0]
 8014138:	685a      	ldr	r2, [r3, #4]
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	681b      	ldr	r3, [r3, #0]
 801413e:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8014142:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	2201      	movs	r2, #1
 8014148:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	2201      	movs	r2, #1
 8014150:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	2201      	movs	r2, #1
 8014158:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	2201      	movs	r2, #1
 8014160:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	2201      	movs	r2, #1
 8014168:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	2201      	movs	r2, #1
 8014170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8014174:	2300      	movs	r3, #0
}
 8014176:	4618      	mov	r0, r3
 8014178:	3728      	adds	r7, #40	@ 0x28
 801417a:	46bd      	mov	sp, r7
 801417c:	bd80      	pop	{r7, pc}

0801417e <HAL_TIMEx_HallSensor_DeInit>:
  * @brief  DeInitializes the TIM Hall Sensor interface
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_DeInit(TIM_HandleTypeDef *htim)
{
 801417e:	b580      	push	{r7, lr}
 8014180:	b082      	sub	sp, #8
 8014182:	af00      	add	r7, sp, #0
 8014184:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	2202      	movs	r2, #2
 801418a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	681b      	ldr	r3, [r3, #0]
 8014192:	6a1a      	ldr	r2, [r3, #32]
 8014194:	f241 1311 	movw	r3, #4369	@ 0x1111
 8014198:	4013      	ands	r3, r2
 801419a:	2b00      	cmp	r3, #0
 801419c:	d10f      	bne.n	80141be <HAL_TIMEx_HallSensor_DeInit+0x40>
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	681b      	ldr	r3, [r3, #0]
 80141a2:	6a1a      	ldr	r2, [r3, #32]
 80141a4:	f240 4344 	movw	r3, #1092	@ 0x444
 80141a8:	4013      	ands	r3, r2
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d107      	bne.n	80141be <HAL_TIMEx_HallSensor_DeInit+0x40>
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	681a      	ldr	r2, [r3, #0]
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	f022 0201 	bic.w	r2, r2, #1
 80141bc:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->HallSensor_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIMEx_HallSensor_MspDeInit(htim);
 80141be:	6878      	ldr	r0, [r7, #4]
 80141c0:	f000 f82b 	bl	801421a <HAL_TIMEx_HallSensor_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	2200      	movs	r2, #0
 80141c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_RESET);
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	2200      	movs	r2, #0
 80141d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_RESET);
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	2200      	movs	r2, #0
 80141d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_RESET);
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	2200      	movs	r2, #0
 80141e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_RESET);
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	2200      	movs	r2, #0
 80141e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	2200      	movs	r2, #0
 80141f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	2200      	movs	r2, #0
 80141f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80141fc:	2300      	movs	r3, #0
}
 80141fe:	4618      	mov	r0, r3
 8014200:	3708      	adds	r7, #8
 8014202:	46bd      	mov	sp, r7
 8014204:	bd80      	pop	{r7, pc}

08014206 <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 8014206:	b480      	push	{r7}
 8014208:	b083      	sub	sp, #12
 801420a:	af00      	add	r7, sp, #0
 801420c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 801420e:	bf00      	nop
 8014210:	370c      	adds	r7, #12
 8014212:	46bd      	mov	sp, r7
 8014214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014218:	4770      	bx	lr

0801421a <HAL_TIMEx_HallSensor_MspDeInit>:
  * @brief  DeInitializes TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspDeInit(TIM_HandleTypeDef *htim)
{
 801421a:	b480      	push	{r7}
 801421c:	b083      	sub	sp, #12
 801421e:	af00      	add	r7, sp, #0
 8014220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspDeInit could be implemented in the user file
   */
}
 8014222:	bf00      	nop
 8014224:	370c      	adds	r7, #12
 8014226:	46bd      	mov	sp, r7
 8014228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801422c:	4770      	bx	lr

0801422e <HAL_TIMEx_HallSensor_Start>:
  * @brief  Starts the TIM Hall Sensor Interface.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start(TIM_HandleTypeDef *htim)
{
 801422e:	b580      	push	{r7, lr}
 8014230:	b084      	sub	sp, #16
 8014232:	af00      	add	r7, sp, #0
 8014234:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 801423c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8014244:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801424c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8014254:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8014256:	7bfb      	ldrb	r3, [r7, #15]
 8014258:	2b01      	cmp	r3, #1
 801425a:	d108      	bne.n	801426e <HAL_TIMEx_HallSensor_Start+0x40>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 801425c:	7bbb      	ldrb	r3, [r7, #14]
 801425e:	2b01      	cmp	r3, #1
 8014260:	d105      	bne.n	801426e <HAL_TIMEx_HallSensor_Start+0x40>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8014262:	7b7b      	ldrb	r3, [r7, #13]
 8014264:	2b01      	cmp	r3, #1
 8014266:	d102      	bne.n	801426e <HAL_TIMEx_HallSensor_Start+0x40>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8014268:	7b3b      	ldrb	r3, [r7, #12]
 801426a:	2b01      	cmp	r3, #1
 801426c:	d001      	beq.n	8014272 <HAL_TIMEx_HallSensor_Start+0x44>
  {
    return HAL_ERROR;
 801426e:	2301      	movs	r3, #1
 8014270:	e04f      	b.n	8014312 <HAL_TIMEx_HallSensor_Start+0xe4>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	2202      	movs	r2, #2
 8014276:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	2202      	movs	r2, #2
 801427e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	2202      	movs	r2, #2
 8014286:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	2202      	movs	r2, #2
 801428e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Input Capture channel 1
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	681b      	ldr	r3, [r3, #0]
 8014296:	2201      	movs	r2, #1
 8014298:	2100      	movs	r1, #0
 801429a:	4618      	mov	r0, r3
 801429c:	f7ff fea0 	bl	8013fe0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	681b      	ldr	r3, [r3, #0]
 80142a4:	4a1d      	ldr	r2, [pc, #116]	@ (801431c <HAL_TIMEx_HallSensor_Start+0xee>)
 80142a6:	4293      	cmp	r3, r2
 80142a8:	d018      	beq.n	80142dc <HAL_TIMEx_HallSensor_Start+0xae>
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	681b      	ldr	r3, [r3, #0]
 80142ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80142b2:	d013      	beq.n	80142dc <HAL_TIMEx_HallSensor_Start+0xae>
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	681b      	ldr	r3, [r3, #0]
 80142b8:	4a19      	ldr	r2, [pc, #100]	@ (8014320 <HAL_TIMEx_HallSensor_Start+0xf2>)
 80142ba:	4293      	cmp	r3, r2
 80142bc:	d00e      	beq.n	80142dc <HAL_TIMEx_HallSensor_Start+0xae>
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	681b      	ldr	r3, [r3, #0]
 80142c2:	4a18      	ldr	r2, [pc, #96]	@ (8014324 <HAL_TIMEx_HallSensor_Start+0xf6>)
 80142c4:	4293      	cmp	r3, r2
 80142c6:	d009      	beq.n	80142dc <HAL_TIMEx_HallSensor_Start+0xae>
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	4a16      	ldr	r2, [pc, #88]	@ (8014328 <HAL_TIMEx_HallSensor_Start+0xfa>)
 80142ce:	4293      	cmp	r3, r2
 80142d0:	d004      	beq.n	80142dc <HAL_TIMEx_HallSensor_Start+0xae>
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	681b      	ldr	r3, [r3, #0]
 80142d6:	4a15      	ldr	r2, [pc, #84]	@ (801432c <HAL_TIMEx_HallSensor_Start+0xfe>)
 80142d8:	4293      	cmp	r3, r2
 80142da:	d111      	bne.n	8014300 <HAL_TIMEx_HallSensor_Start+0xd2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	689b      	ldr	r3, [r3, #8]
 80142e2:	f003 0307 	and.w	r3, r3, #7
 80142e6:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80142e8:	68bb      	ldr	r3, [r7, #8]
 80142ea:	2b06      	cmp	r3, #6
 80142ec:	d010      	beq.n	8014310 <HAL_TIMEx_HallSensor_Start+0xe2>
    {
      __HAL_TIM_ENABLE(htim);
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	681b      	ldr	r3, [r3, #0]
 80142f2:	681a      	ldr	r2, [r3, #0]
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	681b      	ldr	r3, [r3, #0]
 80142f8:	f042 0201 	orr.w	r2, r2, #1
 80142fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80142fe:	e007      	b.n	8014310 <HAL_TIMEx_HallSensor_Start+0xe2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	681b      	ldr	r3, [r3, #0]
 8014304:	681a      	ldr	r2, [r3, #0]
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	681b      	ldr	r3, [r3, #0]
 801430a:	f042 0201 	orr.w	r2, r2, #1
 801430e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8014310:	2300      	movs	r3, #0
}
 8014312:	4618      	mov	r0, r3
 8014314:	3710      	adds	r7, #16
 8014316:	46bd      	mov	sp, r7
 8014318:	bd80      	pop	{r7, pc}
 801431a:	bf00      	nop
 801431c:	40010000 	.word	0x40010000
 8014320:	40000400 	.word	0x40000400
 8014324:	40000800 	.word	0x40000800
 8014328:	40000c00 	.word	0x40000c00
 801432c:	40014000 	.word	0x40014000

08014330 <HAL_TIMEx_HallSensor_Stop>:
  * @brief  Stops the TIM Hall sensor Interface.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop(TIM_HandleTypeDef *htim)
{
 8014330:	b580      	push	{r7, lr}
 8014332:	b082      	sub	sp, #8
 8014334:	af00      	add	r7, sp, #0
 8014336:	6078      	str	r0, [r7, #4]
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1, 2 and 3
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	681b      	ldr	r3, [r3, #0]
 801433c:	2200      	movs	r2, #0
 801433e:	2100      	movs	r1, #0
 8014340:	4618      	mov	r0, r3
 8014342:	f7ff fe4d 	bl	8013fe0 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	6a1a      	ldr	r2, [r3, #32]
 801434c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8014350:	4013      	ands	r3, r2
 8014352:	2b00      	cmp	r3, #0
 8014354:	d10f      	bne.n	8014376 <HAL_TIMEx_HallSensor_Stop+0x46>
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	681b      	ldr	r3, [r3, #0]
 801435a:	6a1a      	ldr	r2, [r3, #32]
 801435c:	f240 4344 	movw	r3, #1092	@ 0x444
 8014360:	4013      	ands	r3, r2
 8014362:	2b00      	cmp	r3, #0
 8014364:	d107      	bne.n	8014376 <HAL_TIMEx_HallSensor_Stop+0x46>
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	681b      	ldr	r3, [r3, #0]
 801436a:	681a      	ldr	r2, [r3, #0]
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	681b      	ldr	r3, [r3, #0]
 8014370:	f022 0201 	bic.w	r2, r2, #1
 8014374:	601a      	str	r2, [r3, #0]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	2201      	movs	r2, #1
 801437a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	2201      	movs	r2, #1
 8014382:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	2201      	movs	r2, #1
 801438a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	2201      	movs	r2, #1
 8014392:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8014396:	2300      	movs	r3, #0
}
 8014398:	4618      	mov	r0, r3
 801439a:	3708      	adds	r7, #8
 801439c:	46bd      	mov	sp, r7
 801439e:	bd80      	pop	{r7, pc}

080143a0 <HAL_TIMEx_HallSensor_Start_IT>:
  * @brief  Starts the TIM Hall Sensor Interface in interrupt mode.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_IT(TIM_HandleTypeDef *htim)
{
 80143a0:	b580      	push	{r7, lr}
 80143a2:	b084      	sub	sp, #16
 80143a4:	af00      	add	r7, sp, #0
 80143a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80143ae:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80143b6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80143be:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80143c6:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80143c8:	7bfb      	ldrb	r3, [r7, #15]
 80143ca:	2b01      	cmp	r3, #1
 80143cc:	d108      	bne.n	80143e0 <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80143ce:	7bbb      	ldrb	r3, [r7, #14]
 80143d0:	2b01      	cmp	r3, #1
 80143d2:	d105      	bne.n	80143e0 <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80143d4:	7b7b      	ldrb	r3, [r7, #13]
 80143d6:	2b01      	cmp	r3, #1
 80143d8:	d102      	bne.n	80143e0 <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80143da:	7b3b      	ldrb	r3, [r7, #12]
 80143dc:	2b01      	cmp	r3, #1
 80143de:	d001      	beq.n	80143e4 <HAL_TIMEx_HallSensor_Start_IT+0x44>
  {
    return HAL_ERROR;
 80143e0:	2301      	movs	r3, #1
 80143e2:	e057      	b.n	8014494 <HAL_TIMEx_HallSensor_Start_IT+0xf4>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	2202      	movs	r2, #2
 80143e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	2202      	movs	r2, #2
 80143f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	2202      	movs	r2, #2
 80143f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	2202      	movs	r2, #2
 8014400:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the capture compare Interrupts 1 event */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	68da      	ldr	r2, [r3, #12]
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	681b      	ldr	r3, [r3, #0]
 801440e:	f042 0202 	orr.w	r2, r2, #2
 8014412:	60da      	str	r2, [r3, #12]

  /* Enable the Input Capture channel 1
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	681b      	ldr	r3, [r3, #0]
 8014418:	2201      	movs	r2, #1
 801441a:	2100      	movs	r1, #0
 801441c:	4618      	mov	r0, r3
 801441e:	f7ff fddf 	bl	8013fe0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	681b      	ldr	r3, [r3, #0]
 8014426:	4a1d      	ldr	r2, [pc, #116]	@ (801449c <HAL_TIMEx_HallSensor_Start_IT+0xfc>)
 8014428:	4293      	cmp	r3, r2
 801442a:	d018      	beq.n	801445e <HAL_TIMEx_HallSensor_Start_IT+0xbe>
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	681b      	ldr	r3, [r3, #0]
 8014430:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014434:	d013      	beq.n	801445e <HAL_TIMEx_HallSensor_Start_IT+0xbe>
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	4a19      	ldr	r2, [pc, #100]	@ (80144a0 <HAL_TIMEx_HallSensor_Start_IT+0x100>)
 801443c:	4293      	cmp	r3, r2
 801443e:	d00e      	beq.n	801445e <HAL_TIMEx_HallSensor_Start_IT+0xbe>
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	4a17      	ldr	r2, [pc, #92]	@ (80144a4 <HAL_TIMEx_HallSensor_Start_IT+0x104>)
 8014446:	4293      	cmp	r3, r2
 8014448:	d009      	beq.n	801445e <HAL_TIMEx_HallSensor_Start_IT+0xbe>
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	681b      	ldr	r3, [r3, #0]
 801444e:	4a16      	ldr	r2, [pc, #88]	@ (80144a8 <HAL_TIMEx_HallSensor_Start_IT+0x108>)
 8014450:	4293      	cmp	r3, r2
 8014452:	d004      	beq.n	801445e <HAL_TIMEx_HallSensor_Start_IT+0xbe>
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	681b      	ldr	r3, [r3, #0]
 8014458:	4a14      	ldr	r2, [pc, #80]	@ (80144ac <HAL_TIMEx_HallSensor_Start_IT+0x10c>)
 801445a:	4293      	cmp	r3, r2
 801445c:	d111      	bne.n	8014482 <HAL_TIMEx_HallSensor_Start_IT+0xe2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	681b      	ldr	r3, [r3, #0]
 8014462:	689b      	ldr	r3, [r3, #8]
 8014464:	f003 0307 	and.w	r3, r3, #7
 8014468:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801446a:	68bb      	ldr	r3, [r7, #8]
 801446c:	2b06      	cmp	r3, #6
 801446e:	d010      	beq.n	8014492 <HAL_TIMEx_HallSensor_Start_IT+0xf2>
    {
      __HAL_TIM_ENABLE(htim);
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	681a      	ldr	r2, [r3, #0]
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	f042 0201 	orr.w	r2, r2, #1
 801447e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014480:	e007      	b.n	8014492 <HAL_TIMEx_HallSensor_Start_IT+0xf2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	681b      	ldr	r3, [r3, #0]
 8014486:	681a      	ldr	r2, [r3, #0]
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	681b      	ldr	r3, [r3, #0]
 801448c:	f042 0201 	orr.w	r2, r2, #1
 8014490:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8014492:	2300      	movs	r3, #0
}
 8014494:	4618      	mov	r0, r3
 8014496:	3710      	adds	r7, #16
 8014498:	46bd      	mov	sp, r7
 801449a:	bd80      	pop	{r7, pc}
 801449c:	40010000 	.word	0x40010000
 80144a0:	40000400 	.word	0x40000400
 80144a4:	40000800 	.word	0x40000800
 80144a8:	40000c00 	.word	0x40000c00
 80144ac:	40014000 	.word	0x40014000

080144b0 <HAL_TIMEx_HallSensor_Stop_IT>:
  * @brief  Stops the TIM Hall Sensor Interface in interrupt mode.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_IT(TIM_HandleTypeDef *htim)
{
 80144b0:	b580      	push	{r7, lr}
 80144b2:	b082      	sub	sp, #8
 80144b4:	af00      	add	r7, sp, #0
 80144b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channel 1
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	681b      	ldr	r3, [r3, #0]
 80144bc:	2200      	movs	r2, #0
 80144be:	2100      	movs	r1, #0
 80144c0:	4618      	mov	r0, r3
 80144c2:	f7ff fd8d 	bl	8013fe0 <TIM_CCxChannelCmd>

  /* Disable the capture compare Interrupts event */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	681b      	ldr	r3, [r3, #0]
 80144ca:	68da      	ldr	r2, [r3, #12]
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	f022 0202 	bic.w	r2, r2, #2
 80144d4:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	6a1a      	ldr	r2, [r3, #32]
 80144dc:	f241 1311 	movw	r3, #4369	@ 0x1111
 80144e0:	4013      	ands	r3, r2
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d10f      	bne.n	8014506 <HAL_TIMEx_HallSensor_Stop_IT+0x56>
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	681b      	ldr	r3, [r3, #0]
 80144ea:	6a1a      	ldr	r2, [r3, #32]
 80144ec:	f240 4344 	movw	r3, #1092	@ 0x444
 80144f0:	4013      	ands	r3, r2
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d107      	bne.n	8014506 <HAL_TIMEx_HallSensor_Stop_IT+0x56>
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	681a      	ldr	r2, [r3, #0]
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	f022 0201 	bic.w	r2, r2, #1
 8014504:	601a      	str	r2, [r3, #0]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	2201      	movs	r2, #1
 801450a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	2201      	movs	r2, #1
 8014512:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	2201      	movs	r2, #1
 801451a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	2201      	movs	r2, #1
 8014522:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8014526:	2300      	movs	r3, #0
}
 8014528:	4618      	mov	r0, r3
 801452a:	3708      	adds	r7, #8
 801452c:	46bd      	mov	sp, r7
 801452e:	bd80      	pop	{r7, pc}

08014530 <HAL_TIMEx_HallSensor_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length)
{
 8014530:	b580      	push	{r7, lr}
 8014532:	b086      	sub	sp, #24
 8014534:	af00      	add	r7, sp, #0
 8014536:	60f8      	str	r0, [r7, #12]
 8014538:	60b9      	str	r1, [r7, #8]
 801453a:	4613      	mov	r3, r2
 801453c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 801453e:	68fb      	ldr	r3, [r7, #12]
 8014540:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8014544:	75fb      	strb	r3, [r7, #23]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8014546:	68fb      	ldr	r3, [r7, #12]
 8014548:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801454c:	75bb      	strb	r3, [r7, #22]

  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_1_state == HAL_TIM_CHANNEL_STATE_BUSY)
 801454e:	7dfb      	ldrb	r3, [r7, #23]
 8014550:	2b02      	cmp	r3, #2
 8014552:	d002      	beq.n	801455a <HAL_TIMEx_HallSensor_Start_DMA+0x2a>
      || (complementary_channel_1_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8014554:	7dbb      	ldrb	r3, [r7, #22]
 8014556:	2b02      	cmp	r3, #2
 8014558:	d101      	bne.n	801455e <HAL_TIMEx_HallSensor_Start_DMA+0x2e>
  {
    return HAL_BUSY;
 801455a:	2302      	movs	r3, #2
 801455c:	e07c      	b.n	8014658 <HAL_TIMEx_HallSensor_Start_DMA+0x128>
  }
  else if ((channel_1_state == HAL_TIM_CHANNEL_STATE_READY)
 801455e:	7dfb      	ldrb	r3, [r7, #23]
 8014560:	2b01      	cmp	r3, #1
 8014562:	d134      	bne.n	80145ce <HAL_TIMEx_HallSensor_Start_DMA+0x9e>
           && (complementary_channel_1_state == HAL_TIM_CHANNEL_STATE_READY))
 8014564:	7dbb      	ldrb	r3, [r7, #22]
 8014566:	2b01      	cmp	r3, #1
 8014568:	d131      	bne.n	80145ce <HAL_TIMEx_HallSensor_Start_DMA+0x9e>
  {
    if ((pData == NULL) || (Length == 0U))
 801456a:	68bb      	ldr	r3, [r7, #8]
 801456c:	2b00      	cmp	r3, #0
 801456e:	d002      	beq.n	8014576 <HAL_TIMEx_HallSensor_Start_DMA+0x46>
 8014570:	88fb      	ldrh	r3, [r7, #6]
 8014572:	2b00      	cmp	r3, #0
 8014574:	d101      	bne.n	801457a <HAL_TIMEx_HallSensor_Start_DMA+0x4a>
    {
      return HAL_ERROR;
 8014576:	2301      	movs	r3, #1
 8014578:	e06e      	b.n	8014658 <HAL_TIMEx_HallSensor_Start_DMA+0x128>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 801457a:	68fb      	ldr	r3, [r7, #12]
 801457c:	2202      	movs	r2, #2
 801457e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8014582:	68fb      	ldr	r3, [r7, #12]
 8014584:	2202      	movs	r2, #2
 8014586:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    if ((pData == NULL) || (Length == 0U))
 801458a:	bf00      	nop
  }

  /* Enable the Input Capture channel 1
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 801458c:	68fb      	ldr	r3, [r7, #12]
 801458e:	681b      	ldr	r3, [r3, #0]
 8014590:	2201      	movs	r2, #1
 8014592:	2100      	movs	r1, #0
 8014594:	4618      	mov	r0, r3
 8014596:	f7ff fd23 	bl	8013fe0 <TIM_CCxChannelCmd>

  /* Set the DMA Input Capture 1 Callbacks */
  htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 801459a:	68fb      	ldr	r3, [r7, #12]
 801459c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801459e:	4a30      	ldr	r2, [pc, #192]	@ (8014660 <HAL_TIMEx_HallSensor_Start_DMA+0x130>)
 80145a0:	63da      	str	r2, [r3, #60]	@ 0x3c
  htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80145a2:	68fb      	ldr	r3, [r7, #12]
 80145a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80145a6:	4a2f      	ldr	r2, [pc, #188]	@ (8014664 <HAL_TIMEx_HallSensor_Start_DMA+0x134>)
 80145a8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80145aa:	68fb      	ldr	r3, [r7, #12]
 80145ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80145ae:	4a2e      	ldr	r2, [pc, #184]	@ (8014668 <HAL_TIMEx_HallSensor_Start_DMA+0x138>)
 80145b0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the DMA stream for Capture 1*/
  if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 80145b2:	68fb      	ldr	r3, [r7, #12]
 80145b4:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80145b6:	68fb      	ldr	r3, [r7, #12]
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	3334      	adds	r3, #52	@ 0x34
 80145bc:	4619      	mov	r1, r3
 80145be:	68ba      	ldr	r2, [r7, #8]
 80145c0:	88fb      	ldrh	r3, [r7, #6]
 80145c2:	f7f1 ff92 	bl	80064ea <HAL_DMA_Start_IT>
 80145c6:	4603      	mov	r3, r0
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d004      	beq.n	80145d6 <HAL_TIMEx_HallSensor_Start_DMA+0xa6>
 80145cc:	e001      	b.n	80145d2 <HAL_TIMEx_HallSensor_Start_DMA+0xa2>
    return HAL_ERROR;
 80145ce:	2301      	movs	r3, #1
 80145d0:	e042      	b.n	8014658 <HAL_TIMEx_HallSensor_Start_DMA+0x128>
  {
    /* Return error status */
    return HAL_ERROR;
 80145d2:	2301      	movs	r3, #1
 80145d4:	e040      	b.n	8014658 <HAL_TIMEx_HallSensor_Start_DMA+0x128>
  }
  /* Enable the capture compare 1 Interrupt */
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80145d6:	68fb      	ldr	r3, [r7, #12]
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	68da      	ldr	r2, [r3, #12]
 80145dc:	68fb      	ldr	r3, [r7, #12]
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80145e4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80145e6:	68fb      	ldr	r3, [r7, #12]
 80145e8:	681b      	ldr	r3, [r3, #0]
 80145ea:	4a20      	ldr	r2, [pc, #128]	@ (801466c <HAL_TIMEx_HallSensor_Start_DMA+0x13c>)
 80145ec:	4293      	cmp	r3, r2
 80145ee:	d018      	beq.n	8014622 <HAL_TIMEx_HallSensor_Start_DMA+0xf2>
 80145f0:	68fb      	ldr	r3, [r7, #12]
 80145f2:	681b      	ldr	r3, [r3, #0]
 80145f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80145f8:	d013      	beq.n	8014622 <HAL_TIMEx_HallSensor_Start_DMA+0xf2>
 80145fa:	68fb      	ldr	r3, [r7, #12]
 80145fc:	681b      	ldr	r3, [r3, #0]
 80145fe:	4a1c      	ldr	r2, [pc, #112]	@ (8014670 <HAL_TIMEx_HallSensor_Start_DMA+0x140>)
 8014600:	4293      	cmp	r3, r2
 8014602:	d00e      	beq.n	8014622 <HAL_TIMEx_HallSensor_Start_DMA+0xf2>
 8014604:	68fb      	ldr	r3, [r7, #12]
 8014606:	681b      	ldr	r3, [r3, #0]
 8014608:	4a1a      	ldr	r2, [pc, #104]	@ (8014674 <HAL_TIMEx_HallSensor_Start_DMA+0x144>)
 801460a:	4293      	cmp	r3, r2
 801460c:	d009      	beq.n	8014622 <HAL_TIMEx_HallSensor_Start_DMA+0xf2>
 801460e:	68fb      	ldr	r3, [r7, #12]
 8014610:	681b      	ldr	r3, [r3, #0]
 8014612:	4a19      	ldr	r2, [pc, #100]	@ (8014678 <HAL_TIMEx_HallSensor_Start_DMA+0x148>)
 8014614:	4293      	cmp	r3, r2
 8014616:	d004      	beq.n	8014622 <HAL_TIMEx_HallSensor_Start_DMA+0xf2>
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	4a17      	ldr	r2, [pc, #92]	@ (801467c <HAL_TIMEx_HallSensor_Start_DMA+0x14c>)
 801461e:	4293      	cmp	r3, r2
 8014620:	d111      	bne.n	8014646 <HAL_TIMEx_HallSensor_Start_DMA+0x116>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8014622:	68fb      	ldr	r3, [r7, #12]
 8014624:	681b      	ldr	r3, [r3, #0]
 8014626:	689b      	ldr	r3, [r3, #8]
 8014628:	f003 0307 	and.w	r3, r3, #7
 801462c:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801462e:	693b      	ldr	r3, [r7, #16]
 8014630:	2b06      	cmp	r3, #6
 8014632:	d010      	beq.n	8014656 <HAL_TIMEx_HallSensor_Start_DMA+0x126>
    {
      __HAL_TIM_ENABLE(htim);
 8014634:	68fb      	ldr	r3, [r7, #12]
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	681a      	ldr	r2, [r3, #0]
 801463a:	68fb      	ldr	r3, [r7, #12]
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	f042 0201 	orr.w	r2, r2, #1
 8014642:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014644:	e007      	b.n	8014656 <HAL_TIMEx_HallSensor_Start_DMA+0x126>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8014646:	68fb      	ldr	r3, [r7, #12]
 8014648:	681b      	ldr	r3, [r3, #0]
 801464a:	681a      	ldr	r2, [r3, #0]
 801464c:	68fb      	ldr	r3, [r7, #12]
 801464e:	681b      	ldr	r3, [r3, #0]
 8014650:	f042 0201 	orr.w	r2, r2, #1
 8014654:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8014656:	2300      	movs	r3, #0
}
 8014658:	4618      	mov	r0, r3
 801465a:	3718      	adds	r7, #24
 801465c:	46bd      	mov	sp, r7
 801465e:	bd80      	pop	{r7, pc}
 8014660:	0801355d 	.word	0x0801355d
 8014664:	08013625 	.word	0x08013625
 8014668:	080133bb 	.word	0x080133bb
 801466c:	40010000 	.word	0x40010000
 8014670:	40000400 	.word	0x40000400
 8014674:	40000800 	.word	0x40000800
 8014678:	40000c00 	.word	0x40000c00
 801467c:	40014000 	.word	0x40014000

08014680 <HAL_TIMEx_HallSensor_Stop_DMA>:
  * @brief  Stops the TIM Hall Sensor Interface in DMA mode.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_DMA(TIM_HandleTypeDef *htim)
{
 8014680:	b580      	push	{r7, lr}
 8014682:	b082      	sub	sp, #8
 8014684:	af00      	add	r7, sp, #0
 8014686:	6078      	str	r0, [r7, #4]
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channel 1
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	681b      	ldr	r3, [r3, #0]
 801468c:	2200      	movs	r2, #0
 801468e:	2100      	movs	r1, #0
 8014690:	4618      	mov	r0, r3
 8014692:	f7ff fca5 	bl	8013fe0 <TIM_CCxChannelCmd>


  /* Disable the capture compare Interrupts 1 event */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	68da      	ldr	r2, [r3, #12]
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80146a4:	60da      	str	r2, [r3, #12]

  (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80146aa:	4618      	mov	r0, r3
 80146ac:	f7f1 ffe5 	bl	800667a <HAL_DMA_Abort_IT>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	681b      	ldr	r3, [r3, #0]
 80146b4:	6a1a      	ldr	r2, [r3, #32]
 80146b6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80146ba:	4013      	ands	r3, r2
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d10f      	bne.n	80146e0 <HAL_TIMEx_HallSensor_Stop_DMA+0x60>
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	681b      	ldr	r3, [r3, #0]
 80146c4:	6a1a      	ldr	r2, [r3, #32]
 80146c6:	f240 4344 	movw	r3, #1092	@ 0x444
 80146ca:	4013      	ands	r3, r2
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d107      	bne.n	80146e0 <HAL_TIMEx_HallSensor_Stop_DMA+0x60>
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	681b      	ldr	r3, [r3, #0]
 80146d4:	681a      	ldr	r2, [r3, #0]
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	681b      	ldr	r3, [r3, #0]
 80146da:	f022 0201 	bic.w	r2, r2, #1
 80146de:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	2201      	movs	r2, #1
 80146e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	2201      	movs	r2, #1
 80146ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Return function status */
  return HAL_OK;
 80146f0:	2300      	movs	r3, #0
}
 80146f2:	4618      	mov	r0, r3
 80146f4:	3708      	adds	r7, #8
 80146f6:	46bd      	mov	sp, r7
 80146f8:	bd80      	pop	{r7, pc}

080146fa <HAL_TIMEx_OCN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80146fa:	b580      	push	{r7, lr}
 80146fc:	b084      	sub	sp, #16
 80146fe:	af00      	add	r7, sp, #0
 8014700:	6078      	str	r0, [r7, #4]
 8014702:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8014704:	683b      	ldr	r3, [r7, #0]
 8014706:	2b00      	cmp	r3, #0
 8014708:	d109      	bne.n	801471e <HAL_TIMEx_OCN_Start+0x24>
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014710:	b2db      	uxtb	r3, r3
 8014712:	2b01      	cmp	r3, #1
 8014714:	bf14      	ite	ne
 8014716:	2301      	movne	r3, #1
 8014718:	2300      	moveq	r3, #0
 801471a:	b2db      	uxtb	r3, r3
 801471c:	e022      	b.n	8014764 <HAL_TIMEx_OCN_Start+0x6a>
 801471e:	683b      	ldr	r3, [r7, #0]
 8014720:	2b04      	cmp	r3, #4
 8014722:	d109      	bne.n	8014738 <HAL_TIMEx_OCN_Start+0x3e>
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801472a:	b2db      	uxtb	r3, r3
 801472c:	2b01      	cmp	r3, #1
 801472e:	bf14      	ite	ne
 8014730:	2301      	movne	r3, #1
 8014732:	2300      	moveq	r3, #0
 8014734:	b2db      	uxtb	r3, r3
 8014736:	e015      	b.n	8014764 <HAL_TIMEx_OCN_Start+0x6a>
 8014738:	683b      	ldr	r3, [r7, #0]
 801473a:	2b08      	cmp	r3, #8
 801473c:	d109      	bne.n	8014752 <HAL_TIMEx_OCN_Start+0x58>
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014744:	b2db      	uxtb	r3, r3
 8014746:	2b01      	cmp	r3, #1
 8014748:	bf14      	ite	ne
 801474a:	2301      	movne	r3, #1
 801474c:	2300      	moveq	r3, #0
 801474e:	b2db      	uxtb	r3, r3
 8014750:	e008      	b.n	8014764 <HAL_TIMEx_OCN_Start+0x6a>
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014758:	b2db      	uxtb	r3, r3
 801475a:	2b01      	cmp	r3, #1
 801475c:	bf14      	ite	ne
 801475e:	2301      	movne	r3, #1
 8014760:	2300      	moveq	r3, #0
 8014762:	b2db      	uxtb	r3, r3
 8014764:	2b00      	cmp	r3, #0
 8014766:	d001      	beq.n	801476c <HAL_TIMEx_OCN_Start+0x72>
  {
    return HAL_ERROR;
 8014768:	2301      	movs	r3, #1
 801476a:	e063      	b.n	8014834 <HAL_TIMEx_OCN_Start+0x13a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801476c:	683b      	ldr	r3, [r7, #0]
 801476e:	2b00      	cmp	r3, #0
 8014770:	d104      	bne.n	801477c <HAL_TIMEx_OCN_Start+0x82>
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	2202      	movs	r2, #2
 8014776:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801477a:	e013      	b.n	80147a4 <HAL_TIMEx_OCN_Start+0xaa>
 801477c:	683b      	ldr	r3, [r7, #0]
 801477e:	2b04      	cmp	r3, #4
 8014780:	d104      	bne.n	801478c <HAL_TIMEx_OCN_Start+0x92>
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	2202      	movs	r2, #2
 8014786:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801478a:	e00b      	b.n	80147a4 <HAL_TIMEx_OCN_Start+0xaa>
 801478c:	683b      	ldr	r3, [r7, #0]
 801478e:	2b08      	cmp	r3, #8
 8014790:	d104      	bne.n	801479c <HAL_TIMEx_OCN_Start+0xa2>
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	2202      	movs	r2, #2
 8014796:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801479a:	e003      	b.n	80147a4 <HAL_TIMEx_OCN_Start+0xaa>
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	2202      	movs	r2, #2
 80147a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	681b      	ldr	r3, [r3, #0]
 80147a8:	2204      	movs	r2, #4
 80147aa:	6839      	ldr	r1, [r7, #0]
 80147ac:	4618      	mov	r0, r3
 80147ae:	f001 fd5f 	bl	8016270 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	681b      	ldr	r3, [r3, #0]
 80147b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80147c0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	681b      	ldr	r3, [r3, #0]
 80147c6:	4a1d      	ldr	r2, [pc, #116]	@ (801483c <HAL_TIMEx_OCN_Start+0x142>)
 80147c8:	4293      	cmp	r3, r2
 80147ca:	d018      	beq.n	80147fe <HAL_TIMEx_OCN_Start+0x104>
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80147d4:	d013      	beq.n	80147fe <HAL_TIMEx_OCN_Start+0x104>
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	681b      	ldr	r3, [r3, #0]
 80147da:	4a19      	ldr	r2, [pc, #100]	@ (8014840 <HAL_TIMEx_OCN_Start+0x146>)
 80147dc:	4293      	cmp	r3, r2
 80147de:	d00e      	beq.n	80147fe <HAL_TIMEx_OCN_Start+0x104>
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	681b      	ldr	r3, [r3, #0]
 80147e4:	4a17      	ldr	r2, [pc, #92]	@ (8014844 <HAL_TIMEx_OCN_Start+0x14a>)
 80147e6:	4293      	cmp	r3, r2
 80147e8:	d009      	beq.n	80147fe <HAL_TIMEx_OCN_Start+0x104>
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	4a16      	ldr	r2, [pc, #88]	@ (8014848 <HAL_TIMEx_OCN_Start+0x14e>)
 80147f0:	4293      	cmp	r3, r2
 80147f2:	d004      	beq.n	80147fe <HAL_TIMEx_OCN_Start+0x104>
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	681b      	ldr	r3, [r3, #0]
 80147f8:	4a14      	ldr	r2, [pc, #80]	@ (801484c <HAL_TIMEx_OCN_Start+0x152>)
 80147fa:	4293      	cmp	r3, r2
 80147fc:	d111      	bne.n	8014822 <HAL_TIMEx_OCN_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	681b      	ldr	r3, [r3, #0]
 8014802:	689b      	ldr	r3, [r3, #8]
 8014804:	f003 0307 	and.w	r3, r3, #7
 8014808:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	2b06      	cmp	r3, #6
 801480e:	d010      	beq.n	8014832 <HAL_TIMEx_OCN_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	681b      	ldr	r3, [r3, #0]
 8014814:	681a      	ldr	r2, [r3, #0]
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	f042 0201 	orr.w	r2, r2, #1
 801481e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014820:	e007      	b.n	8014832 <HAL_TIMEx_OCN_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	681b      	ldr	r3, [r3, #0]
 8014826:	681a      	ldr	r2, [r3, #0]
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	681b      	ldr	r3, [r3, #0]
 801482c:	f042 0201 	orr.w	r2, r2, #1
 8014830:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8014832:	2300      	movs	r3, #0
}
 8014834:	4618      	mov	r0, r3
 8014836:	3710      	adds	r7, #16
 8014838:	46bd      	mov	sp, r7
 801483a:	bd80      	pop	{r7, pc}
 801483c:	40010000 	.word	0x40010000
 8014840:	40000400 	.word	0x40000400
 8014844:	40000800 	.word	0x40000800
 8014848:	40000c00 	.word	0x40000c00
 801484c:	40014000 	.word	0x40014000

08014850 <HAL_TIMEx_OCN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8014850:	b580      	push	{r7, lr}
 8014852:	b082      	sub	sp, #8
 8014854:	af00      	add	r7, sp, #0
 8014856:	6078      	str	r0, [r7, #4]
 8014858:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	681b      	ldr	r3, [r3, #0]
 801485e:	2200      	movs	r2, #0
 8014860:	6839      	ldr	r1, [r7, #0]
 8014862:	4618      	mov	r0, r3
 8014864:	f001 fd04 	bl	8016270 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	681b      	ldr	r3, [r3, #0]
 801486c:	6a1a      	ldr	r2, [r3, #32]
 801486e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8014872:	4013      	ands	r3, r2
 8014874:	2b00      	cmp	r3, #0
 8014876:	d10f      	bne.n	8014898 <HAL_TIMEx_OCN_Stop+0x48>
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	681b      	ldr	r3, [r3, #0]
 801487c:	6a1a      	ldr	r2, [r3, #32]
 801487e:	f240 4344 	movw	r3, #1092	@ 0x444
 8014882:	4013      	ands	r3, r2
 8014884:	2b00      	cmp	r3, #0
 8014886:	d107      	bne.n	8014898 <HAL_TIMEx_OCN_Stop+0x48>
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	681b      	ldr	r3, [r3, #0]
 801488c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	681b      	ldr	r3, [r3, #0]
 8014892:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8014896:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	6a1a      	ldr	r2, [r3, #32]
 801489e:	f241 1311 	movw	r3, #4369	@ 0x1111
 80148a2:	4013      	ands	r3, r2
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d10f      	bne.n	80148c8 <HAL_TIMEx_OCN_Stop+0x78>
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	6a1a      	ldr	r2, [r3, #32]
 80148ae:	f240 4344 	movw	r3, #1092	@ 0x444
 80148b2:	4013      	ands	r3, r2
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	d107      	bne.n	80148c8 <HAL_TIMEx_OCN_Stop+0x78>
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	681b      	ldr	r3, [r3, #0]
 80148bc:	681a      	ldr	r2, [r3, #0]
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	681b      	ldr	r3, [r3, #0]
 80148c2:	f022 0201 	bic.w	r2, r2, #1
 80148c6:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80148c8:	683b      	ldr	r3, [r7, #0]
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	d104      	bne.n	80148d8 <HAL_TIMEx_OCN_Stop+0x88>
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	2201      	movs	r2, #1
 80148d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80148d6:	e013      	b.n	8014900 <HAL_TIMEx_OCN_Stop+0xb0>
 80148d8:	683b      	ldr	r3, [r7, #0]
 80148da:	2b04      	cmp	r3, #4
 80148dc:	d104      	bne.n	80148e8 <HAL_TIMEx_OCN_Stop+0x98>
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	2201      	movs	r2, #1
 80148e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80148e6:	e00b      	b.n	8014900 <HAL_TIMEx_OCN_Stop+0xb0>
 80148e8:	683b      	ldr	r3, [r7, #0]
 80148ea:	2b08      	cmp	r3, #8
 80148ec:	d104      	bne.n	80148f8 <HAL_TIMEx_OCN_Stop+0xa8>
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	2201      	movs	r2, #1
 80148f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80148f6:	e003      	b.n	8014900 <HAL_TIMEx_OCN_Stop+0xb0>
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	2201      	movs	r2, #1
 80148fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8014900:	2300      	movs	r3, #0
}
 8014902:	4618      	mov	r0, r3
 8014904:	3708      	adds	r7, #8
 8014906:	46bd      	mov	sp, r7
 8014908:	bd80      	pop	{r7, pc}

0801490a <HAL_TIMEx_OCN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801490a:	b580      	push	{r7, lr}
 801490c:	b084      	sub	sp, #16
 801490e:	af00      	add	r7, sp, #0
 8014910:	6078      	str	r0, [r7, #4]
 8014912:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8014914:	2300      	movs	r3, #0
 8014916:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8014918:	683b      	ldr	r3, [r7, #0]
 801491a:	2b00      	cmp	r3, #0
 801491c:	d109      	bne.n	8014932 <HAL_TIMEx_OCN_Start_IT+0x28>
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014924:	b2db      	uxtb	r3, r3
 8014926:	2b01      	cmp	r3, #1
 8014928:	bf14      	ite	ne
 801492a:	2301      	movne	r3, #1
 801492c:	2300      	moveq	r3, #0
 801492e:	b2db      	uxtb	r3, r3
 8014930:	e022      	b.n	8014978 <HAL_TIMEx_OCN_Start_IT+0x6e>
 8014932:	683b      	ldr	r3, [r7, #0]
 8014934:	2b04      	cmp	r3, #4
 8014936:	d109      	bne.n	801494c <HAL_TIMEx_OCN_Start_IT+0x42>
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801493e:	b2db      	uxtb	r3, r3
 8014940:	2b01      	cmp	r3, #1
 8014942:	bf14      	ite	ne
 8014944:	2301      	movne	r3, #1
 8014946:	2300      	moveq	r3, #0
 8014948:	b2db      	uxtb	r3, r3
 801494a:	e015      	b.n	8014978 <HAL_TIMEx_OCN_Start_IT+0x6e>
 801494c:	683b      	ldr	r3, [r7, #0]
 801494e:	2b08      	cmp	r3, #8
 8014950:	d109      	bne.n	8014966 <HAL_TIMEx_OCN_Start_IT+0x5c>
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014958:	b2db      	uxtb	r3, r3
 801495a:	2b01      	cmp	r3, #1
 801495c:	bf14      	ite	ne
 801495e:	2301      	movne	r3, #1
 8014960:	2300      	moveq	r3, #0
 8014962:	b2db      	uxtb	r3, r3
 8014964:	e008      	b.n	8014978 <HAL_TIMEx_OCN_Start_IT+0x6e>
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801496c:	b2db      	uxtb	r3, r3
 801496e:	2b01      	cmp	r3, #1
 8014970:	bf14      	ite	ne
 8014972:	2301      	movne	r3, #1
 8014974:	2300      	moveq	r3, #0
 8014976:	b2db      	uxtb	r3, r3
 8014978:	2b00      	cmp	r3, #0
 801497a:	d001      	beq.n	8014980 <HAL_TIMEx_OCN_Start_IT+0x76>
  {
    return HAL_ERROR;
 801497c:	2301      	movs	r3, #1
 801497e:	e099      	b.n	8014ab4 <HAL_TIMEx_OCN_Start_IT+0x1aa>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8014980:	683b      	ldr	r3, [r7, #0]
 8014982:	2b00      	cmp	r3, #0
 8014984:	d104      	bne.n	8014990 <HAL_TIMEx_OCN_Start_IT+0x86>
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	2202      	movs	r2, #2
 801498a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801498e:	e013      	b.n	80149b8 <HAL_TIMEx_OCN_Start_IT+0xae>
 8014990:	683b      	ldr	r3, [r7, #0]
 8014992:	2b04      	cmp	r3, #4
 8014994:	d104      	bne.n	80149a0 <HAL_TIMEx_OCN_Start_IT+0x96>
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	2202      	movs	r2, #2
 801499a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801499e:	e00b      	b.n	80149b8 <HAL_TIMEx_OCN_Start_IT+0xae>
 80149a0:	683b      	ldr	r3, [r7, #0]
 80149a2:	2b08      	cmp	r3, #8
 80149a4:	d104      	bne.n	80149b0 <HAL_TIMEx_OCN_Start_IT+0xa6>
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	2202      	movs	r2, #2
 80149aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80149ae:	e003      	b.n	80149b8 <HAL_TIMEx_OCN_Start_IT+0xae>
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	2202      	movs	r2, #2
 80149b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80149b8:	683b      	ldr	r3, [r7, #0]
 80149ba:	2b08      	cmp	r3, #8
 80149bc:	d01b      	beq.n	80149f6 <HAL_TIMEx_OCN_Start_IT+0xec>
 80149be:	683b      	ldr	r3, [r7, #0]
 80149c0:	2b08      	cmp	r3, #8
 80149c2:	d821      	bhi.n	8014a08 <HAL_TIMEx_OCN_Start_IT+0xfe>
 80149c4:	683b      	ldr	r3, [r7, #0]
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	d003      	beq.n	80149d2 <HAL_TIMEx_OCN_Start_IT+0xc8>
 80149ca:	683b      	ldr	r3, [r7, #0]
 80149cc:	2b04      	cmp	r3, #4
 80149ce:	d009      	beq.n	80149e4 <HAL_TIMEx_OCN_Start_IT+0xda>
 80149d0:	e01a      	b.n	8014a08 <HAL_TIMEx_OCN_Start_IT+0xfe>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Output Compare interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	681b      	ldr	r3, [r3, #0]
 80149d6:	68da      	ldr	r2, [r3, #12]
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	681b      	ldr	r3, [r3, #0]
 80149dc:	f042 0202 	orr.w	r2, r2, #2
 80149e0:	60da      	str	r2, [r3, #12]
      break;
 80149e2:	e014      	b.n	8014a0e <HAL_TIMEx_OCN_Start_IT+0x104>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Output Compare interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	68da      	ldr	r2, [r3, #12]
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	f042 0204 	orr.w	r2, r2, #4
 80149f2:	60da      	str	r2, [r3, #12]
      break;
 80149f4:	e00b      	b.n	8014a0e <HAL_TIMEx_OCN_Start_IT+0x104>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Output Compare interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	681b      	ldr	r3, [r3, #0]
 80149fa:	68da      	ldr	r2, [r3, #12]
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	681b      	ldr	r3, [r3, #0]
 8014a00:	f042 0208 	orr.w	r2, r2, #8
 8014a04:	60da      	str	r2, [r3, #12]
      break;
 8014a06:	e002      	b.n	8014a0e <HAL_TIMEx_OCN_Start_IT+0x104>
    }


    default:
      status = HAL_ERROR;
 8014a08:	2301      	movs	r3, #1
 8014a0a:	73fb      	strb	r3, [r7, #15]
      break;
 8014a0c:	bf00      	nop
  }

  if (status == HAL_OK)
 8014a0e:	7bfb      	ldrb	r3, [r7, #15]
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	d14e      	bne.n	8014ab2 <HAL_TIMEx_OCN_Start_IT+0x1a8>
  {
    /* Enable the TIM Break interrupt */
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	681b      	ldr	r3, [r3, #0]
 8014a18:	68da      	ldr	r2, [r3, #12]
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	681b      	ldr	r3, [r3, #0]
 8014a1e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8014a22:	60da      	str	r2, [r3, #12]

    /* Enable the Capture compare channel N */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	681b      	ldr	r3, [r3, #0]
 8014a28:	2204      	movs	r2, #4
 8014a2a:	6839      	ldr	r1, [r7, #0]
 8014a2c:	4618      	mov	r0, r3
 8014a2e:	f001 fc1f 	bl	8016270 <TIM_CCxNChannelCmd>

    /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	681b      	ldr	r3, [r3, #0]
 8014a36:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8014a40:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	681b      	ldr	r3, [r3, #0]
 8014a46:	4a1d      	ldr	r2, [pc, #116]	@ (8014abc <HAL_TIMEx_OCN_Start_IT+0x1b2>)
 8014a48:	4293      	cmp	r3, r2
 8014a4a:	d018      	beq.n	8014a7e <HAL_TIMEx_OCN_Start_IT+0x174>
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014a54:	d013      	beq.n	8014a7e <HAL_TIMEx_OCN_Start_IT+0x174>
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	4a19      	ldr	r2, [pc, #100]	@ (8014ac0 <HAL_TIMEx_OCN_Start_IT+0x1b6>)
 8014a5c:	4293      	cmp	r3, r2
 8014a5e:	d00e      	beq.n	8014a7e <HAL_TIMEx_OCN_Start_IT+0x174>
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	681b      	ldr	r3, [r3, #0]
 8014a64:	4a17      	ldr	r2, [pc, #92]	@ (8014ac4 <HAL_TIMEx_OCN_Start_IT+0x1ba>)
 8014a66:	4293      	cmp	r3, r2
 8014a68:	d009      	beq.n	8014a7e <HAL_TIMEx_OCN_Start_IT+0x174>
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	681b      	ldr	r3, [r3, #0]
 8014a6e:	4a16      	ldr	r2, [pc, #88]	@ (8014ac8 <HAL_TIMEx_OCN_Start_IT+0x1be>)
 8014a70:	4293      	cmp	r3, r2
 8014a72:	d004      	beq.n	8014a7e <HAL_TIMEx_OCN_Start_IT+0x174>
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	681b      	ldr	r3, [r3, #0]
 8014a78:	4a14      	ldr	r2, [pc, #80]	@ (8014acc <HAL_TIMEx_OCN_Start_IT+0x1c2>)
 8014a7a:	4293      	cmp	r3, r2
 8014a7c:	d111      	bne.n	8014aa2 <HAL_TIMEx_OCN_Start_IT+0x198>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	681b      	ldr	r3, [r3, #0]
 8014a82:	689b      	ldr	r3, [r3, #8]
 8014a84:	f003 0307 	and.w	r3, r3, #7
 8014a88:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014a8a:	68bb      	ldr	r3, [r7, #8]
 8014a8c:	2b06      	cmp	r3, #6
 8014a8e:	d010      	beq.n	8014ab2 <HAL_TIMEx_OCN_Start_IT+0x1a8>
      {
        __HAL_TIM_ENABLE(htim);
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	681b      	ldr	r3, [r3, #0]
 8014a94:	681a      	ldr	r2, [r3, #0]
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	681b      	ldr	r3, [r3, #0]
 8014a9a:	f042 0201 	orr.w	r2, r2, #1
 8014a9e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014aa0:	e007      	b.n	8014ab2 <HAL_TIMEx_OCN_Start_IT+0x1a8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	681b      	ldr	r3, [r3, #0]
 8014aa6:	681a      	ldr	r2, [r3, #0]
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	681b      	ldr	r3, [r3, #0]
 8014aac:	f042 0201 	orr.w	r2, r2, #1
 8014ab0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8014ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8014ab4:	4618      	mov	r0, r3
 8014ab6:	3710      	adds	r7, #16
 8014ab8:	46bd      	mov	sp, r7
 8014aba:	bd80      	pop	{r7, pc}
 8014abc:	40010000 	.word	0x40010000
 8014ac0:	40000400 	.word	0x40000400
 8014ac4:	40000800 	.word	0x40000800
 8014ac8:	40000c00 	.word	0x40000c00
 8014acc:	40014000 	.word	0x40014000

08014ad0 <HAL_TIMEx_OCN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8014ad0:	b580      	push	{r7, lr}
 8014ad2:	b084      	sub	sp, #16
 8014ad4:	af00      	add	r7, sp, #0
 8014ad6:	6078      	str	r0, [r7, #4]
 8014ad8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8014ada:	2300      	movs	r3, #0
 8014adc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpccer;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8014ade:	683b      	ldr	r3, [r7, #0]
 8014ae0:	2b08      	cmp	r3, #8
 8014ae2:	d01b      	beq.n	8014b1c <HAL_TIMEx_OCN_Stop_IT+0x4c>
 8014ae4:	683b      	ldr	r3, [r7, #0]
 8014ae6:	2b08      	cmp	r3, #8
 8014ae8:	d821      	bhi.n	8014b2e <HAL_TIMEx_OCN_Stop_IT+0x5e>
 8014aea:	683b      	ldr	r3, [r7, #0]
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	d003      	beq.n	8014af8 <HAL_TIMEx_OCN_Stop_IT+0x28>
 8014af0:	683b      	ldr	r3, [r7, #0]
 8014af2:	2b04      	cmp	r3, #4
 8014af4:	d009      	beq.n	8014b0a <HAL_TIMEx_OCN_Stop_IT+0x3a>
 8014af6:	e01a      	b.n	8014b2e <HAL_TIMEx_OCN_Stop_IT+0x5e>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Output Compare interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	681b      	ldr	r3, [r3, #0]
 8014afc:	68da      	ldr	r2, [r3, #12]
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	681b      	ldr	r3, [r3, #0]
 8014b02:	f022 0202 	bic.w	r2, r2, #2
 8014b06:	60da      	str	r2, [r3, #12]
      break;
 8014b08:	e014      	b.n	8014b34 <HAL_TIMEx_OCN_Stop_IT+0x64>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Output Compare interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	681b      	ldr	r3, [r3, #0]
 8014b0e:	68da      	ldr	r2, [r3, #12]
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	681b      	ldr	r3, [r3, #0]
 8014b14:	f022 0204 	bic.w	r2, r2, #4
 8014b18:	60da      	str	r2, [r3, #12]
      break;
 8014b1a:	e00b      	b.n	8014b34 <HAL_TIMEx_OCN_Stop_IT+0x64>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Output Compare interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	681b      	ldr	r3, [r3, #0]
 8014b20:	68da      	ldr	r2, [r3, #12]
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	681b      	ldr	r3, [r3, #0]
 8014b26:	f022 0208 	bic.w	r2, r2, #8
 8014b2a:	60da      	str	r2, [r3, #12]
      break;
 8014b2c:	e002      	b.n	8014b34 <HAL_TIMEx_OCN_Stop_IT+0x64>
    }

    default:
      status = HAL_ERROR;
 8014b2e:	2301      	movs	r3, #1
 8014b30:	73fb      	strb	r3, [r7, #15]
      break;
 8014b32:	bf00      	nop
  }

  if (status == HAL_OK)
 8014b34:	7bfb      	ldrb	r3, [r7, #15]
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d164      	bne.n	8014c04 <HAL_TIMEx_OCN_Stop_IT+0x134>
  {
    /* Disable the Capture compare channel N */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	681b      	ldr	r3, [r3, #0]
 8014b3e:	2200      	movs	r2, #0
 8014b40:	6839      	ldr	r1, [r7, #0]
 8014b42:	4618      	mov	r0, r3
 8014b44:	f001 fb94 	bl	8016270 <TIM_CCxNChannelCmd>

    /* Disable the TIM Break interrupt (only if no more channel is active) */
    tmpccer = htim->Instance->CCER;
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	681b      	ldr	r3, [r3, #0]
 8014b4c:	6a1b      	ldr	r3, [r3, #32]
 8014b4e:	60bb      	str	r3, [r7, #8]
    if ((tmpccer & TIM_CCER_CCxNE_MASK) == (uint32_t)RESET)
 8014b50:	68ba      	ldr	r2, [r7, #8]
 8014b52:	f240 4344 	movw	r3, #1092	@ 0x444
 8014b56:	4013      	ands	r3, r2
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d107      	bne.n	8014b6c <HAL_TIMEx_OCN_Stop_IT+0x9c>
    {
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	681b      	ldr	r3, [r3, #0]
 8014b60:	68da      	ldr	r2, [r3, #12]
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	681b      	ldr	r3, [r3, #0]
 8014b66:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8014b6a:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	681b      	ldr	r3, [r3, #0]
 8014b70:	6a1a      	ldr	r2, [r3, #32]
 8014b72:	f241 1311 	movw	r3, #4369	@ 0x1111
 8014b76:	4013      	ands	r3, r2
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	d10f      	bne.n	8014b9c <HAL_TIMEx_OCN_Stop_IT+0xcc>
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	681b      	ldr	r3, [r3, #0]
 8014b80:	6a1a      	ldr	r2, [r3, #32]
 8014b82:	f240 4344 	movw	r3, #1092	@ 0x444
 8014b86:	4013      	ands	r3, r2
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	d107      	bne.n	8014b9c <HAL_TIMEx_OCN_Stop_IT+0xcc>
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	681b      	ldr	r3, [r3, #0]
 8014b90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	681b      	ldr	r3, [r3, #0]
 8014b96:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8014b9a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	6a1a      	ldr	r2, [r3, #32]
 8014ba2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8014ba6:	4013      	ands	r3, r2
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d10f      	bne.n	8014bcc <HAL_TIMEx_OCN_Stop_IT+0xfc>
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	681b      	ldr	r3, [r3, #0]
 8014bb0:	6a1a      	ldr	r2, [r3, #32]
 8014bb2:	f240 4344 	movw	r3, #1092	@ 0x444
 8014bb6:	4013      	ands	r3, r2
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	d107      	bne.n	8014bcc <HAL_TIMEx_OCN_Stop_IT+0xfc>
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	681b      	ldr	r3, [r3, #0]
 8014bc0:	681a      	ldr	r2, [r3, #0]
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	681b      	ldr	r3, [r3, #0]
 8014bc6:	f022 0201 	bic.w	r2, r2, #1
 8014bca:	601a      	str	r2, [r3, #0]

    /* Set the TIM complementary channel state */
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8014bcc:	683b      	ldr	r3, [r7, #0]
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d104      	bne.n	8014bdc <HAL_TIMEx_OCN_Stop_IT+0x10c>
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	2201      	movs	r2, #1
 8014bd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8014bda:	e013      	b.n	8014c04 <HAL_TIMEx_OCN_Stop_IT+0x134>
 8014bdc:	683b      	ldr	r3, [r7, #0]
 8014bde:	2b04      	cmp	r3, #4
 8014be0:	d104      	bne.n	8014bec <HAL_TIMEx_OCN_Stop_IT+0x11c>
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	2201      	movs	r2, #1
 8014be6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8014bea:	e00b      	b.n	8014c04 <HAL_TIMEx_OCN_Stop_IT+0x134>
 8014bec:	683b      	ldr	r3, [r7, #0]
 8014bee:	2b08      	cmp	r3, #8
 8014bf0:	d104      	bne.n	8014bfc <HAL_TIMEx_OCN_Stop_IT+0x12c>
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	2201      	movs	r2, #1
 8014bf6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014bfa:	e003      	b.n	8014c04 <HAL_TIMEx_OCN_Stop_IT+0x134>
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	2201      	movs	r2, #1
 8014c00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 8014c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c06:	4618      	mov	r0, r3
 8014c08:	3710      	adds	r7, #16
 8014c0a:	46bd      	mov	sp, r7
 8014c0c:	bd80      	pop	{r7, pc}

08014c0e <HAL_TIMEx_OCN_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                          uint16_t Length)
{
 8014c0e:	b580      	push	{r7, lr}
 8014c10:	b086      	sub	sp, #24
 8014c12:	af00      	add	r7, sp, #0
 8014c14:	60f8      	str	r0, [r7, #12]
 8014c16:	60b9      	str	r1, [r7, #8]
 8014c18:	607a      	str	r2, [r7, #4]
 8014c1a:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8014c1c:	2300      	movs	r3, #0
 8014c1e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Set the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8014c20:	68bb      	ldr	r3, [r7, #8]
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d109      	bne.n	8014c3a <HAL_TIMEx_OCN_Start_DMA+0x2c>
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014c2c:	b2db      	uxtb	r3, r3
 8014c2e:	2b02      	cmp	r3, #2
 8014c30:	bf0c      	ite	eq
 8014c32:	2301      	moveq	r3, #1
 8014c34:	2300      	movne	r3, #0
 8014c36:	b2db      	uxtb	r3, r3
 8014c38:	e022      	b.n	8014c80 <HAL_TIMEx_OCN_Start_DMA+0x72>
 8014c3a:	68bb      	ldr	r3, [r7, #8]
 8014c3c:	2b04      	cmp	r3, #4
 8014c3e:	d109      	bne.n	8014c54 <HAL_TIMEx_OCN_Start_DMA+0x46>
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8014c46:	b2db      	uxtb	r3, r3
 8014c48:	2b02      	cmp	r3, #2
 8014c4a:	bf0c      	ite	eq
 8014c4c:	2301      	moveq	r3, #1
 8014c4e:	2300      	movne	r3, #0
 8014c50:	b2db      	uxtb	r3, r3
 8014c52:	e015      	b.n	8014c80 <HAL_TIMEx_OCN_Start_DMA+0x72>
 8014c54:	68bb      	ldr	r3, [r7, #8]
 8014c56:	2b08      	cmp	r3, #8
 8014c58:	d109      	bne.n	8014c6e <HAL_TIMEx_OCN_Start_DMA+0x60>
 8014c5a:	68fb      	ldr	r3, [r7, #12]
 8014c5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014c60:	b2db      	uxtb	r3, r3
 8014c62:	2b02      	cmp	r3, #2
 8014c64:	bf0c      	ite	eq
 8014c66:	2301      	moveq	r3, #1
 8014c68:	2300      	movne	r3, #0
 8014c6a:	b2db      	uxtb	r3, r3
 8014c6c:	e008      	b.n	8014c80 <HAL_TIMEx_OCN_Start_DMA+0x72>
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014c74:	b2db      	uxtb	r3, r3
 8014c76:	2b02      	cmp	r3, #2
 8014c78:	bf0c      	ite	eq
 8014c7a:	2301      	moveq	r3, #1
 8014c7c:	2300      	movne	r3, #0
 8014c7e:	b2db      	uxtb	r3, r3
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	d001      	beq.n	8014c88 <HAL_TIMEx_OCN_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8014c84:	2302      	movs	r3, #2
 8014c86:	e11f      	b.n	8014ec8 <HAL_TIMEx_OCN_Start_DMA+0x2ba>
  }
  else if (TIM_CHANNEL_N_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8014c88:	68bb      	ldr	r3, [r7, #8]
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d109      	bne.n	8014ca2 <HAL_TIMEx_OCN_Start_DMA+0x94>
 8014c8e:	68fb      	ldr	r3, [r7, #12]
 8014c90:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014c94:	b2db      	uxtb	r3, r3
 8014c96:	2b01      	cmp	r3, #1
 8014c98:	bf0c      	ite	eq
 8014c9a:	2301      	moveq	r3, #1
 8014c9c:	2300      	movne	r3, #0
 8014c9e:	b2db      	uxtb	r3, r3
 8014ca0:	e022      	b.n	8014ce8 <HAL_TIMEx_OCN_Start_DMA+0xda>
 8014ca2:	68bb      	ldr	r3, [r7, #8]
 8014ca4:	2b04      	cmp	r3, #4
 8014ca6:	d109      	bne.n	8014cbc <HAL_TIMEx_OCN_Start_DMA+0xae>
 8014ca8:	68fb      	ldr	r3, [r7, #12]
 8014caa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8014cae:	b2db      	uxtb	r3, r3
 8014cb0:	2b01      	cmp	r3, #1
 8014cb2:	bf0c      	ite	eq
 8014cb4:	2301      	moveq	r3, #1
 8014cb6:	2300      	movne	r3, #0
 8014cb8:	b2db      	uxtb	r3, r3
 8014cba:	e015      	b.n	8014ce8 <HAL_TIMEx_OCN_Start_DMA+0xda>
 8014cbc:	68bb      	ldr	r3, [r7, #8]
 8014cbe:	2b08      	cmp	r3, #8
 8014cc0:	d109      	bne.n	8014cd6 <HAL_TIMEx_OCN_Start_DMA+0xc8>
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014cc8:	b2db      	uxtb	r3, r3
 8014cca:	2b01      	cmp	r3, #1
 8014ccc:	bf0c      	ite	eq
 8014cce:	2301      	moveq	r3, #1
 8014cd0:	2300      	movne	r3, #0
 8014cd2:	b2db      	uxtb	r3, r3
 8014cd4:	e008      	b.n	8014ce8 <HAL_TIMEx_OCN_Start_DMA+0xda>
 8014cd6:	68fb      	ldr	r3, [r7, #12]
 8014cd8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014cdc:	b2db      	uxtb	r3, r3
 8014cde:	2b01      	cmp	r3, #1
 8014ce0:	bf0c      	ite	eq
 8014ce2:	2301      	moveq	r3, #1
 8014ce4:	2300      	movne	r3, #0
 8014ce6:	b2db      	uxtb	r3, r3
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d024      	beq.n	8014d36 <HAL_TIMEx_OCN_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	d002      	beq.n	8014cf8 <HAL_TIMEx_OCN_Start_DMA+0xea>
 8014cf2:	887b      	ldrh	r3, [r7, #2]
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	d101      	bne.n	8014cfc <HAL_TIMEx_OCN_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8014cf8:	2301      	movs	r3, #1
 8014cfa:	e0e5      	b.n	8014ec8 <HAL_TIMEx_OCN_Start_DMA+0x2ba>
    }
    else
    {
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8014cfc:	68bb      	ldr	r3, [r7, #8]
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d104      	bne.n	8014d0c <HAL_TIMEx_OCN_Start_DMA+0xfe>
 8014d02:	68fb      	ldr	r3, [r7, #12]
 8014d04:	2202      	movs	r2, #2
 8014d06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8014d0a:	e016      	b.n	8014d3a <HAL_TIMEx_OCN_Start_DMA+0x12c>
 8014d0c:	68bb      	ldr	r3, [r7, #8]
 8014d0e:	2b04      	cmp	r3, #4
 8014d10:	d104      	bne.n	8014d1c <HAL_TIMEx_OCN_Start_DMA+0x10e>
 8014d12:	68fb      	ldr	r3, [r7, #12]
 8014d14:	2202      	movs	r2, #2
 8014d16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8014d1a:	e00e      	b.n	8014d3a <HAL_TIMEx_OCN_Start_DMA+0x12c>
 8014d1c:	68bb      	ldr	r3, [r7, #8]
 8014d1e:	2b08      	cmp	r3, #8
 8014d20:	d104      	bne.n	8014d2c <HAL_TIMEx_OCN_Start_DMA+0x11e>
 8014d22:	68fb      	ldr	r3, [r7, #12]
 8014d24:	2202      	movs	r2, #2
 8014d26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014d2a:	e006      	b.n	8014d3a <HAL_TIMEx_OCN_Start_DMA+0x12c>
 8014d2c:	68fb      	ldr	r3, [r7, #12]
 8014d2e:	2202      	movs	r2, #2
 8014d30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8014d34:	e001      	b.n	8014d3a <HAL_TIMEx_OCN_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8014d36:	2301      	movs	r3, #1
 8014d38:	e0c6      	b.n	8014ec8 <HAL_TIMEx_OCN_Start_DMA+0x2ba>
  }

  switch (Channel)
 8014d3a:	68bb      	ldr	r3, [r7, #8]
 8014d3c:	2b08      	cmp	r3, #8
 8014d3e:	d051      	beq.n	8014de4 <HAL_TIMEx_OCN_Start_DMA+0x1d6>
 8014d40:	68bb      	ldr	r3, [r7, #8]
 8014d42:	2b08      	cmp	r3, #8
 8014d44:	d872      	bhi.n	8014e2c <HAL_TIMEx_OCN_Start_DMA+0x21e>
 8014d46:	68bb      	ldr	r3, [r7, #8]
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d003      	beq.n	8014d54 <HAL_TIMEx_OCN_Start_DMA+0x146>
 8014d4c:	68bb      	ldr	r3, [r7, #8]
 8014d4e:	2b04      	cmp	r3, #4
 8014d50:	d024      	beq.n	8014d9c <HAL_TIMEx_OCN_Start_DMA+0x18e>
 8014d52:	e06b      	b.n	8014e2c <HAL_TIMEx_OCN_Start_DMA+0x21e>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 8014d54:	68fb      	ldr	r3, [r7, #12]
 8014d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014d58:	4a5d      	ldr	r2, [pc, #372]	@ (8014ed0 <HAL_TIMEx_OCN_Start_DMA+0x2c2>)
 8014d5a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8014d5c:	68fb      	ldr	r3, [r7, #12]
 8014d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014d60:	4a5c      	ldr	r2, [pc, #368]	@ (8014ed4 <HAL_TIMEx_OCN_Start_DMA+0x2c6>)
 8014d62:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAErrorCCxN ;
 8014d64:	68fb      	ldr	r3, [r7, #12]
 8014d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014d68:	4a5b      	ldr	r2, [pc, #364]	@ (8014ed8 <HAL_TIMEx_OCN_Start_DMA+0x2ca>)
 8014d6a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8014d6c:	68fb      	ldr	r3, [r7, #12]
 8014d6e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8014d70:	6879      	ldr	r1, [r7, #4]
 8014d72:	68fb      	ldr	r3, [r7, #12]
 8014d74:	681b      	ldr	r3, [r3, #0]
 8014d76:	3334      	adds	r3, #52	@ 0x34
 8014d78:	461a      	mov	r2, r3
 8014d7a:	887b      	ldrh	r3, [r7, #2]
 8014d7c:	f7f1 fbb5 	bl	80064ea <HAL_DMA_Start_IT>
 8014d80:	4603      	mov	r3, r0
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d001      	beq.n	8014d8a <HAL_TIMEx_OCN_Start_DMA+0x17c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8014d86:	2301      	movs	r3, #1
 8014d88:	e09e      	b.n	8014ec8 <HAL_TIMEx_OCN_Start_DMA+0x2ba>
      }
      /* Enable the TIM Output Compare DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8014d8a:	68fb      	ldr	r3, [r7, #12]
 8014d8c:	681b      	ldr	r3, [r3, #0]
 8014d8e:	68da      	ldr	r2, [r3, #12]
 8014d90:	68fb      	ldr	r3, [r7, #12]
 8014d92:	681b      	ldr	r3, [r3, #0]
 8014d94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014d98:	60da      	str	r2, [r3, #12]
      break;
 8014d9a:	e04a      	b.n	8014e32 <HAL_TIMEx_OCN_Start_DMA+0x224>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 8014d9c:	68fb      	ldr	r3, [r7, #12]
 8014d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014da0:	4a4b      	ldr	r2, [pc, #300]	@ (8014ed0 <HAL_TIMEx_OCN_Start_DMA+0x2c2>)
 8014da2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8014da4:	68fb      	ldr	r3, [r7, #12]
 8014da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014da8:	4a4a      	ldr	r2, [pc, #296]	@ (8014ed4 <HAL_TIMEx_OCN_Start_DMA+0x2c6>)
 8014daa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAErrorCCxN ;
 8014dac:	68fb      	ldr	r3, [r7, #12]
 8014dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014db0:	4a49      	ldr	r2, [pc, #292]	@ (8014ed8 <HAL_TIMEx_OCN_Start_DMA+0x2ca>)
 8014db2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8014db4:	68fb      	ldr	r3, [r7, #12]
 8014db6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8014db8:	6879      	ldr	r1, [r7, #4]
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	681b      	ldr	r3, [r3, #0]
 8014dbe:	3338      	adds	r3, #56	@ 0x38
 8014dc0:	461a      	mov	r2, r3
 8014dc2:	887b      	ldrh	r3, [r7, #2]
 8014dc4:	f7f1 fb91 	bl	80064ea <HAL_DMA_Start_IT>
 8014dc8:	4603      	mov	r3, r0
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	d001      	beq.n	8014dd2 <HAL_TIMEx_OCN_Start_DMA+0x1c4>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8014dce:	2301      	movs	r3, #1
 8014dd0:	e07a      	b.n	8014ec8 <HAL_TIMEx_OCN_Start_DMA+0x2ba>
      }
      /* Enable the TIM Output Compare DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	681b      	ldr	r3, [r3, #0]
 8014dd6:	68da      	ldr	r2, [r3, #12]
 8014dd8:	68fb      	ldr	r3, [r7, #12]
 8014dda:	681b      	ldr	r3, [r3, #0]
 8014ddc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8014de0:	60da      	str	r2, [r3, #12]
      break;
 8014de2:	e026      	b.n	8014e32 <HAL_TIMEx_OCN_Start_DMA+0x224>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 8014de4:	68fb      	ldr	r3, [r7, #12]
 8014de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014de8:	4a39      	ldr	r2, [pc, #228]	@ (8014ed0 <HAL_TIMEx_OCN_Start_DMA+0x2c2>)
 8014dea:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8014dec:	68fb      	ldr	r3, [r7, #12]
 8014dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014df0:	4a38      	ldr	r2, [pc, #224]	@ (8014ed4 <HAL_TIMEx_OCN_Start_DMA+0x2c6>)
 8014df2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAErrorCCxN ;
 8014df4:	68fb      	ldr	r3, [r7, #12]
 8014df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014df8:	4a37      	ldr	r2, [pc, #220]	@ (8014ed8 <HAL_TIMEx_OCN_Start_DMA+0x2ca>)
 8014dfa:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8014dfc:	68fb      	ldr	r3, [r7, #12]
 8014dfe:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8014e00:	6879      	ldr	r1, [r7, #4]
 8014e02:	68fb      	ldr	r3, [r7, #12]
 8014e04:	681b      	ldr	r3, [r3, #0]
 8014e06:	333c      	adds	r3, #60	@ 0x3c
 8014e08:	461a      	mov	r2, r3
 8014e0a:	887b      	ldrh	r3, [r7, #2]
 8014e0c:	f7f1 fb6d 	bl	80064ea <HAL_DMA_Start_IT>
 8014e10:	4603      	mov	r3, r0
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d001      	beq.n	8014e1a <HAL_TIMEx_OCN_Start_DMA+0x20c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8014e16:	2301      	movs	r3, #1
 8014e18:	e056      	b.n	8014ec8 <HAL_TIMEx_OCN_Start_DMA+0x2ba>
      }
      /* Enable the TIM Output Compare DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8014e1a:	68fb      	ldr	r3, [r7, #12]
 8014e1c:	681b      	ldr	r3, [r3, #0]
 8014e1e:	68da      	ldr	r2, [r3, #12]
 8014e20:	68fb      	ldr	r3, [r7, #12]
 8014e22:	681b      	ldr	r3, [r3, #0]
 8014e24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8014e28:	60da      	str	r2, [r3, #12]
      break;
 8014e2a:	e002      	b.n	8014e32 <HAL_TIMEx_OCN_Start_DMA+0x224>
    }

    default:
      status = HAL_ERROR;
 8014e2c:	2301      	movs	r3, #1
 8014e2e:	75fb      	strb	r3, [r7, #23]
      break;
 8014e30:	bf00      	nop
  }

  if (status == HAL_OK)
 8014e32:	7dfb      	ldrb	r3, [r7, #23]
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d146      	bne.n	8014ec6 <HAL_TIMEx_OCN_Start_DMA+0x2b8>
  {
    /* Enable the Capture compare channel N */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8014e38:	68fb      	ldr	r3, [r7, #12]
 8014e3a:	681b      	ldr	r3, [r3, #0]
 8014e3c:	2204      	movs	r2, #4
 8014e3e:	68b9      	ldr	r1, [r7, #8]
 8014e40:	4618      	mov	r0, r3
 8014e42:	f001 fa15 	bl	8016270 <TIM_CCxNChannelCmd>

    /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 8014e46:	68fb      	ldr	r3, [r7, #12]
 8014e48:	681b      	ldr	r3, [r3, #0]
 8014e4a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014e4c:	68fb      	ldr	r3, [r7, #12]
 8014e4e:	681b      	ldr	r3, [r3, #0]
 8014e50:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8014e54:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014e56:	68fb      	ldr	r3, [r7, #12]
 8014e58:	681b      	ldr	r3, [r3, #0]
 8014e5a:	4a20      	ldr	r2, [pc, #128]	@ (8014edc <HAL_TIMEx_OCN_Start_DMA+0x2ce>)
 8014e5c:	4293      	cmp	r3, r2
 8014e5e:	d018      	beq.n	8014e92 <HAL_TIMEx_OCN_Start_DMA+0x284>
 8014e60:	68fb      	ldr	r3, [r7, #12]
 8014e62:	681b      	ldr	r3, [r3, #0]
 8014e64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014e68:	d013      	beq.n	8014e92 <HAL_TIMEx_OCN_Start_DMA+0x284>
 8014e6a:	68fb      	ldr	r3, [r7, #12]
 8014e6c:	681b      	ldr	r3, [r3, #0]
 8014e6e:	4a1c      	ldr	r2, [pc, #112]	@ (8014ee0 <HAL_TIMEx_OCN_Start_DMA+0x2d2>)
 8014e70:	4293      	cmp	r3, r2
 8014e72:	d00e      	beq.n	8014e92 <HAL_TIMEx_OCN_Start_DMA+0x284>
 8014e74:	68fb      	ldr	r3, [r7, #12]
 8014e76:	681b      	ldr	r3, [r3, #0]
 8014e78:	4a1a      	ldr	r2, [pc, #104]	@ (8014ee4 <HAL_TIMEx_OCN_Start_DMA+0x2d6>)
 8014e7a:	4293      	cmp	r3, r2
 8014e7c:	d009      	beq.n	8014e92 <HAL_TIMEx_OCN_Start_DMA+0x284>
 8014e7e:	68fb      	ldr	r3, [r7, #12]
 8014e80:	681b      	ldr	r3, [r3, #0]
 8014e82:	4a19      	ldr	r2, [pc, #100]	@ (8014ee8 <HAL_TIMEx_OCN_Start_DMA+0x2da>)
 8014e84:	4293      	cmp	r3, r2
 8014e86:	d004      	beq.n	8014e92 <HAL_TIMEx_OCN_Start_DMA+0x284>
 8014e88:	68fb      	ldr	r3, [r7, #12]
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	4a17      	ldr	r2, [pc, #92]	@ (8014eec <HAL_TIMEx_OCN_Start_DMA+0x2de>)
 8014e8e:	4293      	cmp	r3, r2
 8014e90:	d111      	bne.n	8014eb6 <HAL_TIMEx_OCN_Start_DMA+0x2a8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8014e92:	68fb      	ldr	r3, [r7, #12]
 8014e94:	681b      	ldr	r3, [r3, #0]
 8014e96:	689b      	ldr	r3, [r3, #8]
 8014e98:	f003 0307 	and.w	r3, r3, #7
 8014e9c:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014e9e:	693b      	ldr	r3, [r7, #16]
 8014ea0:	2b06      	cmp	r3, #6
 8014ea2:	d010      	beq.n	8014ec6 <HAL_TIMEx_OCN_Start_DMA+0x2b8>
      {
        __HAL_TIM_ENABLE(htim);
 8014ea4:	68fb      	ldr	r3, [r7, #12]
 8014ea6:	681b      	ldr	r3, [r3, #0]
 8014ea8:	681a      	ldr	r2, [r3, #0]
 8014eaa:	68fb      	ldr	r3, [r7, #12]
 8014eac:	681b      	ldr	r3, [r3, #0]
 8014eae:	f042 0201 	orr.w	r2, r2, #1
 8014eb2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014eb4:	e007      	b.n	8014ec6 <HAL_TIMEx_OCN_Start_DMA+0x2b8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8014eb6:	68fb      	ldr	r3, [r7, #12]
 8014eb8:	681b      	ldr	r3, [r3, #0]
 8014eba:	681a      	ldr	r2, [r3, #0]
 8014ebc:	68fb      	ldr	r3, [r7, #12]
 8014ebe:	681b      	ldr	r3, [r3, #0]
 8014ec0:	f042 0201 	orr.w	r2, r2, #1
 8014ec4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8014ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8014ec8:	4618      	mov	r0, r3
 8014eca:	3718      	adds	r7, #24
 8014ecc:	46bd      	mov	sp, r7
 8014ece:	bd80      	pop	{r7, pc}
 8014ed0:	0801617d 	.word	0x0801617d
 8014ed4:	080134f5 	.word	0x080134f5
 8014ed8:	08016203 	.word	0x08016203
 8014edc:	40010000 	.word	0x40010000
 8014ee0:	40000400 	.word	0x40000400
 8014ee4:	40000800 	.word	0x40000800
 8014ee8:	40000c00 	.word	0x40000c00
 8014eec:	40014000 	.word	0x40014000

08014ef0 <HAL_TIMEx_OCN_Stop_DMA>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8014ef0:	b580      	push	{r7, lr}
 8014ef2:	b084      	sub	sp, #16
 8014ef4:	af00      	add	r7, sp, #0
 8014ef6:	6078      	str	r0, [r7, #4]
 8014ef8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8014efa:	2300      	movs	r3, #0
 8014efc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8014efe:	683b      	ldr	r3, [r7, #0]
 8014f00:	2b08      	cmp	r3, #8
 8014f02:	d025      	beq.n	8014f50 <HAL_TIMEx_OCN_Stop_DMA+0x60>
 8014f04:	683b      	ldr	r3, [r7, #0]
 8014f06:	2b08      	cmp	r3, #8
 8014f08:	d830      	bhi.n	8014f6c <HAL_TIMEx_OCN_Stop_DMA+0x7c>
 8014f0a:	683b      	ldr	r3, [r7, #0]
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d003      	beq.n	8014f18 <HAL_TIMEx_OCN_Stop_DMA+0x28>
 8014f10:	683b      	ldr	r3, [r7, #0]
 8014f12:	2b04      	cmp	r3, #4
 8014f14:	d00e      	beq.n	8014f34 <HAL_TIMEx_OCN_Stop_DMA+0x44>
 8014f16:	e029      	b.n	8014f6c <HAL_TIMEx_OCN_Stop_DMA+0x7c>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Output Compare DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	681b      	ldr	r3, [r3, #0]
 8014f1c:	68da      	ldr	r2, [r3, #12]
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	681b      	ldr	r3, [r3, #0]
 8014f22:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8014f26:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014f2c:	4618      	mov	r0, r3
 8014f2e:	f7f1 fba4 	bl	800667a <HAL_DMA_Abort_IT>
      break;
 8014f32:	e01e      	b.n	8014f72 <HAL_TIMEx_OCN_Stop_DMA+0x82>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Output Compare DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	681b      	ldr	r3, [r3, #0]
 8014f38:	68da      	ldr	r2, [r3, #12]
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	681b      	ldr	r3, [r3, #0]
 8014f3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8014f42:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014f48:	4618      	mov	r0, r3
 8014f4a:	f7f1 fb96 	bl	800667a <HAL_DMA_Abort_IT>
      break;
 8014f4e:	e010      	b.n	8014f72 <HAL_TIMEx_OCN_Stop_DMA+0x82>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Output Compare DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	681b      	ldr	r3, [r3, #0]
 8014f54:	68da      	ldr	r2, [r3, #12]
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	681b      	ldr	r3, [r3, #0]
 8014f5a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8014f5e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f64:	4618      	mov	r0, r3
 8014f66:	f7f1 fb88 	bl	800667a <HAL_DMA_Abort_IT>
      break;
 8014f6a:	e002      	b.n	8014f72 <HAL_TIMEx_OCN_Stop_DMA+0x82>
    }

    default:
      status = HAL_ERROR;
 8014f6c:	2301      	movs	r3, #1
 8014f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8014f70:	bf00      	nop
  }

  if (status == HAL_OK)
 8014f72:	7bfb      	ldrb	r3, [r7, #15]
 8014f74:	2b00      	cmp	r3, #0
 8014f76:	d152      	bne.n	801501e <HAL_TIMEx_OCN_Stop_DMA+0x12e>
  {
    /* Disable the Capture compare channel N */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	681b      	ldr	r3, [r3, #0]
 8014f7c:	2200      	movs	r2, #0
 8014f7e:	6839      	ldr	r1, [r7, #0]
 8014f80:	4618      	mov	r0, r3
 8014f82:	f001 f975 	bl	8016270 <TIM_CCxNChannelCmd>

    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	681b      	ldr	r3, [r3, #0]
 8014f8a:	6a1a      	ldr	r2, [r3, #32]
 8014f8c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8014f90:	4013      	ands	r3, r2
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d10f      	bne.n	8014fb6 <HAL_TIMEx_OCN_Stop_DMA+0xc6>
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	681b      	ldr	r3, [r3, #0]
 8014f9a:	6a1a      	ldr	r2, [r3, #32]
 8014f9c:	f240 4344 	movw	r3, #1092	@ 0x444
 8014fa0:	4013      	ands	r3, r2
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d107      	bne.n	8014fb6 <HAL_TIMEx_OCN_Stop_DMA+0xc6>
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	681b      	ldr	r3, [r3, #0]
 8014faa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	681b      	ldr	r3, [r3, #0]
 8014fb0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8014fb4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	681b      	ldr	r3, [r3, #0]
 8014fba:	6a1a      	ldr	r2, [r3, #32]
 8014fbc:	f241 1311 	movw	r3, #4369	@ 0x1111
 8014fc0:	4013      	ands	r3, r2
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	d10f      	bne.n	8014fe6 <HAL_TIMEx_OCN_Stop_DMA+0xf6>
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	681b      	ldr	r3, [r3, #0]
 8014fca:	6a1a      	ldr	r2, [r3, #32]
 8014fcc:	f240 4344 	movw	r3, #1092	@ 0x444
 8014fd0:	4013      	ands	r3, r2
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d107      	bne.n	8014fe6 <HAL_TIMEx_OCN_Stop_DMA+0xf6>
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	681b      	ldr	r3, [r3, #0]
 8014fda:	681a      	ldr	r2, [r3, #0]
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	f022 0201 	bic.w	r2, r2, #1
 8014fe4:	601a      	str	r2, [r3, #0]

    /* Set the TIM complementary channel state */
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8014fe6:	683b      	ldr	r3, [r7, #0]
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	d104      	bne.n	8014ff6 <HAL_TIMEx_OCN_Stop_DMA+0x106>
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	2201      	movs	r2, #1
 8014ff0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8014ff4:	e013      	b.n	801501e <HAL_TIMEx_OCN_Stop_DMA+0x12e>
 8014ff6:	683b      	ldr	r3, [r7, #0]
 8014ff8:	2b04      	cmp	r3, #4
 8014ffa:	d104      	bne.n	8015006 <HAL_TIMEx_OCN_Stop_DMA+0x116>
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	2201      	movs	r2, #1
 8015000:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8015004:	e00b      	b.n	801501e <HAL_TIMEx_OCN_Stop_DMA+0x12e>
 8015006:	683b      	ldr	r3, [r7, #0]
 8015008:	2b08      	cmp	r3, #8
 801500a:	d104      	bne.n	8015016 <HAL_TIMEx_OCN_Stop_DMA+0x126>
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	2201      	movs	r2, #1
 8015010:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015014:	e003      	b.n	801501e <HAL_TIMEx_OCN_Stop_DMA+0x12e>
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	2201      	movs	r2, #1
 801501a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 801501e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015020:	4618      	mov	r0, r3
 8015022:	3710      	adds	r7, #16
 8015024:	46bd      	mov	sp, r7
 8015026:	bd80      	pop	{r7, pc}

08015028 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8015028:	b580      	push	{r7, lr}
 801502a:	b084      	sub	sp, #16
 801502c:	af00      	add	r7, sp, #0
 801502e:	6078      	str	r0, [r7, #4]
 8015030:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8015032:	683b      	ldr	r3, [r7, #0]
 8015034:	2b00      	cmp	r3, #0
 8015036:	d109      	bne.n	801504c <HAL_TIMEx_PWMN_Start+0x24>
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801503e:	b2db      	uxtb	r3, r3
 8015040:	2b01      	cmp	r3, #1
 8015042:	bf14      	ite	ne
 8015044:	2301      	movne	r3, #1
 8015046:	2300      	moveq	r3, #0
 8015048:	b2db      	uxtb	r3, r3
 801504a:	e022      	b.n	8015092 <HAL_TIMEx_PWMN_Start+0x6a>
 801504c:	683b      	ldr	r3, [r7, #0]
 801504e:	2b04      	cmp	r3, #4
 8015050:	d109      	bne.n	8015066 <HAL_TIMEx_PWMN_Start+0x3e>
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8015058:	b2db      	uxtb	r3, r3
 801505a:	2b01      	cmp	r3, #1
 801505c:	bf14      	ite	ne
 801505e:	2301      	movne	r3, #1
 8015060:	2300      	moveq	r3, #0
 8015062:	b2db      	uxtb	r3, r3
 8015064:	e015      	b.n	8015092 <HAL_TIMEx_PWMN_Start+0x6a>
 8015066:	683b      	ldr	r3, [r7, #0]
 8015068:	2b08      	cmp	r3, #8
 801506a:	d109      	bne.n	8015080 <HAL_TIMEx_PWMN_Start+0x58>
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015072:	b2db      	uxtb	r3, r3
 8015074:	2b01      	cmp	r3, #1
 8015076:	bf14      	ite	ne
 8015078:	2301      	movne	r3, #1
 801507a:	2300      	moveq	r3, #0
 801507c:	b2db      	uxtb	r3, r3
 801507e:	e008      	b.n	8015092 <HAL_TIMEx_PWMN_Start+0x6a>
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015086:	b2db      	uxtb	r3, r3
 8015088:	2b01      	cmp	r3, #1
 801508a:	bf14      	ite	ne
 801508c:	2301      	movne	r3, #1
 801508e:	2300      	moveq	r3, #0
 8015090:	b2db      	uxtb	r3, r3
 8015092:	2b00      	cmp	r3, #0
 8015094:	d001      	beq.n	801509a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8015096:	2301      	movs	r3, #1
 8015098:	e063      	b.n	8015162 <HAL_TIMEx_PWMN_Start+0x13a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801509a:	683b      	ldr	r3, [r7, #0]
 801509c:	2b00      	cmp	r3, #0
 801509e:	d104      	bne.n	80150aa <HAL_TIMEx_PWMN_Start+0x82>
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	2202      	movs	r2, #2
 80150a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80150a8:	e013      	b.n	80150d2 <HAL_TIMEx_PWMN_Start+0xaa>
 80150aa:	683b      	ldr	r3, [r7, #0]
 80150ac:	2b04      	cmp	r3, #4
 80150ae:	d104      	bne.n	80150ba <HAL_TIMEx_PWMN_Start+0x92>
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	2202      	movs	r2, #2
 80150b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80150b8:	e00b      	b.n	80150d2 <HAL_TIMEx_PWMN_Start+0xaa>
 80150ba:	683b      	ldr	r3, [r7, #0]
 80150bc:	2b08      	cmp	r3, #8
 80150be:	d104      	bne.n	80150ca <HAL_TIMEx_PWMN_Start+0xa2>
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	2202      	movs	r2, #2
 80150c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80150c8:	e003      	b.n	80150d2 <HAL_TIMEx_PWMN_Start+0xaa>
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	2202      	movs	r2, #2
 80150ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	681b      	ldr	r3, [r3, #0]
 80150d6:	2204      	movs	r2, #4
 80150d8:	6839      	ldr	r1, [r7, #0]
 80150da:	4618      	mov	r0, r3
 80150dc:	f001 f8c8 	bl	8016270 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	681b      	ldr	r3, [r3, #0]
 80150e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	681b      	ldr	r3, [r3, #0]
 80150ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80150ee:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	4a1d      	ldr	r2, [pc, #116]	@ (801516c <HAL_TIMEx_PWMN_Start+0x144>)
 80150f6:	4293      	cmp	r3, r2
 80150f8:	d018      	beq.n	801512c <HAL_TIMEx_PWMN_Start+0x104>
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	681b      	ldr	r3, [r3, #0]
 80150fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015102:	d013      	beq.n	801512c <HAL_TIMEx_PWMN_Start+0x104>
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	681b      	ldr	r3, [r3, #0]
 8015108:	4a19      	ldr	r2, [pc, #100]	@ (8015170 <HAL_TIMEx_PWMN_Start+0x148>)
 801510a:	4293      	cmp	r3, r2
 801510c:	d00e      	beq.n	801512c <HAL_TIMEx_PWMN_Start+0x104>
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	681b      	ldr	r3, [r3, #0]
 8015112:	4a18      	ldr	r2, [pc, #96]	@ (8015174 <HAL_TIMEx_PWMN_Start+0x14c>)
 8015114:	4293      	cmp	r3, r2
 8015116:	d009      	beq.n	801512c <HAL_TIMEx_PWMN_Start+0x104>
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	4a16      	ldr	r2, [pc, #88]	@ (8015178 <HAL_TIMEx_PWMN_Start+0x150>)
 801511e:	4293      	cmp	r3, r2
 8015120:	d004      	beq.n	801512c <HAL_TIMEx_PWMN_Start+0x104>
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	681b      	ldr	r3, [r3, #0]
 8015126:	4a15      	ldr	r2, [pc, #84]	@ (801517c <HAL_TIMEx_PWMN_Start+0x154>)
 8015128:	4293      	cmp	r3, r2
 801512a:	d111      	bne.n	8015150 <HAL_TIMEx_PWMN_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	681b      	ldr	r3, [r3, #0]
 8015130:	689b      	ldr	r3, [r3, #8]
 8015132:	f003 0307 	and.w	r3, r3, #7
 8015136:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015138:	68fb      	ldr	r3, [r7, #12]
 801513a:	2b06      	cmp	r3, #6
 801513c:	d010      	beq.n	8015160 <HAL_TIMEx_PWMN_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	681b      	ldr	r3, [r3, #0]
 8015142:	681a      	ldr	r2, [r3, #0]
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	681b      	ldr	r3, [r3, #0]
 8015148:	f042 0201 	orr.w	r2, r2, #1
 801514c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801514e:	e007      	b.n	8015160 <HAL_TIMEx_PWMN_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	681b      	ldr	r3, [r3, #0]
 8015154:	681a      	ldr	r2, [r3, #0]
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	681b      	ldr	r3, [r3, #0]
 801515a:	f042 0201 	orr.w	r2, r2, #1
 801515e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8015160:	2300      	movs	r3, #0
}
 8015162:	4618      	mov	r0, r3
 8015164:	3710      	adds	r7, #16
 8015166:	46bd      	mov	sp, r7
 8015168:	bd80      	pop	{r7, pc}
 801516a:	bf00      	nop
 801516c:	40010000 	.word	0x40010000
 8015170:	40000400 	.word	0x40000400
 8015174:	40000800 	.word	0x40000800
 8015178:	40000c00 	.word	0x40000c00
 801517c:	40014000 	.word	0x40014000

08015180 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8015180:	b580      	push	{r7, lr}
 8015182:	b082      	sub	sp, #8
 8015184:	af00      	add	r7, sp, #0
 8015186:	6078      	str	r0, [r7, #4]
 8015188:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	681b      	ldr	r3, [r3, #0]
 801518e:	2200      	movs	r2, #0
 8015190:	6839      	ldr	r1, [r7, #0]
 8015192:	4618      	mov	r0, r3
 8015194:	f001 f86c 	bl	8016270 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	681b      	ldr	r3, [r3, #0]
 801519c:	6a1a      	ldr	r2, [r3, #32]
 801519e:	f241 1311 	movw	r3, #4369	@ 0x1111
 80151a2:	4013      	ands	r3, r2
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d10f      	bne.n	80151c8 <HAL_TIMEx_PWMN_Stop+0x48>
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	681b      	ldr	r3, [r3, #0]
 80151ac:	6a1a      	ldr	r2, [r3, #32]
 80151ae:	f240 4344 	movw	r3, #1092	@ 0x444
 80151b2:	4013      	ands	r3, r2
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	d107      	bne.n	80151c8 <HAL_TIMEx_PWMN_Stop+0x48>
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	681b      	ldr	r3, [r3, #0]
 80151bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80151c6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	681b      	ldr	r3, [r3, #0]
 80151cc:	6a1a      	ldr	r2, [r3, #32]
 80151ce:	f241 1311 	movw	r3, #4369	@ 0x1111
 80151d2:	4013      	ands	r3, r2
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	d10f      	bne.n	80151f8 <HAL_TIMEx_PWMN_Stop+0x78>
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	681b      	ldr	r3, [r3, #0]
 80151dc:	6a1a      	ldr	r2, [r3, #32]
 80151de:	f240 4344 	movw	r3, #1092	@ 0x444
 80151e2:	4013      	ands	r3, r2
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d107      	bne.n	80151f8 <HAL_TIMEx_PWMN_Stop+0x78>
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	681b      	ldr	r3, [r3, #0]
 80151ec:	681a      	ldr	r2, [r3, #0]
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	681b      	ldr	r3, [r3, #0]
 80151f2:	f022 0201 	bic.w	r2, r2, #1
 80151f6:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80151f8:	683b      	ldr	r3, [r7, #0]
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d104      	bne.n	8015208 <HAL_TIMEx_PWMN_Stop+0x88>
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	2201      	movs	r2, #1
 8015202:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8015206:	e013      	b.n	8015230 <HAL_TIMEx_PWMN_Stop+0xb0>
 8015208:	683b      	ldr	r3, [r7, #0]
 801520a:	2b04      	cmp	r3, #4
 801520c:	d104      	bne.n	8015218 <HAL_TIMEx_PWMN_Stop+0x98>
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	2201      	movs	r2, #1
 8015212:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8015216:	e00b      	b.n	8015230 <HAL_TIMEx_PWMN_Stop+0xb0>
 8015218:	683b      	ldr	r3, [r7, #0]
 801521a:	2b08      	cmp	r3, #8
 801521c:	d104      	bne.n	8015228 <HAL_TIMEx_PWMN_Stop+0xa8>
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	2201      	movs	r2, #1
 8015222:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015226:	e003      	b.n	8015230 <HAL_TIMEx_PWMN_Stop+0xb0>
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	2201      	movs	r2, #1
 801522c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8015230:	2300      	movs	r3, #0
}
 8015232:	4618      	mov	r0, r3
 8015234:	3708      	adds	r7, #8
 8015236:	46bd      	mov	sp, r7
 8015238:	bd80      	pop	{r7, pc}

0801523a <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801523a:	b580      	push	{r7, lr}
 801523c:	b084      	sub	sp, #16
 801523e:	af00      	add	r7, sp, #0
 8015240:	6078      	str	r0, [r7, #4]
 8015242:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8015244:	2300      	movs	r3, #0
 8015246:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8015248:	683b      	ldr	r3, [r7, #0]
 801524a:	2b00      	cmp	r3, #0
 801524c:	d109      	bne.n	8015262 <HAL_TIMEx_PWMN_Start_IT+0x28>
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015254:	b2db      	uxtb	r3, r3
 8015256:	2b01      	cmp	r3, #1
 8015258:	bf14      	ite	ne
 801525a:	2301      	movne	r3, #1
 801525c:	2300      	moveq	r3, #0
 801525e:	b2db      	uxtb	r3, r3
 8015260:	e022      	b.n	80152a8 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 8015262:	683b      	ldr	r3, [r7, #0]
 8015264:	2b04      	cmp	r3, #4
 8015266:	d109      	bne.n	801527c <HAL_TIMEx_PWMN_Start_IT+0x42>
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801526e:	b2db      	uxtb	r3, r3
 8015270:	2b01      	cmp	r3, #1
 8015272:	bf14      	ite	ne
 8015274:	2301      	movne	r3, #1
 8015276:	2300      	moveq	r3, #0
 8015278:	b2db      	uxtb	r3, r3
 801527a:	e015      	b.n	80152a8 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 801527c:	683b      	ldr	r3, [r7, #0]
 801527e:	2b08      	cmp	r3, #8
 8015280:	d109      	bne.n	8015296 <HAL_TIMEx_PWMN_Start_IT+0x5c>
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015288:	b2db      	uxtb	r3, r3
 801528a:	2b01      	cmp	r3, #1
 801528c:	bf14      	ite	ne
 801528e:	2301      	movne	r3, #1
 8015290:	2300      	moveq	r3, #0
 8015292:	b2db      	uxtb	r3, r3
 8015294:	e008      	b.n	80152a8 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801529c:	b2db      	uxtb	r3, r3
 801529e:	2b01      	cmp	r3, #1
 80152a0:	bf14      	ite	ne
 80152a2:	2301      	movne	r3, #1
 80152a4:	2300      	moveq	r3, #0
 80152a6:	b2db      	uxtb	r3, r3
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	d001      	beq.n	80152b0 <HAL_TIMEx_PWMN_Start_IT+0x76>
  {
    return HAL_ERROR;
 80152ac:	2301      	movs	r3, #1
 80152ae:	e099      	b.n	80153e4 <HAL_TIMEx_PWMN_Start_IT+0x1aa>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80152b0:	683b      	ldr	r3, [r7, #0]
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	d104      	bne.n	80152c0 <HAL_TIMEx_PWMN_Start_IT+0x86>
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	2202      	movs	r2, #2
 80152ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80152be:	e013      	b.n	80152e8 <HAL_TIMEx_PWMN_Start_IT+0xae>
 80152c0:	683b      	ldr	r3, [r7, #0]
 80152c2:	2b04      	cmp	r3, #4
 80152c4:	d104      	bne.n	80152d0 <HAL_TIMEx_PWMN_Start_IT+0x96>
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	2202      	movs	r2, #2
 80152ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80152ce:	e00b      	b.n	80152e8 <HAL_TIMEx_PWMN_Start_IT+0xae>
 80152d0:	683b      	ldr	r3, [r7, #0]
 80152d2:	2b08      	cmp	r3, #8
 80152d4:	d104      	bne.n	80152e0 <HAL_TIMEx_PWMN_Start_IT+0xa6>
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	2202      	movs	r2, #2
 80152da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80152de:	e003      	b.n	80152e8 <HAL_TIMEx_PWMN_Start_IT+0xae>
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	2202      	movs	r2, #2
 80152e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80152e8:	683b      	ldr	r3, [r7, #0]
 80152ea:	2b08      	cmp	r3, #8
 80152ec:	d01b      	beq.n	8015326 <HAL_TIMEx_PWMN_Start_IT+0xec>
 80152ee:	683b      	ldr	r3, [r7, #0]
 80152f0:	2b08      	cmp	r3, #8
 80152f2:	d821      	bhi.n	8015338 <HAL_TIMEx_PWMN_Start_IT+0xfe>
 80152f4:	683b      	ldr	r3, [r7, #0]
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d003      	beq.n	8015302 <HAL_TIMEx_PWMN_Start_IT+0xc8>
 80152fa:	683b      	ldr	r3, [r7, #0]
 80152fc:	2b04      	cmp	r3, #4
 80152fe:	d009      	beq.n	8015314 <HAL_TIMEx_PWMN_Start_IT+0xda>
 8015300:	e01a      	b.n	8015338 <HAL_TIMEx_PWMN_Start_IT+0xfe>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	681b      	ldr	r3, [r3, #0]
 8015306:	68da      	ldr	r2, [r3, #12]
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	681b      	ldr	r3, [r3, #0]
 801530c:	f042 0202 	orr.w	r2, r2, #2
 8015310:	60da      	str	r2, [r3, #12]
      break;
 8015312:	e014      	b.n	801533e <HAL_TIMEx_PWMN_Start_IT+0x104>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	681b      	ldr	r3, [r3, #0]
 8015318:	68da      	ldr	r2, [r3, #12]
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	681b      	ldr	r3, [r3, #0]
 801531e:	f042 0204 	orr.w	r2, r2, #4
 8015322:	60da      	str	r2, [r3, #12]
      break;
 8015324:	e00b      	b.n	801533e <HAL_TIMEx_PWMN_Start_IT+0x104>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	681b      	ldr	r3, [r3, #0]
 801532a:	68da      	ldr	r2, [r3, #12]
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	681b      	ldr	r3, [r3, #0]
 8015330:	f042 0208 	orr.w	r2, r2, #8
 8015334:	60da      	str	r2, [r3, #12]
      break;
 8015336:	e002      	b.n	801533e <HAL_TIMEx_PWMN_Start_IT+0x104>
    }

    default:
      status = HAL_ERROR;
 8015338:	2301      	movs	r3, #1
 801533a:	73fb      	strb	r3, [r7, #15]
      break;
 801533c:	bf00      	nop
  }

  if (status == HAL_OK)
 801533e:	7bfb      	ldrb	r3, [r7, #15]
 8015340:	2b00      	cmp	r3, #0
 8015342:	d14e      	bne.n	80153e2 <HAL_TIMEx_PWMN_Start_IT+0x1a8>
  {
    /* Enable the TIM Break interrupt */
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	681b      	ldr	r3, [r3, #0]
 8015348:	68da      	ldr	r2, [r3, #12]
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	681b      	ldr	r3, [r3, #0]
 801534e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8015352:	60da      	str	r2, [r3, #12]

    /* Enable the complementary PWM output  */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	681b      	ldr	r3, [r3, #0]
 8015358:	2204      	movs	r2, #4
 801535a:	6839      	ldr	r1, [r7, #0]
 801535c:	4618      	mov	r0, r3
 801535e:	f000 ff87 	bl	8016270 <TIM_CCxNChannelCmd>

    /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	681b      	ldr	r3, [r3, #0]
 8015366:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8015370:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	681b      	ldr	r3, [r3, #0]
 8015376:	4a1d      	ldr	r2, [pc, #116]	@ (80153ec <HAL_TIMEx_PWMN_Start_IT+0x1b2>)
 8015378:	4293      	cmp	r3, r2
 801537a:	d018      	beq.n	80153ae <HAL_TIMEx_PWMN_Start_IT+0x174>
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	681b      	ldr	r3, [r3, #0]
 8015380:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015384:	d013      	beq.n	80153ae <HAL_TIMEx_PWMN_Start_IT+0x174>
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	681b      	ldr	r3, [r3, #0]
 801538a:	4a19      	ldr	r2, [pc, #100]	@ (80153f0 <HAL_TIMEx_PWMN_Start_IT+0x1b6>)
 801538c:	4293      	cmp	r3, r2
 801538e:	d00e      	beq.n	80153ae <HAL_TIMEx_PWMN_Start_IT+0x174>
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	681b      	ldr	r3, [r3, #0]
 8015394:	4a17      	ldr	r2, [pc, #92]	@ (80153f4 <HAL_TIMEx_PWMN_Start_IT+0x1ba>)
 8015396:	4293      	cmp	r3, r2
 8015398:	d009      	beq.n	80153ae <HAL_TIMEx_PWMN_Start_IT+0x174>
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	681b      	ldr	r3, [r3, #0]
 801539e:	4a16      	ldr	r2, [pc, #88]	@ (80153f8 <HAL_TIMEx_PWMN_Start_IT+0x1be>)
 80153a0:	4293      	cmp	r3, r2
 80153a2:	d004      	beq.n	80153ae <HAL_TIMEx_PWMN_Start_IT+0x174>
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	681b      	ldr	r3, [r3, #0]
 80153a8:	4a14      	ldr	r2, [pc, #80]	@ (80153fc <HAL_TIMEx_PWMN_Start_IT+0x1c2>)
 80153aa:	4293      	cmp	r3, r2
 80153ac:	d111      	bne.n	80153d2 <HAL_TIMEx_PWMN_Start_IT+0x198>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	681b      	ldr	r3, [r3, #0]
 80153b2:	689b      	ldr	r3, [r3, #8]
 80153b4:	f003 0307 	and.w	r3, r3, #7
 80153b8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80153ba:	68bb      	ldr	r3, [r7, #8]
 80153bc:	2b06      	cmp	r3, #6
 80153be:	d010      	beq.n	80153e2 <HAL_TIMEx_PWMN_Start_IT+0x1a8>
      {
        __HAL_TIM_ENABLE(htim);
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	681b      	ldr	r3, [r3, #0]
 80153c4:	681a      	ldr	r2, [r3, #0]
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	681b      	ldr	r3, [r3, #0]
 80153ca:	f042 0201 	orr.w	r2, r2, #1
 80153ce:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80153d0:	e007      	b.n	80153e2 <HAL_TIMEx_PWMN_Start_IT+0x1a8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	681b      	ldr	r3, [r3, #0]
 80153d6:	681a      	ldr	r2, [r3, #0]
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	681b      	ldr	r3, [r3, #0]
 80153dc:	f042 0201 	orr.w	r2, r2, #1
 80153e0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80153e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80153e4:	4618      	mov	r0, r3
 80153e6:	3710      	adds	r7, #16
 80153e8:	46bd      	mov	sp, r7
 80153ea:	bd80      	pop	{r7, pc}
 80153ec:	40010000 	.word	0x40010000
 80153f0:	40000400 	.word	0x40000400
 80153f4:	40000800 	.word	0x40000800
 80153f8:	40000c00 	.word	0x40000c00
 80153fc:	40014000 	.word	0x40014000

08015400 <HAL_TIMEx_PWMN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8015400:	b580      	push	{r7, lr}
 8015402:	b084      	sub	sp, #16
 8015404:	af00      	add	r7, sp, #0
 8015406:	6078      	str	r0, [r7, #4]
 8015408:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801540a:	2300      	movs	r3, #0
 801540c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpccer;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 801540e:	683b      	ldr	r3, [r7, #0]
 8015410:	2b08      	cmp	r3, #8
 8015412:	d01b      	beq.n	801544c <HAL_TIMEx_PWMN_Stop_IT+0x4c>
 8015414:	683b      	ldr	r3, [r7, #0]
 8015416:	2b08      	cmp	r3, #8
 8015418:	d821      	bhi.n	801545e <HAL_TIMEx_PWMN_Stop_IT+0x5e>
 801541a:	683b      	ldr	r3, [r7, #0]
 801541c:	2b00      	cmp	r3, #0
 801541e:	d003      	beq.n	8015428 <HAL_TIMEx_PWMN_Stop_IT+0x28>
 8015420:	683b      	ldr	r3, [r7, #0]
 8015422:	2b04      	cmp	r3, #4
 8015424:	d009      	beq.n	801543a <HAL_TIMEx_PWMN_Stop_IT+0x3a>
 8015426:	e01a      	b.n	801545e <HAL_TIMEx_PWMN_Stop_IT+0x5e>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	681b      	ldr	r3, [r3, #0]
 801542c:	68da      	ldr	r2, [r3, #12]
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	681b      	ldr	r3, [r3, #0]
 8015432:	f022 0202 	bic.w	r2, r2, #2
 8015436:	60da      	str	r2, [r3, #12]
      break;
 8015438:	e014      	b.n	8015464 <HAL_TIMEx_PWMN_Stop_IT+0x64>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	681b      	ldr	r3, [r3, #0]
 801543e:	68da      	ldr	r2, [r3, #12]
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	681b      	ldr	r3, [r3, #0]
 8015444:	f022 0204 	bic.w	r2, r2, #4
 8015448:	60da      	str	r2, [r3, #12]
      break;
 801544a:	e00b      	b.n	8015464 <HAL_TIMEx_PWMN_Stop_IT+0x64>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	68da      	ldr	r2, [r3, #12]
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	681b      	ldr	r3, [r3, #0]
 8015456:	f022 0208 	bic.w	r2, r2, #8
 801545a:	60da      	str	r2, [r3, #12]
      break;
 801545c:	e002      	b.n	8015464 <HAL_TIMEx_PWMN_Stop_IT+0x64>
    }

    default:
      status = HAL_ERROR;
 801545e:	2301      	movs	r3, #1
 8015460:	73fb      	strb	r3, [r7, #15]
      break;
 8015462:	bf00      	nop
  }

  if (status == HAL_OK)
 8015464:	7bfb      	ldrb	r3, [r7, #15]
 8015466:	2b00      	cmp	r3, #0
 8015468:	d164      	bne.n	8015534 <HAL_TIMEx_PWMN_Stop_IT+0x134>
  {
    /* Disable the complementary PWM output  */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	681b      	ldr	r3, [r3, #0]
 801546e:	2200      	movs	r2, #0
 8015470:	6839      	ldr	r1, [r7, #0]
 8015472:	4618      	mov	r0, r3
 8015474:	f000 fefc 	bl	8016270 <TIM_CCxNChannelCmd>

    /* Disable the TIM Break interrupt (only if no more channel is active) */
    tmpccer = htim->Instance->CCER;
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	681b      	ldr	r3, [r3, #0]
 801547c:	6a1b      	ldr	r3, [r3, #32]
 801547e:	60bb      	str	r3, [r7, #8]
    if ((tmpccer & TIM_CCER_CCxNE_MASK) == (uint32_t)RESET)
 8015480:	68ba      	ldr	r2, [r7, #8]
 8015482:	f240 4344 	movw	r3, #1092	@ 0x444
 8015486:	4013      	ands	r3, r2
 8015488:	2b00      	cmp	r3, #0
 801548a:	d107      	bne.n	801549c <HAL_TIMEx_PWMN_Stop_IT+0x9c>
    {
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	681b      	ldr	r3, [r3, #0]
 8015490:	68da      	ldr	r2, [r3, #12]
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	681b      	ldr	r3, [r3, #0]
 8015496:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801549a:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	681b      	ldr	r3, [r3, #0]
 80154a0:	6a1a      	ldr	r2, [r3, #32]
 80154a2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80154a6:	4013      	ands	r3, r2
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	d10f      	bne.n	80154cc <HAL_TIMEx_PWMN_Stop_IT+0xcc>
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	681b      	ldr	r3, [r3, #0]
 80154b0:	6a1a      	ldr	r2, [r3, #32]
 80154b2:	f240 4344 	movw	r3, #1092	@ 0x444
 80154b6:	4013      	ands	r3, r2
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	d107      	bne.n	80154cc <HAL_TIMEx_PWMN_Stop_IT+0xcc>
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	681b      	ldr	r3, [r3, #0]
 80154c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	681b      	ldr	r3, [r3, #0]
 80154c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80154ca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	681b      	ldr	r3, [r3, #0]
 80154d0:	6a1a      	ldr	r2, [r3, #32]
 80154d2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80154d6:	4013      	ands	r3, r2
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d10f      	bne.n	80154fc <HAL_TIMEx_PWMN_Stop_IT+0xfc>
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	681b      	ldr	r3, [r3, #0]
 80154e0:	6a1a      	ldr	r2, [r3, #32]
 80154e2:	f240 4344 	movw	r3, #1092	@ 0x444
 80154e6:	4013      	ands	r3, r2
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d107      	bne.n	80154fc <HAL_TIMEx_PWMN_Stop_IT+0xfc>
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	681b      	ldr	r3, [r3, #0]
 80154f0:	681a      	ldr	r2, [r3, #0]
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	681b      	ldr	r3, [r3, #0]
 80154f6:	f022 0201 	bic.w	r2, r2, #1
 80154fa:	601a      	str	r2, [r3, #0]

    /* Set the TIM complementary channel state */
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80154fc:	683b      	ldr	r3, [r7, #0]
 80154fe:	2b00      	cmp	r3, #0
 8015500:	d104      	bne.n	801550c <HAL_TIMEx_PWMN_Stop_IT+0x10c>
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	2201      	movs	r2, #1
 8015506:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801550a:	e013      	b.n	8015534 <HAL_TIMEx_PWMN_Stop_IT+0x134>
 801550c:	683b      	ldr	r3, [r7, #0]
 801550e:	2b04      	cmp	r3, #4
 8015510:	d104      	bne.n	801551c <HAL_TIMEx_PWMN_Stop_IT+0x11c>
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	2201      	movs	r2, #1
 8015516:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801551a:	e00b      	b.n	8015534 <HAL_TIMEx_PWMN_Stop_IT+0x134>
 801551c:	683b      	ldr	r3, [r7, #0]
 801551e:	2b08      	cmp	r3, #8
 8015520:	d104      	bne.n	801552c <HAL_TIMEx_PWMN_Stop_IT+0x12c>
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	2201      	movs	r2, #1
 8015526:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801552a:	e003      	b.n	8015534 <HAL_TIMEx_PWMN_Stop_IT+0x134>
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	2201      	movs	r2, #1
 8015530:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 8015534:	7bfb      	ldrb	r3, [r7, #15]
}
 8015536:	4618      	mov	r0, r3
 8015538:	3710      	adds	r7, #16
 801553a:	46bd      	mov	sp, r7
 801553c:	bd80      	pop	{r7, pc}

0801553e <HAL_TIMEx_PWMN_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                           uint16_t Length)
{
 801553e:	b580      	push	{r7, lr}
 8015540:	b086      	sub	sp, #24
 8015542:	af00      	add	r7, sp, #0
 8015544:	60f8      	str	r0, [r7, #12]
 8015546:	60b9      	str	r1, [r7, #8]
 8015548:	607a      	str	r2, [r7, #4]
 801554a:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 801554c:	2300      	movs	r3, #0
 801554e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Set the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8015550:	68bb      	ldr	r3, [r7, #8]
 8015552:	2b00      	cmp	r3, #0
 8015554:	d109      	bne.n	801556a <HAL_TIMEx_PWMN_Start_DMA+0x2c>
 8015556:	68fb      	ldr	r3, [r7, #12]
 8015558:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801555c:	b2db      	uxtb	r3, r3
 801555e:	2b02      	cmp	r3, #2
 8015560:	bf0c      	ite	eq
 8015562:	2301      	moveq	r3, #1
 8015564:	2300      	movne	r3, #0
 8015566:	b2db      	uxtb	r3, r3
 8015568:	e022      	b.n	80155b0 <HAL_TIMEx_PWMN_Start_DMA+0x72>
 801556a:	68bb      	ldr	r3, [r7, #8]
 801556c:	2b04      	cmp	r3, #4
 801556e:	d109      	bne.n	8015584 <HAL_TIMEx_PWMN_Start_DMA+0x46>
 8015570:	68fb      	ldr	r3, [r7, #12]
 8015572:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8015576:	b2db      	uxtb	r3, r3
 8015578:	2b02      	cmp	r3, #2
 801557a:	bf0c      	ite	eq
 801557c:	2301      	moveq	r3, #1
 801557e:	2300      	movne	r3, #0
 8015580:	b2db      	uxtb	r3, r3
 8015582:	e015      	b.n	80155b0 <HAL_TIMEx_PWMN_Start_DMA+0x72>
 8015584:	68bb      	ldr	r3, [r7, #8]
 8015586:	2b08      	cmp	r3, #8
 8015588:	d109      	bne.n	801559e <HAL_TIMEx_PWMN_Start_DMA+0x60>
 801558a:	68fb      	ldr	r3, [r7, #12]
 801558c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015590:	b2db      	uxtb	r3, r3
 8015592:	2b02      	cmp	r3, #2
 8015594:	bf0c      	ite	eq
 8015596:	2301      	moveq	r3, #1
 8015598:	2300      	movne	r3, #0
 801559a:	b2db      	uxtb	r3, r3
 801559c:	e008      	b.n	80155b0 <HAL_TIMEx_PWMN_Start_DMA+0x72>
 801559e:	68fb      	ldr	r3, [r7, #12]
 80155a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80155a4:	b2db      	uxtb	r3, r3
 80155a6:	2b02      	cmp	r3, #2
 80155a8:	bf0c      	ite	eq
 80155aa:	2301      	moveq	r3, #1
 80155ac:	2300      	movne	r3, #0
 80155ae:	b2db      	uxtb	r3, r3
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	d001      	beq.n	80155b8 <HAL_TIMEx_PWMN_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80155b4:	2302      	movs	r3, #2
 80155b6:	e11f      	b.n	80157f8 <HAL_TIMEx_PWMN_Start_DMA+0x2ba>
  }
  else if (TIM_CHANNEL_N_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80155b8:	68bb      	ldr	r3, [r7, #8]
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d109      	bne.n	80155d2 <HAL_TIMEx_PWMN_Start_DMA+0x94>
 80155be:	68fb      	ldr	r3, [r7, #12]
 80155c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80155c4:	b2db      	uxtb	r3, r3
 80155c6:	2b01      	cmp	r3, #1
 80155c8:	bf0c      	ite	eq
 80155ca:	2301      	moveq	r3, #1
 80155cc:	2300      	movne	r3, #0
 80155ce:	b2db      	uxtb	r3, r3
 80155d0:	e022      	b.n	8015618 <HAL_TIMEx_PWMN_Start_DMA+0xda>
 80155d2:	68bb      	ldr	r3, [r7, #8]
 80155d4:	2b04      	cmp	r3, #4
 80155d6:	d109      	bne.n	80155ec <HAL_TIMEx_PWMN_Start_DMA+0xae>
 80155d8:	68fb      	ldr	r3, [r7, #12]
 80155da:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80155de:	b2db      	uxtb	r3, r3
 80155e0:	2b01      	cmp	r3, #1
 80155e2:	bf0c      	ite	eq
 80155e4:	2301      	moveq	r3, #1
 80155e6:	2300      	movne	r3, #0
 80155e8:	b2db      	uxtb	r3, r3
 80155ea:	e015      	b.n	8015618 <HAL_TIMEx_PWMN_Start_DMA+0xda>
 80155ec:	68bb      	ldr	r3, [r7, #8]
 80155ee:	2b08      	cmp	r3, #8
 80155f0:	d109      	bne.n	8015606 <HAL_TIMEx_PWMN_Start_DMA+0xc8>
 80155f2:	68fb      	ldr	r3, [r7, #12]
 80155f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80155f8:	b2db      	uxtb	r3, r3
 80155fa:	2b01      	cmp	r3, #1
 80155fc:	bf0c      	ite	eq
 80155fe:	2301      	moveq	r3, #1
 8015600:	2300      	movne	r3, #0
 8015602:	b2db      	uxtb	r3, r3
 8015604:	e008      	b.n	8015618 <HAL_TIMEx_PWMN_Start_DMA+0xda>
 8015606:	68fb      	ldr	r3, [r7, #12]
 8015608:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801560c:	b2db      	uxtb	r3, r3
 801560e:	2b01      	cmp	r3, #1
 8015610:	bf0c      	ite	eq
 8015612:	2301      	moveq	r3, #1
 8015614:	2300      	movne	r3, #0
 8015616:	b2db      	uxtb	r3, r3
 8015618:	2b00      	cmp	r3, #0
 801561a:	d024      	beq.n	8015666 <HAL_TIMEx_PWMN_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	2b00      	cmp	r3, #0
 8015620:	d002      	beq.n	8015628 <HAL_TIMEx_PWMN_Start_DMA+0xea>
 8015622:	887b      	ldrh	r3, [r7, #2]
 8015624:	2b00      	cmp	r3, #0
 8015626:	d101      	bne.n	801562c <HAL_TIMEx_PWMN_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8015628:	2301      	movs	r3, #1
 801562a:	e0e5      	b.n	80157f8 <HAL_TIMEx_PWMN_Start_DMA+0x2ba>
    }
    else
    {
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801562c:	68bb      	ldr	r3, [r7, #8]
 801562e:	2b00      	cmp	r3, #0
 8015630:	d104      	bne.n	801563c <HAL_TIMEx_PWMN_Start_DMA+0xfe>
 8015632:	68fb      	ldr	r3, [r7, #12]
 8015634:	2202      	movs	r2, #2
 8015636:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801563a:	e016      	b.n	801566a <HAL_TIMEx_PWMN_Start_DMA+0x12c>
 801563c:	68bb      	ldr	r3, [r7, #8]
 801563e:	2b04      	cmp	r3, #4
 8015640:	d104      	bne.n	801564c <HAL_TIMEx_PWMN_Start_DMA+0x10e>
 8015642:	68fb      	ldr	r3, [r7, #12]
 8015644:	2202      	movs	r2, #2
 8015646:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801564a:	e00e      	b.n	801566a <HAL_TIMEx_PWMN_Start_DMA+0x12c>
 801564c:	68bb      	ldr	r3, [r7, #8]
 801564e:	2b08      	cmp	r3, #8
 8015650:	d104      	bne.n	801565c <HAL_TIMEx_PWMN_Start_DMA+0x11e>
 8015652:	68fb      	ldr	r3, [r7, #12]
 8015654:	2202      	movs	r2, #2
 8015656:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801565a:	e006      	b.n	801566a <HAL_TIMEx_PWMN_Start_DMA+0x12c>
 801565c:	68fb      	ldr	r3, [r7, #12]
 801565e:	2202      	movs	r2, #2
 8015660:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015664:	e001      	b.n	801566a <HAL_TIMEx_PWMN_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8015666:	2301      	movs	r3, #1
 8015668:	e0c6      	b.n	80157f8 <HAL_TIMEx_PWMN_Start_DMA+0x2ba>
  }

  switch (Channel)
 801566a:	68bb      	ldr	r3, [r7, #8]
 801566c:	2b08      	cmp	r3, #8
 801566e:	d051      	beq.n	8015714 <HAL_TIMEx_PWMN_Start_DMA+0x1d6>
 8015670:	68bb      	ldr	r3, [r7, #8]
 8015672:	2b08      	cmp	r3, #8
 8015674:	d872      	bhi.n	801575c <HAL_TIMEx_PWMN_Start_DMA+0x21e>
 8015676:	68bb      	ldr	r3, [r7, #8]
 8015678:	2b00      	cmp	r3, #0
 801567a:	d003      	beq.n	8015684 <HAL_TIMEx_PWMN_Start_DMA+0x146>
 801567c:	68bb      	ldr	r3, [r7, #8]
 801567e:	2b04      	cmp	r3, #4
 8015680:	d024      	beq.n	80156cc <HAL_TIMEx_PWMN_Start_DMA+0x18e>
 8015682:	e06b      	b.n	801575c <HAL_TIMEx_PWMN_Start_DMA+0x21e>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 8015684:	68fb      	ldr	r3, [r7, #12]
 8015686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015688:	4a5d      	ldr	r2, [pc, #372]	@ (8015800 <HAL_TIMEx_PWMN_Start_DMA+0x2c2>)
 801568a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 801568c:	68fb      	ldr	r3, [r7, #12]
 801568e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015690:	4a5c      	ldr	r2, [pc, #368]	@ (8015804 <HAL_TIMEx_PWMN_Start_DMA+0x2c6>)
 8015692:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAErrorCCxN ;
 8015694:	68fb      	ldr	r3, [r7, #12]
 8015696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015698:	4a5b      	ldr	r2, [pc, #364]	@ (8015808 <HAL_TIMEx_PWMN_Start_DMA+0x2ca>)
 801569a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 801569c:	68fb      	ldr	r3, [r7, #12]
 801569e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80156a0:	6879      	ldr	r1, [r7, #4]
 80156a2:	68fb      	ldr	r3, [r7, #12]
 80156a4:	681b      	ldr	r3, [r3, #0]
 80156a6:	3334      	adds	r3, #52	@ 0x34
 80156a8:	461a      	mov	r2, r3
 80156aa:	887b      	ldrh	r3, [r7, #2]
 80156ac:	f7f0 ff1d 	bl	80064ea <HAL_DMA_Start_IT>
 80156b0:	4603      	mov	r3, r0
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d001      	beq.n	80156ba <HAL_TIMEx_PWMN_Start_DMA+0x17c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80156b6:	2301      	movs	r3, #1
 80156b8:	e09e      	b.n	80157f8 <HAL_TIMEx_PWMN_Start_DMA+0x2ba>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80156ba:	68fb      	ldr	r3, [r7, #12]
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	68da      	ldr	r2, [r3, #12]
 80156c0:	68fb      	ldr	r3, [r7, #12]
 80156c2:	681b      	ldr	r3, [r3, #0]
 80156c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80156c8:	60da      	str	r2, [r3, #12]
      break;
 80156ca:	e04a      	b.n	8015762 <HAL_TIMEx_PWMN_Start_DMA+0x224>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 80156cc:	68fb      	ldr	r3, [r7, #12]
 80156ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80156d0:	4a4b      	ldr	r2, [pc, #300]	@ (8015800 <HAL_TIMEx_PWMN_Start_DMA+0x2c2>)
 80156d2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80156d4:	68fb      	ldr	r3, [r7, #12]
 80156d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80156d8:	4a4a      	ldr	r2, [pc, #296]	@ (8015804 <HAL_TIMEx_PWMN_Start_DMA+0x2c6>)
 80156da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAErrorCCxN ;
 80156dc:	68fb      	ldr	r3, [r7, #12]
 80156de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80156e0:	4a49      	ldr	r2, [pc, #292]	@ (8015808 <HAL_TIMEx_PWMN_Start_DMA+0x2ca>)
 80156e2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80156e4:	68fb      	ldr	r3, [r7, #12]
 80156e6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80156e8:	6879      	ldr	r1, [r7, #4]
 80156ea:	68fb      	ldr	r3, [r7, #12]
 80156ec:	681b      	ldr	r3, [r3, #0]
 80156ee:	3338      	adds	r3, #56	@ 0x38
 80156f0:	461a      	mov	r2, r3
 80156f2:	887b      	ldrh	r3, [r7, #2]
 80156f4:	f7f0 fef9 	bl	80064ea <HAL_DMA_Start_IT>
 80156f8:	4603      	mov	r3, r0
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	d001      	beq.n	8015702 <HAL_TIMEx_PWMN_Start_DMA+0x1c4>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80156fe:	2301      	movs	r3, #1
 8015700:	e07a      	b.n	80157f8 <HAL_TIMEx_PWMN_Start_DMA+0x2ba>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8015702:	68fb      	ldr	r3, [r7, #12]
 8015704:	681b      	ldr	r3, [r3, #0]
 8015706:	68da      	ldr	r2, [r3, #12]
 8015708:	68fb      	ldr	r3, [r7, #12]
 801570a:	681b      	ldr	r3, [r3, #0]
 801570c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8015710:	60da      	str	r2, [r3, #12]
      break;
 8015712:	e026      	b.n	8015762 <HAL_TIMEx_PWMN_Start_DMA+0x224>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 8015714:	68fb      	ldr	r3, [r7, #12]
 8015716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015718:	4a39      	ldr	r2, [pc, #228]	@ (8015800 <HAL_TIMEx_PWMN_Start_DMA+0x2c2>)
 801571a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 801571c:	68fb      	ldr	r3, [r7, #12]
 801571e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015720:	4a38      	ldr	r2, [pc, #224]	@ (8015804 <HAL_TIMEx_PWMN_Start_DMA+0x2c6>)
 8015722:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAErrorCCxN ;
 8015724:	68fb      	ldr	r3, [r7, #12]
 8015726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015728:	4a37      	ldr	r2, [pc, #220]	@ (8015808 <HAL_TIMEx_PWMN_Start_DMA+0x2ca>)
 801572a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 801572c:	68fb      	ldr	r3, [r7, #12]
 801572e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8015730:	6879      	ldr	r1, [r7, #4]
 8015732:	68fb      	ldr	r3, [r7, #12]
 8015734:	681b      	ldr	r3, [r3, #0]
 8015736:	333c      	adds	r3, #60	@ 0x3c
 8015738:	461a      	mov	r2, r3
 801573a:	887b      	ldrh	r3, [r7, #2]
 801573c:	f7f0 fed5 	bl	80064ea <HAL_DMA_Start_IT>
 8015740:	4603      	mov	r3, r0
 8015742:	2b00      	cmp	r3, #0
 8015744:	d001      	beq.n	801574a <HAL_TIMEx_PWMN_Start_DMA+0x20c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8015746:	2301      	movs	r3, #1
 8015748:	e056      	b.n	80157f8 <HAL_TIMEx_PWMN_Start_DMA+0x2ba>
      }
      /* Enable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 801574a:	68fb      	ldr	r3, [r7, #12]
 801574c:	681b      	ldr	r3, [r3, #0]
 801574e:	68da      	ldr	r2, [r3, #12]
 8015750:	68fb      	ldr	r3, [r7, #12]
 8015752:	681b      	ldr	r3, [r3, #0]
 8015754:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8015758:	60da      	str	r2, [r3, #12]
      break;
 801575a:	e002      	b.n	8015762 <HAL_TIMEx_PWMN_Start_DMA+0x224>
    }

    default:
      status = HAL_ERROR;
 801575c:	2301      	movs	r3, #1
 801575e:	75fb      	strb	r3, [r7, #23]
      break;
 8015760:	bf00      	nop
  }

  if (status == HAL_OK)
 8015762:	7dfb      	ldrb	r3, [r7, #23]
 8015764:	2b00      	cmp	r3, #0
 8015766:	d146      	bne.n	80157f6 <HAL_TIMEx_PWMN_Start_DMA+0x2b8>
  {
    /* Enable the complementary PWM output  */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8015768:	68fb      	ldr	r3, [r7, #12]
 801576a:	681b      	ldr	r3, [r3, #0]
 801576c:	2204      	movs	r2, #4
 801576e:	68b9      	ldr	r1, [r7, #8]
 8015770:	4618      	mov	r0, r3
 8015772:	f000 fd7d 	bl	8016270 <TIM_CCxNChannelCmd>

    /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 8015776:	68fb      	ldr	r3, [r7, #12]
 8015778:	681b      	ldr	r3, [r3, #0]
 801577a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801577c:	68fb      	ldr	r3, [r7, #12]
 801577e:	681b      	ldr	r3, [r3, #0]
 8015780:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8015784:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015786:	68fb      	ldr	r3, [r7, #12]
 8015788:	681b      	ldr	r3, [r3, #0]
 801578a:	4a20      	ldr	r2, [pc, #128]	@ (801580c <HAL_TIMEx_PWMN_Start_DMA+0x2ce>)
 801578c:	4293      	cmp	r3, r2
 801578e:	d018      	beq.n	80157c2 <HAL_TIMEx_PWMN_Start_DMA+0x284>
 8015790:	68fb      	ldr	r3, [r7, #12]
 8015792:	681b      	ldr	r3, [r3, #0]
 8015794:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015798:	d013      	beq.n	80157c2 <HAL_TIMEx_PWMN_Start_DMA+0x284>
 801579a:	68fb      	ldr	r3, [r7, #12]
 801579c:	681b      	ldr	r3, [r3, #0]
 801579e:	4a1c      	ldr	r2, [pc, #112]	@ (8015810 <HAL_TIMEx_PWMN_Start_DMA+0x2d2>)
 80157a0:	4293      	cmp	r3, r2
 80157a2:	d00e      	beq.n	80157c2 <HAL_TIMEx_PWMN_Start_DMA+0x284>
 80157a4:	68fb      	ldr	r3, [r7, #12]
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	4a1a      	ldr	r2, [pc, #104]	@ (8015814 <HAL_TIMEx_PWMN_Start_DMA+0x2d6>)
 80157aa:	4293      	cmp	r3, r2
 80157ac:	d009      	beq.n	80157c2 <HAL_TIMEx_PWMN_Start_DMA+0x284>
 80157ae:	68fb      	ldr	r3, [r7, #12]
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	4a19      	ldr	r2, [pc, #100]	@ (8015818 <HAL_TIMEx_PWMN_Start_DMA+0x2da>)
 80157b4:	4293      	cmp	r3, r2
 80157b6:	d004      	beq.n	80157c2 <HAL_TIMEx_PWMN_Start_DMA+0x284>
 80157b8:	68fb      	ldr	r3, [r7, #12]
 80157ba:	681b      	ldr	r3, [r3, #0]
 80157bc:	4a17      	ldr	r2, [pc, #92]	@ (801581c <HAL_TIMEx_PWMN_Start_DMA+0x2de>)
 80157be:	4293      	cmp	r3, r2
 80157c0:	d111      	bne.n	80157e6 <HAL_TIMEx_PWMN_Start_DMA+0x2a8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80157c2:	68fb      	ldr	r3, [r7, #12]
 80157c4:	681b      	ldr	r3, [r3, #0]
 80157c6:	689b      	ldr	r3, [r3, #8]
 80157c8:	f003 0307 	and.w	r3, r3, #7
 80157cc:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80157ce:	693b      	ldr	r3, [r7, #16]
 80157d0:	2b06      	cmp	r3, #6
 80157d2:	d010      	beq.n	80157f6 <HAL_TIMEx_PWMN_Start_DMA+0x2b8>
      {
        __HAL_TIM_ENABLE(htim);
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	681b      	ldr	r3, [r3, #0]
 80157d8:	681a      	ldr	r2, [r3, #0]
 80157da:	68fb      	ldr	r3, [r7, #12]
 80157dc:	681b      	ldr	r3, [r3, #0]
 80157de:	f042 0201 	orr.w	r2, r2, #1
 80157e2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80157e4:	e007      	b.n	80157f6 <HAL_TIMEx_PWMN_Start_DMA+0x2b8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80157e6:	68fb      	ldr	r3, [r7, #12]
 80157e8:	681b      	ldr	r3, [r3, #0]
 80157ea:	681a      	ldr	r2, [r3, #0]
 80157ec:	68fb      	ldr	r3, [r7, #12]
 80157ee:	681b      	ldr	r3, [r3, #0]
 80157f0:	f042 0201 	orr.w	r2, r2, #1
 80157f4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80157f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80157f8:	4618      	mov	r0, r3
 80157fa:	3718      	adds	r7, #24
 80157fc:	46bd      	mov	sp, r7
 80157fe:	bd80      	pop	{r7, pc}
 8015800:	0801617d 	.word	0x0801617d
 8015804:	080134f5 	.word	0x080134f5
 8015808:	08016203 	.word	0x08016203
 801580c:	40010000 	.word	0x40010000
 8015810:	40000400 	.word	0x40000400
 8015814:	40000800 	.word	0x40000800
 8015818:	40000c00 	.word	0x40000c00
 801581c:	40014000 	.word	0x40014000

08015820 <HAL_TIMEx_PWMN_Stop_DMA>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8015820:	b580      	push	{r7, lr}
 8015822:	b084      	sub	sp, #16
 8015824:	af00      	add	r7, sp, #0
 8015826:	6078      	str	r0, [r7, #4]
 8015828:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801582a:	2300      	movs	r3, #0
 801582c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 801582e:	683b      	ldr	r3, [r7, #0]
 8015830:	2b08      	cmp	r3, #8
 8015832:	d025      	beq.n	8015880 <HAL_TIMEx_PWMN_Stop_DMA+0x60>
 8015834:	683b      	ldr	r3, [r7, #0]
 8015836:	2b08      	cmp	r3, #8
 8015838:	d830      	bhi.n	801589c <HAL_TIMEx_PWMN_Stop_DMA+0x7c>
 801583a:	683b      	ldr	r3, [r7, #0]
 801583c:	2b00      	cmp	r3, #0
 801583e:	d003      	beq.n	8015848 <HAL_TIMEx_PWMN_Stop_DMA+0x28>
 8015840:	683b      	ldr	r3, [r7, #0]
 8015842:	2b04      	cmp	r3, #4
 8015844:	d00e      	beq.n	8015864 <HAL_TIMEx_PWMN_Stop_DMA+0x44>
 8015846:	e029      	b.n	801589c <HAL_TIMEx_PWMN_Stop_DMA+0x7c>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	681b      	ldr	r3, [r3, #0]
 801584c:	68da      	ldr	r2, [r3, #12]
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	681b      	ldr	r3, [r3, #0]
 8015852:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8015856:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801585c:	4618      	mov	r0, r3
 801585e:	f7f0 ff0c 	bl	800667a <HAL_DMA_Abort_IT>
      break;
 8015862:	e01e      	b.n	80158a2 <HAL_TIMEx_PWMN_Stop_DMA+0x82>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	681b      	ldr	r3, [r3, #0]
 8015868:	68da      	ldr	r2, [r3, #12]
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	681b      	ldr	r3, [r3, #0]
 801586e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8015872:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015878:	4618      	mov	r0, r3
 801587a:	f7f0 fefe 	bl	800667a <HAL_DMA_Abort_IT>
      break;
 801587e:	e010      	b.n	80158a2 <HAL_TIMEx_PWMN_Stop_DMA+0x82>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	681b      	ldr	r3, [r3, #0]
 8015884:	68da      	ldr	r2, [r3, #12]
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	681b      	ldr	r3, [r3, #0]
 801588a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 801588e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015894:	4618      	mov	r0, r3
 8015896:	f7f0 fef0 	bl	800667a <HAL_DMA_Abort_IT>
      break;
 801589a:	e002      	b.n	80158a2 <HAL_TIMEx_PWMN_Stop_DMA+0x82>
    }

    default:
      status = HAL_ERROR;
 801589c:	2301      	movs	r3, #1
 801589e:	73fb      	strb	r3, [r7, #15]
      break;
 80158a0:	bf00      	nop
  }

  if (status == HAL_OK)
 80158a2:	7bfb      	ldrb	r3, [r7, #15]
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	d152      	bne.n	801594e <HAL_TIMEx_PWMN_Stop_DMA+0x12e>
  {
    /* Disable the complementary PWM output */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	681b      	ldr	r3, [r3, #0]
 80158ac:	2200      	movs	r2, #0
 80158ae:	6839      	ldr	r1, [r7, #0]
 80158b0:	4618      	mov	r0, r3
 80158b2:	f000 fcdd 	bl	8016270 <TIM_CCxNChannelCmd>

    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	681b      	ldr	r3, [r3, #0]
 80158ba:	6a1a      	ldr	r2, [r3, #32]
 80158bc:	f241 1311 	movw	r3, #4369	@ 0x1111
 80158c0:	4013      	ands	r3, r2
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	d10f      	bne.n	80158e6 <HAL_TIMEx_PWMN_Stop_DMA+0xc6>
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	681b      	ldr	r3, [r3, #0]
 80158ca:	6a1a      	ldr	r2, [r3, #32]
 80158cc:	f240 4344 	movw	r3, #1092	@ 0x444
 80158d0:	4013      	ands	r3, r2
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	d107      	bne.n	80158e6 <HAL_TIMEx_PWMN_Stop_DMA+0xc6>
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	681b      	ldr	r3, [r3, #0]
 80158da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	681b      	ldr	r3, [r3, #0]
 80158e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80158e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	681b      	ldr	r3, [r3, #0]
 80158ea:	6a1a      	ldr	r2, [r3, #32]
 80158ec:	f241 1311 	movw	r3, #4369	@ 0x1111
 80158f0:	4013      	ands	r3, r2
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	d10f      	bne.n	8015916 <HAL_TIMEx_PWMN_Stop_DMA+0xf6>
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	681b      	ldr	r3, [r3, #0]
 80158fa:	6a1a      	ldr	r2, [r3, #32]
 80158fc:	f240 4344 	movw	r3, #1092	@ 0x444
 8015900:	4013      	ands	r3, r2
 8015902:	2b00      	cmp	r3, #0
 8015904:	d107      	bne.n	8015916 <HAL_TIMEx_PWMN_Stop_DMA+0xf6>
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	681b      	ldr	r3, [r3, #0]
 801590a:	681a      	ldr	r2, [r3, #0]
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	681b      	ldr	r3, [r3, #0]
 8015910:	f022 0201 	bic.w	r2, r2, #1
 8015914:	601a      	str	r2, [r3, #0]

    /* Set the TIM complementary channel state */
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8015916:	683b      	ldr	r3, [r7, #0]
 8015918:	2b00      	cmp	r3, #0
 801591a:	d104      	bne.n	8015926 <HAL_TIMEx_PWMN_Stop_DMA+0x106>
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	2201      	movs	r2, #1
 8015920:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8015924:	e013      	b.n	801594e <HAL_TIMEx_PWMN_Stop_DMA+0x12e>
 8015926:	683b      	ldr	r3, [r7, #0]
 8015928:	2b04      	cmp	r3, #4
 801592a:	d104      	bne.n	8015936 <HAL_TIMEx_PWMN_Stop_DMA+0x116>
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	2201      	movs	r2, #1
 8015930:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8015934:	e00b      	b.n	801594e <HAL_TIMEx_PWMN_Stop_DMA+0x12e>
 8015936:	683b      	ldr	r3, [r7, #0]
 8015938:	2b08      	cmp	r3, #8
 801593a:	d104      	bne.n	8015946 <HAL_TIMEx_PWMN_Stop_DMA+0x126>
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	2201      	movs	r2, #1
 8015940:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015944:	e003      	b.n	801594e <HAL_TIMEx_PWMN_Stop_DMA+0x12e>
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	2201      	movs	r2, #1
 801594a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 801594e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015950:	4618      	mov	r0, r3
 8015952:	3710      	adds	r7, #16
 8015954:	46bd      	mov	sp, r7
 8015956:	bd80      	pop	{r7, pc}

08015958 <HAL_TIMEx_OnePulseN_Start>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8015958:	b580      	push	{r7, lr}
 801595a:	b084      	sub	sp, #16
 801595c:	af00      	add	r7, sp, #0
 801595e:	6078      	str	r0, [r7, #4]
 8015960:	6039      	str	r1, [r7, #0]
  uint32_t input_channel = (OutputChannel == TIM_CHANNEL_1) ? TIM_CHANNEL_2 : TIM_CHANNEL_1;
 8015962:	683b      	ldr	r3, [r7, #0]
 8015964:	2b00      	cmp	r3, #0
 8015966:	d101      	bne.n	801596c <HAL_TIMEx_OnePulseN_Start+0x14>
 8015968:	2304      	movs	r3, #4
 801596a:	e000      	b.n	801596e <HAL_TIMEx_OnePulseN_Start+0x16>
 801596c:	2300      	movs	r3, #0
 801596e:	60fb      	str	r3, [r7, #12]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8015976:	72fb      	strb	r3, [r7, #11]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 801597e:	72bb      	strb	r3, [r7, #10]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015986:	727b      	strb	r3, [r7, #9]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801598e:	723b      	strb	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8015990:	7afb      	ldrb	r3, [r7, #11]
 8015992:	2b01      	cmp	r3, #1
 8015994:	d108      	bne.n	80159a8 <HAL_TIMEx_OnePulseN_Start+0x50>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8015996:	7abb      	ldrb	r3, [r7, #10]
 8015998:	2b01      	cmp	r3, #1
 801599a:	d105      	bne.n	80159a8 <HAL_TIMEx_OnePulseN_Start+0x50>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 801599c:	7a7b      	ldrb	r3, [r7, #9]
 801599e:	2b01      	cmp	r3, #1
 80159a0:	d102      	bne.n	80159a8 <HAL_TIMEx_OnePulseN_Start+0x50>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80159a2:	7a3b      	ldrb	r3, [r7, #8]
 80159a4:	2b01      	cmp	r3, #1
 80159a6:	d001      	beq.n	80159ac <HAL_TIMEx_OnePulseN_Start+0x54>
  {
    return HAL_ERROR;
 80159a8:	2301      	movs	r3, #1
 80159aa:	e026      	b.n	80159fa <HAL_TIMEx_OnePulseN_Start+0xa2>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	2202      	movs	r2, #2
 80159b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	2202      	movs	r2, #2
 80159b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	2202      	movs	r2, #2
 80159c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	2202      	movs	r2, #2
 80159c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the complementary One Pulse output channel and the Input Capture channel */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE);
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	681b      	ldr	r3, [r3, #0]
 80159d0:	2204      	movs	r2, #4
 80159d2:	6839      	ldr	r1, [r7, #0]
 80159d4:	4618      	mov	r0, r3
 80159d6:	f000 fc4b 	bl	8016270 <TIM_CCxNChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, input_channel, TIM_CCx_ENABLE);
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	681b      	ldr	r3, [r3, #0]
 80159de:	2201      	movs	r2, #1
 80159e0:	68f9      	ldr	r1, [r7, #12]
 80159e2:	4618      	mov	r0, r3
 80159e4:	f7fe fafc 	bl	8013fe0 <TIM_CCxChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	681b      	ldr	r3, [r3, #0]
 80159ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80159ee:	687b      	ldr	r3, [r7, #4]
 80159f0:	681b      	ldr	r3, [r3, #0]
 80159f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80159f6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Return function status */
  return HAL_OK;
 80159f8:	2300      	movs	r3, #0
}
 80159fa:	4618      	mov	r0, r3
 80159fc:	3710      	adds	r7, #16
 80159fe:	46bd      	mov	sp, r7
 8015a00:	bd80      	pop	{r7, pc}

08015a02 <HAL_TIMEx_OnePulseN_Stop>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8015a02:	b580      	push	{r7, lr}
 8015a04:	b084      	sub	sp, #16
 8015a06:	af00      	add	r7, sp, #0
 8015a08:	6078      	str	r0, [r7, #4]
 8015a0a:	6039      	str	r1, [r7, #0]
  uint32_t input_channel = (OutputChannel == TIM_CHANNEL_1) ? TIM_CHANNEL_2 : TIM_CHANNEL_1;
 8015a0c:	683b      	ldr	r3, [r7, #0]
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d101      	bne.n	8015a16 <HAL_TIMEx_OnePulseN_Stop+0x14>
 8015a12:	2304      	movs	r3, #4
 8015a14:	e000      	b.n	8015a18 <HAL_TIMEx_OnePulseN_Stop+0x16>
 8015a16:	2300      	movs	r3, #0
 8015a18:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));

  /* Disable the complementary One Pulse output channel and the Input Capture channel */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	681b      	ldr	r3, [r3, #0]
 8015a1e:	2200      	movs	r2, #0
 8015a20:	6839      	ldr	r1, [r7, #0]
 8015a22:	4618      	mov	r0, r3
 8015a24:	f000 fc24 	bl	8016270 <TIM_CCxNChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, input_channel, TIM_CCx_DISABLE);
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	681b      	ldr	r3, [r3, #0]
 8015a2c:	2200      	movs	r2, #0
 8015a2e:	68f9      	ldr	r1, [r7, #12]
 8015a30:	4618      	mov	r0, r3
 8015a32:	f7fe fad5 	bl	8013fe0 <TIM_CCxChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	6a1a      	ldr	r2, [r3, #32]
 8015a3c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8015a40:	4013      	ands	r3, r2
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	d10f      	bne.n	8015a66 <HAL_TIMEx_OnePulseN_Stop+0x64>
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	681b      	ldr	r3, [r3, #0]
 8015a4a:	6a1a      	ldr	r2, [r3, #32]
 8015a4c:	f240 4344 	movw	r3, #1092	@ 0x444
 8015a50:	4013      	ands	r3, r2
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d107      	bne.n	8015a66 <HAL_TIMEx_OnePulseN_Stop+0x64>
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	681b      	ldr	r3, [r3, #0]
 8015a5a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	681b      	ldr	r3, [r3, #0]
 8015a60:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8015a64:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	681b      	ldr	r3, [r3, #0]
 8015a6a:	6a1a      	ldr	r2, [r3, #32]
 8015a6c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8015a70:	4013      	ands	r3, r2
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	d10f      	bne.n	8015a96 <HAL_TIMEx_OnePulseN_Stop+0x94>
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	681b      	ldr	r3, [r3, #0]
 8015a7a:	6a1a      	ldr	r2, [r3, #32]
 8015a7c:	f240 4344 	movw	r3, #1092	@ 0x444
 8015a80:	4013      	ands	r3, r2
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	d107      	bne.n	8015a96 <HAL_TIMEx_OnePulseN_Stop+0x94>
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	681b      	ldr	r3, [r3, #0]
 8015a8a:	681a      	ldr	r2, [r3, #0]
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	681b      	ldr	r3, [r3, #0]
 8015a90:	f022 0201 	bic.w	r2, r2, #1
 8015a94:	601a      	str	r2, [r3, #0]

  /* Set the TIM  channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	2201      	movs	r2, #1
 8015a9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	2201      	movs	r2, #1
 8015aa2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	2201      	movs	r2, #1
 8015aaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	2201      	movs	r2, #1
 8015ab2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8015ab6:	2300      	movs	r3, #0
}
 8015ab8:	4618      	mov	r0, r3
 8015aba:	3710      	adds	r7, #16
 8015abc:	46bd      	mov	sp, r7
 8015abe:	bd80      	pop	{r7, pc}

08015ac0 <HAL_TIMEx_OnePulseN_Start_IT>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8015ac0:	b580      	push	{r7, lr}
 8015ac2:	b084      	sub	sp, #16
 8015ac4:	af00      	add	r7, sp, #0
 8015ac6:	6078      	str	r0, [r7, #4]
 8015ac8:	6039      	str	r1, [r7, #0]
  uint32_t input_channel = (OutputChannel == TIM_CHANNEL_1) ? TIM_CHANNEL_2 : TIM_CHANNEL_1;
 8015aca:	683b      	ldr	r3, [r7, #0]
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d101      	bne.n	8015ad4 <HAL_TIMEx_OnePulseN_Start_IT+0x14>
 8015ad0:	2304      	movs	r3, #4
 8015ad2:	e000      	b.n	8015ad6 <HAL_TIMEx_OnePulseN_Start_IT+0x16>
 8015ad4:	2300      	movs	r3, #0
 8015ad6:	60fb      	str	r3, [r7, #12]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8015ade:	72fb      	strb	r3, [r7, #11]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8015ae6:	72bb      	strb	r3, [r7, #10]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015aee:	727b      	strb	r3, [r7, #9]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8015af6:	723b      	strb	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8015af8:	7afb      	ldrb	r3, [r7, #11]
 8015afa:	2b01      	cmp	r3, #1
 8015afc:	d108      	bne.n	8015b10 <HAL_TIMEx_OnePulseN_Start_IT+0x50>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8015afe:	7abb      	ldrb	r3, [r7, #10]
 8015b00:	2b01      	cmp	r3, #1
 8015b02:	d105      	bne.n	8015b10 <HAL_TIMEx_OnePulseN_Start_IT+0x50>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8015b04:	7a7b      	ldrb	r3, [r7, #9]
 8015b06:	2b01      	cmp	r3, #1
 8015b08:	d102      	bne.n	8015b10 <HAL_TIMEx_OnePulseN_Start_IT+0x50>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8015b0a:	7a3b      	ldrb	r3, [r7, #8]
 8015b0c:	2b01      	cmp	r3, #1
 8015b0e:	d001      	beq.n	8015b14 <HAL_TIMEx_OnePulseN_Start_IT+0x54>
  {
    return HAL_ERROR;
 8015b10:	2301      	movs	r3, #1
 8015b12:	e036      	b.n	8015b82 <HAL_TIMEx_OnePulseN_Start_IT+0xc2>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	2202      	movs	r2, #2
 8015b18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	2202      	movs	r2, #2
 8015b20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	2202      	movs	r2, #2
 8015b28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	2202      	movs	r2, #2
 8015b30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	681b      	ldr	r3, [r3, #0]
 8015b38:	68da      	ldr	r2, [r3, #12]
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	681b      	ldr	r3, [r3, #0]
 8015b3e:	f042 0202 	orr.w	r2, r2, #2
 8015b42:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	681b      	ldr	r3, [r3, #0]
 8015b48:	68da      	ldr	r2, [r3, #12]
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	681b      	ldr	r3, [r3, #0]
 8015b4e:	f042 0204 	orr.w	r2, r2, #4
 8015b52:	60da      	str	r2, [r3, #12]

  /* Enable the complementary One Pulse output channel and the Input Capture channel */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE);
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	681b      	ldr	r3, [r3, #0]
 8015b58:	2204      	movs	r2, #4
 8015b5a:	6839      	ldr	r1, [r7, #0]
 8015b5c:	4618      	mov	r0, r3
 8015b5e:	f000 fb87 	bl	8016270 <TIM_CCxNChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, input_channel, TIM_CCx_ENABLE);
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	681b      	ldr	r3, [r3, #0]
 8015b66:	2201      	movs	r2, #1
 8015b68:	68f9      	ldr	r1, [r7, #12]
 8015b6a:	4618      	mov	r0, r3
 8015b6c:	f7fe fa38 	bl	8013fe0 <TIM_CCxChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	681b      	ldr	r3, [r3, #0]
 8015b74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	681b      	ldr	r3, [r3, #0]
 8015b7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8015b7e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Return function status */
  return HAL_OK;
 8015b80:	2300      	movs	r3, #0
}
 8015b82:	4618      	mov	r0, r3
 8015b84:	3710      	adds	r7, #16
 8015b86:	46bd      	mov	sp, r7
 8015b88:	bd80      	pop	{r7, pc}

08015b8a <HAL_TIMEx_OnePulseN_Stop_IT>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8015b8a:	b580      	push	{r7, lr}
 8015b8c:	b084      	sub	sp, #16
 8015b8e:	af00      	add	r7, sp, #0
 8015b90:	6078      	str	r0, [r7, #4]
 8015b92:	6039      	str	r1, [r7, #0]
  uint32_t input_channel = (OutputChannel == TIM_CHANNEL_1) ? TIM_CHANNEL_2 : TIM_CHANNEL_1;
 8015b94:	683b      	ldr	r3, [r7, #0]
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	d101      	bne.n	8015b9e <HAL_TIMEx_OnePulseN_Stop_IT+0x14>
 8015b9a:	2304      	movs	r3, #4
 8015b9c:	e000      	b.n	8015ba0 <HAL_TIMEx_OnePulseN_Stop_IT+0x16>
 8015b9e:	2300      	movs	r3, #0
 8015ba0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));

  /* Disable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	681b      	ldr	r3, [r3, #0]
 8015ba6:	68da      	ldr	r2, [r3, #12]
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	681b      	ldr	r3, [r3, #0]
 8015bac:	f022 0202 	bic.w	r2, r2, #2
 8015bb0:	60da      	str	r2, [r3, #12]

  /* Disable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	681b      	ldr	r3, [r3, #0]
 8015bb6:	68da      	ldr	r2, [r3, #12]
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	681b      	ldr	r3, [r3, #0]
 8015bbc:	f022 0204 	bic.w	r2, r2, #4
 8015bc0:	60da      	str	r2, [r3, #12]

  /* Disable the complementary One Pulse output channel and the Input Capture channel */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	681b      	ldr	r3, [r3, #0]
 8015bc6:	2200      	movs	r2, #0
 8015bc8:	6839      	ldr	r1, [r7, #0]
 8015bca:	4618      	mov	r0, r3
 8015bcc:	f000 fb50 	bl	8016270 <TIM_CCxNChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, input_channel, TIM_CCx_DISABLE);
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	681b      	ldr	r3, [r3, #0]
 8015bd4:	2200      	movs	r2, #0
 8015bd6:	68f9      	ldr	r1, [r7, #12]
 8015bd8:	4618      	mov	r0, r3
 8015bda:	f7fe fa01 	bl	8013fe0 <TIM_CCxChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	681b      	ldr	r3, [r3, #0]
 8015be2:	6a1a      	ldr	r2, [r3, #32]
 8015be4:	f241 1311 	movw	r3, #4369	@ 0x1111
 8015be8:	4013      	ands	r3, r2
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	d10f      	bne.n	8015c0e <HAL_TIMEx_OnePulseN_Stop_IT+0x84>
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	681b      	ldr	r3, [r3, #0]
 8015bf2:	6a1a      	ldr	r2, [r3, #32]
 8015bf4:	f240 4344 	movw	r3, #1092	@ 0x444
 8015bf8:	4013      	ands	r3, r2
 8015bfa:	2b00      	cmp	r3, #0
 8015bfc:	d107      	bne.n	8015c0e <HAL_TIMEx_OnePulseN_Stop_IT+0x84>
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	681b      	ldr	r3, [r3, #0]
 8015c02:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	681b      	ldr	r3, [r3, #0]
 8015c08:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8015c0c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	681b      	ldr	r3, [r3, #0]
 8015c12:	6a1a      	ldr	r2, [r3, #32]
 8015c14:	f241 1311 	movw	r3, #4369	@ 0x1111
 8015c18:	4013      	ands	r3, r2
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d10f      	bne.n	8015c3e <HAL_TIMEx_OnePulseN_Stop_IT+0xb4>
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	681b      	ldr	r3, [r3, #0]
 8015c22:	6a1a      	ldr	r2, [r3, #32]
 8015c24:	f240 4344 	movw	r3, #1092	@ 0x444
 8015c28:	4013      	ands	r3, r2
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d107      	bne.n	8015c3e <HAL_TIMEx_OnePulseN_Stop_IT+0xb4>
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	681b      	ldr	r3, [r3, #0]
 8015c32:	681a      	ldr	r2, [r3, #0]
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	681b      	ldr	r3, [r3, #0]
 8015c38:	f022 0201 	bic.w	r2, r2, #1
 8015c3c:	601a      	str	r2, [r3, #0]

  /* Set the TIM  channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	2201      	movs	r2, #1
 8015c42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	2201      	movs	r2, #1
 8015c4a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	2201      	movs	r2, #1
 8015c52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	2201      	movs	r2, #1
 8015c5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8015c5e:	2300      	movs	r3, #0
}
 8015c60:	4618      	mov	r0, r3
 8015c62:	3710      	adds	r7, #16
 8015c64:	46bd      	mov	sp, r7
 8015c66:	bd80      	pop	{r7, pc}

08015c68 <HAL_TIMEx_ConfigCommutEvent>:
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutEvent(TIM_HandleTypeDef *htim, uint32_t  InputTrigger,
                                              uint32_t  CommutationSource)
{
 8015c68:	b480      	push	{r7}
 8015c6a:	b085      	sub	sp, #20
 8015c6c:	af00      	add	r7, sp, #0
 8015c6e:	60f8      	str	r0, [r7, #12]
 8015c70:	60b9      	str	r1, [r7, #8]
 8015c72:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));

  __HAL_LOCK(htim);
 8015c74:	68fb      	ldr	r3, [r7, #12]
 8015c76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8015c7a:	2b01      	cmp	r3, #1
 8015c7c:	d101      	bne.n	8015c82 <HAL_TIMEx_ConfigCommutEvent+0x1a>
 8015c7e:	2302      	movs	r3, #2
 8015c80:	e04c      	b.n	8015d1c <HAL_TIMEx_ConfigCommutEvent+0xb4>
 8015c82:	68fb      	ldr	r3, [r7, #12]
 8015c84:	2201      	movs	r2, #1
 8015c86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 8015c8a:	68bb      	ldr	r3, [r7, #8]
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	d008      	beq.n	8015ca2 <HAL_TIMEx_ConfigCommutEvent+0x3a>
 8015c90:	68bb      	ldr	r3, [r7, #8]
 8015c92:	2b10      	cmp	r3, #16
 8015c94:	d005      	beq.n	8015ca2 <HAL_TIMEx_ConfigCommutEvent+0x3a>
 8015c96:	68bb      	ldr	r3, [r7, #8]
 8015c98:	2b20      	cmp	r3, #32
 8015c9a:	d002      	beq.n	8015ca2 <HAL_TIMEx_ConfigCommutEvent+0x3a>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 8015c9c:	68bb      	ldr	r3, [r7, #8]
 8015c9e:	2b30      	cmp	r3, #48	@ 0x30
 8015ca0:	d10f      	bne.n	8015cc2 <HAL_TIMEx_ConfigCommutEvent+0x5a>
  {
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8015ca2:	68fb      	ldr	r3, [r7, #12]
 8015ca4:	681b      	ldr	r3, [r3, #0]
 8015ca6:	689a      	ldr	r2, [r3, #8]
 8015ca8:	68fb      	ldr	r3, [r7, #12]
 8015caa:	681b      	ldr	r3, [r3, #0]
 8015cac:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8015cb0:	609a      	str	r2, [r3, #8]
    htim->Instance->SMCR |= InputTrigger;
 8015cb2:	68fb      	ldr	r3, [r7, #12]
 8015cb4:	681b      	ldr	r3, [r3, #0]
 8015cb6:	6899      	ldr	r1, [r3, #8]
 8015cb8:	68fb      	ldr	r3, [r7, #12]
 8015cba:	681b      	ldr	r3, [r3, #0]
 8015cbc:	68ba      	ldr	r2, [r7, #8]
 8015cbe:	430a      	orrs	r2, r1
 8015cc0:	609a      	str	r2, [r3, #8]
  }

  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 8015cc2:	68fb      	ldr	r3, [r7, #12]
 8015cc4:	681b      	ldr	r3, [r3, #0]
 8015cc6:	685a      	ldr	r2, [r3, #4]
 8015cc8:	68fb      	ldr	r3, [r7, #12]
 8015cca:	681b      	ldr	r3, [r3, #0]
 8015ccc:	f042 0201 	orr.w	r2, r2, #1
 8015cd0:	605a      	str	r2, [r3, #4]
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 8015cd2:	68fb      	ldr	r3, [r7, #12]
 8015cd4:	681b      	ldr	r3, [r3, #0]
 8015cd6:	685a      	ldr	r2, [r3, #4]
 8015cd8:	68fb      	ldr	r3, [r7, #12]
 8015cda:	681b      	ldr	r3, [r3, #0]
 8015cdc:	f022 0204 	bic.w	r2, r2, #4
 8015ce0:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 8015ce2:	68fb      	ldr	r3, [r7, #12]
 8015ce4:	681b      	ldr	r3, [r3, #0]
 8015ce6:	6859      	ldr	r1, [r3, #4]
 8015ce8:	68fb      	ldr	r3, [r7, #12]
 8015cea:	681b      	ldr	r3, [r3, #0]
 8015cec:	687a      	ldr	r2, [r7, #4]
 8015cee:	430a      	orrs	r2, r1
 8015cf0:	605a      	str	r2, [r3, #4]

  /* Disable Commutation Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_COM);
 8015cf2:	68fb      	ldr	r3, [r7, #12]
 8015cf4:	681b      	ldr	r3, [r3, #0]
 8015cf6:	68da      	ldr	r2, [r3, #12]
 8015cf8:	68fb      	ldr	r3, [r7, #12]
 8015cfa:	681b      	ldr	r3, [r3, #0]
 8015cfc:	f022 0220 	bic.w	r2, r2, #32
 8015d00:	60da      	str	r2, [r3, #12]

  /* Disable Commutation DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_COM);
 8015d02:	68fb      	ldr	r3, [r7, #12]
 8015d04:	681b      	ldr	r3, [r3, #0]
 8015d06:	68da      	ldr	r2, [r3, #12]
 8015d08:	68fb      	ldr	r3, [r7, #12]
 8015d0a:	681b      	ldr	r3, [r3, #0]
 8015d0c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8015d10:	60da      	str	r2, [r3, #12]

  __HAL_UNLOCK(htim);
 8015d12:	68fb      	ldr	r3, [r7, #12]
 8015d14:	2200      	movs	r2, #0
 8015d16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8015d1a:	2300      	movs	r3, #0
}
 8015d1c:	4618      	mov	r0, r3
 8015d1e:	3714      	adds	r7, #20
 8015d20:	46bd      	mov	sp, r7
 8015d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d26:	4770      	bx	lr

08015d28 <HAL_TIMEx_ConfigCommutEvent_IT>:
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutEvent_IT(TIM_HandleTypeDef *htim, uint32_t  InputTrigger,
                                                 uint32_t  CommutationSource)
{
 8015d28:	b480      	push	{r7}
 8015d2a:	b085      	sub	sp, #20
 8015d2c:	af00      	add	r7, sp, #0
 8015d2e:	60f8      	str	r0, [r7, #12]
 8015d30:	60b9      	str	r1, [r7, #8]
 8015d32:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));

  __HAL_LOCK(htim);
 8015d34:	68fb      	ldr	r3, [r7, #12]
 8015d36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8015d3a:	2b01      	cmp	r3, #1
 8015d3c:	d101      	bne.n	8015d42 <HAL_TIMEx_ConfigCommutEvent_IT+0x1a>
 8015d3e:	2302      	movs	r3, #2
 8015d40:	e04c      	b.n	8015ddc <HAL_TIMEx_ConfigCommutEvent_IT+0xb4>
 8015d42:	68fb      	ldr	r3, [r7, #12]
 8015d44:	2201      	movs	r2, #1
 8015d46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 8015d4a:	68bb      	ldr	r3, [r7, #8]
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	d008      	beq.n	8015d62 <HAL_TIMEx_ConfigCommutEvent_IT+0x3a>
 8015d50:	68bb      	ldr	r3, [r7, #8]
 8015d52:	2b10      	cmp	r3, #16
 8015d54:	d005      	beq.n	8015d62 <HAL_TIMEx_ConfigCommutEvent_IT+0x3a>
 8015d56:	68bb      	ldr	r3, [r7, #8]
 8015d58:	2b20      	cmp	r3, #32
 8015d5a:	d002      	beq.n	8015d62 <HAL_TIMEx_ConfigCommutEvent_IT+0x3a>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 8015d5c:	68bb      	ldr	r3, [r7, #8]
 8015d5e:	2b30      	cmp	r3, #48	@ 0x30
 8015d60:	d10f      	bne.n	8015d82 <HAL_TIMEx_ConfigCommutEvent_IT+0x5a>
  {
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8015d62:	68fb      	ldr	r3, [r7, #12]
 8015d64:	681b      	ldr	r3, [r3, #0]
 8015d66:	689a      	ldr	r2, [r3, #8]
 8015d68:	68fb      	ldr	r3, [r7, #12]
 8015d6a:	681b      	ldr	r3, [r3, #0]
 8015d6c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8015d70:	609a      	str	r2, [r3, #8]
    htim->Instance->SMCR |= InputTrigger;
 8015d72:	68fb      	ldr	r3, [r7, #12]
 8015d74:	681b      	ldr	r3, [r3, #0]
 8015d76:	6899      	ldr	r1, [r3, #8]
 8015d78:	68fb      	ldr	r3, [r7, #12]
 8015d7a:	681b      	ldr	r3, [r3, #0]
 8015d7c:	68ba      	ldr	r2, [r7, #8]
 8015d7e:	430a      	orrs	r2, r1
 8015d80:	609a      	str	r2, [r3, #8]
  }

  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 8015d82:	68fb      	ldr	r3, [r7, #12]
 8015d84:	681b      	ldr	r3, [r3, #0]
 8015d86:	685a      	ldr	r2, [r3, #4]
 8015d88:	68fb      	ldr	r3, [r7, #12]
 8015d8a:	681b      	ldr	r3, [r3, #0]
 8015d8c:	f042 0201 	orr.w	r2, r2, #1
 8015d90:	605a      	str	r2, [r3, #4]
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 8015d92:	68fb      	ldr	r3, [r7, #12]
 8015d94:	681b      	ldr	r3, [r3, #0]
 8015d96:	685a      	ldr	r2, [r3, #4]
 8015d98:	68fb      	ldr	r3, [r7, #12]
 8015d9a:	681b      	ldr	r3, [r3, #0]
 8015d9c:	f022 0204 	bic.w	r2, r2, #4
 8015da0:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 8015da2:	68fb      	ldr	r3, [r7, #12]
 8015da4:	681b      	ldr	r3, [r3, #0]
 8015da6:	6859      	ldr	r1, [r3, #4]
 8015da8:	68fb      	ldr	r3, [r7, #12]
 8015daa:	681b      	ldr	r3, [r3, #0]
 8015dac:	687a      	ldr	r2, [r7, #4]
 8015dae:	430a      	orrs	r2, r1
 8015db0:	605a      	str	r2, [r3, #4]

  /* Disable Commutation DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_COM);
 8015db2:	68fb      	ldr	r3, [r7, #12]
 8015db4:	681b      	ldr	r3, [r3, #0]
 8015db6:	68da      	ldr	r2, [r3, #12]
 8015db8:	68fb      	ldr	r3, [r7, #12]
 8015dba:	681b      	ldr	r3, [r3, #0]
 8015dbc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8015dc0:	60da      	str	r2, [r3, #12]

  /* Enable the Commutation Interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_COM);
 8015dc2:	68fb      	ldr	r3, [r7, #12]
 8015dc4:	681b      	ldr	r3, [r3, #0]
 8015dc6:	68da      	ldr	r2, [r3, #12]
 8015dc8:	68fb      	ldr	r3, [r7, #12]
 8015dca:	681b      	ldr	r3, [r3, #0]
 8015dcc:	f042 0220 	orr.w	r2, r2, #32
 8015dd0:	60da      	str	r2, [r3, #12]

  __HAL_UNLOCK(htim);
 8015dd2:	68fb      	ldr	r3, [r7, #12]
 8015dd4:	2200      	movs	r2, #0
 8015dd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8015dda:	2300      	movs	r3, #0
}
 8015ddc:	4618      	mov	r0, r3
 8015dde:	3714      	adds	r7, #20
 8015de0:	46bd      	mov	sp, r7
 8015de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015de6:	4770      	bx	lr

08015de8 <HAL_TIMEx_ConfigCommutEvent_DMA>:
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutEvent_DMA(TIM_HandleTypeDef *htim, uint32_t  InputTrigger,
                                                  uint32_t  CommutationSource)
{
 8015de8:	b480      	push	{r7}
 8015dea:	b085      	sub	sp, #20
 8015dec:	af00      	add	r7, sp, #0
 8015dee:	60f8      	str	r0, [r7, #12]
 8015df0:	60b9      	str	r1, [r7, #8]
 8015df2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));

  __HAL_LOCK(htim);
 8015df4:	68fb      	ldr	r3, [r7, #12]
 8015df6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8015dfa:	2b01      	cmp	r3, #1
 8015dfc:	d101      	bne.n	8015e02 <HAL_TIMEx_ConfigCommutEvent_DMA+0x1a>
 8015dfe:	2302      	movs	r3, #2
 8015e00:	e058      	b.n	8015eb4 <HAL_TIMEx_ConfigCommutEvent_DMA+0xcc>
 8015e02:	68fb      	ldr	r3, [r7, #12]
 8015e04:	2201      	movs	r2, #1
 8015e06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 8015e0a:	68bb      	ldr	r3, [r7, #8]
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d008      	beq.n	8015e22 <HAL_TIMEx_ConfigCommutEvent_DMA+0x3a>
 8015e10:	68bb      	ldr	r3, [r7, #8]
 8015e12:	2b10      	cmp	r3, #16
 8015e14:	d005      	beq.n	8015e22 <HAL_TIMEx_ConfigCommutEvent_DMA+0x3a>
 8015e16:	68bb      	ldr	r3, [r7, #8]
 8015e18:	2b20      	cmp	r3, #32
 8015e1a:	d002      	beq.n	8015e22 <HAL_TIMEx_ConfigCommutEvent_DMA+0x3a>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 8015e1c:	68bb      	ldr	r3, [r7, #8]
 8015e1e:	2b30      	cmp	r3, #48	@ 0x30
 8015e20:	d10f      	bne.n	8015e42 <HAL_TIMEx_ConfigCommutEvent_DMA+0x5a>
  {
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8015e22:	68fb      	ldr	r3, [r7, #12]
 8015e24:	681b      	ldr	r3, [r3, #0]
 8015e26:	689a      	ldr	r2, [r3, #8]
 8015e28:	68fb      	ldr	r3, [r7, #12]
 8015e2a:	681b      	ldr	r3, [r3, #0]
 8015e2c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8015e30:	609a      	str	r2, [r3, #8]
    htim->Instance->SMCR |= InputTrigger;
 8015e32:	68fb      	ldr	r3, [r7, #12]
 8015e34:	681b      	ldr	r3, [r3, #0]
 8015e36:	6899      	ldr	r1, [r3, #8]
 8015e38:	68fb      	ldr	r3, [r7, #12]
 8015e3a:	681b      	ldr	r3, [r3, #0]
 8015e3c:	68ba      	ldr	r2, [r7, #8]
 8015e3e:	430a      	orrs	r2, r1
 8015e40:	609a      	str	r2, [r3, #8]
  }

  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 8015e42:	68fb      	ldr	r3, [r7, #12]
 8015e44:	681b      	ldr	r3, [r3, #0]
 8015e46:	685a      	ldr	r2, [r3, #4]
 8015e48:	68fb      	ldr	r3, [r7, #12]
 8015e4a:	681b      	ldr	r3, [r3, #0]
 8015e4c:	f042 0201 	orr.w	r2, r2, #1
 8015e50:	605a      	str	r2, [r3, #4]
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 8015e52:	68fb      	ldr	r3, [r7, #12]
 8015e54:	681b      	ldr	r3, [r3, #0]
 8015e56:	685a      	ldr	r2, [r3, #4]
 8015e58:	68fb      	ldr	r3, [r7, #12]
 8015e5a:	681b      	ldr	r3, [r3, #0]
 8015e5c:	f022 0204 	bic.w	r2, r2, #4
 8015e60:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 8015e62:	68fb      	ldr	r3, [r7, #12]
 8015e64:	681b      	ldr	r3, [r3, #0]
 8015e66:	6859      	ldr	r1, [r3, #4]
 8015e68:	68fb      	ldr	r3, [r7, #12]
 8015e6a:	681b      	ldr	r3, [r3, #0]
 8015e6c:	687a      	ldr	r2, [r7, #4]
 8015e6e:	430a      	orrs	r2, r1
 8015e70:	605a      	str	r2, [r3, #4]

  /* Enable the Commutation DMA Request */
  /* Set the DMA Commutation Callback */
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback = TIMEx_DMACommutationCplt;
 8015e72:	68fb      	ldr	r3, [r7, #12]
 8015e74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015e76:	4a12      	ldr	r2, [pc, #72]	@ (8015ec0 <HAL_TIMEx_ConfigCommutEvent_DMA+0xd8>)
 8015e78:	63da      	str	r2, [r3, #60]	@ 0x3c
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferHalfCpltCallback = TIMEx_DMACommutationHalfCplt;
 8015e7a:	68fb      	ldr	r3, [r7, #12]
 8015e7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015e7e:	4a11      	ldr	r2, [pc, #68]	@ (8015ec4 <HAL_TIMEx_ConfigCommutEvent_DMA+0xdc>)
 8015e80:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError;
 8015e82:	68fb      	ldr	r3, [r7, #12]
 8015e84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015e86:	4a10      	ldr	r2, [pc, #64]	@ (8015ec8 <HAL_TIMEx_ConfigCommutEvent_DMA+0xe0>)
 8015e88:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Disable Commutation Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_COM);
 8015e8a:	68fb      	ldr	r3, [r7, #12]
 8015e8c:	681b      	ldr	r3, [r3, #0]
 8015e8e:	68da      	ldr	r2, [r3, #12]
 8015e90:	68fb      	ldr	r3, [r7, #12]
 8015e92:	681b      	ldr	r3, [r3, #0]
 8015e94:	f022 0220 	bic.w	r2, r2, #32
 8015e98:	60da      	str	r2, [r3, #12]

  /* Enable the Commutation DMA Request */
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_COM);
 8015e9a:	68fb      	ldr	r3, [r7, #12]
 8015e9c:	681b      	ldr	r3, [r3, #0]
 8015e9e:	68da      	ldr	r2, [r3, #12]
 8015ea0:	68fb      	ldr	r3, [r7, #12]
 8015ea2:	681b      	ldr	r3, [r3, #0]
 8015ea4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8015ea8:	60da      	str	r2, [r3, #12]

  __HAL_UNLOCK(htim);
 8015eaa:	68fb      	ldr	r3, [r7, #12]
 8015eac:	2200      	movs	r2, #0
 8015eae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8015eb2:	2300      	movs	r3, #0
}
 8015eb4:	4618      	mov	r0, r3
 8015eb6:	3714      	adds	r7, #20
 8015eb8:	46bd      	mov	sp, r7
 8015eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ebe:	4770      	bx	lr
 8015ec0:	08016135 	.word	0x08016135
 8015ec4:	08016159 	.word	0x08016159
 8015ec8:	080133bb 	.word	0x080133bb

08015ecc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8015ecc:	b480      	push	{r7}
 8015ece:	b085      	sub	sp, #20
 8015ed0:	af00      	add	r7, sp, #0
 8015ed2:	6078      	str	r0, [r7, #4]
 8015ed4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8015edc:	2b01      	cmp	r3, #1
 8015ede:	d101      	bne.n	8015ee4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8015ee0:	2302      	movs	r3, #2
 8015ee2:	e050      	b.n	8015f86 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	2201      	movs	r2, #1
 8015ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	2202      	movs	r2, #2
 8015ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	681b      	ldr	r3, [r3, #0]
 8015ef8:	685b      	ldr	r3, [r3, #4]
 8015efa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	681b      	ldr	r3, [r3, #0]
 8015f00:	689b      	ldr	r3, [r3, #8]
 8015f02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8015f04:	68fb      	ldr	r3, [r7, #12]
 8015f06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8015f0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8015f0c:	683b      	ldr	r3, [r7, #0]
 8015f0e:	681b      	ldr	r3, [r3, #0]
 8015f10:	68fa      	ldr	r2, [r7, #12]
 8015f12:	4313      	orrs	r3, r2
 8015f14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	681b      	ldr	r3, [r3, #0]
 8015f1a:	68fa      	ldr	r2, [r7, #12]
 8015f1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	681b      	ldr	r3, [r3, #0]
 8015f22:	4a1c      	ldr	r2, [pc, #112]	@ (8015f94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8015f24:	4293      	cmp	r3, r2
 8015f26:	d018      	beq.n	8015f5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	681b      	ldr	r3, [r3, #0]
 8015f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015f30:	d013      	beq.n	8015f5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	681b      	ldr	r3, [r3, #0]
 8015f36:	4a18      	ldr	r2, [pc, #96]	@ (8015f98 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8015f38:	4293      	cmp	r3, r2
 8015f3a:	d00e      	beq.n	8015f5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	681b      	ldr	r3, [r3, #0]
 8015f40:	4a16      	ldr	r2, [pc, #88]	@ (8015f9c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8015f42:	4293      	cmp	r3, r2
 8015f44:	d009      	beq.n	8015f5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	681b      	ldr	r3, [r3, #0]
 8015f4a:	4a15      	ldr	r2, [pc, #84]	@ (8015fa0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8015f4c:	4293      	cmp	r3, r2
 8015f4e:	d004      	beq.n	8015f5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	681b      	ldr	r3, [r3, #0]
 8015f54:	4a13      	ldr	r2, [pc, #76]	@ (8015fa4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8015f56:	4293      	cmp	r3, r2
 8015f58:	d10c      	bne.n	8015f74 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8015f5a:	68bb      	ldr	r3, [r7, #8]
 8015f5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8015f60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8015f62:	683b      	ldr	r3, [r7, #0]
 8015f64:	685b      	ldr	r3, [r3, #4]
 8015f66:	68ba      	ldr	r2, [r7, #8]
 8015f68:	4313      	orrs	r3, r2
 8015f6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	681b      	ldr	r3, [r3, #0]
 8015f70:	68ba      	ldr	r2, [r7, #8]
 8015f72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	2201      	movs	r2, #1
 8015f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	2200      	movs	r2, #0
 8015f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8015f84:	2300      	movs	r3, #0
}
 8015f86:	4618      	mov	r0, r3
 8015f88:	3714      	adds	r7, #20
 8015f8a:	46bd      	mov	sp, r7
 8015f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f90:	4770      	bx	lr
 8015f92:	bf00      	nop
 8015f94:	40010000 	.word	0x40010000
 8015f98:	40000400 	.word	0x40000400
 8015f9c:	40000800 	.word	0x40000800
 8015fa0:	40000c00 	.word	0x40000c00
 8015fa4:	40014000 	.word	0x40014000

08015fa8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8015fa8:	b480      	push	{r7}
 8015faa:	b085      	sub	sp, #20
 8015fac:	af00      	add	r7, sp, #0
 8015fae:	6078      	str	r0, [r7, #4]
 8015fb0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8015fb2:	2300      	movs	r3, #0
 8015fb4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8015fbc:	2b01      	cmp	r3, #1
 8015fbe:	d101      	bne.n	8015fc4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8015fc0:	2302      	movs	r3, #2
 8015fc2:	e03d      	b.n	8016040 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	2201      	movs	r2, #1
 8015fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8015fcc:	68fb      	ldr	r3, [r7, #12]
 8015fce:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8015fd2:	683b      	ldr	r3, [r7, #0]
 8015fd4:	68db      	ldr	r3, [r3, #12]
 8015fd6:	4313      	orrs	r3, r2
 8015fd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8015fda:	68fb      	ldr	r3, [r7, #12]
 8015fdc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8015fe0:	683b      	ldr	r3, [r7, #0]
 8015fe2:	689b      	ldr	r3, [r3, #8]
 8015fe4:	4313      	orrs	r3, r2
 8015fe6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8015fe8:	68fb      	ldr	r3, [r7, #12]
 8015fea:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8015fee:	683b      	ldr	r3, [r7, #0]
 8015ff0:	685b      	ldr	r3, [r3, #4]
 8015ff2:	4313      	orrs	r3, r2
 8015ff4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8015ff6:	68fb      	ldr	r3, [r7, #12]
 8015ff8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8015ffc:	683b      	ldr	r3, [r7, #0]
 8015ffe:	681b      	ldr	r3, [r3, #0]
 8016000:	4313      	orrs	r3, r2
 8016002:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8016004:	68fb      	ldr	r3, [r7, #12]
 8016006:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801600a:	683b      	ldr	r3, [r7, #0]
 801600c:	691b      	ldr	r3, [r3, #16]
 801600e:	4313      	orrs	r3, r2
 8016010:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8016012:	68fb      	ldr	r3, [r7, #12]
 8016014:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8016018:	683b      	ldr	r3, [r7, #0]
 801601a:	695b      	ldr	r3, [r3, #20]
 801601c:	4313      	orrs	r3, r2
 801601e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8016020:	68fb      	ldr	r3, [r7, #12]
 8016022:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8016026:	683b      	ldr	r3, [r7, #0]
 8016028:	69db      	ldr	r3, [r3, #28]
 801602a:	4313      	orrs	r3, r2
 801602c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	681b      	ldr	r3, [r3, #0]
 8016032:	68fa      	ldr	r2, [r7, #12]
 8016034:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	2200      	movs	r2, #0
 801603a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801603e:	2300      	movs	r3, #0
}
 8016040:	4618      	mov	r0, r3
 8016042:	3714      	adds	r7, #20
 8016044:	46bd      	mov	sp, r7
 8016046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801604a:	4770      	bx	lr

0801604c <HAL_TIMEx_RemapConfig>:
  *         (**) Register not available in all devices.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 801604c:	b480      	push	{r7}
 801604e:	b083      	sub	sp, #12
 8016050:	af00      	add	r7, sp, #0
 8016052:	6078      	str	r0, [r7, #4]
 8016054:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801605c:	2b01      	cmp	r3, #1
 801605e:	d101      	bne.n	8016064 <HAL_TIMEx_RemapConfig+0x18>
 8016060:	2302      	movs	r3, #2
 8016062:	e00c      	b.n	801607e <HAL_TIMEx_RemapConfig+0x32>
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	2201      	movs	r2, #1
 8016068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Set the Timer remapping configuration */
    WRITE_REG(htim->Instance->OR, Remap);
  }
#else
  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	681b      	ldr	r3, [r3, #0]
 8016070:	683a      	ldr	r2, [r7, #0]
 8016072:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* LPTIM_OR_TIM1_ITR2_RMP &&  LPTIM_OR_TIM5_ITR1_RMP && LPTIM_OR_TIM9_ITR1_RMP */

  __HAL_UNLOCK(htim);
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	2200      	movs	r2, #0
 8016078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801607c:	2300      	movs	r3, #0
}
 801607e:	4618      	mov	r0, r3
 8016080:	370c      	adds	r7, #12
 8016082:	46bd      	mov	sp, r7
 8016084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016088:	4770      	bx	lr

0801608a <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801608a:	b480      	push	{r7}
 801608c:	b083      	sub	sp, #12
 801608e:	af00      	add	r7, sp, #0
 8016090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8016092:	bf00      	nop
 8016094:	370c      	adds	r7, #12
 8016096:	46bd      	mov	sp, r7
 8016098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801609c:	4770      	bx	lr

0801609e <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 801609e:	b480      	push	{r7}
 80160a0:	b083      	sub	sp, #12
 80160a2:	af00      	add	r7, sp, #0
 80160a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80160a6:	bf00      	nop
 80160a8:	370c      	adds	r7, #12
 80160aa:	46bd      	mov	sp, r7
 80160ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160b0:	4770      	bx	lr

080160b2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80160b2:	b480      	push	{r7}
 80160b4:	b083      	sub	sp, #12
 80160b6:	af00      	add	r7, sp, #0
 80160b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80160ba:	bf00      	nop
 80160bc:	370c      	adds	r7, #12
 80160be:	46bd      	mov	sp, r7
 80160c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160c4:	4770      	bx	lr

080160c6 <HAL_TIMEx_HallSensor_GetState>:
  * @brief  Return the TIM Hall Sensor interface handle state.
  * @param  htim TIM Hall Sensor handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIMEx_HallSensor_GetState(const TIM_HandleTypeDef *htim)
{
 80160c6:	b480      	push	{r7}
 80160c8:	b083      	sub	sp, #12
 80160ca:	af00      	add	r7, sp, #0
 80160cc:	6078      	str	r0, [r7, #4]
  return htim->State;
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80160d4:	b2db      	uxtb	r3, r3
}
 80160d6:	4618      	mov	r0, r3
 80160d8:	370c      	adds	r7, #12
 80160da:	46bd      	mov	sp, r7
 80160dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160e0:	4770      	bx	lr

080160e2 <HAL_TIMEx_GetChannelNState>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2
  *            @arg TIM_CHANNEL_3: TIM Channel 3
  * @retval TIM Complementary channel state
  */
HAL_TIM_ChannelStateTypeDef HAL_TIMEx_GetChannelNState(const TIM_HandleTypeDef *htim,  uint32_t ChannelN)
{
 80160e2:	b480      	push	{r7}
 80160e4:	b085      	sub	sp, #20
 80160e6:	af00      	add	r7, sp, #0
 80160e8:	6078      	str	r0, [r7, #4]
 80160ea:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_state;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, ChannelN));

  channel_state = TIM_CHANNEL_N_STATE_GET(htim, ChannelN);
 80160ec:	683b      	ldr	r3, [r7, #0]
 80160ee:	2b00      	cmp	r3, #0
 80160f0:	d104      	bne.n	80160fc <HAL_TIMEx_GetChannelNState+0x1a>
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80160f8:	b2db      	uxtb	r3, r3
 80160fa:	e013      	b.n	8016124 <HAL_TIMEx_GetChannelNState+0x42>
 80160fc:	683b      	ldr	r3, [r7, #0]
 80160fe:	2b04      	cmp	r3, #4
 8016100:	d104      	bne.n	801610c <HAL_TIMEx_GetChannelNState+0x2a>
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8016108:	b2db      	uxtb	r3, r3
 801610a:	e00b      	b.n	8016124 <HAL_TIMEx_GetChannelNState+0x42>
 801610c:	683b      	ldr	r3, [r7, #0]
 801610e:	2b08      	cmp	r3, #8
 8016110:	d104      	bne.n	801611c <HAL_TIMEx_GetChannelNState+0x3a>
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8016118:	b2db      	uxtb	r3, r3
 801611a:	e003      	b.n	8016124 <HAL_TIMEx_GetChannelNState+0x42>
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8016122:	b2db      	uxtb	r3, r3
 8016124:	73fb      	strb	r3, [r7, #15]

  return channel_state;
 8016126:	7bfb      	ldrb	r3, [r7, #15]
}
 8016128:	4618      	mov	r0, r3
 801612a:	3714      	adds	r7, #20
 801612c:	46bd      	mov	sp, r7
 801612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016132:	4770      	bx	lr

08016134 <TIMEx_DMACommutationCplt>:
  * @brief  TIM DMA Commutation callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIMEx_DMACommutationCplt(DMA_HandleTypeDef *hdma)
{
 8016134:	b580      	push	{r7, lr}
 8016136:	b084      	sub	sp, #16
 8016138:	af00      	add	r7, sp, #0
 801613a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016140:	60fb      	str	r3, [r7, #12]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8016142:	68fb      	ldr	r3, [r7, #12]
 8016144:	2201      	movs	r2, #1
 8016146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->CommutationCallback(htim);
#else
  HAL_TIMEx_CommutCallback(htim);
 801614a:	68f8      	ldr	r0, [r7, #12]
 801614c:	f7ff ff9d 	bl	801608a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8016150:	bf00      	nop
 8016152:	3710      	adds	r7, #16
 8016154:	46bd      	mov	sp, r7
 8016156:	bd80      	pop	{r7, pc}

08016158 <TIMEx_DMACommutationHalfCplt>:
  * @brief  TIM DMA Commutation half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIMEx_DMACommutationHalfCplt(DMA_HandleTypeDef *hdma)
{
 8016158:	b580      	push	{r7, lr}
 801615a:	b084      	sub	sp, #16
 801615c:	af00      	add	r7, sp, #0
 801615e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016164:	60fb      	str	r3, [r7, #12]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8016166:	68fb      	ldr	r3, [r7, #12]
 8016168:	2201      	movs	r2, #1
 801616a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->CommutationHalfCpltCallback(htim);
#else
  HAL_TIMEx_CommutHalfCpltCallback(htim);
 801616e:	68f8      	ldr	r0, [r7, #12]
 8016170:	f7ff ff95 	bl	801609e <HAL_TIMEx_CommutHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8016174:	bf00      	nop
 8016176:	3710      	adds	r7, #16
 8016178:	46bd      	mov	sp, r7
 801617a:	bd80      	pop	{r7, pc}

0801617c <TIM_DMADelayPulseNCplt>:
  * @brief  TIM DMA Delay Pulse complete callback (complementary channel).
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseNCplt(DMA_HandleTypeDef *hdma)
{
 801617c:	b580      	push	{r7, lr}
 801617e:	b084      	sub	sp, #16
 8016180:	af00      	add	r7, sp, #0
 8016182:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016188:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 801618a:	68fb      	ldr	r3, [r7, #12]
 801618c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801618e:	687a      	ldr	r2, [r7, #4]
 8016190:	429a      	cmp	r2, r3
 8016192:	d10b      	bne.n	80161ac <TIM_DMADelayPulseNCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8016194:	68fb      	ldr	r3, [r7, #12]
 8016196:	2201      	movs	r2, #1
 8016198:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	69db      	ldr	r3, [r3, #28]
 801619e:	2b00      	cmp	r3, #0
 80161a0:	d125      	bne.n	80161ee <TIM_DMADelayPulseNCplt+0x72>
    {
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80161a2:	68fb      	ldr	r3, [r7, #12]
 80161a4:	2201      	movs	r2, #1
 80161a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80161aa:	e020      	b.n	80161ee <TIM_DMADelayPulseNCplt+0x72>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80161ac:	68fb      	ldr	r3, [r7, #12]
 80161ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80161b0:	687a      	ldr	r2, [r7, #4]
 80161b2:	429a      	cmp	r2, r3
 80161b4:	d10b      	bne.n	80161ce <TIM_DMADelayPulseNCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80161b6:	68fb      	ldr	r3, [r7, #12]
 80161b8:	2202      	movs	r2, #2
 80161ba:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	69db      	ldr	r3, [r3, #28]
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	d114      	bne.n	80161ee <TIM_DMADelayPulseNCplt+0x72>
    {
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80161c4:	68fb      	ldr	r3, [r7, #12]
 80161c6:	2201      	movs	r2, #1
 80161c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80161cc:	e00f      	b.n	80161ee <TIM_DMADelayPulseNCplt+0x72>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80161ce:	68fb      	ldr	r3, [r7, #12]
 80161d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80161d2:	687a      	ldr	r2, [r7, #4]
 80161d4:	429a      	cmp	r2, r3
 80161d6:	d10a      	bne.n	80161ee <TIM_DMADelayPulseNCplt+0x72>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80161d8:	68fb      	ldr	r3, [r7, #12]
 80161da:	2204      	movs	r2, #4
 80161dc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	69db      	ldr	r3, [r3, #28]
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	d103      	bne.n	80161ee <TIM_DMADelayPulseNCplt+0x72>
    {
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80161e6:	68fb      	ldr	r3, [r7, #12]
 80161e8:	2201      	movs	r2, #1
 80161ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80161ee:	68f8      	ldr	r0, [r7, #12]
 80161f0:	f7fd f81a 	bl	8013228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80161f4:	68fb      	ldr	r3, [r7, #12]
 80161f6:	2200      	movs	r2, #0
 80161f8:	771a      	strb	r2, [r3, #28]
}
 80161fa:	bf00      	nop
 80161fc:	3710      	adds	r7, #16
 80161fe:	46bd      	mov	sp, r7
 8016200:	bd80      	pop	{r7, pc}

08016202 <TIM_DMAErrorCCxN>:
  * @brief  TIM DMA error callback (complementary channel)
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMAErrorCCxN(DMA_HandleTypeDef *hdma)
{
 8016202:	b580      	push	{r7, lr}
 8016204:	b084      	sub	sp, #16
 8016206:	af00      	add	r7, sp, #0
 8016208:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801620e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8016210:	68fb      	ldr	r3, [r7, #12]
 8016212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016214:	687a      	ldr	r2, [r7, #4]
 8016216:	429a      	cmp	r2, r3
 8016218:	d107      	bne.n	801622a <TIM_DMAErrorCCxN+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801621a:	68fb      	ldr	r3, [r7, #12]
 801621c:	2201      	movs	r2, #1
 801621e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8016220:	68fb      	ldr	r3, [r7, #12]
 8016222:	2201      	movs	r2, #1
 8016224:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8016228:	e018      	b.n	801625c <TIM_DMAErrorCCxN+0x5a>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 801622a:	68fb      	ldr	r3, [r7, #12]
 801622c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801622e:	687a      	ldr	r2, [r7, #4]
 8016230:	429a      	cmp	r2, r3
 8016232:	d107      	bne.n	8016244 <TIM_DMAErrorCCxN+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	2202      	movs	r2, #2
 8016238:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801623a:	68fb      	ldr	r3, [r7, #12]
 801623c:	2201      	movs	r2, #1
 801623e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8016242:	e00b      	b.n	801625c <TIM_DMAErrorCCxN+0x5a>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8016244:	68fb      	ldr	r3, [r7, #12]
 8016246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016248:	687a      	ldr	r2, [r7, #4]
 801624a:	429a      	cmp	r2, r3
 801624c:	d106      	bne.n	801625c <TIM_DMAErrorCCxN+0x5a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801624e:	68fb      	ldr	r3, [r7, #12]
 8016250:	2204      	movs	r2, #4
 8016252:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8016254:	68fb      	ldr	r3, [r7, #12]
 8016256:	2201      	movs	r2, #1
 8016258:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 801625c:	68f8      	ldr	r0, [r7, #12]
 801625e:	f7fd f80b 	bl	8013278 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016262:	68fb      	ldr	r3, [r7, #12]
 8016264:	2200      	movs	r2, #0
 8016266:	771a      	strb	r2, [r3, #28]
}
 8016268:	bf00      	nop
 801626a:	3710      	adds	r7, #16
 801626c:	46bd      	mov	sp, r7
 801626e:	bd80      	pop	{r7, pc}

08016270 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8016270:	b480      	push	{r7}
 8016272:	b087      	sub	sp, #28
 8016274:	af00      	add	r7, sp, #0
 8016276:	60f8      	str	r0, [r7, #12]
 8016278:	60b9      	str	r1, [r7, #8]
 801627a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 801627c:	68bb      	ldr	r3, [r7, #8]
 801627e:	f003 030f 	and.w	r3, r3, #15
 8016282:	2204      	movs	r2, #4
 8016284:	fa02 f303 	lsl.w	r3, r2, r3
 8016288:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 801628a:	68fb      	ldr	r3, [r7, #12]
 801628c:	6a1a      	ldr	r2, [r3, #32]
 801628e:	697b      	ldr	r3, [r7, #20]
 8016290:	43db      	mvns	r3, r3
 8016292:	401a      	ands	r2, r3
 8016294:	68fb      	ldr	r3, [r7, #12]
 8016296:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8016298:	68fb      	ldr	r3, [r7, #12]
 801629a:	6a1a      	ldr	r2, [r3, #32]
 801629c:	68bb      	ldr	r3, [r7, #8]
 801629e:	f003 030f 	and.w	r3, r3, #15
 80162a2:	6879      	ldr	r1, [r7, #4]
 80162a4:	fa01 f303 	lsl.w	r3, r1, r3
 80162a8:	431a      	orrs	r2, r3
 80162aa:	68fb      	ldr	r3, [r7, #12]
 80162ac:	621a      	str	r2, [r3, #32]
}
 80162ae:	bf00      	nop
 80162b0:	371c      	adds	r7, #28
 80162b2:	46bd      	mov	sp, r7
 80162b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162b8:	4770      	bx	lr
 80162ba:	bf00      	nop

080162bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80162bc:	b580      	push	{r7, lr}
 80162be:	b082      	sub	sp, #8
 80162c0:	af00      	add	r7, sp, #0
 80162c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	d101      	bne.n	80162ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80162ca:	2301      	movs	r3, #1
 80162cc:	e042      	b.n	8016354 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80162d4:	b2db      	uxtb	r3, r3
 80162d6:	2b00      	cmp	r3, #0
 80162d8:	d106      	bne.n	80162e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80162da:	687b      	ldr	r3, [r7, #4]
 80162dc:	2200      	movs	r2, #0
 80162de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80162e2:	6878      	ldr	r0, [r7, #4]
 80162e4:	f7eb fd48 	bl	8001d78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	2224      	movs	r2, #36	@ 0x24
 80162ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	681b      	ldr	r3, [r3, #0]
 80162f4:	68da      	ldr	r2, [r3, #12]
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	681b      	ldr	r3, [r3, #0]
 80162fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80162fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8016300:	6878      	ldr	r0, [r7, #4]
 8016302:	f002 fc3d 	bl	8018b80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	681b      	ldr	r3, [r3, #0]
 801630a:	691a      	ldr	r2, [r3, #16]
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	681b      	ldr	r3, [r3, #0]
 8016310:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8016314:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	681b      	ldr	r3, [r3, #0]
 801631a:	695a      	ldr	r2, [r3, #20]
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	681b      	ldr	r3, [r3, #0]
 8016320:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8016324:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	681b      	ldr	r3, [r3, #0]
 801632a:	68da      	ldr	r2, [r3, #12]
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	681b      	ldr	r3, [r3, #0]
 8016330:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8016334:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	2200      	movs	r2, #0
 801633a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	2220      	movs	r2, #32
 8016340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	2220      	movs	r2, #32
 8016348:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	2200      	movs	r2, #0
 8016350:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8016352:	2300      	movs	r3, #0
}
 8016354:	4618      	mov	r0, r3
 8016356:	3708      	adds	r7, #8
 8016358:	46bd      	mov	sp, r7
 801635a:	bd80      	pop	{r7, pc}

0801635c <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 801635c:	b580      	push	{r7, lr}
 801635e:	b082      	sub	sp, #8
 8016360:	af00      	add	r7, sp, #0
 8016362:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	2b00      	cmp	r3, #0
 8016368:	d101      	bne.n	801636e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 801636a:	2301      	movs	r3, #1
 801636c:	e04a      	b.n	8016404 <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8016374:	b2db      	uxtb	r3, r3
 8016376:	2b00      	cmp	r3, #0
 8016378:	d106      	bne.n	8016388 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	2200      	movs	r2, #0
 801637e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8016382:	6878      	ldr	r0, [r7, #4]
 8016384:	f7eb fcf8 	bl	8001d78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	2224      	movs	r2, #36	@ 0x24
 801638c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	681b      	ldr	r3, [r3, #0]
 8016394:	68da      	ldr	r2, [r3, #12]
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	681b      	ldr	r3, [r3, #0]
 801639a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 801639e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80163a0:	6878      	ldr	r0, [r7, #4]
 80163a2:	f002 fbed 	bl	8018b80 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	681b      	ldr	r3, [r3, #0]
 80163aa:	691a      	ldr	r2, [r3, #16]
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	681b      	ldr	r3, [r3, #0]
 80163b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80163b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	681b      	ldr	r3, [r3, #0]
 80163ba:	695a      	ldr	r2, [r3, #20]
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 80163c4:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	681b      	ldr	r3, [r3, #0]
 80163ca:	695a      	ldr	r2, [r3, #20]
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	681b      	ldr	r3, [r3, #0]
 80163d0:	f042 0208 	orr.w	r2, r2, #8
 80163d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	681b      	ldr	r3, [r3, #0]
 80163da:	68da      	ldr	r2, [r3, #12]
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	681b      	ldr	r3, [r3, #0]
 80163e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80163e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	2200      	movs	r2, #0
 80163ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	2220      	movs	r2, #32
 80163f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	2220      	movs	r2, #32
 80163f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	2200      	movs	r2, #0
 8016400:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8016402:	2300      	movs	r3, #0
}
 8016404:	4618      	mov	r0, r3
 8016406:	3708      	adds	r7, #8
 8016408:	46bd      	mov	sp, r7
 801640a:	bd80      	pop	{r7, pc}

0801640c <HAL_LIN_Init>:
  *            @arg UART_LINBREAKDETECTLENGTH_10B: 10-bit break detection
  *            @arg UART_LINBREAKDETECTLENGTH_11B: 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 801640c:	b580      	push	{r7, lr}
 801640e:	b082      	sub	sp, #8
 8016410:	af00      	add	r7, sp, #0
 8016412:	6078      	str	r0, [r7, #4]
 8016414:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	2b00      	cmp	r3, #0
 801641a:	d101      	bne.n	8016420 <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 801641c:	2301      	movs	r3, #1
 801641e:	e05a      	b.n	80164d6 <HAL_LIN_Init+0xca>
  /* Check the Break detection length parameter */
  assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));
  assert_param(IS_UART_LIN_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_LIN_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8016426:	b2db      	uxtb	r3, r3
 8016428:	2b00      	cmp	r3, #0
 801642a:	d106      	bne.n	801643a <HAL_LIN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	2200      	movs	r2, #0
 8016430:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8016434:	6878      	ldr	r0, [r7, #4]
 8016436:	f7eb fc9f 	bl	8001d78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	2224      	movs	r2, #36	@ 0x24
 801643e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	681b      	ldr	r3, [r3, #0]
 8016446:	68da      	ldr	r2, [r3, #12]
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8016450:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8016452:	6878      	ldr	r0, [r7, #4]
 8016454:	f002 fb94 	bl	8018b80 <UART_SetConfig>

  /* In LIN mode, the following bits must be kept cleared:
     - CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_CLKEN));
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	681b      	ldr	r3, [r3, #0]
 801645c:	691a      	ldr	r2, [r3, #16]
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	681b      	ldr	r3, [r3, #0]
 8016462:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8016466:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	681b      	ldr	r3, [r3, #0]
 801646c:	695a      	ldr	r2, [r3, #20]
 801646e:	687b      	ldr	r3, [r7, #4]
 8016470:	681b      	ldr	r3, [r3, #0]
 8016472:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8016476:	615a      	str	r2, [r3, #20]

  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	681b      	ldr	r3, [r3, #0]
 801647c:	691a      	ldr	r2, [r3, #16]
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	681b      	ldr	r3, [r3, #0]
 8016482:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8016486:	611a      	str	r2, [r3, #16]

  /* Set the USART LIN Break detection length. */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_LBDL);
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	681b      	ldr	r3, [r3, #0]
 801648c:	691a      	ldr	r2, [r3, #16]
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	681b      	ldr	r3, [r3, #0]
 8016492:	f022 0220 	bic.w	r2, r2, #32
 8016496:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, BreakDetectLength);
 8016498:	687b      	ldr	r3, [r7, #4]
 801649a:	681b      	ldr	r3, [r3, #0]
 801649c:	6919      	ldr	r1, [r3, #16]
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	681b      	ldr	r3, [r3, #0]
 80164a2:	683a      	ldr	r2, [r7, #0]
 80164a4:	430a      	orrs	r2, r1
 80164a6:	611a      	str	r2, [r3, #16]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	681b      	ldr	r3, [r3, #0]
 80164ac:	68da      	ldr	r2, [r3, #12]
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	681b      	ldr	r3, [r3, #0]
 80164b2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80164b6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	2200      	movs	r2, #0
 80164bc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	2220      	movs	r2, #32
 80164c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	2220      	movs	r2, #32
 80164ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	2200      	movs	r2, #0
 80164d2:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80164d4:	2300      	movs	r3, #0
}
 80164d6:	4618      	mov	r0, r3
 80164d8:	3708      	adds	r7, #8
 80164da:	46bd      	mov	sp, r7
 80164dc:	bd80      	pop	{r7, pc}

080164de <HAL_MultiProcessor_Init>:
  *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
  *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 80164de:	b580      	push	{r7, lr}
 80164e0:	b084      	sub	sp, #16
 80164e2:	af00      	add	r7, sp, #0
 80164e4:	60f8      	str	r0, [r7, #12]
 80164e6:	460b      	mov	r3, r1
 80164e8:	607a      	str	r2, [r7, #4]
 80164ea:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80164ec:	68fb      	ldr	r3, [r7, #12]
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	d101      	bne.n	80164f6 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 80164f2:	2301      	movs	r3, #1
 80164f4:	e062      	b.n	80165bc <HAL_MultiProcessor_Init+0xde>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
  assert_param(IS_UART_ADDRESS(Address));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80164f6:	68fb      	ldr	r3, [r7, #12]
 80164f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80164fc:	b2db      	uxtb	r3, r3
 80164fe:	2b00      	cmp	r3, #0
 8016500:	d106      	bne.n	8016510 <HAL_MultiProcessor_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8016502:	68fb      	ldr	r3, [r7, #12]
 8016504:	2200      	movs	r2, #0
 8016506:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801650a:	68f8      	ldr	r0, [r7, #12]
 801650c:	f7eb fc34 	bl	8001d78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8016510:	68fb      	ldr	r3, [r7, #12]
 8016512:	2224      	movs	r2, #36	@ 0x24
 8016514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8016518:	68fb      	ldr	r3, [r7, #12]
 801651a:	681b      	ldr	r3, [r3, #0]
 801651c:	68da      	ldr	r2, [r3, #12]
 801651e:	68fb      	ldr	r3, [r7, #12]
 8016520:	681b      	ldr	r3, [r3, #0]
 8016522:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8016526:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8016528:	68f8      	ldr	r0, [r7, #12]
 801652a:	f002 fb29 	bl	8018b80 <UART_SetConfig>

  /* In Multi-Processor mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801652e:	68fb      	ldr	r3, [r7, #12]
 8016530:	681b      	ldr	r3, [r3, #0]
 8016532:	691a      	ldr	r2, [r3, #16]
 8016534:	68fb      	ldr	r3, [r7, #12]
 8016536:	681b      	ldr	r3, [r3, #0]
 8016538:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801653c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801653e:	68fb      	ldr	r3, [r7, #12]
 8016540:	681b      	ldr	r3, [r3, #0]
 8016542:	695a      	ldr	r2, [r3, #20]
 8016544:	68fb      	ldr	r3, [r7, #12]
 8016546:	681b      	ldr	r3, [r3, #0]
 8016548:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801654c:	615a      	str	r2, [r3, #20]

  /* Set the USART address node */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 801654e:	68fb      	ldr	r3, [r7, #12]
 8016550:	681b      	ldr	r3, [r3, #0]
 8016552:	691a      	ldr	r2, [r3, #16]
 8016554:	68fb      	ldr	r3, [r7, #12]
 8016556:	681b      	ldr	r3, [r3, #0]
 8016558:	f022 020f 	bic.w	r2, r2, #15
 801655c:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, Address);
 801655e:	68fb      	ldr	r3, [r7, #12]
 8016560:	681b      	ldr	r3, [r3, #0]
 8016562:	6919      	ldr	r1, [r3, #16]
 8016564:	7afa      	ldrb	r2, [r7, #11]
 8016566:	68fb      	ldr	r3, [r7, #12]
 8016568:	681b      	ldr	r3, [r3, #0]
 801656a:	430a      	orrs	r2, r1
 801656c:	611a      	str	r2, [r3, #16]

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 801656e:	68fb      	ldr	r3, [r7, #12]
 8016570:	681b      	ldr	r3, [r3, #0]
 8016572:	68da      	ldr	r2, [r3, #12]
 8016574:	68fb      	ldr	r3, [r7, #12]
 8016576:	681b      	ldr	r3, [r3, #0]
 8016578:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 801657c:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR1, WakeUpMethod);
 801657e:	68fb      	ldr	r3, [r7, #12]
 8016580:	681b      	ldr	r3, [r3, #0]
 8016582:	68d9      	ldr	r1, [r3, #12]
 8016584:	68fb      	ldr	r3, [r7, #12]
 8016586:	681b      	ldr	r3, [r3, #0]
 8016588:	687a      	ldr	r2, [r7, #4]
 801658a:	430a      	orrs	r2, r1
 801658c:	60da      	str	r2, [r3, #12]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801658e:	68fb      	ldr	r3, [r7, #12]
 8016590:	681b      	ldr	r3, [r3, #0]
 8016592:	68da      	ldr	r2, [r3, #12]
 8016594:	68fb      	ldr	r3, [r7, #12]
 8016596:	681b      	ldr	r3, [r3, #0]
 8016598:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 801659c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801659e:	68fb      	ldr	r3, [r7, #12]
 80165a0:	2200      	movs	r2, #0
 80165a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80165a4:	68fb      	ldr	r3, [r7, #12]
 80165a6:	2220      	movs	r2, #32
 80165a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80165ac:	68fb      	ldr	r3, [r7, #12]
 80165ae:	2220      	movs	r2, #32
 80165b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80165b4:	68fb      	ldr	r3, [r7, #12]
 80165b6:	2200      	movs	r2, #0
 80165b8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80165ba:	2300      	movs	r3, #0
}
 80165bc:	4618      	mov	r0, r3
 80165be:	3710      	adds	r7, #16
 80165c0:	46bd      	mov	sp, r7
 80165c2:	bd80      	pop	{r7, pc}

080165c4 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80165c4:	b580      	push	{r7, lr}
 80165c6:	b082      	sub	sp, #8
 80165c8:	af00      	add	r7, sp, #0
 80165ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	d101      	bne.n	80165d6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80165d2:	2301      	movs	r3, #1
 80165d4:	e024      	b.n	8016620 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	2224      	movs	r2, #36	@ 0x24
 80165da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	681b      	ldr	r3, [r3, #0]
 80165e2:	68da      	ldr	r2, [r3, #12]
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	681b      	ldr	r3, [r3, #0]
 80165e8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80165ec:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80165ee:	6878      	ldr	r0, [r7, #4]
 80165f0:	f7eb fc46 	bl	8001e80 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	2200      	movs	r2, #0
 80165f8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	2200      	movs	r2, #0
 80165fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	2200      	movs	r2, #0
 8016606:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	2200      	movs	r2, #0
 801660e:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	2200      	movs	r2, #0
 8016614:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	2200      	movs	r2, #0
 801661a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 801661e:	2300      	movs	r3, #0
}
 8016620:	4618      	mov	r0, r3
 8016622:	3708      	adds	r7, #8
 8016624:	46bd      	mov	sp, r7
 8016626:	bd80      	pop	{r7, pc}
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8016628:	b480      	push	{r7}
 801662a:	b083      	sub	sp, #12
 801662c:	af00      	add	r7, sp, #0
 801662e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8016630:	bf00      	nop
 8016632:	370c      	adds	r7, #12
 8016634:	46bd      	mov	sp, r7
 8016636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801663a:	4770      	bx	lr
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 801663c:	b480      	push	{r7}
 801663e:	b083      	sub	sp, #12
 8016640:	af00      	add	r7, sp, #0
 8016642:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspDeInit could be implemented in the user file
   */
}
 8016644:	bf00      	nop
 8016646:	370c      	adds	r7, #12
 8016648:	46bd      	mov	sp, r7
 801664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801664e:	4770      	bx	lr

08016650 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016650:	b580      	push	{r7, lr}
 8016652:	b08a      	sub	sp, #40	@ 0x28
 8016654:	af02      	add	r7, sp, #8
 8016656:	60f8      	str	r0, [r7, #12]
 8016658:	60b9      	str	r1, [r7, #8]
 801665a:	603b      	str	r3, [r7, #0]
 801665c:	4613      	mov	r3, r2
 801665e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8016660:	2300      	movs	r3, #0
 8016662:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8016664:	68fb      	ldr	r3, [r7, #12]
 8016666:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801666a:	b2db      	uxtb	r3, r3
 801666c:	2b20      	cmp	r3, #32
 801666e:	d175      	bne.n	801675c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8016670:	68bb      	ldr	r3, [r7, #8]
 8016672:	2b00      	cmp	r3, #0
 8016674:	d002      	beq.n	801667c <HAL_UART_Transmit+0x2c>
 8016676:	88fb      	ldrh	r3, [r7, #6]
 8016678:	2b00      	cmp	r3, #0
 801667a:	d101      	bne.n	8016680 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 801667c:	2301      	movs	r3, #1
 801667e:	e06e      	b.n	801675e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016680:	68fb      	ldr	r3, [r7, #12]
 8016682:	2200      	movs	r2, #0
 8016684:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8016686:	68fb      	ldr	r3, [r7, #12]
 8016688:	2221      	movs	r2, #33	@ 0x21
 801668a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801668e:	f7ef f955 	bl	800593c <HAL_GetTick>
 8016692:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8016694:	68fb      	ldr	r3, [r7, #12]
 8016696:	88fa      	ldrh	r2, [r7, #6]
 8016698:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 801669a:	68fb      	ldr	r3, [r7, #12]
 801669c:	88fa      	ldrh	r2, [r7, #6]
 801669e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80166a0:	68fb      	ldr	r3, [r7, #12]
 80166a2:	689b      	ldr	r3, [r3, #8]
 80166a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80166a8:	d108      	bne.n	80166bc <HAL_UART_Transmit+0x6c>
 80166aa:	68fb      	ldr	r3, [r7, #12]
 80166ac:	691b      	ldr	r3, [r3, #16]
 80166ae:	2b00      	cmp	r3, #0
 80166b0:	d104      	bne.n	80166bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80166b2:	2300      	movs	r3, #0
 80166b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80166b6:	68bb      	ldr	r3, [r7, #8]
 80166b8:	61bb      	str	r3, [r7, #24]
 80166ba:	e003      	b.n	80166c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80166bc:	68bb      	ldr	r3, [r7, #8]
 80166be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80166c0:	2300      	movs	r3, #0
 80166c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80166c4:	e02e      	b.n	8016724 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80166c6:	683b      	ldr	r3, [r7, #0]
 80166c8:	9300      	str	r3, [sp, #0]
 80166ca:	697b      	ldr	r3, [r7, #20]
 80166cc:	2200      	movs	r2, #0
 80166ce:	2180      	movs	r1, #128	@ 0x80
 80166d0:	68f8      	ldr	r0, [r7, #12]
 80166d2:	f001 fed6 	bl	8018482 <UART_WaitOnFlagUntilTimeout>
 80166d6:	4603      	mov	r3, r0
 80166d8:	2b00      	cmp	r3, #0
 80166da:	d005      	beq.n	80166e8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80166dc:	68fb      	ldr	r3, [r7, #12]
 80166de:	2220      	movs	r2, #32
 80166e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80166e4:	2303      	movs	r3, #3
 80166e6:	e03a      	b.n	801675e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80166e8:	69fb      	ldr	r3, [r7, #28]
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	d10b      	bne.n	8016706 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80166ee:	69bb      	ldr	r3, [r7, #24]
 80166f0:	881b      	ldrh	r3, [r3, #0]
 80166f2:	461a      	mov	r2, r3
 80166f4:	68fb      	ldr	r3, [r7, #12]
 80166f6:	681b      	ldr	r3, [r3, #0]
 80166f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80166fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80166fe:	69bb      	ldr	r3, [r7, #24]
 8016700:	3302      	adds	r3, #2
 8016702:	61bb      	str	r3, [r7, #24]
 8016704:	e007      	b.n	8016716 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8016706:	69fb      	ldr	r3, [r7, #28]
 8016708:	781a      	ldrb	r2, [r3, #0]
 801670a:	68fb      	ldr	r3, [r7, #12]
 801670c:	681b      	ldr	r3, [r3, #0]
 801670e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8016710:	69fb      	ldr	r3, [r7, #28]
 8016712:	3301      	adds	r3, #1
 8016714:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8016716:	68fb      	ldr	r3, [r7, #12]
 8016718:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 801671a:	b29b      	uxth	r3, r3
 801671c:	3b01      	subs	r3, #1
 801671e:	b29a      	uxth	r2, r3
 8016720:	68fb      	ldr	r3, [r7, #12]
 8016722:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8016724:	68fb      	ldr	r3, [r7, #12]
 8016726:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8016728:	b29b      	uxth	r3, r3
 801672a:	2b00      	cmp	r3, #0
 801672c:	d1cb      	bne.n	80166c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801672e:	683b      	ldr	r3, [r7, #0]
 8016730:	9300      	str	r3, [sp, #0]
 8016732:	697b      	ldr	r3, [r7, #20]
 8016734:	2200      	movs	r2, #0
 8016736:	2140      	movs	r1, #64	@ 0x40
 8016738:	68f8      	ldr	r0, [r7, #12]
 801673a:	f001 fea2 	bl	8018482 <UART_WaitOnFlagUntilTimeout>
 801673e:	4603      	mov	r3, r0
 8016740:	2b00      	cmp	r3, #0
 8016742:	d005      	beq.n	8016750 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8016744:	68fb      	ldr	r3, [r7, #12]
 8016746:	2220      	movs	r2, #32
 8016748:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 801674c:	2303      	movs	r3, #3
 801674e:	e006      	b.n	801675e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8016750:	68fb      	ldr	r3, [r7, #12]
 8016752:	2220      	movs	r2, #32
 8016754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8016758:	2300      	movs	r3, #0
 801675a:	e000      	b.n	801675e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 801675c:	2302      	movs	r3, #2
  }
}
 801675e:	4618      	mov	r0, r3
 8016760:	3720      	adds	r7, #32
 8016762:	46bd      	mov	sp, r7
 8016764:	bd80      	pop	{r7, pc}

08016766 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016766:	b580      	push	{r7, lr}
 8016768:	b08a      	sub	sp, #40	@ 0x28
 801676a:	af02      	add	r7, sp, #8
 801676c:	60f8      	str	r0, [r7, #12]
 801676e:	60b9      	str	r1, [r7, #8]
 8016770:	603b      	str	r3, [r7, #0]
 8016772:	4613      	mov	r3, r2
 8016774:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8016776:	2300      	movs	r3, #0
 8016778:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801677a:	68fb      	ldr	r3, [r7, #12]
 801677c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016780:	b2db      	uxtb	r3, r3
 8016782:	2b20      	cmp	r3, #32
 8016784:	f040 8081 	bne.w	801688a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8016788:	68bb      	ldr	r3, [r7, #8]
 801678a:	2b00      	cmp	r3, #0
 801678c:	d002      	beq.n	8016794 <HAL_UART_Receive+0x2e>
 801678e:	88fb      	ldrh	r3, [r7, #6]
 8016790:	2b00      	cmp	r3, #0
 8016792:	d101      	bne.n	8016798 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8016794:	2301      	movs	r3, #1
 8016796:	e079      	b.n	801688c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016798:	68fb      	ldr	r3, [r7, #12]
 801679a:	2200      	movs	r2, #0
 801679c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801679e:	68fb      	ldr	r3, [r7, #12]
 80167a0:	2222      	movs	r2, #34	@ 0x22
 80167a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80167a6:	68fb      	ldr	r3, [r7, #12]
 80167a8:	2200      	movs	r2, #0
 80167aa:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80167ac:	f7ef f8c6 	bl	800593c <HAL_GetTick>
 80167b0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80167b2:	68fb      	ldr	r3, [r7, #12]
 80167b4:	88fa      	ldrh	r2, [r7, #6]
 80167b6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80167b8:	68fb      	ldr	r3, [r7, #12]
 80167ba:	88fa      	ldrh	r2, [r7, #6]
 80167bc:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80167be:	68fb      	ldr	r3, [r7, #12]
 80167c0:	689b      	ldr	r3, [r3, #8]
 80167c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80167c6:	d108      	bne.n	80167da <HAL_UART_Receive+0x74>
 80167c8:	68fb      	ldr	r3, [r7, #12]
 80167ca:	691b      	ldr	r3, [r3, #16]
 80167cc:	2b00      	cmp	r3, #0
 80167ce:	d104      	bne.n	80167da <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80167d0:	2300      	movs	r3, #0
 80167d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80167d4:	68bb      	ldr	r3, [r7, #8]
 80167d6:	61bb      	str	r3, [r7, #24]
 80167d8:	e003      	b.n	80167e2 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80167da:	68bb      	ldr	r3, [r7, #8]
 80167dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80167de:	2300      	movs	r3, #0
 80167e0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80167e2:	e047      	b.n	8016874 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80167e4:	683b      	ldr	r3, [r7, #0]
 80167e6:	9300      	str	r3, [sp, #0]
 80167e8:	697b      	ldr	r3, [r7, #20]
 80167ea:	2200      	movs	r2, #0
 80167ec:	2120      	movs	r1, #32
 80167ee:	68f8      	ldr	r0, [r7, #12]
 80167f0:	f001 fe47 	bl	8018482 <UART_WaitOnFlagUntilTimeout>
 80167f4:	4603      	mov	r3, r0
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d005      	beq.n	8016806 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80167fa:	68fb      	ldr	r3, [r7, #12]
 80167fc:	2220      	movs	r2, #32
 80167fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8016802:	2303      	movs	r3, #3
 8016804:	e042      	b.n	801688c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8016806:	69fb      	ldr	r3, [r7, #28]
 8016808:	2b00      	cmp	r3, #0
 801680a:	d10c      	bne.n	8016826 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 801680c:	68fb      	ldr	r3, [r7, #12]
 801680e:	681b      	ldr	r3, [r3, #0]
 8016810:	685b      	ldr	r3, [r3, #4]
 8016812:	b29b      	uxth	r3, r3
 8016814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016818:	b29a      	uxth	r2, r3
 801681a:	69bb      	ldr	r3, [r7, #24]
 801681c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 801681e:	69bb      	ldr	r3, [r7, #24]
 8016820:	3302      	adds	r3, #2
 8016822:	61bb      	str	r3, [r7, #24]
 8016824:	e01f      	b.n	8016866 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8016826:	68fb      	ldr	r3, [r7, #12]
 8016828:	689b      	ldr	r3, [r3, #8]
 801682a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801682e:	d007      	beq.n	8016840 <HAL_UART_Receive+0xda>
 8016830:	68fb      	ldr	r3, [r7, #12]
 8016832:	689b      	ldr	r3, [r3, #8]
 8016834:	2b00      	cmp	r3, #0
 8016836:	d10a      	bne.n	801684e <HAL_UART_Receive+0xe8>
 8016838:	68fb      	ldr	r3, [r7, #12]
 801683a:	691b      	ldr	r3, [r3, #16]
 801683c:	2b00      	cmp	r3, #0
 801683e:	d106      	bne.n	801684e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8016840:	68fb      	ldr	r3, [r7, #12]
 8016842:	681b      	ldr	r3, [r3, #0]
 8016844:	685b      	ldr	r3, [r3, #4]
 8016846:	b2da      	uxtb	r2, r3
 8016848:	69fb      	ldr	r3, [r7, #28]
 801684a:	701a      	strb	r2, [r3, #0]
 801684c:	e008      	b.n	8016860 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801684e:	68fb      	ldr	r3, [r7, #12]
 8016850:	681b      	ldr	r3, [r3, #0]
 8016852:	685b      	ldr	r3, [r3, #4]
 8016854:	b2db      	uxtb	r3, r3
 8016856:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801685a:	b2da      	uxtb	r2, r3
 801685c:	69fb      	ldr	r3, [r7, #28]
 801685e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8016860:	69fb      	ldr	r3, [r7, #28]
 8016862:	3301      	adds	r3, #1
 8016864:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8016866:	68fb      	ldr	r3, [r7, #12]
 8016868:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 801686a:	b29b      	uxth	r3, r3
 801686c:	3b01      	subs	r3, #1
 801686e:	b29a      	uxth	r2, r3
 8016870:	68fb      	ldr	r3, [r7, #12]
 8016872:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8016874:	68fb      	ldr	r3, [r7, #12]
 8016876:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8016878:	b29b      	uxth	r3, r3
 801687a:	2b00      	cmp	r3, #0
 801687c:	d1b2      	bne.n	80167e4 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801687e:	68fb      	ldr	r3, [r7, #12]
 8016880:	2220      	movs	r2, #32
 8016882:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8016886:	2300      	movs	r3, #0
 8016888:	e000      	b.n	801688c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 801688a:	2302      	movs	r3, #2
  }
}
 801688c:	4618      	mov	r0, r3
 801688e:	3720      	adds	r7, #32
 8016890:	46bd      	mov	sp, r7
 8016892:	bd80      	pop	{r7, pc}

08016894 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8016894:	b480      	push	{r7}
 8016896:	b085      	sub	sp, #20
 8016898:	af00      	add	r7, sp, #0
 801689a:	60f8      	str	r0, [r7, #12]
 801689c:	60b9      	str	r1, [r7, #8]
 801689e:	4613      	mov	r3, r2
 80168a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80168a2:	68fb      	ldr	r3, [r7, #12]
 80168a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80168a8:	b2db      	uxtb	r3, r3
 80168aa:	2b20      	cmp	r3, #32
 80168ac:	d121      	bne.n	80168f2 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80168ae:	68bb      	ldr	r3, [r7, #8]
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	d002      	beq.n	80168ba <HAL_UART_Transmit_IT+0x26>
 80168b4:	88fb      	ldrh	r3, [r7, #6]
 80168b6:	2b00      	cmp	r3, #0
 80168b8:	d101      	bne.n	80168be <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80168ba:	2301      	movs	r3, #1
 80168bc:	e01a      	b.n	80168f4 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80168be:	68fb      	ldr	r3, [r7, #12]
 80168c0:	68ba      	ldr	r2, [r7, #8]
 80168c2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80168c4:	68fb      	ldr	r3, [r7, #12]
 80168c6:	88fa      	ldrh	r2, [r7, #6]
 80168c8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80168ca:	68fb      	ldr	r3, [r7, #12]
 80168cc:	88fa      	ldrh	r2, [r7, #6]
 80168ce:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80168d0:	68fb      	ldr	r3, [r7, #12]
 80168d2:	2200      	movs	r2, #0
 80168d4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80168d6:	68fb      	ldr	r3, [r7, #12]
 80168d8:	2221      	movs	r2, #33	@ 0x21
 80168da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80168de:	68fb      	ldr	r3, [r7, #12]
 80168e0:	681b      	ldr	r3, [r3, #0]
 80168e2:	68da      	ldr	r2, [r3, #12]
 80168e4:	68fb      	ldr	r3, [r7, #12]
 80168e6:	681b      	ldr	r3, [r3, #0]
 80168e8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80168ec:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80168ee:	2300      	movs	r3, #0
 80168f0:	e000      	b.n	80168f4 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80168f2:	2302      	movs	r3, #2
  }
}
 80168f4:	4618      	mov	r0, r3
 80168f6:	3714      	adds	r7, #20
 80168f8:	46bd      	mov	sp, r7
 80168fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168fe:	4770      	bx	lr

08016900 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8016900:	b580      	push	{r7, lr}
 8016902:	b084      	sub	sp, #16
 8016904:	af00      	add	r7, sp, #0
 8016906:	60f8      	str	r0, [r7, #12]
 8016908:	60b9      	str	r1, [r7, #8]
 801690a:	4613      	mov	r3, r2
 801690c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801690e:	68fb      	ldr	r3, [r7, #12]
 8016910:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016914:	b2db      	uxtb	r3, r3
 8016916:	2b20      	cmp	r3, #32
 8016918:	d112      	bne.n	8016940 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 801691a:	68bb      	ldr	r3, [r7, #8]
 801691c:	2b00      	cmp	r3, #0
 801691e:	d002      	beq.n	8016926 <HAL_UART_Receive_IT+0x26>
 8016920:	88fb      	ldrh	r3, [r7, #6]
 8016922:	2b00      	cmp	r3, #0
 8016924:	d101      	bne.n	801692a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8016926:	2301      	movs	r3, #1
 8016928:	e00b      	b.n	8016942 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801692a:	68fb      	ldr	r3, [r7, #12]
 801692c:	2200      	movs	r2, #0
 801692e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8016930:	88fb      	ldrh	r3, [r7, #6]
 8016932:	461a      	mov	r2, r3
 8016934:	68b9      	ldr	r1, [r7, #8]
 8016936:	68f8      	ldr	r0, [r7, #12]
 8016938:	f001 fdfc 	bl	8018534 <UART_Start_Receive_IT>
 801693c:	4603      	mov	r3, r0
 801693e:	e000      	b.n	8016942 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8016940:	2302      	movs	r3, #2
  }
}
 8016942:	4618      	mov	r0, r3
 8016944:	3710      	adds	r7, #16
 8016946:	46bd      	mov	sp, r7
 8016948:	bd80      	pop	{r7, pc}

0801694a <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 801694a:	b580      	push	{r7, lr}
 801694c:	b08c      	sub	sp, #48	@ 0x30
 801694e:	af00      	add	r7, sp, #0
 8016950:	60f8      	str	r0, [r7, #12]
 8016952:	60b9      	str	r1, [r7, #8]
 8016954:	4613      	mov	r3, r2
 8016956:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8016958:	68fb      	ldr	r3, [r7, #12]
 801695a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801695e:	b2db      	uxtb	r3, r3
 8016960:	2b20      	cmp	r3, #32
 8016962:	d156      	bne.n	8016a12 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8016964:	68bb      	ldr	r3, [r7, #8]
 8016966:	2b00      	cmp	r3, #0
 8016968:	d002      	beq.n	8016970 <HAL_UART_Transmit_DMA+0x26>
 801696a:	88fb      	ldrh	r3, [r7, #6]
 801696c:	2b00      	cmp	r3, #0
 801696e:	d101      	bne.n	8016974 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8016970:	2301      	movs	r3, #1
 8016972:	e04f      	b.n	8016a14 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8016974:	68ba      	ldr	r2, [r7, #8]
 8016976:	68fb      	ldr	r3, [r7, #12]
 8016978:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 801697a:	68fb      	ldr	r3, [r7, #12]
 801697c:	88fa      	ldrh	r2, [r7, #6]
 801697e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8016980:	68fb      	ldr	r3, [r7, #12]
 8016982:	88fa      	ldrh	r2, [r7, #6]
 8016984:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016986:	68fb      	ldr	r3, [r7, #12]
 8016988:	2200      	movs	r2, #0
 801698a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801698c:	68fb      	ldr	r3, [r7, #12]
 801698e:	2221      	movs	r2, #33	@ 0x21
 8016990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8016994:	68fb      	ldr	r3, [r7, #12]
 8016996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016998:	4a20      	ldr	r2, [pc, #128]	@ (8016a1c <HAL_UART_Transmit_DMA+0xd2>)
 801699a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801699c:	68fb      	ldr	r3, [r7, #12]
 801699e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80169a0:	4a1f      	ldr	r2, [pc, #124]	@ (8016a20 <HAL_UART_Transmit_DMA+0xd6>)
 80169a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80169a4:	68fb      	ldr	r3, [r7, #12]
 80169a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80169a8:	4a1e      	ldr	r2, [pc, #120]	@ (8016a24 <HAL_UART_Transmit_DMA+0xda>)
 80169aa:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80169ac:	68fb      	ldr	r3, [r7, #12]
 80169ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80169b0:	2200      	movs	r2, #0
 80169b2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80169b4:	f107 0308 	add.w	r3, r7, #8
 80169b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80169ba:	68fb      	ldr	r3, [r7, #12]
 80169bc:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80169be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80169c0:	6819      	ldr	r1, [r3, #0]
 80169c2:	68fb      	ldr	r3, [r7, #12]
 80169c4:	681b      	ldr	r3, [r3, #0]
 80169c6:	3304      	adds	r3, #4
 80169c8:	461a      	mov	r2, r3
 80169ca:	88fb      	ldrh	r3, [r7, #6]
 80169cc:	f7ef fd8d 	bl	80064ea <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80169d0:	68fb      	ldr	r3, [r7, #12]
 80169d2:	681b      	ldr	r3, [r3, #0]
 80169d4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80169d8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80169da:	68fb      	ldr	r3, [r7, #12]
 80169dc:	681b      	ldr	r3, [r3, #0]
 80169de:	3314      	adds	r3, #20
 80169e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80169e2:	69bb      	ldr	r3, [r7, #24]
 80169e4:	e853 3f00 	ldrex	r3, [r3]
 80169e8:	617b      	str	r3, [r7, #20]
   return(result);
 80169ea:	697b      	ldr	r3, [r7, #20]
 80169ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80169f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80169f2:	68fb      	ldr	r3, [r7, #12]
 80169f4:	681b      	ldr	r3, [r3, #0]
 80169f6:	3314      	adds	r3, #20
 80169f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80169fa:	627a      	str	r2, [r7, #36]	@ 0x24
 80169fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80169fe:	6a39      	ldr	r1, [r7, #32]
 8016a00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016a02:	e841 2300 	strex	r3, r2, [r1]
 8016a06:	61fb      	str	r3, [r7, #28]
   return(result);
 8016a08:	69fb      	ldr	r3, [r7, #28]
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	d1e5      	bne.n	80169da <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8016a0e:	2300      	movs	r3, #0
 8016a10:	e000      	b.n	8016a14 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8016a12:	2302      	movs	r3, #2
  }
}
 8016a14:	4618      	mov	r0, r3
 8016a16:	3730      	adds	r7, #48	@ 0x30
 8016a18:	46bd      	mov	sp, r7
 8016a1a:	bd80      	pop	{r7, pc}
 8016a1c:	080181d1 	.word	0x080181d1
 8016a20:	0801826b 	.word	0x0801826b
 8016a24:	080183ef 	.word	0x080183ef

08016a28 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8016a28:	b580      	push	{r7, lr}
 8016a2a:	b084      	sub	sp, #16
 8016a2c:	af00      	add	r7, sp, #0
 8016a2e:	60f8      	str	r0, [r7, #12]
 8016a30:	60b9      	str	r1, [r7, #8]
 8016a32:	4613      	mov	r3, r2
 8016a34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8016a36:	68fb      	ldr	r3, [r7, #12]
 8016a38:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016a3c:	b2db      	uxtb	r3, r3
 8016a3e:	2b20      	cmp	r3, #32
 8016a40:	d112      	bne.n	8016a68 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8016a42:	68bb      	ldr	r3, [r7, #8]
 8016a44:	2b00      	cmp	r3, #0
 8016a46:	d002      	beq.n	8016a4e <HAL_UART_Receive_DMA+0x26>
 8016a48:	88fb      	ldrh	r3, [r7, #6]
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d101      	bne.n	8016a52 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8016a4e:	2301      	movs	r3, #1
 8016a50:	e00b      	b.n	8016a6a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016a52:	68fb      	ldr	r3, [r7, #12]
 8016a54:	2200      	movs	r2, #0
 8016a56:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8016a58:	88fb      	ldrh	r3, [r7, #6]
 8016a5a:	461a      	mov	r2, r3
 8016a5c:	68b9      	ldr	r1, [r7, #8]
 8016a5e:	68f8      	ldr	r0, [r7, #12]
 8016a60:	f001 fda2 	bl	80185a8 <UART_Start_Receive_DMA>
 8016a64:	4603      	mov	r3, r0
 8016a66:	e000      	b.n	8016a6a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8016a68:	2302      	movs	r3, #2
  }
}
 8016a6a:	4618      	mov	r0, r3
 8016a6c:	3710      	adds	r7, #16
 8016a6e:	46bd      	mov	sp, r7
 8016a70:	bd80      	pop	{r7, pc}

08016a72 <HAL_UART_DMAPause>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 8016a72:	b480      	push	{r7}
 8016a74:	b09d      	sub	sp, #116	@ 0x74
 8016a76:	af00      	add	r7, sp, #0
 8016a78:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8016a7a:	2300      	movs	r3, #0
 8016a7c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	681b      	ldr	r3, [r3, #0]
 8016a82:	695b      	ldr	r3, [r3, #20]
 8016a84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016a88:	2b80      	cmp	r3, #128	@ 0x80
 8016a8a:	bf0c      	ite	eq
 8016a8c:	2301      	moveq	r3, #1
 8016a8e:	2300      	movne	r3, #0
 8016a90:	b2db      	uxtb	r3, r3
 8016a92:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8016a9a:	b2db      	uxtb	r3, r3
 8016a9c:	2b21      	cmp	r3, #33	@ 0x21
 8016a9e:	d11c      	bne.n	8016ada <HAL_UART_DMAPause+0x68>
 8016aa0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016aa2:	2b00      	cmp	r3, #0
 8016aa4:	d019      	beq.n	8016ada <HAL_UART_DMAPause+0x68>
  {
    /* Disable the UART DMA Tx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	681b      	ldr	r3, [r3, #0]
 8016aaa:	3314      	adds	r3, #20
 8016aac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016aae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016ab0:	e853 3f00 	ldrex	r3, [r3]
 8016ab4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8016ab6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016ab8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8016abc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8016abe:	687b      	ldr	r3, [r7, #4]
 8016ac0:	681b      	ldr	r3, [r3, #0]
 8016ac2:	3314      	adds	r3, #20
 8016ac4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8016ac6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8016ac8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016aca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8016acc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8016ace:	e841 2300 	strex	r3, r2, [r1]
 8016ad2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8016ad4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	d1e5      	bne.n	8016aa6 <HAL_UART_DMAPause+0x34>
  }

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	681b      	ldr	r3, [r3, #0]
 8016ade:	695b      	ldr	r3, [r3, #20]
 8016ae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016ae4:	2b40      	cmp	r3, #64	@ 0x40
 8016ae6:	bf0c      	ite	eq
 8016ae8:	2301      	moveq	r3, #1
 8016aea:	2300      	movne	r3, #0
 8016aec:	b2db      	uxtb	r3, r3
 8016aee:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016af6:	b2db      	uxtb	r3, r3
 8016af8:	2b22      	cmp	r3, #34	@ 0x22
 8016afa:	d150      	bne.n	8016b9e <HAL_UART_DMAPause+0x12c>
 8016afc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d04d      	beq.n	8016b9e <HAL_UART_DMAPause+0x12c>
  {
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	681b      	ldr	r3, [r3, #0]
 8016b06:	330c      	adds	r3, #12
 8016b08:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016b0c:	e853 3f00 	ldrex	r3, [r3]
 8016b10:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8016b12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016b14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8016b18:	667b      	str	r3, [r7, #100]	@ 0x64
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	681b      	ldr	r3, [r3, #0]
 8016b1e:	330c      	adds	r3, #12
 8016b20:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8016b22:	647a      	str	r2, [r7, #68]	@ 0x44
 8016b24:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016b26:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8016b28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8016b2a:	e841 2300 	strex	r3, r2, [r1]
 8016b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8016b30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	d1e5      	bne.n	8016b02 <HAL_UART_DMAPause+0x90>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	681b      	ldr	r3, [r3, #0]
 8016b3a:	3314      	adds	r3, #20
 8016b3c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b40:	e853 3f00 	ldrex	r3, [r3]
 8016b44:	623b      	str	r3, [r7, #32]
   return(result);
 8016b46:	6a3b      	ldr	r3, [r7, #32]
 8016b48:	f023 0301 	bic.w	r3, r3, #1
 8016b4c:	663b      	str	r3, [r7, #96]	@ 0x60
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	681b      	ldr	r3, [r3, #0]
 8016b52:	3314      	adds	r3, #20
 8016b54:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8016b56:	633a      	str	r2, [r7, #48]	@ 0x30
 8016b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016b5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016b5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016b5e:	e841 2300 	strex	r3, r2, [r1]
 8016b62:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8016b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016b66:	2b00      	cmp	r3, #0
 8016b68:	d1e5      	bne.n	8016b36 <HAL_UART_DMAPause+0xc4>

    /* Disable the UART DMA Rx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	681b      	ldr	r3, [r3, #0]
 8016b6e:	3314      	adds	r3, #20
 8016b70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016b72:	693b      	ldr	r3, [r7, #16]
 8016b74:	e853 3f00 	ldrex	r3, [r3]
 8016b78:	60fb      	str	r3, [r7, #12]
   return(result);
 8016b7a:	68fb      	ldr	r3, [r7, #12]
 8016b7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8016b80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	681b      	ldr	r3, [r3, #0]
 8016b86:	3314      	adds	r3, #20
 8016b88:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8016b8a:	61fa      	str	r2, [r7, #28]
 8016b8c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016b8e:	69b9      	ldr	r1, [r7, #24]
 8016b90:	69fa      	ldr	r2, [r7, #28]
 8016b92:	e841 2300 	strex	r3, r2, [r1]
 8016b96:	617b      	str	r3, [r7, #20]
   return(result);
 8016b98:	697b      	ldr	r3, [r7, #20]
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	d1e5      	bne.n	8016b6a <HAL_UART_DMAPause+0xf8>
  }

  return HAL_OK;
 8016b9e:	2300      	movs	r3, #0
}
 8016ba0:	4618      	mov	r0, r3
 8016ba2:	3774      	adds	r7, #116	@ 0x74
 8016ba4:	46bd      	mov	sp, r7
 8016ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016baa:	4770      	bx	lr

08016bac <HAL_UART_DMAResume>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 8016bac:	b480      	push	{r7}
 8016bae:	b09d      	sub	sp, #116	@ 0x74
 8016bb0:	af00      	add	r7, sp, #0
 8016bb2:	6078      	str	r0, [r7, #4]

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8016bba:	b2db      	uxtb	r3, r3
 8016bbc:	2b21      	cmp	r3, #33	@ 0x21
 8016bbe:	d119      	bne.n	8016bf4 <HAL_UART_DMAResume+0x48>
  {
    /* Enable the UART DMA Tx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	681b      	ldr	r3, [r3, #0]
 8016bc4:	3314      	adds	r3, #20
 8016bc6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016bc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016bca:	e853 3f00 	ldrex	r3, [r3]
 8016bce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8016bd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016bd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016bd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	681b      	ldr	r3, [r3, #0]
 8016bdc:	3314      	adds	r3, #20
 8016bde:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8016be0:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8016be2:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016be4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8016be6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8016be8:	e841 2300 	strex	r3, r2, [r1]
 8016bec:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8016bee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	d1e5      	bne.n	8016bc0 <HAL_UART_DMAResume+0x14>
  }

  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016bfa:	b2db      	uxtb	r3, r3
 8016bfc:	2b22      	cmp	r3, #34	@ 0x22
 8016bfe:	d15c      	bne.n	8016cba <HAL_UART_DMAResume+0x10e>
  {
    /* Clear the Overrun flag before resuming the Rx transfer*/
    __HAL_UART_CLEAR_OREFLAG(huart);
 8016c00:	2300      	movs	r3, #0
 8016c02:	60fb      	str	r3, [r7, #12]
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	681b      	ldr	r3, [r3, #0]
 8016c08:	681b      	ldr	r3, [r3, #0]
 8016c0a:	60fb      	str	r3, [r7, #12]
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	681b      	ldr	r3, [r3, #0]
 8016c10:	685b      	ldr	r3, [r3, #4]
 8016c12:	60fb      	str	r3, [r7, #12]
 8016c14:	68fb      	ldr	r3, [r7, #12]

    /* Re-enable PE and ERR (Frame error, noise error, overrun error) interrupts */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	691b      	ldr	r3, [r3, #16]
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	d019      	beq.n	8016c52 <HAL_UART_DMAResume+0xa6>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	681b      	ldr	r3, [r3, #0]
 8016c22:	330c      	adds	r3, #12
 8016c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016c26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016c28:	e853 3f00 	ldrex	r3, [r3]
 8016c2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8016c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016c30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8016c34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	681b      	ldr	r3, [r3, #0]
 8016c3a:	330c      	adds	r3, #12
 8016c3c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8016c3e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8016c40:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016c42:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8016c44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8016c46:	e841 2300 	strex	r3, r2, [r1]
 8016c4a:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8016c4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016c4e:	2b00      	cmp	r3, #0
 8016c50:	d1e5      	bne.n	8016c1e <HAL_UART_DMAResume+0x72>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016c52:	687b      	ldr	r3, [r7, #4]
 8016c54:	681b      	ldr	r3, [r3, #0]
 8016c56:	3314      	adds	r3, #20
 8016c58:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016c5c:	e853 3f00 	ldrex	r3, [r3]
 8016c60:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8016c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c64:	f043 0301 	orr.w	r3, r3, #1
 8016c68:	667b      	str	r3, [r7, #100]	@ 0x64
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	681b      	ldr	r3, [r3, #0]
 8016c6e:	3314      	adds	r3, #20
 8016c70:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8016c72:	637a      	str	r2, [r7, #52]	@ 0x34
 8016c74:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016c76:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8016c78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016c7a:	e841 2300 	strex	r3, r2, [r1]
 8016c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8016c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c82:	2b00      	cmp	r3, #0
 8016c84:	d1e5      	bne.n	8016c52 <HAL_UART_DMAResume+0xa6>

    /* Enable the UART DMA Rx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016c86:	687b      	ldr	r3, [r7, #4]
 8016c88:	681b      	ldr	r3, [r3, #0]
 8016c8a:	3314      	adds	r3, #20
 8016c8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016c8e:	697b      	ldr	r3, [r7, #20]
 8016c90:	e853 3f00 	ldrex	r3, [r3]
 8016c94:	613b      	str	r3, [r7, #16]
   return(result);
 8016c96:	693b      	ldr	r3, [r7, #16]
 8016c98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016c9c:	663b      	str	r3, [r7, #96]	@ 0x60
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	681b      	ldr	r3, [r3, #0]
 8016ca2:	3314      	adds	r3, #20
 8016ca4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8016ca6:	623a      	str	r2, [r7, #32]
 8016ca8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016caa:	69f9      	ldr	r1, [r7, #28]
 8016cac:	6a3a      	ldr	r2, [r7, #32]
 8016cae:	e841 2300 	strex	r3, r2, [r1]
 8016cb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8016cb4:	69bb      	ldr	r3, [r7, #24]
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	d1e5      	bne.n	8016c86 <HAL_UART_DMAResume+0xda>
  }

  return HAL_OK;
 8016cba:	2300      	movs	r3, #0
}
 8016cbc:	4618      	mov	r0, r3
 8016cbe:	3774      	adds	r7, #116	@ 0x74
 8016cc0:	46bd      	mov	sp, r7
 8016cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cc6:	4770      	bx	lr

08016cc8 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8016cc8:	b580      	push	{r7, lr}
 8016cca:	b090      	sub	sp, #64	@ 0x40
 8016ccc:	af00      	add	r7, sp, #0
 8016cce:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8016cd0:	2300      	movs	r3, #0
 8016cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	681b      	ldr	r3, [r3, #0]
 8016cd8:	695b      	ldr	r3, [r3, #20]
 8016cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016cde:	2b80      	cmp	r3, #128	@ 0x80
 8016ce0:	bf0c      	ite	eq
 8016ce2:	2301      	moveq	r3, #1
 8016ce4:	2300      	movne	r3, #0
 8016ce6:	b2db      	uxtb	r3, r3
 8016ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8016cf0:	b2db      	uxtb	r3, r3
 8016cf2:	2b21      	cmp	r3, #33	@ 0x21
 8016cf4:	d128      	bne.n	8016d48 <HAL_UART_DMAStop+0x80>
 8016cf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016cf8:	2b00      	cmp	r3, #0
 8016cfa:	d025      	beq.n	8016d48 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	681b      	ldr	r3, [r3, #0]
 8016d00:	3314      	adds	r3, #20
 8016d02:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d06:	e853 3f00 	ldrex	r3, [r3]
 8016d0a:	623b      	str	r3, [r7, #32]
   return(result);
 8016d0c:	6a3b      	ldr	r3, [r7, #32]
 8016d0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8016d12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	681b      	ldr	r3, [r3, #0]
 8016d18:	3314      	adds	r3, #20
 8016d1a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8016d1c:	633a      	str	r2, [r7, #48]	@ 0x30
 8016d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016d20:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016d22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016d24:	e841 2300 	strex	r3, r2, [r1]
 8016d28:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8016d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d2c:	2b00      	cmp	r3, #0
 8016d2e:	d1e5      	bne.n	8016cfc <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016d34:	2b00      	cmp	r3, #0
 8016d36:	d004      	beq.n	8016d42 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016d3c:	4618      	mov	r0, r3
 8016d3e:	f7ef fc2c 	bl	800659a <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8016d42:	6878      	ldr	r0, [r7, #4]
 8016d44:	f001 fcca 	bl	80186dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	681b      	ldr	r3, [r3, #0]
 8016d4c:	695b      	ldr	r3, [r3, #20]
 8016d4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016d52:	2b40      	cmp	r3, #64	@ 0x40
 8016d54:	bf0c      	ite	eq
 8016d56:	2301      	moveq	r3, #1
 8016d58:	2300      	movne	r3, #0
 8016d5a:	b2db      	uxtb	r3, r3
 8016d5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8016d5e:	687b      	ldr	r3, [r7, #4]
 8016d60:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016d64:	b2db      	uxtb	r3, r3
 8016d66:	2b22      	cmp	r3, #34	@ 0x22
 8016d68:	d128      	bne.n	8016dbc <HAL_UART_DMAStop+0xf4>
 8016d6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016d6c:	2b00      	cmp	r3, #0
 8016d6e:	d025      	beq.n	8016dbc <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	681b      	ldr	r3, [r3, #0]
 8016d74:	3314      	adds	r3, #20
 8016d76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016d78:	693b      	ldr	r3, [r7, #16]
 8016d7a:	e853 3f00 	ldrex	r3, [r3]
 8016d7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8016d80:	68fb      	ldr	r3, [r7, #12]
 8016d82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8016d86:	637b      	str	r3, [r7, #52]	@ 0x34
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	681b      	ldr	r3, [r3, #0]
 8016d8c:	3314      	adds	r3, #20
 8016d8e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016d90:	61fa      	str	r2, [r7, #28]
 8016d92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016d94:	69b9      	ldr	r1, [r7, #24]
 8016d96:	69fa      	ldr	r2, [r7, #28]
 8016d98:	e841 2300 	strex	r3, r2, [r1]
 8016d9c:	617b      	str	r3, [r7, #20]
   return(result);
 8016d9e:	697b      	ldr	r3, [r7, #20]
 8016da0:	2b00      	cmp	r3, #0
 8016da2:	d1e5      	bne.n	8016d70 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	d004      	beq.n	8016db6 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016db0:	4618      	mov	r0, r3
 8016db2:	f7ef fbf2 	bl	800659a <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8016db6:	6878      	ldr	r0, [r7, #4]
 8016db8:	f001 fcb8 	bl	801872c <UART_EndRxTransfer>
  }

  return HAL_OK;
 8016dbc:	2300      	movs	r3, #0
}
 8016dbe:	4618      	mov	r0, r3
 8016dc0:	3740      	adds	r7, #64	@ 0x40
 8016dc2:	46bd      	mov	sp, r7
 8016dc4:	bd80      	pop	{r7, pc}

08016dc6 <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 8016dc6:	b580      	push	{r7, lr}
 8016dc8:	b088      	sub	sp, #32
 8016dca:	af00      	add	r7, sp, #0
 8016dcc:	60f8      	str	r0, [r7, #12]
 8016dce:	60b9      	str	r1, [r7, #8]
 8016dd0:	603b      	str	r3, [r7, #0]
 8016dd2:	4613      	mov	r3, r2
 8016dd4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8016dd6:	68fb      	ldr	r3, [r7, #12]
 8016dd8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016ddc:	b2db      	uxtb	r3, r3
 8016dde:	2b20      	cmp	r3, #32
 8016de0:	f040 80c0 	bne.w	8016f64 <HAL_UARTEx_ReceiveToIdle+0x19e>
  {
    if ((pData == NULL) || (Size == 0U))
 8016de4:	68bb      	ldr	r3, [r7, #8]
 8016de6:	2b00      	cmp	r3, #0
 8016de8:	d002      	beq.n	8016df0 <HAL_UARTEx_ReceiveToIdle+0x2a>
 8016dea:	88fb      	ldrh	r3, [r7, #6]
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	d101      	bne.n	8016df4 <HAL_UARTEx_ReceiveToIdle+0x2e>
    {
      return  HAL_ERROR;
 8016df0:	2301      	movs	r3, #1
 8016df2:	e0b8      	b.n	8016f66 <HAL_UARTEx_ReceiveToIdle+0x1a0>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016df4:	68fb      	ldr	r3, [r7, #12]
 8016df6:	2200      	movs	r2, #0
 8016df8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8016dfa:	68fb      	ldr	r3, [r7, #12]
 8016dfc:	2222      	movs	r2, #34	@ 0x22
 8016dfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8016e02:	68fb      	ldr	r3, [r7, #12]
 8016e04:	2201      	movs	r2, #1
 8016e06:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016e08:	68fb      	ldr	r3, [r7, #12]
 8016e0a:	2200      	movs	r2, #0
 8016e0c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8016e0e:	f7ee fd95 	bl	800593c <HAL_GetTick>
 8016e12:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8016e14:	68fb      	ldr	r3, [r7, #12]
 8016e16:	88fa      	ldrh	r2, [r7, #6]
 8016e18:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8016e1a:	68fb      	ldr	r3, [r7, #12]
 8016e1c:	88fa      	ldrh	r2, [r7, #6]
 8016e1e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8016e20:	68fb      	ldr	r3, [r7, #12]
 8016e22:	689b      	ldr	r3, [r3, #8]
 8016e24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016e28:	d108      	bne.n	8016e3c <HAL_UARTEx_ReceiveToIdle+0x76>
 8016e2a:	68fb      	ldr	r3, [r7, #12]
 8016e2c:	691b      	ldr	r3, [r3, #16]
 8016e2e:	2b00      	cmp	r3, #0
 8016e30:	d104      	bne.n	8016e3c <HAL_UARTEx_ReceiveToIdle+0x76>
    {
      pdata8bits  = NULL;
 8016e32:	2300      	movs	r3, #0
 8016e34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8016e36:	68bb      	ldr	r3, [r7, #8]
 8016e38:	61bb      	str	r3, [r7, #24]
 8016e3a:	e003      	b.n	8016e44 <HAL_UARTEx_ReceiveToIdle+0x7e>
    }
    else
    {
      pdata8bits  = pData;
 8016e3c:	68bb      	ldr	r3, [r7, #8]
 8016e3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8016e40:	2300      	movs	r3, #0
 8016e42:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 8016e44:	683b      	ldr	r3, [r7, #0]
 8016e46:	2200      	movs	r2, #0
 8016e48:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8016e4a:	e077      	b.n	8016f3c <HAL_UARTEx_ReceiveToIdle+0x176>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8016e4c:	68fb      	ldr	r3, [r7, #12]
 8016e4e:	681b      	ldr	r3, [r3, #0]
 8016e50:	681b      	ldr	r3, [r3, #0]
 8016e52:	f003 0310 	and.w	r3, r3, #16
 8016e56:	2b10      	cmp	r3, #16
 8016e58:	d117      	bne.n	8016e8a <HAL_UARTEx_ReceiveToIdle+0xc4>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8016e5a:	2300      	movs	r3, #0
 8016e5c:	613b      	str	r3, [r7, #16]
 8016e5e:	68fb      	ldr	r3, [r7, #12]
 8016e60:	681b      	ldr	r3, [r3, #0]
 8016e62:	681b      	ldr	r3, [r3, #0]
 8016e64:	613b      	str	r3, [r7, #16]
 8016e66:	68fb      	ldr	r3, [r7, #12]
 8016e68:	681b      	ldr	r3, [r3, #0]
 8016e6a:	685b      	ldr	r3, [r3, #4]
 8016e6c:	613b      	str	r3, [r7, #16]
 8016e6e:	693b      	ldr	r3, [r7, #16]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 8016e70:	683b      	ldr	r3, [r7, #0]
 8016e72:	881b      	ldrh	r3, [r3, #0]
 8016e74:	2b00      	cmp	r3, #0
 8016e76:	d008      	beq.n	8016e8a <HAL_UARTEx_ReceiveToIdle+0xc4>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8016e78:	68fb      	ldr	r3, [r7, #12]
 8016e7a:	2202      	movs	r2, #2
 8016e7c:	635a      	str	r2, [r3, #52]	@ 0x34
          huart->RxState = HAL_UART_STATE_READY;
 8016e7e:	68fb      	ldr	r3, [r7, #12]
 8016e80:	2220      	movs	r2, #32
 8016e82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          return HAL_OK;
 8016e86:	2300      	movs	r3, #0
 8016e88:	e06d      	b.n	8016f66 <HAL_UARTEx_ReceiveToIdle+0x1a0>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 8016e8a:	68fb      	ldr	r3, [r7, #12]
 8016e8c:	681b      	ldr	r3, [r3, #0]
 8016e8e:	681b      	ldr	r3, [r3, #0]
 8016e90:	f003 0320 	and.w	r3, r3, #32
 8016e94:	2b20      	cmp	r3, #32
 8016e96:	d13c      	bne.n	8016f12 <HAL_UARTEx_ReceiveToIdle+0x14c>
      {
        if (pdata8bits == NULL)
 8016e98:	69fb      	ldr	r3, [r7, #28]
 8016e9a:	2b00      	cmp	r3, #0
 8016e9c:	d10c      	bne.n	8016eb8 <HAL_UARTEx_ReceiveToIdle+0xf2>
        {
          *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8016e9e:	68fb      	ldr	r3, [r7, #12]
 8016ea0:	681b      	ldr	r3, [r3, #0]
 8016ea2:	685b      	ldr	r3, [r3, #4]
 8016ea4:	b29b      	uxth	r3, r3
 8016ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016eaa:	b29a      	uxth	r2, r3
 8016eac:	69bb      	ldr	r3, [r7, #24]
 8016eae:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 8016eb0:	69bb      	ldr	r3, [r7, #24]
 8016eb2:	3302      	adds	r3, #2
 8016eb4:	61bb      	str	r3, [r7, #24]
 8016eb6:	e01f      	b.n	8016ef8 <HAL_UARTEx_ReceiveToIdle+0x132>
        }
        else
        {
          if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8016eb8:	68fb      	ldr	r3, [r7, #12]
 8016eba:	689b      	ldr	r3, [r3, #8]
 8016ebc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016ec0:	d007      	beq.n	8016ed2 <HAL_UARTEx_ReceiveToIdle+0x10c>
 8016ec2:	68fb      	ldr	r3, [r7, #12]
 8016ec4:	689b      	ldr	r3, [r3, #8]
 8016ec6:	2b00      	cmp	r3, #0
 8016ec8:	d10a      	bne.n	8016ee0 <HAL_UARTEx_ReceiveToIdle+0x11a>
 8016eca:	68fb      	ldr	r3, [r7, #12]
 8016ecc:	691b      	ldr	r3, [r3, #16]
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	d106      	bne.n	8016ee0 <HAL_UARTEx_ReceiveToIdle+0x11a>
          {
            *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8016ed2:	68fb      	ldr	r3, [r7, #12]
 8016ed4:	681b      	ldr	r3, [r3, #0]
 8016ed6:	685b      	ldr	r3, [r3, #4]
 8016ed8:	b2da      	uxtb	r2, r3
 8016eda:	69fb      	ldr	r3, [r7, #28]
 8016edc:	701a      	strb	r2, [r3, #0]
 8016ede:	e008      	b.n	8016ef2 <HAL_UARTEx_ReceiveToIdle+0x12c>
          }
          else
          {
            *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8016ee0:	68fb      	ldr	r3, [r7, #12]
 8016ee2:	681b      	ldr	r3, [r3, #0]
 8016ee4:	685b      	ldr	r3, [r3, #4]
 8016ee6:	b2db      	uxtb	r3, r3
 8016ee8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016eec:	b2da      	uxtb	r2, r3
 8016eee:	69fb      	ldr	r3, [r7, #28]
 8016ef0:	701a      	strb	r2, [r3, #0]
          }

          pdata8bits++;
 8016ef2:	69fb      	ldr	r3, [r7, #28]
 8016ef4:	3301      	adds	r3, #1
 8016ef6:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 8016ef8:	683b      	ldr	r3, [r7, #0]
 8016efa:	881b      	ldrh	r3, [r3, #0]
 8016efc:	3301      	adds	r3, #1
 8016efe:	b29a      	uxth	r2, r3
 8016f00:	683b      	ldr	r3, [r7, #0]
 8016f02:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 8016f04:	68fb      	ldr	r3, [r7, #12]
 8016f06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8016f08:	b29b      	uxth	r3, r3
 8016f0a:	3b01      	subs	r3, #1
 8016f0c:	b29a      	uxth	r2, r3
 8016f0e:	68fb      	ldr	r3, [r7, #12]
 8016f10:	85da      	strh	r2, [r3, #46]	@ 0x2e
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8016f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016f18:	d010      	beq.n	8016f3c <HAL_UARTEx_ReceiveToIdle+0x176>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8016f1a:	f7ee fd0f 	bl	800593c <HAL_GetTick>
 8016f1e:	4602      	mov	r2, r0
 8016f20:	697b      	ldr	r3, [r7, #20]
 8016f22:	1ad3      	subs	r3, r2, r3
 8016f24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016f26:	429a      	cmp	r2, r3
 8016f28:	d302      	bcc.n	8016f30 <HAL_UARTEx_ReceiveToIdle+0x16a>
 8016f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	d105      	bne.n	8016f3c <HAL_UARTEx_ReceiveToIdle+0x176>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8016f30:	68fb      	ldr	r3, [r7, #12]
 8016f32:	2220      	movs	r2, #32
 8016f34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          return HAL_TIMEOUT;
 8016f38:	2303      	movs	r3, #3
 8016f3a:	e014      	b.n	8016f66 <HAL_UARTEx_ReceiveToIdle+0x1a0>
    while (huart->RxXferCount > 0U)
 8016f3c:	68fb      	ldr	r3, [r7, #12]
 8016f3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8016f40:	b29b      	uxth	r3, r3
 8016f42:	2b00      	cmp	r3, #0
 8016f44:	d182      	bne.n	8016e4c <HAL_UARTEx_ReceiveToIdle+0x86>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 8016f46:	68fb      	ldr	r3, [r7, #12]
 8016f48:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8016f4a:	68fb      	ldr	r3, [r7, #12]
 8016f4c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8016f4e:	b29b      	uxth	r3, r3
 8016f50:	1ad3      	subs	r3, r2, r3
 8016f52:	b29a      	uxth	r2, r3
 8016f54:	683b      	ldr	r3, [r7, #0]
 8016f56:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8016f58:	68fb      	ldr	r3, [r7, #12]
 8016f5a:	2220      	movs	r2, #32
 8016f5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8016f60:	2300      	movs	r3, #0
 8016f62:	e000      	b.n	8016f66 <HAL_UARTEx_ReceiveToIdle+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 8016f64:	2302      	movs	r3, #2
  }
}
 8016f66:	4618      	mov	r0, r3
 8016f68:	3720      	adds	r7, #32
 8016f6a:	46bd      	mov	sp, r7
 8016f6c:	bd80      	pop	{r7, pc}

08016f6e <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8016f6e:	b580      	push	{r7, lr}
 8016f70:	b08c      	sub	sp, #48	@ 0x30
 8016f72:	af00      	add	r7, sp, #0
 8016f74:	60f8      	str	r0, [r7, #12]
 8016f76:	60b9      	str	r1, [r7, #8]
 8016f78:	4613      	mov	r3, r2
 8016f7a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8016f7c:	68fb      	ldr	r3, [r7, #12]
 8016f7e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016f82:	b2db      	uxtb	r3, r3
 8016f84:	2b20      	cmp	r3, #32
 8016f86:	d14a      	bne.n	801701e <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8016f88:	68bb      	ldr	r3, [r7, #8]
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	d002      	beq.n	8016f94 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8016f8e:	88fb      	ldrh	r3, [r7, #6]
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	d101      	bne.n	8016f98 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8016f94:	2301      	movs	r3, #1
 8016f96:	e043      	b.n	8017020 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8016f98:	68fb      	ldr	r3, [r7, #12]
 8016f9a:	2201      	movs	r2, #1
 8016f9c:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016f9e:	68fb      	ldr	r3, [r7, #12]
 8016fa0:	2200      	movs	r2, #0
 8016fa2:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8016fa4:	88fb      	ldrh	r3, [r7, #6]
 8016fa6:	461a      	mov	r2, r3
 8016fa8:	68b9      	ldr	r1, [r7, #8]
 8016faa:	68f8      	ldr	r0, [r7, #12]
 8016fac:	f001 fac2 	bl	8018534 <UART_Start_Receive_IT>
 8016fb0:	4603      	mov	r3, r0
 8016fb2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8016fb6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d12c      	bne.n	8017018 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016fbe:	68fb      	ldr	r3, [r7, #12]
 8016fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016fc2:	2b01      	cmp	r3, #1
 8016fc4:	d125      	bne.n	8017012 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8016fc6:	2300      	movs	r3, #0
 8016fc8:	613b      	str	r3, [r7, #16]
 8016fca:	68fb      	ldr	r3, [r7, #12]
 8016fcc:	681b      	ldr	r3, [r3, #0]
 8016fce:	681b      	ldr	r3, [r3, #0]
 8016fd0:	613b      	str	r3, [r7, #16]
 8016fd2:	68fb      	ldr	r3, [r7, #12]
 8016fd4:	681b      	ldr	r3, [r3, #0]
 8016fd6:	685b      	ldr	r3, [r3, #4]
 8016fd8:	613b      	str	r3, [r7, #16]
 8016fda:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016fdc:	68fb      	ldr	r3, [r7, #12]
 8016fde:	681b      	ldr	r3, [r3, #0]
 8016fe0:	330c      	adds	r3, #12
 8016fe2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016fe4:	69bb      	ldr	r3, [r7, #24]
 8016fe6:	e853 3f00 	ldrex	r3, [r3]
 8016fea:	617b      	str	r3, [r7, #20]
   return(result);
 8016fec:	697b      	ldr	r3, [r7, #20]
 8016fee:	f043 0310 	orr.w	r3, r3, #16
 8016ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016ff4:	68fb      	ldr	r3, [r7, #12]
 8016ff6:	681b      	ldr	r3, [r3, #0]
 8016ff8:	330c      	adds	r3, #12
 8016ffa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016ffc:	627a      	str	r2, [r7, #36]	@ 0x24
 8016ffe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017000:	6a39      	ldr	r1, [r7, #32]
 8017002:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017004:	e841 2300 	strex	r3, r2, [r1]
 8017008:	61fb      	str	r3, [r7, #28]
   return(result);
 801700a:	69fb      	ldr	r3, [r7, #28]
 801700c:	2b00      	cmp	r3, #0
 801700e:	d1e5      	bne.n	8016fdc <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8017010:	e002      	b.n	8017018 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8017012:	2301      	movs	r3, #1
 8017014:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8017018:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801701c:	e000      	b.n	8017020 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 801701e:	2302      	movs	r3, #2
  }
}
 8017020:	4618      	mov	r0, r3
 8017022:	3730      	adds	r7, #48	@ 0x30
 8017024:	46bd      	mov	sp, r7
 8017026:	bd80      	pop	{r7, pc}

08017028 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017028:	b580      	push	{r7, lr}
 801702a:	b08c      	sub	sp, #48	@ 0x30
 801702c:	af00      	add	r7, sp, #0
 801702e:	60f8      	str	r0, [r7, #12]
 8017030:	60b9      	str	r1, [r7, #8]
 8017032:	4613      	mov	r3, r2
 8017034:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8017036:	68fb      	ldr	r3, [r7, #12]
 8017038:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801703c:	b2db      	uxtb	r3, r3
 801703e:	2b20      	cmp	r3, #32
 8017040:	d14a      	bne.n	80170d8 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8017042:	68bb      	ldr	r3, [r7, #8]
 8017044:	2b00      	cmp	r3, #0
 8017046:	d002      	beq.n	801704e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8017048:	88fb      	ldrh	r3, [r7, #6]
 801704a:	2b00      	cmp	r3, #0
 801704c:	d101      	bne.n	8017052 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 801704e:	2301      	movs	r3, #1
 8017050:	e043      	b.n	80170da <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8017052:	68fb      	ldr	r3, [r7, #12]
 8017054:	2201      	movs	r2, #1
 8017056:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017058:	68fb      	ldr	r3, [r7, #12]
 801705a:	2200      	movs	r2, #0
 801705c:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 801705e:	88fb      	ldrh	r3, [r7, #6]
 8017060:	461a      	mov	r2, r3
 8017062:	68b9      	ldr	r1, [r7, #8]
 8017064:	68f8      	ldr	r0, [r7, #12]
 8017066:	f001 fa9f 	bl	80185a8 <UART_Start_Receive_DMA>
 801706a:	4603      	mov	r3, r0
 801706c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8017070:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8017074:	2b00      	cmp	r3, #0
 8017076:	d12c      	bne.n	80170d2 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017078:	68fb      	ldr	r3, [r7, #12]
 801707a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801707c:	2b01      	cmp	r3, #1
 801707e:	d125      	bne.n	80170cc <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8017080:	2300      	movs	r3, #0
 8017082:	613b      	str	r3, [r7, #16]
 8017084:	68fb      	ldr	r3, [r7, #12]
 8017086:	681b      	ldr	r3, [r3, #0]
 8017088:	681b      	ldr	r3, [r3, #0]
 801708a:	613b      	str	r3, [r7, #16]
 801708c:	68fb      	ldr	r3, [r7, #12]
 801708e:	681b      	ldr	r3, [r3, #0]
 8017090:	685b      	ldr	r3, [r3, #4]
 8017092:	613b      	str	r3, [r7, #16]
 8017094:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017096:	68fb      	ldr	r3, [r7, #12]
 8017098:	681b      	ldr	r3, [r3, #0]
 801709a:	330c      	adds	r3, #12
 801709c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801709e:	69bb      	ldr	r3, [r7, #24]
 80170a0:	e853 3f00 	ldrex	r3, [r3]
 80170a4:	617b      	str	r3, [r7, #20]
   return(result);
 80170a6:	697b      	ldr	r3, [r7, #20]
 80170a8:	f043 0310 	orr.w	r3, r3, #16
 80170ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80170ae:	68fb      	ldr	r3, [r7, #12]
 80170b0:	681b      	ldr	r3, [r3, #0]
 80170b2:	330c      	adds	r3, #12
 80170b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80170b6:	627a      	str	r2, [r7, #36]	@ 0x24
 80170b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80170ba:	6a39      	ldr	r1, [r7, #32]
 80170bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80170be:	e841 2300 	strex	r3, r2, [r1]
 80170c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80170c4:	69fb      	ldr	r3, [r7, #28]
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	d1e5      	bne.n	8017096 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 80170ca:	e002      	b.n	80170d2 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80170cc:	2301      	movs	r3, #1
 80170ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80170d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80170d6:	e000      	b.n	80170da <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80170d8:	2302      	movs	r3, #2
  }
}
 80170da:	4618      	mov	r0, r3
 80170dc:	3730      	adds	r7, #48	@ 0x30
 80170de:	46bd      	mov	sp, r7
 80170e0:	bd80      	pop	{r7, pc}

080170e2 <HAL_UARTEx_GetRxEventType>:
  *        When DMA is configured in Circular Mode, HT, TC or IDLE events don't stop Reception process;
  * @param  huart UART handle.
  * @retval Rx Event Type (returned value will be a value of @ref UART_RxEvent_Type_Values)
  */
HAL_UART_RxEventTypeTypeDef HAL_UARTEx_GetRxEventType(UART_HandleTypeDef *huart)
{
 80170e2:	b480      	push	{r7}
 80170e4:	b083      	sub	sp, #12
 80170e6:	af00      	add	r7, sp, #0
 80170e8:	6078      	str	r0, [r7, #4]
  /* Return Rx Event type value, as stored in UART handle */
  return(huart->RxEventType);
 80170ea:	687b      	ldr	r3, [r7, #4]
 80170ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
}
 80170ee:	4618      	mov	r0, r3
 80170f0:	370c      	adds	r7, #12
 80170f2:	46bd      	mov	sp, r7
 80170f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170f8:	4770      	bx	lr

080170fa <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 80170fa:	b580      	push	{r7, lr}
 80170fc:	b0a0      	sub	sp, #128	@ 0x80
 80170fe:	af00      	add	r7, sp, #0
 8017100:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8017102:	687b      	ldr	r3, [r7, #4]
 8017104:	681b      	ldr	r3, [r3, #0]
 8017106:	330c      	adds	r3, #12
 8017108:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801710a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801710c:	e853 3f00 	ldrex	r3, [r3]
 8017110:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8017112:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017114:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 8017118:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	681b      	ldr	r3, [r3, #0]
 801711e:	330c      	adds	r3, #12
 8017120:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8017122:	66ba      	str	r2, [r7, #104]	@ 0x68
 8017124:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017126:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8017128:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801712a:	e841 2300 	strex	r3, r2, [r1]
 801712e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8017130:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8017132:	2b00      	cmp	r3, #0
 8017134:	d1e5      	bne.n	8017102 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017136:	687b      	ldr	r3, [r7, #4]
 8017138:	681b      	ldr	r3, [r3, #0]
 801713a:	3314      	adds	r3, #20
 801713c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801713e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017140:	e853 3f00 	ldrex	r3, [r3]
 8017144:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8017146:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017148:	f023 0301 	bic.w	r3, r3, #1
 801714c:	67bb      	str	r3, [r7, #120]	@ 0x78
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	681b      	ldr	r3, [r3, #0]
 8017152:	3314      	adds	r3, #20
 8017154:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8017156:	657a      	str	r2, [r7, #84]	@ 0x54
 8017158:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801715a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801715c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801715e:	e841 2300 	strex	r3, r2, [r1]
 8017162:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8017164:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017166:	2b00      	cmp	r3, #0
 8017168:	d1e5      	bne.n	8017136 <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801716e:	2b01      	cmp	r3, #1
 8017170:	d119      	bne.n	80171a6 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8017172:	687b      	ldr	r3, [r7, #4]
 8017174:	681b      	ldr	r3, [r3, #0]
 8017176:	330c      	adds	r3, #12
 8017178:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801717a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801717c:	e853 3f00 	ldrex	r3, [r3]
 8017180:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8017182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017184:	f023 0310 	bic.w	r3, r3, #16
 8017188:	677b      	str	r3, [r7, #116]	@ 0x74
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	681b      	ldr	r3, [r3, #0]
 801718e:	330c      	adds	r3, #12
 8017190:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8017192:	643a      	str	r2, [r7, #64]	@ 0x40
 8017194:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017196:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8017198:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801719a:	e841 2300 	strex	r3, r2, [r1]
 801719e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80171a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	d1e5      	bne.n	8017172 <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	681b      	ldr	r3, [r3, #0]
 80171aa:	695b      	ldr	r3, [r3, #20]
 80171ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80171b0:	2b80      	cmp	r3, #128	@ 0x80
 80171b2:	d136      	bne.n	8017222 <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80171b4:	687b      	ldr	r3, [r7, #4]
 80171b6:	681b      	ldr	r3, [r3, #0]
 80171b8:	3314      	adds	r3, #20
 80171ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80171bc:	6a3b      	ldr	r3, [r7, #32]
 80171be:	e853 3f00 	ldrex	r3, [r3]
 80171c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80171c4:	69fb      	ldr	r3, [r7, #28]
 80171c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80171ca:	673b      	str	r3, [r7, #112]	@ 0x70
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	681b      	ldr	r3, [r3, #0]
 80171d0:	3314      	adds	r3, #20
 80171d2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80171d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80171d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80171d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80171da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80171dc:	e841 2300 	strex	r3, r2, [r1]
 80171e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80171e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171e4:	2b00      	cmp	r3, #0
 80171e6:	d1e5      	bne.n	80171b4 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	d018      	beq.n	8017222 <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 80171f0:	687b      	ldr	r3, [r7, #4]
 80171f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80171f4:	2200      	movs	r2, #0
 80171f6:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80171f8:	687b      	ldr	r3, [r7, #4]
 80171fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80171fc:	4618      	mov	r0, r3
 80171fe:	f7ef f9cc 	bl	800659a <HAL_DMA_Abort>
 8017202:	4603      	mov	r3, r0
 8017204:	2b00      	cmp	r3, #0
 8017206:	d00c      	beq.n	8017222 <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801720c:	4618      	mov	r0, r3
 801720e:	f7ef fd8a 	bl	8006d26 <HAL_DMA_GetError>
 8017212:	4603      	mov	r3, r0
 8017214:	2b20      	cmp	r3, #32
 8017216:	d104      	bne.n	8017222 <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	2210      	movs	r2, #16
 801721c:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 801721e:	2303      	movs	r3, #3
 8017220:	e052      	b.n	80172c8 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	681b      	ldr	r3, [r3, #0]
 8017226:	695b      	ldr	r3, [r3, #20]
 8017228:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801722c:	2b40      	cmp	r3, #64	@ 0x40
 801722e:	d136      	bne.n	801729e <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	681b      	ldr	r3, [r3, #0]
 8017234:	3314      	adds	r3, #20
 8017236:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017238:	68fb      	ldr	r3, [r7, #12]
 801723a:	e853 3f00 	ldrex	r3, [r3]
 801723e:	60bb      	str	r3, [r7, #8]
   return(result);
 8017240:	68bb      	ldr	r3, [r7, #8]
 8017242:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8017246:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	681b      	ldr	r3, [r3, #0]
 801724c:	3314      	adds	r3, #20
 801724e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8017250:	61ba      	str	r2, [r7, #24]
 8017252:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017254:	6979      	ldr	r1, [r7, #20]
 8017256:	69ba      	ldr	r2, [r7, #24]
 8017258:	e841 2300 	strex	r3, r2, [r1]
 801725c:	613b      	str	r3, [r7, #16]
   return(result);
 801725e:	693b      	ldr	r3, [r7, #16]
 8017260:	2b00      	cmp	r3, #0
 8017262:	d1e5      	bne.n	8017230 <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017268:	2b00      	cmp	r3, #0
 801726a:	d018      	beq.n	801729e <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017270:	2200      	movs	r2, #0
 8017272:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017278:	4618      	mov	r0, r3
 801727a:	f7ef f98e 	bl	800659a <HAL_DMA_Abort>
 801727e:	4603      	mov	r3, r0
 8017280:	2b00      	cmp	r3, #0
 8017282:	d00c      	beq.n	801729e <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017288:	4618      	mov	r0, r3
 801728a:	f7ef fd4c 	bl	8006d26 <HAL_DMA_GetError>
 801728e:	4603      	mov	r3, r0
 8017290:	2b20      	cmp	r3, #32
 8017292:	d104      	bne.n	801729e <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	2210      	movs	r2, #16
 8017298:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 801729a:	2303      	movs	r3, #3
 801729c:	e014      	b.n	80172c8 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	2200      	movs	r2, #0
 80172a2:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 80172a4:	687b      	ldr	r3, [r7, #4]
 80172a6:	2200      	movs	r2, #0
 80172a8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	2200      	movs	r2, #0
 80172ae:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	2220      	movs	r2, #32
 80172b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->gState = HAL_UART_STATE_READY;
 80172b8:	687b      	ldr	r3, [r7, #4]
 80172ba:	2220      	movs	r2, #32
 80172bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	2200      	movs	r2, #0
 80172c4:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 80172c6:	2300      	movs	r3, #0
}
 80172c8:	4618      	mov	r0, r3
 80172ca:	3780      	adds	r7, #128	@ 0x80
 80172cc:	46bd      	mov	sp, r7
 80172ce:	bd80      	pop	{r7, pc}

080172d0 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 80172d0:	b580      	push	{r7, lr}
 80172d2:	b08e      	sub	sp, #56	@ 0x38
 80172d4:	af00      	add	r7, sp, #0
 80172d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	681b      	ldr	r3, [r3, #0]
 80172dc:	330c      	adds	r3, #12
 80172de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80172e0:	6a3b      	ldr	r3, [r7, #32]
 80172e2:	e853 3f00 	ldrex	r3, [r3]
 80172e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80172e8:	69fb      	ldr	r3, [r7, #28]
 80172ea:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80172ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	681b      	ldr	r3, [r3, #0]
 80172f4:	330c      	adds	r3, #12
 80172f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80172f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80172fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80172fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80172fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017300:	e841 2300 	strex	r3, r2, [r1]
 8017304:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8017306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017308:	2b00      	cmp	r3, #0
 801730a:	d1e5      	bne.n	80172d8 <HAL_UART_AbortTransmit+0x8>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 801730c:	687b      	ldr	r3, [r7, #4]
 801730e:	681b      	ldr	r3, [r3, #0]
 8017310:	695b      	ldr	r3, [r3, #20]
 8017312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8017316:	2b80      	cmp	r3, #128	@ 0x80
 8017318:	d136      	bne.n	8017388 <HAL_UART_AbortTransmit+0xb8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	681b      	ldr	r3, [r3, #0]
 801731e:	3314      	adds	r3, #20
 8017320:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017322:	68fb      	ldr	r3, [r7, #12]
 8017324:	e853 3f00 	ldrex	r3, [r3]
 8017328:	60bb      	str	r3, [r7, #8]
   return(result);
 801732a:	68bb      	ldr	r3, [r7, #8]
 801732c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8017330:	633b      	str	r3, [r7, #48]	@ 0x30
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	681b      	ldr	r3, [r3, #0]
 8017336:	3314      	adds	r3, #20
 8017338:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801733a:	61ba      	str	r2, [r7, #24]
 801733c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801733e:	6979      	ldr	r1, [r7, #20]
 8017340:	69ba      	ldr	r2, [r7, #24]
 8017342:	e841 2300 	strex	r3, r2, [r1]
 8017346:	613b      	str	r3, [r7, #16]
   return(result);
 8017348:	693b      	ldr	r3, [r7, #16]
 801734a:	2b00      	cmp	r3, #0
 801734c:	d1e5      	bne.n	801731a <HAL_UART_AbortTransmit+0x4a>

    /* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017352:	2b00      	cmp	r3, #0
 8017354:	d018      	beq.n	8017388 <HAL_UART_AbortTransmit+0xb8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801735a:	2200      	movs	r2, #0
 801735c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017362:	4618      	mov	r0, r3
 8017364:	f7ef f919 	bl	800659a <HAL_DMA_Abort>
 8017368:	4603      	mov	r3, r0
 801736a:	2b00      	cmp	r3, #0
 801736c:	d00c      	beq.n	8017388 <HAL_UART_AbortTransmit+0xb8>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 801736e:	687b      	ldr	r3, [r7, #4]
 8017370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017372:	4618      	mov	r0, r3
 8017374:	f7ef fcd7 	bl	8006d26 <HAL_DMA_GetError>
 8017378:	4603      	mov	r3, r0
 801737a:	2b20      	cmp	r3, #32
 801737c:	d104      	bne.n	8017388 <HAL_UART_AbortTransmit+0xb8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	2210      	movs	r2, #16
 8017382:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 8017384:	2303      	movs	r3, #3
 8017386:	e007      	b.n	8017398 <HAL_UART_AbortTransmit+0xc8>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0x00U;
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	2200      	movs	r2, #0
 801738c:	84da      	strh	r2, [r3, #38]	@ 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801738e:	687b      	ldr	r3, [r7, #4]
 8017390:	2220      	movs	r2, #32
 8017392:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8017396:	2300      	movs	r3, #0
}
 8017398:	4618      	mov	r0, r3
 801739a:	3738      	adds	r7, #56	@ 0x38
 801739c:	46bd      	mov	sp, r7
 801739e:	bd80      	pop	{r7, pc}

080173a0 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80173a0:	b580      	push	{r7, lr}
 80173a2:	b09a      	sub	sp, #104	@ 0x68
 80173a4:	af00      	add	r7, sp, #0
 80173a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80173a8:	687b      	ldr	r3, [r7, #4]
 80173aa:	681b      	ldr	r3, [r3, #0]
 80173ac:	330c      	adds	r3, #12
 80173ae:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80173b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80173b2:	e853 3f00 	ldrex	r3, [r3]
 80173b6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80173b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80173ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80173be:	667b      	str	r3, [r7, #100]	@ 0x64
 80173c0:	687b      	ldr	r3, [r7, #4]
 80173c2:	681b      	ldr	r3, [r3, #0]
 80173c4:	330c      	adds	r3, #12
 80173c6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80173c8:	657a      	str	r2, [r7, #84]	@ 0x54
 80173ca:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80173cc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80173ce:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80173d0:	e841 2300 	strex	r3, r2, [r1]
 80173d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80173d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80173d8:	2b00      	cmp	r3, #0
 80173da:	d1e5      	bne.n	80173a8 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	681b      	ldr	r3, [r3, #0]
 80173e0:	3314      	adds	r3, #20
 80173e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80173e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80173e6:	e853 3f00 	ldrex	r3, [r3]
 80173ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80173ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80173ee:	f023 0301 	bic.w	r3, r3, #1
 80173f2:	663b      	str	r3, [r7, #96]	@ 0x60
 80173f4:	687b      	ldr	r3, [r7, #4]
 80173f6:	681b      	ldr	r3, [r3, #0]
 80173f8:	3314      	adds	r3, #20
 80173fa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80173fc:	643a      	str	r2, [r7, #64]	@ 0x40
 80173fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017400:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8017402:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8017404:	e841 2300 	strex	r3, r2, [r1]
 8017408:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801740a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801740c:	2b00      	cmp	r3, #0
 801740e:	d1e5      	bne.n	80173dc <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017410:	687b      	ldr	r3, [r7, #4]
 8017412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017414:	2b01      	cmp	r3, #1
 8017416:	d119      	bne.n	801744c <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	681b      	ldr	r3, [r3, #0]
 801741c:	330c      	adds	r3, #12
 801741e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017420:	6a3b      	ldr	r3, [r7, #32]
 8017422:	e853 3f00 	ldrex	r3, [r3]
 8017426:	61fb      	str	r3, [r7, #28]
   return(result);
 8017428:	69fb      	ldr	r3, [r7, #28]
 801742a:	f023 0310 	bic.w	r3, r3, #16
 801742e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	681b      	ldr	r3, [r3, #0]
 8017434:	330c      	adds	r3, #12
 8017436:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8017438:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801743a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801743c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801743e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017440:	e841 2300 	strex	r3, r2, [r1]
 8017444:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8017446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017448:	2b00      	cmp	r3, #0
 801744a:	d1e5      	bne.n	8017418 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801744c:	687b      	ldr	r3, [r7, #4]
 801744e:	681b      	ldr	r3, [r3, #0]
 8017450:	695b      	ldr	r3, [r3, #20]
 8017452:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017456:	2b40      	cmp	r3, #64	@ 0x40
 8017458:	d136      	bne.n	80174c8 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801745a:	687b      	ldr	r3, [r7, #4]
 801745c:	681b      	ldr	r3, [r3, #0]
 801745e:	3314      	adds	r3, #20
 8017460:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017462:	68fb      	ldr	r3, [r7, #12]
 8017464:	e853 3f00 	ldrex	r3, [r3]
 8017468:	60bb      	str	r3, [r7, #8]
   return(result);
 801746a:	68bb      	ldr	r3, [r7, #8]
 801746c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8017470:	65bb      	str	r3, [r7, #88]	@ 0x58
 8017472:	687b      	ldr	r3, [r7, #4]
 8017474:	681b      	ldr	r3, [r3, #0]
 8017476:	3314      	adds	r3, #20
 8017478:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801747a:	61ba      	str	r2, [r7, #24]
 801747c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801747e:	6979      	ldr	r1, [r7, #20]
 8017480:	69ba      	ldr	r2, [r7, #24]
 8017482:	e841 2300 	strex	r3, r2, [r1]
 8017486:	613b      	str	r3, [r7, #16]
   return(result);
 8017488:	693b      	ldr	r3, [r7, #16]
 801748a:	2b00      	cmp	r3, #0
 801748c:	d1e5      	bne.n	801745a <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017492:	2b00      	cmp	r3, #0
 8017494:	d018      	beq.n	80174c8 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801749a:	2200      	movs	r2, #0
 801749c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80174a2:	4618      	mov	r0, r3
 80174a4:	f7ef f879 	bl	800659a <HAL_DMA_Abort>
 80174a8:	4603      	mov	r3, r0
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	d00c      	beq.n	80174c8 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80174ae:	687b      	ldr	r3, [r7, #4]
 80174b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80174b2:	4618      	mov	r0, r3
 80174b4:	f7ef fc37 	bl	8006d26 <HAL_DMA_GetError>
 80174b8:	4603      	mov	r3, r0
 80174ba:	2b20      	cmp	r3, #32
 80174bc:	d104      	bne.n	80174c8 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80174be:	687b      	ldr	r3, [r7, #4]
 80174c0:	2210      	movs	r2, #16
 80174c2:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 80174c4:	2303      	movs	r3, #3
 80174c6:	e00a      	b.n	80174de <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 80174c8:	687b      	ldr	r3, [r7, #4]
 80174ca:	2200      	movs	r2, #0
 80174cc:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	2220      	movs	r2, #32
 80174d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	2200      	movs	r2, #0
 80174da:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 80174dc:	2300      	movs	r3, #0
}
 80174de:	4618      	mov	r0, r3
 80174e0:	3768      	adds	r7, #104	@ 0x68
 80174e2:	46bd      	mov	sp, r7
 80174e4:	bd80      	pop	{r7, pc}

080174e6 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 80174e6:	b580      	push	{r7, lr}
 80174e8:	b0a2      	sub	sp, #136	@ 0x88
 80174ea:	af00      	add	r7, sp, #0
 80174ec:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 80174ee:	2301      	movs	r3, #1
 80174f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	681b      	ldr	r3, [r3, #0]
 80174f8:	330c      	adds	r3, #12
 80174fa:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80174fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80174fe:	e853 3f00 	ldrex	r3, [r3]
 8017502:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8017504:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017506:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 801750a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	681b      	ldr	r3, [r3, #0]
 8017512:	330c      	adds	r3, #12
 8017514:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8017518:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801751a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801751c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801751e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8017520:	e841 2300 	strex	r3, r2, [r1]
 8017524:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8017526:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8017528:	2b00      	cmp	r3, #0
 801752a:	d1e3      	bne.n	80174f4 <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	681b      	ldr	r3, [r3, #0]
 8017530:	3314      	adds	r3, #20
 8017532:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017534:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017536:	e853 3f00 	ldrex	r3, [r3]
 801753a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801753c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801753e:	f023 0301 	bic.w	r3, r3, #1
 8017542:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	681b      	ldr	r3, [r3, #0]
 8017548:	3314      	adds	r3, #20
 801754a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801754c:	65ba      	str	r2, [r7, #88]	@ 0x58
 801754e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017550:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8017552:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8017554:	e841 2300 	strex	r3, r2, [r1]
 8017558:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801755a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801755c:	2b00      	cmp	r3, #0
 801755e:	d1e5      	bne.n	801752c <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017564:	2b01      	cmp	r3, #1
 8017566:	d119      	bne.n	801759c <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	681b      	ldr	r3, [r3, #0]
 801756c:	330c      	adds	r3, #12
 801756e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017572:	e853 3f00 	ldrex	r3, [r3]
 8017576:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8017578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801757a:	f023 0310 	bic.w	r3, r3, #16
 801757e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	681b      	ldr	r3, [r3, #0]
 8017584:	330c      	adds	r3, #12
 8017586:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8017588:	647a      	str	r2, [r7, #68]	@ 0x44
 801758a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801758c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801758e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8017590:	e841 2300 	strex	r3, r2, [r1]
 8017594:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8017596:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017598:	2b00      	cmp	r3, #0
 801759a:	d1e5      	bne.n	8017568 <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80175a0:	2b00      	cmp	r3, #0
 80175a2:	d00f      	beq.n	80175c4 <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80175a4:	687b      	ldr	r3, [r7, #4]
 80175a6:	681b      	ldr	r3, [r3, #0]
 80175a8:	695b      	ldr	r3, [r3, #20]
 80175aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80175ae:	2b80      	cmp	r3, #128	@ 0x80
 80175b0:	d104      	bne.n	80175bc <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 80175b2:	687b      	ldr	r3, [r7, #4]
 80175b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80175b6:	4a54      	ldr	r2, [pc, #336]	@ (8017708 <HAL_UART_Abort_IT+0x222>)
 80175b8:	651a      	str	r2, [r3, #80]	@ 0x50
 80175ba:	e003      	b.n	80175c4 <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 80175bc:	687b      	ldr	r3, [r7, #4]
 80175be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80175c0:	2200      	movs	r2, #0
 80175c2:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	d00f      	beq.n	80175ec <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80175cc:	687b      	ldr	r3, [r7, #4]
 80175ce:	681b      	ldr	r3, [r3, #0]
 80175d0:	695b      	ldr	r3, [r3, #20]
 80175d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80175d6:	2b40      	cmp	r3, #64	@ 0x40
 80175d8:	d104      	bne.n	80175e4 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 80175da:	687b      	ldr	r3, [r7, #4]
 80175dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80175de:	4a4b      	ldr	r2, [pc, #300]	@ (801770c <HAL_UART_Abort_IT+0x226>)
 80175e0:	651a      	str	r2, [r3, #80]	@ 0x50
 80175e2:	e003      	b.n	80175ec <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80175e8:	2200      	movs	r2, #0
 80175ea:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	681b      	ldr	r3, [r3, #0]
 80175f0:	695b      	ldr	r3, [r3, #20]
 80175f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80175f6:	2b80      	cmp	r3, #128	@ 0x80
 80175f8:	d12d      	bne.n	8017656 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80175fa:	687b      	ldr	r3, [r7, #4]
 80175fc:	681b      	ldr	r3, [r3, #0]
 80175fe:	3314      	adds	r3, #20
 8017600:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017604:	e853 3f00 	ldrex	r3, [r3]
 8017608:	623b      	str	r3, [r7, #32]
   return(result);
 801760a:	6a3b      	ldr	r3, [r7, #32]
 801760c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8017610:	677b      	str	r3, [r7, #116]	@ 0x74
 8017612:	687b      	ldr	r3, [r7, #4]
 8017614:	681b      	ldr	r3, [r3, #0]
 8017616:	3314      	adds	r3, #20
 8017618:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 801761a:	633a      	str	r2, [r7, #48]	@ 0x30
 801761c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801761e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8017620:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017622:	e841 2300 	strex	r3, r2, [r1]
 8017626:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8017628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801762a:	2b00      	cmp	r3, #0
 801762c:	d1e5      	bne.n	80175fa <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 801762e:	687b      	ldr	r3, [r7, #4]
 8017630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017632:	2b00      	cmp	r3, #0
 8017634:	d00f      	beq.n	8017656 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801763a:	4618      	mov	r0, r3
 801763c:	f7ef f81d 	bl	800667a <HAL_DMA_Abort_IT>
 8017640:	4603      	mov	r3, r0
 8017642:	2b00      	cmp	r3, #0
 8017644:	d004      	beq.n	8017650 <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801764a:	2200      	movs	r2, #0
 801764c:	651a      	str	r2, [r3, #80]	@ 0x50
 801764e:	e002      	b.n	8017656 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 8017650:	2300      	movs	r3, #0
 8017652:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017656:	687b      	ldr	r3, [r7, #4]
 8017658:	681b      	ldr	r3, [r3, #0]
 801765a:	695b      	ldr	r3, [r3, #20]
 801765c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017660:	2b40      	cmp	r3, #64	@ 0x40
 8017662:	d130      	bne.n	80176c6 <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	681b      	ldr	r3, [r3, #0]
 8017668:	3314      	adds	r3, #20
 801766a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801766c:	693b      	ldr	r3, [r7, #16]
 801766e:	e853 3f00 	ldrex	r3, [r3]
 8017672:	60fb      	str	r3, [r7, #12]
   return(result);
 8017674:	68fb      	ldr	r3, [r7, #12]
 8017676:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801767a:	673b      	str	r3, [r7, #112]	@ 0x70
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	681b      	ldr	r3, [r3, #0]
 8017680:	3314      	adds	r3, #20
 8017682:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8017684:	61fa      	str	r2, [r7, #28]
 8017686:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017688:	69b9      	ldr	r1, [r7, #24]
 801768a:	69fa      	ldr	r2, [r7, #28]
 801768c:	e841 2300 	strex	r3, r2, [r1]
 8017690:	617b      	str	r3, [r7, #20]
   return(result);
 8017692:	697b      	ldr	r3, [r7, #20]
 8017694:	2b00      	cmp	r3, #0
 8017696:	d1e5      	bne.n	8017664 <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8017698:	687b      	ldr	r3, [r7, #4]
 801769a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801769c:	2b00      	cmp	r3, #0
 801769e:	d012      	beq.n	80176c6 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80176a0:	687b      	ldr	r3, [r7, #4]
 80176a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80176a4:	4618      	mov	r0, r3
 80176a6:	f7ee ffe8 	bl	800667a <HAL_DMA_Abort_IT>
 80176aa:	4603      	mov	r3, r0
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	d007      	beq.n	80176c0 <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 80176b0:	687b      	ldr	r3, [r7, #4]
 80176b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80176b4:	2200      	movs	r2, #0
 80176b6:	651a      	str	r2, [r3, #80]	@ 0x50
        AbortCplt = 0x01U;
 80176b8:	2301      	movs	r3, #1
 80176ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80176be:	e002      	b.n	80176c6 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 80176c0:	2300      	movs	r3, #0
 80176c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 80176c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80176ca:	2b01      	cmp	r3, #1
 80176cc:	d116      	bne.n	80176fc <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 80176ce:	687b      	ldr	r3, [r7, #4]
 80176d0:	2200      	movs	r2, #0
 80176d2:	84da      	strh	r2, [r3, #38]	@ 0x26
    huart->RxXferCount = 0x00U;
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	2200      	movs	r2, #0
 80176d8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80176da:	687b      	ldr	r3, [r7, #4]
 80176dc:	2200      	movs	r2, #0
 80176de:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	2220      	movs	r2, #32
 80176e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    huart->RxState = HAL_UART_STATE_READY;
 80176e8:	687b      	ldr	r3, [r7, #4]
 80176ea:	2220      	movs	r2, #32
 80176ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	2200      	movs	r2, #0
 80176f4:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 80176f6:	6878      	ldr	r0, [r7, #4]
 80176f8:	f000 fbf4 	bl	8017ee4 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80176fc:	2300      	movs	r3, #0
}
 80176fe:	4618      	mov	r0, r3
 8017700:	3788      	adds	r7, #136	@ 0x88
 8017702:	46bd      	mov	sp, r7
 8017704:	bd80      	pop	{r7, pc}
 8017706:	bf00      	nop
 8017708:	0801881b 	.word	0x0801881b
 801770c:	0801887b 	.word	0x0801887b

08017710 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 8017710:	b580      	push	{r7, lr}
 8017712:	b08e      	sub	sp, #56	@ 0x38
 8017714:	af00      	add	r7, sp, #0
 8017716:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8017718:	687b      	ldr	r3, [r7, #4]
 801771a:	681b      	ldr	r3, [r3, #0]
 801771c:	330c      	adds	r3, #12
 801771e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017720:	6a3b      	ldr	r3, [r7, #32]
 8017722:	e853 3f00 	ldrex	r3, [r3]
 8017726:	61fb      	str	r3, [r7, #28]
   return(result);
 8017728:	69fb      	ldr	r3, [r7, #28]
 801772a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 801772e:	637b      	str	r3, [r7, #52]	@ 0x34
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	681b      	ldr	r3, [r3, #0]
 8017734:	330c      	adds	r3, #12
 8017736:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017738:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801773a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801773c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801773e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017740:	e841 2300 	strex	r3, r2, [r1]
 8017744:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8017746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017748:	2b00      	cmp	r3, #0
 801774a:	d1e5      	bne.n	8017718 <HAL_UART_AbortTransmit_IT+0x8>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	681b      	ldr	r3, [r3, #0]
 8017750:	695b      	ldr	r3, [r3, #20]
 8017752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8017756:	2b80      	cmp	r3, #128	@ 0x80
 8017758:	d13c      	bne.n	80177d4 <HAL_UART_AbortTransmit_IT+0xc4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801775a:	687b      	ldr	r3, [r7, #4]
 801775c:	681b      	ldr	r3, [r3, #0]
 801775e:	3314      	adds	r3, #20
 8017760:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017762:	68fb      	ldr	r3, [r7, #12]
 8017764:	e853 3f00 	ldrex	r3, [r3]
 8017768:	60bb      	str	r3, [r7, #8]
   return(result);
 801776a:	68bb      	ldr	r3, [r7, #8]
 801776c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8017770:	633b      	str	r3, [r7, #48]	@ 0x30
 8017772:	687b      	ldr	r3, [r7, #4]
 8017774:	681b      	ldr	r3, [r3, #0]
 8017776:	3314      	adds	r3, #20
 8017778:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801777a:	61ba      	str	r2, [r7, #24]
 801777c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801777e:	6979      	ldr	r1, [r7, #20]
 8017780:	69ba      	ldr	r2, [r7, #24]
 8017782:	e841 2300 	strex	r3, r2, [r1]
 8017786:	613b      	str	r3, [r7, #16]
   return(result);
 8017788:	693b      	ldr	r3, [r7, #16]
 801778a:	2b00      	cmp	r3, #0
 801778c:	d1e5      	bne.n	801775a <HAL_UART_AbortTransmit_IT+0x4a>

    /* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 801778e:	687b      	ldr	r3, [r7, #4]
 8017790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017792:	2b00      	cmp	r3, #0
 8017794:	d013      	beq.n	80177be <HAL_UART_AbortTransmit_IT+0xae>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 8017796:	687b      	ldr	r3, [r7, #4]
 8017798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801779a:	4a16      	ldr	r2, [pc, #88]	@ (80177f4 <HAL_UART_AbortTransmit_IT+0xe4>)
 801779c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80177a2:	4618      	mov	r0, r3
 80177a4:	f7ee ff69 	bl	800667a <HAL_DMA_Abort_IT>
 80177a8:	4603      	mov	r3, r0
 80177aa:	2b00      	cmp	r3, #0
 80177ac:	d01c      	beq.n	80177e8 <HAL_UART_AbortTransmit_IT+0xd8>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80177b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80177b4:	687a      	ldr	r2, [r7, #4]
 80177b6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80177b8:	4610      	mov	r0, r2
 80177ba:	4798      	blx	r3
 80177bc:	e014      	b.n	80177e8 <HAL_UART_AbortTransmit_IT+0xd8>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0x00U;
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	2200      	movs	r2, #0
 80177c2:	84da      	strh	r2, [r3, #38]	@ 0x26

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 80177c4:	687b      	ldr	r3, [r7, #4]
 80177c6:	2220      	movs	r2, #32
 80177c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 80177cc:	6878      	ldr	r0, [r7, #4]
 80177ce:	f000 fb93 	bl	8017ef8 <HAL_UART_AbortTransmitCpltCallback>
 80177d2:	e009      	b.n	80177e8 <HAL_UART_AbortTransmit_IT+0xd8>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0x00U;
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	2200      	movs	r2, #0
 80177d8:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80177da:	687b      	ldr	r3, [r7, #4]
 80177dc:	2220      	movs	r2, #32
 80177de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 80177e2:	6878      	ldr	r0, [r7, #4]
 80177e4:	f000 fb88 	bl	8017ef8 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80177e8:	2300      	movs	r3, #0
}
 80177ea:	4618      	mov	r0, r3
 80177ec:	3738      	adds	r7, #56	@ 0x38
 80177ee:	46bd      	mov	sp, r7
 80177f0:	bd80      	pop	{r7, pc}
 80177f2:	bf00      	nop
 80177f4:	080188db 	.word	0x080188db

080177f8 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 80177f8:	b580      	push	{r7, lr}
 80177fa:	b09a      	sub	sp, #104	@ 0x68
 80177fc:	af00      	add	r7, sp, #0
 80177fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	681b      	ldr	r3, [r3, #0]
 8017804:	330c      	adds	r3, #12
 8017806:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017808:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801780a:	e853 3f00 	ldrex	r3, [r3]
 801780e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8017810:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017812:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8017816:	667b      	str	r3, [r7, #100]	@ 0x64
 8017818:	687b      	ldr	r3, [r7, #4]
 801781a:	681b      	ldr	r3, [r3, #0]
 801781c:	330c      	adds	r3, #12
 801781e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8017820:	657a      	str	r2, [r7, #84]	@ 0x54
 8017822:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017824:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8017826:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8017828:	e841 2300 	strex	r3, r2, [r1]
 801782c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801782e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017830:	2b00      	cmp	r3, #0
 8017832:	d1e5      	bne.n	8017800 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017834:	687b      	ldr	r3, [r7, #4]
 8017836:	681b      	ldr	r3, [r3, #0]
 8017838:	3314      	adds	r3, #20
 801783a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801783c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801783e:	e853 3f00 	ldrex	r3, [r3]
 8017842:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8017844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017846:	f023 0301 	bic.w	r3, r3, #1
 801784a:	663b      	str	r3, [r7, #96]	@ 0x60
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	681b      	ldr	r3, [r3, #0]
 8017850:	3314      	adds	r3, #20
 8017852:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8017854:	643a      	str	r2, [r7, #64]	@ 0x40
 8017856:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017858:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801785a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801785c:	e841 2300 	strex	r3, r2, [r1]
 8017860:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8017862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017864:	2b00      	cmp	r3, #0
 8017866:	d1e5      	bne.n	8017834 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801786c:	2b01      	cmp	r3, #1
 801786e:	d119      	bne.n	80178a4 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	681b      	ldr	r3, [r3, #0]
 8017874:	330c      	adds	r3, #12
 8017876:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017878:	6a3b      	ldr	r3, [r7, #32]
 801787a:	e853 3f00 	ldrex	r3, [r3]
 801787e:	61fb      	str	r3, [r7, #28]
   return(result);
 8017880:	69fb      	ldr	r3, [r7, #28]
 8017882:	f023 0310 	bic.w	r3, r3, #16
 8017886:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	681b      	ldr	r3, [r3, #0]
 801788c:	330c      	adds	r3, #12
 801788e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8017890:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8017892:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017894:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8017896:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017898:	e841 2300 	strex	r3, r2, [r1]
 801789c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801789e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178a0:	2b00      	cmp	r3, #0
 80178a2:	d1e5      	bne.n	8017870 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80178a4:	687b      	ldr	r3, [r7, #4]
 80178a6:	681b      	ldr	r3, [r3, #0]
 80178a8:	695b      	ldr	r3, [r3, #20]
 80178aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80178ae:	2b40      	cmp	r3, #64	@ 0x40
 80178b0:	d13f      	bne.n	8017932 <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	681b      	ldr	r3, [r3, #0]
 80178b6:	3314      	adds	r3, #20
 80178b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80178ba:	68fb      	ldr	r3, [r7, #12]
 80178bc:	e853 3f00 	ldrex	r3, [r3]
 80178c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80178c2:	68bb      	ldr	r3, [r7, #8]
 80178c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80178c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80178ca:	687b      	ldr	r3, [r7, #4]
 80178cc:	681b      	ldr	r3, [r3, #0]
 80178ce:	3314      	adds	r3, #20
 80178d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80178d2:	61ba      	str	r2, [r7, #24]
 80178d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80178d6:	6979      	ldr	r1, [r7, #20]
 80178d8:	69ba      	ldr	r2, [r7, #24]
 80178da:	e841 2300 	strex	r3, r2, [r1]
 80178de:	613b      	str	r3, [r7, #16]
   return(result);
 80178e0:	693b      	ldr	r3, [r7, #16]
 80178e2:	2b00      	cmp	r3, #0
 80178e4:	d1e5      	bne.n	80178b2 <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80178ea:	2b00      	cmp	r3, #0
 80178ec:	d013      	beq.n	8017916 <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80178f2:	4a19      	ldr	r2, [pc, #100]	@ (8017958 <HAL_UART_AbortReceive_IT+0x160>)
 80178f4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80178f6:	687b      	ldr	r3, [r7, #4]
 80178f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80178fa:	4618      	mov	r0, r3
 80178fc:	f7ee febd 	bl	800667a <HAL_DMA_Abort_IT>
 8017900:	4603      	mov	r3, r0
 8017902:	2b00      	cmp	r3, #0
 8017904:	d022      	beq.n	801794c <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8017906:	687b      	ldr	r3, [r7, #4]
 8017908:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801790a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801790c:	687a      	ldr	r2, [r7, #4]
 801790e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8017910:	4610      	mov	r0, r2
 8017912:	4798      	blx	r3
 8017914:	e01a      	b.n	801794c <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	2200      	movs	r2, #0
 801791a:	85da      	strh	r2, [r3, #46]	@ 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	2220      	movs	r2, #32
 8017920:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017924:	687b      	ldr	r3, [r7, #4]
 8017926:	2200      	movs	r2, #0
 8017928:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 801792a:	6878      	ldr	r0, [r7, #4]
 801792c:	f000 faee 	bl	8017f0c <HAL_UART_AbortReceiveCpltCallback>
 8017930:	e00c      	b.n	801794c <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8017932:	687b      	ldr	r3, [r7, #4]
 8017934:	2200      	movs	r2, #0
 8017936:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	2220      	movs	r2, #32
 801793c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	2200      	movs	r2, #0
 8017944:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8017946:	6878      	ldr	r0, [r7, #4]
 8017948:	f000 fae0 	bl	8017f0c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 801794c:	2300      	movs	r3, #0
}
 801794e:	4618      	mov	r0, r3
 8017950:	3768      	adds	r7, #104	@ 0x68
 8017952:	46bd      	mov	sp, r7
 8017954:	bd80      	pop	{r7, pc}
 8017956:	bf00      	nop
 8017958:	08018905 	.word	0x08018905

0801795c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801795c:	b580      	push	{r7, lr}
 801795e:	b0ba      	sub	sp, #232	@ 0xe8
 8017960:	af00      	add	r7, sp, #0
 8017962:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8017964:	687b      	ldr	r3, [r7, #4]
 8017966:	681b      	ldr	r3, [r3, #0]
 8017968:	681b      	ldr	r3, [r3, #0]
 801796a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	681b      	ldr	r3, [r3, #0]
 8017972:	68db      	ldr	r3, [r3, #12]
 8017974:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	681b      	ldr	r3, [r3, #0]
 801797c:	695b      	ldr	r3, [r3, #20]
 801797e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8017982:	2300      	movs	r3, #0
 8017984:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8017988:	2300      	movs	r3, #0
 801798a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 801798e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017992:	f003 030f 	and.w	r3, r3, #15
 8017996:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 801799a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801799e:	2b00      	cmp	r3, #0
 80179a0:	d10f      	bne.n	80179c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80179a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80179a6:	f003 0320 	and.w	r3, r3, #32
 80179aa:	2b00      	cmp	r3, #0
 80179ac:	d009      	beq.n	80179c2 <HAL_UART_IRQHandler+0x66>
 80179ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80179b2:	f003 0320 	and.w	r3, r3, #32
 80179b6:	2b00      	cmp	r3, #0
 80179b8:	d003      	beq.n	80179c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80179ba:	6878      	ldr	r0, [r7, #4]
 80179bc:	f001 f822 	bl	8018a04 <UART_Receive_IT>
      return;
 80179c0:	e25b      	b.n	8017e7a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80179c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80179c6:	2b00      	cmp	r3, #0
 80179c8:	f000 80de 	beq.w	8017b88 <HAL_UART_IRQHandler+0x22c>
 80179cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80179d0:	f003 0301 	and.w	r3, r3, #1
 80179d4:	2b00      	cmp	r3, #0
 80179d6:	d106      	bne.n	80179e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80179d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80179dc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80179e0:	2b00      	cmp	r3, #0
 80179e2:	f000 80d1 	beq.w	8017b88 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80179e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80179ea:	f003 0301 	and.w	r3, r3, #1
 80179ee:	2b00      	cmp	r3, #0
 80179f0:	d00b      	beq.n	8017a0a <HAL_UART_IRQHandler+0xae>
 80179f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80179f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80179fa:	2b00      	cmp	r3, #0
 80179fc:	d005      	beq.n	8017a0a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80179fe:	687b      	ldr	r3, [r7, #4]
 8017a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017a02:	f043 0201 	orr.w	r2, r3, #1
 8017a06:	687b      	ldr	r3, [r7, #4]
 8017a08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8017a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017a0e:	f003 0304 	and.w	r3, r3, #4
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	d00b      	beq.n	8017a2e <HAL_UART_IRQHandler+0xd2>
 8017a16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017a1a:	f003 0301 	and.w	r3, r3, #1
 8017a1e:	2b00      	cmp	r3, #0
 8017a20:	d005      	beq.n	8017a2e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8017a22:	687b      	ldr	r3, [r7, #4]
 8017a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017a26:	f043 0202 	orr.w	r2, r3, #2
 8017a2a:	687b      	ldr	r3, [r7, #4]
 8017a2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8017a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017a32:	f003 0302 	and.w	r3, r3, #2
 8017a36:	2b00      	cmp	r3, #0
 8017a38:	d00b      	beq.n	8017a52 <HAL_UART_IRQHandler+0xf6>
 8017a3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017a3e:	f003 0301 	and.w	r3, r3, #1
 8017a42:	2b00      	cmp	r3, #0
 8017a44:	d005      	beq.n	8017a52 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8017a46:	687b      	ldr	r3, [r7, #4]
 8017a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017a4a:	f043 0204 	orr.w	r2, r3, #4
 8017a4e:	687b      	ldr	r3, [r7, #4]
 8017a50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8017a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017a56:	f003 0308 	and.w	r3, r3, #8
 8017a5a:	2b00      	cmp	r3, #0
 8017a5c:	d011      	beq.n	8017a82 <HAL_UART_IRQHandler+0x126>
 8017a5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017a62:	f003 0320 	and.w	r3, r3, #32
 8017a66:	2b00      	cmp	r3, #0
 8017a68:	d105      	bne.n	8017a76 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8017a6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017a6e:	f003 0301 	and.w	r3, r3, #1
 8017a72:	2b00      	cmp	r3, #0
 8017a74:	d005      	beq.n	8017a82 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8017a76:	687b      	ldr	r3, [r7, #4]
 8017a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017a7a:	f043 0208 	orr.w	r2, r3, #8
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8017a82:	687b      	ldr	r3, [r7, #4]
 8017a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	f000 81f2 	beq.w	8017e70 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8017a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017a90:	f003 0320 	and.w	r3, r3, #32
 8017a94:	2b00      	cmp	r3, #0
 8017a96:	d008      	beq.n	8017aaa <HAL_UART_IRQHandler+0x14e>
 8017a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017a9c:	f003 0320 	and.w	r3, r3, #32
 8017aa0:	2b00      	cmp	r3, #0
 8017aa2:	d002      	beq.n	8017aaa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8017aa4:	6878      	ldr	r0, [r7, #4]
 8017aa6:	f000 ffad 	bl	8018a04 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8017aaa:	687b      	ldr	r3, [r7, #4]
 8017aac:	681b      	ldr	r3, [r3, #0]
 8017aae:	695b      	ldr	r3, [r3, #20]
 8017ab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017ab4:	2b40      	cmp	r3, #64	@ 0x40
 8017ab6:	bf0c      	ite	eq
 8017ab8:	2301      	moveq	r3, #1
 8017aba:	2300      	movne	r3, #0
 8017abc:	b2db      	uxtb	r3, r3
 8017abe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8017ac2:	687b      	ldr	r3, [r7, #4]
 8017ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017ac6:	f003 0308 	and.w	r3, r3, #8
 8017aca:	2b00      	cmp	r3, #0
 8017acc:	d103      	bne.n	8017ad6 <HAL_UART_IRQHandler+0x17a>
 8017ace:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8017ad2:	2b00      	cmp	r3, #0
 8017ad4:	d04f      	beq.n	8017b76 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8017ad6:	6878      	ldr	r0, [r7, #4]
 8017ad8:	f000 fe28 	bl	801872c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017adc:	687b      	ldr	r3, [r7, #4]
 8017ade:	681b      	ldr	r3, [r3, #0]
 8017ae0:	695b      	ldr	r3, [r3, #20]
 8017ae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017ae6:	2b40      	cmp	r3, #64	@ 0x40
 8017ae8:	d141      	bne.n	8017b6e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017aea:	687b      	ldr	r3, [r7, #4]
 8017aec:	681b      	ldr	r3, [r3, #0]
 8017aee:	3314      	adds	r3, #20
 8017af0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017af4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8017af8:	e853 3f00 	ldrex	r3, [r3]
 8017afc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8017b00:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8017b04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8017b08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8017b0c:	687b      	ldr	r3, [r7, #4]
 8017b0e:	681b      	ldr	r3, [r3, #0]
 8017b10:	3314      	adds	r3, #20
 8017b12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8017b16:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8017b1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017b1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8017b22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8017b26:	e841 2300 	strex	r3, r2, [r1]
 8017b2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8017b2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	d1d9      	bne.n	8017aea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	d013      	beq.n	8017b66 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8017b3e:	687b      	ldr	r3, [r7, #4]
 8017b40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017b42:	4a7e      	ldr	r2, [pc, #504]	@ (8017d3c <HAL_UART_IRQHandler+0x3e0>)
 8017b44:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8017b46:	687b      	ldr	r3, [r7, #4]
 8017b48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017b4a:	4618      	mov	r0, r3
 8017b4c:	f7ee fd95 	bl	800667a <HAL_DMA_Abort_IT>
 8017b50:	4603      	mov	r3, r0
 8017b52:	2b00      	cmp	r3, #0
 8017b54:	d016      	beq.n	8017b84 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8017b56:	687b      	ldr	r3, [r7, #4]
 8017b58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017b5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017b5c:	687a      	ldr	r2, [r7, #4]
 8017b5e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8017b60:	4610      	mov	r0, r2
 8017b62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017b64:	e00e      	b.n	8017b84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8017b66:	6878      	ldr	r0, [r7, #4]
 8017b68:	f7e8 fda8 	bl	80006bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017b6c:	e00a      	b.n	8017b84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8017b6e:	6878      	ldr	r0, [r7, #4]
 8017b70:	f7e8 fda4 	bl	80006bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017b74:	e006      	b.n	8017b84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8017b76:	6878      	ldr	r0, [r7, #4]
 8017b78:	f7e8 fda0 	bl	80006bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017b7c:	687b      	ldr	r3, [r7, #4]
 8017b7e:	2200      	movs	r2, #0
 8017b80:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8017b82:	e175      	b.n	8017e70 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017b84:	bf00      	nop
    return;
 8017b86:	e173      	b.n	8017e70 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017b8c:	2b01      	cmp	r3, #1
 8017b8e:	f040 814f 	bne.w	8017e30 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8017b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017b96:	f003 0310 	and.w	r3, r3, #16
 8017b9a:	2b00      	cmp	r3, #0
 8017b9c:	f000 8148 	beq.w	8017e30 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8017ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017ba4:	f003 0310 	and.w	r3, r3, #16
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	f000 8141 	beq.w	8017e30 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8017bae:	2300      	movs	r3, #0
 8017bb0:	60bb      	str	r3, [r7, #8]
 8017bb2:	687b      	ldr	r3, [r7, #4]
 8017bb4:	681b      	ldr	r3, [r3, #0]
 8017bb6:	681b      	ldr	r3, [r3, #0]
 8017bb8:	60bb      	str	r3, [r7, #8]
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	681b      	ldr	r3, [r3, #0]
 8017bbe:	685b      	ldr	r3, [r3, #4]
 8017bc0:	60bb      	str	r3, [r7, #8]
 8017bc2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	681b      	ldr	r3, [r3, #0]
 8017bc8:	695b      	ldr	r3, [r3, #20]
 8017bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017bce:	2b40      	cmp	r3, #64	@ 0x40
 8017bd0:	f040 80b6 	bne.w	8017d40 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017bd8:	681b      	ldr	r3, [r3, #0]
 8017bda:	685b      	ldr	r3, [r3, #4]
 8017bdc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8017be0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8017be4:	2b00      	cmp	r3, #0
 8017be6:	f000 8145 	beq.w	8017e74 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8017bea:	687b      	ldr	r3, [r7, #4]
 8017bec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8017bee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8017bf2:	429a      	cmp	r2, r3
 8017bf4:	f080 813e 	bcs.w	8017e74 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8017bf8:	687b      	ldr	r3, [r7, #4]
 8017bfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8017bfe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8017c00:	687b      	ldr	r3, [r7, #4]
 8017c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017c04:	69db      	ldr	r3, [r3, #28]
 8017c06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017c0a:	f000 8088 	beq.w	8017d1e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017c0e:	687b      	ldr	r3, [r7, #4]
 8017c10:	681b      	ldr	r3, [r3, #0]
 8017c12:	330c      	adds	r3, #12
 8017c14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017c18:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8017c1c:	e853 3f00 	ldrex	r3, [r3]
 8017c20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8017c24:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8017c28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8017c2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8017c30:	687b      	ldr	r3, [r7, #4]
 8017c32:	681b      	ldr	r3, [r3, #0]
 8017c34:	330c      	adds	r3, #12
 8017c36:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8017c3a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8017c3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017c42:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8017c46:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8017c4a:	e841 2300 	strex	r3, r2, [r1]
 8017c4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8017c52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8017c56:	2b00      	cmp	r3, #0
 8017c58:	d1d9      	bne.n	8017c0e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017c5a:	687b      	ldr	r3, [r7, #4]
 8017c5c:	681b      	ldr	r3, [r3, #0]
 8017c5e:	3314      	adds	r3, #20
 8017c60:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017c62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8017c64:	e853 3f00 	ldrex	r3, [r3]
 8017c68:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8017c6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017c6c:	f023 0301 	bic.w	r3, r3, #1
 8017c70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	681b      	ldr	r3, [r3, #0]
 8017c78:	3314      	adds	r3, #20
 8017c7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8017c7e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8017c82:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017c84:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8017c86:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8017c8a:	e841 2300 	strex	r3, r2, [r1]
 8017c8e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8017c90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8017c92:	2b00      	cmp	r3, #0
 8017c94:	d1e1      	bne.n	8017c5a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017c96:	687b      	ldr	r3, [r7, #4]
 8017c98:	681b      	ldr	r3, [r3, #0]
 8017c9a:	3314      	adds	r3, #20
 8017c9c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017c9e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8017ca0:	e853 3f00 	ldrex	r3, [r3]
 8017ca4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8017ca6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017ca8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8017cac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8017cb0:	687b      	ldr	r3, [r7, #4]
 8017cb2:	681b      	ldr	r3, [r3, #0]
 8017cb4:	3314      	adds	r3, #20
 8017cb6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8017cba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8017cbc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017cbe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8017cc0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8017cc2:	e841 2300 	strex	r3, r2, [r1]
 8017cc6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8017cc8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8017cca:	2b00      	cmp	r3, #0
 8017ccc:	d1e3      	bne.n	8017c96 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8017cce:	687b      	ldr	r3, [r7, #4]
 8017cd0:	2220      	movs	r2, #32
 8017cd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017cd6:	687b      	ldr	r3, [r7, #4]
 8017cd8:	2200      	movs	r2, #0
 8017cda:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017cdc:	687b      	ldr	r3, [r7, #4]
 8017cde:	681b      	ldr	r3, [r3, #0]
 8017ce0:	330c      	adds	r3, #12
 8017ce2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017ce4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017ce6:	e853 3f00 	ldrex	r3, [r3]
 8017cea:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8017cec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017cee:	f023 0310 	bic.w	r3, r3, #16
 8017cf2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	681b      	ldr	r3, [r3, #0]
 8017cfa:	330c      	adds	r3, #12
 8017cfc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8017d00:	65ba      	str	r2, [r7, #88]	@ 0x58
 8017d02:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017d04:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8017d06:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8017d08:	e841 2300 	strex	r3, r2, [r1]
 8017d0c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8017d0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017d10:	2b00      	cmp	r3, #0
 8017d12:	d1e3      	bne.n	8017cdc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017d18:	4618      	mov	r0, r3
 8017d1a:	f7ee fc3e 	bl	800659a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8017d1e:	687b      	ldr	r3, [r7, #4]
 8017d20:	2202      	movs	r2, #2
 8017d22:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8017d28:	687b      	ldr	r3, [r7, #4]
 8017d2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8017d2c:	b29b      	uxth	r3, r3
 8017d2e:	1ad3      	subs	r3, r2, r3
 8017d30:	b29b      	uxth	r3, r3
 8017d32:	4619      	mov	r1, r3
 8017d34:	6878      	ldr	r0, [r7, #4]
 8017d36:	f000 f8f3 	bl	8017f20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8017d3a:	e09b      	b.n	8017e74 <HAL_UART_IRQHandler+0x518>
 8017d3c:	080187f3 	.word	0x080187f3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8017d44:	687b      	ldr	r3, [r7, #4]
 8017d46:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8017d48:	b29b      	uxth	r3, r3
 8017d4a:	1ad3      	subs	r3, r2, r3
 8017d4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8017d50:	687b      	ldr	r3, [r7, #4]
 8017d52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8017d54:	b29b      	uxth	r3, r3
 8017d56:	2b00      	cmp	r3, #0
 8017d58:	f000 808e 	beq.w	8017e78 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8017d5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	f000 8089 	beq.w	8017e78 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017d66:	687b      	ldr	r3, [r7, #4]
 8017d68:	681b      	ldr	r3, [r3, #0]
 8017d6a:	330c      	adds	r3, #12
 8017d6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017d70:	e853 3f00 	ldrex	r3, [r3]
 8017d74:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8017d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017d78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8017d7c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8017d80:	687b      	ldr	r3, [r7, #4]
 8017d82:	681b      	ldr	r3, [r3, #0]
 8017d84:	330c      	adds	r3, #12
 8017d86:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8017d8a:	647a      	str	r2, [r7, #68]	@ 0x44
 8017d8c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017d8e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8017d90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8017d92:	e841 2300 	strex	r3, r2, [r1]
 8017d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8017d98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017d9a:	2b00      	cmp	r3, #0
 8017d9c:	d1e3      	bne.n	8017d66 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017d9e:	687b      	ldr	r3, [r7, #4]
 8017da0:	681b      	ldr	r3, [r3, #0]
 8017da2:	3314      	adds	r3, #20
 8017da4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017da8:	e853 3f00 	ldrex	r3, [r3]
 8017dac:	623b      	str	r3, [r7, #32]
   return(result);
 8017dae:	6a3b      	ldr	r3, [r7, #32]
 8017db0:	f023 0301 	bic.w	r3, r3, #1
 8017db4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8017db8:	687b      	ldr	r3, [r7, #4]
 8017dba:	681b      	ldr	r3, [r3, #0]
 8017dbc:	3314      	adds	r3, #20
 8017dbe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8017dc2:	633a      	str	r2, [r7, #48]	@ 0x30
 8017dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017dc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8017dc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017dca:	e841 2300 	strex	r3, r2, [r1]
 8017dce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8017dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017dd2:	2b00      	cmp	r3, #0
 8017dd4:	d1e3      	bne.n	8017d9e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8017dd6:	687b      	ldr	r3, [r7, #4]
 8017dd8:	2220      	movs	r2, #32
 8017dda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017dde:	687b      	ldr	r3, [r7, #4]
 8017de0:	2200      	movs	r2, #0
 8017de2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017de4:	687b      	ldr	r3, [r7, #4]
 8017de6:	681b      	ldr	r3, [r3, #0]
 8017de8:	330c      	adds	r3, #12
 8017dea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017dec:	693b      	ldr	r3, [r7, #16]
 8017dee:	e853 3f00 	ldrex	r3, [r3]
 8017df2:	60fb      	str	r3, [r7, #12]
   return(result);
 8017df4:	68fb      	ldr	r3, [r7, #12]
 8017df6:	f023 0310 	bic.w	r3, r3, #16
 8017dfa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8017dfe:	687b      	ldr	r3, [r7, #4]
 8017e00:	681b      	ldr	r3, [r3, #0]
 8017e02:	330c      	adds	r3, #12
 8017e04:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8017e08:	61fa      	str	r2, [r7, #28]
 8017e0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017e0c:	69b9      	ldr	r1, [r7, #24]
 8017e0e:	69fa      	ldr	r2, [r7, #28]
 8017e10:	e841 2300 	strex	r3, r2, [r1]
 8017e14:	617b      	str	r3, [r7, #20]
   return(result);
 8017e16:	697b      	ldr	r3, [r7, #20]
 8017e18:	2b00      	cmp	r3, #0
 8017e1a:	d1e3      	bne.n	8017de4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8017e1c:	687b      	ldr	r3, [r7, #4]
 8017e1e:	2202      	movs	r2, #2
 8017e20:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8017e22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8017e26:	4619      	mov	r1, r3
 8017e28:	6878      	ldr	r0, [r7, #4]
 8017e2a:	f000 f879 	bl	8017f20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8017e2e:	e023      	b.n	8017e78 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8017e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017e34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8017e38:	2b00      	cmp	r3, #0
 8017e3a:	d009      	beq.n	8017e50 <HAL_UART_IRQHandler+0x4f4>
 8017e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017e40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	d003      	beq.n	8017e50 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8017e48:	6878      	ldr	r0, [r7, #4]
 8017e4a:	f000 fd73 	bl	8018934 <UART_Transmit_IT>
    return;
 8017e4e:	e014      	b.n	8017e7a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8017e50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017e54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017e58:	2b00      	cmp	r3, #0
 8017e5a:	d00e      	beq.n	8017e7a <HAL_UART_IRQHandler+0x51e>
 8017e5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017e60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017e64:	2b00      	cmp	r3, #0
 8017e66:	d008      	beq.n	8017e7a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8017e68:	6878      	ldr	r0, [r7, #4]
 8017e6a:	f000 fdb3 	bl	80189d4 <UART_EndTransmit_IT>
    return;
 8017e6e:	e004      	b.n	8017e7a <HAL_UART_IRQHandler+0x51e>
    return;
 8017e70:	bf00      	nop
 8017e72:	e002      	b.n	8017e7a <HAL_UART_IRQHandler+0x51e>
      return;
 8017e74:	bf00      	nop
 8017e76:	e000      	b.n	8017e7a <HAL_UART_IRQHandler+0x51e>
      return;
 8017e78:	bf00      	nop
  }
}
 8017e7a:	37e8      	adds	r7, #232	@ 0xe8
 8017e7c:	46bd      	mov	sp, r7
 8017e7e:	bd80      	pop	{r7, pc}

08017e80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8017e80:	b480      	push	{r7}
 8017e82:	b083      	sub	sp, #12
 8017e84:	af00      	add	r7, sp, #0
 8017e86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8017e88:	bf00      	nop
 8017e8a:	370c      	adds	r7, #12
 8017e8c:	46bd      	mov	sp, r7
 8017e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e92:	4770      	bx	lr

08017e94 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8017e94:	b480      	push	{r7}
 8017e96:	b083      	sub	sp, #12
 8017e98:	af00      	add	r7, sp, #0
 8017e9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8017e9c:	bf00      	nop
 8017e9e:	370c      	adds	r7, #12
 8017ea0:	46bd      	mov	sp, r7
 8017ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ea6:	4770      	bx	lr
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8017ea8:	b480      	push	{r7}
 8017eaa:	b083      	sub	sp, #12
 8017eac:	af00      	add	r7, sp, #0
 8017eae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8017eb0:	bf00      	nop
 8017eb2:	370c      	adds	r7, #12
 8017eb4:	46bd      	mov	sp, r7
 8017eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eba:	4770      	bx	lr

08017ebc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8017ebc:	b480      	push	{r7}
 8017ebe:	b083      	sub	sp, #12
 8017ec0:	af00      	add	r7, sp, #0
 8017ec2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8017ec4:	bf00      	nop
 8017ec6:	370c      	adds	r7, #12
 8017ec8:	46bd      	mov	sp, r7
 8017eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ece:	4770      	bx	lr
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8017ed0:	b480      	push	{r7}
 8017ed2:	b083      	sub	sp, #12
 8017ed4:	af00      	add	r7, sp, #0
 8017ed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8017ed8:	bf00      	nop
 8017eda:	370c      	adds	r7, #12
 8017edc:	46bd      	mov	sp, r7
 8017ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ee2:	4770      	bx	lr

08017ee4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8017ee4:	b480      	push	{r7}
 8017ee6:	b083      	sub	sp, #12
 8017ee8:	af00      	add	r7, sp, #0
 8017eea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8017eec:	bf00      	nop
 8017eee:	370c      	adds	r7, #12
 8017ef0:	46bd      	mov	sp, r7
 8017ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ef6:	4770      	bx	lr

08017ef8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8017ef8:	b480      	push	{r7}
 8017efa:	b083      	sub	sp, #12
 8017efc:	af00      	add	r7, sp, #0
 8017efe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8017f00:	bf00      	nop
 8017f02:	370c      	adds	r7, #12
 8017f04:	46bd      	mov	sp, r7
 8017f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f0a:	4770      	bx	lr

08017f0c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8017f0c:	b480      	push	{r7}
 8017f0e:	b083      	sub	sp, #12
 8017f10:	af00      	add	r7, sp, #0
 8017f12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8017f14:	bf00      	nop
 8017f16:	370c      	adds	r7, #12
 8017f18:	46bd      	mov	sp, r7
 8017f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f1e:	4770      	bx	lr

08017f20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8017f20:	b480      	push	{r7}
 8017f22:	b083      	sub	sp, #12
 8017f24:	af00      	add	r7, sp, #0
 8017f26:	6078      	str	r0, [r7, #4]
 8017f28:	460b      	mov	r3, r1
 8017f2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8017f2c:	bf00      	nop
 8017f2e:	370c      	adds	r7, #12
 8017f30:	46bd      	mov	sp, r7
 8017f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f36:	4770      	bx	lr

08017f38 <HAL_LIN_SendBreak>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
{
 8017f38:	b480      	push	{r7}
 8017f3a:	b089      	sub	sp, #36	@ 0x24
 8017f3c:	af00      	add	r7, sp, #0
 8017f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8017f40:	687b      	ldr	r3, [r7, #4]
 8017f42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8017f46:	2b01      	cmp	r3, #1
 8017f48:	d101      	bne.n	8017f4e <HAL_LIN_SendBreak+0x16>
 8017f4a:	2302      	movs	r3, #2
 8017f4c:	e02a      	b.n	8017fa4 <HAL_LIN_SendBreak+0x6c>
 8017f4e:	687b      	ldr	r3, [r7, #4]
 8017f50:	2201      	movs	r2, #1
 8017f52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 8017f56:	687b      	ldr	r3, [r7, #4]
 8017f58:	2224      	movs	r2, #36	@ 0x24
 8017f5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Send break characters */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_SBK);
 8017f5e:	687b      	ldr	r3, [r7, #4]
 8017f60:	681b      	ldr	r3, [r3, #0]
 8017f62:	330c      	adds	r3, #12
 8017f64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017f66:	68fb      	ldr	r3, [r7, #12]
 8017f68:	e853 3f00 	ldrex	r3, [r3]
 8017f6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8017f6e:	68bb      	ldr	r3, [r7, #8]
 8017f70:	f043 0301 	orr.w	r3, r3, #1
 8017f74:	61fb      	str	r3, [r7, #28]
 8017f76:	687b      	ldr	r3, [r7, #4]
 8017f78:	681b      	ldr	r3, [r3, #0]
 8017f7a:	330c      	adds	r3, #12
 8017f7c:	69fa      	ldr	r2, [r7, #28]
 8017f7e:	61ba      	str	r2, [r7, #24]
 8017f80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017f82:	6979      	ldr	r1, [r7, #20]
 8017f84:	69ba      	ldr	r2, [r7, #24]
 8017f86:	e841 2300 	strex	r3, r2, [r1]
 8017f8a:	613b      	str	r3, [r7, #16]
   return(result);
 8017f8c:	693b      	ldr	r3, [r7, #16]
 8017f8e:	2b00      	cmp	r3, #0
 8017f90:	d1e5      	bne.n	8017f5e <HAL_LIN_SendBreak+0x26>

  huart->gState = HAL_UART_STATE_READY;
 8017f92:	687b      	ldr	r3, [r7, #4]
 8017f94:	2220      	movs	r2, #32
 8017f96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017f9a:	687b      	ldr	r3, [r7, #4]
 8017f9c:	2200      	movs	r2, #0
 8017f9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8017fa2:	2300      	movs	r3, #0
}
 8017fa4:	4618      	mov	r0, r3
 8017fa6:	3724      	adds	r7, #36	@ 0x24
 8017fa8:	46bd      	mov	sp, r7
 8017faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fae:	4770      	bx	lr

08017fb0 <HAL_MultiProcessor_EnterMuteMode>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart)
{
 8017fb0:	b480      	push	{r7}
 8017fb2:	b089      	sub	sp, #36	@ 0x24
 8017fb4:	af00      	add	r7, sp, #0
 8017fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8017fbe:	2b01      	cmp	r3, #1
 8017fc0:	d101      	bne.n	8017fc6 <HAL_MultiProcessor_EnterMuteMode+0x16>
 8017fc2:	2302      	movs	r3, #2
 8017fc4:	e02d      	b.n	8018022 <HAL_MultiProcessor_EnterMuteMode+0x72>
 8017fc6:	687b      	ldr	r3, [r7, #4]
 8017fc8:	2201      	movs	r2, #1
 8017fca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 8017fce:	687b      	ldr	r3, [r7, #4]
 8017fd0:	2224      	movs	r2, #36	@ 0x24
 8017fd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RWU);
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	681b      	ldr	r3, [r3, #0]
 8017fda:	330c      	adds	r3, #12
 8017fdc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017fde:	68fb      	ldr	r3, [r7, #12]
 8017fe0:	e853 3f00 	ldrex	r3, [r3]
 8017fe4:	60bb      	str	r3, [r7, #8]
   return(result);
 8017fe6:	68bb      	ldr	r3, [r7, #8]
 8017fe8:	f043 0302 	orr.w	r3, r3, #2
 8017fec:	61fb      	str	r3, [r7, #28]
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	681b      	ldr	r3, [r3, #0]
 8017ff2:	330c      	adds	r3, #12
 8017ff4:	69fa      	ldr	r2, [r7, #28]
 8017ff6:	61ba      	str	r2, [r7, #24]
 8017ff8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017ffa:	6979      	ldr	r1, [r7, #20]
 8017ffc:	69ba      	ldr	r2, [r7, #24]
 8017ffe:	e841 2300 	strex	r3, r2, [r1]
 8018002:	613b      	str	r3, [r7, #16]
   return(result);
 8018004:	693b      	ldr	r3, [r7, #16]
 8018006:	2b00      	cmp	r3, #0
 8018008:	d1e5      	bne.n	8017fd6 <HAL_MultiProcessor_EnterMuteMode+0x26>

  huart->gState = HAL_UART_STATE_READY;
 801800a:	687b      	ldr	r3, [r7, #4]
 801800c:	2220      	movs	r2, #32
 801800e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018012:	687b      	ldr	r3, [r7, #4]
 8018014:	2200      	movs	r2, #0
 8018016:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8018018:	687b      	ldr	r3, [r7, #4]
 801801a:	2200      	movs	r2, #0
 801801c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8018020:	2300      	movs	r3, #0
}
 8018022:	4618      	mov	r0, r3
 8018024:	3724      	adds	r7, #36	@ 0x24
 8018026:	46bd      	mov	sp, r7
 8018028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801802c:	4770      	bx	lr

0801802e <HAL_MultiProcessor_ExitMuteMode>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_ExitMuteMode(UART_HandleTypeDef *huart)
{
 801802e:	b480      	push	{r7}
 8018030:	b089      	sub	sp, #36	@ 0x24
 8018032:	af00      	add	r7, sp, #0
 8018034:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8018036:	687b      	ldr	r3, [r7, #4]
 8018038:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801803c:	2b01      	cmp	r3, #1
 801803e:	d101      	bne.n	8018044 <HAL_MultiProcessor_ExitMuteMode+0x16>
 8018040:	2302      	movs	r3, #2
 8018042:	e02d      	b.n	80180a0 <HAL_MultiProcessor_ExitMuteMode+0x72>
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	2201      	movs	r2, #1
 8018048:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	2224      	movs	r2, #36	@ 0x24
 8018050:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RWU);
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	681b      	ldr	r3, [r3, #0]
 8018058:	330c      	adds	r3, #12
 801805a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801805c:	68fb      	ldr	r3, [r7, #12]
 801805e:	e853 3f00 	ldrex	r3, [r3]
 8018062:	60bb      	str	r3, [r7, #8]
   return(result);
 8018064:	68bb      	ldr	r3, [r7, #8]
 8018066:	f023 0302 	bic.w	r3, r3, #2
 801806a:	61fb      	str	r3, [r7, #28]
 801806c:	687b      	ldr	r3, [r7, #4]
 801806e:	681b      	ldr	r3, [r3, #0]
 8018070:	330c      	adds	r3, #12
 8018072:	69fa      	ldr	r2, [r7, #28]
 8018074:	61ba      	str	r2, [r7, #24]
 8018076:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018078:	6979      	ldr	r1, [r7, #20]
 801807a:	69ba      	ldr	r2, [r7, #24]
 801807c:	e841 2300 	strex	r3, r2, [r1]
 8018080:	613b      	str	r3, [r7, #16]
   return(result);
 8018082:	693b      	ldr	r3, [r7, #16]
 8018084:	2b00      	cmp	r3, #0
 8018086:	d1e5      	bne.n	8018054 <HAL_MultiProcessor_ExitMuteMode+0x26>

  huart->gState = HAL_UART_STATE_READY;
 8018088:	687b      	ldr	r3, [r7, #4]
 801808a:	2220      	movs	r2, #32
 801808c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	2200      	movs	r2, #0
 8018094:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8018096:	687b      	ldr	r3, [r7, #4]
 8018098:	2200      	movs	r2, #0
 801809a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 801809e:	2300      	movs	r3, #0
}
 80180a0:	4618      	mov	r0, r3
 80180a2:	3724      	adds	r7, #36	@ 0x24
 80180a4:	46bd      	mov	sp, r7
 80180a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180aa:	4770      	bx	lr

080180ac <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 80180ac:	b480      	push	{r7}
 80180ae:	b085      	sub	sp, #20
 80180b0:	af00      	add	r7, sp, #0
 80180b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80180b4:	2300      	movs	r3, #0
 80180b6:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80180be:	2b01      	cmp	r3, #1
 80180c0:	d101      	bne.n	80180c6 <HAL_HalfDuplex_EnableTransmitter+0x1a>
 80180c2:	2302      	movs	r3, #2
 80180c4:	e020      	b.n	8018108 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 80180c6:	687b      	ldr	r3, [r7, #4]
 80180c8:	2201      	movs	r2, #1
 80180ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	2224      	movs	r2, #36	@ 0x24
 80180d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80180d6:	687b      	ldr	r3, [r7, #4]
 80180d8:	681b      	ldr	r3, [r3, #0]
 80180da:	68db      	ldr	r3, [r3, #12]
 80180dc:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 80180de:	68fb      	ldr	r3, [r7, #12]
 80180e0:	f023 030c 	bic.w	r3, r3, #12
 80180e4:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 80180e6:	68fb      	ldr	r3, [r7, #12]
 80180e8:	f043 0308 	orr.w	r3, r3, #8
 80180ec:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80180ee:	687b      	ldr	r3, [r7, #4]
 80180f0:	681b      	ldr	r3, [r3, #0]
 80180f2:	68fa      	ldr	r2, [r7, #12]
 80180f4:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 80180f6:	687b      	ldr	r3, [r7, #4]
 80180f8:	2220      	movs	r2, #32
 80180fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80180fe:	687b      	ldr	r3, [r7, #4]
 8018100:	2200      	movs	r2, #0
 8018102:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8018106:	2300      	movs	r3, #0
}
 8018108:	4618      	mov	r0, r3
 801810a:	3714      	adds	r7, #20
 801810c:	46bd      	mov	sp, r7
 801810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018112:	4770      	bx	lr

08018114 <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8018114:	b480      	push	{r7}
 8018116:	b085      	sub	sp, #20
 8018118:	af00      	add	r7, sp, #0
 801811a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 801811c:	2300      	movs	r3, #0
 801811e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8018126:	2b01      	cmp	r3, #1
 8018128:	d101      	bne.n	801812e <HAL_HalfDuplex_EnableReceiver+0x1a>
 801812a:	2302      	movs	r3, #2
 801812c:	e020      	b.n	8018170 <HAL_HalfDuplex_EnableReceiver+0x5c>
 801812e:	687b      	ldr	r3, [r7, #4]
 8018130:	2201      	movs	r2, #1
 8018132:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 8018136:	687b      	ldr	r3, [r7, #4]
 8018138:	2224      	movs	r2, #36	@ 0x24
 801813a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 801813e:	687b      	ldr	r3, [r7, #4]
 8018140:	681b      	ldr	r3, [r3, #0]
 8018142:	68db      	ldr	r3, [r3, #12]
 8018144:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8018146:	68fb      	ldr	r3, [r7, #12]
 8018148:	f023 030c 	bic.w	r3, r3, #12
 801814c:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 801814e:	68fb      	ldr	r3, [r7, #12]
 8018150:	f043 0304 	orr.w	r3, r3, #4
 8018154:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	681b      	ldr	r3, [r3, #0]
 801815a:	68fa      	ldr	r2, [r7, #12]
 801815c:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	2220      	movs	r2, #32
 8018162:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8018166:	687b      	ldr	r3, [r7, #4]
 8018168:	2200      	movs	r2, #0
 801816a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 801816e:	2300      	movs	r3, #0
}
 8018170:	4618      	mov	r0, r3
 8018172:	3714      	adds	r7, #20
 8018174:	46bd      	mov	sp, r7
 8018176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801817a:	4770      	bx	lr

0801817c <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 801817c:	b480      	push	{r7}
 801817e:	b085      	sub	sp, #20
 8018180:	af00      	add	r7, sp, #0
 8018182:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8018184:	2300      	movs	r3, #0
 8018186:	60fb      	str	r3, [r7, #12]
 8018188:	2300      	movs	r3, #0
 801818a:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8018192:	b2db      	uxtb	r3, r3
 8018194:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8018196:	687b      	ldr	r3, [r7, #4]
 8018198:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801819c:	b2db      	uxtb	r3, r3
 801819e:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80181a0:	68fb      	ldr	r3, [r7, #12]
 80181a2:	b2da      	uxtb	r2, r3
 80181a4:	68bb      	ldr	r3, [r7, #8]
 80181a6:	b2db      	uxtb	r3, r3
 80181a8:	4313      	orrs	r3, r2
 80181aa:	b2db      	uxtb	r3, r3
}
 80181ac:	4618      	mov	r0, r3
 80181ae:	3714      	adds	r7, #20
 80181b0:	46bd      	mov	sp, r7
 80181b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181b6:	4770      	bx	lr

080181b8 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 80181b8:	b480      	push	{r7}
 80181ba:	b083      	sub	sp, #12
 80181bc:	af00      	add	r7, sp, #0
 80181be:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 80181c0:	687b      	ldr	r3, [r7, #4]
 80181c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 80181c4:	4618      	mov	r0, r3
 80181c6:	370c      	adds	r7, #12
 80181c8:	46bd      	mov	sp, r7
 80181ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181ce:	4770      	bx	lr

080181d0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80181d0:	b580      	push	{r7, lr}
 80181d2:	b090      	sub	sp, #64	@ 0x40
 80181d4:	af00      	add	r7, sp, #0
 80181d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80181d8:	687b      	ldr	r3, [r7, #4]
 80181da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80181dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	681b      	ldr	r3, [r3, #0]
 80181e2:	681b      	ldr	r3, [r3, #0]
 80181e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80181e8:	2b00      	cmp	r3, #0
 80181ea:	d137      	bne.n	801825c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80181ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80181ee:	2200      	movs	r2, #0
 80181f0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80181f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80181f4:	681b      	ldr	r3, [r3, #0]
 80181f6:	3314      	adds	r3, #20
 80181f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80181fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181fc:	e853 3f00 	ldrex	r3, [r3]
 8018200:	623b      	str	r3, [r7, #32]
   return(result);
 8018202:	6a3b      	ldr	r3, [r7, #32]
 8018204:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8018208:	63bb      	str	r3, [r7, #56]	@ 0x38
 801820a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801820c:	681b      	ldr	r3, [r3, #0]
 801820e:	3314      	adds	r3, #20
 8018210:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8018212:	633a      	str	r2, [r7, #48]	@ 0x30
 8018214:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018216:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018218:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801821a:	e841 2300 	strex	r3, r2, [r1]
 801821e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8018220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018222:	2b00      	cmp	r3, #0
 8018224:	d1e5      	bne.n	80181f2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8018226:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018228:	681b      	ldr	r3, [r3, #0]
 801822a:	330c      	adds	r3, #12
 801822c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801822e:	693b      	ldr	r3, [r7, #16]
 8018230:	e853 3f00 	ldrex	r3, [r3]
 8018234:	60fb      	str	r3, [r7, #12]
   return(result);
 8018236:	68fb      	ldr	r3, [r7, #12]
 8018238:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801823c:	637b      	str	r3, [r7, #52]	@ 0x34
 801823e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018240:	681b      	ldr	r3, [r3, #0]
 8018242:	330c      	adds	r3, #12
 8018244:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018246:	61fa      	str	r2, [r7, #28]
 8018248:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801824a:	69b9      	ldr	r1, [r7, #24]
 801824c:	69fa      	ldr	r2, [r7, #28]
 801824e:	e841 2300 	strex	r3, r2, [r1]
 8018252:	617b      	str	r3, [r7, #20]
   return(result);
 8018254:	697b      	ldr	r3, [r7, #20]
 8018256:	2b00      	cmp	r3, #0
 8018258:	d1e5      	bne.n	8018226 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801825a:	e002      	b.n	8018262 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 801825c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801825e:	f7ff fe0f 	bl	8017e80 <HAL_UART_TxCpltCallback>
}
 8018262:	bf00      	nop
 8018264:	3740      	adds	r7, #64	@ 0x40
 8018266:	46bd      	mov	sp, r7
 8018268:	bd80      	pop	{r7, pc}

0801826a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801826a:	b580      	push	{r7, lr}
 801826c:	b084      	sub	sp, #16
 801826e:	af00      	add	r7, sp, #0
 8018270:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018276:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8018278:	68f8      	ldr	r0, [r7, #12]
 801827a:	f7ff fe0b 	bl	8017e94 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801827e:	bf00      	nop
 8018280:	3710      	adds	r7, #16
 8018282:	46bd      	mov	sp, r7
 8018284:	bd80      	pop	{r7, pc}

08018286 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8018286:	b580      	push	{r7, lr}
 8018288:	b09c      	sub	sp, #112	@ 0x70
 801828a:	af00      	add	r7, sp, #0
 801828c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801828e:	687b      	ldr	r3, [r7, #4]
 8018290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018292:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8018294:	687b      	ldr	r3, [r7, #4]
 8018296:	681b      	ldr	r3, [r3, #0]
 8018298:	681b      	ldr	r3, [r3, #0]
 801829a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801829e:	2b00      	cmp	r3, #0
 80182a0:	d172      	bne.n	8018388 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80182a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80182a4:	2200      	movs	r2, #0
 80182a6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80182a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80182aa:	681b      	ldr	r3, [r3, #0]
 80182ac:	330c      	adds	r3, #12
 80182ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80182b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80182b2:	e853 3f00 	ldrex	r3, [r3]
 80182b6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80182b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80182ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80182be:	66bb      	str	r3, [r7, #104]	@ 0x68
 80182c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80182c2:	681b      	ldr	r3, [r3, #0]
 80182c4:	330c      	adds	r3, #12
 80182c6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80182c8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80182ca:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80182cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80182ce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80182d0:	e841 2300 	strex	r3, r2, [r1]
 80182d4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80182d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80182d8:	2b00      	cmp	r3, #0
 80182da:	d1e5      	bne.n	80182a8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80182dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80182de:	681b      	ldr	r3, [r3, #0]
 80182e0:	3314      	adds	r3, #20
 80182e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80182e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80182e6:	e853 3f00 	ldrex	r3, [r3]
 80182ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80182ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80182ee:	f023 0301 	bic.w	r3, r3, #1
 80182f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80182f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80182f6:	681b      	ldr	r3, [r3, #0]
 80182f8:	3314      	adds	r3, #20
 80182fa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80182fc:	647a      	str	r2, [r7, #68]	@ 0x44
 80182fe:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018300:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8018302:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018304:	e841 2300 	strex	r3, r2, [r1]
 8018308:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801830a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801830c:	2b00      	cmp	r3, #0
 801830e:	d1e5      	bne.n	80182dc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8018310:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8018312:	681b      	ldr	r3, [r3, #0]
 8018314:	3314      	adds	r3, #20
 8018316:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801831a:	e853 3f00 	ldrex	r3, [r3]
 801831e:	623b      	str	r3, [r7, #32]
   return(result);
 8018320:	6a3b      	ldr	r3, [r7, #32]
 8018322:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8018326:	663b      	str	r3, [r7, #96]	@ 0x60
 8018328:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801832a:	681b      	ldr	r3, [r3, #0]
 801832c:	3314      	adds	r3, #20
 801832e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8018330:	633a      	str	r2, [r7, #48]	@ 0x30
 8018332:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018334:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018336:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018338:	e841 2300 	strex	r3, r2, [r1]
 801833c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801833e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018340:	2b00      	cmp	r3, #0
 8018342:	d1e5      	bne.n	8018310 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8018344:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8018346:	2220      	movs	r2, #32
 8018348:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801834c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801834e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018350:	2b01      	cmp	r3, #1
 8018352:	d119      	bne.n	8018388 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018354:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8018356:	681b      	ldr	r3, [r3, #0]
 8018358:	330c      	adds	r3, #12
 801835a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801835c:	693b      	ldr	r3, [r7, #16]
 801835e:	e853 3f00 	ldrex	r3, [r3]
 8018362:	60fb      	str	r3, [r7, #12]
   return(result);
 8018364:	68fb      	ldr	r3, [r7, #12]
 8018366:	f023 0310 	bic.w	r3, r3, #16
 801836a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801836c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801836e:	681b      	ldr	r3, [r3, #0]
 8018370:	330c      	adds	r3, #12
 8018372:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8018374:	61fa      	str	r2, [r7, #28]
 8018376:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018378:	69b9      	ldr	r1, [r7, #24]
 801837a:	69fa      	ldr	r2, [r7, #28]
 801837c:	e841 2300 	strex	r3, r2, [r1]
 8018380:	617b      	str	r3, [r7, #20]
   return(result);
 8018382:	697b      	ldr	r3, [r7, #20]
 8018384:	2b00      	cmp	r3, #0
 8018386:	d1e5      	bne.n	8018354 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018388:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801838a:	2200      	movs	r2, #0
 801838c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801838e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8018390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018392:	2b01      	cmp	r3, #1
 8018394:	d106      	bne.n	80183a4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8018396:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8018398:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801839a:	4619      	mov	r1, r3
 801839c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801839e:	f7ff fdbf 	bl	8017f20 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80183a2:	e002      	b.n	80183aa <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80183a4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80183a6:	f7e8 f8e9 	bl	800057c <HAL_UART_RxCpltCallback>
}
 80183aa:	bf00      	nop
 80183ac:	3770      	adds	r7, #112	@ 0x70
 80183ae:	46bd      	mov	sp, r7
 80183b0:	bd80      	pop	{r7, pc}

080183b2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80183b2:	b580      	push	{r7, lr}
 80183b4:	b084      	sub	sp, #16
 80183b6:	af00      	add	r7, sp, #0
 80183b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80183ba:	687b      	ldr	r3, [r7, #4]
 80183bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80183be:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80183c0:	68fb      	ldr	r3, [r7, #12]
 80183c2:	2201      	movs	r2, #1
 80183c4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80183c6:	68fb      	ldr	r3, [r7, #12]
 80183c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80183ca:	2b01      	cmp	r3, #1
 80183cc:	d108      	bne.n	80183e0 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80183ce:	68fb      	ldr	r3, [r7, #12]
 80183d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80183d2:	085b      	lsrs	r3, r3, #1
 80183d4:	b29b      	uxth	r3, r3
 80183d6:	4619      	mov	r1, r3
 80183d8:	68f8      	ldr	r0, [r7, #12]
 80183da:	f7ff fda1 	bl	8017f20 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80183de:	e002      	b.n	80183e6 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80183e0:	68f8      	ldr	r0, [r7, #12]
 80183e2:	f7ff fd6b 	bl	8017ebc <HAL_UART_RxHalfCpltCallback>
}
 80183e6:	bf00      	nop
 80183e8:	3710      	adds	r7, #16
 80183ea:	46bd      	mov	sp, r7
 80183ec:	bd80      	pop	{r7, pc}

080183ee <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80183ee:	b580      	push	{r7, lr}
 80183f0:	b084      	sub	sp, #16
 80183f2:	af00      	add	r7, sp, #0
 80183f4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80183f6:	2300      	movs	r3, #0
 80183f8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80183fa:	687b      	ldr	r3, [r7, #4]
 80183fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80183fe:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8018400:	68bb      	ldr	r3, [r7, #8]
 8018402:	681b      	ldr	r3, [r3, #0]
 8018404:	695b      	ldr	r3, [r3, #20]
 8018406:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801840a:	2b80      	cmp	r3, #128	@ 0x80
 801840c:	bf0c      	ite	eq
 801840e:	2301      	moveq	r3, #1
 8018410:	2300      	movne	r3, #0
 8018412:	b2db      	uxtb	r3, r3
 8018414:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8018416:	68bb      	ldr	r3, [r7, #8]
 8018418:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801841c:	b2db      	uxtb	r3, r3
 801841e:	2b21      	cmp	r3, #33	@ 0x21
 8018420:	d108      	bne.n	8018434 <UART_DMAError+0x46>
 8018422:	68fb      	ldr	r3, [r7, #12]
 8018424:	2b00      	cmp	r3, #0
 8018426:	d005      	beq.n	8018434 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8018428:	68bb      	ldr	r3, [r7, #8]
 801842a:	2200      	movs	r2, #0
 801842c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 801842e:	68b8      	ldr	r0, [r7, #8]
 8018430:	f000 f954 	bl	80186dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8018434:	68bb      	ldr	r3, [r7, #8]
 8018436:	681b      	ldr	r3, [r3, #0]
 8018438:	695b      	ldr	r3, [r3, #20]
 801843a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801843e:	2b40      	cmp	r3, #64	@ 0x40
 8018440:	bf0c      	ite	eq
 8018442:	2301      	moveq	r3, #1
 8018444:	2300      	movne	r3, #0
 8018446:	b2db      	uxtb	r3, r3
 8018448:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 801844a:	68bb      	ldr	r3, [r7, #8]
 801844c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8018450:	b2db      	uxtb	r3, r3
 8018452:	2b22      	cmp	r3, #34	@ 0x22
 8018454:	d108      	bne.n	8018468 <UART_DMAError+0x7a>
 8018456:	68fb      	ldr	r3, [r7, #12]
 8018458:	2b00      	cmp	r3, #0
 801845a:	d005      	beq.n	8018468 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 801845c:	68bb      	ldr	r3, [r7, #8]
 801845e:	2200      	movs	r2, #0
 8018460:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8018462:	68b8      	ldr	r0, [r7, #8]
 8018464:	f000 f962 	bl	801872c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8018468:	68bb      	ldr	r3, [r7, #8]
 801846a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801846c:	f043 0210 	orr.w	r2, r3, #16
 8018470:	68bb      	ldr	r3, [r7, #8]
 8018472:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8018474:	68b8      	ldr	r0, [r7, #8]
 8018476:	f7e8 f921 	bl	80006bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801847a:	bf00      	nop
 801847c:	3710      	adds	r7, #16
 801847e:	46bd      	mov	sp, r7
 8018480:	bd80      	pop	{r7, pc}

08018482 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8018482:	b580      	push	{r7, lr}
 8018484:	b086      	sub	sp, #24
 8018486:	af00      	add	r7, sp, #0
 8018488:	60f8      	str	r0, [r7, #12]
 801848a:	60b9      	str	r1, [r7, #8]
 801848c:	603b      	str	r3, [r7, #0]
 801848e:	4613      	mov	r3, r2
 8018490:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8018492:	e03b      	b.n	801850c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8018494:	6a3b      	ldr	r3, [r7, #32]
 8018496:	f1b3 3fff 	cmp.w	r3, #4294967295
 801849a:	d037      	beq.n	801850c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801849c:	f7ed fa4e 	bl	800593c <HAL_GetTick>
 80184a0:	4602      	mov	r2, r0
 80184a2:	683b      	ldr	r3, [r7, #0]
 80184a4:	1ad3      	subs	r3, r2, r3
 80184a6:	6a3a      	ldr	r2, [r7, #32]
 80184a8:	429a      	cmp	r2, r3
 80184aa:	d302      	bcc.n	80184b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80184ac:	6a3b      	ldr	r3, [r7, #32]
 80184ae:	2b00      	cmp	r3, #0
 80184b0:	d101      	bne.n	80184b6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80184b2:	2303      	movs	r3, #3
 80184b4:	e03a      	b.n	801852c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80184b6:	68fb      	ldr	r3, [r7, #12]
 80184b8:	681b      	ldr	r3, [r3, #0]
 80184ba:	68db      	ldr	r3, [r3, #12]
 80184bc:	f003 0304 	and.w	r3, r3, #4
 80184c0:	2b00      	cmp	r3, #0
 80184c2:	d023      	beq.n	801850c <UART_WaitOnFlagUntilTimeout+0x8a>
 80184c4:	68bb      	ldr	r3, [r7, #8]
 80184c6:	2b80      	cmp	r3, #128	@ 0x80
 80184c8:	d020      	beq.n	801850c <UART_WaitOnFlagUntilTimeout+0x8a>
 80184ca:	68bb      	ldr	r3, [r7, #8]
 80184cc:	2b40      	cmp	r3, #64	@ 0x40
 80184ce:	d01d      	beq.n	801850c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80184d0:	68fb      	ldr	r3, [r7, #12]
 80184d2:	681b      	ldr	r3, [r3, #0]
 80184d4:	681b      	ldr	r3, [r3, #0]
 80184d6:	f003 0308 	and.w	r3, r3, #8
 80184da:	2b08      	cmp	r3, #8
 80184dc:	d116      	bne.n	801850c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80184de:	2300      	movs	r3, #0
 80184e0:	617b      	str	r3, [r7, #20]
 80184e2:	68fb      	ldr	r3, [r7, #12]
 80184e4:	681b      	ldr	r3, [r3, #0]
 80184e6:	681b      	ldr	r3, [r3, #0]
 80184e8:	617b      	str	r3, [r7, #20]
 80184ea:	68fb      	ldr	r3, [r7, #12]
 80184ec:	681b      	ldr	r3, [r3, #0]
 80184ee:	685b      	ldr	r3, [r3, #4]
 80184f0:	617b      	str	r3, [r7, #20]
 80184f2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80184f4:	68f8      	ldr	r0, [r7, #12]
 80184f6:	f000 f919 	bl	801872c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80184fa:	68fb      	ldr	r3, [r7, #12]
 80184fc:	2208      	movs	r2, #8
 80184fe:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8018500:	68fb      	ldr	r3, [r7, #12]
 8018502:	2200      	movs	r2, #0
 8018504:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8018508:	2301      	movs	r3, #1
 801850a:	e00f      	b.n	801852c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801850c:	68fb      	ldr	r3, [r7, #12]
 801850e:	681b      	ldr	r3, [r3, #0]
 8018510:	681a      	ldr	r2, [r3, #0]
 8018512:	68bb      	ldr	r3, [r7, #8]
 8018514:	4013      	ands	r3, r2
 8018516:	68ba      	ldr	r2, [r7, #8]
 8018518:	429a      	cmp	r2, r3
 801851a:	bf0c      	ite	eq
 801851c:	2301      	moveq	r3, #1
 801851e:	2300      	movne	r3, #0
 8018520:	b2db      	uxtb	r3, r3
 8018522:	461a      	mov	r2, r3
 8018524:	79fb      	ldrb	r3, [r7, #7]
 8018526:	429a      	cmp	r2, r3
 8018528:	d0b4      	beq.n	8018494 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801852a:	2300      	movs	r3, #0
}
 801852c:	4618      	mov	r0, r3
 801852e:	3718      	adds	r7, #24
 8018530:	46bd      	mov	sp, r7
 8018532:	bd80      	pop	{r7, pc}

08018534 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8018534:	b480      	push	{r7}
 8018536:	b085      	sub	sp, #20
 8018538:	af00      	add	r7, sp, #0
 801853a:	60f8      	str	r0, [r7, #12]
 801853c:	60b9      	str	r1, [r7, #8]
 801853e:	4613      	mov	r3, r2
 8018540:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8018542:	68fb      	ldr	r3, [r7, #12]
 8018544:	68ba      	ldr	r2, [r7, #8]
 8018546:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8018548:	68fb      	ldr	r3, [r7, #12]
 801854a:	88fa      	ldrh	r2, [r7, #6]
 801854c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 801854e:	68fb      	ldr	r3, [r7, #12]
 8018550:	88fa      	ldrh	r2, [r7, #6]
 8018552:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018554:	68fb      	ldr	r3, [r7, #12]
 8018556:	2200      	movs	r2, #0
 8018558:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801855a:	68fb      	ldr	r3, [r7, #12]
 801855c:	2222      	movs	r2, #34	@ 0x22
 801855e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8018562:	68fb      	ldr	r3, [r7, #12]
 8018564:	691b      	ldr	r3, [r3, #16]
 8018566:	2b00      	cmp	r3, #0
 8018568:	d007      	beq.n	801857a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 801856a:	68fb      	ldr	r3, [r7, #12]
 801856c:	681b      	ldr	r3, [r3, #0]
 801856e:	68da      	ldr	r2, [r3, #12]
 8018570:	68fb      	ldr	r3, [r7, #12]
 8018572:	681b      	ldr	r3, [r3, #0]
 8018574:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8018578:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 801857a:	68fb      	ldr	r3, [r7, #12]
 801857c:	681b      	ldr	r3, [r3, #0]
 801857e:	695a      	ldr	r2, [r3, #20]
 8018580:	68fb      	ldr	r3, [r7, #12]
 8018582:	681b      	ldr	r3, [r3, #0]
 8018584:	f042 0201 	orr.w	r2, r2, #1
 8018588:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 801858a:	68fb      	ldr	r3, [r7, #12]
 801858c:	681b      	ldr	r3, [r3, #0]
 801858e:	68da      	ldr	r2, [r3, #12]
 8018590:	68fb      	ldr	r3, [r7, #12]
 8018592:	681b      	ldr	r3, [r3, #0]
 8018594:	f042 0220 	orr.w	r2, r2, #32
 8018598:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801859a:	2300      	movs	r3, #0
}
 801859c:	4618      	mov	r0, r3
 801859e:	3714      	adds	r7, #20
 80185a0:	46bd      	mov	sp, r7
 80185a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185a6:	4770      	bx	lr

080185a8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80185a8:	b580      	push	{r7, lr}
 80185aa:	b098      	sub	sp, #96	@ 0x60
 80185ac:	af00      	add	r7, sp, #0
 80185ae:	60f8      	str	r0, [r7, #12]
 80185b0:	60b9      	str	r1, [r7, #8]
 80185b2:	4613      	mov	r3, r2
 80185b4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80185b6:	68ba      	ldr	r2, [r7, #8]
 80185b8:	68fb      	ldr	r3, [r7, #12]
 80185ba:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80185bc:	68fb      	ldr	r3, [r7, #12]
 80185be:	88fa      	ldrh	r2, [r7, #6]
 80185c0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80185c2:	68fb      	ldr	r3, [r7, #12]
 80185c4:	2200      	movs	r2, #0
 80185c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80185c8:	68fb      	ldr	r3, [r7, #12]
 80185ca:	2222      	movs	r2, #34	@ 0x22
 80185cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80185d0:	68fb      	ldr	r3, [r7, #12]
 80185d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80185d4:	4a3e      	ldr	r2, [pc, #248]	@ (80186d0 <UART_Start_Receive_DMA+0x128>)
 80185d6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80185d8:	68fb      	ldr	r3, [r7, #12]
 80185da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80185dc:	4a3d      	ldr	r2, [pc, #244]	@ (80186d4 <UART_Start_Receive_DMA+0x12c>)
 80185de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80185e0:	68fb      	ldr	r3, [r7, #12]
 80185e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80185e4:	4a3c      	ldr	r2, [pc, #240]	@ (80186d8 <UART_Start_Receive_DMA+0x130>)
 80185e6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80185e8:	68fb      	ldr	r3, [r7, #12]
 80185ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80185ec:	2200      	movs	r2, #0
 80185ee:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80185f0:	f107 0308 	add.w	r3, r7, #8
 80185f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80185f6:	68fb      	ldr	r3, [r7, #12]
 80185f8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80185fa:	68fb      	ldr	r3, [r7, #12]
 80185fc:	681b      	ldr	r3, [r3, #0]
 80185fe:	3304      	adds	r3, #4
 8018600:	4619      	mov	r1, r3
 8018602:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018604:	681a      	ldr	r2, [r3, #0]
 8018606:	88fb      	ldrh	r3, [r7, #6]
 8018608:	f7ed ff6f 	bl	80064ea <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 801860c:	2300      	movs	r3, #0
 801860e:	613b      	str	r3, [r7, #16]
 8018610:	68fb      	ldr	r3, [r7, #12]
 8018612:	681b      	ldr	r3, [r3, #0]
 8018614:	681b      	ldr	r3, [r3, #0]
 8018616:	613b      	str	r3, [r7, #16]
 8018618:	68fb      	ldr	r3, [r7, #12]
 801861a:	681b      	ldr	r3, [r3, #0]
 801861c:	685b      	ldr	r3, [r3, #4]
 801861e:	613b      	str	r3, [r7, #16]
 8018620:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8018622:	68fb      	ldr	r3, [r7, #12]
 8018624:	691b      	ldr	r3, [r3, #16]
 8018626:	2b00      	cmp	r3, #0
 8018628:	d019      	beq.n	801865e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801862a:	68fb      	ldr	r3, [r7, #12]
 801862c:	681b      	ldr	r3, [r3, #0]
 801862e:	330c      	adds	r3, #12
 8018630:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018632:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018634:	e853 3f00 	ldrex	r3, [r3]
 8018638:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801863a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801863c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8018640:	65bb      	str	r3, [r7, #88]	@ 0x58
 8018642:	68fb      	ldr	r3, [r7, #12]
 8018644:	681b      	ldr	r3, [r3, #0]
 8018646:	330c      	adds	r3, #12
 8018648:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801864a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 801864c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801864e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8018650:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018652:	e841 2300 	strex	r3, r2, [r1]
 8018656:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8018658:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801865a:	2b00      	cmp	r3, #0
 801865c:	d1e5      	bne.n	801862a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801865e:	68fb      	ldr	r3, [r7, #12]
 8018660:	681b      	ldr	r3, [r3, #0]
 8018662:	3314      	adds	r3, #20
 8018664:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018668:	e853 3f00 	ldrex	r3, [r3]
 801866c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801866e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018670:	f043 0301 	orr.w	r3, r3, #1
 8018674:	657b      	str	r3, [r7, #84]	@ 0x54
 8018676:	68fb      	ldr	r3, [r7, #12]
 8018678:	681b      	ldr	r3, [r3, #0]
 801867a:	3314      	adds	r3, #20
 801867c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801867e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8018680:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018682:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8018684:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8018686:	e841 2300 	strex	r3, r2, [r1]
 801868a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801868c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801868e:	2b00      	cmp	r3, #0
 8018690:	d1e5      	bne.n	801865e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8018692:	68fb      	ldr	r3, [r7, #12]
 8018694:	681b      	ldr	r3, [r3, #0]
 8018696:	3314      	adds	r3, #20
 8018698:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801869a:	69bb      	ldr	r3, [r7, #24]
 801869c:	e853 3f00 	ldrex	r3, [r3]
 80186a0:	617b      	str	r3, [r7, #20]
   return(result);
 80186a2:	697b      	ldr	r3, [r7, #20]
 80186a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80186a8:	653b      	str	r3, [r7, #80]	@ 0x50
 80186aa:	68fb      	ldr	r3, [r7, #12]
 80186ac:	681b      	ldr	r3, [r3, #0]
 80186ae:	3314      	adds	r3, #20
 80186b0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80186b2:	627a      	str	r2, [r7, #36]	@ 0x24
 80186b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80186b6:	6a39      	ldr	r1, [r7, #32]
 80186b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80186ba:	e841 2300 	strex	r3, r2, [r1]
 80186be:	61fb      	str	r3, [r7, #28]
   return(result);
 80186c0:	69fb      	ldr	r3, [r7, #28]
 80186c2:	2b00      	cmp	r3, #0
 80186c4:	d1e5      	bne.n	8018692 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80186c6:	2300      	movs	r3, #0
}
 80186c8:	4618      	mov	r0, r3
 80186ca:	3760      	adds	r7, #96	@ 0x60
 80186cc:	46bd      	mov	sp, r7
 80186ce:	bd80      	pop	{r7, pc}
 80186d0:	08018287 	.word	0x08018287
 80186d4:	080183b3 	.word	0x080183b3
 80186d8:	080183ef 	.word	0x080183ef

080186dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80186dc:	b480      	push	{r7}
 80186de:	b089      	sub	sp, #36	@ 0x24
 80186e0:	af00      	add	r7, sp, #0
 80186e2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80186e4:	687b      	ldr	r3, [r7, #4]
 80186e6:	681b      	ldr	r3, [r3, #0]
 80186e8:	330c      	adds	r3, #12
 80186ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80186ec:	68fb      	ldr	r3, [r7, #12]
 80186ee:	e853 3f00 	ldrex	r3, [r3]
 80186f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80186f4:	68bb      	ldr	r3, [r7, #8]
 80186f6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80186fa:	61fb      	str	r3, [r7, #28]
 80186fc:	687b      	ldr	r3, [r7, #4]
 80186fe:	681b      	ldr	r3, [r3, #0]
 8018700:	330c      	adds	r3, #12
 8018702:	69fa      	ldr	r2, [r7, #28]
 8018704:	61ba      	str	r2, [r7, #24]
 8018706:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018708:	6979      	ldr	r1, [r7, #20]
 801870a:	69ba      	ldr	r2, [r7, #24]
 801870c:	e841 2300 	strex	r3, r2, [r1]
 8018710:	613b      	str	r3, [r7, #16]
   return(result);
 8018712:	693b      	ldr	r3, [r7, #16]
 8018714:	2b00      	cmp	r3, #0
 8018716:	d1e5      	bne.n	80186e4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8018718:	687b      	ldr	r3, [r7, #4]
 801871a:	2220      	movs	r2, #32
 801871c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8018720:	bf00      	nop
 8018722:	3724      	adds	r7, #36	@ 0x24
 8018724:	46bd      	mov	sp, r7
 8018726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801872a:	4770      	bx	lr

0801872c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801872c:	b480      	push	{r7}
 801872e:	b095      	sub	sp, #84	@ 0x54
 8018730:	af00      	add	r7, sp, #0
 8018732:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8018734:	687b      	ldr	r3, [r7, #4]
 8018736:	681b      	ldr	r3, [r3, #0]
 8018738:	330c      	adds	r3, #12
 801873a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801873c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801873e:	e853 3f00 	ldrex	r3, [r3]
 8018742:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8018744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018746:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801874a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801874c:	687b      	ldr	r3, [r7, #4]
 801874e:	681b      	ldr	r3, [r3, #0]
 8018750:	330c      	adds	r3, #12
 8018752:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018754:	643a      	str	r2, [r7, #64]	@ 0x40
 8018756:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018758:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801875a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801875c:	e841 2300 	strex	r3, r2, [r1]
 8018760:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8018762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018764:	2b00      	cmp	r3, #0
 8018766:	d1e5      	bne.n	8018734 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018768:	687b      	ldr	r3, [r7, #4]
 801876a:	681b      	ldr	r3, [r3, #0]
 801876c:	3314      	adds	r3, #20
 801876e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018770:	6a3b      	ldr	r3, [r7, #32]
 8018772:	e853 3f00 	ldrex	r3, [r3]
 8018776:	61fb      	str	r3, [r7, #28]
   return(result);
 8018778:	69fb      	ldr	r3, [r7, #28]
 801877a:	f023 0301 	bic.w	r3, r3, #1
 801877e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	681b      	ldr	r3, [r3, #0]
 8018784:	3314      	adds	r3, #20
 8018786:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8018788:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801878a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801878c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801878e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018790:	e841 2300 	strex	r3, r2, [r1]
 8018794:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8018796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018798:	2b00      	cmp	r3, #0
 801879a:	d1e5      	bne.n	8018768 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801879c:	687b      	ldr	r3, [r7, #4]
 801879e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80187a0:	2b01      	cmp	r3, #1
 80187a2:	d119      	bne.n	80187d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80187a4:	687b      	ldr	r3, [r7, #4]
 80187a6:	681b      	ldr	r3, [r3, #0]
 80187a8:	330c      	adds	r3, #12
 80187aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80187ac:	68fb      	ldr	r3, [r7, #12]
 80187ae:	e853 3f00 	ldrex	r3, [r3]
 80187b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80187b4:	68bb      	ldr	r3, [r7, #8]
 80187b6:	f023 0310 	bic.w	r3, r3, #16
 80187ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80187bc:	687b      	ldr	r3, [r7, #4]
 80187be:	681b      	ldr	r3, [r3, #0]
 80187c0:	330c      	adds	r3, #12
 80187c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80187c4:	61ba      	str	r2, [r7, #24]
 80187c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80187c8:	6979      	ldr	r1, [r7, #20]
 80187ca:	69ba      	ldr	r2, [r7, #24]
 80187cc:	e841 2300 	strex	r3, r2, [r1]
 80187d0:	613b      	str	r3, [r7, #16]
   return(result);
 80187d2:	693b      	ldr	r3, [r7, #16]
 80187d4:	2b00      	cmp	r3, #0
 80187d6:	d1e5      	bne.n	80187a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80187d8:	687b      	ldr	r3, [r7, #4]
 80187da:	2220      	movs	r2, #32
 80187dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80187e0:	687b      	ldr	r3, [r7, #4]
 80187e2:	2200      	movs	r2, #0
 80187e4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80187e6:	bf00      	nop
 80187e8:	3754      	adds	r7, #84	@ 0x54
 80187ea:	46bd      	mov	sp, r7
 80187ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187f0:	4770      	bx	lr

080187f2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80187f2:	b580      	push	{r7, lr}
 80187f4:	b084      	sub	sp, #16
 80187f6:	af00      	add	r7, sp, #0
 80187f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80187fa:	687b      	ldr	r3, [r7, #4]
 80187fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80187fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8018800:	68fb      	ldr	r3, [r7, #12]
 8018802:	2200      	movs	r2, #0
 8018804:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8018806:	68fb      	ldr	r3, [r7, #12]
 8018808:	2200      	movs	r2, #0
 801880a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801880c:	68f8      	ldr	r0, [r7, #12]
 801880e:	f7e7 ff55 	bl	80006bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018812:	bf00      	nop
 8018814:	3710      	adds	r7, #16
 8018816:	46bd      	mov	sp, r7
 8018818:	bd80      	pop	{r7, pc}

0801881a <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 801881a:	b580      	push	{r7, lr}
 801881c:	b084      	sub	sp, #16
 801881e:	af00      	add	r7, sp, #0
 8018820:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8018822:	687b      	ldr	r3, [r7, #4]
 8018824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018826:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8018828:	68fb      	ldr	r3, [r7, #12]
 801882a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801882c:	2200      	movs	r2, #0
 801882e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8018830:	68fb      	ldr	r3, [r7, #12]
 8018832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018834:	2b00      	cmp	r3, #0
 8018836:	d004      	beq.n	8018842 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8018838:	68fb      	ldr	r3, [r7, #12]
 801883a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801883c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801883e:	2b00      	cmp	r3, #0
 8018840:	d117      	bne.n	8018872 <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8018842:	68fb      	ldr	r3, [r7, #12]
 8018844:	2200      	movs	r2, #0
 8018846:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 8018848:	68fb      	ldr	r3, [r7, #12]
 801884a:	2200      	movs	r2, #0
 801884c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801884e:	68fb      	ldr	r3, [r7, #12]
 8018850:	2200      	movs	r2, #0
 8018852:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8018854:	68fb      	ldr	r3, [r7, #12]
 8018856:	2220      	movs	r2, #32
 8018858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 801885c:	68fb      	ldr	r3, [r7, #12]
 801885e:	2220      	movs	r2, #32
 8018860:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018864:	68fb      	ldr	r3, [r7, #12]
 8018866:	2200      	movs	r2, #0
 8018868:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 801886a:	68f8      	ldr	r0, [r7, #12]
 801886c:	f7ff fb3a 	bl	8017ee4 <HAL_UART_AbortCpltCallback>
 8018870:	e000      	b.n	8018874 <UART_DMATxAbortCallback+0x5a>
      return;
 8018872:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018874:	3710      	adds	r7, #16
 8018876:	46bd      	mov	sp, r7
 8018878:	bd80      	pop	{r7, pc}

0801887a <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 801887a:	b580      	push	{r7, lr}
 801887c:	b084      	sub	sp, #16
 801887e:	af00      	add	r7, sp, #0
 8018880:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8018882:	687b      	ldr	r3, [r7, #4]
 8018884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018886:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8018888:	68fb      	ldr	r3, [r7, #12]
 801888a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801888c:	2200      	movs	r2, #0
 801888e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8018890:	68fb      	ldr	r3, [r7, #12]
 8018892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018894:	2b00      	cmp	r3, #0
 8018896:	d004      	beq.n	80188a2 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8018898:	68fb      	ldr	r3, [r7, #12]
 801889a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801889c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801889e:	2b00      	cmp	r3, #0
 80188a0:	d117      	bne.n	80188d2 <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 80188a2:	68fb      	ldr	r3, [r7, #12]
 80188a4:	2200      	movs	r2, #0
 80188a6:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 80188a8:	68fb      	ldr	r3, [r7, #12]
 80188aa:	2200      	movs	r2, #0
 80188ac:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80188ae:	68fb      	ldr	r3, [r7, #12]
 80188b0:	2200      	movs	r2, #0
 80188b2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80188b4:	68fb      	ldr	r3, [r7, #12]
 80188b6:	2220      	movs	r2, #32
 80188b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80188bc:	68fb      	ldr	r3, [r7, #12]
 80188be:	2220      	movs	r2, #32
 80188c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80188c4:	68fb      	ldr	r3, [r7, #12]
 80188c6:	2200      	movs	r2, #0
 80188c8:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80188ca:	68f8      	ldr	r0, [r7, #12]
 80188cc:	f7ff fb0a 	bl	8017ee4 <HAL_UART_AbortCpltCallback>
 80188d0:	e000      	b.n	80188d4 <UART_DMARxAbortCallback+0x5a>
      return;
 80188d2:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80188d4:	3710      	adds	r7, #16
 80188d6:	46bd      	mov	sp, r7
 80188d8:	bd80      	pop	{r7, pc}

080188da <UART_DMATxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80188da:	b580      	push	{r7, lr}
 80188dc:	b084      	sub	sp, #16
 80188de:	af00      	add	r7, sp, #0
 80188e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80188e2:	687b      	ldr	r3, [r7, #4]
 80188e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80188e6:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0x00U;
 80188e8:	68fb      	ldr	r3, [r7, #12]
 80188ea:	2200      	movs	r2, #0
 80188ec:	84da      	strh	r2, [r3, #38]	@ 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80188ee:	68fb      	ldr	r3, [r7, #12]
 80188f0:	2220      	movs	r2, #32
 80188f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 80188f6:	68f8      	ldr	r0, [r7, #12]
 80188f8:	f7ff fafe 	bl	8017ef8 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80188fc:	bf00      	nop
 80188fe:	3710      	adds	r7, #16
 8018900:	46bd      	mov	sp, r7
 8018902:	bd80      	pop	{r7, pc}

08018904 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8018904:	b580      	push	{r7, lr}
 8018906:	b084      	sub	sp, #16
 8018908:	af00      	add	r7, sp, #0
 801890a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801890c:	687b      	ldr	r3, [r7, #4]
 801890e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018910:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8018912:	68fb      	ldr	r3, [r7, #12]
 8018914:	2200      	movs	r2, #0
 8018916:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8018918:	68fb      	ldr	r3, [r7, #12]
 801891a:	2220      	movs	r2, #32
 801891c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018920:	68fb      	ldr	r3, [r7, #12]
 8018922:	2200      	movs	r2, #0
 8018924:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8018926:	68f8      	ldr	r0, [r7, #12]
 8018928:	f7ff faf0 	bl	8017f0c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801892c:	bf00      	nop
 801892e:	3710      	adds	r7, #16
 8018930:	46bd      	mov	sp, r7
 8018932:	bd80      	pop	{r7, pc}

08018934 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8018934:	b480      	push	{r7}
 8018936:	b085      	sub	sp, #20
 8018938:	af00      	add	r7, sp, #0
 801893a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801893c:	687b      	ldr	r3, [r7, #4]
 801893e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8018942:	b2db      	uxtb	r3, r3
 8018944:	2b21      	cmp	r3, #33	@ 0x21
 8018946:	d13e      	bne.n	80189c6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8018948:	687b      	ldr	r3, [r7, #4]
 801894a:	689b      	ldr	r3, [r3, #8]
 801894c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8018950:	d114      	bne.n	801897c <UART_Transmit_IT+0x48>
 8018952:	687b      	ldr	r3, [r7, #4]
 8018954:	691b      	ldr	r3, [r3, #16]
 8018956:	2b00      	cmp	r3, #0
 8018958:	d110      	bne.n	801897c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 801895a:	687b      	ldr	r3, [r7, #4]
 801895c:	6a1b      	ldr	r3, [r3, #32]
 801895e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8018960:	68fb      	ldr	r3, [r7, #12]
 8018962:	881b      	ldrh	r3, [r3, #0]
 8018964:	461a      	mov	r2, r3
 8018966:	687b      	ldr	r3, [r7, #4]
 8018968:	681b      	ldr	r3, [r3, #0]
 801896a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801896e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8018970:	687b      	ldr	r3, [r7, #4]
 8018972:	6a1b      	ldr	r3, [r3, #32]
 8018974:	1c9a      	adds	r2, r3, #2
 8018976:	687b      	ldr	r3, [r7, #4]
 8018978:	621a      	str	r2, [r3, #32]
 801897a:	e008      	b.n	801898e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 801897c:	687b      	ldr	r3, [r7, #4]
 801897e:	6a1b      	ldr	r3, [r3, #32]
 8018980:	1c59      	adds	r1, r3, #1
 8018982:	687a      	ldr	r2, [r7, #4]
 8018984:	6211      	str	r1, [r2, #32]
 8018986:	781a      	ldrb	r2, [r3, #0]
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	681b      	ldr	r3, [r3, #0]
 801898c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 801898e:	687b      	ldr	r3, [r7, #4]
 8018990:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8018992:	b29b      	uxth	r3, r3
 8018994:	3b01      	subs	r3, #1
 8018996:	b29b      	uxth	r3, r3
 8018998:	687a      	ldr	r2, [r7, #4]
 801899a:	4619      	mov	r1, r3
 801899c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 801899e:	2b00      	cmp	r3, #0
 80189a0:	d10f      	bne.n	80189c2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80189a2:	687b      	ldr	r3, [r7, #4]
 80189a4:	681b      	ldr	r3, [r3, #0]
 80189a6:	68da      	ldr	r2, [r3, #12]
 80189a8:	687b      	ldr	r3, [r7, #4]
 80189aa:	681b      	ldr	r3, [r3, #0]
 80189ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80189b0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80189b2:	687b      	ldr	r3, [r7, #4]
 80189b4:	681b      	ldr	r3, [r3, #0]
 80189b6:	68da      	ldr	r2, [r3, #12]
 80189b8:	687b      	ldr	r3, [r7, #4]
 80189ba:	681b      	ldr	r3, [r3, #0]
 80189bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80189c0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80189c2:	2300      	movs	r3, #0
 80189c4:	e000      	b.n	80189c8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80189c6:	2302      	movs	r3, #2
  }
}
 80189c8:	4618      	mov	r0, r3
 80189ca:	3714      	adds	r7, #20
 80189cc:	46bd      	mov	sp, r7
 80189ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189d2:	4770      	bx	lr

080189d4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80189d4:	b580      	push	{r7, lr}
 80189d6:	b082      	sub	sp, #8
 80189d8:	af00      	add	r7, sp, #0
 80189da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80189dc:	687b      	ldr	r3, [r7, #4]
 80189de:	681b      	ldr	r3, [r3, #0]
 80189e0:	68da      	ldr	r2, [r3, #12]
 80189e2:	687b      	ldr	r3, [r7, #4]
 80189e4:	681b      	ldr	r3, [r3, #0]
 80189e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80189ea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80189ec:	687b      	ldr	r3, [r7, #4]
 80189ee:	2220      	movs	r2, #32
 80189f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80189f4:	6878      	ldr	r0, [r7, #4]
 80189f6:	f7ff fa43 	bl	8017e80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80189fa:	2300      	movs	r3, #0
}
 80189fc:	4618      	mov	r0, r3
 80189fe:	3708      	adds	r7, #8
 8018a00:	46bd      	mov	sp, r7
 8018a02:	bd80      	pop	{r7, pc}

08018a04 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8018a04:	b580      	push	{r7, lr}
 8018a06:	b08c      	sub	sp, #48	@ 0x30
 8018a08:	af00      	add	r7, sp, #0
 8018a0a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8018a0c:	687b      	ldr	r3, [r7, #4]
 8018a0e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8018a12:	b2db      	uxtb	r3, r3
 8018a14:	2b22      	cmp	r3, #34	@ 0x22
 8018a16:	f040 80ae 	bne.w	8018b76 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8018a1a:	687b      	ldr	r3, [r7, #4]
 8018a1c:	689b      	ldr	r3, [r3, #8]
 8018a1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8018a22:	d117      	bne.n	8018a54 <UART_Receive_IT+0x50>
 8018a24:	687b      	ldr	r3, [r7, #4]
 8018a26:	691b      	ldr	r3, [r3, #16]
 8018a28:	2b00      	cmp	r3, #0
 8018a2a:	d113      	bne.n	8018a54 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8018a2c:	2300      	movs	r3, #0
 8018a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8018a30:	687b      	ldr	r3, [r7, #4]
 8018a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018a34:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8018a36:	687b      	ldr	r3, [r7, #4]
 8018a38:	681b      	ldr	r3, [r3, #0]
 8018a3a:	685b      	ldr	r3, [r3, #4]
 8018a3c:	b29b      	uxth	r3, r3
 8018a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018a42:	b29a      	uxth	r2, r3
 8018a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a46:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8018a48:	687b      	ldr	r3, [r7, #4]
 8018a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018a4c:	1c9a      	adds	r2, r3, #2
 8018a4e:	687b      	ldr	r3, [r7, #4]
 8018a50:	629a      	str	r2, [r3, #40]	@ 0x28
 8018a52:	e026      	b.n	8018aa2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8018a54:	687b      	ldr	r3, [r7, #4]
 8018a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8018a5a:	2300      	movs	r3, #0
 8018a5c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8018a5e:	687b      	ldr	r3, [r7, #4]
 8018a60:	689b      	ldr	r3, [r3, #8]
 8018a62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8018a66:	d007      	beq.n	8018a78 <UART_Receive_IT+0x74>
 8018a68:	687b      	ldr	r3, [r7, #4]
 8018a6a:	689b      	ldr	r3, [r3, #8]
 8018a6c:	2b00      	cmp	r3, #0
 8018a6e:	d10a      	bne.n	8018a86 <UART_Receive_IT+0x82>
 8018a70:	687b      	ldr	r3, [r7, #4]
 8018a72:	691b      	ldr	r3, [r3, #16]
 8018a74:	2b00      	cmp	r3, #0
 8018a76:	d106      	bne.n	8018a86 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8018a78:	687b      	ldr	r3, [r7, #4]
 8018a7a:	681b      	ldr	r3, [r3, #0]
 8018a7c:	685b      	ldr	r3, [r3, #4]
 8018a7e:	b2da      	uxtb	r2, r3
 8018a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a82:	701a      	strb	r2, [r3, #0]
 8018a84:	e008      	b.n	8018a98 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8018a86:	687b      	ldr	r3, [r7, #4]
 8018a88:	681b      	ldr	r3, [r3, #0]
 8018a8a:	685b      	ldr	r3, [r3, #4]
 8018a8c:	b2db      	uxtb	r3, r3
 8018a8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018a92:	b2da      	uxtb	r2, r3
 8018a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a96:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8018a98:	687b      	ldr	r3, [r7, #4]
 8018a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018a9c:	1c5a      	adds	r2, r3, #1
 8018a9e:	687b      	ldr	r3, [r7, #4]
 8018aa0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8018aa2:	687b      	ldr	r3, [r7, #4]
 8018aa4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8018aa6:	b29b      	uxth	r3, r3
 8018aa8:	3b01      	subs	r3, #1
 8018aaa:	b29b      	uxth	r3, r3
 8018aac:	687a      	ldr	r2, [r7, #4]
 8018aae:	4619      	mov	r1, r3
 8018ab0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8018ab2:	2b00      	cmp	r3, #0
 8018ab4:	d15d      	bne.n	8018b72 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8018ab6:	687b      	ldr	r3, [r7, #4]
 8018ab8:	681b      	ldr	r3, [r3, #0]
 8018aba:	68da      	ldr	r2, [r3, #12]
 8018abc:	687b      	ldr	r3, [r7, #4]
 8018abe:	681b      	ldr	r3, [r3, #0]
 8018ac0:	f022 0220 	bic.w	r2, r2, #32
 8018ac4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8018ac6:	687b      	ldr	r3, [r7, #4]
 8018ac8:	681b      	ldr	r3, [r3, #0]
 8018aca:	68da      	ldr	r2, [r3, #12]
 8018acc:	687b      	ldr	r3, [r7, #4]
 8018ace:	681b      	ldr	r3, [r3, #0]
 8018ad0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8018ad4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8018ad6:	687b      	ldr	r3, [r7, #4]
 8018ad8:	681b      	ldr	r3, [r3, #0]
 8018ada:	695a      	ldr	r2, [r3, #20]
 8018adc:	687b      	ldr	r3, [r7, #4]
 8018ade:	681b      	ldr	r3, [r3, #0]
 8018ae0:	f022 0201 	bic.w	r2, r2, #1
 8018ae4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8018ae6:	687b      	ldr	r3, [r7, #4]
 8018ae8:	2220      	movs	r2, #32
 8018aea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018aee:	687b      	ldr	r3, [r7, #4]
 8018af0:	2200      	movs	r2, #0
 8018af2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018af4:	687b      	ldr	r3, [r7, #4]
 8018af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018af8:	2b01      	cmp	r3, #1
 8018afa:	d135      	bne.n	8018b68 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018afc:	687b      	ldr	r3, [r7, #4]
 8018afe:	2200      	movs	r2, #0
 8018b00:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018b02:	687b      	ldr	r3, [r7, #4]
 8018b04:	681b      	ldr	r3, [r3, #0]
 8018b06:	330c      	adds	r3, #12
 8018b08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018b0a:	697b      	ldr	r3, [r7, #20]
 8018b0c:	e853 3f00 	ldrex	r3, [r3]
 8018b10:	613b      	str	r3, [r7, #16]
   return(result);
 8018b12:	693b      	ldr	r3, [r7, #16]
 8018b14:	f023 0310 	bic.w	r3, r3, #16
 8018b18:	627b      	str	r3, [r7, #36]	@ 0x24
 8018b1a:	687b      	ldr	r3, [r7, #4]
 8018b1c:	681b      	ldr	r3, [r3, #0]
 8018b1e:	330c      	adds	r3, #12
 8018b20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018b22:	623a      	str	r2, [r7, #32]
 8018b24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018b26:	69f9      	ldr	r1, [r7, #28]
 8018b28:	6a3a      	ldr	r2, [r7, #32]
 8018b2a:	e841 2300 	strex	r3, r2, [r1]
 8018b2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8018b30:	69bb      	ldr	r3, [r7, #24]
 8018b32:	2b00      	cmp	r3, #0
 8018b34:	d1e5      	bne.n	8018b02 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8018b36:	687b      	ldr	r3, [r7, #4]
 8018b38:	681b      	ldr	r3, [r3, #0]
 8018b3a:	681b      	ldr	r3, [r3, #0]
 8018b3c:	f003 0310 	and.w	r3, r3, #16
 8018b40:	2b10      	cmp	r3, #16
 8018b42:	d10a      	bne.n	8018b5a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8018b44:	2300      	movs	r3, #0
 8018b46:	60fb      	str	r3, [r7, #12]
 8018b48:	687b      	ldr	r3, [r7, #4]
 8018b4a:	681b      	ldr	r3, [r3, #0]
 8018b4c:	681b      	ldr	r3, [r3, #0]
 8018b4e:	60fb      	str	r3, [r7, #12]
 8018b50:	687b      	ldr	r3, [r7, #4]
 8018b52:	681b      	ldr	r3, [r3, #0]
 8018b54:	685b      	ldr	r3, [r3, #4]
 8018b56:	60fb      	str	r3, [r7, #12]
 8018b58:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8018b5a:	687b      	ldr	r3, [r7, #4]
 8018b5c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8018b5e:	4619      	mov	r1, r3
 8018b60:	6878      	ldr	r0, [r7, #4]
 8018b62:	f7ff f9dd 	bl	8017f20 <HAL_UARTEx_RxEventCallback>
 8018b66:	e002      	b.n	8018b6e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8018b68:	6878      	ldr	r0, [r7, #4]
 8018b6a:	f7e7 fd07 	bl	800057c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8018b6e:	2300      	movs	r3, #0
 8018b70:	e002      	b.n	8018b78 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8018b72:	2300      	movs	r3, #0
 8018b74:	e000      	b.n	8018b78 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8018b76:	2302      	movs	r3, #2
  }
}
 8018b78:	4618      	mov	r0, r3
 8018b7a:	3730      	adds	r7, #48	@ 0x30
 8018b7c:	46bd      	mov	sp, r7
 8018b7e:	bd80      	pop	{r7, pc}

08018b80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8018b80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8018b84:	b0c0      	sub	sp, #256	@ 0x100
 8018b86:	af00      	add	r7, sp, #0
 8018b88:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8018b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8018b90:	681b      	ldr	r3, [r3, #0]
 8018b92:	691b      	ldr	r3, [r3, #16]
 8018b94:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8018b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8018b9c:	68d9      	ldr	r1, [r3, #12]
 8018b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8018ba2:	681a      	ldr	r2, [r3, #0]
 8018ba4:	ea40 0301 	orr.w	r3, r0, r1
 8018ba8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8018baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8018bae:	689a      	ldr	r2, [r3, #8]
 8018bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8018bb4:	691b      	ldr	r3, [r3, #16]
 8018bb6:	431a      	orrs	r2, r3
 8018bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8018bbc:	695b      	ldr	r3, [r3, #20]
 8018bbe:	431a      	orrs	r2, r3
 8018bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8018bc4:	69db      	ldr	r3, [r3, #28]
 8018bc6:	4313      	orrs	r3, r2
 8018bc8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8018bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8018bd0:	681b      	ldr	r3, [r3, #0]
 8018bd2:	68db      	ldr	r3, [r3, #12]
 8018bd4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8018bd8:	f021 010c 	bic.w	r1, r1, #12
 8018bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8018be0:	681a      	ldr	r2, [r3, #0]
 8018be2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8018be6:	430b      	orrs	r3, r1
 8018be8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8018bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8018bee:	681b      	ldr	r3, [r3, #0]
 8018bf0:	695b      	ldr	r3, [r3, #20]
 8018bf2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8018bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8018bfa:	6999      	ldr	r1, [r3, #24]
 8018bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8018c00:	681a      	ldr	r2, [r3, #0]
 8018c02:	ea40 0301 	orr.w	r3, r0, r1
 8018c06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8018c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8018c0c:	681a      	ldr	r2, [r3, #0]
 8018c0e:	4b8f      	ldr	r3, [pc, #572]	@ (8018e4c <UART_SetConfig+0x2cc>)
 8018c10:	429a      	cmp	r2, r3
 8018c12:	d005      	beq.n	8018c20 <UART_SetConfig+0xa0>
 8018c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8018c18:	681a      	ldr	r2, [r3, #0]
 8018c1a:	4b8d      	ldr	r3, [pc, #564]	@ (8018e50 <UART_SetConfig+0x2d0>)
 8018c1c:	429a      	cmp	r2, r3
 8018c1e:	d104      	bne.n	8018c2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8018c20:	f7f5 fb88 	bl	800e334 <HAL_RCC_GetPCLK2Freq>
 8018c24:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8018c28:	e003      	b.n	8018c32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8018c2a:	f7f5 fb6f 	bl	800e30c <HAL_RCC_GetPCLK1Freq>
 8018c2e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8018c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8018c36:	69db      	ldr	r3, [r3, #28]
 8018c38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8018c3c:	f040 810c 	bne.w	8018e58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8018c40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8018c44:	2200      	movs	r2, #0
 8018c46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8018c4a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8018c4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8018c52:	4622      	mov	r2, r4
 8018c54:	462b      	mov	r3, r5
 8018c56:	1891      	adds	r1, r2, r2
 8018c58:	65b9      	str	r1, [r7, #88]	@ 0x58
 8018c5a:	415b      	adcs	r3, r3
 8018c5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8018c5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8018c62:	4621      	mov	r1, r4
 8018c64:	eb12 0801 	adds.w	r8, r2, r1
 8018c68:	4629      	mov	r1, r5
 8018c6a:	eb43 0901 	adc.w	r9, r3, r1
 8018c6e:	f04f 0200 	mov.w	r2, #0
 8018c72:	f04f 0300 	mov.w	r3, #0
 8018c76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8018c7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8018c7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8018c82:	4690      	mov	r8, r2
 8018c84:	4699      	mov	r9, r3
 8018c86:	4623      	mov	r3, r4
 8018c88:	eb18 0303 	adds.w	r3, r8, r3
 8018c8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8018c90:	462b      	mov	r3, r5
 8018c92:	eb49 0303 	adc.w	r3, r9, r3
 8018c96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8018c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8018c9e:	685b      	ldr	r3, [r3, #4]
 8018ca0:	2200      	movs	r2, #0
 8018ca2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8018ca6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8018caa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8018cae:	460b      	mov	r3, r1
 8018cb0:	18db      	adds	r3, r3, r3
 8018cb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8018cb4:	4613      	mov	r3, r2
 8018cb6:	eb42 0303 	adc.w	r3, r2, r3
 8018cba:	657b      	str	r3, [r7, #84]	@ 0x54
 8018cbc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8018cc0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8018cc4:	f001 fae0 	bl	801a288 <__aeabi_uldivmod>
 8018cc8:	4602      	mov	r2, r0
 8018cca:	460b      	mov	r3, r1
 8018ccc:	4b61      	ldr	r3, [pc, #388]	@ (8018e54 <UART_SetConfig+0x2d4>)
 8018cce:	fba3 2302 	umull	r2, r3, r3, r2
 8018cd2:	095b      	lsrs	r3, r3, #5
 8018cd4:	011c      	lsls	r4, r3, #4
 8018cd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8018cda:	2200      	movs	r2, #0
 8018cdc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8018ce0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8018ce4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8018ce8:	4642      	mov	r2, r8
 8018cea:	464b      	mov	r3, r9
 8018cec:	1891      	adds	r1, r2, r2
 8018cee:	64b9      	str	r1, [r7, #72]	@ 0x48
 8018cf0:	415b      	adcs	r3, r3
 8018cf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8018cf4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8018cf8:	4641      	mov	r1, r8
 8018cfa:	eb12 0a01 	adds.w	sl, r2, r1
 8018cfe:	4649      	mov	r1, r9
 8018d00:	eb43 0b01 	adc.w	fp, r3, r1
 8018d04:	f04f 0200 	mov.w	r2, #0
 8018d08:	f04f 0300 	mov.w	r3, #0
 8018d0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8018d10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8018d14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8018d18:	4692      	mov	sl, r2
 8018d1a:	469b      	mov	fp, r3
 8018d1c:	4643      	mov	r3, r8
 8018d1e:	eb1a 0303 	adds.w	r3, sl, r3
 8018d22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8018d26:	464b      	mov	r3, r9
 8018d28:	eb4b 0303 	adc.w	r3, fp, r3
 8018d2c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8018d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8018d34:	685b      	ldr	r3, [r3, #4]
 8018d36:	2200      	movs	r2, #0
 8018d38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8018d3c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8018d40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8018d44:	460b      	mov	r3, r1
 8018d46:	18db      	adds	r3, r3, r3
 8018d48:	643b      	str	r3, [r7, #64]	@ 0x40
 8018d4a:	4613      	mov	r3, r2
 8018d4c:	eb42 0303 	adc.w	r3, r2, r3
 8018d50:	647b      	str	r3, [r7, #68]	@ 0x44
 8018d52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8018d56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8018d5a:	f001 fa95 	bl	801a288 <__aeabi_uldivmod>
 8018d5e:	4602      	mov	r2, r0
 8018d60:	460b      	mov	r3, r1
 8018d62:	4611      	mov	r1, r2
 8018d64:	4b3b      	ldr	r3, [pc, #236]	@ (8018e54 <UART_SetConfig+0x2d4>)
 8018d66:	fba3 2301 	umull	r2, r3, r3, r1
 8018d6a:	095b      	lsrs	r3, r3, #5
 8018d6c:	2264      	movs	r2, #100	@ 0x64
 8018d6e:	fb02 f303 	mul.w	r3, r2, r3
 8018d72:	1acb      	subs	r3, r1, r3
 8018d74:	00db      	lsls	r3, r3, #3
 8018d76:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8018d7a:	4b36      	ldr	r3, [pc, #216]	@ (8018e54 <UART_SetConfig+0x2d4>)
 8018d7c:	fba3 2302 	umull	r2, r3, r3, r2
 8018d80:	095b      	lsrs	r3, r3, #5
 8018d82:	005b      	lsls	r3, r3, #1
 8018d84:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8018d88:	441c      	add	r4, r3
 8018d8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8018d8e:	2200      	movs	r2, #0
 8018d90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8018d94:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8018d98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8018d9c:	4642      	mov	r2, r8
 8018d9e:	464b      	mov	r3, r9
 8018da0:	1891      	adds	r1, r2, r2
 8018da2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8018da4:	415b      	adcs	r3, r3
 8018da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018da8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8018dac:	4641      	mov	r1, r8
 8018dae:	1851      	adds	r1, r2, r1
 8018db0:	6339      	str	r1, [r7, #48]	@ 0x30
 8018db2:	4649      	mov	r1, r9
 8018db4:	414b      	adcs	r3, r1
 8018db6:	637b      	str	r3, [r7, #52]	@ 0x34
 8018db8:	f04f 0200 	mov.w	r2, #0
 8018dbc:	f04f 0300 	mov.w	r3, #0
 8018dc0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8018dc4:	4659      	mov	r1, fp
 8018dc6:	00cb      	lsls	r3, r1, #3
 8018dc8:	4651      	mov	r1, sl
 8018dca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8018dce:	4651      	mov	r1, sl
 8018dd0:	00ca      	lsls	r2, r1, #3
 8018dd2:	4610      	mov	r0, r2
 8018dd4:	4619      	mov	r1, r3
 8018dd6:	4603      	mov	r3, r0
 8018dd8:	4642      	mov	r2, r8
 8018dda:	189b      	adds	r3, r3, r2
 8018ddc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8018de0:	464b      	mov	r3, r9
 8018de2:	460a      	mov	r2, r1
 8018de4:	eb42 0303 	adc.w	r3, r2, r3
 8018de8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8018dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8018df0:	685b      	ldr	r3, [r3, #4]
 8018df2:	2200      	movs	r2, #0
 8018df4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8018df8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8018dfc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8018e00:	460b      	mov	r3, r1
 8018e02:	18db      	adds	r3, r3, r3
 8018e04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018e06:	4613      	mov	r3, r2
 8018e08:	eb42 0303 	adc.w	r3, r2, r3
 8018e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018e0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8018e12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8018e16:	f001 fa37 	bl	801a288 <__aeabi_uldivmod>
 8018e1a:	4602      	mov	r2, r0
 8018e1c:	460b      	mov	r3, r1
 8018e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8018e54 <UART_SetConfig+0x2d4>)
 8018e20:	fba3 1302 	umull	r1, r3, r3, r2
 8018e24:	095b      	lsrs	r3, r3, #5
 8018e26:	2164      	movs	r1, #100	@ 0x64
 8018e28:	fb01 f303 	mul.w	r3, r1, r3
 8018e2c:	1ad3      	subs	r3, r2, r3
 8018e2e:	00db      	lsls	r3, r3, #3
 8018e30:	3332      	adds	r3, #50	@ 0x32
 8018e32:	4a08      	ldr	r2, [pc, #32]	@ (8018e54 <UART_SetConfig+0x2d4>)
 8018e34:	fba2 2303 	umull	r2, r3, r2, r3
 8018e38:	095b      	lsrs	r3, r3, #5
 8018e3a:	f003 0207 	and.w	r2, r3, #7
 8018e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8018e42:	681b      	ldr	r3, [r3, #0]
 8018e44:	4422      	add	r2, r4
 8018e46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8018e48:	e106      	b.n	8019058 <UART_SetConfig+0x4d8>
 8018e4a:	bf00      	nop
 8018e4c:	40011000 	.word	0x40011000
 8018e50:	40011400 	.word	0x40011400
 8018e54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8018e58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8018e5c:	2200      	movs	r2, #0
 8018e5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8018e62:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8018e66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8018e6a:	4642      	mov	r2, r8
 8018e6c:	464b      	mov	r3, r9
 8018e6e:	1891      	adds	r1, r2, r2
 8018e70:	6239      	str	r1, [r7, #32]
 8018e72:	415b      	adcs	r3, r3
 8018e74:	627b      	str	r3, [r7, #36]	@ 0x24
 8018e76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8018e7a:	4641      	mov	r1, r8
 8018e7c:	1854      	adds	r4, r2, r1
 8018e7e:	4649      	mov	r1, r9
 8018e80:	eb43 0501 	adc.w	r5, r3, r1
 8018e84:	f04f 0200 	mov.w	r2, #0
 8018e88:	f04f 0300 	mov.w	r3, #0
 8018e8c:	00eb      	lsls	r3, r5, #3
 8018e8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8018e92:	00e2      	lsls	r2, r4, #3
 8018e94:	4614      	mov	r4, r2
 8018e96:	461d      	mov	r5, r3
 8018e98:	4643      	mov	r3, r8
 8018e9a:	18e3      	adds	r3, r4, r3
 8018e9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8018ea0:	464b      	mov	r3, r9
 8018ea2:	eb45 0303 	adc.w	r3, r5, r3
 8018ea6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8018eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8018eae:	685b      	ldr	r3, [r3, #4]
 8018eb0:	2200      	movs	r2, #0
 8018eb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8018eb6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8018eba:	f04f 0200 	mov.w	r2, #0
 8018ebe:	f04f 0300 	mov.w	r3, #0
 8018ec2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8018ec6:	4629      	mov	r1, r5
 8018ec8:	008b      	lsls	r3, r1, #2
 8018eca:	4621      	mov	r1, r4
 8018ecc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8018ed0:	4621      	mov	r1, r4
 8018ed2:	008a      	lsls	r2, r1, #2
 8018ed4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8018ed8:	f001 f9d6 	bl	801a288 <__aeabi_uldivmod>
 8018edc:	4602      	mov	r2, r0
 8018ede:	460b      	mov	r3, r1
 8018ee0:	4b60      	ldr	r3, [pc, #384]	@ (8019064 <UART_SetConfig+0x4e4>)
 8018ee2:	fba3 2302 	umull	r2, r3, r3, r2
 8018ee6:	095b      	lsrs	r3, r3, #5
 8018ee8:	011c      	lsls	r4, r3, #4
 8018eea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8018eee:	2200      	movs	r2, #0
 8018ef0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8018ef4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8018ef8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8018efc:	4642      	mov	r2, r8
 8018efe:	464b      	mov	r3, r9
 8018f00:	1891      	adds	r1, r2, r2
 8018f02:	61b9      	str	r1, [r7, #24]
 8018f04:	415b      	adcs	r3, r3
 8018f06:	61fb      	str	r3, [r7, #28]
 8018f08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8018f0c:	4641      	mov	r1, r8
 8018f0e:	1851      	adds	r1, r2, r1
 8018f10:	6139      	str	r1, [r7, #16]
 8018f12:	4649      	mov	r1, r9
 8018f14:	414b      	adcs	r3, r1
 8018f16:	617b      	str	r3, [r7, #20]
 8018f18:	f04f 0200 	mov.w	r2, #0
 8018f1c:	f04f 0300 	mov.w	r3, #0
 8018f20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8018f24:	4659      	mov	r1, fp
 8018f26:	00cb      	lsls	r3, r1, #3
 8018f28:	4651      	mov	r1, sl
 8018f2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8018f2e:	4651      	mov	r1, sl
 8018f30:	00ca      	lsls	r2, r1, #3
 8018f32:	4610      	mov	r0, r2
 8018f34:	4619      	mov	r1, r3
 8018f36:	4603      	mov	r3, r0
 8018f38:	4642      	mov	r2, r8
 8018f3a:	189b      	adds	r3, r3, r2
 8018f3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8018f40:	464b      	mov	r3, r9
 8018f42:	460a      	mov	r2, r1
 8018f44:	eb42 0303 	adc.w	r3, r2, r3
 8018f48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8018f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8018f50:	685b      	ldr	r3, [r3, #4]
 8018f52:	2200      	movs	r2, #0
 8018f54:	67bb      	str	r3, [r7, #120]	@ 0x78
 8018f56:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8018f58:	f04f 0200 	mov.w	r2, #0
 8018f5c:	f04f 0300 	mov.w	r3, #0
 8018f60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8018f64:	4649      	mov	r1, r9
 8018f66:	008b      	lsls	r3, r1, #2
 8018f68:	4641      	mov	r1, r8
 8018f6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8018f6e:	4641      	mov	r1, r8
 8018f70:	008a      	lsls	r2, r1, #2
 8018f72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8018f76:	f001 f987 	bl	801a288 <__aeabi_uldivmod>
 8018f7a:	4602      	mov	r2, r0
 8018f7c:	460b      	mov	r3, r1
 8018f7e:	4611      	mov	r1, r2
 8018f80:	4b38      	ldr	r3, [pc, #224]	@ (8019064 <UART_SetConfig+0x4e4>)
 8018f82:	fba3 2301 	umull	r2, r3, r3, r1
 8018f86:	095b      	lsrs	r3, r3, #5
 8018f88:	2264      	movs	r2, #100	@ 0x64
 8018f8a:	fb02 f303 	mul.w	r3, r2, r3
 8018f8e:	1acb      	subs	r3, r1, r3
 8018f90:	011b      	lsls	r3, r3, #4
 8018f92:	3332      	adds	r3, #50	@ 0x32
 8018f94:	4a33      	ldr	r2, [pc, #204]	@ (8019064 <UART_SetConfig+0x4e4>)
 8018f96:	fba2 2303 	umull	r2, r3, r2, r3
 8018f9a:	095b      	lsrs	r3, r3, #5
 8018f9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8018fa0:	441c      	add	r4, r3
 8018fa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8018fa6:	2200      	movs	r2, #0
 8018fa8:	673b      	str	r3, [r7, #112]	@ 0x70
 8018faa:	677a      	str	r2, [r7, #116]	@ 0x74
 8018fac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8018fb0:	4642      	mov	r2, r8
 8018fb2:	464b      	mov	r3, r9
 8018fb4:	1891      	adds	r1, r2, r2
 8018fb6:	60b9      	str	r1, [r7, #8]
 8018fb8:	415b      	adcs	r3, r3
 8018fba:	60fb      	str	r3, [r7, #12]
 8018fbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8018fc0:	4641      	mov	r1, r8
 8018fc2:	1851      	adds	r1, r2, r1
 8018fc4:	6039      	str	r1, [r7, #0]
 8018fc6:	4649      	mov	r1, r9
 8018fc8:	414b      	adcs	r3, r1
 8018fca:	607b      	str	r3, [r7, #4]
 8018fcc:	f04f 0200 	mov.w	r2, #0
 8018fd0:	f04f 0300 	mov.w	r3, #0
 8018fd4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8018fd8:	4659      	mov	r1, fp
 8018fda:	00cb      	lsls	r3, r1, #3
 8018fdc:	4651      	mov	r1, sl
 8018fde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8018fe2:	4651      	mov	r1, sl
 8018fe4:	00ca      	lsls	r2, r1, #3
 8018fe6:	4610      	mov	r0, r2
 8018fe8:	4619      	mov	r1, r3
 8018fea:	4603      	mov	r3, r0
 8018fec:	4642      	mov	r2, r8
 8018fee:	189b      	adds	r3, r3, r2
 8018ff0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8018ff2:	464b      	mov	r3, r9
 8018ff4:	460a      	mov	r2, r1
 8018ff6:	eb42 0303 	adc.w	r3, r2, r3
 8018ffa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8018ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8019000:	685b      	ldr	r3, [r3, #4]
 8019002:	2200      	movs	r2, #0
 8019004:	663b      	str	r3, [r7, #96]	@ 0x60
 8019006:	667a      	str	r2, [r7, #100]	@ 0x64
 8019008:	f04f 0200 	mov.w	r2, #0
 801900c:	f04f 0300 	mov.w	r3, #0
 8019010:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8019014:	4649      	mov	r1, r9
 8019016:	008b      	lsls	r3, r1, #2
 8019018:	4641      	mov	r1, r8
 801901a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801901e:	4641      	mov	r1, r8
 8019020:	008a      	lsls	r2, r1, #2
 8019022:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8019026:	f001 f92f 	bl	801a288 <__aeabi_uldivmod>
 801902a:	4602      	mov	r2, r0
 801902c:	460b      	mov	r3, r1
 801902e:	4b0d      	ldr	r3, [pc, #52]	@ (8019064 <UART_SetConfig+0x4e4>)
 8019030:	fba3 1302 	umull	r1, r3, r3, r2
 8019034:	095b      	lsrs	r3, r3, #5
 8019036:	2164      	movs	r1, #100	@ 0x64
 8019038:	fb01 f303 	mul.w	r3, r1, r3
 801903c:	1ad3      	subs	r3, r2, r3
 801903e:	011b      	lsls	r3, r3, #4
 8019040:	3332      	adds	r3, #50	@ 0x32
 8019042:	4a08      	ldr	r2, [pc, #32]	@ (8019064 <UART_SetConfig+0x4e4>)
 8019044:	fba2 2303 	umull	r2, r3, r2, r3
 8019048:	095b      	lsrs	r3, r3, #5
 801904a:	f003 020f 	and.w	r2, r3, #15
 801904e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8019052:	681b      	ldr	r3, [r3, #0]
 8019054:	4422      	add	r2, r4
 8019056:	609a      	str	r2, [r3, #8]
}
 8019058:	bf00      	nop
 801905a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 801905e:	46bd      	mov	sp, r7
 8019060:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8019064:	51eb851f 	.word	0x51eb851f

08019068 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8019068:	b580      	push	{r7, lr}
 801906a:	b082      	sub	sp, #8
 801906c:	af00      	add	r7, sp, #0
 801906e:	6078      	str	r0, [r7, #4]
 8019070:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 8019072:	683a      	ldr	r2, [r7, #0]
 8019074:	2101      	movs	r1, #1
 8019076:	482b      	ldr	r0, [pc, #172]	@ (8019124 <network_configure_activations+0xbc>)
 8019078:	f001 fb80 	bl	801a77c <ai_platform_get_activations_map>
 801907c:	4603      	mov	r3, r0
 801907e:	2b00      	cmp	r3, #0
 8019080:	d045      	beq.n	801910e <network_configure_activations+0xa6>
    /* Updating activations (byte) offsets */
    
    input_1_output_array.data = AI_PTR(g_network_activations_map[0] + 128);
 8019082:	4b28      	ldr	r3, [pc, #160]	@ (8019124 <network_configure_activations+0xbc>)
 8019084:	681b      	ldr	r3, [r3, #0]
 8019086:	3380      	adds	r3, #128	@ 0x80
 8019088:	4a27      	ldr	r2, [pc, #156]	@ (8019128 <network_configure_activations+0xc0>)
 801908a:	6093      	str	r3, [r2, #8]
    input_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 128);
 801908c:	4b25      	ldr	r3, [pc, #148]	@ (8019124 <network_configure_activations+0xbc>)
 801908e:	681b      	ldr	r3, [r3, #0]
 8019090:	3380      	adds	r3, #128	@ 0x80
 8019092:	4a25      	ldr	r2, [pc, #148]	@ (8019128 <network_configure_activations+0xc0>)
 8019094:	60d3      	str	r3, [r2, #12]
    conv2d_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 640);
 8019096:	4b23      	ldr	r3, [pc, #140]	@ (8019124 <network_configure_activations+0xbc>)
 8019098:	681b      	ldr	r3, [r3, #0]
 801909a:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 801909e:	4a23      	ldr	r2, [pc, #140]	@ (801912c <network_configure_activations+0xc4>)
 80190a0:	6093      	str	r3, [r2, #8]
    conv2d_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 640);
 80190a2:	4b20      	ldr	r3, [pc, #128]	@ (8019124 <network_configure_activations+0xbc>)
 80190a4:	681b      	ldr	r3, [r3, #0]
 80190a6:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80190aa:	4a20      	ldr	r2, [pc, #128]	@ (801912c <network_configure_activations+0xc4>)
 80190ac:	60d3      	str	r3, [r2, #12]
    conv2d_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80190ae:	4b1d      	ldr	r3, [pc, #116]	@ (8019124 <network_configure_activations+0xbc>)
 80190b0:	681b      	ldr	r3, [r3, #0]
 80190b2:	4a1f      	ldr	r2, [pc, #124]	@ (8019130 <network_configure_activations+0xc8>)
 80190b4:	6093      	str	r3, [r2, #8]
    conv2d_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80190b6:	4b1b      	ldr	r3, [pc, #108]	@ (8019124 <network_configure_activations+0xbc>)
 80190b8:	681b      	ldr	r3, [r3, #0]
 80190ba:	4a1d      	ldr	r2, [pc, #116]	@ (8019130 <network_configure_activations+0xc8>)
 80190bc:	60d3      	str	r3, [r2, #12]
    dense_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 288);
 80190be:	4b19      	ldr	r3, [pc, #100]	@ (8019124 <network_configure_activations+0xbc>)
 80190c0:	681b      	ldr	r3, [r3, #0]
 80190c2:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80190c6:	4a1b      	ldr	r2, [pc, #108]	@ (8019134 <network_configure_activations+0xcc>)
 80190c8:	6093      	str	r3, [r2, #8]
    dense_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 288);
 80190ca:	4b16      	ldr	r3, [pc, #88]	@ (8019124 <network_configure_activations+0xbc>)
 80190cc:	681b      	ldr	r3, [r3, #0]
 80190ce:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80190d2:	4a18      	ldr	r2, [pc, #96]	@ (8019134 <network_configure_activations+0xcc>)
 80190d4:	60d3      	str	r3, [r2, #12]
    dense_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80190d6:	4b13      	ldr	r3, [pc, #76]	@ (8019124 <network_configure_activations+0xbc>)
 80190d8:	681b      	ldr	r3, [r3, #0]
 80190da:	4a17      	ldr	r2, [pc, #92]	@ (8019138 <network_configure_activations+0xd0>)
 80190dc:	6093      	str	r3, [r2, #8]
    dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80190de:	4b11      	ldr	r3, [pc, #68]	@ (8019124 <network_configure_activations+0xbc>)
 80190e0:	681b      	ldr	r3, [r3, #0]
 80190e2:	4a15      	ldr	r2, [pc, #84]	@ (8019138 <network_configure_activations+0xd0>)
 80190e4:	60d3      	str	r3, [r2, #12]
    dense_1_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 128);
 80190e6:	4b0f      	ldr	r3, [pc, #60]	@ (8019124 <network_configure_activations+0xbc>)
 80190e8:	681b      	ldr	r3, [r3, #0]
 80190ea:	3380      	adds	r3, #128	@ 0x80
 80190ec:	4a13      	ldr	r2, [pc, #76]	@ (801913c <network_configure_activations+0xd4>)
 80190ee:	6093      	str	r3, [r2, #8]
    dense_1_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 128);
 80190f0:	4b0c      	ldr	r3, [pc, #48]	@ (8019124 <network_configure_activations+0xbc>)
 80190f2:	681b      	ldr	r3, [r3, #0]
 80190f4:	3380      	adds	r3, #128	@ 0x80
 80190f6:	4a11      	ldr	r2, [pc, #68]	@ (801913c <network_configure_activations+0xd4>)
 80190f8:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80190fa:	4b0a      	ldr	r3, [pc, #40]	@ (8019124 <network_configure_activations+0xbc>)
 80190fc:	681b      	ldr	r3, [r3, #0]
 80190fe:	4a10      	ldr	r2, [pc, #64]	@ (8019140 <network_configure_activations+0xd8>)
 8019100:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8019102:	4b08      	ldr	r3, [pc, #32]	@ (8019124 <network_configure_activations+0xbc>)
 8019104:	681b      	ldr	r3, [r3, #0]
 8019106:	4a0e      	ldr	r2, [pc, #56]	@ (8019140 <network_configure_activations+0xd8>)
 8019108:	60d3      	str	r3, [r2, #12]
    return true;
 801910a:	2301      	movs	r3, #1
 801910c:	e005      	b.n	801911a <network_configure_activations+0xb2>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 801910e:	2213      	movs	r2, #19
 8019110:	2130      	movs	r1, #48	@ 0x30
 8019112:	6878      	ldr	r0, [r7, #4]
 8019114:	f001 fbf0 	bl	801a8f8 <ai_platform_network_set_error>
  return false;
 8019118:	2300      	movs	r3, #0
}
 801911a:	4618      	mov	r0, r3
 801911c:	3708      	adds	r7, #8
 801911e:	46bd      	mov	sp, r7
 8019120:	bd80      	pop	{r7, pc}
 8019122:	bf00      	nop
 8019124:	20009c94 	.word	0x20009c94
 8019128:	2000004c 	.word	0x2000004c
 801912c:	2000010c 	.word	0x2000010c
 8019130:	2000005c 	.word	0x2000005c
 8019134:	2000006c 	.word	0x2000006c
 8019138:	2000007c 	.word	0x2000007c
 801913c:	2000008c 	.word	0x2000008c
 8019140:	2000009c 	.word	0x2000009c

08019144 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8019144:	b580      	push	{r7, lr}
 8019146:	b082      	sub	sp, #8
 8019148:	af00      	add	r7, sp, #0
 801914a:	6078      	str	r0, [r7, #4]
 801914c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 801914e:	683a      	ldr	r2, [r7, #0]
 8019150:	2101      	movs	r1, #1
 8019152:	4840      	ldr	r0, [pc, #256]	@ (8019254 <network_configure_weights+0x110>)
 8019154:	f001 fabe 	bl	801a6d4 <ai_platform_get_weights_map>
 8019158:	4603      	mov	r3, r0
 801915a:	2b00      	cmp	r3, #0
 801915c:	d06f      	beq.n	801923e <network_configure_weights+0xfa>
    /* Updating weights (byte) offsets */
    
    conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 801915e:	4b3e      	ldr	r3, [pc, #248]	@ (8019258 <network_configure_weights+0x114>)
 8019160:	681b      	ldr	r3, [r3, #0]
 8019162:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8019166:	4a3c      	ldr	r2, [pc, #240]	@ (8019258 <network_configure_weights+0x114>)
 8019168:	6013      	str	r3, [r2, #0]
    conv2d_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 801916a:	4b3a      	ldr	r3, [pc, #232]	@ (8019254 <network_configure_weights+0x110>)
 801916c:	681b      	ldr	r3, [r3, #0]
 801916e:	4a3a      	ldr	r2, [pc, #232]	@ (8019258 <network_configure_weights+0x114>)
 8019170:	6093      	str	r3, [r2, #8]
    conv2d_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8019172:	4b38      	ldr	r3, [pc, #224]	@ (8019254 <network_configure_weights+0x110>)
 8019174:	681b      	ldr	r3, [r3, #0]
 8019176:	4a38      	ldr	r2, [pc, #224]	@ (8019258 <network_configure_weights+0x114>)
 8019178:	60d3      	str	r3, [r2, #12]
    conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 801917a:	4b38      	ldr	r3, [pc, #224]	@ (801925c <network_configure_weights+0x118>)
 801917c:	681b      	ldr	r3, [r3, #0]
 801917e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8019182:	4a36      	ldr	r2, [pc, #216]	@ (801925c <network_configure_weights+0x118>)
 8019184:	6013      	str	r3, [r2, #0]
    conv2d_bias_array.data = AI_PTR(g_network_weights_map[0] + 576);
 8019186:	4b33      	ldr	r3, [pc, #204]	@ (8019254 <network_configure_weights+0x110>)
 8019188:	681b      	ldr	r3, [r3, #0]
 801918a:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 801918e:	4a33      	ldr	r2, [pc, #204]	@ (801925c <network_configure_weights+0x118>)
 8019190:	6093      	str	r3, [r2, #8]
    conv2d_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 576);
 8019192:	4b30      	ldr	r3, [pc, #192]	@ (8019254 <network_configure_weights+0x110>)
 8019194:	681b      	ldr	r3, [r3, #0]
 8019196:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 801919a:	4a30      	ldr	r2, [pc, #192]	@ (801925c <network_configure_weights+0x118>)
 801919c:	60d3      	str	r3, [r2, #12]
    dense_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 801919e:	4b30      	ldr	r3, [pc, #192]	@ (8019260 <network_configure_weights+0x11c>)
 80191a0:	681b      	ldr	r3, [r3, #0]
 80191a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80191a6:	4a2e      	ldr	r2, [pc, #184]	@ (8019260 <network_configure_weights+0x11c>)
 80191a8:	6013      	str	r3, [r2, #0]
    dense_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 608);
 80191aa:	4b2a      	ldr	r3, [pc, #168]	@ (8019254 <network_configure_weights+0x110>)
 80191ac:	681b      	ldr	r3, [r3, #0]
 80191ae:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80191b2:	4a2b      	ldr	r2, [pc, #172]	@ (8019260 <network_configure_weights+0x11c>)
 80191b4:	6093      	str	r3, [r2, #8]
    dense_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 608);
 80191b6:	4b27      	ldr	r3, [pc, #156]	@ (8019254 <network_configure_weights+0x110>)
 80191b8:	681b      	ldr	r3, [r3, #0]
 80191ba:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80191be:	4a28      	ldr	r2, [pc, #160]	@ (8019260 <network_configure_weights+0x11c>)
 80191c0:	60d3      	str	r3, [r2, #12]
    dense_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 80191c2:	4b28      	ldr	r3, [pc, #160]	@ (8019264 <network_configure_weights+0x120>)
 80191c4:	681b      	ldr	r3, [r3, #0]
 80191c6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80191ca:	4a26      	ldr	r2, [pc, #152]	@ (8019264 <network_configure_weights+0x120>)
 80191cc:	6013      	str	r3, [r2, #0]
    dense_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 9824);
 80191ce:	4b21      	ldr	r3, [pc, #132]	@ (8019254 <network_configure_weights+0x110>)
 80191d0:	681b      	ldr	r3, [r3, #0]
 80191d2:	f503 5319 	add.w	r3, r3, #9792	@ 0x2640
 80191d6:	3320      	adds	r3, #32
 80191d8:	4a22      	ldr	r2, [pc, #136]	@ (8019264 <network_configure_weights+0x120>)
 80191da:	6093      	str	r3, [r2, #8]
    dense_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 9824);
 80191dc:	4b1d      	ldr	r3, [pc, #116]	@ (8019254 <network_configure_weights+0x110>)
 80191de:	681b      	ldr	r3, [r3, #0]
 80191e0:	f503 5319 	add.w	r3, r3, #9792	@ 0x2640
 80191e4:	3320      	adds	r3, #32
 80191e6:	4a1f      	ldr	r2, [pc, #124]	@ (8019264 <network_configure_weights+0x120>)
 80191e8:	60d3      	str	r3, [r2, #12]
    dense_1_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 80191ea:	4b1f      	ldr	r3, [pc, #124]	@ (8019268 <network_configure_weights+0x124>)
 80191ec:	681b      	ldr	r3, [r3, #0]
 80191ee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80191f2:	4a1d      	ldr	r2, [pc, #116]	@ (8019268 <network_configure_weights+0x124>)
 80191f4:	6013      	str	r3, [r2, #0]
    dense_1_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 9952);
 80191f6:	4b17      	ldr	r3, [pc, #92]	@ (8019254 <network_configure_weights+0x110>)
 80191f8:	681b      	ldr	r3, [r3, #0]
 80191fa:	f503 531b 	add.w	r3, r3, #9920	@ 0x26c0
 80191fe:	3320      	adds	r3, #32
 8019200:	4a19      	ldr	r2, [pc, #100]	@ (8019268 <network_configure_weights+0x124>)
 8019202:	6093      	str	r3, [r2, #8]
    dense_1_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 9952);
 8019204:	4b13      	ldr	r3, [pc, #76]	@ (8019254 <network_configure_weights+0x110>)
 8019206:	681b      	ldr	r3, [r3, #0]
 8019208:	f503 531b 	add.w	r3, r3, #9920	@ 0x26c0
 801920c:	3320      	adds	r3, #32
 801920e:	4a16      	ldr	r2, [pc, #88]	@ (8019268 <network_configure_weights+0x124>)
 8019210:	60d3      	str	r3, [r2, #12]
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8019212:	4b16      	ldr	r3, [pc, #88]	@ (801926c <network_configure_weights+0x128>)
 8019214:	681b      	ldr	r3, [r3, #0]
 8019216:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801921a:	4a14      	ldr	r2, [pc, #80]	@ (801926c <network_configure_weights+0x128>)
 801921c:	6013      	str	r3, [r2, #0]
    dense_1_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 10976);
 801921e:	4b0d      	ldr	r3, [pc, #52]	@ (8019254 <network_configure_weights+0x110>)
 8019220:	681b      	ldr	r3, [r3, #0]
 8019222:	f503 532b 	add.w	r3, r3, #10944	@ 0x2ac0
 8019226:	3320      	adds	r3, #32
 8019228:	4a10      	ldr	r2, [pc, #64]	@ (801926c <network_configure_weights+0x128>)
 801922a:	6093      	str	r3, [r2, #8]
    dense_1_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 10976);
 801922c:	4b09      	ldr	r3, [pc, #36]	@ (8019254 <network_configure_weights+0x110>)
 801922e:	681b      	ldr	r3, [r3, #0]
 8019230:	f503 532b 	add.w	r3, r3, #10944	@ 0x2ac0
 8019234:	3320      	adds	r3, #32
 8019236:	4a0d      	ldr	r2, [pc, #52]	@ (801926c <network_configure_weights+0x128>)
 8019238:	60d3      	str	r3, [r2, #12]
    return true;
 801923a:	2301      	movs	r3, #1
 801923c:	e005      	b.n	801924a <network_configure_weights+0x106>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 801923e:	2212      	movs	r2, #18
 8019240:	2130      	movs	r1, #48	@ 0x30
 8019242:	6878      	ldr	r0, [r7, #4]
 8019244:	f001 fb58 	bl	801a8f8 <ai_platform_network_set_error>
  return false;
 8019248:	2300      	movs	r3, #0
}
 801924a:	4618      	mov	r0, r3
 801924c:	3708      	adds	r7, #8
 801924e:	46bd      	mov	sp, r7
 8019250:	bd80      	pop	{r7, pc}
 8019252:	bf00      	nop
 8019254:	20009c98 	.word	0x20009c98
 8019258:	200000ac 	.word	0x200000ac
 801925c:	200000bc 	.word	0x200000bc
 8019260:	200000cc 	.word	0x200000cc
 8019264:	200000dc 	.word	0x200000dc
 8019268:	200000ec 	.word	0x200000ec
 801926c:	200000fc 	.word	0x200000fc

08019270 <ai_network_get_info>:

AI_DEPRECATED
AI_API_ENTRY
ai_bool ai_network_get_info(
  ai_handle network, ai_network_report* report)
{
 8019270:	b580      	push	{r7, lr}
 8019272:	b0a6      	sub	sp, #152	@ 0x98
 8019274:	af00      	add	r7, sp, #0
 8019276:	6078      	str	r0, [r7, #4]
 8019278:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 801927a:	6878      	ldr	r0, [r7, #4]
 801927c:	f001 fb28 	bl	801a8d0 <ai_platform_context_acquire>
 8019280:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94

  if (report && net_ctx)
 8019284:	683b      	ldr	r3, [r7, #0]
 8019286:	2b00      	cmp	r3, #0
 8019288:	d048      	beq.n	801931c <ai_network_get_info+0xac>
 801928a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801928e:	2b00      	cmp	r3, #0
 8019290:	d044      	beq.n	801931c <ai_network_get_info+0xac>
  {
    ai_network_report r = {
 8019292:	f107 0308 	add.w	r3, r7, #8
 8019296:	2288      	movs	r2, #136	@ 0x88
 8019298:	2100      	movs	r1, #0
 801929a:	4618      	mov	r0, r3
 801929c:	f00a f91e 	bl	80234dc <memset>
 80192a0:	4b21      	ldr	r3, [pc, #132]	@ (8019328 <ai_network_get_info+0xb8>)
 80192a2:	60bb      	str	r3, [r7, #8]
 80192a4:	4b21      	ldr	r3, [pc, #132]	@ (801932c <ai_network_get_info+0xbc>)
 80192a6:	60fb      	str	r3, [r7, #12]
 80192a8:	4b21      	ldr	r3, [pc, #132]	@ (8019330 <ai_network_get_info+0xc0>)
 80192aa:	613b      	str	r3, [r7, #16]
 80192ac:	4b21      	ldr	r3, [pc, #132]	@ (8019334 <ai_network_get_info+0xc4>)
 80192ae:	617b      	str	r3, [r7, #20]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 80192b0:	f001 fada 	bl	801a868 <ai_platform_runtime_get_revision>
 80192b4:	4603      	mov	r3, r0
    ai_network_report r = {
 80192b6:	61bb      	str	r3, [r7, #24]
      .runtime_version   = ai_platform_runtime_get_version(),
 80192b8:	f001 fada 	bl	801a870 <ai_platform_runtime_get_version>
 80192bc:	4603      	mov	r3, r0
 80192be:	61fb      	str	r3, [r7, #28]
    ai_network_report r = {
 80192c0:	4b1d      	ldr	r3, [pc, #116]	@ (8019338 <ai_network_get_info+0xc8>)
 80192c2:	623b      	str	r3, [r7, #32]
 80192c4:	2309      	movs	r3, #9
 80192c6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 80192ca:	f001 fad5 	bl	801a878 <ai_platform_api_get_version>
 80192ce:	4603      	mov	r3, r0
 80192d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      .interface_api_version  = ai_platform_interface_api_get_version(),
 80192d2:	f001 fae7 	bl	801a8a4 <ai_platform_interface_api_get_version>
 80192d6:	4603      	mov	r3, r0
 80192d8:	633b      	str	r3, [r7, #48]	@ 0x30
    ai_network_report r = {
 80192da:	f242 1248 	movw	r2, #8520	@ 0x2148
 80192de:	f04f 0300 	mov.w	r3, #0
 80192e2:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 80192e6:	4b15      	ldr	r3, [pc, #84]	@ (801933c <ai_network_get_info+0xcc>)
 80192e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      .activations       = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x15206260,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 80192ec:	f107 0308 	add.w	r3, r7, #8
 80192f0:	4619      	mov	r1, r3
 80192f2:	6878      	ldr	r0, [r7, #4]
 80192f4:	f001 fbf0 	bl	801aad8 <ai_platform_api_get_network_report>
 80192f8:	4603      	mov	r3, r0
 80192fa:	f083 0301 	eor.w	r3, r3, #1
 80192fe:	b2db      	uxtb	r3, r3
 8019300:	2b00      	cmp	r3, #0
 8019302:	d001      	beq.n	8019308 <ai_network_get_info+0x98>
 8019304:	2300      	movs	r3, #0
 8019306:	e00a      	b.n	801931e <ai_network_get_info+0xae>

    *report = r;
 8019308:	683b      	ldr	r3, [r7, #0]
 801930a:	4618      	mov	r0, r3
 801930c:	f107 0308 	add.w	r3, r7, #8
 8019310:	2288      	movs	r2, #136	@ 0x88
 8019312:	4619      	mov	r1, r3
 8019314:	f00a f983 	bl	802361e <memcpy>
    return true;
 8019318:	2301      	movs	r3, #1
 801931a:	e000      	b.n	801931e <ai_network_get_info+0xae>
  }
  return false;
 801931c:	2300      	movs	r3, #0
}
 801931e:	4618      	mov	r0, r3
 8019320:	3798      	adds	r7, #152	@ 0x98
 8019322:	46bd      	mov	sp, r7
 8019324:	bd80      	pop	{r7, pc}
 8019326:	bf00      	nop
 8019328:	0803f87c 	.word	0x0803f87c
 801932c:	0803f884 	.word	0x0803f884
 8019330:	0803f8a8 	.word	0x0803f8a8
 8019334:	0803f8c4 	.word	0x0803f8c4
 8019338:	0803f8dc 	.word	0x0803f8dc
 801933c:	15206260 	.word	0x15206260

08019340 <ai_network_get_report>:


AI_API_ENTRY
ai_bool ai_network_get_report(
  ai_handle network, ai_network_report* report)
{
 8019340:	b580      	push	{r7, lr}
 8019342:	b0a6      	sub	sp, #152	@ 0x98
 8019344:	af00      	add	r7, sp, #0
 8019346:	6078      	str	r0, [r7, #4]
 8019348:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 801934a:	6878      	ldr	r0, [r7, #4]
 801934c:	f001 fac0 	bl	801a8d0 <ai_platform_context_acquire>
 8019350:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94

  if (report && net_ctx)
 8019354:	683b      	ldr	r3, [r7, #0]
 8019356:	2b00      	cmp	r3, #0
 8019358:	d04a      	beq.n	80193f0 <ai_network_get_report+0xb0>
 801935a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801935e:	2b00      	cmp	r3, #0
 8019360:	d046      	beq.n	80193f0 <ai_network_get_report+0xb0>
  {
    ai_network_report r = {
 8019362:	f107 0308 	add.w	r3, r7, #8
 8019366:	2288      	movs	r2, #136	@ 0x88
 8019368:	2100      	movs	r1, #0
 801936a:	4618      	mov	r0, r3
 801936c:	f00a f8b6 	bl	80234dc <memset>
 8019370:	4b22      	ldr	r3, [pc, #136]	@ (80193fc <ai_network_get_report+0xbc>)
 8019372:	60bb      	str	r3, [r7, #8]
 8019374:	4b22      	ldr	r3, [pc, #136]	@ (8019400 <ai_network_get_report+0xc0>)
 8019376:	60fb      	str	r3, [r7, #12]
 8019378:	4b22      	ldr	r3, [pc, #136]	@ (8019404 <ai_network_get_report+0xc4>)
 801937a:	613b      	str	r3, [r7, #16]
 801937c:	4b22      	ldr	r3, [pc, #136]	@ (8019408 <ai_network_get_report+0xc8>)
 801937e:	617b      	str	r3, [r7, #20]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8019380:	f001 fa72 	bl	801a868 <ai_platform_runtime_get_revision>
 8019384:	4603      	mov	r3, r0
    ai_network_report r = {
 8019386:	61bb      	str	r3, [r7, #24]
      .runtime_version   = ai_platform_runtime_get_version(),
 8019388:	f001 fa72 	bl	801a870 <ai_platform_runtime_get_version>
 801938c:	4603      	mov	r3, r0
 801938e:	61fb      	str	r3, [r7, #28]
    ai_network_report r = {
 8019390:	4b1e      	ldr	r3, [pc, #120]	@ (801940c <ai_network_get_report+0xcc>)
 8019392:	623b      	str	r3, [r7, #32]
 8019394:	2309      	movs	r3, #9
 8019396:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 801939a:	f001 fa6d 	bl	801a878 <ai_platform_api_get_version>
 801939e:	4603      	mov	r3, r0
 80193a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      .interface_api_version  = ai_platform_interface_api_get_version(),
 80193a2:	f001 fa7f 	bl	801a8a4 <ai_platform_interface_api_get_version>
 80193a6:	4603      	mov	r3, r0
 80193a8:	633b      	str	r3, [r7, #48]	@ 0x30
    ai_network_report r = {
 80193aa:	f242 1248 	movw	r2, #8520	@ 0x2148
 80193ae:	f04f 0300 	mov.w	r3, #0
 80193b2:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 80193b6:	4b16      	ldr	r3, [pc, #88]	@ (8019410 <ai_network_get_report+0xd0>)
 80193b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80193ba:	4b16      	ldr	r3, [pc, #88]	@ (8019414 <ai_network_get_report+0xd4>)
 80193bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      .map_activations   = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x15206260,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 80193c0:	f107 0308 	add.w	r3, r7, #8
 80193c4:	4619      	mov	r1, r3
 80193c6:	6878      	ldr	r0, [r7, #4]
 80193c8:	f001 fb86 	bl	801aad8 <ai_platform_api_get_network_report>
 80193cc:	4603      	mov	r3, r0
 80193ce:	f083 0301 	eor.w	r3, r3, #1
 80193d2:	b2db      	uxtb	r3, r3
 80193d4:	2b00      	cmp	r3, #0
 80193d6:	d001      	beq.n	80193dc <ai_network_get_report+0x9c>
 80193d8:	2300      	movs	r3, #0
 80193da:	e00a      	b.n	80193f2 <ai_network_get_report+0xb2>

    *report = r;
 80193dc:	683b      	ldr	r3, [r7, #0]
 80193de:	4618      	mov	r0, r3
 80193e0:	f107 0308 	add.w	r3, r7, #8
 80193e4:	2288      	movs	r2, #136	@ 0x88
 80193e6:	4619      	mov	r1, r3
 80193e8:	f00a f919 	bl	802361e <memcpy>
    return true;
 80193ec:	2301      	movs	r3, #1
 80193ee:	e000      	b.n	80193f2 <ai_network_get_report+0xb2>
  }
  return false;
 80193f0:	2300      	movs	r3, #0
}
 80193f2:	4618      	mov	r0, r3
 80193f4:	3798      	adds	r7, #152	@ 0x98
 80193f6:	46bd      	mov	sp, r7
 80193f8:	bd80      	pop	{r7, pc}
 80193fa:	bf00      	nop
 80193fc:	0803f87c 	.word	0x0803f87c
 8019400:	0803f884 	.word	0x0803f884
 8019404:	0803f8a8 	.word	0x0803f8a8
 8019408:	0803f8c4 	.word	0x0803f8c4
 801940c:	0803f8dc 	.word	0x0803f8dc
 8019410:	a1facade 	.word	0xa1facade
 8019414:	15206260 	.word	0x15206260

08019418 <ai_network_get_error>:


AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8019418:	b580      	push	{r7, lr}
 801941a:	b082      	sub	sp, #8
 801941c:	af00      	add	r7, sp, #0
 801941e:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8019420:	6878      	ldr	r0, [r7, #4]
 8019422:	f001 fa5d 	bl	801a8e0 <ai_platform_network_get_error>
 8019426:	4603      	mov	r3, r0
}
 8019428:	4618      	mov	r0, r3
 801942a:	3708      	adds	r7, #8
 801942c:	46bd      	mov	sp, r7
 801942e:	bd80      	pop	{r7, pc}

08019430 <ai_network_create>:


AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8019430:	b580      	push	{r7, lr}
 8019432:	b084      	sub	sp, #16
 8019434:	af02      	add	r7, sp, #8
 8019436:	6078      	str	r0, [r7, #4]
 8019438:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 801943a:	2300      	movs	r3, #0
 801943c:	9301      	str	r3, [sp, #4]
 801943e:	2305      	movs	r3, #5
 8019440:	9300      	str	r3, [sp, #0]
 8019442:	2301      	movs	r3, #1
 8019444:	4a04      	ldr	r2, [pc, #16]	@ (8019458 <ai_network_create+0x28>)
 8019446:	6839      	ldr	r1, [r7, #0]
 8019448:	6878      	ldr	r0, [r7, #4]
 801944a:	f001 fcf3 	bl	801ae34 <ai_platform_network_create>
 801944e:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8019450:	4618      	mov	r0, r3
 8019452:	3708      	adds	r7, #8
 8019454:	46bd      	mov	sp, r7
 8019456:	bd80      	pop	{r7, pc}
 8019458:	20000704 	.word	0x20000704

0801945c <ai_network_create_and_init>:


AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 801945c:	b580      	push	{r7, lr}
 801945e:	b094      	sub	sp, #80	@ 0x50
 8019460:	af00      	add	r7, sp, #0
 8019462:	60f8      	str	r0, [r7, #12]
 8019464:	60b9      	str	r1, [r7, #8]
 8019466:	607a      	str	r2, [r7, #4]
  ai_error err;
  ai_network_params params;

  err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8019468:	2100      	movs	r1, #0
 801946a:	68f8      	ldr	r0, [r7, #12]
 801946c:	f7ff ffe0 	bl	8019430 <ai_network_create>
 8019470:	4603      	mov	r3, r0
 8019472:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (err.type != AI_ERROR_NONE) {
 8019474:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8019478:	2b00      	cmp	r3, #0
 801947a:	d001      	beq.n	8019480 <ai_network_create_and_init+0x24>
    return err;
 801947c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801947e:	e067      	b.n	8019550 <ai_network_create_and_init+0xf4>
  }
  
  if (ai_network_data_params_get(&params) != true) {
 8019480:	f107 0310 	add.w	r3, r7, #16
 8019484:	4618      	mov	r0, r3
 8019486:	f000 f975 	bl	8019774 <ai_network_data_params_get>
 801948a:	4603      	mov	r3, r0
 801948c:	f083 0301 	eor.w	r3, r3, #1
 8019490:	b2db      	uxtb	r3, r3
 8019492:	2b00      	cmp	r3, #0
 8019494:	d008      	beq.n	80194a8 <ai_network_create_and_init+0x4c>
    err = ai_network_get_error(*network);
 8019496:	68fb      	ldr	r3, [r7, #12]
 8019498:	681b      	ldr	r3, [r3, #0]
 801949a:	4618      	mov	r0, r3
 801949c:	f7ff ffbc 	bl	8019418 <ai_network_get_error>
 80194a0:	4603      	mov	r3, r0
 80194a2:	64bb      	str	r3, [r7, #72]	@ 0x48
    return err;
 80194a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80194a6:	e053      	b.n	8019550 <ai_network_create_and_init+0xf4>
  }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
  /* set the addresses of the activations buffers */
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 80194a8:	2300      	movs	r3, #0
 80194aa:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80194ae:	e012      	b.n	80194d6 <ai_network_create_and_init+0x7a>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 80194b0:	f8b7 104e 	ldrh.w	r1, [r7, #78]	@ 0x4e
 80194b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80194b8:	009b      	lsls	r3, r3, #2
 80194ba:	68ba      	ldr	r2, [r7, #8]
 80194bc:	4413      	add	r3, r2
 80194be:	681a      	ldr	r2, [r3, #0]
 80194c0:	f107 0310 	add.w	r3, r7, #16
 80194c4:	330c      	adds	r3, #12
 80194c6:	4618      	mov	r0, r3
 80194c8:	f001 f8f4 	bl	801a6b4 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 80194cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80194d0:	3301      	adds	r3, #1
 80194d2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80194d6:	68bb      	ldr	r3, [r7, #8]
 80194d8:	2b00      	cmp	r3, #0
 80194da:	d004      	beq.n	80194e6 <ai_network_create_and_init+0x8a>
 80194dc:	8bfb      	ldrh	r3, [r7, #30]
 80194de:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80194e2:	429a      	cmp	r2, r3
 80194e4:	d3e4      	bcc.n	80194b0 <ai_network_create_and_init+0x54>
  }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
  /* set the addresses of the weight buffers */
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 80194e6:	2300      	movs	r3, #0
 80194e8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80194ec:	e012      	b.n	8019514 <ai_network_create_and_init+0xb8>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 80194ee:	f8b7 104c 	ldrh.w	r1, [r7, #76]	@ 0x4c
 80194f2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80194f6:	009b      	lsls	r3, r3, #2
 80194f8:	687a      	ldr	r2, [r7, #4]
 80194fa:	4413      	add	r3, r2
 80194fc:	681a      	ldr	r2, [r3, #0]
 80194fe:	f107 0310 	add.w	r3, r7, #16
 8019502:	3304      	adds	r3, #4
 8019504:	4618      	mov	r0, r3
 8019506:	f001 f8d5 	bl	801a6b4 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 801950a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 801950e:	3301      	adds	r3, #1
 8019510:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8019514:	687b      	ldr	r3, [r7, #4]
 8019516:	2b00      	cmp	r3, #0
 8019518:	d004      	beq.n	8019524 <ai_network_create_and_init+0xc8>
 801951a:	8afb      	ldrh	r3, [r7, #22]
 801951c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8019520:	429a      	cmp	r2, r3
 8019522:	d3e4      	bcc.n	80194ee <ai_network_create_and_init+0x92>
  }
#endif
  if (ai_network_init(*network, &params) != true) {
 8019524:	68fb      	ldr	r3, [r7, #12]
 8019526:	681b      	ldr	r3, [r3, #0]
 8019528:	f107 0210 	add.w	r2, r7, #16
 801952c:	4611      	mov	r1, r2
 801952e:	4618      	mov	r0, r3
 8019530:	f000 f852 	bl	80195d8 <ai_network_init>
 8019534:	4603      	mov	r3, r0
 8019536:	f083 0301 	eor.w	r3, r3, #1
 801953a:	b2db      	uxtb	r3, r3
 801953c:	2b00      	cmp	r3, #0
 801953e:	d006      	beq.n	801954e <ai_network_create_and_init+0xf2>
    err = ai_network_get_error(*network);
 8019540:	68fb      	ldr	r3, [r7, #12]
 8019542:	681b      	ldr	r3, [r3, #0]
 8019544:	4618      	mov	r0, r3
 8019546:	f7ff ff67 	bl	8019418 <ai_network_get_error>
 801954a:	4603      	mov	r3, r0
 801954c:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  return err;
 801954e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8019550:	4618      	mov	r0, r3
 8019552:	3750      	adds	r7, #80	@ 0x50
 8019554:	46bd      	mov	sp, r7
 8019556:	bd80      	pop	{r7, pc}

08019558 <ai_network_inputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8019558:	b580      	push	{r7, lr}
 801955a:	b082      	sub	sp, #8
 801955c:	af00      	add	r7, sp, #0
 801955e:	6078      	str	r0, [r7, #4]
 8019560:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8019562:	687b      	ldr	r3, [r7, #4]
 8019564:	2b00      	cmp	r3, #0
 8019566:	d104      	bne.n	8019572 <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8019568:	4b06      	ldr	r3, [pc, #24]	@ (8019584 <ai_network_inputs_get+0x2c>)
 801956a:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 801956c:	687b      	ldr	r3, [r7, #4]
 801956e:	4a06      	ldr	r2, [pc, #24]	@ (8019588 <ai_network_inputs_get+0x30>)
 8019570:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8019572:	6839      	ldr	r1, [r7, #0]
 8019574:	6878      	ldr	r0, [r7, #4]
 8019576:	f001 f9c5 	bl	801a904 <ai_platform_inputs_get>
 801957a:	4603      	mov	r3, r0
}
 801957c:	4618      	mov	r0, r3
 801957e:	3708      	adds	r7, #8
 8019580:	46bd      	mov	sp, r7
 8019582:	bd80      	pop	{r7, pc}
 8019584:	20000704 	.word	0x20000704
 8019588:	a1c00100 	.word	0xa1c00100

0801958c <ai_network_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 801958c:	b580      	push	{r7, lr}
 801958e:	b082      	sub	sp, #8
 8019590:	af00      	add	r7, sp, #0
 8019592:	6078      	str	r0, [r7, #4]
 8019594:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8019596:	687b      	ldr	r3, [r7, #4]
 8019598:	2b00      	cmp	r3, #0
 801959a:	d104      	bne.n	80195a6 <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 801959c:	4b06      	ldr	r3, [pc, #24]	@ (80195b8 <ai_network_outputs_get+0x2c>)
 801959e:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 80195a0:	687b      	ldr	r3, [r7, #4]
 80195a2:	4a06      	ldr	r2, [pc, #24]	@ (80195bc <ai_network_outputs_get+0x30>)
 80195a4:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 80195a6:	6839      	ldr	r1, [r7, #0]
 80195a8:	6878      	ldr	r0, [r7, #4]
 80195aa:	f001 fa21 	bl	801a9f0 <ai_platform_outputs_get>
 80195ae:	4603      	mov	r3, r0
}
 80195b0:	4618      	mov	r0, r3
 80195b2:	3708      	adds	r7, #8
 80195b4:	46bd      	mov	sp, r7
 80195b6:	bd80      	pop	{r7, pc}
 80195b8:	20000704 	.word	0x20000704
 80195bc:	a1c00100 	.word	0xa1c00100

080195c0 <ai_network_destroy>:


AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
 80195c0:	b580      	push	{r7, lr}
 80195c2:	b082      	sub	sp, #8
 80195c4:	af00      	add	r7, sp, #0
 80195c6:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 80195c8:	6878      	ldr	r0, [r7, #4]
 80195ca:	f001 fc75 	bl	801aeb8 <ai_platform_network_destroy>
 80195ce:	4603      	mov	r3, r0
}
 80195d0:	4618      	mov	r0, r3
 80195d2:	3708      	adds	r7, #8
 80195d4:	46bd      	mov	sp, r7
 80195d6:	bd80      	pop	{r7, pc}

080195d8 <ai_network_init>:


AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 80195d8:	b580      	push	{r7, lr}
 80195da:	b084      	sub	sp, #16
 80195dc:	af00      	add	r7, sp, #0
 80195de:	6078      	str	r0, [r7, #4]
 80195e0:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 80195e2:	6839      	ldr	r1, [r7, #0]
 80195e4:	6878      	ldr	r0, [r7, #4]
 80195e6:	f001 fc79 	bl	801aedc <ai_platform_network_init>
 80195ea:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 80195ec:	2301      	movs	r3, #1
 80195ee:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 80195f0:	68fb      	ldr	r3, [r7, #12]
 80195f2:	2b00      	cmp	r3, #0
 80195f4:	d101      	bne.n	80195fa <ai_network_init+0x22>
 80195f6:	2300      	movs	r3, #0
 80195f8:	e026      	b.n	8019648 <ai_network_init+0x70>
  ok &= network_configure_weights(net_ctx, params);
 80195fa:	6839      	ldr	r1, [r7, #0]
 80195fc:	68f8      	ldr	r0, [r7, #12]
 80195fe:	f7ff fda1 	bl	8019144 <network_configure_weights>
 8019602:	4603      	mov	r3, r0
 8019604:	461a      	mov	r2, r3
 8019606:	7afb      	ldrb	r3, [r7, #11]
 8019608:	4013      	ands	r3, r2
 801960a:	2b00      	cmp	r3, #0
 801960c:	bf14      	ite	ne
 801960e:	2301      	movne	r3, #1
 8019610:	2300      	moveq	r3, #0
 8019612:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 8019614:	6839      	ldr	r1, [r7, #0]
 8019616:	68f8      	ldr	r0, [r7, #12]
 8019618:	f7ff fd26 	bl	8019068 <network_configure_activations>
 801961c:	4603      	mov	r3, r0
 801961e:	461a      	mov	r2, r3
 8019620:	7afb      	ldrb	r3, [r7, #11]
 8019622:	4013      	ands	r3, r2
 8019624:	2b00      	cmp	r3, #0
 8019626:	bf14      	ite	ne
 8019628:	2301      	movne	r3, #1
 801962a:	2300      	moveq	r3, #0
 801962c:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 801962e:	6878      	ldr	r0, [r7, #4]
 8019630:	f001 fd22 	bl	801b078 <ai_platform_network_post_init>
 8019634:	4603      	mov	r3, r0
 8019636:	461a      	mov	r2, r3
 8019638:	7afb      	ldrb	r3, [r7, #11]
 801963a:	4013      	ands	r3, r2
 801963c:	2b00      	cmp	r3, #0
 801963e:	bf14      	ite	ne
 8019640:	2301      	movne	r3, #1
 8019642:	2300      	moveq	r3, #0
 8019644:	72fb      	strb	r3, [r7, #11]

  return ok;
 8019646:	7afb      	ldrb	r3, [r7, #11]
}
 8019648:	4618      	mov	r0, r3
 801964a:	3710      	adds	r7, #16
 801964c:	46bd      	mov	sp, r7
 801964e:	bd80      	pop	{r7, pc}

08019650 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8019650:	b580      	push	{r7, lr}
 8019652:	b084      	sub	sp, #16
 8019654:	af00      	add	r7, sp, #0
 8019656:	60f8      	str	r0, [r7, #12]
 8019658:	60b9      	str	r1, [r7, #8]
 801965a:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 801965c:	687a      	ldr	r2, [r7, #4]
 801965e:	68b9      	ldr	r1, [r7, #8]
 8019660:	68f8      	ldr	r0, [r7, #12]
 8019662:	f001 fd39 	bl	801b0d8 <ai_platform_network_process>
 8019666:	4603      	mov	r3, r0
}
 8019668:	4618      	mov	r0, r3
 801966a:	3710      	adds	r7, #16
 801966c:	46bd      	mov	sp, r7
 801966e:	bd80      	pop	{r7, pc}

08019670 <ai_network_forward>:


AI_API_ENTRY
ai_i32 ai_network_forward(ai_handle network, const ai_buffer* input)
{
 8019670:	b580      	push	{r7, lr}
 8019672:	b082      	sub	sp, #8
 8019674:	af00      	add	r7, sp, #0
 8019676:	6078      	str	r0, [r7, #4]
 8019678:	6039      	str	r1, [r7, #0]
  return ai_platform_network_process(network, input, NULL);
 801967a:	2200      	movs	r2, #0
 801967c:	6839      	ldr	r1, [r7, #0]
 801967e:	6878      	ldr	r0, [r7, #4]
 8019680:	f001 fd2a 	bl	801b0d8 <ai_platform_network_process>
 8019684:	4603      	mov	r3, r0
}
 8019686:	4618      	mov	r0, r3
 8019688:	3708      	adds	r7, #8
 801968a:	46bd      	mov	sp, r7
 801968c:	bd80      	pop	{r7, pc}
 801968e:	bf00      	nop

08019690 <ai_network_data_activations_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_network_data_activations_buffer_get(const ai_handle ptr)
{
 8019690:	b4b0      	push	{r4, r5, r7}
 8019692:	b08f      	sub	sp, #60	@ 0x3c
 8019694:	af00      	add	r7, sp, #0
 8019696:	6078      	str	r0, [r7, #4]
 8019698:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 801969a:	4b15      	ldr	r3, [pc, #84]	@ (80196f0 <ai_network_data_activations_buffer_get+0x60>)
 801969c:	61fb      	str	r3, [r7, #28]
 801969e:	683b      	ldr	r3, [r7, #0]
 80196a0:	623b      	str	r3, [r7, #32]
 80196a2:	2300      	movs	r3, #0
 80196a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80196a6:	2300      	movs	r3, #0
 80196a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80196aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80196ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80196b0:	2301      	movs	r3, #1
 80196b2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 80196b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80196b8:	2204      	movs	r2, #4
 80196ba:	f362 231f 	bfi	r3, r2, #8, #24
 80196be:	633b      	str	r3, [r7, #48]	@ 0x30
 80196c0:	4b0c      	ldr	r3, [pc, #48]	@ (80196f4 <ai_network_data_activations_buffer_get+0x64>)
 80196c2:	f107 040c 	add.w	r4, r7, #12
 80196c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80196c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80196cc:	f107 030c 	add.w	r3, r7, #12
 80196d0:	637b      	str	r3, [r7, #52]	@ 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_NETWORK_DATA_ACTIVATIONS_SIZE, 1, AI_NETWORK_DATA_ACTIVATIONS_COUNT),
    AI_NETWORK_DATA_ACTIVATIONS_SIZE,
    NULL, ptr);
  return buf;
 80196d2:	687b      	ldr	r3, [r7, #4]
 80196d4:	461d      	mov	r5, r3
 80196d6:	f107 041c 	add.w	r4, r7, #28
 80196da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80196dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80196de:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80196e2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80196e6:	6878      	ldr	r0, [r7, #4]
 80196e8:	373c      	adds	r7, #60	@ 0x3c
 80196ea:	46bd      	mov	sp, r7
 80196ec:	bcb0      	pop	{r4, r5, r7}
 80196ee:	4770      	bx	lr
 80196f0:	00040440 	.word	0x00040440
 80196f4:	0803f8e0 	.word	0x0803f8e0

080196f8 <ai_network_data_weights_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_network_data_weights_buffer_get(const ai_handle ptr)
{
 80196f8:	b4b0      	push	{r4, r5, r7}
 80196fa:	b08f      	sub	sp, #60	@ 0x3c
 80196fc:	af00      	add	r7, sp, #0
 80196fe:	6078      	str	r0, [r7, #4]
 8019700:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 8019702:	4b15      	ldr	r3, [pc, #84]	@ (8019758 <ai_network_data_weights_buffer_get+0x60>)
 8019704:	61fb      	str	r3, [r7, #28]
 8019706:	683b      	ldr	r3, [r7, #0]
 8019708:	623b      	str	r3, [r7, #32]
 801970a:	2300      	movs	r3, #0
 801970c:	627b      	str	r3, [r7, #36]	@ 0x24
 801970e:	2300      	movs	r3, #0
 8019710:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019712:	f44f 532c 	mov.w	r3, #11008	@ 0x2b00
 8019716:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019718:	2301      	movs	r3, #1
 801971a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 801971e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019720:	2204      	movs	r2, #4
 8019722:	f362 231f 	bfi	r3, r2, #8, #24
 8019726:	633b      	str	r3, [r7, #48]	@ 0x30
 8019728:	4b0c      	ldr	r3, [pc, #48]	@ (801975c <ai_network_data_weights_buffer_get+0x64>)
 801972a:	f107 040c 	add.w	r4, r7, #12
 801972e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019730:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8019734:	f107 030c 	add.w	r3, r7, #12
 8019738:	637b      	str	r3, [r7, #52]	@ 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8|AI_BUFFER_FMT_FLAG_CONST,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_NETWORK_DATA_WEIGHTS_SIZE, 1, AI_NETWORK_DATA_WEIGHTS_COUNT),
    AI_NETWORK_DATA_WEIGHTS_SIZE,
    NULL, ptr);
  return buf;
 801973a:	687b      	ldr	r3, [r7, #4]
 801973c:	461d      	mov	r5, r3
 801973e:	f107 041c 	add.w	r4, r7, #28
 8019742:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019744:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019746:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801974a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 801974e:	6878      	ldr	r0, [r7, #4]
 8019750:	373c      	adds	r7, #60	@ 0x3c
 8019752:	46bd      	mov	sp, r7
 8019754:	bcb0      	pop	{r4, r5, r7}
 8019756:	4770      	bx	lr
 8019758:	40040440 	.word	0x40040440
 801975c:	0803f8f0 	.word	0x0803f8f0

08019760 <ai_network_data_weights_get>:
 * @return a ai_handle pointer to the weights array
 */
AI_DEPRECATED
AI_API_ENTRY
ai_handle ai_network_data_weights_get(void)
{
 8019760:	b480      	push	{r7}
 8019762:	af00      	add	r7, sp, #0
  return AI_HANDLE_PTR(g_network_weights_table);
 8019764:	4b02      	ldr	r3, [pc, #8]	@ (8019770 <ai_network_data_weights_get+0x10>)

}
 8019766:	4618      	mov	r0, r3
 8019768:	46bd      	mov	sp, r7
 801976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801976e:	4770      	bx	lr
 8019770:	200007b4 	.word	0x200007b4

08019774 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8019774:	b580      	push	{r7, lr}
 8019776:	b086      	sub	sp, #24
 8019778:	af00      	add	r7, sp, #0
 801977a:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 801977c:	687b      	ldr	r3, [r7, #4]
 801977e:	2b00      	cmp	r3, #0
 8019780:	d101      	bne.n	8019786 <ai_network_data_params_get+0x12>
 8019782:	2300      	movs	r3, #0
 8019784:	e016      	b.n	80197b4 <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8019786:	4a0d      	ldr	r2, [pc, #52]	@ (80197bc <ai_network_data_params_get+0x48>)
 8019788:	f107 0310 	add.w	r3, r7, #16
 801978c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019790:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8019794:	4a0a      	ldr	r2, [pc, #40]	@ (80197c0 <ai_network_data_params_get+0x4c>)
 8019796:	f107 0308 	add.w	r3, r7, #8
 801979a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801979e:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 80197a2:	f107 0210 	add.w	r2, r7, #16
 80197a6:	f107 0308 	add.w	r3, r7, #8
 80197aa:	4619      	mov	r1, r3
 80197ac:	6878      	ldr	r0, [r7, #4]
 80197ae:	f001 f839 	bl	801a824 <ai_platform_bind_network_params>
 80197b2:	4603      	mov	r3, r0
}
 80197b4:	4618      	mov	r0, r3
 80197b6:	3718      	adds	r7, #24
 80197b8:	46bd      	mov	sp, r7
 80197ba:	bd80      	pop	{r7, pc}
 80197bc:	0803f900 	.word	0x0803f900
 80197c0:	0803f908 	.word	0x0803f908
	...

080197d0 <memchr>:
 80197d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80197d4:	2a10      	cmp	r2, #16
 80197d6:	db2b      	blt.n	8019830 <memchr+0x60>
 80197d8:	f010 0f07 	tst.w	r0, #7
 80197dc:	d008      	beq.n	80197f0 <memchr+0x20>
 80197de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80197e2:	3a01      	subs	r2, #1
 80197e4:	428b      	cmp	r3, r1
 80197e6:	d02d      	beq.n	8019844 <memchr+0x74>
 80197e8:	f010 0f07 	tst.w	r0, #7
 80197ec:	b342      	cbz	r2, 8019840 <memchr+0x70>
 80197ee:	d1f6      	bne.n	80197de <memchr+0xe>
 80197f0:	b4f0      	push	{r4, r5, r6, r7}
 80197f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80197f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80197fa:	f022 0407 	bic.w	r4, r2, #7
 80197fe:	f07f 0700 	mvns.w	r7, #0
 8019802:	2300      	movs	r3, #0
 8019804:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8019808:	3c08      	subs	r4, #8
 801980a:	ea85 0501 	eor.w	r5, r5, r1
 801980e:	ea86 0601 	eor.w	r6, r6, r1
 8019812:	fa85 f547 	uadd8	r5, r5, r7
 8019816:	faa3 f587 	sel	r5, r3, r7
 801981a:	fa86 f647 	uadd8	r6, r6, r7
 801981e:	faa5 f687 	sel	r6, r5, r7
 8019822:	b98e      	cbnz	r6, 8019848 <memchr+0x78>
 8019824:	d1ee      	bne.n	8019804 <memchr+0x34>
 8019826:	bcf0      	pop	{r4, r5, r6, r7}
 8019828:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801982c:	f002 0207 	and.w	r2, r2, #7
 8019830:	b132      	cbz	r2, 8019840 <memchr+0x70>
 8019832:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019836:	3a01      	subs	r2, #1
 8019838:	ea83 0301 	eor.w	r3, r3, r1
 801983c:	b113      	cbz	r3, 8019844 <memchr+0x74>
 801983e:	d1f8      	bne.n	8019832 <memchr+0x62>
 8019840:	2000      	movs	r0, #0
 8019842:	4770      	bx	lr
 8019844:	3801      	subs	r0, #1
 8019846:	4770      	bx	lr
 8019848:	2d00      	cmp	r5, #0
 801984a:	bf06      	itte	eq
 801984c:	4635      	moveq	r5, r6
 801984e:	3803      	subeq	r0, #3
 8019850:	3807      	subne	r0, #7
 8019852:	f015 0f01 	tst.w	r5, #1
 8019856:	d107      	bne.n	8019868 <memchr+0x98>
 8019858:	3001      	adds	r0, #1
 801985a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 801985e:	bf02      	ittt	eq
 8019860:	3001      	addeq	r0, #1
 8019862:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8019866:	3001      	addeq	r0, #1
 8019868:	bcf0      	pop	{r4, r5, r6, r7}
 801986a:	3801      	subs	r0, #1
 801986c:	4770      	bx	lr
 801986e:	bf00      	nop

08019870 <strlen>:
 8019870:	4603      	mov	r3, r0
 8019872:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019876:	2a00      	cmp	r2, #0
 8019878:	d1fb      	bne.n	8019872 <strlen+0x2>
 801987a:	1a18      	subs	r0, r3, r0
 801987c:	3801      	subs	r0, #1
 801987e:	4770      	bx	lr

08019880 <__aeabi_drsub>:
 8019880:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8019884:	e002      	b.n	801988c <__adddf3>
 8019886:	bf00      	nop

08019888 <__aeabi_dsub>:
 8019888:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0801988c <__adddf3>:
 801988c:	b530      	push	{r4, r5, lr}
 801988e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8019892:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8019896:	ea94 0f05 	teq	r4, r5
 801989a:	bf08      	it	eq
 801989c:	ea90 0f02 	teqeq	r0, r2
 80198a0:	bf1f      	itttt	ne
 80198a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80198a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80198aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80198ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80198b2:	f000 80e2 	beq.w	8019a7a <__adddf3+0x1ee>
 80198b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80198ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80198be:	bfb8      	it	lt
 80198c0:	426d      	neglt	r5, r5
 80198c2:	dd0c      	ble.n	80198de <__adddf3+0x52>
 80198c4:	442c      	add	r4, r5
 80198c6:	ea80 0202 	eor.w	r2, r0, r2
 80198ca:	ea81 0303 	eor.w	r3, r1, r3
 80198ce:	ea82 0000 	eor.w	r0, r2, r0
 80198d2:	ea83 0101 	eor.w	r1, r3, r1
 80198d6:	ea80 0202 	eor.w	r2, r0, r2
 80198da:	ea81 0303 	eor.w	r3, r1, r3
 80198de:	2d36      	cmp	r5, #54	@ 0x36
 80198e0:	bf88      	it	hi
 80198e2:	bd30      	pophi	{r4, r5, pc}
 80198e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80198e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80198ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80198f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80198f4:	d002      	beq.n	80198fc <__adddf3+0x70>
 80198f6:	4240      	negs	r0, r0
 80198f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80198fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8019900:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8019904:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8019908:	d002      	beq.n	8019910 <__adddf3+0x84>
 801990a:	4252      	negs	r2, r2
 801990c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8019910:	ea94 0f05 	teq	r4, r5
 8019914:	f000 80a7 	beq.w	8019a66 <__adddf3+0x1da>
 8019918:	f1a4 0401 	sub.w	r4, r4, #1
 801991c:	f1d5 0e20 	rsbs	lr, r5, #32
 8019920:	db0d      	blt.n	801993e <__adddf3+0xb2>
 8019922:	fa02 fc0e 	lsl.w	ip, r2, lr
 8019926:	fa22 f205 	lsr.w	r2, r2, r5
 801992a:	1880      	adds	r0, r0, r2
 801992c:	f141 0100 	adc.w	r1, r1, #0
 8019930:	fa03 f20e 	lsl.w	r2, r3, lr
 8019934:	1880      	adds	r0, r0, r2
 8019936:	fa43 f305 	asr.w	r3, r3, r5
 801993a:	4159      	adcs	r1, r3
 801993c:	e00e      	b.n	801995c <__adddf3+0xd0>
 801993e:	f1a5 0520 	sub.w	r5, r5, #32
 8019942:	f10e 0e20 	add.w	lr, lr, #32
 8019946:	2a01      	cmp	r2, #1
 8019948:	fa03 fc0e 	lsl.w	ip, r3, lr
 801994c:	bf28      	it	cs
 801994e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8019952:	fa43 f305 	asr.w	r3, r3, r5
 8019956:	18c0      	adds	r0, r0, r3
 8019958:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 801995c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8019960:	d507      	bpl.n	8019972 <__adddf3+0xe6>
 8019962:	f04f 0e00 	mov.w	lr, #0
 8019966:	f1dc 0c00 	rsbs	ip, ip, #0
 801996a:	eb7e 0000 	sbcs.w	r0, lr, r0
 801996e:	eb6e 0101 	sbc.w	r1, lr, r1
 8019972:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8019976:	d31b      	bcc.n	80199b0 <__adddf3+0x124>
 8019978:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 801997c:	d30c      	bcc.n	8019998 <__adddf3+0x10c>
 801997e:	0849      	lsrs	r1, r1, #1
 8019980:	ea5f 0030 	movs.w	r0, r0, rrx
 8019984:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8019988:	f104 0401 	add.w	r4, r4, #1
 801998c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8019990:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8019994:	f080 809a 	bcs.w	8019acc <__adddf3+0x240>
 8019998:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 801999c:	bf08      	it	eq
 801999e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80199a2:	f150 0000 	adcs.w	r0, r0, #0
 80199a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80199aa:	ea41 0105 	orr.w	r1, r1, r5
 80199ae:	bd30      	pop	{r4, r5, pc}
 80199b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80199b4:	4140      	adcs	r0, r0
 80199b6:	eb41 0101 	adc.w	r1, r1, r1
 80199ba:	3c01      	subs	r4, #1
 80199bc:	bf28      	it	cs
 80199be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80199c2:	d2e9      	bcs.n	8019998 <__adddf3+0x10c>
 80199c4:	f091 0f00 	teq	r1, #0
 80199c8:	bf04      	itt	eq
 80199ca:	4601      	moveq	r1, r0
 80199cc:	2000      	moveq	r0, #0
 80199ce:	fab1 f381 	clz	r3, r1
 80199d2:	bf08      	it	eq
 80199d4:	3320      	addeq	r3, #32
 80199d6:	f1a3 030b 	sub.w	r3, r3, #11
 80199da:	f1b3 0220 	subs.w	r2, r3, #32
 80199de:	da0c      	bge.n	80199fa <__adddf3+0x16e>
 80199e0:	320c      	adds	r2, #12
 80199e2:	dd08      	ble.n	80199f6 <__adddf3+0x16a>
 80199e4:	f102 0c14 	add.w	ip, r2, #20
 80199e8:	f1c2 020c 	rsb	r2, r2, #12
 80199ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80199f0:	fa21 f102 	lsr.w	r1, r1, r2
 80199f4:	e00c      	b.n	8019a10 <__adddf3+0x184>
 80199f6:	f102 0214 	add.w	r2, r2, #20
 80199fa:	bfd8      	it	le
 80199fc:	f1c2 0c20 	rsble	ip, r2, #32
 8019a00:	fa01 f102 	lsl.w	r1, r1, r2
 8019a04:	fa20 fc0c 	lsr.w	ip, r0, ip
 8019a08:	bfdc      	itt	le
 8019a0a:	ea41 010c 	orrle.w	r1, r1, ip
 8019a0e:	4090      	lslle	r0, r2
 8019a10:	1ae4      	subs	r4, r4, r3
 8019a12:	bfa2      	ittt	ge
 8019a14:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8019a18:	4329      	orrge	r1, r5
 8019a1a:	bd30      	popge	{r4, r5, pc}
 8019a1c:	ea6f 0404 	mvn.w	r4, r4
 8019a20:	3c1f      	subs	r4, #31
 8019a22:	da1c      	bge.n	8019a5e <__adddf3+0x1d2>
 8019a24:	340c      	adds	r4, #12
 8019a26:	dc0e      	bgt.n	8019a46 <__adddf3+0x1ba>
 8019a28:	f104 0414 	add.w	r4, r4, #20
 8019a2c:	f1c4 0220 	rsb	r2, r4, #32
 8019a30:	fa20 f004 	lsr.w	r0, r0, r4
 8019a34:	fa01 f302 	lsl.w	r3, r1, r2
 8019a38:	ea40 0003 	orr.w	r0, r0, r3
 8019a3c:	fa21 f304 	lsr.w	r3, r1, r4
 8019a40:	ea45 0103 	orr.w	r1, r5, r3
 8019a44:	bd30      	pop	{r4, r5, pc}
 8019a46:	f1c4 040c 	rsb	r4, r4, #12
 8019a4a:	f1c4 0220 	rsb	r2, r4, #32
 8019a4e:	fa20 f002 	lsr.w	r0, r0, r2
 8019a52:	fa01 f304 	lsl.w	r3, r1, r4
 8019a56:	ea40 0003 	orr.w	r0, r0, r3
 8019a5a:	4629      	mov	r1, r5
 8019a5c:	bd30      	pop	{r4, r5, pc}
 8019a5e:	fa21 f004 	lsr.w	r0, r1, r4
 8019a62:	4629      	mov	r1, r5
 8019a64:	bd30      	pop	{r4, r5, pc}
 8019a66:	f094 0f00 	teq	r4, #0
 8019a6a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8019a6e:	bf06      	itte	eq
 8019a70:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8019a74:	3401      	addeq	r4, #1
 8019a76:	3d01      	subne	r5, #1
 8019a78:	e74e      	b.n	8019918 <__adddf3+0x8c>
 8019a7a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8019a7e:	bf18      	it	ne
 8019a80:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8019a84:	d029      	beq.n	8019ada <__adddf3+0x24e>
 8019a86:	ea94 0f05 	teq	r4, r5
 8019a8a:	bf08      	it	eq
 8019a8c:	ea90 0f02 	teqeq	r0, r2
 8019a90:	d005      	beq.n	8019a9e <__adddf3+0x212>
 8019a92:	ea54 0c00 	orrs.w	ip, r4, r0
 8019a96:	bf04      	itt	eq
 8019a98:	4619      	moveq	r1, r3
 8019a9a:	4610      	moveq	r0, r2
 8019a9c:	bd30      	pop	{r4, r5, pc}
 8019a9e:	ea91 0f03 	teq	r1, r3
 8019aa2:	bf1e      	ittt	ne
 8019aa4:	2100      	movne	r1, #0
 8019aa6:	2000      	movne	r0, #0
 8019aa8:	bd30      	popne	{r4, r5, pc}
 8019aaa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8019aae:	d105      	bne.n	8019abc <__adddf3+0x230>
 8019ab0:	0040      	lsls	r0, r0, #1
 8019ab2:	4149      	adcs	r1, r1
 8019ab4:	bf28      	it	cs
 8019ab6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8019aba:	bd30      	pop	{r4, r5, pc}
 8019abc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8019ac0:	bf3c      	itt	cc
 8019ac2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8019ac6:	bd30      	popcc	{r4, r5, pc}
 8019ac8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8019acc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8019ad0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8019ad4:	f04f 0000 	mov.w	r0, #0
 8019ad8:	bd30      	pop	{r4, r5, pc}
 8019ada:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8019ade:	bf1a      	itte	ne
 8019ae0:	4619      	movne	r1, r3
 8019ae2:	4610      	movne	r0, r2
 8019ae4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8019ae8:	bf1c      	itt	ne
 8019aea:	460b      	movne	r3, r1
 8019aec:	4602      	movne	r2, r0
 8019aee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8019af2:	bf06      	itte	eq
 8019af4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8019af8:	ea91 0f03 	teqeq	r1, r3
 8019afc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8019b00:	bd30      	pop	{r4, r5, pc}
 8019b02:	bf00      	nop

08019b04 <__aeabi_ui2d>:
 8019b04:	f090 0f00 	teq	r0, #0
 8019b08:	bf04      	itt	eq
 8019b0a:	2100      	moveq	r1, #0
 8019b0c:	4770      	bxeq	lr
 8019b0e:	b530      	push	{r4, r5, lr}
 8019b10:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8019b14:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8019b18:	f04f 0500 	mov.w	r5, #0
 8019b1c:	f04f 0100 	mov.w	r1, #0
 8019b20:	e750      	b.n	80199c4 <__adddf3+0x138>
 8019b22:	bf00      	nop

08019b24 <__aeabi_i2d>:
 8019b24:	f090 0f00 	teq	r0, #0
 8019b28:	bf04      	itt	eq
 8019b2a:	2100      	moveq	r1, #0
 8019b2c:	4770      	bxeq	lr
 8019b2e:	b530      	push	{r4, r5, lr}
 8019b30:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8019b34:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8019b38:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8019b3c:	bf48      	it	mi
 8019b3e:	4240      	negmi	r0, r0
 8019b40:	f04f 0100 	mov.w	r1, #0
 8019b44:	e73e      	b.n	80199c4 <__adddf3+0x138>
 8019b46:	bf00      	nop

08019b48 <__aeabi_f2d>:
 8019b48:	0042      	lsls	r2, r0, #1
 8019b4a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8019b4e:	ea4f 0131 	mov.w	r1, r1, rrx
 8019b52:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8019b56:	bf1f      	itttt	ne
 8019b58:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8019b5c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8019b60:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8019b64:	4770      	bxne	lr
 8019b66:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8019b6a:	bf08      	it	eq
 8019b6c:	4770      	bxeq	lr
 8019b6e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8019b72:	bf04      	itt	eq
 8019b74:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8019b78:	4770      	bxeq	lr
 8019b7a:	b530      	push	{r4, r5, lr}
 8019b7c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8019b80:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8019b84:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8019b88:	e71c      	b.n	80199c4 <__adddf3+0x138>
 8019b8a:	bf00      	nop

08019b8c <__aeabi_ul2d>:
 8019b8c:	ea50 0201 	orrs.w	r2, r0, r1
 8019b90:	bf08      	it	eq
 8019b92:	4770      	bxeq	lr
 8019b94:	b530      	push	{r4, r5, lr}
 8019b96:	f04f 0500 	mov.w	r5, #0
 8019b9a:	e00a      	b.n	8019bb2 <__aeabi_l2d+0x16>

08019b9c <__aeabi_l2d>:
 8019b9c:	ea50 0201 	orrs.w	r2, r0, r1
 8019ba0:	bf08      	it	eq
 8019ba2:	4770      	bxeq	lr
 8019ba4:	b530      	push	{r4, r5, lr}
 8019ba6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8019baa:	d502      	bpl.n	8019bb2 <__aeabi_l2d+0x16>
 8019bac:	4240      	negs	r0, r0
 8019bae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8019bb2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8019bb6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8019bba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8019bbe:	f43f aed8 	beq.w	8019972 <__adddf3+0xe6>
 8019bc2:	f04f 0203 	mov.w	r2, #3
 8019bc6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8019bca:	bf18      	it	ne
 8019bcc:	3203      	addne	r2, #3
 8019bce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8019bd2:	bf18      	it	ne
 8019bd4:	3203      	addne	r2, #3
 8019bd6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8019bda:	f1c2 0320 	rsb	r3, r2, #32
 8019bde:	fa00 fc03 	lsl.w	ip, r0, r3
 8019be2:	fa20 f002 	lsr.w	r0, r0, r2
 8019be6:	fa01 fe03 	lsl.w	lr, r1, r3
 8019bea:	ea40 000e 	orr.w	r0, r0, lr
 8019bee:	fa21 f102 	lsr.w	r1, r1, r2
 8019bf2:	4414      	add	r4, r2
 8019bf4:	e6bd      	b.n	8019972 <__adddf3+0xe6>
 8019bf6:	bf00      	nop

08019bf8 <__aeabi_dmul>:
 8019bf8:	b570      	push	{r4, r5, r6, lr}
 8019bfa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8019bfe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8019c02:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8019c06:	bf1d      	ittte	ne
 8019c08:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8019c0c:	ea94 0f0c 	teqne	r4, ip
 8019c10:	ea95 0f0c 	teqne	r5, ip
 8019c14:	f000 f8de 	bleq	8019dd4 <__aeabi_dmul+0x1dc>
 8019c18:	442c      	add	r4, r5
 8019c1a:	ea81 0603 	eor.w	r6, r1, r3
 8019c1e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8019c22:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8019c26:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8019c2a:	bf18      	it	ne
 8019c2c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8019c30:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8019c34:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8019c38:	d038      	beq.n	8019cac <__aeabi_dmul+0xb4>
 8019c3a:	fba0 ce02 	umull	ip, lr, r0, r2
 8019c3e:	f04f 0500 	mov.w	r5, #0
 8019c42:	fbe1 e502 	umlal	lr, r5, r1, r2
 8019c46:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8019c4a:	fbe0 e503 	umlal	lr, r5, r0, r3
 8019c4e:	f04f 0600 	mov.w	r6, #0
 8019c52:	fbe1 5603 	umlal	r5, r6, r1, r3
 8019c56:	f09c 0f00 	teq	ip, #0
 8019c5a:	bf18      	it	ne
 8019c5c:	f04e 0e01 	orrne.w	lr, lr, #1
 8019c60:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8019c64:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8019c68:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8019c6c:	d204      	bcs.n	8019c78 <__aeabi_dmul+0x80>
 8019c6e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8019c72:	416d      	adcs	r5, r5
 8019c74:	eb46 0606 	adc.w	r6, r6, r6
 8019c78:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8019c7c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8019c80:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8019c84:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8019c88:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8019c8c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8019c90:	bf88      	it	hi
 8019c92:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8019c96:	d81e      	bhi.n	8019cd6 <__aeabi_dmul+0xde>
 8019c98:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8019c9c:	bf08      	it	eq
 8019c9e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8019ca2:	f150 0000 	adcs.w	r0, r0, #0
 8019ca6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8019caa:	bd70      	pop	{r4, r5, r6, pc}
 8019cac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8019cb0:	ea46 0101 	orr.w	r1, r6, r1
 8019cb4:	ea40 0002 	orr.w	r0, r0, r2
 8019cb8:	ea81 0103 	eor.w	r1, r1, r3
 8019cbc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8019cc0:	bfc2      	ittt	gt
 8019cc2:	ebd4 050c 	rsbsgt	r5, r4, ip
 8019cc6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8019cca:	bd70      	popgt	{r4, r5, r6, pc}
 8019ccc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8019cd0:	f04f 0e00 	mov.w	lr, #0
 8019cd4:	3c01      	subs	r4, #1
 8019cd6:	f300 80ab 	bgt.w	8019e30 <__aeabi_dmul+0x238>
 8019cda:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8019cde:	bfde      	ittt	le
 8019ce0:	2000      	movle	r0, #0
 8019ce2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8019ce6:	bd70      	pople	{r4, r5, r6, pc}
 8019ce8:	f1c4 0400 	rsb	r4, r4, #0
 8019cec:	3c20      	subs	r4, #32
 8019cee:	da35      	bge.n	8019d5c <__aeabi_dmul+0x164>
 8019cf0:	340c      	adds	r4, #12
 8019cf2:	dc1b      	bgt.n	8019d2c <__aeabi_dmul+0x134>
 8019cf4:	f104 0414 	add.w	r4, r4, #20
 8019cf8:	f1c4 0520 	rsb	r5, r4, #32
 8019cfc:	fa00 f305 	lsl.w	r3, r0, r5
 8019d00:	fa20 f004 	lsr.w	r0, r0, r4
 8019d04:	fa01 f205 	lsl.w	r2, r1, r5
 8019d08:	ea40 0002 	orr.w	r0, r0, r2
 8019d0c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8019d10:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8019d14:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8019d18:	fa21 f604 	lsr.w	r6, r1, r4
 8019d1c:	eb42 0106 	adc.w	r1, r2, r6
 8019d20:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8019d24:	bf08      	it	eq
 8019d26:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8019d2a:	bd70      	pop	{r4, r5, r6, pc}
 8019d2c:	f1c4 040c 	rsb	r4, r4, #12
 8019d30:	f1c4 0520 	rsb	r5, r4, #32
 8019d34:	fa00 f304 	lsl.w	r3, r0, r4
 8019d38:	fa20 f005 	lsr.w	r0, r0, r5
 8019d3c:	fa01 f204 	lsl.w	r2, r1, r4
 8019d40:	ea40 0002 	orr.w	r0, r0, r2
 8019d44:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8019d48:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8019d4c:	f141 0100 	adc.w	r1, r1, #0
 8019d50:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8019d54:	bf08      	it	eq
 8019d56:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8019d5a:	bd70      	pop	{r4, r5, r6, pc}
 8019d5c:	f1c4 0520 	rsb	r5, r4, #32
 8019d60:	fa00 f205 	lsl.w	r2, r0, r5
 8019d64:	ea4e 0e02 	orr.w	lr, lr, r2
 8019d68:	fa20 f304 	lsr.w	r3, r0, r4
 8019d6c:	fa01 f205 	lsl.w	r2, r1, r5
 8019d70:	ea43 0302 	orr.w	r3, r3, r2
 8019d74:	fa21 f004 	lsr.w	r0, r1, r4
 8019d78:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8019d7c:	fa21 f204 	lsr.w	r2, r1, r4
 8019d80:	ea20 0002 	bic.w	r0, r0, r2
 8019d84:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8019d88:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8019d8c:	bf08      	it	eq
 8019d8e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8019d92:	bd70      	pop	{r4, r5, r6, pc}
 8019d94:	f094 0f00 	teq	r4, #0
 8019d98:	d10f      	bne.n	8019dba <__aeabi_dmul+0x1c2>
 8019d9a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8019d9e:	0040      	lsls	r0, r0, #1
 8019da0:	eb41 0101 	adc.w	r1, r1, r1
 8019da4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8019da8:	bf08      	it	eq
 8019daa:	3c01      	subeq	r4, #1
 8019dac:	d0f7      	beq.n	8019d9e <__aeabi_dmul+0x1a6>
 8019dae:	ea41 0106 	orr.w	r1, r1, r6
 8019db2:	f095 0f00 	teq	r5, #0
 8019db6:	bf18      	it	ne
 8019db8:	4770      	bxne	lr
 8019dba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8019dbe:	0052      	lsls	r2, r2, #1
 8019dc0:	eb43 0303 	adc.w	r3, r3, r3
 8019dc4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8019dc8:	bf08      	it	eq
 8019dca:	3d01      	subeq	r5, #1
 8019dcc:	d0f7      	beq.n	8019dbe <__aeabi_dmul+0x1c6>
 8019dce:	ea43 0306 	orr.w	r3, r3, r6
 8019dd2:	4770      	bx	lr
 8019dd4:	ea94 0f0c 	teq	r4, ip
 8019dd8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8019ddc:	bf18      	it	ne
 8019dde:	ea95 0f0c 	teqne	r5, ip
 8019de2:	d00c      	beq.n	8019dfe <__aeabi_dmul+0x206>
 8019de4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8019de8:	bf18      	it	ne
 8019dea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8019dee:	d1d1      	bne.n	8019d94 <__aeabi_dmul+0x19c>
 8019df0:	ea81 0103 	eor.w	r1, r1, r3
 8019df4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8019df8:	f04f 0000 	mov.w	r0, #0
 8019dfc:	bd70      	pop	{r4, r5, r6, pc}
 8019dfe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8019e02:	bf06      	itte	eq
 8019e04:	4610      	moveq	r0, r2
 8019e06:	4619      	moveq	r1, r3
 8019e08:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8019e0c:	d019      	beq.n	8019e42 <__aeabi_dmul+0x24a>
 8019e0e:	ea94 0f0c 	teq	r4, ip
 8019e12:	d102      	bne.n	8019e1a <__aeabi_dmul+0x222>
 8019e14:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8019e18:	d113      	bne.n	8019e42 <__aeabi_dmul+0x24a>
 8019e1a:	ea95 0f0c 	teq	r5, ip
 8019e1e:	d105      	bne.n	8019e2c <__aeabi_dmul+0x234>
 8019e20:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8019e24:	bf1c      	itt	ne
 8019e26:	4610      	movne	r0, r2
 8019e28:	4619      	movne	r1, r3
 8019e2a:	d10a      	bne.n	8019e42 <__aeabi_dmul+0x24a>
 8019e2c:	ea81 0103 	eor.w	r1, r1, r3
 8019e30:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8019e34:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8019e38:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8019e3c:	f04f 0000 	mov.w	r0, #0
 8019e40:	bd70      	pop	{r4, r5, r6, pc}
 8019e42:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8019e46:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8019e4a:	bd70      	pop	{r4, r5, r6, pc}

08019e4c <__aeabi_ddiv>:
 8019e4c:	b570      	push	{r4, r5, r6, lr}
 8019e4e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8019e52:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8019e56:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8019e5a:	bf1d      	ittte	ne
 8019e5c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8019e60:	ea94 0f0c 	teqne	r4, ip
 8019e64:	ea95 0f0c 	teqne	r5, ip
 8019e68:	f000 f8a7 	bleq	8019fba <__aeabi_ddiv+0x16e>
 8019e6c:	eba4 0405 	sub.w	r4, r4, r5
 8019e70:	ea81 0e03 	eor.w	lr, r1, r3
 8019e74:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8019e78:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8019e7c:	f000 8088 	beq.w	8019f90 <__aeabi_ddiv+0x144>
 8019e80:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8019e84:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8019e88:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8019e8c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8019e90:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8019e94:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8019e98:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8019e9c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8019ea0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8019ea4:	429d      	cmp	r5, r3
 8019ea6:	bf08      	it	eq
 8019ea8:	4296      	cmpeq	r6, r2
 8019eaa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8019eae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8019eb2:	d202      	bcs.n	8019eba <__aeabi_ddiv+0x6e>
 8019eb4:	085b      	lsrs	r3, r3, #1
 8019eb6:	ea4f 0232 	mov.w	r2, r2, rrx
 8019eba:	1ab6      	subs	r6, r6, r2
 8019ebc:	eb65 0503 	sbc.w	r5, r5, r3
 8019ec0:	085b      	lsrs	r3, r3, #1
 8019ec2:	ea4f 0232 	mov.w	r2, r2, rrx
 8019ec6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8019eca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8019ece:	ebb6 0e02 	subs.w	lr, r6, r2
 8019ed2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8019ed6:	bf22      	ittt	cs
 8019ed8:	1ab6      	subcs	r6, r6, r2
 8019eda:	4675      	movcs	r5, lr
 8019edc:	ea40 000c 	orrcs.w	r0, r0, ip
 8019ee0:	085b      	lsrs	r3, r3, #1
 8019ee2:	ea4f 0232 	mov.w	r2, r2, rrx
 8019ee6:	ebb6 0e02 	subs.w	lr, r6, r2
 8019eea:	eb75 0e03 	sbcs.w	lr, r5, r3
 8019eee:	bf22      	ittt	cs
 8019ef0:	1ab6      	subcs	r6, r6, r2
 8019ef2:	4675      	movcs	r5, lr
 8019ef4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8019ef8:	085b      	lsrs	r3, r3, #1
 8019efa:	ea4f 0232 	mov.w	r2, r2, rrx
 8019efe:	ebb6 0e02 	subs.w	lr, r6, r2
 8019f02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8019f06:	bf22      	ittt	cs
 8019f08:	1ab6      	subcs	r6, r6, r2
 8019f0a:	4675      	movcs	r5, lr
 8019f0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8019f10:	085b      	lsrs	r3, r3, #1
 8019f12:	ea4f 0232 	mov.w	r2, r2, rrx
 8019f16:	ebb6 0e02 	subs.w	lr, r6, r2
 8019f1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8019f1e:	bf22      	ittt	cs
 8019f20:	1ab6      	subcs	r6, r6, r2
 8019f22:	4675      	movcs	r5, lr
 8019f24:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8019f28:	ea55 0e06 	orrs.w	lr, r5, r6
 8019f2c:	d018      	beq.n	8019f60 <__aeabi_ddiv+0x114>
 8019f2e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8019f32:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8019f36:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8019f3a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8019f3e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8019f42:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8019f46:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8019f4a:	d1c0      	bne.n	8019ece <__aeabi_ddiv+0x82>
 8019f4c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8019f50:	d10b      	bne.n	8019f6a <__aeabi_ddiv+0x11e>
 8019f52:	ea41 0100 	orr.w	r1, r1, r0
 8019f56:	f04f 0000 	mov.w	r0, #0
 8019f5a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8019f5e:	e7b6      	b.n	8019ece <__aeabi_ddiv+0x82>
 8019f60:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8019f64:	bf04      	itt	eq
 8019f66:	4301      	orreq	r1, r0
 8019f68:	2000      	moveq	r0, #0
 8019f6a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8019f6e:	bf88      	it	hi
 8019f70:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8019f74:	f63f aeaf 	bhi.w	8019cd6 <__aeabi_dmul+0xde>
 8019f78:	ebb5 0c03 	subs.w	ip, r5, r3
 8019f7c:	bf04      	itt	eq
 8019f7e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8019f82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8019f86:	f150 0000 	adcs.w	r0, r0, #0
 8019f8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8019f8e:	bd70      	pop	{r4, r5, r6, pc}
 8019f90:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8019f94:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8019f98:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8019f9c:	bfc2      	ittt	gt
 8019f9e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8019fa2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8019fa6:	bd70      	popgt	{r4, r5, r6, pc}
 8019fa8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8019fac:	f04f 0e00 	mov.w	lr, #0
 8019fb0:	3c01      	subs	r4, #1
 8019fb2:	e690      	b.n	8019cd6 <__aeabi_dmul+0xde>
 8019fb4:	ea45 0e06 	orr.w	lr, r5, r6
 8019fb8:	e68d      	b.n	8019cd6 <__aeabi_dmul+0xde>
 8019fba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8019fbe:	ea94 0f0c 	teq	r4, ip
 8019fc2:	bf08      	it	eq
 8019fc4:	ea95 0f0c 	teqeq	r5, ip
 8019fc8:	f43f af3b 	beq.w	8019e42 <__aeabi_dmul+0x24a>
 8019fcc:	ea94 0f0c 	teq	r4, ip
 8019fd0:	d10a      	bne.n	8019fe8 <__aeabi_ddiv+0x19c>
 8019fd2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8019fd6:	f47f af34 	bne.w	8019e42 <__aeabi_dmul+0x24a>
 8019fda:	ea95 0f0c 	teq	r5, ip
 8019fde:	f47f af25 	bne.w	8019e2c <__aeabi_dmul+0x234>
 8019fe2:	4610      	mov	r0, r2
 8019fe4:	4619      	mov	r1, r3
 8019fe6:	e72c      	b.n	8019e42 <__aeabi_dmul+0x24a>
 8019fe8:	ea95 0f0c 	teq	r5, ip
 8019fec:	d106      	bne.n	8019ffc <__aeabi_ddiv+0x1b0>
 8019fee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8019ff2:	f43f aefd 	beq.w	8019df0 <__aeabi_dmul+0x1f8>
 8019ff6:	4610      	mov	r0, r2
 8019ff8:	4619      	mov	r1, r3
 8019ffa:	e722      	b.n	8019e42 <__aeabi_dmul+0x24a>
 8019ffc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 801a000:	bf18      	it	ne
 801a002:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801a006:	f47f aec5 	bne.w	8019d94 <__aeabi_dmul+0x19c>
 801a00a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 801a00e:	f47f af0d 	bne.w	8019e2c <__aeabi_dmul+0x234>
 801a012:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 801a016:	f47f aeeb 	bne.w	8019df0 <__aeabi_dmul+0x1f8>
 801a01a:	e712      	b.n	8019e42 <__aeabi_dmul+0x24a>

0801a01c <__gedf2>:
 801a01c:	f04f 3cff 	mov.w	ip, #4294967295
 801a020:	e006      	b.n	801a030 <__cmpdf2+0x4>
 801a022:	bf00      	nop

0801a024 <__ledf2>:
 801a024:	f04f 0c01 	mov.w	ip, #1
 801a028:	e002      	b.n	801a030 <__cmpdf2+0x4>
 801a02a:	bf00      	nop

0801a02c <__cmpdf2>:
 801a02c:	f04f 0c01 	mov.w	ip, #1
 801a030:	f84d cd04 	str.w	ip, [sp, #-4]!
 801a034:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801a038:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 801a03c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 801a040:	bf18      	it	ne
 801a042:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 801a046:	d01b      	beq.n	801a080 <__cmpdf2+0x54>
 801a048:	b001      	add	sp, #4
 801a04a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 801a04e:	bf0c      	ite	eq
 801a050:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 801a054:	ea91 0f03 	teqne	r1, r3
 801a058:	bf02      	ittt	eq
 801a05a:	ea90 0f02 	teqeq	r0, r2
 801a05e:	2000      	moveq	r0, #0
 801a060:	4770      	bxeq	lr
 801a062:	f110 0f00 	cmn.w	r0, #0
 801a066:	ea91 0f03 	teq	r1, r3
 801a06a:	bf58      	it	pl
 801a06c:	4299      	cmppl	r1, r3
 801a06e:	bf08      	it	eq
 801a070:	4290      	cmpeq	r0, r2
 801a072:	bf2c      	ite	cs
 801a074:	17d8      	asrcs	r0, r3, #31
 801a076:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 801a07a:	f040 0001 	orr.w	r0, r0, #1
 801a07e:	4770      	bx	lr
 801a080:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801a084:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 801a088:	d102      	bne.n	801a090 <__cmpdf2+0x64>
 801a08a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 801a08e:	d107      	bne.n	801a0a0 <__cmpdf2+0x74>
 801a090:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 801a094:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 801a098:	d1d6      	bne.n	801a048 <__cmpdf2+0x1c>
 801a09a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 801a09e:	d0d3      	beq.n	801a048 <__cmpdf2+0x1c>
 801a0a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 801a0a4:	4770      	bx	lr
 801a0a6:	bf00      	nop

0801a0a8 <__aeabi_cdrcmple>:
 801a0a8:	4684      	mov	ip, r0
 801a0aa:	4610      	mov	r0, r2
 801a0ac:	4662      	mov	r2, ip
 801a0ae:	468c      	mov	ip, r1
 801a0b0:	4619      	mov	r1, r3
 801a0b2:	4663      	mov	r3, ip
 801a0b4:	e000      	b.n	801a0b8 <__aeabi_cdcmpeq>
 801a0b6:	bf00      	nop

0801a0b8 <__aeabi_cdcmpeq>:
 801a0b8:	b501      	push	{r0, lr}
 801a0ba:	f7ff ffb7 	bl	801a02c <__cmpdf2>
 801a0be:	2800      	cmp	r0, #0
 801a0c0:	bf48      	it	mi
 801a0c2:	f110 0f00 	cmnmi.w	r0, #0
 801a0c6:	bd01      	pop	{r0, pc}

0801a0c8 <__aeabi_dcmpeq>:
 801a0c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 801a0cc:	f7ff fff4 	bl	801a0b8 <__aeabi_cdcmpeq>
 801a0d0:	bf0c      	ite	eq
 801a0d2:	2001      	moveq	r0, #1
 801a0d4:	2000      	movne	r0, #0
 801a0d6:	f85d fb08 	ldr.w	pc, [sp], #8
 801a0da:	bf00      	nop

0801a0dc <__aeabi_dcmplt>:
 801a0dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 801a0e0:	f7ff ffea 	bl	801a0b8 <__aeabi_cdcmpeq>
 801a0e4:	bf34      	ite	cc
 801a0e6:	2001      	movcc	r0, #1
 801a0e8:	2000      	movcs	r0, #0
 801a0ea:	f85d fb08 	ldr.w	pc, [sp], #8
 801a0ee:	bf00      	nop

0801a0f0 <__aeabi_dcmple>:
 801a0f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 801a0f4:	f7ff ffe0 	bl	801a0b8 <__aeabi_cdcmpeq>
 801a0f8:	bf94      	ite	ls
 801a0fa:	2001      	movls	r0, #1
 801a0fc:	2000      	movhi	r0, #0
 801a0fe:	f85d fb08 	ldr.w	pc, [sp], #8
 801a102:	bf00      	nop

0801a104 <__aeabi_dcmpge>:
 801a104:	f84d ed08 	str.w	lr, [sp, #-8]!
 801a108:	f7ff ffce 	bl	801a0a8 <__aeabi_cdrcmple>
 801a10c:	bf94      	ite	ls
 801a10e:	2001      	movls	r0, #1
 801a110:	2000      	movhi	r0, #0
 801a112:	f85d fb08 	ldr.w	pc, [sp], #8
 801a116:	bf00      	nop

0801a118 <__aeabi_dcmpgt>:
 801a118:	f84d ed08 	str.w	lr, [sp, #-8]!
 801a11c:	f7ff ffc4 	bl	801a0a8 <__aeabi_cdrcmple>
 801a120:	bf34      	ite	cc
 801a122:	2001      	movcc	r0, #1
 801a124:	2000      	movcs	r0, #0
 801a126:	f85d fb08 	ldr.w	pc, [sp], #8
 801a12a:	bf00      	nop

0801a12c <__aeabi_dcmpun>:
 801a12c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801a130:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 801a134:	d102      	bne.n	801a13c <__aeabi_dcmpun+0x10>
 801a136:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 801a13a:	d10a      	bne.n	801a152 <__aeabi_dcmpun+0x26>
 801a13c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 801a140:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 801a144:	d102      	bne.n	801a14c <__aeabi_dcmpun+0x20>
 801a146:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 801a14a:	d102      	bne.n	801a152 <__aeabi_dcmpun+0x26>
 801a14c:	f04f 0000 	mov.w	r0, #0
 801a150:	4770      	bx	lr
 801a152:	f04f 0001 	mov.w	r0, #1
 801a156:	4770      	bx	lr

0801a158 <__aeabi_d2iz>:
 801a158:	ea4f 0241 	mov.w	r2, r1, lsl #1
 801a15c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 801a160:	d215      	bcs.n	801a18e <__aeabi_d2iz+0x36>
 801a162:	d511      	bpl.n	801a188 <__aeabi_d2iz+0x30>
 801a164:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 801a168:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 801a16c:	d912      	bls.n	801a194 <__aeabi_d2iz+0x3c>
 801a16e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 801a172:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801a176:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 801a17a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 801a17e:	fa23 f002 	lsr.w	r0, r3, r2
 801a182:	bf18      	it	ne
 801a184:	4240      	negne	r0, r0
 801a186:	4770      	bx	lr
 801a188:	f04f 0000 	mov.w	r0, #0
 801a18c:	4770      	bx	lr
 801a18e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 801a192:	d105      	bne.n	801a1a0 <__aeabi_d2iz+0x48>
 801a194:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 801a198:	bf08      	it	eq
 801a19a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 801a19e:	4770      	bx	lr
 801a1a0:	f04f 0000 	mov.w	r0, #0
 801a1a4:	4770      	bx	lr
 801a1a6:	bf00      	nop

0801a1a8 <__aeabi_d2uiz>:
 801a1a8:	004a      	lsls	r2, r1, #1
 801a1aa:	d211      	bcs.n	801a1d0 <__aeabi_d2uiz+0x28>
 801a1ac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 801a1b0:	d211      	bcs.n	801a1d6 <__aeabi_d2uiz+0x2e>
 801a1b2:	d50d      	bpl.n	801a1d0 <__aeabi_d2uiz+0x28>
 801a1b4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 801a1b8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 801a1bc:	d40e      	bmi.n	801a1dc <__aeabi_d2uiz+0x34>
 801a1be:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 801a1c2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801a1c6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 801a1ca:	fa23 f002 	lsr.w	r0, r3, r2
 801a1ce:	4770      	bx	lr
 801a1d0:	f04f 0000 	mov.w	r0, #0
 801a1d4:	4770      	bx	lr
 801a1d6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 801a1da:	d102      	bne.n	801a1e2 <__aeabi_d2uiz+0x3a>
 801a1dc:	f04f 30ff 	mov.w	r0, #4294967295
 801a1e0:	4770      	bx	lr
 801a1e2:	f04f 0000 	mov.w	r0, #0
 801a1e6:	4770      	bx	lr

0801a1e8 <__aeabi_d2f>:
 801a1e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 801a1ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 801a1f0:	bf24      	itt	cs
 801a1f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 801a1f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 801a1fa:	d90d      	bls.n	801a218 <__aeabi_d2f+0x30>
 801a1fc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 801a200:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 801a204:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 801a208:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 801a20c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 801a210:	bf08      	it	eq
 801a212:	f020 0001 	biceq.w	r0, r0, #1
 801a216:	4770      	bx	lr
 801a218:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 801a21c:	d121      	bne.n	801a262 <__aeabi_d2f+0x7a>
 801a21e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 801a222:	bfbc      	itt	lt
 801a224:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 801a228:	4770      	bxlt	lr
 801a22a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 801a22e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 801a232:	f1c2 0218 	rsb	r2, r2, #24
 801a236:	f1c2 0c20 	rsb	ip, r2, #32
 801a23a:	fa10 f30c 	lsls.w	r3, r0, ip
 801a23e:	fa20 f002 	lsr.w	r0, r0, r2
 801a242:	bf18      	it	ne
 801a244:	f040 0001 	orrne.w	r0, r0, #1
 801a248:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 801a24c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 801a250:	fa03 fc0c 	lsl.w	ip, r3, ip
 801a254:	ea40 000c 	orr.w	r0, r0, ip
 801a258:	fa23 f302 	lsr.w	r3, r3, r2
 801a25c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801a260:	e7cc      	b.n	801a1fc <__aeabi_d2f+0x14>
 801a262:	ea7f 5362 	mvns.w	r3, r2, asr #21
 801a266:	d107      	bne.n	801a278 <__aeabi_d2f+0x90>
 801a268:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 801a26c:	bf1e      	ittt	ne
 801a26e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 801a272:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 801a276:	4770      	bxne	lr
 801a278:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 801a27c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 801a280:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 801a284:	4770      	bx	lr
 801a286:	bf00      	nop

0801a288 <__aeabi_uldivmod>:
 801a288:	b953      	cbnz	r3, 801a2a0 <__aeabi_uldivmod+0x18>
 801a28a:	b94a      	cbnz	r2, 801a2a0 <__aeabi_uldivmod+0x18>
 801a28c:	2900      	cmp	r1, #0
 801a28e:	bf08      	it	eq
 801a290:	2800      	cmpeq	r0, #0
 801a292:	bf1c      	itt	ne
 801a294:	f04f 31ff 	movne.w	r1, #4294967295
 801a298:	f04f 30ff 	movne.w	r0, #4294967295
 801a29c:	f000 b9a0 	b.w	801a5e0 <__aeabi_idiv0>
 801a2a0:	f1ad 0c08 	sub.w	ip, sp, #8
 801a2a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 801a2a8:	f000 f83c 	bl	801a324 <__udivmoddi4>
 801a2ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 801a2b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a2b4:	b004      	add	sp, #16
 801a2b6:	4770      	bx	lr

0801a2b8 <__aeabi_d2lz>:
 801a2b8:	b538      	push	{r3, r4, r5, lr}
 801a2ba:	2200      	movs	r2, #0
 801a2bc:	2300      	movs	r3, #0
 801a2be:	4604      	mov	r4, r0
 801a2c0:	460d      	mov	r5, r1
 801a2c2:	f7ff ff0b 	bl	801a0dc <__aeabi_dcmplt>
 801a2c6:	b928      	cbnz	r0, 801a2d4 <__aeabi_d2lz+0x1c>
 801a2c8:	4620      	mov	r0, r4
 801a2ca:	4629      	mov	r1, r5
 801a2cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a2d0:	f000 b80a 	b.w	801a2e8 <__aeabi_d2ulz>
 801a2d4:	4620      	mov	r0, r4
 801a2d6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 801a2da:	f000 f805 	bl	801a2e8 <__aeabi_d2ulz>
 801a2de:	4240      	negs	r0, r0
 801a2e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801a2e4:	bd38      	pop	{r3, r4, r5, pc}
 801a2e6:	bf00      	nop

0801a2e8 <__aeabi_d2ulz>:
 801a2e8:	b5d0      	push	{r4, r6, r7, lr}
 801a2ea:	4b0c      	ldr	r3, [pc, #48]	@ (801a31c <__aeabi_d2ulz+0x34>)
 801a2ec:	2200      	movs	r2, #0
 801a2ee:	4606      	mov	r6, r0
 801a2f0:	460f      	mov	r7, r1
 801a2f2:	f7ff fc81 	bl	8019bf8 <__aeabi_dmul>
 801a2f6:	f7ff ff57 	bl	801a1a8 <__aeabi_d2uiz>
 801a2fa:	4604      	mov	r4, r0
 801a2fc:	f7ff fc02 	bl	8019b04 <__aeabi_ui2d>
 801a300:	4b07      	ldr	r3, [pc, #28]	@ (801a320 <__aeabi_d2ulz+0x38>)
 801a302:	2200      	movs	r2, #0
 801a304:	f7ff fc78 	bl	8019bf8 <__aeabi_dmul>
 801a308:	4602      	mov	r2, r0
 801a30a:	460b      	mov	r3, r1
 801a30c:	4630      	mov	r0, r6
 801a30e:	4639      	mov	r1, r7
 801a310:	f7ff faba 	bl	8019888 <__aeabi_dsub>
 801a314:	f7ff ff48 	bl	801a1a8 <__aeabi_d2uiz>
 801a318:	4621      	mov	r1, r4
 801a31a:	bdd0      	pop	{r4, r6, r7, pc}
 801a31c:	3df00000 	.word	0x3df00000
 801a320:	41f00000 	.word	0x41f00000

0801a324 <__udivmoddi4>:
 801a324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a328:	9d08      	ldr	r5, [sp, #32]
 801a32a:	460c      	mov	r4, r1
 801a32c:	2b00      	cmp	r3, #0
 801a32e:	d14e      	bne.n	801a3ce <__udivmoddi4+0xaa>
 801a330:	4694      	mov	ip, r2
 801a332:	458c      	cmp	ip, r1
 801a334:	4686      	mov	lr, r0
 801a336:	fab2 f282 	clz	r2, r2
 801a33a:	d962      	bls.n	801a402 <__udivmoddi4+0xde>
 801a33c:	b14a      	cbz	r2, 801a352 <__udivmoddi4+0x2e>
 801a33e:	f1c2 0320 	rsb	r3, r2, #32
 801a342:	4091      	lsls	r1, r2
 801a344:	fa20 f303 	lsr.w	r3, r0, r3
 801a348:	fa0c fc02 	lsl.w	ip, ip, r2
 801a34c:	4319      	orrs	r1, r3
 801a34e:	fa00 fe02 	lsl.w	lr, r0, r2
 801a352:	ea4f 471c 	mov.w	r7, ip, lsr #16
 801a356:	fa1f f68c 	uxth.w	r6, ip
 801a35a:	fbb1 f4f7 	udiv	r4, r1, r7
 801a35e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 801a362:	fb07 1114 	mls	r1, r7, r4, r1
 801a366:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801a36a:	fb04 f106 	mul.w	r1, r4, r6
 801a36e:	4299      	cmp	r1, r3
 801a370:	d90a      	bls.n	801a388 <__udivmoddi4+0x64>
 801a372:	eb1c 0303 	adds.w	r3, ip, r3
 801a376:	f104 30ff 	add.w	r0, r4, #4294967295
 801a37a:	f080 8112 	bcs.w	801a5a2 <__udivmoddi4+0x27e>
 801a37e:	4299      	cmp	r1, r3
 801a380:	f240 810f 	bls.w	801a5a2 <__udivmoddi4+0x27e>
 801a384:	3c02      	subs	r4, #2
 801a386:	4463      	add	r3, ip
 801a388:	1a59      	subs	r1, r3, r1
 801a38a:	fa1f f38e 	uxth.w	r3, lr
 801a38e:	fbb1 f0f7 	udiv	r0, r1, r7
 801a392:	fb07 1110 	mls	r1, r7, r0, r1
 801a396:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801a39a:	fb00 f606 	mul.w	r6, r0, r6
 801a39e:	429e      	cmp	r6, r3
 801a3a0:	d90a      	bls.n	801a3b8 <__udivmoddi4+0x94>
 801a3a2:	eb1c 0303 	adds.w	r3, ip, r3
 801a3a6:	f100 31ff 	add.w	r1, r0, #4294967295
 801a3aa:	f080 80fc 	bcs.w	801a5a6 <__udivmoddi4+0x282>
 801a3ae:	429e      	cmp	r6, r3
 801a3b0:	f240 80f9 	bls.w	801a5a6 <__udivmoddi4+0x282>
 801a3b4:	4463      	add	r3, ip
 801a3b6:	3802      	subs	r0, #2
 801a3b8:	1b9b      	subs	r3, r3, r6
 801a3ba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 801a3be:	2100      	movs	r1, #0
 801a3c0:	b11d      	cbz	r5, 801a3ca <__udivmoddi4+0xa6>
 801a3c2:	40d3      	lsrs	r3, r2
 801a3c4:	2200      	movs	r2, #0
 801a3c6:	e9c5 3200 	strd	r3, r2, [r5]
 801a3ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a3ce:	428b      	cmp	r3, r1
 801a3d0:	d905      	bls.n	801a3de <__udivmoddi4+0xba>
 801a3d2:	b10d      	cbz	r5, 801a3d8 <__udivmoddi4+0xb4>
 801a3d4:	e9c5 0100 	strd	r0, r1, [r5]
 801a3d8:	2100      	movs	r1, #0
 801a3da:	4608      	mov	r0, r1
 801a3dc:	e7f5      	b.n	801a3ca <__udivmoddi4+0xa6>
 801a3de:	fab3 f183 	clz	r1, r3
 801a3e2:	2900      	cmp	r1, #0
 801a3e4:	d146      	bne.n	801a474 <__udivmoddi4+0x150>
 801a3e6:	42a3      	cmp	r3, r4
 801a3e8:	d302      	bcc.n	801a3f0 <__udivmoddi4+0xcc>
 801a3ea:	4290      	cmp	r0, r2
 801a3ec:	f0c0 80f0 	bcc.w	801a5d0 <__udivmoddi4+0x2ac>
 801a3f0:	1a86      	subs	r6, r0, r2
 801a3f2:	eb64 0303 	sbc.w	r3, r4, r3
 801a3f6:	2001      	movs	r0, #1
 801a3f8:	2d00      	cmp	r5, #0
 801a3fa:	d0e6      	beq.n	801a3ca <__udivmoddi4+0xa6>
 801a3fc:	e9c5 6300 	strd	r6, r3, [r5]
 801a400:	e7e3      	b.n	801a3ca <__udivmoddi4+0xa6>
 801a402:	2a00      	cmp	r2, #0
 801a404:	f040 8090 	bne.w	801a528 <__udivmoddi4+0x204>
 801a408:	eba1 040c 	sub.w	r4, r1, ip
 801a40c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 801a410:	fa1f f78c 	uxth.w	r7, ip
 801a414:	2101      	movs	r1, #1
 801a416:	fbb4 f6f8 	udiv	r6, r4, r8
 801a41a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 801a41e:	fb08 4416 	mls	r4, r8, r6, r4
 801a422:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801a426:	fb07 f006 	mul.w	r0, r7, r6
 801a42a:	4298      	cmp	r0, r3
 801a42c:	d908      	bls.n	801a440 <__udivmoddi4+0x11c>
 801a42e:	eb1c 0303 	adds.w	r3, ip, r3
 801a432:	f106 34ff 	add.w	r4, r6, #4294967295
 801a436:	d202      	bcs.n	801a43e <__udivmoddi4+0x11a>
 801a438:	4298      	cmp	r0, r3
 801a43a:	f200 80cd 	bhi.w	801a5d8 <__udivmoddi4+0x2b4>
 801a43e:	4626      	mov	r6, r4
 801a440:	1a1c      	subs	r4, r3, r0
 801a442:	fa1f f38e 	uxth.w	r3, lr
 801a446:	fbb4 f0f8 	udiv	r0, r4, r8
 801a44a:	fb08 4410 	mls	r4, r8, r0, r4
 801a44e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801a452:	fb00 f707 	mul.w	r7, r0, r7
 801a456:	429f      	cmp	r7, r3
 801a458:	d908      	bls.n	801a46c <__udivmoddi4+0x148>
 801a45a:	eb1c 0303 	adds.w	r3, ip, r3
 801a45e:	f100 34ff 	add.w	r4, r0, #4294967295
 801a462:	d202      	bcs.n	801a46a <__udivmoddi4+0x146>
 801a464:	429f      	cmp	r7, r3
 801a466:	f200 80b0 	bhi.w	801a5ca <__udivmoddi4+0x2a6>
 801a46a:	4620      	mov	r0, r4
 801a46c:	1bdb      	subs	r3, r3, r7
 801a46e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 801a472:	e7a5      	b.n	801a3c0 <__udivmoddi4+0x9c>
 801a474:	f1c1 0620 	rsb	r6, r1, #32
 801a478:	408b      	lsls	r3, r1
 801a47a:	fa22 f706 	lsr.w	r7, r2, r6
 801a47e:	431f      	orrs	r7, r3
 801a480:	fa20 fc06 	lsr.w	ip, r0, r6
 801a484:	fa04 f301 	lsl.w	r3, r4, r1
 801a488:	ea43 030c 	orr.w	r3, r3, ip
 801a48c:	40f4      	lsrs	r4, r6
 801a48e:	fa00 f801 	lsl.w	r8, r0, r1
 801a492:	0c38      	lsrs	r0, r7, #16
 801a494:	ea4f 4913 	mov.w	r9, r3, lsr #16
 801a498:	fbb4 fef0 	udiv	lr, r4, r0
 801a49c:	fa1f fc87 	uxth.w	ip, r7
 801a4a0:	fb00 441e 	mls	r4, r0, lr, r4
 801a4a4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 801a4a8:	fb0e f90c 	mul.w	r9, lr, ip
 801a4ac:	45a1      	cmp	r9, r4
 801a4ae:	fa02 f201 	lsl.w	r2, r2, r1
 801a4b2:	d90a      	bls.n	801a4ca <__udivmoddi4+0x1a6>
 801a4b4:	193c      	adds	r4, r7, r4
 801a4b6:	f10e 3aff 	add.w	sl, lr, #4294967295
 801a4ba:	f080 8084 	bcs.w	801a5c6 <__udivmoddi4+0x2a2>
 801a4be:	45a1      	cmp	r9, r4
 801a4c0:	f240 8081 	bls.w	801a5c6 <__udivmoddi4+0x2a2>
 801a4c4:	f1ae 0e02 	sub.w	lr, lr, #2
 801a4c8:	443c      	add	r4, r7
 801a4ca:	eba4 0409 	sub.w	r4, r4, r9
 801a4ce:	fa1f f983 	uxth.w	r9, r3
 801a4d2:	fbb4 f3f0 	udiv	r3, r4, r0
 801a4d6:	fb00 4413 	mls	r4, r0, r3, r4
 801a4da:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 801a4de:	fb03 fc0c 	mul.w	ip, r3, ip
 801a4e2:	45a4      	cmp	ip, r4
 801a4e4:	d907      	bls.n	801a4f6 <__udivmoddi4+0x1d2>
 801a4e6:	193c      	adds	r4, r7, r4
 801a4e8:	f103 30ff 	add.w	r0, r3, #4294967295
 801a4ec:	d267      	bcs.n	801a5be <__udivmoddi4+0x29a>
 801a4ee:	45a4      	cmp	ip, r4
 801a4f0:	d965      	bls.n	801a5be <__udivmoddi4+0x29a>
 801a4f2:	3b02      	subs	r3, #2
 801a4f4:	443c      	add	r4, r7
 801a4f6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 801a4fa:	fba0 9302 	umull	r9, r3, r0, r2
 801a4fe:	eba4 040c 	sub.w	r4, r4, ip
 801a502:	429c      	cmp	r4, r3
 801a504:	46ce      	mov	lr, r9
 801a506:	469c      	mov	ip, r3
 801a508:	d351      	bcc.n	801a5ae <__udivmoddi4+0x28a>
 801a50a:	d04e      	beq.n	801a5aa <__udivmoddi4+0x286>
 801a50c:	b155      	cbz	r5, 801a524 <__udivmoddi4+0x200>
 801a50e:	ebb8 030e 	subs.w	r3, r8, lr
 801a512:	eb64 040c 	sbc.w	r4, r4, ip
 801a516:	fa04 f606 	lsl.w	r6, r4, r6
 801a51a:	40cb      	lsrs	r3, r1
 801a51c:	431e      	orrs	r6, r3
 801a51e:	40cc      	lsrs	r4, r1
 801a520:	e9c5 6400 	strd	r6, r4, [r5]
 801a524:	2100      	movs	r1, #0
 801a526:	e750      	b.n	801a3ca <__udivmoddi4+0xa6>
 801a528:	f1c2 0320 	rsb	r3, r2, #32
 801a52c:	fa20 f103 	lsr.w	r1, r0, r3
 801a530:	fa0c fc02 	lsl.w	ip, ip, r2
 801a534:	fa24 f303 	lsr.w	r3, r4, r3
 801a538:	4094      	lsls	r4, r2
 801a53a:	430c      	orrs	r4, r1
 801a53c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 801a540:	fa00 fe02 	lsl.w	lr, r0, r2
 801a544:	fa1f f78c 	uxth.w	r7, ip
 801a548:	fbb3 f0f8 	udiv	r0, r3, r8
 801a54c:	fb08 3110 	mls	r1, r8, r0, r3
 801a550:	0c23      	lsrs	r3, r4, #16
 801a552:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801a556:	fb00 f107 	mul.w	r1, r0, r7
 801a55a:	4299      	cmp	r1, r3
 801a55c:	d908      	bls.n	801a570 <__udivmoddi4+0x24c>
 801a55e:	eb1c 0303 	adds.w	r3, ip, r3
 801a562:	f100 36ff 	add.w	r6, r0, #4294967295
 801a566:	d22c      	bcs.n	801a5c2 <__udivmoddi4+0x29e>
 801a568:	4299      	cmp	r1, r3
 801a56a:	d92a      	bls.n	801a5c2 <__udivmoddi4+0x29e>
 801a56c:	3802      	subs	r0, #2
 801a56e:	4463      	add	r3, ip
 801a570:	1a5b      	subs	r3, r3, r1
 801a572:	b2a4      	uxth	r4, r4
 801a574:	fbb3 f1f8 	udiv	r1, r3, r8
 801a578:	fb08 3311 	mls	r3, r8, r1, r3
 801a57c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 801a580:	fb01 f307 	mul.w	r3, r1, r7
 801a584:	42a3      	cmp	r3, r4
 801a586:	d908      	bls.n	801a59a <__udivmoddi4+0x276>
 801a588:	eb1c 0404 	adds.w	r4, ip, r4
 801a58c:	f101 36ff 	add.w	r6, r1, #4294967295
 801a590:	d213      	bcs.n	801a5ba <__udivmoddi4+0x296>
 801a592:	42a3      	cmp	r3, r4
 801a594:	d911      	bls.n	801a5ba <__udivmoddi4+0x296>
 801a596:	3902      	subs	r1, #2
 801a598:	4464      	add	r4, ip
 801a59a:	1ae4      	subs	r4, r4, r3
 801a59c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801a5a0:	e739      	b.n	801a416 <__udivmoddi4+0xf2>
 801a5a2:	4604      	mov	r4, r0
 801a5a4:	e6f0      	b.n	801a388 <__udivmoddi4+0x64>
 801a5a6:	4608      	mov	r0, r1
 801a5a8:	e706      	b.n	801a3b8 <__udivmoddi4+0x94>
 801a5aa:	45c8      	cmp	r8, r9
 801a5ac:	d2ae      	bcs.n	801a50c <__udivmoddi4+0x1e8>
 801a5ae:	ebb9 0e02 	subs.w	lr, r9, r2
 801a5b2:	eb63 0c07 	sbc.w	ip, r3, r7
 801a5b6:	3801      	subs	r0, #1
 801a5b8:	e7a8      	b.n	801a50c <__udivmoddi4+0x1e8>
 801a5ba:	4631      	mov	r1, r6
 801a5bc:	e7ed      	b.n	801a59a <__udivmoddi4+0x276>
 801a5be:	4603      	mov	r3, r0
 801a5c0:	e799      	b.n	801a4f6 <__udivmoddi4+0x1d2>
 801a5c2:	4630      	mov	r0, r6
 801a5c4:	e7d4      	b.n	801a570 <__udivmoddi4+0x24c>
 801a5c6:	46d6      	mov	lr, sl
 801a5c8:	e77f      	b.n	801a4ca <__udivmoddi4+0x1a6>
 801a5ca:	4463      	add	r3, ip
 801a5cc:	3802      	subs	r0, #2
 801a5ce:	e74d      	b.n	801a46c <__udivmoddi4+0x148>
 801a5d0:	4606      	mov	r6, r0
 801a5d2:	4623      	mov	r3, r4
 801a5d4:	4608      	mov	r0, r1
 801a5d6:	e70f      	b.n	801a3f8 <__udivmoddi4+0xd4>
 801a5d8:	3e02      	subs	r6, #2
 801a5da:	4463      	add	r3, ip
 801a5dc:	e730      	b.n	801a440 <__udivmoddi4+0x11c>
 801a5de:	bf00      	nop

0801a5e0 <__aeabi_idiv0>:
 801a5e0:	4770      	bx	lr
 801a5e2:	bf00      	nop

0801a5e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 801a5e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 801a61c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 801a5e8:	480d      	ldr	r0, [pc, #52]	@ (801a620 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 801a5ea:	490e      	ldr	r1, [pc, #56]	@ (801a624 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 801a5ec:	4a0e      	ldr	r2, [pc, #56]	@ (801a628 <LoopFillZerobss+0x1e>)
  movs r3, #0
 801a5ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 801a5f0:	e002      	b.n	801a5f8 <LoopCopyDataInit>

0801a5f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801a5f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 801a5f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801a5f6:	3304      	adds	r3, #4

0801a5f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801a5f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801a5fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801a5fc:	d3f9      	bcc.n	801a5f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801a5fe:	4a0b      	ldr	r2, [pc, #44]	@ (801a62c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 801a600:	4c0b      	ldr	r4, [pc, #44]	@ (801a630 <LoopFillZerobss+0x26>)
  movs r3, #0
 801a602:	2300      	movs	r3, #0
  b LoopFillZerobss
 801a604:	e001      	b.n	801a60a <LoopFillZerobss>

0801a606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801a606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801a608:	3204      	adds	r2, #4

0801a60a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801a60a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801a60c:	d3fb      	bcc.n	801a606 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 801a60e:	f7e7 fded 	bl	80021ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801a612:	f008 ffdd 	bl	80235d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801a616:	f7e6 ff35 	bl	8001484 <main>
  bx  lr    
 801a61a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 801a61c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 801a620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 801a624:	20000998 	.word	0x20000998
  ldr r2, =_sidata
 801a628:	08044d00 	.word	0x08044d00
  ldr r2, =_sbss
 801a62c:	20000998 	.word	0x20000998
  ldr r4, =_ebss
 801a630:	20009e88 	.word	0x20009e88

0801a634 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801a634:	e7fe      	b.n	801a634 <ADC_IRQHandler>
	...

0801a638 <ai_buffer_get_size>:
 801a638:	b378      	cbz	r0, 801a69a <ai_buffer_get_size+0x62>
 801a63a:	b410      	push	{r4}
 801a63c:	6803      	ldr	r3, [r0, #0]
 801a63e:	4a17      	ldr	r2, [pc, #92]	@ (801a69c <ai_buffer_get_size+0x64>)
 801a640:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 801a644:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 801a648:	4293      	cmp	r3, r2
 801a64a:	d01e      	beq.n	801a68a <ai_buffer_get_size+0x52>
 801a64c:	6984      	ldr	r4, [r0, #24]
 801a64e:	6862      	ldr	r2, [r4, #4]
 801a650:	7d03      	ldrb	r3, [r0, #20]
 801a652:	6941      	ldr	r1, [r0, #20]
 801a654:	f1a3 0301 	sub.w	r3, r3, #1
 801a658:	fab3 f383 	clz	r3, r3
 801a65c:	095b      	lsrs	r3, r3, #5
 801a65e:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 801a662:	f3c1 2017 	ubfx	r0, r1, #8, #24
 801a666:	da0b      	bge.n	801a680 <ai_buffer_get_size+0x48>
 801a668:	2b01      	cmp	r3, #1
 801a66a:	d102      	bne.n	801a672 <ai_buffer_get_size+0x3a>
 801a66c:	2802      	cmp	r0, #2
 801a66e:	d007      	beq.n	801a680 <ai_buffer_get_size+0x48>
 801a670:	2302      	movs	r3, #2
 801a672:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 801a676:	3301      	adds	r3, #1
 801a678:	4298      	cmp	r0, r3
 801a67a:	fb01 f202 	mul.w	r2, r1, r2
 801a67e:	d1f3      	bne.n	801a668 <ai_buffer_get_size+0x30>
 801a680:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 801a684:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a688:	4770      	bx	lr
 801a68a:	2900      	cmp	r1, #0
 801a68c:	d0de      	beq.n	801a64c <ai_buffer_get_size+0x14>
 801a68e:	6984      	ldr	r4, [r0, #24]
 801a690:	6862      	ldr	r2, [r4, #4]
 801a692:	321f      	adds	r2, #31
 801a694:	f022 021f 	bic.w	r2, r2, #31
 801a698:	e7da      	b.n	801a650 <ai_buffer_get_size+0x18>
 801a69a:	4770      	bx	lr
 801a69c:	000400c0 	.word	0x000400c0

0801a6a0 <ai_buffer_array_sane>:
 801a6a0:	b138      	cbz	r0, 801a6b2 <ai_buffer_array_sane+0x12>
 801a6a2:	6843      	ldr	r3, [r0, #4]
 801a6a4:	b123      	cbz	r3, 801a6b0 <ai_buffer_array_sane+0x10>
 801a6a6:	8840      	ldrh	r0, [r0, #2]
 801a6a8:	3800      	subs	r0, #0
 801a6aa:	bf18      	it	ne
 801a6ac:	2001      	movne	r0, #1
 801a6ae:	4770      	bx	lr
 801a6b0:	4618      	mov	r0, r3
 801a6b2:	4770      	bx	lr

0801a6b4 <ai_buffer_array_item_set_address>:
 801a6b4:	b150      	cbz	r0, 801a6cc <ai_buffer_array_item_set_address+0x18>
 801a6b6:	6843      	ldr	r3, [r0, #4]
 801a6b8:	b14b      	cbz	r3, 801a6ce <ai_buffer_array_item_set_address+0x1a>
 801a6ba:	8840      	ldrh	r0, [r0, #2]
 801a6bc:	b900      	cbnz	r0, 801a6c0 <ai_buffer_array_item_set_address+0xc>
 801a6be:	4770      	bx	lr
 801a6c0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 801a6c4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801a6c8:	2001      	movs	r0, #1
 801a6ca:	605a      	str	r2, [r3, #4]
 801a6cc:	4770      	bx	lr
 801a6ce:	4618      	mov	r0, r3
 801a6d0:	4770      	bx	lr
 801a6d2:	bf00      	nop

0801a6d4 <ai_platform_get_weights_map>:
 801a6d4:	2a00      	cmp	r2, #0
 801a6d6:	d037      	beq.n	801a748 <ai_platform_get_weights_map+0x74>
 801a6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a6da:	4604      	mov	r4, r0
 801a6dc:	b1a0      	cbz	r0, 801a708 <ai_platform_get_weights_map+0x34>
 801a6de:	460f      	mov	r7, r1
 801a6e0:	b191      	cbz	r1, 801a708 <ai_platform_get_weights_map+0x34>
 801a6e2:	4b25      	ldr	r3, [pc, #148]	@ (801a778 <ai_platform_get_weights_map+0xa4>)
 801a6e4:	6810      	ldr	r0, [r2, #0]
 801a6e6:	4298      	cmp	r0, r3
 801a6e8:	4615      	mov	r5, r2
 801a6ea:	d00f      	beq.n	801a70c <ai_platform_get_weights_map+0x38>
 801a6ec:	6855      	ldr	r5, [r2, #4]
 801a6ee:	b15d      	cbz	r5, 801a708 <ai_platform_get_weights_map+0x34>
 801a6f0:	682e      	ldr	r6, [r5, #0]
 801a6f2:	429e      	cmp	r6, r3
 801a6f4:	d02a      	beq.n	801a74c <ai_platform_get_weights_map+0x78>
 801a6f6:	f1a1 0001 	sub.w	r0, r1, #1
 801a6fa:	6025      	str	r5, [r4, #0]
 801a6fc:	fab0 f080 	clz	r0, r0
 801a700:	0940      	lsrs	r0, r0, #5
 801a702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a704:	42a7      	cmp	r7, r4
 801a706:	d034      	beq.n	801a772 <ai_platform_get_weights_map+0x9e>
 801a708:	2000      	movs	r0, #0
 801a70a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a70c:	1d10      	adds	r0, r2, #4
 801a70e:	f7ff ffc7 	bl	801a6a0 <ai_buffer_array_sane>
 801a712:	2800      	cmp	r0, #0
 801a714:	d0f8      	beq.n	801a708 <ai_platform_get_weights_map+0x34>
 801a716:	88eb      	ldrh	r3, [r5, #6]
 801a718:	429f      	cmp	r7, r3
 801a71a:	d1f5      	bne.n	801a708 <ai_platform_get_weights_map+0x34>
 801a71c:	f04f 0c00 	mov.w	ip, #0
 801a720:	1f20      	subs	r0, r4, #4
 801a722:	46e6      	mov	lr, ip
 801a724:	68ab      	ldr	r3, [r5, #8]
 801a726:	4463      	add	r3, ip
 801a728:	f10c 0c1c 	add.w	ip, ip, #28
 801a72c:	685b      	ldr	r3, [r3, #4]
 801a72e:	b12b      	cbz	r3, 801a73c <ai_platform_get_weights_map+0x68>
 801a730:	f10e 0e01 	add.w	lr, lr, #1
 801a734:	4577      	cmp	r7, lr
 801a736:	f840 3f04 	str.w	r3, [r0, #4]!
 801a73a:	d1f3      	bne.n	801a724 <ai_platform_get_weights_map+0x50>
 801a73c:	eba7 000e 	sub.w	r0, r7, lr
 801a740:	fab0 f080 	clz	r0, r0
 801a744:	0940      	lsrs	r0, r0, #5
 801a746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a748:	2000      	movs	r0, #0
 801a74a:	4770      	bx	lr
 801a74c:	1f20      	subs	r0, r4, #4
 801a74e:	462a      	mov	r2, r5
 801a750:	2400      	movs	r4, #0
 801a752:	e000      	b.n	801a756 <ai_platform_get_weights_map+0x82>
 801a754:	461c      	mov	r4, r3
 801a756:	f852 3f04 	ldr.w	r3, [r2, #4]!
 801a75a:	42b3      	cmp	r3, r6
 801a75c:	d0d2      	beq.n	801a704 <ai_platform_get_weights_map+0x30>
 801a75e:	f840 3f04 	str.w	r3, [r0, #4]!
 801a762:	1c63      	adds	r3, r4, #1
 801a764:	429f      	cmp	r7, r3
 801a766:	d1f5      	bne.n	801a754 <ai_platform_get_weights_map+0x80>
 801a768:	3402      	adds	r4, #2
 801a76a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801a76e:	42b3      	cmp	r3, r6
 801a770:	d1ca      	bne.n	801a708 <ai_platform_get_weights_map+0x34>
 801a772:	2001      	movs	r0, #1
 801a774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a776:	bf00      	nop
 801a778:	a1facade 	.word	0xa1facade

0801a77c <ai_platform_get_activations_map>:
 801a77c:	2a00      	cmp	r2, #0
 801a77e:	d038      	beq.n	801a7f2 <ai_platform_get_activations_map+0x76>
 801a780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a782:	4604      	mov	r4, r0
 801a784:	b1a0      	cbz	r0, 801a7b0 <ai_platform_get_activations_map+0x34>
 801a786:	460f      	mov	r7, r1
 801a788:	b191      	cbz	r1, 801a7b0 <ai_platform_get_activations_map+0x34>
 801a78a:	4b25      	ldr	r3, [pc, #148]	@ (801a820 <ai_platform_get_activations_map+0xa4>)
 801a78c:	6810      	ldr	r0, [r2, #0]
 801a78e:	4298      	cmp	r0, r3
 801a790:	4615      	mov	r5, r2
 801a792:	d00f      	beq.n	801a7b4 <ai_platform_get_activations_map+0x38>
 801a794:	6a15      	ldr	r5, [r2, #32]
 801a796:	b15d      	cbz	r5, 801a7b0 <ai_platform_get_activations_map+0x34>
 801a798:	682e      	ldr	r6, [r5, #0]
 801a79a:	429e      	cmp	r6, r3
 801a79c:	d02b      	beq.n	801a7f6 <ai_platform_get_activations_map+0x7a>
 801a79e:	f1a1 0001 	sub.w	r0, r1, #1
 801a7a2:	6025      	str	r5, [r4, #0]
 801a7a4:	fab0 f080 	clz	r0, r0
 801a7a8:	0940      	lsrs	r0, r0, #5
 801a7aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a7ac:	42a7      	cmp	r7, r4
 801a7ae:	d035      	beq.n	801a81c <ai_platform_get_activations_map+0xa0>
 801a7b0:	2000      	movs	r0, #0
 801a7b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a7b4:	f102 000c 	add.w	r0, r2, #12
 801a7b8:	f7ff ff72 	bl	801a6a0 <ai_buffer_array_sane>
 801a7bc:	2800      	cmp	r0, #0
 801a7be:	d0f7      	beq.n	801a7b0 <ai_platform_get_activations_map+0x34>
 801a7c0:	89eb      	ldrh	r3, [r5, #14]
 801a7c2:	429f      	cmp	r7, r3
 801a7c4:	d1f4      	bne.n	801a7b0 <ai_platform_get_activations_map+0x34>
 801a7c6:	f04f 0c00 	mov.w	ip, #0
 801a7ca:	1f20      	subs	r0, r4, #4
 801a7cc:	46e6      	mov	lr, ip
 801a7ce:	692b      	ldr	r3, [r5, #16]
 801a7d0:	4463      	add	r3, ip
 801a7d2:	f10c 0c1c 	add.w	ip, ip, #28
 801a7d6:	685b      	ldr	r3, [r3, #4]
 801a7d8:	b12b      	cbz	r3, 801a7e6 <ai_platform_get_activations_map+0x6a>
 801a7da:	f10e 0e01 	add.w	lr, lr, #1
 801a7de:	4577      	cmp	r7, lr
 801a7e0:	f840 3f04 	str.w	r3, [r0, #4]!
 801a7e4:	d1f3      	bne.n	801a7ce <ai_platform_get_activations_map+0x52>
 801a7e6:	eba7 000e 	sub.w	r0, r7, lr
 801a7ea:	fab0 f080 	clz	r0, r0
 801a7ee:	0940      	lsrs	r0, r0, #5
 801a7f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a7f2:	2000      	movs	r0, #0
 801a7f4:	4770      	bx	lr
 801a7f6:	1f20      	subs	r0, r4, #4
 801a7f8:	462a      	mov	r2, r5
 801a7fa:	2400      	movs	r4, #0
 801a7fc:	e000      	b.n	801a800 <ai_platform_get_activations_map+0x84>
 801a7fe:	461c      	mov	r4, r3
 801a800:	f852 3f04 	ldr.w	r3, [r2, #4]!
 801a804:	42b3      	cmp	r3, r6
 801a806:	d0d1      	beq.n	801a7ac <ai_platform_get_activations_map+0x30>
 801a808:	f840 3f04 	str.w	r3, [r0, #4]!
 801a80c:	1c63      	adds	r3, r4, #1
 801a80e:	429f      	cmp	r7, r3
 801a810:	d1f5      	bne.n	801a7fe <ai_platform_get_activations_map+0x82>
 801a812:	3402      	adds	r4, #2
 801a814:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801a818:	42b3      	cmp	r3, r6
 801a81a:	d1c9      	bne.n	801a7b0 <ai_platform_get_activations_map+0x34>
 801a81c:	2001      	movs	r0, #1
 801a81e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a820:	a1facade 	.word	0xa1facade

0801a824 <ai_platform_bind_network_params>:
 801a824:	b1a0      	cbz	r0, 801a850 <ai_platform_bind_network_params+0x2c>
 801a826:	b1b1      	cbz	r1, 801a856 <ai_platform_bind_network_params+0x32>
 801a828:	b1c2      	cbz	r2, 801a85c <ai_platform_bind_network_params+0x38>
 801a82a:	b410      	push	{r4}
 801a82c:	4603      	mov	r3, r0
 801a82e:	4c0d      	ldr	r4, [pc, #52]	@ (801a864 <ai_platform_bind_network_params+0x40>)
 801a830:	f843 4b04 	str.w	r4, [r3], #4
 801a834:	f100 0c0c 	add.w	ip, r0, #12
 801a838:	c903      	ldmia	r1, {r0, r1}
 801a83a:	e883 0003 	stmia.w	r3, {r0, r1}
 801a83e:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a842:	e88c 0003 	stmia.w	ip, {r0, r1}
 801a846:	2301      	movs	r3, #1
 801a848:	4618      	mov	r0, r3
 801a84a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a84e:	4770      	bx	lr
 801a850:	4603      	mov	r3, r0
 801a852:	4618      	mov	r0, r3
 801a854:	4770      	bx	lr
 801a856:	460b      	mov	r3, r1
 801a858:	4618      	mov	r0, r3
 801a85a:	4770      	bx	lr
 801a85c:	4613      	mov	r3, r2
 801a85e:	4618      	mov	r0, r3
 801a860:	4770      	bx	lr
 801a862:	bf00      	nop
 801a864:	a1facade 	.word	0xa1facade

0801a868 <ai_platform_runtime_get_revision>:
 801a868:	4800      	ldr	r0, [pc, #0]	@ (801a86c <ai_platform_runtime_get_revision+0x4>)
 801a86a:	4770      	bx	lr
 801a86c:	08044664 	.word	0x08044664

0801a870 <ai_platform_runtime_get_version>:
 801a870:	b082      	sub	sp, #8
 801a872:	2009      	movs	r0, #9
 801a874:	b002      	add	sp, #8
 801a876:	4770      	bx	lr

0801a878 <ai_platform_api_get_version>:
 801a878:	4b09      	ldr	r3, [pc, #36]	@ (801a8a0 <ai_platform_api_get_version+0x28>)
 801a87a:	681b      	ldr	r3, [r3, #0]
 801a87c:	2000      	movs	r0, #0
 801a87e:	b2da      	uxtb	r2, r3
 801a880:	f362 0007 	bfi	r0, r2, #0, #8
 801a884:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801a888:	f362 200f 	bfi	r0, r2, #8, #8
 801a88c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801a890:	f362 4017 	bfi	r0, r2, #16, #8
 801a894:	0e1b      	lsrs	r3, r3, #24
 801a896:	b082      	sub	sp, #8
 801a898:	f363 601f 	bfi	r0, r3, #24, #8
 801a89c:	b002      	add	sp, #8
 801a89e:	4770      	bx	lr
 801a8a0:	08044668 	.word	0x08044668

0801a8a4 <ai_platform_interface_api_get_version>:
 801a8a4:	4b09      	ldr	r3, [pc, #36]	@ (801a8cc <ai_platform_interface_api_get_version+0x28>)
 801a8a6:	681b      	ldr	r3, [r3, #0]
 801a8a8:	2000      	movs	r0, #0
 801a8aa:	b2da      	uxtb	r2, r3
 801a8ac:	f362 0007 	bfi	r0, r2, #0, #8
 801a8b0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801a8b4:	f362 200f 	bfi	r0, r2, #8, #8
 801a8b8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801a8bc:	f362 4017 	bfi	r0, r2, #16, #8
 801a8c0:	0e1b      	lsrs	r3, r3, #24
 801a8c2:	b082      	sub	sp, #8
 801a8c4:	f363 601f 	bfi	r0, r3, #24, #8
 801a8c8:	b002      	add	sp, #8
 801a8ca:	4770      	bx	lr
 801a8cc:	0804466c 	.word	0x0804466c

0801a8d0 <ai_platform_context_acquire>:
 801a8d0:	6802      	ldr	r2, [r0, #0]
 801a8d2:	4b02      	ldr	r3, [pc, #8]	@ (801a8dc <ai_platform_context_acquire+0xc>)
 801a8d4:	4393      	bics	r3, r2
 801a8d6:	bf18      	it	ne
 801a8d8:	2000      	movne	r0, #0
 801a8da:	4770      	bx	lr
 801a8dc:	a1c00100 	.word	0xa1c00100

0801a8e0 <ai_platform_network_get_error>:
 801a8e0:	4b04      	ldr	r3, [pc, #16]	@ (801a8f4 <ai_platform_network_get_error+0x14>)
 801a8e2:	6802      	ldr	r2, [r0, #0]
 801a8e4:	4393      	bics	r3, r2
 801a8e6:	d102      	bne.n	801a8ee <ai_platform_network_get_error+0xe>
 801a8e8:	300c      	adds	r0, #12
 801a8ea:	f000 be37 	b.w	801b55c <core_get_error>
 801a8ee:	f241 0010 	movw	r0, #4112	@ 0x1010
 801a8f2:	4770      	bx	lr
 801a8f4:	a1c00100 	.word	0xa1c00100

0801a8f8 <ai_platform_network_set_error>:
 801a8f8:	b110      	cbz	r0, 801a900 <ai_platform_network_set_error+0x8>
 801a8fa:	300c      	adds	r0, #12
 801a8fc:	f000 be34 	b.w	801b568 <core_set_error>
 801a900:	4770      	bx	lr
 801a902:	bf00      	nop

0801a904 <ai_platform_inputs_get>:
 801a904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a908:	4b38      	ldr	r3, [pc, #224]	@ (801a9ec <ai_platform_inputs_get+0xe8>)
 801a90a:	6802      	ldr	r2, [r0, #0]
 801a90c:	b085      	sub	sp, #20
 801a90e:	4393      	bics	r3, r2
 801a910:	9003      	str	r0, [sp, #12]
 801a912:	9102      	str	r1, [sp, #8]
 801a914:	d160      	bne.n	801a9d8 <ai_platform_inputs_get+0xd4>
 801a916:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 801a918:	2b00      	cmp	r3, #0
 801a91a:	d04f      	beq.n	801a9bc <ai_platform_inputs_get+0xb8>
 801a91c:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 801a920:	f1ba 0f00 	cmp.w	sl, #0
 801a924:	d04a      	beq.n	801a9bc <ai_platform_inputs_get+0xb8>
 801a926:	f04f 0b00 	mov.w	fp, #0
 801a92a:	465d      	mov	r5, fp
 801a92c:	e016      	b.n	801a95c <ai_platform_inputs_get+0x58>
 801a92e:	9901      	ldr	r1, [sp, #4]
 801a930:	2201      	movs	r2, #1
 801a932:	507a      	str	r2, [r7, r1]
 801a934:	69b1      	ldr	r1, [r6, #24]
 801a936:	684e      	ldr	r6, [r1, #4]
 801a938:	60a3      	str	r3, [r4, #8]
 801a93a:	f04f 0201 	mov.w	r2, #1
 801a93e:	7522      	strb	r2, [r4, #20]
 801a940:	6961      	ldr	r1, [r4, #20]
 801a942:	6020      	str	r0, [r4, #0]
 801a944:	f369 211f 	bfi	r1, r9, #8, #24
 801a948:	2300      	movs	r3, #0
 801a94a:	e9c4 3603 	strd	r3, r6, [r4, #12]
 801a94e:	e9c4 1805 	strd	r1, r8, [r4, #20]
 801a952:	f8c4 c004 	str.w	ip, [r4, #4]
 801a956:	3501      	adds	r5, #1
 801a958:	f10b 0b1c 	add.w	fp, fp, #28
 801a95c:	f8ba 3000 	ldrh.w	r3, [sl]
 801a960:	42ab      	cmp	r3, r5
 801a962:	b2aa      	uxth	r2, r5
 801a964:	d93c      	bls.n	801a9e0 <ai_platform_inputs_get+0xdc>
 801a966:	f8da 3004 	ldr.w	r3, [sl, #4]
 801a96a:	00e9      	lsls	r1, r5, #3
 801a96c:	9101      	str	r1, [sp, #4]
 801a96e:	2b00      	cmp	r3, #0
 801a970:	d036      	beq.n	801a9e0 <ai_platform_inputs_get+0xdc>
 801a972:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 801a976:	2e00      	cmp	r6, #0
 801a978:	d032      	beq.n	801a9e0 <ai_platform_inputs_get+0xdc>
 801a97a:	f8da 3008 	ldr.w	r3, [sl, #8]
 801a97e:	69b2      	ldr	r2, [r6, #24]
 801a980:	f8d6 800c 	ldr.w	r8, [r6, #12]
 801a984:	6810      	ldr	r0, [r2, #0]
 801a986:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 801a98a:	68b3      	ldr	r3, [r6, #8]
 801a98c:	f3c3 2917 	ubfx	r9, r3, #8, #24
 801a990:	f002 fbac 	bl	801d0ec <ai_array_to_buffer_fmt>
 801a994:	69b1      	ldr	r1, [r6, #24]
 801a996:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 801a99a:	f8d1 c008 	ldr.w	ip, [r1, #8]
 801a99e:	445c      	add	r4, fp
 801a9a0:	2b00      	cmp	r3, #0
 801a9a2:	d0c8      	beq.n	801a936 <ai_platform_inputs_get+0x32>
 801a9a4:	2100      	movs	r1, #0
 801a9a6:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 801a9aa:	6831      	ldr	r1, [r6, #0]
 801a9ac:	6059      	str	r1, [r3, #4]
 801a9ae:	b111      	cbz	r1, 801a9b6 <ai_platform_inputs_get+0xb2>
 801a9b0:	8849      	ldrh	r1, [r1, #2]
 801a9b2:	2900      	cmp	r1, #0
 801a9b4:	d1bb      	bne.n	801a92e <ai_platform_inputs_get+0x2a>
 801a9b6:	69b1      	ldr	r1, [r6, #24]
 801a9b8:	2300      	movs	r3, #0
 801a9ba:	e7bc      	b.n	801a936 <ai_platform_inputs_get+0x32>
 801a9bc:	9803      	ldr	r0, [sp, #12]
 801a9be:	2218      	movs	r2, #24
 801a9c0:	2111      	movs	r1, #17
 801a9c2:	300c      	adds	r0, #12
 801a9c4:	f000 fdd0 	bl	801b568 <core_set_error>
 801a9c8:	2200      	movs	r2, #0
 801a9ca:	4610      	mov	r0, r2
 801a9cc:	9b02      	ldr	r3, [sp, #8]
 801a9ce:	b103      	cbz	r3, 801a9d2 <ai_platform_inputs_get+0xce>
 801a9d0:	801a      	strh	r2, [r3, #0]
 801a9d2:	b005      	add	sp, #20
 801a9d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9d8:	2000      	movs	r0, #0
 801a9da:	b005      	add	sp, #20
 801a9dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9e0:	2a00      	cmp	r2, #0
 801a9e2:	d0eb      	beq.n	801a9bc <ai_platform_inputs_get+0xb8>
 801a9e4:	f8da 3008 	ldr.w	r3, [sl, #8]
 801a9e8:	6858      	ldr	r0, [r3, #4]
 801a9ea:	e7ef      	b.n	801a9cc <ai_platform_inputs_get+0xc8>
 801a9ec:	a1c00100 	.word	0xa1c00100

0801a9f0 <ai_platform_outputs_get>:
 801a9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9f4:	4b37      	ldr	r3, [pc, #220]	@ (801aad4 <ai_platform_outputs_get+0xe4>)
 801a9f6:	6802      	ldr	r2, [r0, #0]
 801a9f8:	b085      	sub	sp, #20
 801a9fa:	4393      	bics	r3, r2
 801a9fc:	9003      	str	r0, [sp, #12]
 801a9fe:	9102      	str	r1, [sp, #8]
 801aa00:	d15d      	bne.n	801aabe <ai_platform_outputs_get+0xce>
 801aa02:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 801aa04:	2b01      	cmp	r3, #1
 801aa06:	d94c      	bls.n	801aaa2 <ai_platform_outputs_get+0xb2>
 801aa08:	f04f 0b00 	mov.w	fp, #0
 801aa0c:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 801aa10:	465d      	mov	r5, fp
 801aa12:	46d8      	mov	r8, fp
 801aa14:	e016      	b.n	801aa44 <ai_platform_outputs_get+0x54>
 801aa16:	9a01      	ldr	r2, [sp, #4]
 801aa18:	2101      	movs	r1, #1
 801aa1a:	50b9      	str	r1, [r7, r2]
 801aa1c:	69b2      	ldr	r2, [r6, #24]
 801aa1e:	6856      	ldr	r6, [r2, #4]
 801aa20:	6020      	str	r0, [r4, #0]
 801aa22:	f04f 0201 	mov.w	r2, #1
 801aa26:	7522      	strb	r2, [r4, #20]
 801aa28:	6960      	ldr	r0, [r4, #20]
 801aa2a:	f8c4 c004 	str.w	ip, [r4, #4]
 801aa2e:	f369 201f 	bfi	r0, r9, #8, #24
 801aa32:	e9c4 6004 	strd	r6, r0, [r4, #16]
 801aa36:	e9c4 3802 	strd	r3, r8, [r4, #8]
 801aa3a:	9b00      	ldr	r3, [sp, #0]
 801aa3c:	61a3      	str	r3, [r4, #24]
 801aa3e:	3501      	adds	r5, #1
 801aa40:	f10b 0b1c 	add.w	fp, fp, #28
 801aa44:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801aa48:	42ab      	cmp	r3, r5
 801aa4a:	b2aa      	uxth	r2, r5
 801aa4c:	d93b      	bls.n	801aac6 <ai_platform_outputs_get+0xd6>
 801aa4e:	f8da 3010 	ldr.w	r3, [sl, #16]
 801aa52:	00e9      	lsls	r1, r5, #3
 801aa54:	9101      	str	r1, [sp, #4]
 801aa56:	2b00      	cmp	r3, #0
 801aa58:	d035      	beq.n	801aac6 <ai_platform_outputs_get+0xd6>
 801aa5a:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 801aa5e:	2e00      	cmp	r6, #0
 801aa60:	d031      	beq.n	801aac6 <ai_platform_outputs_get+0xd6>
 801aa62:	f8da 3014 	ldr.w	r3, [sl, #20]
 801aa66:	69b2      	ldr	r2, [r6, #24]
 801aa68:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 801aa6c:	68b3      	ldr	r3, [r6, #8]
 801aa6e:	6810      	ldr	r0, [r2, #0]
 801aa70:	f3c3 2917 	ubfx	r9, r3, #8, #24
 801aa74:	68f3      	ldr	r3, [r6, #12]
 801aa76:	9300      	str	r3, [sp, #0]
 801aa78:	f002 fb38 	bl	801d0ec <ai_array_to_buffer_fmt>
 801aa7c:	69b2      	ldr	r2, [r6, #24]
 801aa7e:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 801aa82:	f8d2 c008 	ldr.w	ip, [r2, #8]
 801aa86:	445c      	add	r4, fp
 801aa88:	2b00      	cmp	r3, #0
 801aa8a:	d0c8      	beq.n	801aa1e <ai_platform_outputs_get+0x2e>
 801aa8c:	f847 8035 	str.w	r8, [r7, r5, lsl #3]
 801aa90:	6832      	ldr	r2, [r6, #0]
 801aa92:	605a      	str	r2, [r3, #4]
 801aa94:	b112      	cbz	r2, 801aa9c <ai_platform_outputs_get+0xac>
 801aa96:	8852      	ldrh	r2, [r2, #2]
 801aa98:	2a00      	cmp	r2, #0
 801aa9a:	d1bc      	bne.n	801aa16 <ai_platform_outputs_get+0x26>
 801aa9c:	69b2      	ldr	r2, [r6, #24]
 801aa9e:	2300      	movs	r3, #0
 801aaa0:	e7bd      	b.n	801aa1e <ai_platform_outputs_get+0x2e>
 801aaa2:	9803      	ldr	r0, [sp, #12]
 801aaa4:	2218      	movs	r2, #24
 801aaa6:	2111      	movs	r1, #17
 801aaa8:	300c      	adds	r0, #12
 801aaaa:	f000 fd5d 	bl	801b568 <core_set_error>
 801aaae:	2200      	movs	r2, #0
 801aab0:	4610      	mov	r0, r2
 801aab2:	9b02      	ldr	r3, [sp, #8]
 801aab4:	b103      	cbz	r3, 801aab8 <ai_platform_outputs_get+0xc8>
 801aab6:	801a      	strh	r2, [r3, #0]
 801aab8:	b005      	add	sp, #20
 801aaba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aabe:	2000      	movs	r0, #0
 801aac0:	b005      	add	sp, #20
 801aac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aac6:	2a00      	cmp	r2, #0
 801aac8:	d0eb      	beq.n	801aaa2 <ai_platform_outputs_get+0xb2>
 801aaca:	f8da 3014 	ldr.w	r3, [sl, #20]
 801aace:	6858      	ldr	r0, [r3, #4]
 801aad0:	e7ef      	b.n	801aab2 <ai_platform_outputs_get+0xc2>
 801aad2:	bf00      	nop
 801aad4:	a1c00100 	.word	0xa1c00100

0801aad8 <ai_platform_api_get_network_report>:
 801aad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aadc:	4ba4      	ldr	r3, [pc, #656]	@ (801ad70 <ai_platform_api_get_network_report+0x298>)
 801aade:	6802      	ldr	r2, [r0, #0]
 801aae0:	b089      	sub	sp, #36	@ 0x24
 801aae2:	4393      	bics	r3, r2
 801aae4:	9002      	str	r0, [sp, #8]
 801aae6:	9103      	str	r1, [sp, #12]
 801aae8:	d164      	bne.n	801abb4 <ai_platform_api_get_network_report+0xdc>
 801aaea:	2900      	cmp	r1, #0
 801aaec:	d075      	beq.n	801abda <ai_platform_api_get_network_report+0x102>
 801aaee:	2400      	movs	r4, #0
 801aaf0:	67cc      	str	r4, [r1, #124]	@ 0x7c
 801aaf2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801aaf4:	b143      	cbz	r3, 801ab08 <ai_platform_api_get_network_report+0x30>
 801aaf6:	3401      	adds	r4, #1
 801aaf8:	67cc      	str	r4, [r1, #124]	@ 0x7c
 801aafa:	691a      	ldr	r2, [r3, #16]
 801aafc:	429a      	cmp	r2, r3
 801aafe:	d003      	beq.n	801ab08 <ai_platform_api_get_network_report+0x30>
 801ab00:	b112      	cbz	r2, 801ab08 <ai_platform_api_get_network_report+0x30>
 801ab02:	4613      	mov	r3, r2
 801ab04:	2b00      	cmp	r3, #0
 801ab06:	d1f6      	bne.n	801aaf6 <ai_platform_api_get_network_report+0x1e>
 801ab08:	2c00      	cmp	r4, #0
 801ab0a:	f000 812a 	beq.w	801ad62 <ai_platform_api_get_network_report+0x28a>
 801ab0e:	9a02      	ldr	r2, [sp, #8]
 801ab10:	8e13      	ldrh	r3, [r2, #48]	@ 0x30
 801ab12:	2b00      	cmp	r3, #0
 801ab14:	d053      	beq.n	801abbe <ai_platform_api_get_network_report+0xe6>
 801ab16:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 801ab1a:	f1ba 0f00 	cmp.w	sl, #0
 801ab1e:	d04e      	beq.n	801abbe <ai_platform_api_get_network_report+0xe6>
 801ab20:	f04f 0b00 	mov.w	fp, #0
 801ab24:	465d      	mov	r5, fp
 801ab26:	e015      	b.n	801ab54 <ai_platform_api_get_network_report+0x7c>
 801ab28:	00e9      	lsls	r1, r5, #3
 801ab2a:	2201      	movs	r2, #1
 801ab2c:	507a      	str	r2, [r7, r1]
 801ab2e:	69b1      	ldr	r1, [r6, #24]
 801ab30:	6849      	ldr	r1, [r1, #4]
 801ab32:	60a3      	str	r3, [r4, #8]
 801ab34:	f04f 0201 	mov.w	r2, #1
 801ab38:	7522      	strb	r2, [r4, #20]
 801ab3a:	6963      	ldr	r3, [r4, #20]
 801ab3c:	6121      	str	r1, [r4, #16]
 801ab3e:	f369 231f 	bfi	r3, r9, #8, #24
 801ab42:	e9c4 0c00 	strd	r0, ip, [r4]
 801ab46:	e9c4 3805 	strd	r3, r8, [r4, #20]
 801ab4a:	2200      	movs	r2, #0
 801ab4c:	60e2      	str	r2, [r4, #12]
 801ab4e:	3501      	adds	r5, #1
 801ab50:	f10b 0b1c 	add.w	fp, fp, #28
 801ab54:	f8ba 3000 	ldrh.w	r3, [sl]
 801ab58:	42ab      	cmp	r3, r5
 801ab5a:	b2aa      	uxth	r2, r5
 801ab5c:	d942      	bls.n	801abe4 <ai_platform_api_get_network_report+0x10c>
 801ab5e:	f8da 3004 	ldr.w	r3, [sl, #4]
 801ab62:	2b00      	cmp	r3, #0
 801ab64:	d03e      	beq.n	801abe4 <ai_platform_api_get_network_report+0x10c>
 801ab66:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 801ab6a:	2e00      	cmp	r6, #0
 801ab6c:	d03a      	beq.n	801abe4 <ai_platform_api_get_network_report+0x10c>
 801ab6e:	f8da 3008 	ldr.w	r3, [sl, #8]
 801ab72:	f8d6 800c 	ldr.w	r8, [r6, #12]
 801ab76:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 801ab7a:	69b3      	ldr	r3, [r6, #24]
 801ab7c:	6818      	ldr	r0, [r3, #0]
 801ab7e:	68b3      	ldr	r3, [r6, #8]
 801ab80:	00ea      	lsls	r2, r5, #3
 801ab82:	f3c3 2917 	ubfx	r9, r3, #8, #24
 801ab86:	9201      	str	r2, [sp, #4]
 801ab88:	f002 fab0 	bl	801d0ec <ai_array_to_buffer_fmt>
 801ab8c:	69b1      	ldr	r1, [r6, #24]
 801ab8e:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 801ab92:	f8d1 c008 	ldr.w	ip, [r1, #8]
 801ab96:	445c      	add	r4, fp
 801ab98:	2b00      	cmp	r3, #0
 801ab9a:	d0c9      	beq.n	801ab30 <ai_platform_api_get_network_report+0x58>
 801ab9c:	2100      	movs	r1, #0
 801ab9e:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 801aba2:	6831      	ldr	r1, [r6, #0]
 801aba4:	6059      	str	r1, [r3, #4]
 801aba6:	b111      	cbz	r1, 801abae <ai_platform_api_get_network_report+0xd6>
 801aba8:	8849      	ldrh	r1, [r1, #2]
 801abaa:	2900      	cmp	r1, #0
 801abac:	d1bc      	bne.n	801ab28 <ai_platform_api_get_network_report+0x50>
 801abae:	69b1      	ldr	r1, [r6, #24]
 801abb0:	2300      	movs	r3, #0
 801abb2:	e7bd      	b.n	801ab30 <ai_platform_api_get_network_report+0x58>
 801abb4:	2400      	movs	r4, #0
 801abb6:	4620      	mov	r0, r4
 801abb8:	b009      	add	sp, #36	@ 0x24
 801abba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801abbe:	9b03      	ldr	r3, [sp, #12]
 801abc0:	9802      	ldr	r0, [sp, #8]
 801abc2:	2400      	movs	r4, #0
 801abc4:	63dc      	str	r4, [r3, #60]	@ 0x3c
 801abc6:	871c      	strh	r4, [r3, #56]	@ 0x38
 801abc8:	2218      	movs	r2, #24
 801abca:	2112      	movs	r1, #18
 801abcc:	300c      	adds	r0, #12
 801abce:	f000 fccb 	bl	801b568 <core_set_error>
 801abd2:	4620      	mov	r0, r4
 801abd4:	b009      	add	sp, #36	@ 0x24
 801abd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801abda:	460c      	mov	r4, r1
 801abdc:	4620      	mov	r0, r4
 801abde:	b009      	add	sp, #36	@ 0x24
 801abe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801abe4:	2a00      	cmp	r2, #0
 801abe6:	d0ea      	beq.n	801abbe <ai_platform_api_get_network_report+0xe6>
 801abe8:	f8da 3008 	ldr.w	r3, [sl, #8]
 801abec:	9903      	ldr	r1, [sp, #12]
 801abee:	685b      	ldr	r3, [r3, #4]
 801abf0:	63cb      	str	r3, [r1, #60]	@ 0x3c
 801abf2:	9b02      	ldr	r3, [sp, #8]
 801abf4:	870a      	strh	r2, [r1, #56]	@ 0x38
 801abf6:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 801abf8:	2b01      	cmp	r3, #1
 801abfa:	f240 80a4 	bls.w	801ad46 <ai_platform_api_get_network_report+0x26e>
 801abfe:	9b02      	ldr	r3, [sp, #8]
 801ac00:	f04f 0900 	mov.w	r9, #0
 801ac04:	f8d3 8034 	ldr.w	r8, [r3, #52]	@ 0x34
 801ac08:	464d      	mov	r5, r9
 801ac0a:	46cb      	mov	fp, r9
 801ac0c:	e016      	b.n	801ac3c <ai_platform_api_get_network_report+0x164>
 801ac0e:	2201      	movs	r2, #1
 801ac10:	f84a 200e 	str.w	r2, [sl, lr]
 801ac14:	69b1      	ldr	r1, [r6, #24]
 801ac16:	684a      	ldr	r2, [r1, #4]
 801ac18:	60a3      	str	r3, [r4, #8]
 801ac1a:	9b01      	ldr	r3, [sp, #4]
 801ac1c:	61a3      	str	r3, [r4, #24]
 801ac1e:	f04f 0301 	mov.w	r3, #1
 801ac22:	7523      	strb	r3, [r4, #20]
 801ac24:	6963      	ldr	r3, [r4, #20]
 801ac26:	6122      	str	r2, [r4, #16]
 801ac28:	e9c4 0c00 	strd	r0, ip, [r4]
 801ac2c:	f367 231f 	bfi	r3, r7, #8, #24
 801ac30:	f8c4 b00c 	str.w	fp, [r4, #12]
 801ac34:	3501      	adds	r5, #1
 801ac36:	f109 091c 	add.w	r9, r9, #28
 801ac3a:	6163      	str	r3, [r4, #20]
 801ac3c:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 801ac40:	42ab      	cmp	r3, r5
 801ac42:	b2aa      	uxth	r2, r5
 801ac44:	d927      	bls.n	801ac96 <ai_platform_api_get_network_report+0x1be>
 801ac46:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801ac4a:	b323      	cbz	r3, 801ac96 <ai_platform_api_get_network_report+0x1be>
 801ac4c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 801ac50:	b30e      	cbz	r6, 801ac96 <ai_platform_api_get_network_report+0x1be>
 801ac52:	f8d8 3014 	ldr.w	r3, [r8, #20]
 801ac56:	68b7      	ldr	r7, [r6, #8]
 801ac58:	e9d3 4a01 	ldrd	r4, sl, [r3, #4]
 801ac5c:	69b3      	ldr	r3, [r6, #24]
 801ac5e:	6818      	ldr	r0, [r3, #0]
 801ac60:	68f3      	ldr	r3, [r6, #12]
 801ac62:	9301      	str	r3, [sp, #4]
 801ac64:	f002 fa42 	bl	801d0ec <ai_array_to_buffer_fmt>
 801ac68:	69b1      	ldr	r1, [r6, #24]
 801ac6a:	eb0a 03c5 	add.w	r3, sl, r5, lsl #3
 801ac6e:	f8d1 c008 	ldr.w	ip, [r1, #8]
 801ac72:	444c      	add	r4, r9
 801ac74:	f3c7 2717 	ubfx	r7, r7, #8, #24
 801ac78:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 801ac7c:	2b00      	cmp	r3, #0
 801ac7e:	d0ca      	beq.n	801ac16 <ai_platform_api_get_network_report+0x13e>
 801ac80:	f84a b035 	str.w	fp, [sl, r5, lsl #3]
 801ac84:	6831      	ldr	r1, [r6, #0]
 801ac86:	6059      	str	r1, [r3, #4]
 801ac88:	b111      	cbz	r1, 801ac90 <ai_platform_api_get_network_report+0x1b8>
 801ac8a:	8849      	ldrh	r1, [r1, #2]
 801ac8c:	2900      	cmp	r1, #0
 801ac8e:	d1be      	bne.n	801ac0e <ai_platform_api_get_network_report+0x136>
 801ac90:	69b1      	ldr	r1, [r6, #24]
 801ac92:	2300      	movs	r3, #0
 801ac94:	e7bf      	b.n	801ac16 <ai_platform_api_get_network_report+0x13e>
 801ac96:	2a00      	cmp	r2, #0
 801ac98:	d055      	beq.n	801ad46 <ai_platform_api_get_network_report+0x26e>
 801ac9a:	9902      	ldr	r1, [sp, #8]
 801ac9c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 801aca0:	f101 0628 	add.w	r6, r1, #40	@ 0x28
 801aca4:	9903      	ldr	r1, [sp, #12]
 801aca6:	685b      	ldr	r3, [r3, #4]
 801aca8:	640b      	str	r3, [r1, #64]	@ 0x40
 801acaa:	874a      	strh	r2, [r1, #58]	@ 0x3a
 801acac:	4630      	mov	r0, r6
 801acae:	f7ff fcf7 	bl	801a6a0 <ai_buffer_array_sane>
 801acb2:	4604      	mov	r4, r0
 801acb4:	b968      	cbnz	r0, 801acd2 <ai_platform_api_get_network_report+0x1fa>
 801acb6:	4630      	mov	r0, r6
 801acb8:	f7ff fcf2 	bl	801a6a0 <ai_buffer_array_sane>
 801acbc:	b148      	cbz	r0, 801acd2 <ai_platform_api_get_network_report+0x1fa>
 801acbe:	9b02      	ldr	r3, [sp, #8]
 801acc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801acc2:	b133      	cbz	r3, 801acd2 <ai_platform_api_get_network_report+0x1fa>
 801acc4:	9802      	ldr	r0, [sp, #8]
 801acc6:	2213      	movs	r2, #19
 801acc8:	2111      	movs	r1, #17
 801acca:	300c      	adds	r0, #12
 801accc:	f000 fc4c 	bl	801b568 <core_set_error>
 801acd0:	e771      	b.n	801abb6 <ai_platform_api_get_network_report+0xde>
 801acd2:	9d02      	ldr	r5, [sp, #8]
 801acd4:	f105 0720 	add.w	r7, r5, #32
 801acd8:	4638      	mov	r0, r7
 801acda:	f7ff fce1 	bl	801a6a0 <ai_buffer_array_sane>
 801acde:	4604      	mov	r4, r0
 801ace0:	b960      	cbnz	r0, 801acfc <ai_platform_api_get_network_report+0x224>
 801ace2:	4638      	mov	r0, r7
 801ace4:	f7ff fcdc 	bl	801a6a0 <ai_buffer_array_sane>
 801ace8:	b140      	cbz	r0, 801acfc <ai_platform_api_get_network_report+0x224>
 801acea:	8c6b      	ldrh	r3, [r5, #34]	@ 0x22
 801acec:	b133      	cbz	r3, 801acfc <ai_platform_api_get_network_report+0x224>
 801acee:	9802      	ldr	r0, [sp, #8]
 801acf0:	2212      	movs	r2, #18
 801acf2:	2111      	movs	r1, #17
 801acf4:	300c      	adds	r0, #12
 801acf6:	f000 fc37 	bl	801b568 <core_set_error>
 801acfa:	e75c      	b.n	801abb6 <ai_platform_api_get_network_report+0xde>
 801acfc:	9a02      	ldr	r2, [sp, #8]
 801acfe:	9c03      	ldr	r4, [sp, #12]
 801ad00:	6853      	ldr	r3, [r2, #4]
 801ad02:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
 801ad06:	4b1b      	ldr	r3, [pc, #108]	@ (801ad74 <ai_platform_api_get_network_report+0x29c>)
 801ad08:	6123      	str	r3, [r4, #16]
 801ad0a:	2309      	movs	r3, #9
 801ad0c:	6163      	str	r3, [r4, #20]
 801ad0e:	f240 2c01 	movw	ip, #513	@ 0x201
 801ad12:	f240 5301 	movw	r3, #1281	@ 0x501
 801ad16:	e9c4 c309 	strd	ip, r3, [r4, #36]	@ 0x24
 801ad1a:	6890      	ldr	r0, [r2, #8]
 801ad1c:	f002 fa96 	bl	801d24c <ai_platform_version_get>
 801ad20:	4b15      	ldr	r3, [pc, #84]	@ (801ad78 <ai_platform_api_get_network_report+0x2a0>)
 801ad22:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 801ad24:	6220      	str	r0, [r4, #32]
 801ad26:	429a      	cmp	r2, r3
 801ad28:	d128      	bne.n	801ad7c <ai_platform_api_get_network_report+0x2a4>
 801ad2a:	e896 0003 	ldmia.w	r6, {r0, r1}
 801ad2e:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801ad32:	e882 0003 	stmia.w	r2, {r0, r1}
 801ad36:	e897 0003 	ldmia.w	r7, {r0, r1}
 801ad3a:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 801ad3e:	e883 0003 	stmia.w	r3, {r0, r1}
 801ad42:	2401      	movs	r4, #1
 801ad44:	e737      	b.n	801abb6 <ai_platform_api_get_network_report+0xde>
 801ad46:	9b03      	ldr	r3, [sp, #12]
 801ad48:	9802      	ldr	r0, [sp, #8]
 801ad4a:	2400      	movs	r4, #0
 801ad4c:	641c      	str	r4, [r3, #64]	@ 0x40
 801ad4e:	875c      	strh	r4, [r3, #58]	@ 0x3a
 801ad50:	2218      	movs	r2, #24
 801ad52:	2113      	movs	r1, #19
 801ad54:	300c      	adds	r0, #12
 801ad56:	f000 fc07 	bl	801b568 <core_set_error>
 801ad5a:	4620      	mov	r0, r4
 801ad5c:	b009      	add	sp, #36	@ 0x24
 801ad5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad62:	9802      	ldr	r0, [sp, #8]
 801ad64:	2218      	movs	r2, #24
 801ad66:	2111      	movs	r1, #17
 801ad68:	300c      	adds	r0, #12
 801ad6a:	f000 fbfd 	bl	801b568 <core_set_error>
 801ad6e:	e722      	b.n	801abb6 <ai_platform_api_get_network_report+0xde>
 801ad70:	a1c00100 	.word	0xa1c00100
 801ad74:	08044664 	.word	0x08044664
 801ad78:	a1facade 	.word	0xa1facade
 801ad7c:	9903      	ldr	r1, [sp, #12]
 801ad7e:	4b2b      	ldr	r3, [pc, #172]	@ (801ae2c <ai_platform_api_get_network_report+0x354>)
 801ad80:	2200      	movs	r2, #0
 801ad82:	e9c1 2212 	strd	r2, r2, [r1, #72]	@ 0x48
 801ad86:	e9c1 2214 	strd	r2, r2, [r1, #80]	@ 0x50
 801ad8a:	4a29      	ldr	r2, [pc, #164]	@ (801ae30 <ai_platform_api_get_network_report+0x358>)
 801ad8c:	644a      	str	r2, [r1, #68]	@ 0x44
 801ad8e:	f10d 0c10 	add.w	ip, sp, #16
 801ad92:	f240 4201 	movw	r2, #1025	@ 0x401
 801ad96:	f8c1 c05c 	str.w	ip, [r1, #92]	@ 0x5c
 801ad9a:	658a      	str	r2, [r1, #88]	@ 0x58
 801ad9c:	f101 0844 	add.w	r8, r1, #68	@ 0x44
 801ada0:	f101 0960 	add.w	r9, r1, #96	@ 0x60
 801ada4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801ada6:	4645      	mov	r5, r8
 801ada8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 801adac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801adae:	464c      	mov	r4, r9
 801adb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801adb2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801adb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801adba:	4630      	mov	r0, r6
 801adbc:	f7ff fc70 	bl	801a6a0 <ai_buffer_array_sane>
 801adc0:	b998      	cbnz	r0, 801adea <ai_platform_api_get_network_report+0x312>
 801adc2:	4638      	mov	r0, r7
 801adc4:	f7ff fc6c 	bl	801a6a0 <ai_buffer_array_sane>
 801adc8:	b908      	cbnz	r0, 801adce <ai_platform_api_get_network_report+0x2f6>
 801adca:	2401      	movs	r4, #1
 801adcc:	e6f3      	b.n	801abb6 <ai_platform_api_get_network_report+0xde>
 801adce:	4638      	mov	r0, r7
 801add0:	f7ff fc66 	bl	801a6a0 <ai_buffer_array_sane>
 801add4:	b1b8      	cbz	r0, 801ae06 <ai_platform_api_get_network_report+0x32e>
 801add6:	9b02      	ldr	r3, [sp, #8]
 801add8:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801adda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801addc:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 801ade0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801ade4:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 801ade8:	e7ef      	b.n	801adca <ai_platform_api_get_network_report+0x2f2>
 801adea:	4630      	mov	r0, r6
 801adec:	f7ff fc58 	bl	801a6a0 <ai_buffer_array_sane>
 801adf0:	b190      	cbz	r0, 801ae18 <ai_platform_api_get_network_report+0x340>
 801adf2:	9b02      	ldr	r3, [sp, #8]
 801adf4:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 801adf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801adf8:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 801adfc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801ae00:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 801ae04:	e7dd      	b.n	801adc2 <ai_platform_api_get_network_report+0x2ea>
 801ae06:	4604      	mov	r4, r0
 801ae08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ae0a:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 801ae0e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801ae12:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 801ae16:	deff      	udf	#255	@ 0xff
 801ae18:	4604      	mov	r4, r0
 801ae1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ae1c:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 801ae20:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801ae24:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 801ae28:	deff      	udf	#255	@ 0xff
 801ae2a:	bf00      	nop
 801ae2c:	08042420 	.word	0x08042420
 801ae30:	00040440 	.word	0x00040440

0801ae34 <ai_platform_network_create>:
 801ae34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ae38:	b083      	sub	sp, #12
 801ae3a:	f89d 9028 	ldrb.w	r9, [sp, #40]	@ 0x28
 801ae3e:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 801ae42:	b320      	cbz	r0, 801ae8e <ai_platform_network_create+0x5a>
 801ae44:	6002      	str	r2, [r0, #0]
 801ae46:	4616      	mov	r6, r2
 801ae48:	461f      	mov	r7, r3
 801ae4a:	4604      	mov	r4, r0
 801ae4c:	f000 fb84 	bl	801b558 <core_init>
 801ae50:	b970      	cbnz	r0, 801ae70 <ai_platform_network_create+0x3c>
 801ae52:	2530      	movs	r5, #48	@ 0x30
 801ae54:	2300      	movs	r3, #0
 801ae56:	6023      	str	r3, [r4, #0]
 801ae58:	2410      	movs	r4, #16
 801ae5a:	4642      	mov	r2, r8
 801ae5c:	4649      	mov	r1, r9
 801ae5e:	4638      	mov	r0, r7
 801ae60:	f002 f9ee 	bl	801d240 <ai_version_get>
 801ae64:	60b0      	str	r0, [r6, #8]
 801ae66:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 801ae6a:	b003      	add	sp, #12
 801ae6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ae70:	2200      	movs	r2, #0
 801ae72:	4649      	mov	r1, r9
 801ae74:	4638      	mov	r0, r7
 801ae76:	f002 f9e3 	bl	801d240 <ai_version_get>
 801ae7a:	2200      	movs	r2, #0
 801ae7c:	4605      	mov	r5, r0
 801ae7e:	2105      	movs	r1, #5
 801ae80:	2001      	movs	r0, #1
 801ae82:	f002 f9dd 	bl	801d240 <ai_version_get>
 801ae86:	4285      	cmp	r5, r0
 801ae88:	d008      	beq.n	801ae9c <ai_platform_network_create+0x68>
 801ae8a:	2501      	movs	r5, #1
 801ae8c:	e7e2      	b.n	801ae54 <ai_platform_network_create+0x20>
 801ae8e:	2510      	movs	r5, #16
 801ae90:	462c      	mov	r4, r5
 801ae92:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 801ae96:	b003      	add	sp, #12
 801ae98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ae9c:	4b05      	ldr	r3, [pc, #20]	@ (801aeb4 <ai_platform_network_create+0x80>)
 801ae9e:	9301      	str	r3, [sp, #4]
 801aea0:	a801      	add	r0, sp, #4
 801aea2:	f000 fb6d 	bl	801b580 <ai_check_custom_types>
 801aea6:	b110      	cbz	r0, 801aeae <ai_platform_network_create+0x7a>
 801aea8:	2400      	movs	r4, #0
 801aeaa:	4625      	mov	r5, r4
 801aeac:	e7d5      	b.n	801ae5a <ai_platform_network_create+0x26>
 801aeae:	2502      	movs	r5, #2
 801aeb0:	e7d0      	b.n	801ae54 <ai_platform_network_create+0x20>
 801aeb2:	bf00      	nop
 801aeb4:	84048403 	.word	0x84048403

0801aeb8 <ai_platform_network_destroy>:
 801aeb8:	b508      	push	{r3, lr}
 801aeba:	4a07      	ldr	r2, [pc, #28]	@ (801aed8 <ai_platform_network_destroy+0x20>)
 801aebc:	6801      	ldr	r1, [r0, #0]
 801aebe:	ea01 0c02 	and.w	ip, r1, r2
 801aec2:	438a      	bics	r2, r1
 801aec4:	d102      	bne.n	801aecc <ai_platform_network_destroy+0x14>
 801aec6:	4561      	cmp	r1, ip
 801aec8:	d001      	beq.n	801aece <ai_platform_network_destroy+0x16>
 801aeca:	2000      	movs	r0, #0
 801aecc:	bd08      	pop	{r3, pc}
 801aece:	f000 fbed 	bl	801b6ac <ai_layers_destroy_all>
 801aed2:	2000      	movs	r0, #0
 801aed4:	bd08      	pop	{r3, pc}
 801aed6:	bf00      	nop
 801aed8:	a1c00100 	.word	0xa1c00100

0801aedc <ai_platform_network_init>:
 801aedc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aee0:	4b63      	ldr	r3, [pc, #396]	@ (801b070 <ai_platform_network_init+0x194>)
 801aee2:	6802      	ldr	r2, [r0, #0]
 801aee4:	4393      	bics	r3, r2
 801aee6:	b083      	sub	sp, #12
 801aee8:	d156      	bne.n	801af98 <ai_platform_network_init+0xbc>
 801aeea:	4604      	mov	r4, r0
 801aeec:	460f      	mov	r7, r1
 801aeee:	2900      	cmp	r1, #0
 801aef0:	f000 80a9 	beq.w	801b046 <ai_platform_network_init+0x16a>
 801aef4:	680b      	ldr	r3, [r1, #0]
 801aef6:	495f      	ldr	r1, [pc, #380]	@ (801b074 <ai_platform_network_init+0x198>)
 801aef8:	428b      	cmp	r3, r1
 801aefa:	d113      	bne.n	801af24 <ai_platform_network_init+0x48>
 801aefc:	495c      	ldr	r1, [pc, #368]	@ (801b070 <ai_platform_network_init+0x194>)
 801aefe:	89bd      	ldrh	r5, [r7, #12]
 801af00:	f8b7 a00e 	ldrh.w	sl, [r7, #14]
 801af04:	f8d7 8010 	ldr.w	r8, [r7, #16]
 801af08:	f8b7 b004 	ldrh.w	fp, [r7, #4]
 801af0c:	f8b7 9006 	ldrh.w	r9, [r7, #6]
 801af10:	68be      	ldr	r6, [r7, #8]
 801af12:	428a      	cmp	r2, r1
 801af14:	d02c      	beq.n	801af70 <ai_platform_network_init+0x94>
 801af16:	2303      	movs	r3, #3
 801af18:	6123      	str	r3, [r4, #16]
 801af1a:	4627      	mov	r7, r4
 801af1c:	4638      	mov	r0, r7
 801af1e:	b003      	add	sp, #12
 801af20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af24:	2101      	movs	r1, #1
 801af26:	4638      	mov	r0, r7
 801af28:	9301      	str	r3, [sp, #4]
 801af2a:	f8d7 b004 	ldr.w	fp, [r7, #4]
 801af2e:	f7ff fb83 	bl	801a638 <ai_buffer_get_size>
 801af32:	f107 081c 	add.w	r8, r7, #28
 801af36:	4605      	mov	r5, r0
 801af38:	2101      	movs	r1, #1
 801af3a:	4640      	mov	r0, r8
 801af3c:	463e      	mov	r6, r7
 801af3e:	6a3f      	ldr	r7, [r7, #32]
 801af40:	f7ff fb7a 	bl	801a638 <ai_buffer_get_size>
 801af44:	2d00      	cmp	r5, #0
 801af46:	9b01      	ldr	r3, [sp, #4]
 801af48:	bf0a      	itet	eq
 801af4a:	46a9      	moveq	r9, r5
 801af4c:	f04f 0901 	movne.w	r9, #1
 801af50:	462e      	moveq	r6, r5
 801af52:	b330      	cbz	r0, 801afa2 <ai_platform_network_init+0xc6>
 801af54:	2f00      	cmp	r7, #0
 801af56:	f000 8084 	beq.w	801b062 <ai_platform_network_init+0x186>
 801af5a:	f04f 0a01 	mov.w	sl, #1
 801af5e:	f1bb 0f00 	cmp.w	fp, #0
 801af62:	d021      	beq.n	801afa8 <ai_platform_network_init+0xcc>
 801af64:	2500      	movs	r5, #0
 801af66:	6822      	ldr	r2, [r4, #0]
 801af68:	4941      	ldr	r1, [pc, #260]	@ (801b070 <ai_platform_network_init+0x194>)
 801af6a:	428a      	cmp	r2, r1
 801af6c:	46ab      	mov	fp, r5
 801af6e:	d1d2      	bne.n	801af16 <ai_platform_network_init+0x3a>
 801af70:	8c62      	ldrh	r2, [r4, #34]	@ 0x22
 801af72:	454a      	cmp	r2, r9
 801af74:	4a3f      	ldr	r2, [pc, #252]	@ (801b074 <ai_platform_network_init+0x198>)
 801af76:	d221      	bcs.n	801afbc <ai_platform_network_init+0xe0>
 801af78:	4293      	cmp	r3, r2
 801af7a:	d15c      	bne.n	801b036 <ai_platform_network_init+0x15a>
 801af7c:	6266      	str	r6, [r4, #36]	@ 0x24
 801af7e:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 801af82:	f8a4 b020 	strh.w	fp, [r4, #32]
 801af86:	f8c4 802c 	str.w	r8, [r4, #44]	@ 0x2c
 801af8a:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
 801af8e:	8525      	strh	r5, [r4, #40]	@ 0x28
 801af90:	4620      	mov	r0, r4
 801af92:	f000 fb1f 	bl	801b5d4 <ai_layers_init_all>
 801af96:	e7be      	b.n	801af16 <ai_platform_network_init+0x3a>
 801af98:	2700      	movs	r7, #0
 801af9a:	4638      	mov	r0, r7
 801af9c:	b003      	add	sp, #12
 801af9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801afa2:	4680      	mov	r8, r0
 801afa4:	4682      	mov	sl, r0
 801afa6:	e7da      	b.n	801af5e <ai_platform_network_init+0x82>
 801afa8:	2d00      	cmp	r5, #0
 801afaa:	d0dc      	beq.n	801af66 <ai_platform_network_init+0x8a>
 801afac:	2212      	movs	r2, #18
 801afae:	2110      	movs	r1, #16
 801afb0:	f104 000c 	add.w	r0, r4, #12
 801afb4:	f000 fad8 	bl	801b568 <core_set_error>
 801afb8:	465f      	mov	r7, fp
 801afba:	e7af      	b.n	801af1c <ai_platform_network_init+0x40>
 801afbc:	4293      	cmp	r3, r2
 801afbe:	d0dd      	beq.n	801af7c <ai_platform_network_init+0xa0>
 801afc0:	f1b9 0f00 	cmp.w	r9, #0
 801afc4:	d018      	beq.n	801aff8 <ai_platform_network_init+0x11c>
 801afc6:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 801afca:	009b      	lsls	r3, r3, #2
 801afcc:	f8cd 9004 	str.w	r9, [sp, #4]
 801afd0:	2700      	movs	r7, #0
 801afd2:	4699      	mov	r9, r3
 801afd4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801afd6:	eb06 0e07 	add.w	lr, r6, r7
 801afda:	eb03 0c07 	add.w	ip, r3, r7
 801afde:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801afe2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801afe6:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 801afea:	371c      	adds	r7, #28
 801afec:	45b9      	cmp	r9, r7
 801afee:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 801aff2:	d1ef      	bne.n	801afd4 <ai_platform_network_init+0xf8>
 801aff4:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801aff8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 801affa:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 801affe:	4553      	cmp	r3, sl
 801b000:	f8a4 b020 	strh.w	fp, [r4, #32]
 801b004:	d325      	bcc.n	801b052 <ai_platform_network_init+0x176>
 801b006:	f1ba 0f00 	cmp.w	sl, #0
 801b00a:	d0be      	beq.n	801af8a <ai_platform_network_init+0xae>
 801b00c:	ebca 0eca 	rsb	lr, sl, sl, lsl #3
 801b010:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801b014:	f04f 0c00 	mov.w	ip, #0
 801b018:	eb08 070c 	add.w	r7, r8, ip
 801b01c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801b01e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801b020:	4466      	add	r6, ip
 801b022:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801b024:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801b028:	f10c 0c1c 	add.w	ip, ip, #28
 801b02c:	45f4      	cmp	ip, lr
 801b02e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 801b032:	d1f1      	bne.n	801b018 <ai_platform_network_init+0x13c>
 801b034:	e7a9      	b.n	801af8a <ai_platform_network_init+0xae>
 801b036:	2212      	movs	r2, #18
 801b038:	2116      	movs	r1, #22
 801b03a:	f104 000c 	add.w	r0, r4, #12
 801b03e:	f000 fa93 	bl	801b568 <core_set_error>
 801b042:	2700      	movs	r7, #0
 801b044:	e76a      	b.n	801af1c <ai_platform_network_init+0x40>
 801b046:	2211      	movs	r2, #17
 801b048:	2110      	movs	r1, #16
 801b04a:	300c      	adds	r0, #12
 801b04c:	f000 fa8c 	bl	801b568 <core_set_error>
 801b050:	e764      	b.n	801af1c <ai_platform_network_init+0x40>
 801b052:	2213      	movs	r2, #19
 801b054:	2116      	movs	r1, #22
 801b056:	f104 000c 	add.w	r0, r4, #12
 801b05a:	f000 fa85 	bl	801b568 <core_set_error>
 801b05e:	2700      	movs	r7, #0
 801b060:	e75c      	b.n	801af1c <ai_platform_network_init+0x40>
 801b062:	2213      	movs	r2, #19
 801b064:	2110      	movs	r1, #16
 801b066:	f104 000c 	add.w	r0, r4, #12
 801b06a:	f000 fa7d 	bl	801b568 <core_set_error>
 801b06e:	e755      	b.n	801af1c <ai_platform_network_init+0x40>
 801b070:	a1c00100 	.word	0xa1c00100
 801b074:	a1facade 	.word	0xa1facade

0801b078 <ai_platform_network_post_init>:
 801b078:	b538      	push	{r3, r4, r5, lr}
 801b07a:	4b16      	ldr	r3, [pc, #88]	@ (801b0d4 <ai_platform_network_post_init+0x5c>)
 801b07c:	6802      	ldr	r2, [r0, #0]
 801b07e:	ea02 0103 	and.w	r1, r2, r3
 801b082:	4393      	bics	r3, r2
 801b084:	d108      	bne.n	801b098 <ai_platform_network_post_init+0x20>
 801b086:	6903      	ldr	r3, [r0, #16]
 801b088:	f013 0502 	ands.w	r5, r3, #2
 801b08c:	4604      	mov	r4, r0
 801b08e:	d005      	beq.n	801b09c <ai_platform_network_post_init+0x24>
 801b090:	428a      	cmp	r2, r1
 801b092:	d00a      	beq.n	801b0aa <ai_platform_network_post_init+0x32>
 801b094:	2001      	movs	r0, #1
 801b096:	bd38      	pop	{r3, r4, r5, pc}
 801b098:	2000      	movs	r0, #0
 801b09a:	bd38      	pop	{r3, r4, r5, pc}
 801b09c:	2210      	movs	r2, #16
 801b09e:	2111      	movs	r1, #17
 801b0a0:	300c      	adds	r0, #12
 801b0a2:	f000 fa61 	bl	801b568 <core_set_error>
 801b0a6:	4628      	mov	r0, r5
 801b0a8:	bd38      	pop	{r3, r4, r5, pc}
 801b0aa:	f000 faa1 	bl	801b5f0 <ai_layers_post_init_all>
 801b0ae:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801b0b0:	2b00      	cmp	r3, #0
 801b0b2:	d0ef      	beq.n	801b094 <ai_platform_network_post_init+0x1c>
 801b0b4:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 801b0b6:	e008      	b.n	801b0ca <ai_platform_network_post_init+0x52>
 801b0b8:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 801b0bc:	4798      	blx	r3
 801b0be:	692b      	ldr	r3, [r5, #16]
 801b0c0:	42ab      	cmp	r3, r5
 801b0c2:	d0e7      	beq.n	801b094 <ai_platform_network_post_init+0x1c>
 801b0c4:	2b00      	cmp	r3, #0
 801b0c6:	d0e5      	beq.n	801b094 <ai_platform_network_post_init+0x1c>
 801b0c8:	461d      	mov	r5, r3
 801b0ca:	4629      	mov	r1, r5
 801b0cc:	2000      	movs	r0, #0
 801b0ce:	2d00      	cmp	r5, #0
 801b0d0:	d1f2      	bne.n	801b0b8 <ai_platform_network_post_init+0x40>
 801b0d2:	e7df      	b.n	801b094 <ai_platform_network_post_init+0x1c>
 801b0d4:	a1c00100 	.word	0xa1c00100

0801b0d8 <ai_platform_network_process>:
 801b0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0dc:	4bb5      	ldr	r3, [pc, #724]	@ (801b3b4 <ai_platform_network_process+0x2dc>)
 801b0de:	4605      	mov	r5, r0
 801b0e0:	6800      	ldr	r0, [r0, #0]
 801b0e2:	b085      	sub	sp, #20
 801b0e4:	4383      	bics	r3, r0
 801b0e6:	9202      	str	r2, [sp, #8]
 801b0e8:	f040 8140 	bne.w	801b36c <ai_platform_network_process+0x294>
 801b0ec:	8e2b      	ldrh	r3, [r5, #48]	@ 0x30
 801b0ee:	2b00      	cmp	r3, #0
 801b0f0:	f000 8125 	beq.w	801b33e <ai_platform_network_process+0x266>
 801b0f4:	692b      	ldr	r3, [r5, #16]
 801b0f6:	f8d5 a034 	ldr.w	sl, [r5, #52]	@ 0x34
 801b0fa:	f003 0303 	and.w	r3, r3, #3
 801b0fe:	2700      	movs	r7, #0
 801b100:	2b03      	cmp	r3, #3
 801b102:	61af      	str	r7, [r5, #24]
 801b104:	f040 8137 	bne.w	801b376 <ai_platform_network_process+0x29e>
 801b108:	2900      	cmp	r1, #0
 801b10a:	f000 811e 	beq.w	801b34a <ai_platform_network_process+0x272>
 801b10e:	f1ba 0f00 	cmp.w	sl, #0
 801b112:	f000 811a 	beq.w	801b34a <ai_platform_network_process+0x272>
 801b116:	f8ba 3000 	ldrh.w	r3, [sl]
 801b11a:	2b00      	cmp	r3, #0
 801b11c:	f000 8115 	beq.w	801b34a <ai_platform_network_process+0x272>
 801b120:	698b      	ldr	r3, [r1, #24]
 801b122:	9503      	str	r5, [sp, #12]
 801b124:	681b      	ldr	r3, [r3, #0]
 801b126:	9301      	str	r3, [sp, #4]
 801b128:	460e      	mov	r6, r1
 801b12a:	f8da 3004 	ldr.w	r3, [sl, #4]
 801b12e:	2b00      	cmp	r3, #0
 801b130:	d072      	beq.n	801b218 <ai_platform_network_process+0x140>
 801b132:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 801b136:	2c00      	cmp	r4, #0
 801b138:	d06e      	beq.n	801b218 <ai_platform_network_process+0x140>
 801b13a:	f8da 3008 	ldr.w	r3, [sl, #8]
 801b13e:	f8d3 9000 	ldr.w	r9, [r3]
 801b142:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 801b146:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 801b14a:	f000 81d3 	beq.w	801b4f4 <ai_platform_network_process+0x41c>
 801b14e:	69a3      	ldr	r3, [r4, #24]
 801b150:	2101      	movs	r1, #1
 801b152:	4630      	mov	r0, r6
 801b154:	685d      	ldr	r5, [r3, #4]
 801b156:	f7ff fa6f 	bl	801a638 <ai_buffer_get_size>
 801b15a:	4285      	cmp	r5, r0
 801b15c:	f0c0 8116 	bcc.w	801b38c <ai_platform_network_process+0x2b4>
 801b160:	68e0      	ldr	r0, [r4, #12]
 801b162:	69b1      	ldr	r1, [r6, #24]
 801b164:	68c2      	ldr	r2, [r0, #12]
 801b166:	68cb      	ldr	r3, [r1, #12]
 801b168:	429a      	cmp	r2, r3
 801b16a:	f040 810f 	bne.w	801b38c <ai_platform_network_process+0x2b4>
 801b16e:	6882      	ldr	r2, [r0, #8]
 801b170:	688b      	ldr	r3, [r1, #8]
 801b172:	429a      	cmp	r2, r3
 801b174:	f040 810a 	bne.w	801b38c <ai_platform_network_process+0x2b4>
 801b178:	6842      	ldr	r2, [r0, #4]
 801b17a:	684b      	ldr	r3, [r1, #4]
 801b17c:	429a      	cmp	r2, r3
 801b17e:	f040 8105 	bne.w	801b38c <ai_platform_network_process+0x2b4>
 801b182:	69a3      	ldr	r3, [r4, #24]
 801b184:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b188:	f002 f848 	bl	801d21c <ai_array_get_data_byte_size>
 801b18c:	4605      	mov	r5, r0
 801b18e:	4620      	mov	r0, r4
 801b190:	f002 f86e 	bl	801d270 <get_tensor_byte_size>
 801b194:	4285      	cmp	r5, r0
 801b196:	f0c0 80f9 	bcc.w	801b38c <ai_platform_network_process+0x2b4>
 801b19a:	69a3      	ldr	r3, [r4, #24]
 801b19c:	6818      	ldr	r0, [r3, #0]
 801b19e:	f001 ffa5 	bl	801d0ec <ai_array_to_buffer_fmt>
 801b1a2:	6833      	ldr	r3, [r6, #0]
 801b1a4:	4058      	eors	r0, r3
 801b1a6:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 801b1aa:	f040 81a5 	bne.w	801b4f8 <ai_platform_network_process+0x420>
 801b1ae:	6873      	ldr	r3, [r6, #4]
 801b1b0:	2b00      	cmp	r3, #0
 801b1b2:	f000 819f 	beq.w	801b4f4 <ai_platform_network_process+0x41c>
 801b1b6:	69b3      	ldr	r3, [r6, #24]
 801b1b8:	681b      	ldr	r3, [r3, #0]
 801b1ba:	2b00      	cmp	r3, #0
 801b1bc:	f000 81a5 	beq.w	801b50a <ai_platform_network_process+0x432>
 801b1c0:	9a01      	ldr	r2, [sp, #4]
 801b1c2:	429a      	cmp	r2, r3
 801b1c4:	bf38      	it	cc
 801b1c6:	461a      	movcc	r2, r3
 801b1c8:	4620      	mov	r0, r4
 801b1ca:	9201      	str	r2, [sp, #4]
 801b1cc:	f002 f850 	bl	801d270 <get_tensor_byte_size>
 801b1d0:	f8c8 0008 	str.w	r0, [r8, #8]
 801b1d4:	69b3      	ldr	r3, [r6, #24]
 801b1d6:	681b      	ldr	r3, [r3, #0]
 801b1d8:	fb00 f303 	mul.w	r3, r0, r3
 801b1dc:	f8c8 300c 	str.w	r3, [r8, #12]
 801b1e0:	6871      	ldr	r1, [r6, #4]
 801b1e2:	f8c8 1004 	str.w	r1, [r8, #4]
 801b1e6:	440b      	add	r3, r1
 801b1e8:	f849 300b 	str.w	r3, [r9, fp]
 801b1ec:	69a0      	ldr	r0, [r4, #24]
 801b1ee:	6803      	ldr	r3, [r0, #0]
 801b1f0:	009a      	lsls	r2, r3, #2
 801b1f2:	f107 0701 	add.w	r7, r7, #1
 801b1f6:	f106 061c 	add.w	r6, r6, #28
 801b1fa:	f100 80b1 	bmi.w	801b360 <ai_platform_network_process+0x288>
 801b1fe:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 801b202:	1a9b      	subs	r3, r3, r2
 801b204:	4419      	add	r1, r3
 801b206:	6081      	str	r1, [r0, #8]
 801b208:	69a3      	ldr	r3, [r4, #24]
 801b20a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801b20e:	60da      	str	r2, [r3, #12]
 801b210:	f8ba 3000 	ldrh.w	r3, [sl]
 801b214:	42bb      	cmp	r3, r7
 801b216:	d888      	bhi.n	801b12a <ai_platform_network_process+0x52>
 801b218:	9d03      	ldr	r5, [sp, #12]
 801b21a:	9b02      	ldr	r3, [sp, #8]
 801b21c:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 801b21e:	2b00      	cmp	r3, #0
 801b220:	f000 817c 	beq.w	801b51c <ai_platform_network_process+0x444>
 801b224:	2a01      	cmp	r2, #1
 801b226:	f240 80bd 	bls.w	801b3a4 <ai_platform_network_process+0x2cc>
 801b22a:	f8d5 8034 	ldr.w	r8, [r5, #52]	@ 0x34
 801b22e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 801b232:	2b00      	cmp	r3, #0
 801b234:	f000 80b6 	beq.w	801b3a4 <ai_platform_network_process+0x2cc>
 801b238:	f8dd b008 	ldr.w	fp, [sp, #8]
 801b23c:	2700      	movs	r7, #0
 801b23e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801b242:	2b00      	cmp	r3, #0
 801b244:	f000 80bd 	beq.w	801b3c2 <ai_platform_network_process+0x2ea>
 801b248:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 801b24c:	2e00      	cmp	r6, #0
 801b24e:	f000 80b8 	beq.w	801b3c2 <ai_platform_network_process+0x2ea>
 801b252:	f8d8 3014 	ldr.w	r3, [r8, #20]
 801b256:	681c      	ldr	r4, [r3, #0]
 801b258:	eb14 1907 	adds.w	r9, r4, r7, lsl #4
 801b25c:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 801b260:	f000 8160 	beq.w	801b524 <ai_platform_network_process+0x44c>
 801b264:	69b3      	ldr	r3, [r6, #24]
 801b266:	2101      	movs	r1, #1
 801b268:	685b      	ldr	r3, [r3, #4]
 801b26a:	9302      	str	r3, [sp, #8]
 801b26c:	4658      	mov	r0, fp
 801b26e:	f7ff f9e3 	bl	801a638 <ai_buffer_get_size>
 801b272:	9b02      	ldr	r3, [sp, #8]
 801b274:	4283      	cmp	r3, r0
 801b276:	f0c0 8095 	bcc.w	801b3a4 <ai_platform_network_process+0x2cc>
 801b27a:	68f0      	ldr	r0, [r6, #12]
 801b27c:	f8db 1018 	ldr.w	r1, [fp, #24]
 801b280:	68c2      	ldr	r2, [r0, #12]
 801b282:	68cb      	ldr	r3, [r1, #12]
 801b284:	429a      	cmp	r2, r3
 801b286:	f040 808d 	bne.w	801b3a4 <ai_platform_network_process+0x2cc>
 801b28a:	6882      	ldr	r2, [r0, #8]
 801b28c:	688b      	ldr	r3, [r1, #8]
 801b28e:	429a      	cmp	r2, r3
 801b290:	f040 8088 	bne.w	801b3a4 <ai_platform_network_process+0x2cc>
 801b294:	6842      	ldr	r2, [r0, #4]
 801b296:	684b      	ldr	r3, [r1, #4]
 801b298:	429a      	cmp	r2, r3
 801b29a:	f040 8083 	bne.w	801b3a4 <ai_platform_network_process+0x2cc>
 801b29e:	69b3      	ldr	r3, [r6, #24]
 801b2a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b2a4:	f001 ffba 	bl	801d21c <ai_array_get_data_byte_size>
 801b2a8:	9002      	str	r0, [sp, #8]
 801b2aa:	4630      	mov	r0, r6
 801b2ac:	f001 ffe0 	bl	801d270 <get_tensor_byte_size>
 801b2b0:	9b02      	ldr	r3, [sp, #8]
 801b2b2:	4283      	cmp	r3, r0
 801b2b4:	d376      	bcc.n	801b3a4 <ai_platform_network_process+0x2cc>
 801b2b6:	69b3      	ldr	r3, [r6, #24]
 801b2b8:	6818      	ldr	r0, [r3, #0]
 801b2ba:	f001 ff17 	bl	801d0ec <ai_array_to_buffer_fmt>
 801b2be:	f8db 3000 	ldr.w	r3, [fp]
 801b2c2:	4058      	eors	r0, r3
 801b2c4:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 801b2c8:	f040 8134 	bne.w	801b534 <ai_platform_network_process+0x45c>
 801b2cc:	f8db 3004 	ldr.w	r3, [fp, #4]
 801b2d0:	2b00      	cmp	r3, #0
 801b2d2:	f000 8127 	beq.w	801b524 <ai_platform_network_process+0x44c>
 801b2d6:	f8db 3018 	ldr.w	r3, [fp, #24]
 801b2da:	681b      	ldr	r3, [r3, #0]
 801b2dc:	2b00      	cmp	r3, #0
 801b2de:	f000 8133 	beq.w	801b548 <ai_platform_network_process+0x470>
 801b2e2:	9a01      	ldr	r2, [sp, #4]
 801b2e4:	429a      	cmp	r2, r3
 801b2e6:	bf38      	it	cc
 801b2e8:	461a      	movcc	r2, r3
 801b2ea:	4630      	mov	r0, r6
 801b2ec:	9201      	str	r2, [sp, #4]
 801b2ee:	f001 ffbf 	bl	801d270 <get_tensor_byte_size>
 801b2f2:	f8c9 0008 	str.w	r0, [r9, #8]
 801b2f6:	f8db 3018 	ldr.w	r3, [fp, #24]
 801b2fa:	681b      	ldr	r3, [r3, #0]
 801b2fc:	fb00 f303 	mul.w	r3, r0, r3
 801b300:	f8c9 300c 	str.w	r3, [r9, #12]
 801b304:	f8db 1004 	ldr.w	r1, [fp, #4]
 801b308:	f8c9 1004 	str.w	r1, [r9, #4]
 801b30c:	440b      	add	r3, r1
 801b30e:	f844 300a 	str.w	r3, [r4, sl]
 801b312:	69b0      	ldr	r0, [r6, #24]
 801b314:	6803      	ldr	r3, [r0, #0]
 801b316:	009b      	lsls	r3, r3, #2
 801b318:	f107 0701 	add.w	r7, r7, #1
 801b31c:	f10b 0b1c 	add.w	fp, fp, #28
 801b320:	d44a      	bmi.n	801b3b8 <ai_platform_network_process+0x2e0>
 801b322:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 801b326:	1a9b      	subs	r3, r3, r2
 801b328:	4419      	add	r1, r3
 801b32a:	6081      	str	r1, [r0, #8]
 801b32c:	69b3      	ldr	r3, [r6, #24]
 801b32e:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801b332:	60da      	str	r2, [r3, #12]
 801b334:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 801b338:	42bb      	cmp	r3, r7
 801b33a:	d880      	bhi.n	801b23e <ai_platform_network_process+0x166>
 801b33c:	e041      	b.n	801b3c2 <ai_platform_network_process+0x2ea>
 801b33e:	692a      	ldr	r2, [r5, #16]
 801b340:	61ab      	str	r3, [r5, #24]
 801b342:	f002 0203 	and.w	r2, r2, #3
 801b346:	2a03      	cmp	r2, #3
 801b348:	d115      	bne.n	801b376 <ai_platform_network_process+0x29e>
 801b34a:	2217      	movs	r2, #23
 801b34c:	2112      	movs	r1, #18
 801b34e:	f105 000c 	add.w	r0, r5, #12
 801b352:	f000 f909 	bl	801b568 <core_set_error>
 801b356:	2400      	movs	r4, #0
 801b358:	4620      	mov	r0, r4
 801b35a:	b005      	add	sp, #20
 801b35c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b360:	f8ba 3000 	ldrh.w	r3, [sl]
 801b364:	429f      	cmp	r7, r3
 801b366:	f4ff aee0 	bcc.w	801b12a <ai_platform_network_process+0x52>
 801b36a:	e755      	b.n	801b218 <ai_platform_network_process+0x140>
 801b36c:	2400      	movs	r4, #0
 801b36e:	4620      	mov	r0, r4
 801b370:	b005      	add	sp, #20
 801b372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b376:	2230      	movs	r2, #48	@ 0x30
 801b378:	2111      	movs	r1, #17
 801b37a:	f105 000c 	add.w	r0, r5, #12
 801b37e:	f000 f8f3 	bl	801b568 <core_set_error>
 801b382:	2400      	movs	r4, #0
 801b384:	4620      	mov	r0, r4
 801b386:	b005      	add	sp, #20
 801b388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b38c:	9d03      	ldr	r5, [sp, #12]
 801b38e:	2218      	movs	r2, #24
 801b390:	2112      	movs	r1, #18
 801b392:	f105 000c 	add.w	r0, r5, #12
 801b396:	f000 f8e7 	bl	801b568 <core_set_error>
 801b39a:	2400      	movs	r4, #0
 801b39c:	4620      	mov	r0, r4
 801b39e:	b005      	add	sp, #20
 801b3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b3a4:	2218      	movs	r2, #24
 801b3a6:	2113      	movs	r1, #19
 801b3a8:	f105 000c 	add.w	r0, r5, #12
 801b3ac:	f000 f8dc 	bl	801b568 <core_set_error>
 801b3b0:	2400      	movs	r4, #0
 801b3b2:	e7d1      	b.n	801b358 <ai_platform_network_process+0x280>
 801b3b4:	a1c00100 	.word	0xa1c00100
 801b3b8:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 801b3bc:	429f      	cmp	r7, r3
 801b3be:	f4ff af3e 	bcc.w	801b23e <ai_platform_network_process+0x166>
 801b3c2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801b3c6:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 801b3c8:	832b      	strh	r3, [r5, #24]
 801b3ca:	2a00      	cmp	r2, #0
 801b3cc:	f040 808c 	bne.w	801b4e8 <ai_platform_network_process+0x410>
 801b3d0:	4616      	mov	r6, r2
 801b3d2:	4617      	mov	r7, r2
 801b3d4:	8b6c      	ldrh	r4, [r5, #26]
 801b3d6:	429c      	cmp	r4, r3
 801b3d8:	bf38      	it	cc
 801b3da:	46ab      	movcc	fp, r5
 801b3dc:	d2bc      	bcs.n	801b358 <ai_platform_network_process+0x280>
 801b3de:	2e00      	cmp	r6, #0
 801b3e0:	d030      	beq.n	801b444 <ai_platform_network_process+0x36c>
 801b3e2:	f04f 0800 	mov.w	r8, #0
 801b3e6:	e014      	b.n	801b412 <ai_platform_network_process+0x33a>
 801b3e8:	6882      	ldr	r2, [r0, #8]
 801b3ea:	68c5      	ldr	r5, [r0, #12]
 801b3ec:	6863      	ldr	r3, [r4, #4]
 801b3ee:	1b52      	subs	r2, r2, r5
 801b3f0:	4413      	add	r3, r2
 801b3f2:	6083      	str	r3, [r0, #8]
 801b3f4:	698b      	ldr	r3, [r1, #24]
 801b3f6:	6862      	ldr	r2, [r4, #4]
 801b3f8:	60da      	str	r2, [r3, #12]
 801b3fa:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 801b3fe:	f859 200a 	ldr.w	r2, [r9, sl]
 801b402:	440b      	add	r3, r1
 801b404:	4293      	cmp	r3, r2
 801b406:	bf24      	itt	cs
 801b408:	68e3      	ldrcs	r3, [r4, #12]
 801b40a:	1ad3      	subcs	r3, r2, r3
 801b40c:	6063      	str	r3, [r4, #4]
 801b40e:	f108 0801 	add.w	r8, r8, #1
 801b412:	8833      	ldrh	r3, [r6, #0]
 801b414:	4543      	cmp	r3, r8
 801b416:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 801b41a:	d913      	bls.n	801b444 <ai_platform_network_process+0x36c>
 801b41c:	6873      	ldr	r3, [r6, #4]
 801b41e:	b18b      	cbz	r3, 801b444 <ai_platform_network_process+0x36c>
 801b420:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 801b424:	b171      	cbz	r1, 801b444 <ai_platform_network_process+0x36c>
 801b426:	6988      	ldr	r0, [r1, #24]
 801b428:	68b2      	ldr	r2, [r6, #8]
 801b42a:	6803      	ldr	r3, [r0, #0]
 801b42c:	f8d2 9000 	ldr.w	r9, [r2]
 801b430:	009d      	lsls	r5, r3, #2
 801b432:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 801b436:	d5d7      	bpl.n	801b3e8 <ai_platform_network_process+0x310>
 801b438:	6881      	ldr	r1, [r0, #8]
 801b43a:	68a2      	ldr	r2, [r4, #8]
 801b43c:	6860      	ldr	r0, [r4, #4]
 801b43e:	f001 fdcf 	bl	801cfe0 <st_int8_copy>
 801b442:	e7da      	b.n	801b3fa <ai_platform_network_process+0x322>
 801b444:	4658      	mov	r0, fp
 801b446:	f000 f8e7 	bl	801b618 <ai_layers_forward_all>
 801b44a:	2f00      	cmp	r7, #0
 801b44c:	d03d      	beq.n	801b4ca <ai_platform_network_process+0x3f2>
 801b44e:	2400      	movs	r4, #0
 801b450:	e016      	b.n	801b480 <ai_platform_network_process+0x3a8>
 801b452:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 801b456:	f859 100a 	ldr.w	r1, [r9, sl]
 801b45a:	4413      	add	r3, r2
 801b45c:	428b      	cmp	r3, r1
 801b45e:	bf24      	itt	cs
 801b460:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 801b464:	1acb      	subcs	r3, r1, r3
 801b466:	f8c8 3004 	str.w	r3, [r8, #4]
 801b46a:	6981      	ldr	r1, [r0, #24]
 801b46c:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 801b470:	1b52      	subs	r2, r2, r5
 801b472:	4413      	add	r3, r2
 801b474:	608b      	str	r3, [r1, #8]
 801b476:	6983      	ldr	r3, [r0, #24]
 801b478:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801b47c:	60da      	str	r2, [r3, #12]
 801b47e:	3401      	adds	r4, #1
 801b480:	883b      	ldrh	r3, [r7, #0]
 801b482:	42a3      	cmp	r3, r4
 801b484:	d921      	bls.n	801b4ca <ai_platform_network_process+0x3f2>
 801b486:	687b      	ldr	r3, [r7, #4]
 801b488:	b1fb      	cbz	r3, 801b4ca <ai_platform_network_process+0x3f2>
 801b48a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801b48e:	b1e0      	cbz	r0, 801b4ca <ai_platform_network_process+0x3f2>
 801b490:	68ba      	ldr	r2, [r7, #8]
 801b492:	6983      	ldr	r3, [r0, #24]
 801b494:	f8d2 9000 	ldr.w	r9, [r2]
 801b498:	681a      	ldr	r2, [r3, #0]
 801b49a:	0092      	lsls	r2, r2, #2
 801b49c:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 801b4a0:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 801b4a4:	d5d5      	bpl.n	801b452 <ai_platform_network_process+0x37a>
 801b4a6:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 801b4aa:	6898      	ldr	r0, [r3, #8]
 801b4ac:	f001 fd98 	bl	801cfe0 <st_int8_copy>
 801b4b0:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 801b4b4:	f859 200a 	ldr.w	r2, [r9, sl]
 801b4b8:	440b      	add	r3, r1
 801b4ba:	4293      	cmp	r3, r2
 801b4bc:	bf24      	itt	cs
 801b4be:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 801b4c2:	1ad3      	subcs	r3, r2, r3
 801b4c4:	f8c8 3004 	str.w	r3, [r8, #4]
 801b4c8:	e7d9      	b.n	801b47e <ai_platform_network_process+0x3a6>
 801b4ca:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 801b4ce:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 801b4d2:	3401      	adds	r4, #1
 801b4d4:	b2a4      	uxth	r4, r4
 801b4d6:	42a3      	cmp	r3, r4
 801b4d8:	f8ab 401a 	strh.w	r4, [fp, #26]
 801b4dc:	f63f af7f 	bhi.w	801b3de <ai_platform_network_process+0x306>
 801b4e0:	4620      	mov	r0, r4
 801b4e2:	b005      	add	sp, #20
 801b4e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b4e8:	2a01      	cmp	r2, #1
 801b4ea:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 801b4ec:	d02a      	beq.n	801b544 <ai_platform_network_process+0x46c>
 801b4ee:	f106 070c 	add.w	r7, r6, #12
 801b4f2:	e76f      	b.n	801b3d4 <ai_platform_network_process+0x2fc>
 801b4f4:	9d03      	ldr	r5, [sp, #12]
 801b4f6:	e728      	b.n	801b34a <ai_platform_network_process+0x272>
 801b4f8:	9d03      	ldr	r5, [sp, #12]
 801b4fa:	2219      	movs	r2, #25
 801b4fc:	2112      	movs	r1, #18
 801b4fe:	f105 000c 	add.w	r0, r5, #12
 801b502:	f000 f831 	bl	801b568 <core_set_error>
 801b506:	2400      	movs	r4, #0
 801b508:	e726      	b.n	801b358 <ai_platform_network_process+0x280>
 801b50a:	9d03      	ldr	r5, [sp, #12]
 801b50c:	4604      	mov	r4, r0
 801b50e:	2221      	movs	r2, #33	@ 0x21
 801b510:	2112      	movs	r1, #18
 801b512:	f105 000c 	add.w	r0, r5, #12
 801b516:	f000 f827 	bl	801b568 <core_set_error>
 801b51a:	e71d      	b.n	801b358 <ai_platform_network_process+0x280>
 801b51c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801b520:	832b      	strh	r3, [r5, #24]
 801b522:	e752      	b.n	801b3ca <ai_platform_network_process+0x2f2>
 801b524:	2217      	movs	r2, #23
 801b526:	2113      	movs	r1, #19
 801b528:	f105 000c 	add.w	r0, r5, #12
 801b52c:	f000 f81c 	bl	801b568 <core_set_error>
 801b530:	2400      	movs	r4, #0
 801b532:	e711      	b.n	801b358 <ai_platform_network_process+0x280>
 801b534:	2219      	movs	r2, #25
 801b536:	2113      	movs	r1, #19
 801b538:	f105 000c 	add.w	r0, r5, #12
 801b53c:	f000 f814 	bl	801b568 <core_set_error>
 801b540:	2400      	movs	r4, #0
 801b542:	e709      	b.n	801b358 <ai_platform_network_process+0x280>
 801b544:	2700      	movs	r7, #0
 801b546:	e745      	b.n	801b3d4 <ai_platform_network_process+0x2fc>
 801b548:	4604      	mov	r4, r0
 801b54a:	2221      	movs	r2, #33	@ 0x21
 801b54c:	2113      	movs	r1, #19
 801b54e:	f105 000c 	add.w	r0, r5, #12
 801b552:	f000 f809 	bl	801b568 <core_set_error>
 801b556:	e6ff      	b.n	801b358 <ai_platform_network_process+0x280>

0801b558 <core_init>:
 801b558:	2001      	movs	r0, #1
 801b55a:	4770      	bx	lr

0801b55c <core_get_error>:
 801b55c:	4603      	mov	r3, r0
 801b55e:	2200      	movs	r2, #0
 801b560:	6800      	ldr	r0, [r0, #0]
 801b562:	601a      	str	r2, [r3, #0]
 801b564:	4770      	bx	lr
 801b566:	bf00      	nop

0801b568 <core_set_error>:
 801b568:	4603      	mov	r3, r0
 801b56a:	7800      	ldrb	r0, [r0, #0]
 801b56c:	b108      	cbz	r0, 801b572 <core_set_error+0xa>
 801b56e:	2000      	movs	r0, #0
 801b570:	4770      	bx	lr
 801b572:	7019      	strb	r1, [r3, #0]
 801b574:	6819      	ldr	r1, [r3, #0]
 801b576:	f362 211f 	bfi	r1, r2, #8, #24
 801b57a:	2001      	movs	r0, #1
 801b57c:	6019      	str	r1, [r3, #0]
 801b57e:	4770      	bx	lr

0801b580 <ai_check_custom_types>:
 801b580:	b082      	sub	sp, #8
 801b582:	4b13      	ldr	r3, [pc, #76]	@ (801b5d0 <ai_check_custom_types+0x50>)
 801b584:	9301      	str	r3, [sp, #4]
 801b586:	b118      	cbz	r0, 801b590 <ai_check_custom_types+0x10>
 801b588:	7803      	ldrb	r3, [r0, #0]
 801b58a:	2b03      	cmp	r3, #3
 801b58c:	d002      	beq.n	801b594 <ai_check_custom_types+0x14>
 801b58e:	2000      	movs	r0, #0
 801b590:	b002      	add	sp, #8
 801b592:	4770      	bx	lr
 801b594:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801b598:	4293      	cmp	r3, r2
 801b59a:	d004      	beq.n	801b5a6 <ai_check_custom_types+0x26>
 801b59c:	2001      	movs	r0, #1
 801b59e:	f080 0001 	eor.w	r0, r0, #1
 801b5a2:	b002      	add	sp, #8
 801b5a4:	4770      	bx	lr
 801b5a6:	7842      	ldrb	r2, [r0, #1]
 801b5a8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801b5ac:	429a      	cmp	r2, r3
 801b5ae:	f100 0001 	add.w	r0, r0, #1
 801b5b2:	d1f3      	bne.n	801b59c <ai_check_custom_types+0x1c>
 801b5b4:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 801b5b8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801b5bc:	429a      	cmp	r2, r3
 801b5be:	d1ed      	bne.n	801b59c <ai_check_custom_types+0x1c>
 801b5c0:	7842      	ldrb	r2, [r0, #1]
 801b5c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801b5c6:	429a      	cmp	r2, r3
 801b5c8:	d1e8      	bne.n	801b59c <ai_check_custom_types+0x1c>
 801b5ca:	2000      	movs	r0, #0
 801b5cc:	e7e7      	b.n	801b59e <ai_check_custom_types+0x1e>
 801b5ce:	bf00      	nop
 801b5d0:	84048403 	.word	0x84048403

0801b5d4 <ai_layers_init_all>:
 801b5d4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801b5d6:	2100      	movs	r1, #0
 801b5d8:	b143      	cbz	r3, 801b5ec <ai_layers_init_all+0x18>
 801b5da:	691a      	ldr	r2, [r3, #16]
 801b5dc:	60d8      	str	r0, [r3, #12]
 801b5de:	429a      	cmp	r2, r3
 801b5e0:	f101 0101 	add.w	r1, r1, #1
 801b5e4:	d002      	beq.n	801b5ec <ai_layers_init_all+0x18>
 801b5e6:	b10a      	cbz	r2, 801b5ec <ai_layers_init_all+0x18>
 801b5e8:	4613      	mov	r3, r2
 801b5ea:	e7f5      	b.n	801b5d8 <ai_layers_init_all+0x4>
 801b5ec:	4608      	mov	r0, r1
 801b5ee:	4770      	bx	lr

0801b5f0 <ai_layers_post_init_all>:
 801b5f0:	b538      	push	{r3, r4, r5, lr}
 801b5f2:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 801b5f4:	2500      	movs	r5, #0
 801b5f6:	b16c      	cbz	r4, 801b614 <ai_layers_post_init_all+0x24>
 801b5f8:	6863      	ldr	r3, [r4, #4]
 801b5fa:	07db      	lsls	r3, r3, #31
 801b5fc:	d504      	bpl.n	801b608 <ai_layers_post_init_all+0x18>
 801b5fe:	6a23      	ldr	r3, [r4, #32]
 801b600:	4620      	mov	r0, r4
 801b602:	b10b      	cbz	r3, 801b608 <ai_layers_post_init_all+0x18>
 801b604:	4798      	blx	r3
 801b606:	3501      	adds	r5, #1
 801b608:	6923      	ldr	r3, [r4, #16]
 801b60a:	42a3      	cmp	r3, r4
 801b60c:	d002      	beq.n	801b614 <ai_layers_post_init_all+0x24>
 801b60e:	b10b      	cbz	r3, 801b614 <ai_layers_post_init_all+0x24>
 801b610:	461c      	mov	r4, r3
 801b612:	e7f0      	b.n	801b5f6 <ai_layers_post_init_all+0x6>
 801b614:	4628      	mov	r0, r5
 801b616:	bd38      	pop	{r3, r4, r5, pc}

0801b618 <ai_layers_forward_all>:
 801b618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b61c:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 801b620:	4604      	mov	r4, r0
 801b622:	f1b8 0f00 	cmp.w	r8, #0
 801b626:	d02b      	beq.n	801b680 <ai_layers_forward_all+0x68>
 801b628:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 801b62a:	63c1      	str	r1, [r0, #60]	@ 0x3c
 801b62c:	b321      	cbz	r1, 801b678 <ai_layers_forward_all+0x60>
 801b62e:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 801b630:	2001      	movs	r0, #1
 801b632:	47c0      	blx	r8
 801b634:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 801b636:	b1fe      	cbz	r6, 801b678 <ai_layers_forward_all+0x60>
 801b638:	2700      	movs	r7, #0
 801b63a:	4631      	mov	r1, r6
 801b63c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 801b63e:	2002      	movs	r0, #2
 801b640:	47c0      	blx	r8
 801b642:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 801b644:	4628      	mov	r0, r5
 801b646:	696b      	ldr	r3, [r5, #20]
 801b648:	4798      	blx	r3
 801b64a:	692e      	ldr	r6, [r5, #16]
 801b64c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 801b64e:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 801b650:	42b5      	cmp	r5, r6
 801b652:	f04f 0003 	mov.w	r0, #3
 801b656:	d007      	beq.n	801b668 <ai_layers_forward_all+0x50>
 801b658:	47c0      	blx	r8
 801b65a:	3701      	adds	r7, #1
 801b65c:	63e6      	str	r6, [r4, #60]	@ 0x3c
 801b65e:	2e00      	cmp	r6, #0
 801b660:	d1eb      	bne.n	801b63a <ai_layers_forward_all+0x22>
 801b662:	4638      	mov	r0, r7
 801b664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b668:	2003      	movs	r0, #3
 801b66a:	47c0      	blx	r8
 801b66c:	2300      	movs	r3, #0
 801b66e:	3701      	adds	r7, #1
 801b670:	63e3      	str	r3, [r4, #60]	@ 0x3c
 801b672:	4638      	mov	r0, r7
 801b674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b678:	2700      	movs	r7, #0
 801b67a:	4638      	mov	r0, r7
 801b67c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b680:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 801b682:	63c5      	str	r5, [r0, #60]	@ 0x3c
 801b684:	2d00      	cmp	r5, #0
 801b686:	d0f7      	beq.n	801b678 <ai_layers_forward_all+0x60>
 801b688:	4647      	mov	r7, r8
 801b68a:	696b      	ldr	r3, [r5, #20]
 801b68c:	4628      	mov	r0, r5
 801b68e:	4798      	blx	r3
 801b690:	462b      	mov	r3, r5
 801b692:	692d      	ldr	r5, [r5, #16]
 801b694:	429d      	cmp	r5, r3
 801b696:	d004      	beq.n	801b6a2 <ai_layers_forward_all+0x8a>
 801b698:	63e5      	str	r5, [r4, #60]	@ 0x3c
 801b69a:	3701      	adds	r7, #1
 801b69c:	2d00      	cmp	r5, #0
 801b69e:	d1f4      	bne.n	801b68a <ai_layers_forward_all+0x72>
 801b6a0:	e7df      	b.n	801b662 <ai_layers_forward_all+0x4a>
 801b6a2:	2300      	movs	r3, #0
 801b6a4:	63e3      	str	r3, [r4, #60]	@ 0x3c
 801b6a6:	3701      	adds	r7, #1
 801b6a8:	e7db      	b.n	801b662 <ai_layers_forward_all+0x4a>
 801b6aa:	bf00      	nop

0801b6ac <ai_layers_destroy_all>:
 801b6ac:	b538      	push	{r3, r4, r5, lr}
 801b6ae:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 801b6b0:	2500      	movs	r5, #0
 801b6b2:	b16c      	cbz	r4, 801b6d0 <ai_layers_destroy_all+0x24>
 801b6b4:	6863      	ldr	r3, [r4, #4]
 801b6b6:	075b      	lsls	r3, r3, #29
 801b6b8:	d504      	bpl.n	801b6c4 <ai_layers_destroy_all+0x18>
 801b6ba:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801b6bc:	4620      	mov	r0, r4
 801b6be:	b10b      	cbz	r3, 801b6c4 <ai_layers_destroy_all+0x18>
 801b6c0:	4798      	blx	r3
 801b6c2:	3501      	adds	r5, #1
 801b6c4:	6923      	ldr	r3, [r4, #16]
 801b6c6:	42a3      	cmp	r3, r4
 801b6c8:	d002      	beq.n	801b6d0 <ai_layers_destroy_all+0x24>
 801b6ca:	b10b      	cbz	r3, 801b6d0 <ai_layers_destroy_all+0x24>
 801b6cc:	461c      	mov	r4, r3
 801b6ce:	e7f0      	b.n	801b6b2 <ai_layers_destroy_all+0x6>
 801b6d0:	4628      	mov	r0, r5
 801b6d2:	bd38      	pop	{r3, r4, r5, pc}

0801b6d4 <forward_conv2d_if32of32wf32_nl_pool>:
 801b6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6d8:	f8d0 c018 	ldr.w	ip, [r0, #24]
 801b6dc:	b0c1      	sub	sp, #260	@ 0x104
 801b6de:	f8bc 3000 	ldrh.w	r3, [ip]
 801b6e2:	9321      	str	r3, [sp, #132]	@ 0x84
 801b6e4:	2b00      	cmp	r3, #0
 801b6e6:	f000 812f 	beq.w	801b948 <forward_conv2d_if32of32wf32_nl_pool+0x274>
 801b6ea:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801b6ee:	f8d3 a004 	ldr.w	sl, [r3, #4]
 801b6f2:	4604      	mov	r4, r0
 801b6f4:	f1ba 0f00 	cmp.w	sl, #0
 801b6f8:	d001      	beq.n	801b6fe <forward_conv2d_if32of32wf32_nl_pool+0x2a>
 801b6fa:	f8da a000 	ldr.w	sl, [sl]
 801b6fe:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801b700:	2a01      	cmp	r2, #1
 801b702:	f000 8120 	beq.w	801b946 <forward_conv2d_if32of32wf32_nl_pool+0x272>
 801b706:	f8d3 9010 	ldr.w	r9, [r3, #16]
 801b70a:	f1b9 0f00 	cmp.w	r9, #0
 801b70e:	d001      	beq.n	801b714 <forward_conv2d_if32of32wf32_nl_pool+0x40>
 801b710:	f8d9 9000 	ldr.w	r9, [r9]
 801b714:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801b716:	2a02      	cmp	r2, #2
 801b718:	f000 8115 	beq.w	801b946 <forward_conv2d_if32of32wf32_nl_pool+0x272>
 801b71c:	f8d3 801c 	ldr.w	r8, [r3, #28]
 801b720:	8b1b      	ldrh	r3, [r3, #24]
 801b722:	f1b8 0f00 	cmp.w	r8, #0
 801b726:	f000 8123 	beq.w	801b970 <forward_conv2d_if32of32wf32_nl_pool+0x29c>
 801b72a:	2b01      	cmp	r3, #1
 801b72c:	f8d8 b000 	ldr.w	fp, [r8]
 801b730:	f240 8124 	bls.w	801b97c <forward_conv2d_if32of32wf32_nl_pool+0x2a8>
 801b734:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b738:	933f      	str	r3, [sp, #252]	@ 0xfc
 801b73a:	f8d8 8008 	ldr.w	r8, [r8, #8]
 801b73e:	f8da 200c 	ldr.w	r2, [sl, #12]
 801b742:	f8d9 100c 	ldr.w	r1, [r9, #12]
 801b746:	9222      	str	r2, [sp, #136]	@ 0x88
 801b748:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 801b74c:	922f      	str	r2, [sp, #188]	@ 0xbc
 801b74e:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 801b752:	9230      	str	r2, [sp, #192]	@ 0xc0
 801b754:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b758:	f8db e00c 	ldr.w	lr, [fp, #12]
 801b75c:	9231      	str	r2, [sp, #196]	@ 0xc4
 801b75e:	e9d4 750a 	ldrd	r7, r5, [r4, #40]	@ 0x28
 801b762:	f9b1 2008 	ldrsh.w	r2, [r1, #8]
 801b766:	9922      	ldr	r1, [sp, #136]	@ 0x88
 801b768:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801b76a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b76c:	9025      	str	r0, [sp, #148]	@ 0x94
 801b76e:	9232      	str	r2, [sp, #200]	@ 0xc8
 801b770:	f8de 0004 	ldr.w	r0, [lr, #4]
 801b774:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b778:	681e      	ldr	r6, [r3, #0]
 801b77a:	9527      	str	r5, [sp, #156]	@ 0x9c
 801b77c:	902a      	str	r0, [sp, #168]	@ 0xa8
 801b77e:	685d      	ldr	r5, [r3, #4]
 801b780:	f8de 0008 	ldr.w	r0, [lr, #8]
 801b784:	9223      	str	r2, [sp, #140]	@ 0x8c
 801b786:	f9b1 2008 	ldrsh.w	r2, [r1, #8]
 801b78a:	9628      	str	r6, [sp, #160]	@ 0xa0
 801b78c:	9529      	str	r5, [sp, #164]	@ 0xa4
 801b78e:	902e      	str	r0, [sp, #184]	@ 0xb8
 801b790:	e9d4 560c 	ldrd	r5, r6, [r4, #48]	@ 0x30
 801b794:	9224      	str	r2, [sp, #144]	@ 0x90
 801b796:	689a      	ldr	r2, [r3, #8]
 801b798:	68db      	ldr	r3, [r3, #12]
 801b79a:	932d      	str	r3, [sp, #180]	@ 0xb4
 801b79c:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 801b7a0:	9337      	str	r3, [sp, #220]	@ 0xdc
 801b7a2:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	@ 0x44
 801b7a6:	922c      	str	r2, [sp, #176]	@ 0xb0
 801b7a8:	933a      	str	r3, [sp, #232]	@ 0xe8
 801b7aa:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801b7ac:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	@ 0x4c
 801b7b0:	933b      	str	r3, [sp, #236]	@ 0xec
 801b7b2:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	@ 0x50
 801b7b6:	933c      	str	r3, [sp, #240]	@ 0xf0
 801b7b8:	f9b2 3000 	ldrsh.w	r3, [r2]
 801b7bc:	933d      	str	r3, [sp, #244]	@ 0xf4
 801b7be:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 801b7c2:	933e      	str	r3, [sp, #248]	@ 0xf8
 801b7c4:	6a23      	ldr	r3, [r4, #32]
 801b7c6:	9322      	str	r3, [sp, #136]	@ 0x88
 801b7c8:	b2bb      	uxth	r3, r7
 801b7ca:	9333      	str	r3, [sp, #204]	@ 0xcc
 801b7cc:	f8bd 309c 	ldrh.w	r3, [sp, #156]	@ 0x9c
 801b7d0:	9334      	str	r3, [sp, #208]	@ 0xd0
 801b7d2:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	@ 0xa0
 801b7d6:	9335      	str	r3, [sp, #212]	@ 0xd4
 801b7d8:	f8bd 30a4 	ldrh.w	r3, [sp, #164]	@ 0xa4
 801b7dc:	9336      	str	r3, [sp, #216]	@ 0xd8
 801b7de:	b2ab      	uxth	r3, r5
 801b7e0:	9338      	str	r3, [sp, #224]	@ 0xe0
 801b7e2:	b2b3      	uxth	r3, r6
 801b7e4:	9339      	str	r3, [sp, #228]	@ 0xe4
 801b7e6:	f9bd 30a8 	ldrsh.w	r3, [sp, #168]	@ 0xa8
 801b7ea:	9325      	str	r3, [sp, #148]	@ 0x94
 801b7ec:	b203      	sxth	r3, r0
 801b7ee:	9326      	str	r3, [sp, #152]	@ 0x98
 801b7f0:	f1b8 0f00 	cmp.w	r8, #0
 801b7f4:	f000 80aa 	beq.w	801b94c <forward_conv2d_if32of32wf32_nl_pool+0x278>
 801b7f8:	f8d8 3018 	ldr.w	r3, [r8, #24]
 801b7fc:	2b00      	cmp	r3, #0
 801b7fe:	f000 80ae 	beq.w	801b95e <forward_conv2d_if32of32wf32_nl_pool+0x28a>
 801b802:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b806:	689b      	ldr	r3, [r3, #8]
 801b808:	9322      	str	r3, [sp, #136]	@ 0x88
 801b80a:	f001 fcdf 	bl	801d1cc <ai_array_get_byte_size>
 801b80e:	f8d8 3018 	ldr.w	r3, [r8, #24]
 801b812:	902b      	str	r0, [sp, #172]	@ 0xac
 801b814:	2b00      	cmp	r3, #0
 801b816:	f000 80b4 	beq.w	801b982 <forward_conv2d_if32of32wf32_nl_pool+0x2ae>
 801b81a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b81e:	f001 fcd5 	bl	801d1cc <ai_array_get_byte_size>
 801b822:	f8d4 c018 	ldr.w	ip, [r4, #24]
 801b826:	f8bc 3000 	ldrh.w	r3, [ip]
 801b82a:	9321      	str	r3, [sp, #132]	@ 0x84
 801b82c:	4686      	mov	lr, r0
 801b82e:	f8d9 1018 	ldr.w	r1, [r9, #24]
 801b832:	f8da 0018 	ldr.w	r0, [sl, #24]
 801b836:	9b3f      	ldr	r3, [sp, #252]	@ 0xfc
 801b838:	f8db 2018 	ldr.w	r2, [fp, #24]
 801b83c:	699b      	ldr	r3, [r3, #24]
 801b83e:	f8bd 809c 	ldrh.w	r8, [sp, #156]	@ 0x9c
 801b842:	689b      	ldr	r3, [r3, #8]
 801b844:	f8d4 b05c 	ldr.w	fp, [r4, #92]	@ 0x5c
 801b848:	6880      	ldr	r0, [r0, #8]
 801b84a:	6889      	ldr	r1, [r1, #8]
 801b84c:	6892      	ldr	r2, [r2, #8]
 801b84e:	9327      	str	r3, [sp, #156]	@ 0x9c
 801b850:	fa1f f987 	uxth.w	r9, r7
 801b854:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 801b856:	b2ad      	uxth	r5, r5
 801b858:	f107 3aff 	add.w	sl, r7, #4294967295
 801b85c:	9f2a      	ldr	r7, [sp, #168]	@ 0xa8
 801b85e:	3d01      	subs	r5, #1
 801b860:	fb15 750a 	smlabb	r5, r5, sl, r7
 801b864:	fa0f fa85 	sxth.w	sl, r5
 801b868:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 801b86a:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 801b86c:	b2b6      	uxth	r6, r6
 801b86e:	3d01      	subs	r5, #1
 801b870:	3e01      	subs	r6, #1
 801b872:	fb16 7605 	smlabb	r6, r6, r5, r7
 801b876:	9f24      	ldr	r7, [sp, #144]	@ 0x90
 801b878:	eba7 050a 	sub.w	r5, r7, sl
 801b87c:	9f29      	ldr	r7, [sp, #164]	@ 0xa4
 801b87e:	fa15 f587 	uxtah	r5, r5, r7
 801b882:	9f2d      	ldr	r7, [sp, #180]	@ 0xb4
 801b884:	fa15 f587 	uxtah	r5, r5, r7
 801b888:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
 801b88a:	fb95 f5f9 	sdiv	r5, r5, r9
 801b88e:	b236      	sxth	r6, r6
 801b890:	eba7 0906 	sub.w	r9, r7, r6
 801b894:	9f28      	ldr	r7, [sp, #160]	@ 0xa0
 801b896:	fa19 f987 	uxtah	r9, r9, r7
 801b89a:	9f2c      	ldr	r7, [sp, #176]	@ 0xb0
 801b89c:	fa19 f987 	uxtah	r9, r9, r7
 801b8a0:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 801b8a2:	fb99 f8f8 	sdiv	r8, r9, r8
 801b8a6:	3501      	adds	r5, #1
 801b8a8:	2f03      	cmp	r7, #3
 801b8aa:	f8d4 9024 	ldr.w	r9, [r4, #36]	@ 0x24
 801b8ae:	f9b4 4048 	ldrsh.w	r4, [r4, #72]	@ 0x48
 801b8b2:	b22d      	sxth	r5, r5
 801b8b4:	f108 0801 	add.w	r8, r8, #1
 801b8b8:	d945      	bls.n	801b946 <forward_conv2d_if32of32wf32_nl_pool+0x272>
 801b8ba:	f8dc 7004 	ldr.w	r7, [ip, #4]
 801b8be:	6abf      	ldr	r7, [r7, #40]	@ 0x28
 801b8c0:	2f00      	cmp	r7, #0
 801b8c2:	d069      	beq.n	801b998 <forward_conv2d_if32of32wf32_nl_pool+0x2c4>
 801b8c4:	9b3d      	ldr	r3, [sp, #244]	@ 0xf4
 801b8c6:	931e      	str	r3, [sp, #120]	@ 0x78
 801b8c8:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
 801b8ca:	931d      	str	r3, [sp, #116]	@ 0x74
 801b8cc:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
 801b8ce:	931c      	str	r3, [sp, #112]	@ 0x70
 801b8d0:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
 801b8d2:	f8cd e05c 	str.w	lr, [sp, #92]	@ 0x5c
 801b8d6:	e9cd 431a 	strd	r4, r3, [sp, #104]	@ 0x68
 801b8da:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 801b8dc:	9512      	str	r5, [sp, #72]	@ 0x48
 801b8de:	e9cd b318 	strd	fp, r3, [sp, #96]	@ 0x60
 801b8e2:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801b8e4:	9316      	str	r3, [sp, #88]	@ 0x58
 801b8e6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801b8e8:	960d      	str	r6, [sp, #52]	@ 0x34
 801b8ea:	e9cd 9314 	strd	r9, r3, [sp, #80]	@ 0x50
 801b8ee:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 801b8f0:	9311      	str	r3, [sp, #68]	@ 0x44
 801b8f2:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 801b8f4:	9310      	str	r3, [sp, #64]	@ 0x40
 801b8f6:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 801b8f8:	e9cd a30e 	strd	sl, r3, [sp, #56]	@ 0x38
 801b8fc:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 801b8fe:	930c      	str	r3, [sp, #48]	@ 0x30
 801b900:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 801b902:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b904:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 801b906:	930a      	str	r3, [sp, #40]	@ 0x28
 801b908:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 801b90a:	9309      	str	r3, [sp, #36]	@ 0x24
 801b90c:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 801b90e:	9306      	str	r3, [sp, #24]
 801b910:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801b912:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 801b914:	9407      	str	r4, [sp, #28]
 801b916:	9305      	str	r3, [sp, #20]
 801b918:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 801b91a:	9c24      	ldr	r4, [sp, #144]	@ 0x90
 801b91c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801b91e:	9508      	str	r5, [sp, #32]
 801b920:	9403      	str	r4, [sp, #12]
 801b922:	9302      	str	r3, [sp, #8]
 801b924:	9d23      	ldr	r5, [sp, #140]	@ 0x8c
 801b926:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 801b928:	9301      	str	r3, [sp, #4]
 801b92a:	fa0f f488 	sxth.w	r4, r8
 801b92e:	9504      	str	r5, [sp, #16]
 801b930:	9413      	str	r4, [sp, #76]	@ 0x4c
 801b932:	683c      	ldr	r4, [r7, #0]
 801b934:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801b936:	69a4      	ldr	r4, [r4, #24]
 801b938:	68a4      	ldr	r4, [r4, #8]
 801b93a:	9400      	str	r4, [sp, #0]
 801b93c:	f000 fc06 	bl	801c14c <forward_lite_conv2d_if32of32wf32_pool>
 801b940:	b041      	add	sp, #260	@ 0x104
 801b942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b946:	2300      	movs	r3, #0
 801b948:	685b      	ldr	r3, [r3, #4]
 801b94a:	deff      	udf	#255	@ 0xff
 801b94c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801b94e:	b10b      	cbz	r3, 801b954 <forward_conv2d_if32of32wf32_nl_pool+0x280>
 801b950:	689b      	ldr	r3, [r3, #8]
 801b952:	9322      	str	r3, [sp, #136]	@ 0x88
 801b954:	f8cd 80ac 	str.w	r8, [sp, #172]	@ 0xac
 801b958:	f04f 0e01 	mov.w	lr, #1
 801b95c:	e767      	b.n	801b82e <forward_conv2d_if32of32wf32_nl_pool+0x15a>
 801b95e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801b960:	b10b      	cbz	r3, 801b966 <forward_conv2d_if32of32wf32_nl_pool+0x292>
 801b962:	689b      	ldr	r3, [r3, #8]
 801b964:	9322      	str	r3, [sp, #136]	@ 0x88
 801b966:	2300      	movs	r3, #0
 801b968:	932b      	str	r3, [sp, #172]	@ 0xac
 801b96a:	f04f 0e01 	mov.w	lr, #1
 801b96e:	e75e      	b.n	801b82e <forward_conv2d_if32of32wf32_nl_pool+0x15a>
 801b970:	2b01      	cmp	r3, #1
 801b972:	d90e      	bls.n	801b992 <forward_conv2d_if32of32wf32_nl_pool+0x2be>
 801b974:	f8cd 80fc 	str.w	r8, [sp, #252]	@ 0xfc
 801b978:	46c3      	mov	fp, r8
 801b97a:	e6e0      	b.n	801b73e <forward_conv2d_if32of32wf32_nl_pool+0x6a>
 801b97c:	2300      	movs	r3, #0
 801b97e:	933f      	str	r3, [sp, #252]	@ 0xfc
 801b980:	e6db      	b.n	801b73a <forward_conv2d_if32of32wf32_nl_pool+0x66>
 801b982:	f8d4 c018 	ldr.w	ip, [r4, #24]
 801b986:	f8bc 3000 	ldrh.w	r3, [ip]
 801b98a:	9321      	str	r3, [sp, #132]	@ 0x84
 801b98c:	f04f 0e01 	mov.w	lr, #1
 801b990:	e74d      	b.n	801b82e <forward_conv2d_if32of32wf32_nl_pool+0x15a>
 801b992:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801b996:	deff      	udf	#255	@ 0xff
 801b998:	69bb      	ldr	r3, [r7, #24]
 801b99a:	deff      	udf	#255	@ 0xff

0801b99c <forward_dense>:
 801b99c:	6983      	ldr	r3, [r0, #24]
 801b99e:	881a      	ldrh	r2, [r3, #0]
 801b9a0:	2a00      	cmp	r2, #0
 801b9a2:	f000 80cc 	beq.w	801bb3e <forward_dense+0x1a2>
 801b9a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9aa:	ed2d 8b02 	vpush	{d8}
 801b9ae:	f8d3 c004 	ldr.w	ip, [r3, #4]
 801b9b2:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801b9b6:	b09b      	sub	sp, #108	@ 0x6c
 801b9b8:	b104      	cbz	r4, 801b9bc <forward_dense+0x20>
 801b9ba:	6824      	ldr	r4, [r4, #0]
 801b9bc:	2a01      	cmp	r2, #1
 801b9be:	f000 81d7 	beq.w	801bd70 <forward_dense+0x3d4>
 801b9c2:	f8dc 5010 	ldr.w	r5, [ip, #16]
 801b9c6:	b105      	cbz	r5, 801b9ca <forward_dense+0x2e>
 801b9c8:	682d      	ldr	r5, [r5, #0]
 801b9ca:	2a02      	cmp	r2, #2
 801b9cc:	f000 80b9 	beq.w	801bb42 <forward_dense+0x1a6>
 801b9d0:	f8dc 301c 	ldr.w	r3, [ip, #28]
 801b9d4:	9308      	str	r3, [sp, #32]
 801b9d6:	2b00      	cmp	r3, #0
 801b9d8:	f000 81c1 	beq.w	801bd5e <forward_dense+0x3c2>
 801b9dc:	4619      	mov	r1, r3
 801b9de:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 801b9e2:	6809      	ldr	r1, [r1, #0]
 801b9e4:	910a      	str	r1, [sp, #40]	@ 0x28
 801b9e6:	2b01      	cmp	r3, #1
 801b9e8:	f240 81bb 	bls.w	801bd62 <forward_dense+0x3c6>
 801b9ec:	9b08      	ldr	r3, [sp, #32]
 801b9ee:	685b      	ldr	r3, [r3, #4]
 801b9f0:	9308      	str	r3, [sp, #32]
 801b9f2:	460b      	mov	r3, r1
 801b9f4:	68e0      	ldr	r0, [r4, #12]
 801b9f6:	68ee      	ldr	r6, [r5, #12]
 801b9f8:	6840      	ldr	r0, [r0, #4]
 801b9fa:	6999      	ldr	r1, [r3, #24]
 801b9fc:	9010      	str	r0, [sp, #64]	@ 0x40
 801b9fe:	6870      	ldr	r0, [r6, #4]
 801ba00:	680b      	ldr	r3, [r1, #0]
 801ba02:	900f      	str	r0, [sp, #60]	@ 0x3c
 801ba04:	e9d6 7602 	ldrd	r7, r6, [r6, #8]
 801ba08:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 801ba0c:	fb00 f707 	mul.w	r7, r0, r7
 801ba10:	f3c3 5041 	ubfx	r0, r3, #21, #2
 801ba14:	fa4e f000 	asr.w	r0, lr, r0
 801ba18:	2a03      	cmp	r2, #3
 801ba1a:	900d      	str	r0, [sp, #52]	@ 0x34
 801ba1c:	f000 81a5 	beq.w	801bd6a <forward_dense+0x3ce>
 801ba20:	f8dc 8028 	ldr.w	r8, [ip, #40]	@ 0x28
 801ba24:	f1b8 0f00 	cmp.w	r8, #0
 801ba28:	d006      	beq.n	801ba38 <forward_dense+0x9c>
 801ba2a:	f8d8 8000 	ldr.w	r8, [r8]
 801ba2e:	f1b8 0f00 	cmp.w	r8, #0
 801ba32:	d001      	beq.n	801ba38 <forward_dense+0x9c>
 801ba34:	f8d8 8018 	ldr.w	r8, [r8, #24]
 801ba38:	f3c3 4343 	ubfx	r3, r3, #17, #4
 801ba3c:	f46f 7288 	mvn.w	r2, #272	@ 0x110
 801ba40:	fa42 f303 	asr.w	r3, r2, r3
 801ba44:	07db      	lsls	r3, r3, #31
 801ba46:	f140 8177 	bpl.w	801bd38 <forward_dense+0x39c>
 801ba4a:	f04f 0900 	mov.w	r9, #0
 801ba4e:	69a3      	ldr	r3, [r4, #24]
 801ba50:	69aa      	ldr	r2, [r5, #24]
 801ba52:	6891      	ldr	r1, [r2, #8]
 801ba54:	689a      	ldr	r2, [r3, #8]
 801ba56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ba58:	9102      	str	r1, [sp, #8]
 801ba5a:	695b      	ldr	r3, [r3, #20]
 801ba5c:	685b      	ldr	r3, [r3, #4]
 801ba5e:	9303      	str	r3, [sp, #12]
 801ba60:	fb07 f606 	mul.w	r6, r7, r6
 801ba64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ba66:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 801ba6a:	009c      	lsls	r4, r3, #2
 801ba6c:	4281      	cmp	r1, r0
 801ba6e:	900b      	str	r0, [sp, #44]	@ 0x2c
 801ba70:	9409      	str	r4, [sp, #36]	@ 0x24
 801ba72:	eb01 0883 	add.w	r8, r1, r3, lsl #2
 801ba76:	d25d      	bcs.n	801bb34 <forward_dense+0x198>
 801ba78:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ba7a:	ed9f 8abf 	vldr	s16, [pc, #764]	@ 801bd78 <forward_dense+0x3dc>
 801ba7e:	08d9      	lsrs	r1, r3, #3
 801ba80:	4693      	mov	fp, r2
 801ba82:	eb02 0a83 	add.w	sl, r2, r3, lsl #2
 801ba86:	461a      	mov	r2, r3
 801ba88:	f023 0301 	bic.w	r3, r3, #1
 801ba8c:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 801ba90:	9301      	str	r3, [sp, #4]
 801ba92:	014b      	lsls	r3, r1, #5
 801ba94:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 801ba98:	9311      	str	r3, [sp, #68]	@ 0x44
 801ba9a:	0093      	lsls	r3, r2, #2
 801ba9c:	930c      	str	r3, [sp, #48]	@ 0x30
 801ba9e:	f002 0301 	and.w	r3, r2, #1
 801baa2:	464c      	mov	r4, r9
 801baa4:	9104      	str	r1, [sp, #16]
 801baa6:	9305      	str	r3, [sp, #20]
 801baa8:	46c1      	mov	r9, r8
 801baaa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801baac:	699b      	ldr	r3, [r3, #24]
 801baae:	f8d3 c008 	ldr.w	ip, [r3, #8]
 801bab2:	9b08      	ldr	r3, [sp, #32]
 801bab4:	2b00      	cmp	r3, #0
 801bab6:	d04a      	beq.n	801bb4e <forward_dense+0x1b2>
 801bab8:	699b      	ldr	r3, [r3, #24]
 801baba:	689d      	ldr	r5, [r3, #8]
 801babc:	2c00      	cmp	r4, #0
 801babe:	d049      	beq.n	801bb54 <forward_dense+0x1b8>
 801bac0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801bac2:	2b04      	cmp	r3, #4
 801bac4:	9b02      	ldr	r3, [sp, #8]
 801bac6:	d057      	beq.n	801bb78 <forward_dense+0x1dc>
 801bac8:	4599      	cmp	r9, r3
 801baca:	d927      	bls.n	801bb1c <forward_dense+0x180>
 801bacc:	9e03      	ldr	r6, [sp, #12]
 801bace:	4618      	mov	r0, r3
 801bad0:	2d00      	cmp	r5, #0
 801bad2:	d039      	beq.n	801bb48 <forward_dense+0x1ac>
 801bad4:	ecb5 6a01 	vldmia	r5!, {s12}
 801bad8:	45da      	cmp	sl, fp
 801bada:	d911      	bls.n	801bb00 <forward_dense+0x164>
 801badc:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 801bd78 <forward_dense+0x3dc>
 801bae0:	465a      	mov	r2, fp
 801bae2:	4661      	mov	r1, ip
 801bae4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bae8:	ecb2 7a01 	vldmia	r2!, {s14}
 801baec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801baf0:	edd3 6a00 	vldr	s13, [r3]
 801baf4:	4592      	cmp	sl, r2
 801baf6:	eee6 7a87 	vfma.f32	s15, s13, s14
 801bafa:	d8f3      	bhi.n	801bae4 <forward_dense+0x148>
 801bafc:	ee36 6a27 	vadd.f32	s12, s12, s15
 801bb00:	eca0 6a01 	vstmia	r0!, {s12}
 801bb04:	4548      	cmp	r0, r9
 801bb06:	44b4      	add	ip, r6
 801bb08:	d3e2      	bcc.n	801bad0 <forward_dense+0x134>
 801bb0a:	9a02      	ldr	r2, [sp, #8]
 801bb0c:	eba9 0302 	sub.w	r3, r9, r2
 801bb10:	3b01      	subs	r3, #1
 801bb12:	f023 0303 	bic.w	r3, r3, #3
 801bb16:	3304      	adds	r3, #4
 801bb18:	18d3      	adds	r3, r2, r3
 801bb1a:	9302      	str	r3, [sp, #8]
 801bb1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bb1e:	9a01      	ldr	r2, [sp, #4]
 801bb20:	4499      	add	r9, r3
 801bb22:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bb24:	441a      	add	r2, r3
 801bb26:	449a      	add	sl, r3
 801bb28:	449b      	add	fp, r3
 801bb2a:	9201      	str	r2, [sp, #4]
 801bb2c:	9b02      	ldr	r3, [sp, #8]
 801bb2e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801bb30:	4293      	cmp	r3, r2
 801bb32:	d3ba      	bcc.n	801baaa <forward_dense+0x10e>
 801bb34:	b01b      	add	sp, #108	@ 0x6c
 801bb36:	ecbd 8b02 	vpop	{d8}
 801bb3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb3e:	6853      	ldr	r3, [r2, #4]
 801bb40:	deff      	udf	#255	@ 0xff
 801bb42:	2300      	movs	r3, #0
 801bb44:	685b      	ldr	r3, [r3, #4]
 801bb46:	deff      	udf	#255	@ 0xff
 801bb48:	ed9f 6a8b 	vldr	s12, [pc, #556]	@ 801bd78 <forward_dense+0x3dc>
 801bb4c:	e7c4      	b.n	801bad8 <forward_dense+0x13c>
 801bb4e:	461d      	mov	r5, r3
 801bb50:	2c00      	cmp	r4, #0
 801bb52:	d1b5      	bne.n	801bac0 <forward_dense+0x124>
 801bb54:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801bb56:	9217      	str	r2, [sp, #92]	@ 0x5c
 801bb58:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801bb5a:	9b02      	ldr	r3, [sp, #8]
 801bb5c:	9218      	str	r2, [sp, #96]	@ 0x60
 801bb5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801bb60:	e9cd 3b13 	strd	r3, fp, [sp, #76]	@ 0x4c
 801bb64:	4413      	add	r3, r2
 801bb66:	9302      	str	r3, [sp, #8]
 801bb68:	a813      	add	r0, sp, #76	@ 0x4c
 801bb6a:	2301      	movs	r3, #1
 801bb6c:	e9cd c515 	strd	ip, r5, [sp, #84]	@ 0x54
 801bb70:	9319      	str	r3, [sp, #100]	@ 0x64
 801bb72:	f001 f8b9 	bl	801cce8 <forward_lite_dense_if32of32wf32>
 801bb76:	e7d1      	b.n	801bb1c <forward_dense+0x180>
 801bb78:	4599      	cmp	r9, r3
 801bb7a:	d9cf      	bls.n	801bb1c <forward_dense+0x180>
 801bb7c:	9a04      	ldr	r2, [sp, #16]
 801bb7e:	9300      	str	r3, [sp, #0]
 801bb80:	1c57      	adds	r7, r2, #1
 801bb82:	9b01      	ldr	r3, [sp, #4]
 801bb84:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801bb86:	f8cd a038 	str.w	sl, [sp, #56]	@ 0x38
 801bb8a:	4452      	add	r2, sl
 801bb8c:	3b01      	subs	r3, #1
 801bb8e:	eb0c 0787 	add.w	r7, ip, r7, lsl #2
 801bb92:	9206      	str	r2, [sp, #24]
 801bb94:	9307      	str	r3, [sp, #28]
 801bb96:	2d00      	cmp	r5, #0
 801bb98:	f000 80c3 	beq.w	801bd22 <forward_dense+0x386>
 801bb9c:	9b04      	ldr	r3, [sp, #16]
 801bb9e:	ecf5 2a01 	vldmia	r5!, {s5}
 801bba2:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 801bd78 <forward_dense+0x3dc>
 801bba6:	2b00      	cmp	r3, #0
 801bba8:	f000 80c3 	beq.w	801bd32 <forward_dense+0x396>
 801bbac:	f10c 0204 	add.w	r2, ip, #4
 801bbb0:	f10b 0320 	add.w	r3, fp, #32
 801bbb4:	f812 0c04 	ldrb.w	r0, [r2, #-4]
 801bbb8:	ed13 2a07 	vldr	s4, [r3, #-28]	@ 0xffffffe4
 801bbbc:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 801bbc0:	ed53 3a08 	vldr	s7, [r3, #-32]	@ 0xffffffe0
 801bbc4:	ed13 4a06 	vldr	s8, [r3, #-24]	@ 0xffffffe8
 801bbc8:	ed53 4a05 	vldr	s9, [r3, #-20]	@ 0xffffffec
 801bbcc:	ed13 5a04 	vldr	s10, [r3, #-16]
 801bbd0:	ed53 5a03 	vldr	s11, [r3, #-12]
 801bbd4:	ed13 6a02 	vldr	s12, [r3, #-8]
 801bbd8:	ed53 6a01 	vldr	s13, [r3, #-4]
 801bbdc:	f000 060f 	and.w	r6, r0, #15
 801bbe0:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801bbe4:	edd6 7a00 	vldr	s15, [r6]
 801bbe8:	0900      	lsrs	r0, r0, #4
 801bbea:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 801bbee:	ed90 3a00 	vldr	s6, [r0]
 801bbf2:	ee67 7a82 	vmul.f32	s15, s15, s4
 801bbf6:	0908      	lsrs	r0, r1, #4
 801bbf8:	eee3 7a23 	vfma.f32	s15, s6, s7
 801bbfc:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 801bc00:	f001 010f 	and.w	r1, r1, #15
 801bc04:	edd0 3a00 	vldr	s7, [r0]
 801bc08:	f812 0c02 	ldrb.w	r0, [r2, #-2]
 801bc0c:	eee3 7a84 	vfma.f32	s15, s7, s8
 801bc10:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801bc14:	0906      	lsrs	r6, r0, #4
 801bc16:	ed91 4a00 	vldr	s8, [r1]
 801bc1a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 801bc1e:	eee4 7a24 	vfma.f32	s15, s8, s9
 801bc22:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801bc26:	f000 000f 	and.w	r0, r0, #15
 801bc2a:	edd6 4a00 	vldr	s9, [r6]
 801bc2e:	eee4 7a85 	vfma.f32	s15, s9, s10
 801bc32:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 801bc36:	3204      	adds	r2, #4
 801bc38:	ed90 5a00 	vldr	s10, [r0]
 801bc3c:	0908      	lsrs	r0, r1, #4
 801bc3e:	eee5 7a25 	vfma.f32	s15, s10, s11
 801bc42:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 801bc46:	f001 010f 	and.w	r1, r1, #15
 801bc4a:	edd0 5a00 	vldr	s11, [r0]
 801bc4e:	eee5 7a86 	vfma.f32	s15, s11, s12
 801bc52:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801bc56:	42ba      	cmp	r2, r7
 801bc58:	ed91 6a00 	vldr	s12, [r1]
 801bc5c:	eee6 7a26 	vfma.f32	s15, s12, s13
 801bc60:	f103 0320 	add.w	r3, r3, #32
 801bc64:	ee37 7a27 	vadd.f32	s14, s14, s15
 801bc68:	d1a4      	bne.n	801bbb4 <forward_dense+0x218>
 801bc6a:	f8dd e018 	ldr.w	lr, [sp, #24]
 801bc6e:	f1a7 0804 	sub.w	r8, r7, #4
 801bc72:	9b01      	ldr	r3, [sp, #4]
 801bc74:	459e      	cmp	lr, r3
 801bc76:	d22a      	bcs.n	801bcce <forward_dense+0x332>
 801bc78:	9b07      	ldr	r3, [sp, #28]
 801bc7a:	eba3 060e 	sub.w	r6, r3, lr
 801bc7e:	ea4f 0ad6 	mov.w	sl, r6, lsr #3
 801bc82:	f10e 0208 	add.w	r2, lr, #8
 801bc86:	f108 30ff 	add.w	r0, r8, #4294967295
 801bc8a:	eb08 06d6 	add.w	r6, r8, r6, lsr #3
 801bc8e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801bc92:	ed52 5a01 	vldr	s11, [r2, #-4]
 801bc96:	ed52 6a02 	vldr	s13, [r2, #-8]
 801bc9a:	f003 010f 	and.w	r1, r3, #15
 801bc9e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801bca2:	edd1 7a00 	vldr	s15, [r1]
 801bca6:	091b      	lsrs	r3, r3, #4
 801bca8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801bcac:	ed93 6a00 	vldr	s12, [r3]
 801bcb0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801bcb4:	42b0      	cmp	r0, r6
 801bcb6:	eee6 7a26 	vfma.f32	s15, s12, s13
 801bcba:	f102 0208 	add.w	r2, r2, #8
 801bcbe:	ee37 7a27 	vadd.f32	s14, s14, s15
 801bcc2:	d1e4      	bne.n	801bc8e <forward_dense+0x2f2>
 801bcc4:	f10a 0a01 	add.w	sl, sl, #1
 801bcc8:	44d0      	add	r8, sl
 801bcca:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 801bcce:	9b05      	ldr	r3, [sp, #20]
 801bcd0:	b1cb      	cbz	r3, 801bd06 <forward_dense+0x36a>
 801bcd2:	f898 3000 	ldrb.w	r3, [r8]
 801bcd6:	edde 7a00 	vldr	s15, [lr]
 801bcda:	9a03      	ldr	r2, [sp, #12]
 801bcdc:	091b      	lsrs	r3, r3, #4
 801bcde:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801bce2:	edd3 6a00 	vldr	s13, [r3]
 801bce6:	9b00      	ldr	r3, [sp, #0]
 801bce8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801bcec:	4494      	add	ip, r2
 801bcee:	4417      	add	r7, r2
 801bcf0:	ee32 7a87 	vadd.f32	s14, s5, s14
 801bcf4:	eca3 7a01 	vstmia	r3!, {s14}
 801bcf8:	4599      	cmp	r9, r3
 801bcfa:	9300      	str	r3, [sp, #0]
 801bcfc:	f63f af4b 	bhi.w	801bb96 <forward_dense+0x1fa>
 801bd00:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 801bd04:	e701      	b.n	801bb0a <forward_dense+0x16e>
 801bd06:	9b00      	ldr	r3, [sp, #0]
 801bd08:	9a03      	ldr	r2, [sp, #12]
 801bd0a:	ee72 2a87 	vadd.f32	s5, s5, s14
 801bd0e:	4494      	add	ip, r2
 801bd10:	ece3 2a01 	vstmia	r3!, {s5}
 801bd14:	454b      	cmp	r3, r9
 801bd16:	9300      	str	r3, [sp, #0]
 801bd18:	4417      	add	r7, r2
 801bd1a:	d2f1      	bcs.n	801bd00 <forward_dense+0x364>
 801bd1c:	2d00      	cmp	r5, #0
 801bd1e:	f47f af3d 	bne.w	801bb9c <forward_dense+0x200>
 801bd22:	9b04      	ldr	r3, [sp, #16]
 801bd24:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 801bd78 <forward_dense+0x3dc>
 801bd28:	eef0 2a48 	vmov.f32	s5, s16
 801bd2c:	2b00      	cmp	r3, #0
 801bd2e:	f47f af3d 	bne.w	801bbac <forward_dense+0x210>
 801bd32:	46de      	mov	lr, fp
 801bd34:	46e0      	mov	r8, ip
 801bd36:	e79c      	b.n	801bc72 <forward_dense+0x2d6>
 801bd38:	f8d1 900c 	ldr.w	r9, [r1, #12]
 801bd3c:	f1b8 0f00 	cmp.w	r8, #0
 801bd40:	f43f ae85 	beq.w	801ba4e <forward_dense+0xb2>
 801bd44:	e9d8 0100 	ldrd	r0, r1, [r8]
 801bd48:	f001 fa40 	bl	801d1cc <ai_array_get_byte_size>
 801bd4c:	f8d8 800c 	ldr.w	r8, [r8, #12]
 801bd50:	4602      	mov	r2, r0
 801bd52:	4641      	mov	r1, r8
 801bd54:	4648      	mov	r0, r9
 801bd56:	f001 f943 	bl	801cfe0 <st_int8_copy>
 801bd5a:	46c1      	mov	r9, r8
 801bd5c:	e677      	b.n	801ba4e <forward_dense+0xb2>
 801bd5e:	930a      	str	r3, [sp, #40]	@ 0x28
 801bd60:	e648      	b.n	801b9f4 <forward_dense+0x58>
 801bd62:	2300      	movs	r3, #0
 801bd64:	9308      	str	r3, [sp, #32]
 801bd66:	460b      	mov	r3, r1
 801bd68:	e644      	b.n	801b9f4 <forward_dense+0x58>
 801bd6a:	2300      	movs	r3, #0
 801bd6c:	685b      	ldr	r3, [r3, #4]
 801bd6e:	deff      	udf	#255	@ 0xff
 801bd70:	2300      	movs	r3, #0
 801bd72:	685b      	ldr	r3, [r3, #4]
 801bd74:	deff      	udf	#255	@ 0xff
 801bd76:	bf00      	nop
 801bd78:	00000000 	.word	0x00000000

0801bd7c <forward_relu>:
 801bd7c:	6982      	ldr	r2, [r0, #24]
 801bd7e:	8813      	ldrh	r3, [r2, #0]
 801bd80:	b323      	cbz	r3, 801bdcc <forward_relu+0x50>
 801bd82:	6851      	ldr	r1, [r2, #4]
 801bd84:	684a      	ldr	r2, [r1, #4]
 801bd86:	b102      	cbz	r2, 801bd8a <forward_relu+0xe>
 801bd88:	6812      	ldr	r2, [r2, #0]
 801bd8a:	2b01      	cmp	r3, #1
 801bd8c:	f000 808d 	beq.w	801beaa <forward_relu+0x12e>
 801bd90:	b470      	push	{r4, r5, r6}
 801bd92:	6909      	ldr	r1, [r1, #16]
 801bd94:	b101      	cbz	r1, 801bd98 <forward_relu+0x1c>
 801bd96:	6809      	ldr	r1, [r1, #0]
 801bd98:	69c6      	ldr	r6, [r0, #28]
 801bd9a:	b1ce      	cbz	r6, 801bdd0 <forward_relu+0x54>
 801bd9c:	6873      	ldr	r3, [r6, #4]
 801bd9e:	6988      	ldr	r0, [r1, #24]
 801bda0:	6991      	ldr	r1, [r2, #24]
 801bda2:	2b01      	cmp	r3, #1
 801bda4:	d044      	beq.n	801be30 <forward_relu+0xb4>
 801bda6:	6893      	ldr	r3, [r2, #8]
 801bda8:	6880      	ldr	r0, [r0, #8]
 801bdaa:	6889      	ldr	r1, [r1, #8]
 801bdac:	0a1b      	lsrs	r3, r3, #8
 801bdae:	d073      	beq.n	801be98 <forward_relu+0x11c>
 801bdb0:	68d5      	ldr	r5, [r2, #12]
 801bdb2:	2201      	movs	r2, #1
 801bdb4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801bdb8:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 801bdbc:	429d      	cmp	r5, r3
 801bdbe:	fb04 f202 	mul.w	r2, r4, r2
 801bdc2:	d1f9      	bne.n	801bdb8 <forward_relu+0x3c>
 801bdc4:	68b3      	ldr	r3, [r6, #8]
 801bdc6:	bc70      	pop	{r4, r5, r6}
 801bdc8:	f000 bce8 	b.w	801c79c <forward_lite_nl_relu_generic_if32of32_kernel>
 801bdcc:	685b      	ldr	r3, [r3, #4]
 801bdce:	deff      	udf	#255	@ 0xff
 801bdd0:	6893      	ldr	r3, [r2, #8]
 801bdd2:	6989      	ldr	r1, [r1, #24]
 801bdd4:	6990      	ldr	r0, [r2, #24]
 801bdd6:	6889      	ldr	r1, [r1, #8]
 801bdd8:	6884      	ldr	r4, [r0, #8]
 801bdda:	0a1b      	lsrs	r3, r3, #8
 801bddc:	d05e      	beq.n	801be9c <forward_relu+0x120>
 801bdde:	68d5      	ldr	r5, [r2, #12]
 801bde0:	2201      	movs	r2, #1
 801bde2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801bde6:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 801bdea:	429d      	cmp	r5, r3
 801bdec:	fb00 f202 	mul.w	r2, r0, r2
 801bdf0:	d1f9      	bne.n	801bde6 <forward_relu+0x6a>
 801bdf2:	f102 4380 	add.w	r3, r2, #1073741824	@ 0x40000000
 801bdf6:	3b01      	subs	r3, #1
 801bdf8:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801bdfc:	4294      	cmp	r4, r2
 801bdfe:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801be02:	d813      	bhi.n	801be2c <forward_relu+0xb0>
 801be04:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 801beb0 <forward_relu+0x134>
 801be08:	3204      	adds	r2, #4
 801be0a:	3104      	adds	r1, #4
 801be0c:	4613      	mov	r3, r2
 801be0e:	ed72 7a01 	vldmdb	r2!, {s15}
 801be12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801be16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be1a:	f1a3 0308 	sub.w	r3, r3, #8
 801be1e:	bfb8      	it	lt
 801be20:	eef0 7a47 	vmovlt.f32	s15, s14
 801be24:	429c      	cmp	r4, r3
 801be26:	ed61 7a01 	vstmdb	r1!, {s15}
 801be2a:	d9ef      	bls.n	801be0c <forward_relu+0x90>
 801be2c:	bc70      	pop	{r4, r5, r6}
 801be2e:	4770      	bx	lr
 801be30:	688c      	ldr	r4, [r1, #8]
 801be32:	6891      	ldr	r1, [r2, #8]
 801be34:	6880      	ldr	r0, [r0, #8]
 801be36:	0a09      	lsrs	r1, r1, #8
 801be38:	d032      	beq.n	801bea0 <forward_relu+0x124>
 801be3a:	68d5      	ldr	r5, [r2, #12]
 801be3c:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 801be40:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801be44:	4295      	cmp	r5, r2
 801be46:	fb01 f303 	mul.w	r3, r1, r3
 801be4a:	d1f9      	bne.n	801be40 <forward_relu+0xc4>
 801be4c:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 801be50:	3a01      	subs	r2, #1
 801be52:	68b1      	ldr	r1, [r6, #8]
 801be54:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801be58:	429c      	cmp	r4, r3
 801be5a:	ed91 7a00 	vldr	s14, [r1]
 801be5e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 801be62:	d8e3      	bhi.n	801be2c <forward_relu+0xb0>
 801be64:	2500      	movs	r5, #0
 801be66:	3304      	adds	r3, #4
 801be68:	1d02      	adds	r2, r0, #4
 801be6a:	ed53 7a01 	vldr	s15, [r3, #-4]
 801be6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801be72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be76:	f1a3 0104 	sub.w	r1, r3, #4
 801be7a:	f1a3 0308 	sub.w	r3, r3, #8
 801be7e:	d405      	bmi.n	801be8c <forward_relu+0x110>
 801be80:	429c      	cmp	r4, r3
 801be82:	f842 5d04 	str.w	r5, [r2, #-4]!
 801be86:	d8d1      	bhi.n	801be2c <forward_relu+0xb0>
 801be88:	460b      	mov	r3, r1
 801be8a:	e7ee      	b.n	801be6a <forward_relu+0xee>
 801be8c:	429c      	cmp	r4, r3
 801be8e:	ed62 7a01 	vstmdb	r2!, {s15}
 801be92:	d8cb      	bhi.n	801be2c <forward_relu+0xb0>
 801be94:	460b      	mov	r3, r1
 801be96:	e7e8      	b.n	801be6a <forward_relu+0xee>
 801be98:	2201      	movs	r2, #1
 801be9a:	e793      	b.n	801bdc4 <forward_relu+0x48>
 801be9c:	4622      	mov	r2, r4
 801be9e:	e7b1      	b.n	801be04 <forward_relu+0x88>
 801bea0:	68b2      	ldr	r2, [r6, #8]
 801bea2:	4623      	mov	r3, r4
 801bea4:	ed92 7a00 	vldr	s14, [r2]
 801bea8:	e7dc      	b.n	801be64 <forward_relu+0xe8>
 801beaa:	2300      	movs	r3, #0
 801beac:	685b      	ldr	r3, [r3, #4]
 801beae:	deff      	udf	#255	@ 0xff
 801beb0:	00000000 	.word	0x00000000

0801beb4 <forward_sm>:
 801beb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801beb8:	6982      	ldr	r2, [r0, #24]
 801beba:	8813      	ldrh	r3, [r2, #0]
 801bebc:	b383      	cbz	r3, 801bf20 <forward_sm+0x6c>
 801bebe:	6852      	ldr	r2, [r2, #4]
 801bec0:	6855      	ldr	r5, [r2, #4]
 801bec2:	b105      	cbz	r5, 801bec6 <forward_sm+0x12>
 801bec4:	682d      	ldr	r5, [r5, #0]
 801bec6:	2b01      	cmp	r3, #1
 801bec8:	d029      	beq.n	801bf1e <forward_sm+0x6a>
 801beca:	6913      	ldr	r3, [r2, #16]
 801becc:	b363      	cbz	r3, 801bf28 <forward_sm+0x74>
 801bece:	681e      	ldr	r6, [r3, #0]
 801bed0:	68a9      	ldr	r1, [r5, #8]
 801bed2:	68ec      	ldr	r4, [r5, #12]
 801bed4:	68f3      	ldr	r3, [r6, #12]
 801bed6:	6867      	ldr	r7, [r4, #4]
 801bed8:	685a      	ldr	r2, [r3, #4]
 801beda:	0a09      	lsrs	r1, r1, #8
 801bedc:	d022      	beq.n	801bf24 <forward_sm+0x70>
 801bede:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801bee2:	2301      	movs	r3, #1
 801bee4:	f851 0d04 	ldr.w	r0, [r1, #-4]!
 801bee8:	428c      	cmp	r4, r1
 801beea:	fb00 f303 	mul.w	r3, r0, r3
 801beee:	d1f9      	bne.n	801bee4 <forward_sm+0x30>
 801bef0:	009b      	lsls	r3, r3, #2
 801bef2:	69a8      	ldr	r0, [r5, #24]
 801bef4:	69b1      	ldr	r1, [r6, #24]
 801bef6:	6884      	ldr	r4, [r0, #8]
 801bef8:	688e      	ldr	r6, [r1, #8]
 801befa:	18e5      	adds	r5, r4, r3
 801befc:	42ac      	cmp	r4, r5
 801befe:	d20c      	bcs.n	801bf1a <forward_sm+0x66>
 801bf00:	ea4f 0882 	mov.w	r8, r2, lsl #2
 801bf04:	ea4f 0987 	mov.w	r9, r7, lsl #2
 801bf08:	4621      	mov	r1, r4
 801bf0a:	4630      	mov	r0, r6
 801bf0c:	463a      	mov	r2, r7
 801bf0e:	444c      	add	r4, r9
 801bf10:	f000 fbfa 	bl	801c708 <forward_lite_nl_softmax_if32of32_kernel>
 801bf14:	42a5      	cmp	r5, r4
 801bf16:	4446      	add	r6, r8
 801bf18:	d8f6      	bhi.n	801bf08 <forward_sm+0x54>
 801bf1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bf1e:	2300      	movs	r3, #0
 801bf20:	685b      	ldr	r3, [r3, #4]
 801bf22:	deff      	udf	#255	@ 0xff
 801bf24:	2304      	movs	r3, #4
 801bf26:	e7e4      	b.n	801bef2 <forward_sm+0x3e>
 801bf28:	68db      	ldr	r3, [r3, #12]
 801bf2a:	deff      	udf	#255	@ 0xff

0801bf2c <ai_conv2d_kernel_simple_opt_f32.constprop.0>:
 801bf2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf30:	b08d      	sub	sp, #52	@ 0x34
 801bf32:	9003      	str	r0, [sp, #12]
 801bf34:	9207      	str	r2, [sp, #28]
 801bf36:	9308      	str	r3, [sp, #32]
 801bf38:	461a      	mov	r2, r3
 801bf3a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	@ 0x64
 801bf3e:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 801bf40:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801bf42:	f8dd b06c 	ldr.w	fp, [sp, #108]	@ 0x6c
 801bf46:	910b      	str	r1, [sp, #44]	@ 0x2c
 801bf48:	fb00 f003 	mul.w	r0, r0, r3
 801bf4c:	9004      	str	r0, [sp, #16]
 801bf4e:	f8bd 0074 	ldrh.w	r0, [sp, #116]	@ 0x74
 801bf52:	9009      	str	r0, [sp, #36]	@ 0x24
 801bf54:	2d00      	cmp	r5, #0
 801bf56:	f000 80ef 	beq.w	801c138 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x20c>
 801bf5a:	fb00 f302 	mul.w	r3, r0, r2
 801bf5e:	009b      	lsls	r3, r3, #2
 801bf60:	9306      	str	r3, [sp, #24]
 801bf62:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801bf64:	fb03 f302 	mul.w	r3, r3, r2
 801bf68:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801bf6c:	9301      	str	r3, [sp, #4]
 801bf6e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801bf70:	425b      	negs	r3, r3
 801bf72:	9300      	str	r3, [sp, #0]
 801bf74:	2300      	movs	r3, #0
 801bf76:	00a4      	lsls	r4, r4, #2
 801bf78:	9302      	str	r3, [sp, #8]
 801bf7a:	0093      	lsls	r3, r2, #2
 801bf7c:	9405      	str	r4, [sp, #20]
 801bf7e:	930a      	str	r3, [sp, #40]	@ 0x28
 801bf80:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801bf82:	2b00      	cmp	r3, #0
 801bf84:	f2c0 80db 	blt.w	801c13e <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x212>
 801bf88:	9e01      	ldr	r6, [sp, #4]
 801bf8a:	9d04      	ldr	r5, [sp, #16]
 801bf8c:	2000      	movs	r0, #0
 801bf8e:	9b07      	ldr	r3, [sp, #28]
 801bf90:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801bf92:	9900      	ldr	r1, [sp, #0]
 801bf94:	fb05 3502 	mla	r5, r5, r2, r3
 801bf98:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801bf9a:	440b      	add	r3, r1
 801bf9c:	9919      	ldr	r1, [sp, #100]	@ 0x64
 801bf9e:	428b      	cmp	r3, r1
 801bfa0:	bf94      	ite	ls
 801bfa2:	ebc0 0003 	rsbls	r0, r0, r3
 801bfa6:	ebc0 0001 	rsbhi	r0, r0, r1
 801bfaa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801bfac:	eba3 0a00 	sub.w	sl, r3, r0
 801bfb0:	9b08      	ldr	r3, [sp, #32]
 801bfb2:	f1bb 0f00 	cmp.w	fp, #0
 801bfb6:	eba1 0900 	sub.w	r9, r1, r0
 801bfba:	eeb0 7a40 	vmov.f32	s14, s0
 801bfbe:	fb03 f000 	mul.w	r0, r3, r0
 801bfc2:	f340 80a1 	ble.w	801c108 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1dc>
 801bfc6:	f020 040f 	bic.w	r4, r0, #15
 801bfca:	f104 38ff 	add.w	r8, r4, #4294967295
 801bfce:	ea4f 1818 	mov.w	r8, r8, lsr #4
 801bfd2:	f108 0801 	add.w	r8, r8, #1
 801bfd6:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 801bfda:	fb02 fa0a 	mul.w	sl, r2, sl
 801bfde:	fb02 f909 	mul.w	r9, r2, r9
 801bfe2:	ea4f 1808 	mov.w	r8, r8, lsl #4
 801bfe6:	f04f 0c00 	mov.w	ip, #0
 801bfea:	2c00      	cmp	r4, #0
 801bfec:	bfd8      	it	le
 801bfee:	2700      	movle	r7, #0
 801bff0:	dd70      	ble.n	801c0d4 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1a8>
 801bff2:	f106 0240 	add.w	r2, r6, #64	@ 0x40
 801bff6:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 801bffa:	2100      	movs	r1, #0
 801bffc:	ed53 5a0f 	vldr	s11, [r3, #-60]	@ 0xffffffc4
 801c000:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 801c004:	ed12 6a10 	vldr	s12, [r2, #-64]	@ 0xffffffc0
 801c008:	ed53 6a10 	vldr	s13, [r3, #-64]	@ 0xffffffc0
 801c00c:	ed52 4a0d 	vldr	s9, [r2, #-52]	@ 0xffffffcc
 801c010:	ed12 5a0c 	vldr	s10, [r2, #-48]	@ 0xffffffd0
 801c014:	ed12 3a0a 	vldr	s6, [r2, #-40]	@ 0xffffffd8
 801c018:	ed53 3a0a 	vldr	s7, [r3, #-40]	@ 0xffffffd8
 801c01c:	ed12 4a09 	vldr	s8, [r2, #-36]	@ 0xffffffdc
 801c020:	ed12 1a06 	vldr	s2, [r2, #-24]	@ 0xffffffe8
 801c024:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 801c028:	ed12 2a05 	vldr	s4, [r2, #-20]	@ 0xffffffec
 801c02c:	ed53 2a05 	vldr	s5, [r3, #-20]	@ 0xffffffec
 801c030:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801c034:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 801c038:	eee6 7a26 	vfma.f32	s15, s12, s13
 801c03c:	3110      	adds	r1, #16
 801c03e:	42a1      	cmp	r1, r4
 801c040:	ed13 6a0e 	vldr	s12, [r3, #-56]	@ 0xffffffc8
 801c044:	ed53 6a0d 	vldr	s13, [r3, #-52]	@ 0xffffffcc
 801c048:	eee5 7a86 	vfma.f32	s15, s11, s12
 801c04c:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 801c050:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 801c054:	ed53 5a1c 	vldr	s11, [r3, #-112]	@ 0xffffff90
 801c058:	ed12 6a1b 	vldr	s12, [r2, #-108]	@ 0xffffff94
 801c05c:	eee4 7aa6 	vfma.f32	s15, s9, s13
 801c060:	ed53 6a1b 	vldr	s13, [r3, #-108]	@ 0xffffff94
 801c064:	ed53 4a19 	vldr	s9, [r3, #-100]	@ 0xffffff9c
 801c068:	eee5 7a25 	vfma.f32	s15, s10, s11
 801c06c:	ed12 5a18 	vldr	s10, [r2, #-96]	@ 0xffffffa0
 801c070:	ed53 5a18 	vldr	s11, [r3, #-96]	@ 0xffffffa0
 801c074:	eee6 7a26 	vfma.f32	s15, s12, s13
 801c078:	ed12 6a17 	vldr	s12, [r2, #-92]	@ 0xffffffa4
 801c07c:	ed53 6a17 	vldr	s13, [r3, #-92]	@ 0xffffffa4
 801c080:	eee3 7a23 	vfma.f32	s15, s6, s7
 801c084:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 801c088:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 801c08c:	eee4 7a24 	vfma.f32	s15, s8, s9
 801c090:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 801c094:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 801c098:	eee5 7a25 	vfma.f32	s15, s10, s11
 801c09c:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 801c0a0:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 801c0a4:	eee6 7a26 	vfma.f32	s15, s12, s13
 801c0a8:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 801c0ac:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 801c0b0:	eee1 7a21 	vfma.f32	s15, s2, s3
 801c0b4:	eee2 7a22 	vfma.f32	s15, s4, s5
 801c0b8:	eee3 7a23 	vfma.f32	s15, s6, s7
 801c0bc:	eee4 7a24 	vfma.f32	s15, s8, s9
 801c0c0:	eee5 7a25 	vfma.f32	s15, s10, s11
 801c0c4:	eee6 7a26 	vfma.f32	s15, s12, s13
 801c0c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 801c0cc:	db96      	blt.n	801bffc <ai_conv2d_kernel_simple_opt_f32.constprop.0+0xd0>
 801c0ce:	4476      	add	r6, lr
 801c0d0:	4475      	add	r5, lr
 801c0d2:	4647      	mov	r7, r8
 801c0d4:	42b8      	cmp	r0, r7
 801c0d6:	dd10      	ble.n	801c0fa <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1ce>
 801c0d8:	463b      	mov	r3, r7
 801c0da:	4631      	mov	r1, r6
 801c0dc:	462a      	mov	r2, r5
 801c0de:	ecf2 6a01 	vldmia	r2!, {s13}
 801c0e2:	ecf1 7a01 	vldmia	r1!, {s15}
 801c0e6:	3301      	adds	r3, #1
 801c0e8:	4298      	cmp	r0, r3
 801c0ea:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801c0ee:	d1f6      	bne.n	801c0de <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1b2>
 801c0f0:	1bc7      	subs	r7, r0, r7
 801c0f2:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 801c0f6:	eb06 0687 	add.w	r6, r6, r7, lsl #2
 801c0fa:	f10c 0c01 	add.w	ip, ip, #1
 801c0fe:	45dc      	cmp	ip, fp
 801c100:	4456      	add	r6, sl
 801c102:	444d      	add	r5, r9
 801c104:	f47f af71 	bne.w	801bfea <ai_conv2d_kernel_simple_opt_f32.constprop.0+0xbe>
 801c108:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801c10a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c10c:	9a03      	ldr	r2, [sp, #12]
 801c10e:	9b02      	ldr	r3, [sp, #8]
 801c110:	ed82 7a00 	vstr	s14, [r2]
 801c114:	4401      	add	r1, r0
 801c116:	911c      	str	r1, [sp, #112]	@ 0x70
 801c118:	9905      	ldr	r1, [sp, #20]
 801c11a:	440a      	add	r2, r1
 801c11c:	9203      	str	r2, [sp, #12]
 801c11e:	9a00      	ldr	r2, [sp, #0]
 801c120:	9906      	ldr	r1, [sp, #24]
 801c122:	1a12      	subs	r2, r2, r0
 801c124:	9200      	str	r2, [sp, #0]
 801c126:	9a01      	ldr	r2, [sp, #4]
 801c128:	440a      	add	r2, r1
 801c12a:	9201      	str	r2, [sp, #4]
 801c12c:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801c12e:	3301      	adds	r3, #1
 801c130:	4293      	cmp	r3, r2
 801c132:	9302      	str	r3, [sp, #8]
 801c134:	f47f af24 	bne.w	801bf80 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x54>
 801c138:	b00d      	add	sp, #52	@ 0x34
 801c13a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c13e:	9a00      	ldr	r2, [sp, #0]
 801c140:	9b04      	ldr	r3, [sp, #16]
 801c142:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801c144:	4610      	mov	r0, r2
 801c146:	189d      	adds	r5, r3, r2
 801c148:	e721      	b.n	801bf8e <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x62>
 801c14a:	bf00      	nop

0801c14c <forward_lite_conv2d_if32of32wf32_pool>:
 801c14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c150:	ed2d 8b04 	vpush	{d8-d9}
 801c154:	b0bd      	sub	sp, #244	@ 0xf4
 801c156:	af0a      	add	r7, sp, #40	@ 0x28
 801c158:	4696      	mov	lr, r2
 801c15a:	f9b7 b148 	ldrsh.w	fp, [r7, #328]	@ 0x148
 801c15e:	65b9      	str	r1, [r7, #88]	@ 0x58
 801c160:	f9b7 1168 	ldrsh.w	r1, [r7, #360]	@ 0x168
 801c164:	f8b7 a12c 	ldrh.w	sl, [r7, #300]	@ 0x12c
 801c168:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801c16a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801c16e:	6739      	str	r1, [r7, #112]	@ 0x70
 801c170:	fb0b f201 	mul.w	r2, fp, r1
 801c174:	469c      	mov	ip, r3
 801c176:	f9b7 1110 	ldrsh.w	r1, [r7, #272]	@ 0x110
 801c17a:	f9b7 311c 	ldrsh.w	r3, [r7, #284]	@ 0x11c
 801c17e:	f9b7 4118 	ldrsh.w	r4, [r7, #280]	@ 0x118
 801c182:	f9b7 610c 	ldrsh.w	r6, [r7, #268]	@ 0x10c
 801c186:	6138      	str	r0, [r7, #16]
 801c188:	63b9      	str	r1, [r7, #56]	@ 0x38
 801c18a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801c18e:	f9b7 1114 	ldrsh.w	r1, [r7, #276]	@ 0x114
 801c192:	f9b7 3134 	ldrsh.w	r3, [r7, #308]	@ 0x134
 801c196:	f8c7 a0b0 	str.w	sl, [r7, #176]	@ 0xb0
 801c19a:	4681      	mov	r9, r0
 801c19c:	f8b7 a130 	ldrh.w	sl, [r7, #304]	@ 0x130
 801c1a0:	f8b7 0128 	ldrh.w	r0, [r7, #296]	@ 0x128
 801c1a4:	f9b7 8108 	ldrsh.w	r8, [r7, #264]	@ 0x108
 801c1a8:	667c      	str	r4, [r7, #100]	@ 0x64
 801c1aa:	f8c7 60b8 	str.w	r6, [r7, #184]	@ 0xb8
 801c1ae:	64f9      	str	r1, [r7, #76]	@ 0x4c
 801c1b0:	637b      	str	r3, [r7, #52]	@ 0x34
 801c1b2:	f9b7 5104 	ldrsh.w	r5, [r7, #260]	@ 0x104
 801c1b6:	f9b7 1120 	ldrsh.w	r1, [r7, #288]	@ 0x120
 801c1ba:	f8b7 4124 	ldrh.w	r4, [r7, #292]	@ 0x124
 801c1be:	f9b7 314c 	ldrsh.w	r3, [r7, #332]	@ 0x14c
 801c1c2:	f8c7 a05c 	str.w	sl, [r7, #92]	@ 0x5c
 801c1c6:	f9b7 a164 	ldrsh.w	sl, [r7, #356]	@ 0x164
 801c1ca:	f8c7 a048 	str.w	sl, [r7, #72]	@ 0x48
 801c1ce:	4246      	negs	r6, r0
 801c1d0:	f9b7 a16c 	ldrsh.w	sl, [r7, #364]	@ 0x16c
 801c1d4:	f8c7 a044 	str.w	sl, [r7, #68]	@ 0x44
 801c1d8:	f8c7 60a0 	str.w	r6, [r7, #160]	@ 0xa0
 801c1dc:	f9b7 a170 	ldrsh.w	sl, [r7, #368]	@ 0x170
 801c1e0:	6e7e      	ldr	r6, [r7, #100]	@ 0x64
 801c1e2:	f8c7 a06c 	str.w	sl, [r7, #108]	@ 0x6c
 801c1e6:	f9b7 a174 	ldrsh.w	sl, [r7, #372]	@ 0x174
 801c1ea:	f8c7 a040 	str.w	sl, [r7, #64]	@ 0x40
 801c1ee:	2e00      	cmp	r6, #0
 801c1f0:	f9b7 a178 	ldrsh.w	sl, [r7, #376]	@ 0x178
 801c1f4:	f8c7 a0bc 	str.w	sl, [r7, #188]	@ 0xbc
 801c1f8:	fb08 f202 	mul.w	r2, r8, r2
 801c1fc:	f340 80d0 	ble.w	801c3a0 <forward_lite_conv2d_if32of32wf32_pool+0x254>
 801c200:	f8d7 60b4 	ldr.w	r6, [r7, #180]	@ 0xb4
 801c204:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
 801c208:	fb06 f101 	mul.w	r1, r6, r1
 801c20c:	6efe      	ldr	r6, [r7, #108]	@ 0x6c
 801c20e:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 801c210:	ed9f 8abf 	vldr	s16, [pc, #764]	@ 801c510 <forward_lite_conv2d_if32of32wf32_pool+0x3c4>
 801c214:	fb05 fa01 	mul.w	sl, r5, r1
 801c218:	fb06 f108 	mul.w	r1, r6, r8
 801c21c:	4264      	negs	r4, r4
 801c21e:	fb0b f101 	mul.w	r1, fp, r1
 801c222:	f8c7 40ac 	str.w	r4, [r7, #172]	@ 0xac
 801c226:	008c      	lsls	r4, r1, #2
 801c228:	f8d7 60b8 	ldr.w	r6, [r7, #184]	@ 0xb8
 801c22c:	627c      	str	r4, [r7, #36]	@ 0x24
 801c22e:	4654      	mov	r4, sl
 801c230:	00a1      	lsls	r1, r4, #2
 801c232:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 801c236:	fb00 f106 	mul.w	r1, r0, r6
 801c23a:	fb05 f101 	mul.w	r1, r5, r1
 801c23e:	0088      	lsls	r0, r1, #2
 801c240:	ee09 5a10 	vmov	s18, r5
 801c244:	fb05 f106 	mul.w	r1, r5, r6
 801c248:	f8d7 50a0 	ldr.w	r5, [r7, #160]	@ 0xa0
 801c24c:	6578      	str	r0, [r7, #84]	@ 0x54
 801c24e:	fb05 f101 	mul.w	r1, r5, r1
 801c252:	eb09 0081 	add.w	r0, r9, r1, lsl #2
 801c256:	f8d7 5100 	ldr.w	r5, [r7, #256]	@ 0x100
 801c25a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801c25c:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
 801c260:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 801c264:	0090      	lsls	r0, r2, #2
 801c266:	fb08 f201 	mul.w	r2, r8, r1
 801c26a:	0092      	lsls	r2, r2, #2
 801c26c:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 801c270:	63fa      	str	r2, [r7, #60]	@ 0x3c
 801c272:	3b01      	subs	r3, #1
 801c274:	2200      	movs	r2, #0
 801c276:	b29b      	uxth	r3, r3
 801c278:	663a      	str	r2, [r7, #96]	@ 0x60
 801c27a:	1dca      	adds	r2, r1, #7
 801c27c:	f022 0107 	bic.w	r1, r2, #7
 801c280:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801c284:	fa1f f388 	uxth.w	r3, r8
 801c288:	61b9      	str	r1, [r7, #24]
 801c28a:	ee08 3a90 	vmov	s17, r3
 801c28e:	fb08 f10b 	mul.w	r1, r8, fp
 801c292:	3b01      	subs	r3, #1
 801c294:	62b9      	str	r1, [r7, #40]	@ 0x28
 801c296:	b29b      	uxth	r3, r3
 801c298:	4671      	mov	r1, lr
 801c29a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801c29e:	3301      	adds	r3, #1
 801c2a0:	f10e 4e78 	add.w	lr, lr, #4160749568	@ 0xf8000000
 801c2a4:	6179      	str	r1, [r7, #20]
 801c2a6:	0099      	lsls	r1, r3, #2
 801c2a8:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 801c2ac:	f8d7 60bc 	ldr.w	r6, [r7, #188]	@ 0xbc
 801c2b0:	60f8      	str	r0, [r7, #12]
 801c2b2:	f8c7 e030 	str.w	lr, [r7, #48]	@ 0x30
 801c2b6:	60bb      	str	r3, [r7, #8]
 801c2b8:	ea4f 0e88 	mov.w	lr, r8, lsl #2
 801c2bc:	4240      	negs	r0, r0
 801c2be:	2200      	movs	r2, #0
 801c2c0:	1e6b      	subs	r3, r5, #1
 801c2c2:	f8c7 a07c 	str.w	sl, [r7, #124]	@ 0x7c
 801c2c6:	f8d7 9100 	ldr.w	r9, [r7, #256]	@ 0x100
 801c2ca:	f8d7 a154 	ldr.w	sl, [r7, #340]	@ 0x154
 801c2ce:	f8c7 509c 	str.w	r5, [r7, #156]	@ 0x9c
 801c2d2:	f8c7 e094 	str.w	lr, [r7, #148]	@ 0x94
 801c2d6:	66b8      	str	r0, [r7, #104]	@ 0x68
 801c2d8:	6239      	str	r1, [r7, #32]
 801c2da:	653e      	str	r6, [r7, #80]	@ 0x50
 801c2dc:	67ba      	str	r2, [r7, #120]	@ 0x78
 801c2de:	607b      	str	r3, [r7, #4]
 801c2e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801c2e4:	3301      	adds	r3, #1
 801c2e6:	b21b      	sxth	r3, r3
 801c2e8:	2b00      	cmp	r3, #0
 801c2ea:	f300 8081 	bgt.w	801c3f0 <forward_lite_conv2d_if32of32wf32_pool+0x2a4>
 801c2ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801c2f2:	041b      	lsls	r3, r3, #16
 801c2f4:	f100 810e 	bmi.w	801c514 <forward_lite_conv2d_if32of32wf32_pool+0x3c8>
 801c2f8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801c2fa:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 801c2fe:	428a      	cmp	r2, r1
 801c300:	dc54      	bgt.n	801c3ac <forward_lite_conv2d_if32of32wf32_pool+0x260>
 801c302:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801c304:	9008      	str	r0, [sp, #32]
 801c306:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801c308:	3301      	adds	r3, #1
 801c30a:	b21c      	sxth	r4, r3
 801c30c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c30e:	67bc      	str	r4, [r7, #120]	@ 0x78
 801c310:	18c3      	adds	r3, r0, r3
 801c312:	65bb      	str	r3, [r7, #88]	@ 0x58
 801c314:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 801c316:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c31a:	4403      	add	r3, r0
 801c31c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801c320:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801c324:	1a1b      	subs	r3, r3, r0
 801c326:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801c32a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801c32c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801c330:	b292      	uxth	r2, r2
 801c332:	4403      	add	r3, r0
 801c334:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801c338:	9201      	str	r2, [sp, #4]
 801c33a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801c33c:	1ad2      	subs	r2, r2, r3
 801c33e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 801c342:	9305      	str	r3, [sp, #20]
 801c344:	6d3e      	ldr	r6, [r7, #80]	@ 0x50
 801c346:	1ac9      	subs	r1, r1, r3
 801c348:	b20b      	sxth	r3, r1
 801c34a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801c34e:	b2b3      	uxth	r3, r6
 801c350:	9303      	str	r3, [sp, #12]
 801c352:	2301      	movs	r3, #1
 801c354:	9307      	str	r3, [sp, #28]
 801c356:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 801c35a:	9306      	str	r3, [sp, #24]
 801c35c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801c360:	9304      	str	r3, [sp, #16]
 801c362:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801c366:	9302      	str	r3, [sp, #8]
 801c368:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 801c36c:	9300      	str	r3, [sp, #0]
 801c36e:	b292      	uxth	r2, r2
 801c370:	ee18 3a90 	vmov	r3, s17
 801c374:	f8d7 0100 	ldr.w	r0, [r7, #256]	@ 0x100
 801c378:	f8d7 5160 	ldr.w	r5, [r7, #352]	@ 0x160
 801c37c:	fa1f f18b 	uxth.w	r1, fp
 801c380:	47a8      	blx	r5
 801c382:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801c384:	1ab3      	subs	r3, r6, r2
 801c386:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801c38a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c38e:	b21b      	sxth	r3, r3
 801c390:	3a01      	subs	r2, #1
 801c392:	653b      	str	r3, [r7, #80]	@ 0x50
 801c394:	b293      	uxth	r3, r2
 801c396:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801c39a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801c39c:	42a3      	cmp	r3, r4
 801c39e:	dc9f      	bgt.n	801c2e0 <forward_lite_conv2d_if32of32wf32_pool+0x194>
 801c3a0:	37cc      	adds	r7, #204	@ 0xcc
 801c3a2:	46bd      	mov	sp, r7
 801c3a4:	ecbd 8b04 	vpop	{d8-d9}
 801c3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c3ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801c3b0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 801c3b4:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 801c3b6:	3b01      	subs	r3, #1
 801c3b8:	b29b      	uxth	r3, r3
 801c3ba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801c3be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801c3c2:	440a      	add	r2, r1
 801c3c4:	1a5b      	subs	r3, r3, r1
 801c3c6:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 801c3ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801c3ce:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801c3d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801c3d4:	4413      	add	r3, r2
 801c3d6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801c3da:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801c3dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801c3de:	4293      	cmp	r3, r2
 801c3e0:	ddde      	ble.n	801c3a0 <forward_lite_conv2d_if32of32wf32_pool+0x254>
 801c3e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801c3e6:	3301      	adds	r3, #1
 801c3e8:	b21b      	sxth	r3, r3
 801c3ea:	2b00      	cmp	r3, #0
 801c3ec:	f77f af7f 	ble.w	801c2ee <forward_lite_conv2d_if32of32wf32_pool+0x1a2>
 801c3f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c3f4:	2b00      	cmp	r3, #0
 801c3f6:	f2c0 813c 	blt.w	801c672 <forward_lite_conv2d_if32of32wf32_pool+0x526>
 801c3fa:	2300      	movs	r3, #0
 801c3fc:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 801c400:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801c404:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 801c408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c40a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801c40c:	4413      	add	r3, r2
 801c40e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 801c412:	4283      	cmp	r3, r0
 801c414:	bfd4      	ite	le
 801c416:	ebc2 0203 	rsble	r2, r2, r3
 801c41a:	ebc2 0200 	rsbgt	r2, r2, r0
 801c41e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c420:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 801c424:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801c428:	f080 80b5 	bcs.w	801c596 <forward_lite_conv2d_if32of32wf32_pool+0x44a>
 801c42c:	f1b8 0f00 	cmp.w	r8, #0
 801c430:	dd38      	ble.n	801c4a4 <forward_lite_conv2d_if32of32wf32_pool+0x358>
 801c432:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801c436:	2b00      	cmp	r3, #0
 801c438:	f000 812f 	beq.w	801c69a <forward_lite_conv2d_if32of32wf32_pool+0x54e>
 801c43c:	461d      	mov	r5, r3
 801c43e:	464e      	mov	r6, r9
 801c440:	f8c7 a088 	str.w	sl, [r7, #136]	@ 0x88
 801c444:	f8c7 9074 	str.w	r9, [r7, #116]	@ 0x74
 801c448:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
 801c44a:	f8d7 a008 	ldr.w	sl, [r7, #8]
 801c44e:	f8d7 9080 	ldr.w	r9, [r7, #128]	@ 0x80
 801c452:	ee19 3a10 	vmov	r3, s18
 801c456:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801c45a:	ecb5 0a01 	vldmia	r5!, {s0}
 801c45e:	9207      	str	r2, [sp, #28]
 801c460:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 801c464:	9206      	str	r2, [sp, #24]
 801c466:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801c46a:	9205      	str	r2, [sp, #20]
 801c46c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 801c470:	9204      	str	r2, [sp, #16]
 801c472:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801c476:	e9cd b202 	strd	fp, r2, [sp, #8]
 801c47a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 801c47e:	4630      	mov	r0, r6
 801c480:	e9cd 8200 	strd	r8, r2, [sp]
 801c484:	e9c7 3123 	strd	r3, r1, [r7, #140]	@ 0x8c
 801c488:	4622      	mov	r2, r4
 801c48a:	f7ff fd4f 	bl	801bf2c <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 801c48e:	45aa      	cmp	sl, r5
 801c490:	e9d7 3123 	ldrd	r3, r1, [r7, #140]	@ 0x8c
 801c494:	444c      	add	r4, r9
 801c496:	f106 0604 	add.w	r6, r6, #4
 801c49a:	d1dc      	bne.n	801c456 <forward_lite_conv2d_if32of32wf32_pool+0x30a>
 801c49c:	f8d7 a088 	ldr.w	sl, [r7, #136]	@ 0x88
 801c4a0:	f8d7 9074 	ldr.w	r9, [r7, #116]	@ 0x74
 801c4a4:	f1bb 0f00 	cmp.w	fp, #0
 801c4a8:	dd2b      	ble.n	801c502 <forward_lite_conv2d_if32of32wf32_pool+0x3b6>
 801c4aa:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 801c4ae:	2b00      	cmp	r3, #0
 801c4b0:	f000 80e5 	beq.w	801c67e <forward_lite_conv2d_if32of32wf32_pool+0x532>
 801c4b4:	464e      	mov	r6, r9
 801c4b6:	f8d7 9158 	ldr.w	r9, [r7, #344]	@ 0x158
 801c4ba:	2400      	movs	r4, #0
 801c4bc:	4653      	mov	r3, sl
 801c4be:	4631      	mov	r1, r6
 801c4c0:	4642      	mov	r2, r8
 801c4c2:	4630      	mov	r0, r6
 801c4c4:	f8d7 5150 	ldr.w	r5, [r7, #336]	@ 0x150
 801c4c8:	47a8      	blx	r5
 801c4ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801c4ce:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 801c4d2:	f8d7 1154 	ldr.w	r1, [r7, #340]	@ 0x154
 801c4d6:	4416      	add	r6, r2
 801c4d8:	44ca      	add	sl, r9
 801c4da:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 801c4de:	ebaa 0303 	sub.w	r3, sl, r3
 801c4e2:	4293      	cmp	r3, r2
 801c4e4:	bfa8      	it	ge
 801c4e6:	468a      	movge	sl, r1
 801c4e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801c4ec:	429e      	cmp	r6, r3
 801c4ee:	bf28      	it	cs
 801c4f0:	6ebb      	ldrcs	r3, [r7, #104]	@ 0x68
 801c4f2:	f104 0401 	add.w	r4, r4, #1
 801c4f6:	b224      	sxth	r4, r4
 801c4f8:	bf28      	it	cs
 801c4fa:	18f6      	addcs	r6, r6, r3
 801c4fc:	45a3      	cmp	fp, r4
 801c4fe:	d1dd      	bne.n	801c4bc <forward_lite_conv2d_if32of32wf32_pool+0x370>
 801c500:	46b1      	mov	r9, r6
 801c502:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801c506:	3301      	adds	r3, #1
 801c508:	b21b      	sxth	r3, r3
 801c50a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801c50e:	e6f3      	b.n	801c2f8 <forward_lite_conv2d_if32of32wf32_pool+0x1ac>
 801c510:	00000000 	.word	0x00000000
 801c514:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c516:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801c51a:	fb02 f303 	mul.w	r3, r2, r3
 801c51e:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 801c522:	eba9 0383 	sub.w	r3, r9, r3, lsl #2
 801c526:	429a      	cmp	r2, r3
 801c528:	bf84      	itt	hi
 801c52a:	68fa      	ldrhi	r2, [r7, #12]
 801c52c:	189b      	addhi	r3, r3, r2
 801c52e:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 801c532:	429a      	cmp	r2, r3
 801c534:	d216      	bcs.n	801c564 <forward_lite_conv2d_if32of32wf32_pool+0x418>
 801c536:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801c538:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 801c53c:	428a      	cmp	r2, r1
 801c53e:	d011      	beq.n	801c564 <forward_lite_conv2d_if32of32wf32_pool+0x418>
 801c540:	f8d7 409c 	ldr.w	r4, [r7, #156]	@ 0x9c
 801c544:	429c      	cmp	r4, r3
 801c546:	d90d      	bls.n	801c564 <forward_lite_conv2d_if32of32wf32_pool+0x418>
 801c548:	4649      	mov	r1, r9
 801c54a:	461a      	mov	r2, r3
 801c54c:	f852 0b04 	ldr.w	r0, [r2], #4
 801c550:	f841 0b04 	str.w	r0, [r1], #4
 801c554:	4294      	cmp	r4, r2
 801c556:	d8f9      	bhi.n	801c54c <forward_lite_conv2d_if32of32wf32_pool+0x400>
 801c558:	687a      	ldr	r2, [r7, #4]
 801c55a:	1ad3      	subs	r3, r2, r3
 801c55c:	f023 0303 	bic.w	r3, r3, #3
 801c560:	3304      	adds	r3, #4
 801c562:	4499      	add	r9, r3
 801c564:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801c566:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 801c568:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	@ 0xbc
 801c56c:	440a      	add	r2, r1
 801c56e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 801c570:	1ad2      	subs	r2, r2, r3
 801c572:	b212      	sxth	r2, r2
 801c574:	440b      	add	r3, r1
 801c576:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801c578:	663a      	str	r2, [r7, #96]	@ 0x60
 801c57a:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 801c57e:	4489      	add	r9, r1
 801c580:	b21b      	sxth	r3, r3
 801c582:	454a      	cmp	r2, r9
 801c584:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801c588:	f63f aeb6 	bhi.w	801c2f8 <forward_lite_conv2d_if32of32wf32_pool+0x1ac>
 801c58c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801c58e:	4499      	add	r9, r3
 801c590:	454a      	cmp	r2, r9
 801c592:	d9fc      	bls.n	801c58e <forward_lite_conv2d_if32of32wf32_pool+0x442>
 801c594:	e6b0      	b.n	801c2f8 <forward_lite_conv2d_if32of32wf32_pool+0x1ac>
 801c596:	466b      	mov	r3, sp
 801c598:	ee00 3a90 	vmov	s1, r3
 801c59c:	69bb      	ldr	r3, [r7, #24]
 801c59e:	f1b8 0f00 	cmp.w	r8, #0
 801c5a2:	ebad 0d03 	sub.w	sp, sp, r3
 801c5a6:	aa0a      	add	r2, sp, #40	@ 0x28
 801c5a8:	dd44      	ble.n	801c634 <forward_lite_conv2d_if32of32wf32_pool+0x4e8>
 801c5aa:	6a3b      	ldr	r3, [r7, #32]
 801c5ac:	f8c7 901c 	str.w	r9, [r7, #28]
 801c5b0:	444b      	add	r3, r9
 801c5b2:	677b      	str	r3, [r7, #116]	@ 0x74
 801c5b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c5b6:	697c      	ldr	r4, [r7, #20]
 801c5b8:	f8d7 5084 	ldr.w	r5, [r7, #132]	@ 0x84
 801c5bc:	464e      	mov	r6, r9
 801c5be:	4699      	mov	r9, r3
 801c5c0:	ee19 3a10 	vmov	r3, s18
 801c5c4:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 801c5c6:	b138      	cbz	r0, 801c5d8 <forward_lite_conv2d_if32of32wf32_pool+0x48c>
 801c5c8:	4648      	mov	r0, r9
 801c5ca:	4694      	mov	ip, r2
 801c5cc:	f850 eb04 	ldr.w	lr, [r0], #4
 801c5d0:	f84c eb04 	str.w	lr, [ip], #4
 801c5d4:	4284      	cmp	r4, r0
 801c5d6:	d1f9      	bne.n	801c5cc <forward_lite_conv2d_if32of32wf32_pool+0x480>
 801c5d8:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 801c5dc:	b370      	cbz	r0, 801c63c <forward_lite_conv2d_if32of32wf32_pool+0x4f0>
 801c5de:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 801c5e2:	ecb5 0a01 	vldmia	r5!, {s0}
 801c5e6:	4481      	add	r9, r0
 801c5e8:	4404      	add	r4, r0
 801c5ea:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 801c5ee:	9007      	str	r0, [sp, #28]
 801c5f0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 801c5f4:	9006      	str	r0, [sp, #24]
 801c5f6:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 801c5fa:	9005      	str	r0, [sp, #20]
 801c5fc:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 801c600:	9004      	str	r0, [sp, #16]
 801c602:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 801c606:	e9cd b002 	strd	fp, r0, [sp, #8]
 801c60a:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 801c60e:	e9cd 8000 	strd	r8, r0, [sp]
 801c612:	e9c7 3222 	strd	r3, r2, [r7, #136]	@ 0x88
 801c616:	4630      	mov	r0, r6
 801c618:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 801c61c:	f7ff fc86 	bl	801bf2c <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 801c620:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801c622:	3604      	adds	r6, #4
 801c624:	429e      	cmp	r6, r3
 801c626:	e9d7 2123 	ldrd	r2, r1, [r7, #140]	@ 0x8c
 801c62a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801c62e:	d1c9      	bne.n	801c5c4 <forward_lite_conv2d_if32of32wf32_pool+0x478>
 801c630:	f8d7 901c 	ldr.w	r9, [r7, #28]
 801c634:	ee10 3a90 	vmov	r3, s1
 801c638:	469d      	mov	sp, r3
 801c63a:	e733      	b.n	801c4a4 <forward_lite_conv2d_if32of32wf32_pool+0x358>
 801c63c:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 801c640:	9007      	str	r0, [sp, #28]
 801c642:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 801c646:	9006      	str	r0, [sp, #24]
 801c648:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 801c64c:	9005      	str	r0, [sp, #20]
 801c64e:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 801c652:	9004      	str	r0, [sp, #16]
 801c654:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 801c658:	e9cd b002 	strd	fp, r0, [sp, #8]
 801c65c:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 801c660:	e9cd 8000 	strd	r8, r0, [sp]
 801c664:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 801c668:	eeb0 0a48 	vmov.f32	s0, s16
 801c66c:	4481      	add	r9, r0
 801c66e:	4404      	add	r4, r0
 801c670:	e7cf      	b.n	801c612 <forward_lite_conv2d_if32of32wf32_pool+0x4c6>
 801c672:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801c676:	6939      	ldr	r1, [r7, #16]
 801c678:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801c67c:	e6c2      	b.n	801c404 <forward_lite_conv2d_if32of32wf32_pool+0x2b8>
 801c67e:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 801c682:	6ebc      	ldr	r4, [r7, #104]	@ 0x68
 801c684:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 801c688:	4489      	add	r9, r1
 801c68a:	3301      	adds	r3, #1
 801c68c:	4548      	cmp	r0, r9
 801c68e:	b21a      	sxth	r2, r3
 801c690:	bf98      	it	ls
 801c692:	44a1      	addls	r9, r4
 801c694:	455a      	cmp	r2, fp
 801c696:	dbf7      	blt.n	801c688 <forward_lite_conv2d_if32of32wf32_pool+0x53c>
 801c698:	e733      	b.n	801c502 <forward_lite_conv2d_if32of32wf32_pool+0x3b6>
 801c69a:	6a3b      	ldr	r3, [r7, #32]
 801c69c:	f8c7 9088 	str.w	r9, [r7, #136]	@ 0x88
 801c6a0:	eb09 0603 	add.w	r6, r9, r3
 801c6a4:	464c      	mov	r4, r9
 801c6a6:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 801c6a8:	f8d7 9080 	ldr.w	r9, [r7, #128]	@ 0x80
 801c6ac:	f8c7 a08c 	str.w	sl, [r7, #140]	@ 0x8c
 801c6b0:	ee19 3a10 	vmov	r3, s18
 801c6b4:	46b2      	mov	sl, r6
 801c6b6:	4616      	mov	r6, r2
 801c6b8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801c6bc:	9207      	str	r2, [sp, #28]
 801c6be:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 801c6c2:	e9cd 6205 	strd	r6, r2, [sp, #20]
 801c6c6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 801c6ca:	9204      	str	r2, [sp, #16]
 801c6cc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801c6d0:	e9cd b202 	strd	fp, r2, [sp, #8]
 801c6d4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 801c6d8:	4620      	mov	r0, r4
 801c6da:	e9cd 8200 	strd	r8, r2, [sp]
 801c6de:	eeb0 0a48 	vmov.f32	s0, s16
 801c6e2:	462a      	mov	r2, r5
 801c6e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801c6e8:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 801c6ec:	3404      	adds	r4, #4
 801c6ee:	f7ff fc1d 	bl	801bf2c <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 801c6f2:	45a2      	cmp	sl, r4
 801c6f4:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 801c6f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801c6fc:	444d      	add	r5, r9
 801c6fe:	d1db      	bne.n	801c6b8 <forward_lite_conv2d_if32of32wf32_pool+0x56c>
 801c700:	e9d7 9a22 	ldrd	r9, sl, [r7, #136]	@ 0x88
 801c704:	e6ce      	b.n	801c4a4 <forward_lite_conv2d_if32of32wf32_pool+0x358>
 801c706:	bf00      	nop

0801c708 <forward_lite_nl_softmax_if32of32_kernel>:
 801c708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c70c:	2a01      	cmp	r2, #1
 801c70e:	ed2d 8b02 	vpush	{d8}
 801c712:	4617      	mov	r7, r2
 801c714:	ed91 8a00 	vldr	s16, [r1]
 801c718:	d937      	bls.n	801c78a <forward_lite_nl_softmax_if32of32_kernel+0x82>
 801c71a:	1d0b      	adds	r3, r1, #4
 801c71c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801c720:	ecf3 7a01 	vldmia	r3!, {s15}
 801c724:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801c728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c72c:	bfb8      	it	lt
 801c72e:	eeb0 8a67 	vmovlt.f32	s16, s15
 801c732:	429a      	cmp	r2, r3
 801c734:	d1f4      	bne.n	801c720 <forward_lite_nl_softmax_if32of32_kernel+0x18>
 801c736:	eddf 8a18 	vldr	s17, [pc, #96]	@ 801c798 <forward_lite_nl_softmax_if32of32_kernel+0x90>
 801c73a:	4606      	mov	r6, r0
 801c73c:	460d      	mov	r5, r1
 801c73e:	4680      	mov	r8, r0
 801c740:	2400      	movs	r4, #0
 801c742:	ecb5 0a01 	vldmia	r5!, {s0}
 801c746:	ee30 0a48 	vsub.f32	s0, s0, s16
 801c74a:	f00a fa41 	bl	8026bd0 <expf>
 801c74e:	3401      	adds	r4, #1
 801c750:	42a7      	cmp	r7, r4
 801c752:	ee78 8a80 	vadd.f32	s17, s17, s0
 801c756:	eca8 0a01 	vstmia	r8!, {s0}
 801c75a:	d8f2      	bhi.n	801c742 <forward_lite_nl_softmax_if32of32_kernel+0x3a>
 801c75c:	eef5 8a40 	vcmp.f32	s17, #0.0
 801c760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c764:	d00d      	beq.n	801c782 <forward_lite_nl_softmax_if32of32_kernel+0x7a>
 801c766:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801c76a:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 801c76e:	2300      	movs	r3, #0
 801c770:	3301      	adds	r3, #1
 801c772:	429f      	cmp	r7, r3
 801c774:	edd6 7a00 	vldr	s15, [r6]
 801c778:	ee67 7a87 	vmul.f32	s15, s15, s14
 801c77c:	ece6 7a01 	vstmia	r6!, {s15}
 801c780:	d8f6      	bhi.n	801c770 <forward_lite_nl_softmax_if32of32_kernel+0x68>
 801c782:	ecbd 8b02 	vpop	{d8}
 801c786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c78a:	2a00      	cmp	r2, #0
 801c78c:	d1d3      	bne.n	801c736 <forward_lite_nl_softmax_if32of32_kernel+0x2e>
 801c78e:	ecbd 8b02 	vpop	{d8}
 801c792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c796:	bf00      	nop
 801c798:	00000000 	.word	0x00000000

0801c79c <forward_lite_nl_relu_generic_if32of32_kernel>:
 801c79c:	edd3 6a02 	vldr	s13, [r3, #8]
 801c7a0:	ed93 7a00 	vldr	s14, [r3]
 801c7a4:	ed93 6a01 	vldr	s12, [r3, #4]
 801c7a8:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801c7ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c7b0:	d42a      	bmi.n	801c808 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 801c7b2:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 801c7b6:	3a01      	subs	r2, #1
 801c7b8:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 801c7bc:	4561      	cmp	r1, ip
 801c7be:	ea4f 0282 	mov.w	r2, r2, lsl #2
 801c7c2:	d85d      	bhi.n	801c880 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 801c7c4:	1d11      	adds	r1, r2, #4
 801c7c6:	f10c 0304 	add.w	r3, ip, #4
 801c7ca:	4408      	add	r0, r1
 801c7cc:	ebac 0202 	sub.w	r2, ip, r2
 801c7d0:	e00c      	b.n	801c7ec <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 801c7d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c7d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c7da:	ee77 5ac7 	vsub.f32	s11, s15, s14
 801c7de:	db01      	blt.n	801c7e4 <forward_lite_nl_relu_generic_if32of32_kernel+0x48>
 801c7e0:	ee65 7a86 	vmul.f32	s15, s11, s12
 801c7e4:	4293      	cmp	r3, r2
 801c7e6:	ed60 7a01 	vstmdb	r0!, {s15}
 801c7ea:	d00c      	beq.n	801c806 <forward_lite_nl_relu_generic_if32of32_kernel+0x6a>
 801c7ec:	ed73 7a01 	vldmdb	r3!, {s15}
 801c7f0:	eef4 6ae7 	vcmpe.f32	s13, s15
 801c7f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c7f8:	daeb      	bge.n	801c7d2 <forward_lite_nl_relu_generic_if32of32_kernel+0x36>
 801c7fa:	eef0 7a66 	vmov.f32	s15, s13
 801c7fe:	4293      	cmp	r3, r2
 801c800:	ed60 7a01 	vstmdb	r0!, {s15}
 801c804:	d1f2      	bne.n	801c7ec <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 801c806:	4770      	bx	lr
 801c808:	eeb5 6a40 	vcmp.f32	s12, #0.0
 801c80c:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 801c810:	3a01      	subs	r2, #1
 801c812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c816:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 801c81a:	ea4f 0282 	mov.w	r2, r2, lsl #2
 801c81e:	d017      	beq.n	801c850 <forward_lite_nl_relu_generic_if32of32_kernel+0xb4>
 801c820:	4561      	cmp	r1, ip
 801c822:	d82d      	bhi.n	801c880 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 801c824:	1d11      	adds	r1, r2, #4
 801c826:	f10c 0304 	add.w	r3, ip, #4
 801c82a:	4401      	add	r1, r0
 801c82c:	ebac 0202 	sub.w	r2, ip, r2
 801c830:	ed73 7a01 	vldmdb	r3!, {s15}
 801c834:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801c838:	eef4 7ac7 	vcmpe.f32	s15, s14
 801c83c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c840:	ee66 6a86 	vmul.f32	s13, s13, s12
 801c844:	d81d      	bhi.n	801c882 <forward_lite_nl_relu_generic_if32of32_kernel+0xe6>
 801c846:	4293      	cmp	r3, r2
 801c848:	ed61 6a01 	vstmdb	r1!, {s13}
 801c84c:	d1f0      	bne.n	801c830 <forward_lite_nl_relu_generic_if32of32_kernel+0x94>
 801c84e:	4770      	bx	lr
 801c850:	4561      	cmp	r1, ip
 801c852:	d815      	bhi.n	801c880 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 801c854:	1d11      	adds	r1, r2, #4
 801c856:	b500      	push	{lr}
 801c858:	f10c 0304 	add.w	r3, ip, #4
 801c85c:	f04f 0e00 	mov.w	lr, #0
 801c860:	4401      	add	r1, r0
 801c862:	ebac 0202 	sub.w	r2, ip, r2
 801c866:	ed73 7a01 	vldmdb	r3!, {s15}
 801c86a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c86e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c872:	d40b      	bmi.n	801c88c <forward_lite_nl_relu_generic_if32of32_kernel+0xf0>
 801c874:	4293      	cmp	r3, r2
 801c876:	f841 ed04 	str.w	lr, [r1, #-4]!
 801c87a:	d1f4      	bne.n	801c866 <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 801c87c:	f85d fb04 	ldr.w	pc, [sp], #4
 801c880:	4770      	bx	lr
 801c882:	4293      	cmp	r3, r2
 801c884:	ed61 7a01 	vstmdb	r1!, {s15}
 801c888:	d1d2      	bne.n	801c830 <forward_lite_nl_relu_generic_if32of32_kernel+0x94>
 801c88a:	4770      	bx	lr
 801c88c:	4293      	cmp	r3, r2
 801c88e:	ed61 7a01 	vstmdb	r1!, {s15}
 801c892:	d1e8      	bne.n	801c866 <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 801c894:	e7f2      	b.n	801c87c <forward_lite_nl_relu_generic_if32of32_kernel+0xe0>
 801c896:	bf00      	nop

0801c898 <pool_func_mp_array_f32>:
 801c898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c89c:	b093      	sub	sp, #76	@ 0x4c
 801c89e:	468b      	mov	fp, r1
 801c8a0:	f8bd 1074 	ldrh.w	r1, [sp, #116]	@ 0x74
 801c8a4:	9101      	str	r1, [sp, #4]
 801c8a6:	f8bd 1080 	ldrh.w	r1, [sp, #128]	@ 0x80
 801c8aa:	9105      	str	r1, [sp, #20]
 801c8ac:	4691      	mov	r9, r2
 801c8ae:	f8bd 1084 	ldrh.w	r1, [sp, #132]	@ 0x84
 801c8b2:	f8bd 207c 	ldrh.w	r2, [sp, #124]	@ 0x7c
 801c8b6:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 801c8ba:	9106      	str	r1, [sp, #24]
 801c8bc:	4698      	mov	r8, r3
 801c8be:	f8bd 3078 	ldrh.w	r3, [sp, #120]	@ 0x78
 801c8c2:	f8bd 1088 	ldrh.w	r1, [sp, #136]	@ 0x88
 801c8c6:	9404      	str	r4, [sp, #16]
 801c8c8:	9102      	str	r1, [sp, #8]
 801c8ca:	ea52 0403 	orrs.w	r4, r2, r3
 801c8ce:	f8bd 108c 	ldrh.w	r1, [sp, #140]	@ 0x8c
 801c8d2:	9103      	str	r1, [sp, #12]
 801c8d4:	4682      	mov	sl, r0
 801c8d6:	d10b      	bne.n	801c8f0 <pool_func_mp_array_f32+0x58>
 801c8d8:	9904      	ldr	r1, [sp, #16]
 801c8da:	9d02      	ldr	r5, [sp, #8]
 801c8dc:	9e05      	ldr	r6, [sp, #20]
 801c8de:	eba1 000b 	sub.w	r0, r1, fp
 801c8e2:	3801      	subs	r0, #1
 801c8e4:	1e69      	subs	r1, r5, #1
 801c8e6:	fb11 0106 	smlabb	r1, r1, r6, r0
 801c8ea:	0408      	lsls	r0, r1, #16
 801c8ec:	f100 8083 	bmi.w	801c9f6 <pool_func_mp_array_f32+0x15e>
 801c8f0:	9903      	ldr	r1, [sp, #12]
 801c8f2:	2900      	cmp	r1, #0
 801c8f4:	d07c      	beq.n	801c9f0 <pool_func_mp_array_f32+0x158>
 801c8f6:	9902      	ldr	r1, [sp, #8]
 801c8f8:	2900      	cmp	r1, #0
 801c8fa:	d079      	beq.n	801c9f0 <pool_func_mp_array_f32+0x158>
 801c8fc:	f1b8 0f00 	cmp.w	r8, #0
 801c900:	d076      	beq.n	801c9f0 <pool_func_mp_array_f32+0x158>
 801c902:	f1b8 0f01 	cmp.w	r8, #1
 801c906:	9901      	ldr	r1, [sp, #4]
 801c908:	f040 80e3 	bne.w	801cad2 <pool_func_mp_array_f32+0x23a>
 801c90c:	1a8a      	subs	r2, r1, r2
 801c90e:	9904      	ldr	r1, [sp, #16]
 801c910:	1ac9      	subs	r1, r1, r3
 801c912:	425b      	negs	r3, r3
 801c914:	b292      	uxth	r2, r2
 801c916:	b29b      	uxth	r3, r3
 801c918:	9207      	str	r2, [sp, #28]
 801c91a:	930c      	str	r3, [sp, #48]	@ 0x30
 801c91c:	b28a      	uxth	r2, r1
 801c91e:	2300      	movs	r3, #0
 801c920:	920b      	str	r2, [sp, #44]	@ 0x2c
 801c922:	9308      	str	r3, [sp, #32]
 801c924:	9a02      	ldr	r2, [sp, #8]
 801c926:	fb02 f303 	mul.w	r3, r2, r3
 801c92a:	9309      	str	r3, [sp, #36]	@ 0x24
 801c92c:	9a07      	ldr	r2, [sp, #28]
 801c92e:	9b01      	ldr	r3, [sp, #4]
 801c930:	1ad3      	subs	r3, r2, r3
 801c932:	b21b      	sxth	r3, r3
 801c934:	930a      	str	r3, [sp, #40]	@ 0x28
 801c936:	e9dd 830b 	ldrd	r8, r3, [sp, #44]	@ 0x2c
 801c93a:	f04f 0c00 	mov.w	ip, #0
 801c93e:	9304      	str	r3, [sp, #16]
 801c940:	b217      	sxth	r7, r2
 801c942:	46e6      	mov	lr, ip
 801c944:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801c946:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c948:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
 801c94c:	eddf 7aac 	vldr	s15, [pc, #688]	@ 801cc00 <pool_func_mp_array_f32+0x368>
 801c950:	428f      	cmp	r7, r1
 801c952:	449e      	add	lr, r3
 801c954:	fa0f f088 	sxth.w	r0, r8
 801c958:	dd28      	ble.n	801c9ac <pool_func_mp_array_f32+0x114>
 801c95a:	ea00 75e0 	and.w	r5, r0, r0, asr #31
 801c95e:	4286      	cmp	r6, r0
 801c960:	da20      	bge.n	801c9a4 <pool_func_mp_array_f32+0x10c>
 801c962:	2900      	cmp	r1, #0
 801c964:	fb0b f401 	mul.w	r4, fp, r1
 801c968:	db1c      	blt.n	801c9a4 <pool_func_mp_array_f32+0x10c>
 801c96a:	4549      	cmp	r1, r9
 801c96c:	da1a      	bge.n	801c9a4 <pool_func_mp_array_f32+0x10c>
 801c96e:	2e00      	cmp	r6, #0
 801c970:	4633      	mov	r3, r6
 801c972:	da05      	bge.n	801c980 <pool_func_mp_array_f32+0xe8>
 801c974:	3301      	adds	r3, #1
 801c976:	b21b      	sxth	r3, r3
 801c978:	429d      	cmp	r5, r3
 801c97a:	dcfb      	bgt.n	801c974 <pool_func_mp_array_f32+0xdc>
 801c97c:	4283      	cmp	r3, r0
 801c97e:	da11      	bge.n	801c9a4 <pool_func_mp_array_f32+0x10c>
 801c980:	18e2      	adds	r2, r4, r3
 801c982:	459b      	cmp	fp, r3
 801c984:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 801c988:	dd08      	ble.n	801c99c <pool_func_mp_array_f32+0x104>
 801c98a:	ed92 7a00 	vldr	s14, [r2]
 801c98e:	eef4 7ac7 	vcmpe.f32	s15, s14
 801c992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c996:	bfb8      	it	lt
 801c998:	eef0 7a47 	vmovlt.f32	s15, s14
 801c99c:	3301      	adds	r3, #1
 801c99e:	b21b      	sxth	r3, r3
 801c9a0:	4283      	cmp	r3, r0
 801c9a2:	dbed      	blt.n	801c980 <pool_func_mp_array_f32+0xe8>
 801c9a4:	3101      	adds	r1, #1
 801c9a6:	b209      	sxth	r1, r1
 801c9a8:	42b9      	cmp	r1, r7
 801c9aa:	dbd8      	blt.n	801c95e <pool_func_mp_array_f32+0xc6>
 801c9ac:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c9ae:	9a05      	ldr	r2, [sp, #20]
 801c9b0:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 801c9b4:	9b04      	ldr	r3, [sp, #16]
 801c9b6:	edce 7a00 	vstr	s15, [lr]
 801c9ba:	4413      	add	r3, r2
 801c9bc:	b29b      	uxth	r3, r3
 801c9be:	f10c 0c01 	add.w	ip, ip, #1
 801c9c2:	9304      	str	r3, [sp, #16]
 801c9c4:	9b02      	ldr	r3, [sp, #8]
 801c9c6:	fa0f fc8c 	sxth.w	ip, ip
 801c9ca:	4490      	add	r8, r2
 801c9cc:	4563      	cmp	r3, ip
 801c9ce:	fa1f f888 	uxth.w	r8, r8
 801c9d2:	46e6      	mov	lr, ip
 801c9d4:	dcb6      	bgt.n	801c944 <pool_func_mp_array_f32+0xac>
 801c9d6:	9b08      	ldr	r3, [sp, #32]
 801c9d8:	3301      	adds	r3, #1
 801c9da:	b21a      	sxth	r2, r3
 801c9dc:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 801c9e0:	440b      	add	r3, r1
 801c9e2:	9903      	ldr	r1, [sp, #12]
 801c9e4:	9208      	str	r2, [sp, #32]
 801c9e6:	b29b      	uxth	r3, r3
 801c9e8:	4291      	cmp	r1, r2
 801c9ea:	9307      	str	r3, [sp, #28]
 801c9ec:	4613      	mov	r3, r2
 801c9ee:	dc99      	bgt.n	801c924 <pool_func_mp_array_f32+0x8c>
 801c9f0:	b013      	add	sp, #76	@ 0x4c
 801c9f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c9f6:	9901      	ldr	r1, [sp, #4]
 801c9f8:	9e03      	ldr	r6, [sp, #12]
 801c9fa:	9f06      	ldr	r7, [sp, #24]
 801c9fc:	eba1 0009 	sub.w	r0, r1, r9
 801ca00:	3801      	subs	r0, #1
 801ca02:	1e71      	subs	r1, r6, #1
 801ca04:	fb11 0107 	smlabb	r1, r1, r7, r0
 801ca08:	0409      	lsls	r1, r1, #16
 801ca0a:	f57f af71 	bpl.w	801c8f0 <pool_func_mp_array_f32+0x58>
 801ca0e:	2e00      	cmp	r6, #0
 801ca10:	d0ee      	beq.n	801c9f0 <pool_func_mp_array_f32+0x158>
 801ca12:	2d00      	cmp	r5, #0
 801ca14:	d0ec      	beq.n	801c9f0 <pool_func_mp_array_f32+0x158>
 801ca16:	f1b8 0f00 	cmp.w	r8, #0
 801ca1a:	d0e9      	beq.n	801c9f0 <pool_func_mp_array_f32+0x158>
 801ca1c:	f1b8 0f01 	cmp.w	r8, #1
 801ca20:	f040 80f0 	bne.w	801cc04 <pool_func_mp_array_f32+0x36c>
 801ca24:	46a1      	mov	r9, r4
 801ca26:	9407      	str	r4, [sp, #28]
 801ca28:	46a0      	mov	r8, r4
 801ca2a:	9b02      	ldr	r3, [sp, #8]
 801ca2c:	f8dd e010 	ldr.w	lr, [sp, #16]
 801ca30:	fb03 f308 	mul.w	r3, r3, r8
 801ca34:	2600      	movs	r6, #0
 801ca36:	9309      	str	r3, [sp, #36]	@ 0x24
 801ca38:	f9bd 8004 	ldrsh.w	r8, [sp, #4]
 801ca3c:	fa0f f389 	sxth.w	r3, r9
 801ca40:	9308      	str	r3, [sp, #32]
 801ca42:	46b4      	mov	ip, r6
 801ca44:	4637      	mov	r7, r6
 801ca46:	9c08      	ldr	r4, [sp, #32]
 801ca48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ca4a:	eddf 7a6d 	vldr	s15, [pc, #436]	@ 801cc00 <pool_func_mp_array_f32+0x368>
 801ca4e:	4544      	cmp	r4, r8
 801ca50:	441f      	add	r7, r3
 801ca52:	b235      	sxth	r5, r6
 801ca54:	fa0f f08e 	sxth.w	r0, lr
 801ca58:	da17      	bge.n	801ca8a <pool_func_mp_array_f32+0x1f2>
 801ca5a:	4285      	cmp	r5, r0
 801ca5c:	da11      	bge.n	801ca82 <pool_func_mp_array_f32+0x1ea>
 801ca5e:	fb04 520b 	mla	r2, r4, fp, r5
 801ca62:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 801ca66:	462b      	mov	r3, r5
 801ca68:	ecb2 7a01 	vldmia	r2!, {s14}
 801ca6c:	3301      	adds	r3, #1
 801ca6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ca72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca76:	b219      	sxth	r1, r3
 801ca78:	bfb8      	it	lt
 801ca7a:	eef0 7a47 	vmovlt.f32	s15, s14
 801ca7e:	4281      	cmp	r1, r0
 801ca80:	dbf2      	blt.n	801ca68 <pool_func_mp_array_f32+0x1d0>
 801ca82:	3401      	adds	r4, #1
 801ca84:	b224      	sxth	r4, r4
 801ca86:	4544      	cmp	r4, r8
 801ca88:	dbe7      	blt.n	801ca5a <pool_func_mp_array_f32+0x1c2>
 801ca8a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ca8c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801ca90:	9b05      	ldr	r3, [sp, #20]
 801ca92:	edc7 7a00 	vstr	s15, [r7]
 801ca96:	449e      	add	lr, r3
 801ca98:	441e      	add	r6, r3
 801ca9a:	f10c 0c01 	add.w	ip, ip, #1
 801ca9e:	9b02      	ldr	r3, [sp, #8]
 801caa0:	fa0f fc8c 	sxth.w	ip, ip
 801caa4:	4563      	cmp	r3, ip
 801caa6:	fa1f fe8e 	uxth.w	lr, lr
 801caaa:	b2b6      	uxth	r6, r6
 801caac:	4667      	mov	r7, ip
 801caae:	dcca      	bgt.n	801ca46 <pool_func_mp_array_f32+0x1ae>
 801cab0:	9b07      	ldr	r3, [sp, #28]
 801cab2:	9906      	ldr	r1, [sp, #24]
 801cab4:	3301      	adds	r3, #1
 801cab6:	b21a      	sxth	r2, r3
 801cab8:	9b01      	ldr	r3, [sp, #4]
 801caba:	9207      	str	r2, [sp, #28]
 801cabc:	440b      	add	r3, r1
 801cabe:	b29b      	uxth	r3, r3
 801cac0:	9301      	str	r3, [sp, #4]
 801cac2:	9b03      	ldr	r3, [sp, #12]
 801cac4:	4489      	add	r9, r1
 801cac6:	4293      	cmp	r3, r2
 801cac8:	fa1f f989 	uxth.w	r9, r9
 801cacc:	4690      	mov	r8, r2
 801cace:	dcac      	bgt.n	801ca2a <pool_func_mp_array_f32+0x192>
 801cad0:	e78e      	b.n	801c9f0 <pool_func_mp_array_f32+0x158>
 801cad2:	1a88      	subs	r0, r1, r2
 801cad4:	9904      	ldr	r1, [sp, #16]
 801cad6:	f8cd 9038 	str.w	r9, [sp, #56]	@ 0x38
 801cada:	1ac9      	subs	r1, r1, r3
 801cadc:	4252      	negs	r2, r2
 801cade:	425b      	negs	r3, r3
 801cae0:	b292      	uxth	r2, r2
 801cae2:	b29b      	uxth	r3, r3
 801cae4:	b280      	uxth	r0, r0
 801cae6:	9208      	str	r2, [sp, #32]
 801cae8:	9311      	str	r3, [sp, #68]	@ 0x44
 801caea:	b28a      	uxth	r2, r1
 801caec:	2300      	movs	r3, #0
 801caee:	9007      	str	r0, [sp, #28]
 801caf0:	9210      	str	r2, [sp, #64]	@ 0x40
 801caf2:	930c      	str	r3, [sp, #48]	@ 0x30
 801caf4:	9a02      	ldr	r2, [sp, #8]
 801caf6:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 801cafa:	fb03 f302 	mul.w	r3, r3, r2
 801cafe:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801cb02:	920b      	str	r2, [sp, #44]	@ 0x2c
 801cb04:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801cb06:	930f      	str	r3, [sp, #60]	@ 0x3c
 801cb08:	9201      	str	r2, [sp, #4]
 801cb0a:	2300      	movs	r3, #0
 801cb0c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801cb0e:	930d      	str	r3, [sp, #52]	@ 0x34
 801cb10:	9204      	str	r2, [sp, #16]
 801cb12:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801cb14:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 801cb18:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 801cb1c:	4413      	add	r3, r2
 801cb1e:	fb08 f303 	mul.w	r3, r8, r3
 801cb22:	f04f 0e00 	mov.w	lr, #0
 801cb26:	930a      	str	r3, [sp, #40]	@ 0x28
 801cb28:	4676      	mov	r6, lr
 801cb2a:	ea04 77e4 	and.w	r7, r4, r4, asr #31
 801cb2e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801cb30:	eddf 7a33 	vldr	s15, [pc, #204]	@ 801cc00 <pool_func_mp_array_f32+0x368>
 801cb34:	4549      	cmp	r1, r9
 801cb36:	da2f      	bge.n	801cb98 <pool_func_mp_array_f32+0x300>
 801cb38:	f8cd e024 	str.w	lr, [sp, #36]	@ 0x24
 801cb3c:	f8dd e038 	ldr.w	lr, [sp, #56]	@ 0x38
 801cb40:	45a4      	cmp	ip, r4
 801cb42:	da23      	bge.n	801cb8c <pool_func_mp_array_f32+0x2f4>
 801cb44:	2900      	cmp	r1, #0
 801cb46:	fb0b f501 	mul.w	r5, fp, r1
 801cb4a:	db1f      	blt.n	801cb8c <pool_func_mp_array_f32+0x2f4>
 801cb4c:	4571      	cmp	r1, lr
 801cb4e:	da1d      	bge.n	801cb8c <pool_func_mp_array_f32+0x2f4>
 801cb50:	f1bc 0f00 	cmp.w	ip, #0
 801cb54:	4663      	mov	r3, ip
 801cb56:	da05      	bge.n	801cb64 <pool_func_mp_array_f32+0x2cc>
 801cb58:	3301      	adds	r3, #1
 801cb5a:	b21b      	sxth	r3, r3
 801cb5c:	429f      	cmp	r7, r3
 801cb5e:	dcfb      	bgt.n	801cb58 <pool_func_mp_array_f32+0x2c0>
 801cb60:	42a3      	cmp	r3, r4
 801cb62:	da13      	bge.n	801cb8c <pool_func_mp_array_f32+0x2f4>
 801cb64:	18ea      	adds	r2, r5, r3
 801cb66:	fb08 6202 	mla	r2, r8, r2, r6
 801cb6a:	1c58      	adds	r0, r3, #1
 801cb6c:	459b      	cmp	fp, r3
 801cb6e:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 801cb72:	b203      	sxth	r3, r0
 801cb74:	dd08      	ble.n	801cb88 <pool_func_mp_array_f32+0x2f0>
 801cb76:	ed92 7a00 	vldr	s14, [r2]
 801cb7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801cb7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb82:	bfb8      	it	lt
 801cb84:	eef0 7a47 	vmovlt.f32	s15, s14
 801cb88:	42a3      	cmp	r3, r4
 801cb8a:	dbeb      	blt.n	801cb64 <pool_func_mp_array_f32+0x2cc>
 801cb8c:	3101      	adds	r1, #1
 801cb8e:	b209      	sxth	r1, r1
 801cb90:	4549      	cmp	r1, r9
 801cb92:	dbd5      	blt.n	801cb40 <pool_func_mp_array_f32+0x2a8>
 801cb94:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 801cb98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cb9a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801cb9c:	f10e 0e01 	add.w	lr, lr, #1
 801cba0:	4433      	add	r3, r6
 801cba2:	fa0f fe8e 	sxth.w	lr, lr
 801cba6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801cbaa:	45c6      	cmp	lr, r8
 801cbac:	edc3 7a00 	vstr	s15, [r3]
 801cbb0:	4676      	mov	r6, lr
 801cbb2:	dbbc      	blt.n	801cb2e <pool_func_mp_array_f32+0x296>
 801cbb4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801cbb6:	9a01      	ldr	r2, [sp, #4]
 801cbb8:	9805      	ldr	r0, [sp, #20]
 801cbba:	3301      	adds	r3, #1
 801cbbc:	4402      	add	r2, r0
 801cbbe:	b219      	sxth	r1, r3
 801cbc0:	b292      	uxth	r2, r2
 801cbc2:	9b04      	ldr	r3, [sp, #16]
 801cbc4:	9201      	str	r2, [sp, #4]
 801cbc6:	9a02      	ldr	r2, [sp, #8]
 801cbc8:	910d      	str	r1, [sp, #52]	@ 0x34
 801cbca:	4403      	add	r3, r0
 801cbcc:	b29b      	uxth	r3, r3
 801cbce:	428a      	cmp	r2, r1
 801cbd0:	9304      	str	r3, [sp, #16]
 801cbd2:	460b      	mov	r3, r1
 801cbd4:	dc9d      	bgt.n	801cb12 <pool_func_mp_array_f32+0x27a>
 801cbd6:	e9dd 0206 	ldrd	r0, r2, [sp, #24]
 801cbda:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801cbdc:	4402      	add	r2, r0
 801cbde:	3301      	adds	r3, #1
 801cbe0:	b219      	sxth	r1, r3
 801cbe2:	b292      	uxth	r2, r2
 801cbe4:	9b08      	ldr	r3, [sp, #32]
 801cbe6:	9207      	str	r2, [sp, #28]
 801cbe8:	9a03      	ldr	r2, [sp, #12]
 801cbea:	910c      	str	r1, [sp, #48]	@ 0x30
 801cbec:	4403      	add	r3, r0
 801cbee:	b29b      	uxth	r3, r3
 801cbf0:	428a      	cmp	r2, r1
 801cbf2:	9308      	str	r3, [sp, #32]
 801cbf4:	460b      	mov	r3, r1
 801cbf6:	f73f af7d 	bgt.w	801caf4 <pool_func_mp_array_f32+0x25c>
 801cbfa:	b013      	add	sp, #76	@ 0x4c
 801cbfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc00:	cf000000 	.word	0xcf000000
 801cc04:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801cc08:	46a4      	mov	ip, r4
 801cc0a:	ea4f 0988 	mov.w	r9, r8, lsl #2
 801cc0e:	9407      	str	r4, [sp, #28]
 801cc10:	4623      	mov	r3, r4
 801cc12:	9a02      	ldr	r2, [sp, #8]
 801cc14:	f8dd e010 	ldr.w	lr, [sp, #16]
 801cc18:	fb03 f302 	mul.w	r3, r3, r2
 801cc1c:	930a      	str	r3, [sp, #40]	@ 0x28
 801cc1e:	fa0f f38c 	sxth.w	r3, ip
 801cc22:	2400      	movs	r4, #0
 801cc24:	930b      	str	r3, [sp, #44]	@ 0x2c
 801cc26:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801cc2a:	9308      	str	r3, [sp, #32]
 801cc2c:	4627      	mov	r7, r4
 801cc2e:	4623      	mov	r3, r4
 801cc30:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801cc32:	4413      	add	r3, r2
 801cc34:	fb08 f303 	mul.w	r3, r8, r3
 801cc38:	2600      	movs	r6, #0
 801cc3a:	9309      	str	r3, [sp, #36]	@ 0x24
 801cc3c:	fa0f fb84 	sxth.w	fp, r4
 801cc40:	fa0f f08e 	sxth.w	r0, lr
 801cc44:	4635      	mov	r5, r6
 801cc46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cc48:	9a08      	ldr	r2, [sp, #32]
 801cc4a:	ed5f 7a13 	vldr	s15, [pc, #-76]	@ 801cc00 <pool_func_mp_array_f32+0x368>
 801cc4e:	4293      	cmp	r3, r2
 801cc50:	da20      	bge.n	801cc94 <pool_func_mp_array_f32+0x3fc>
 801cc52:	469a      	mov	sl, r3
 801cc54:	4583      	cmp	fp, r0
 801cc56:	da16      	bge.n	801cc86 <pool_func_mp_array_f32+0x3ee>
 801cc58:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801cc5a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801cc5c:	fb03 b30a 	mla	r3, r3, sl, fp
 801cc60:	fb08 5303 	mla	r3, r8, r3, r5
 801cc64:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801cc68:	465a      	mov	r2, fp
 801cc6a:	ed93 7a00 	vldr	s14, [r3]
 801cc6e:	3201      	adds	r2, #1
 801cc70:	eef4 7ac7 	vcmpe.f32	s15, s14
 801cc74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc78:	b211      	sxth	r1, r2
 801cc7a:	bfb8      	it	lt
 801cc7c:	eef0 7a47 	vmovlt.f32	s15, s14
 801cc80:	4281      	cmp	r1, r0
 801cc82:	444b      	add	r3, r9
 801cc84:	dbf1      	blt.n	801cc6a <pool_func_mp_array_f32+0x3d2>
 801cc86:	9b08      	ldr	r3, [sp, #32]
 801cc88:	f10a 0a01 	add.w	sl, sl, #1
 801cc8c:	fa0f fa8a 	sxth.w	sl, sl
 801cc90:	459a      	cmp	sl, r3
 801cc92:	dbdf      	blt.n	801cc54 <pool_func_mp_array_f32+0x3bc>
 801cc94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cc96:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801cc98:	3601      	adds	r6, #1
 801cc9a:	442b      	add	r3, r5
 801cc9c:	b236      	sxth	r6, r6
 801cc9e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801cca2:	4546      	cmp	r6, r8
 801cca4:	edc3 7a00 	vstr	s15, [r3]
 801cca8:	4635      	mov	r5, r6
 801ccaa:	dbcc      	blt.n	801cc46 <pool_func_mp_array_f32+0x3ae>
 801ccac:	9b05      	ldr	r3, [sp, #20]
 801ccae:	9a02      	ldr	r2, [sp, #8]
 801ccb0:	3701      	adds	r7, #1
 801ccb2:	b23f      	sxth	r7, r7
 801ccb4:	449e      	add	lr, r3
 801ccb6:	441c      	add	r4, r3
 801ccb8:	42ba      	cmp	r2, r7
 801ccba:	fa1f fe8e 	uxth.w	lr, lr
 801ccbe:	b2a4      	uxth	r4, r4
 801ccc0:	463b      	mov	r3, r7
 801ccc2:	dcb5      	bgt.n	801cc30 <pool_func_mp_array_f32+0x398>
 801ccc4:	9b07      	ldr	r3, [sp, #28]
 801ccc6:	9906      	ldr	r1, [sp, #24]
 801ccc8:	3301      	adds	r3, #1
 801ccca:	b21a      	sxth	r2, r3
 801cccc:	9b01      	ldr	r3, [sp, #4]
 801ccce:	9207      	str	r2, [sp, #28]
 801ccd0:	440b      	add	r3, r1
 801ccd2:	448c      	add	ip, r1
 801ccd4:	9903      	ldr	r1, [sp, #12]
 801ccd6:	b29b      	uxth	r3, r3
 801ccd8:	4291      	cmp	r1, r2
 801ccda:	9301      	str	r3, [sp, #4]
 801ccdc:	fa1f fc8c 	uxth.w	ip, ip
 801cce0:	4613      	mov	r3, r2
 801cce2:	dc96      	bgt.n	801cc12 <pool_func_mp_array_f32+0x37a>
 801cce4:	e684      	b.n	801c9f0 <pool_func_mp_array_f32+0x158>
 801cce6:	bf00      	nop

0801cce8 <forward_lite_dense_if32of32wf32>:
 801cce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ccec:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 801ccf0:	6801      	ldr	r1, [r0, #0]
 801ccf2:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801ccf6:	fb02 f303 	mul.w	r3, r2, r3
 801ccfa:	b083      	sub	sp, #12
 801ccfc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801cd00:	4299      	cmp	r1, r3
 801cd02:	9100      	str	r1, [sp, #0]
 801cd04:	9301      	str	r3, [sp, #4]
 801cd06:	f080 811e 	bcs.w	801cf46 <forward_lite_dense_if32of32wf32+0x25e>
 801cd0a:	6904      	ldr	r4, [r0, #16]
 801cd0c:	4607      	mov	r7, r0
 801cd0e:	0096      	lsls	r6, r2, #2
 801cd10:	9b00      	ldr	r3, [sp, #0]
 801cd12:	68bd      	ldr	r5, [r7, #8]
 801cd14:	eb03 0e06 	add.w	lr, r3, r6
 801cd18:	459e      	cmp	lr, r3
 801cd1a:	461e      	mov	r6, r3
 801cd1c:	f240 8104 	bls.w	801cf28 <forward_lite_dense_if32of32wf32+0x240>
 801cd20:	f1a4 0c10 	sub.w	ip, r4, #16
 801cd24:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 801cd28:	f10c 0c01 	add.w	ip, ip, #1
 801cd2c:	ea4f 1b8c 	mov.w	fp, ip, lsl #6
 801cd30:	ea4f 0984 	mov.w	r9, r4, lsl #2
 801cd34:	eb08 1c8c 	add.w	ip, r8, ip, lsl #6
 801cd38:	2c0f      	cmp	r4, #15
 801cd3a:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 801cf98 <forward_lite_dense_if32of32wf32+0x2b0>
 801cd3e:	f240 8105 	bls.w	801cf4c <forward_lite_dense_if32of32wf32+0x264>
 801cd42:	f108 0240 	add.w	r2, r8, #64	@ 0x40
 801cd46:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 801cd4a:	4621      	mov	r1, r4
 801cd4c:	ed53 5a0f 	vldr	s11, [r3, #-60]	@ 0xffffffc4
 801cd50:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 801cd54:	ed12 6a10 	vldr	s12, [r2, #-64]	@ 0xffffffc0
 801cd58:	ed53 6a10 	vldr	s13, [r3, #-64]	@ 0xffffffc0
 801cd5c:	ed52 4a0d 	vldr	s9, [r2, #-52]	@ 0xffffffcc
 801cd60:	ed12 5a0c 	vldr	s10, [r2, #-48]	@ 0xffffffd0
 801cd64:	ed12 3a0a 	vldr	s6, [r2, #-40]	@ 0xffffffd8
 801cd68:	ed53 3a0a 	vldr	s7, [r3, #-40]	@ 0xffffffd8
 801cd6c:	ed12 4a09 	vldr	s8, [r2, #-36]	@ 0xffffffdc
 801cd70:	ed12 1a06 	vldr	s2, [r2, #-24]	@ 0xffffffe8
 801cd74:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 801cd78:	ed12 2a05 	vldr	s4, [r2, #-20]	@ 0xffffffec
 801cd7c:	ed53 2a05 	vldr	s5, [r3, #-20]	@ 0xffffffec
 801cd80:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801cd84:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 801cd88:	eee6 7a26 	vfma.f32	s15, s12, s13
 801cd8c:	3910      	subs	r1, #16
 801cd8e:	290f      	cmp	r1, #15
 801cd90:	ed13 6a0e 	vldr	s12, [r3, #-56]	@ 0xffffffc8
 801cd94:	ed53 6a0d 	vldr	s13, [r3, #-52]	@ 0xffffffcc
 801cd98:	eee5 7a86 	vfma.f32	s15, s11, s12
 801cd9c:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 801cda0:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 801cda4:	ed53 5a1c 	vldr	s11, [r3, #-112]	@ 0xffffff90
 801cda8:	ed12 6a1b 	vldr	s12, [r2, #-108]	@ 0xffffff94
 801cdac:	eee4 7aa6 	vfma.f32	s15, s9, s13
 801cdb0:	ed53 6a1b 	vldr	s13, [r3, #-108]	@ 0xffffff94
 801cdb4:	ed53 4a19 	vldr	s9, [r3, #-100]	@ 0xffffff9c
 801cdb8:	eee5 7a25 	vfma.f32	s15, s10, s11
 801cdbc:	ed12 5a18 	vldr	s10, [r2, #-96]	@ 0xffffffa0
 801cdc0:	ed53 5a18 	vldr	s11, [r3, #-96]	@ 0xffffffa0
 801cdc4:	eee6 7a26 	vfma.f32	s15, s12, s13
 801cdc8:	ed12 6a17 	vldr	s12, [r2, #-92]	@ 0xffffffa4
 801cdcc:	ed53 6a17 	vldr	s13, [r3, #-92]	@ 0xffffffa4
 801cdd0:	eee3 7a23 	vfma.f32	s15, s6, s7
 801cdd4:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 801cdd8:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 801cddc:	eee4 7a24 	vfma.f32	s15, s8, s9
 801cde0:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 801cde4:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 801cde8:	eee5 7a25 	vfma.f32	s15, s10, s11
 801cdec:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 801cdf0:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 801cdf4:	eee6 7a26 	vfma.f32	s15, s12, s13
 801cdf8:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 801cdfc:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 801ce00:	eee1 7a21 	vfma.f32	s15, s2, s3
 801ce04:	eee2 7a22 	vfma.f32	s15, s4, s5
 801ce08:	eee3 7a23 	vfma.f32	s15, s6, s7
 801ce0c:	eee4 7a24 	vfma.f32	s15, s8, s9
 801ce10:	eee5 7a25 	vfma.f32	s15, s10, s11
 801ce14:	eee6 7a26 	vfma.f32	s15, s12, s13
 801ce18:	ee37 7a27 	vadd.f32	s14, s14, s15
 801ce1c:	d896      	bhi.n	801cd4c <forward_lite_dense_if32of32wf32+0x64>
 801ce1e:	eb05 020b 	add.w	r2, r5, fp
 801ce22:	f004 010f 	and.w	r1, r4, #15
 801ce26:	4663      	mov	r3, ip
 801ce28:	2903      	cmp	r1, #3
 801ce2a:	d95f      	bls.n	801ceec <forward_lite_dense_if32of32wf32+0x204>
 801ce2c:	edd2 6a01 	vldr	s13, [r2, #4]
 801ce30:	edd3 7a01 	vldr	s15, [r3, #4]
 801ce34:	ed93 6a00 	vldr	s12, [r3]
 801ce38:	ed93 5a02 	vldr	s10, [r3, #8]
 801ce3c:	edd2 5a02 	vldr	s11, [r2, #8]
 801ce40:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ce44:	edd2 6a00 	vldr	s13, [r2]
 801ce48:	eee6 7a26 	vfma.f32	s15, s12, s13
 801ce4c:	1f08      	subs	r0, r1, #4
 801ce4e:	2803      	cmp	r0, #3
 801ce50:	ed93 6a03 	vldr	s12, [r3, #12]
 801ce54:	edd2 6a03 	vldr	s13, [r2, #12]
 801ce58:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ce5c:	eee5 7a25 	vfma.f32	s15, s10, s11
 801ce60:	eee6 7a26 	vfma.f32	s15, s12, s13
 801ce64:	eeb0 7a67 	vmov.f32	s14, s15
 801ce68:	d938      	bls.n	801cedc <forward_lite_dense_if32of32wf32+0x1f4>
 801ce6a:	edd2 6a05 	vldr	s13, [r2, #20]
 801ce6e:	edd3 7a05 	vldr	s15, [r3, #20]
 801ce72:	ed93 6a04 	vldr	s12, [r3, #16]
 801ce76:	ed93 5a06 	vldr	s10, [r3, #24]
 801ce7a:	edd2 5a06 	vldr	s11, [r2, #24]
 801ce7e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ce82:	edd2 6a04 	vldr	s13, [r2, #16]
 801ce86:	eee6 7a26 	vfma.f32	s15, s12, s13
 801ce8a:	f1a1 0a08 	sub.w	sl, r1, #8
 801ce8e:	f1ba 0f03 	cmp.w	sl, #3
 801ce92:	ed93 6a07 	vldr	s12, [r3, #28]
 801ce96:	edd2 6a07 	vldr	s13, [r2, #28]
 801ce9a:	eee5 7a25 	vfma.f32	s15, s10, s11
 801ce9e:	eee6 7a26 	vfma.f32	s15, s12, s13
 801cea2:	ee37 7a27 	vadd.f32	s14, s14, s15
 801cea6:	d919      	bls.n	801cedc <forward_lite_dense_if32of32wf32+0x1f4>
 801cea8:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 801ceac:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 801ceb0:	ed92 6a08 	vldr	s12, [r2, #32]
 801ceb4:	ed92 5a0a 	vldr	s10, [r2, #40]	@ 0x28
 801ceb8:	edd3 5a0a 	vldr	s11, [r3, #40]	@ 0x28
 801cebc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801cec0:	edd3 6a08 	vldr	s13, [r3, #32]
 801cec4:	eee6 7a26 	vfma.f32	s15, s12, s13
 801cec8:	ed92 6a0b 	vldr	s12, [r2, #44]	@ 0x2c
 801cecc:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 801ced0:	eee5 7a25 	vfma.f32	s15, s10, s11
 801ced4:	eee6 7a26 	vfma.f32	s15, s12, s13
 801ced8:	ee37 7a27 	vadd.f32	s14, s14, s15
 801cedc:	0880      	lsrs	r0, r0, #2
 801cede:	3001      	adds	r0, #1
 801cee0:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 801cee4:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 801cee8:	f001 0103 	and.w	r1, r1, #3
 801ceec:	b1a9      	cbz	r1, 801cf1a <forward_lite_dense_if32of32wf32+0x232>
 801ceee:	edd3 6a00 	vldr	s13, [r3]
 801cef2:	edd2 7a00 	vldr	s15, [r2]
 801cef6:	3901      	subs	r1, #1
 801cef8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801cefc:	d00d      	beq.n	801cf1a <forward_lite_dense_if32of32wf32+0x232>
 801cefe:	edd3 6a01 	vldr	s13, [r3, #4]
 801cf02:	edd2 7a01 	vldr	s15, [r2, #4]
 801cf06:	2901      	cmp	r1, #1
 801cf08:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801cf0c:	d005      	beq.n	801cf1a <forward_lite_dense_if32of32wf32+0x232>
 801cf0e:	edd2 6a02 	vldr	s13, [r2, #8]
 801cf12:	edd3 7a02 	vldr	s15, [r3, #8]
 801cf16:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801cf1a:	444d      	add	r5, r9
 801cf1c:	eca6 7a01 	vstmia	r6!, {s14}
 801cf20:	45b6      	cmp	lr, r6
 801cf22:	f63f af09 	bhi.w	801cd38 <forward_lite_dense_if32of32wf32+0x50>
 801cf26:	697a      	ldr	r2, [r7, #20]
 801cf28:	68fb      	ldr	r3, [r7, #12]
 801cf2a:	b99b      	cbnz	r3, 801cf54 <forward_lite_dense_if32of32wf32+0x26c>
 801cf2c:	9b00      	ldr	r3, [sp, #0]
 801cf2e:	9901      	ldr	r1, [sp, #4]
 801cf30:	693c      	ldr	r4, [r7, #16]
 801cf32:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801cf36:	4299      	cmp	r1, r3
 801cf38:	9300      	str	r3, [sp, #0]
 801cf3a:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 801cf3e:	ea4f 0682 	mov.w	r6, r2, lsl #2
 801cf42:	f63f aee5 	bhi.w	801cd10 <forward_lite_dense_if32of32wf32+0x28>
 801cf46:	b003      	add	sp, #12
 801cf48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf4c:	4621      	mov	r1, r4
 801cf4e:	462a      	mov	r2, r5
 801cf50:	4643      	mov	r3, r8
 801cf52:	e769      	b.n	801ce28 <forward_lite_dense_if32of32wf32+0x140>
 801cf54:	2a00      	cmp	r2, #0
 801cf56:	d0e9      	beq.n	801cf2c <forward_lite_dense_if32of32wf32+0x244>
 801cf58:	9a00      	ldr	r2, [sp, #0]
 801cf5a:	ed93 7a00 	vldr	s14, [r3]
 801cf5e:	edd2 7a00 	vldr	s15, [r2]
 801cf62:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cf66:	4613      	mov	r3, r2
 801cf68:	edc2 7a00 	vstr	s15, [r2]
 801cf6c:	697a      	ldr	r2, [r7, #20]
 801cf6e:	2a01      	cmp	r2, #1
 801cf70:	d9dc      	bls.n	801cf2c <forward_lite_dense_if32of32wf32+0x244>
 801cf72:	1d19      	adds	r1, r3, #4
 801cf74:	2301      	movs	r3, #1
 801cf76:	68fa      	ldr	r2, [r7, #12]
 801cf78:	ed91 7a00 	vldr	s14, [r1]
 801cf7c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801cf80:	edd2 7a00 	vldr	s15, [r2]
 801cf84:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cf88:	3301      	adds	r3, #1
 801cf8a:	ece1 7a01 	vstmia	r1!, {s15}
 801cf8e:	697a      	ldr	r2, [r7, #20]
 801cf90:	429a      	cmp	r2, r3
 801cf92:	d8f0      	bhi.n	801cf76 <forward_lite_dense_if32of32wf32+0x28e>
 801cf94:	e7ca      	b.n	801cf2c <forward_lite_dense_if32of32wf32+0x244>
 801cf96:	bf00      	nop
 801cf98:	00000000 	.word	0x00000000

0801cf9c <forward_lite_nl_relu_if32of32>:
 801cf9c:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 801cfa0:	3a01      	subs	r2, #1
 801cfa2:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 801cfa6:	4561      	cmp	r1, ip
 801cfa8:	ea4f 0282 	mov.w	r2, r2, lsl #2
 801cfac:	d814      	bhi.n	801cfd8 <forward_lite_nl_relu_if32of32+0x3c>
 801cfae:	1d11      	adds	r1, r2, #4
 801cfb0:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 801cfdc <forward_lite_nl_relu_if32of32+0x40>
 801cfb4:	f10c 0304 	add.w	r3, ip, #4
 801cfb8:	4408      	add	r0, r1
 801cfba:	ebac 0202 	sub.w	r2, ip, r2
 801cfbe:	ed73 7a01 	vldmdb	r3!, {s15}
 801cfc2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801cfc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cfca:	bfb8      	it	lt
 801cfcc:	eef0 7a47 	vmovlt.f32	s15, s14
 801cfd0:	4293      	cmp	r3, r2
 801cfd2:	ed60 7a01 	vstmdb	r0!, {s15}
 801cfd6:	d1f2      	bne.n	801cfbe <forward_lite_nl_relu_if32of32+0x22>
 801cfd8:	4770      	bx	lr
 801cfda:	bf00      	nop
 801cfdc:	00000000 	.word	0x00000000

0801cfe0 <st_int8_copy>:
 801cfe0:	4288      	cmp	r0, r1
 801cfe2:	d056      	beq.n	801d092 <st_int8_copy+0xb2>
 801cfe4:	2a00      	cmp	r2, #0
 801cfe6:	d054      	beq.n	801d092 <st_int8_copy+0xb2>
 801cfe8:	4288      	cmp	r0, r1
 801cfea:	d353      	bcc.n	801d094 <st_int8_copy+0xb4>
 801cfec:	078b      	lsls	r3, r1, #30
 801cfee:	d102      	bne.n	801cff6 <st_int8_copy+0x16>
 801cff0:	e009      	b.n	801d006 <st_int8_copy+0x26>
 801cff2:	2a00      	cmp	r2, #0
 801cff4:	d05b      	beq.n	801d0ae <st_int8_copy+0xce>
 801cff6:	f910 3b01 	ldrsb.w	r3, [r0], #1
 801cffa:	f801 3b01 	strb.w	r3, [r1], #1
 801cffe:	078b      	lsls	r3, r1, #30
 801d000:	f102 32ff 	add.w	r2, r2, #4294967295
 801d004:	d1f5      	bne.n	801cff2 <st_int8_copy+0x12>
 801d006:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d00a:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 801d00e:	d068      	beq.n	801d0e2 <st_int8_copy+0x102>
 801d010:	ea40 0301 	orr.w	r3, r0, r1
 801d014:	075b      	lsls	r3, r3, #29
 801d016:	d14b      	bne.n	801d0b0 <st_int8_copy+0xd0>
 801d018:	f1be 0f01 	cmp.w	lr, #1
 801d01c:	d048      	beq.n	801d0b0 <st_int8_copy+0xd0>
 801d01e:	f100 0310 	add.w	r3, r0, #16
 801d022:	ea4f 140e 	mov.w	r4, lr, lsl #4
 801d026:	f101 0c10 	add.w	ip, r1, #16
 801d02a:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 801d02e:	ed13 6b04 	vldr	d6, [r3, #-16]
 801d032:	ed13 7b02 	vldr	d7, [r3, #-8]
 801d036:	3310      	adds	r3, #16
 801d038:	4573      	cmp	r3, lr
 801d03a:	ed0c 6b04 	vstr	d6, [ip, #-16]
 801d03e:	ed0c 7b02 	vstr	d7, [ip, #-8]
 801d042:	f10c 0c10 	add.w	ip, ip, #16
 801d046:	d1f2      	bne.n	801d02e <st_int8_copy+0x4e>
 801d048:	f3c2 0381 	ubfx	r3, r2, #2, #2
 801d04c:	4421      	add	r1, r4
 801d04e:	4420      	add	r0, r4
 801d050:	f002 0203 	and.w	r2, r2, #3
 801d054:	b16b      	cbz	r3, 801d072 <st_int8_copy+0x92>
 801d056:	6804      	ldr	r4, [r0, #0]
 801d058:	600c      	str	r4, [r1, #0]
 801d05a:	1e5c      	subs	r4, r3, #1
 801d05c:	d005      	beq.n	801d06a <st_int8_copy+0x8a>
 801d05e:	6845      	ldr	r5, [r0, #4]
 801d060:	604d      	str	r5, [r1, #4]
 801d062:	2c01      	cmp	r4, #1
 801d064:	bf1c      	itt	ne
 801d066:	6884      	ldrne	r4, [r0, #8]
 801d068:	608c      	strne	r4, [r1, #8]
 801d06a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801d06e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801d072:	b162      	cbz	r2, 801d08e <st_int8_copy+0xae>
 801d074:	f990 3000 	ldrsb.w	r3, [r0]
 801d078:	700b      	strb	r3, [r1, #0]
 801d07a:	3a01      	subs	r2, #1
 801d07c:	d007      	beq.n	801d08e <st_int8_copy+0xae>
 801d07e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801d082:	704b      	strb	r3, [r1, #1]
 801d084:	2a01      	cmp	r2, #1
 801d086:	bf1c      	itt	ne
 801d088:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 801d08c:	708b      	strbne	r3, [r1, #2]
 801d08e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d092:	4770      	bx	lr
 801d094:	1883      	adds	r3, r0, r2
 801d096:	428b      	cmp	r3, r1
 801d098:	d9a8      	bls.n	801cfec <st_int8_copy+0xc>
 801d09a:	4283      	cmp	r3, r0
 801d09c:	440a      	add	r2, r1
 801d09e:	d9f8      	bls.n	801d092 <st_int8_copy+0xb2>
 801d0a0:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 801d0a4:	f802 1d01 	strb.w	r1, [r2, #-1]!
 801d0a8:	4283      	cmp	r3, r0
 801d0aa:	d1f9      	bne.n	801d0a0 <st_int8_copy+0xc0>
 801d0ac:	4770      	bx	lr
 801d0ae:	4770      	bx	lr
 801d0b0:	ea4f 140e 	mov.w	r4, lr, lsl #4
 801d0b4:	460b      	mov	r3, r1
 801d0b6:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 801d0ba:	4684      	mov	ip, r0
 801d0bc:	f8dc 7000 	ldr.w	r7, [ip]
 801d0c0:	f8dc 6004 	ldr.w	r6, [ip, #4]
 801d0c4:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801d0c8:	f8dc 800c 	ldr.w	r8, [ip, #12]
 801d0cc:	f8c3 800c 	str.w	r8, [r3, #12]
 801d0d0:	601f      	str	r7, [r3, #0]
 801d0d2:	605e      	str	r6, [r3, #4]
 801d0d4:	609d      	str	r5, [r3, #8]
 801d0d6:	3310      	adds	r3, #16
 801d0d8:	459e      	cmp	lr, r3
 801d0da:	f10c 0c10 	add.w	ip, ip, #16
 801d0de:	d1ed      	bne.n	801d0bc <st_int8_copy+0xdc>
 801d0e0:	e7b2      	b.n	801d048 <st_int8_copy+0x68>
 801d0e2:	0893      	lsrs	r3, r2, #2
 801d0e4:	f002 0203 	and.w	r2, r2, #3
 801d0e8:	e7b4      	b.n	801d054 <st_int8_copy+0x74>
 801d0ea:	bf00      	nop

0801d0ec <ai_array_to_buffer_fmt>:
 801d0ec:	f3c0 4343 	ubfx	r3, r0, #17, #4
 801d0f0:	2b02      	cmp	r3, #2
 801d0f2:	d053      	beq.n	801d19c <ai_array_to_buffer_fmt+0xb0>
 801d0f4:	4a2c      	ldr	r2, [pc, #176]	@ (801d1a8 <ai_array_to_buffer_fmt+0xbc>)
 801d0f6:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 801d0fa:	4293      	cmp	r3, r2
 801d0fc:	d010      	beq.n	801d120 <ai_array_to_buffer_fmt+0x34>
 801d0fe:	dc21      	bgt.n	801d144 <ai_array_to_buffer_fmt+0x58>
 801d100:	4a2a      	ldr	r2, [pc, #168]	@ (801d1ac <ai_array_to_buffer_fmt+0xc0>)
 801d102:	4293      	cmp	r3, r2
 801d104:	d00c      	beq.n	801d120 <ai_array_to_buffer_fmt+0x34>
 801d106:	dd0f      	ble.n	801d128 <ai_array_to_buffer_fmt+0x3c>
 801d108:	4a29      	ldr	r2, [pc, #164]	@ (801d1b0 <ai_array_to_buffer_fmt+0xc4>)
 801d10a:	4293      	cmp	r3, r2
 801d10c:	d008      	beq.n	801d120 <ai_array_to_buffer_fmt+0x34>
 801d10e:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 801d112:	4293      	cmp	r3, r2
 801d114:	d004      	beq.n	801d120 <ai_array_to_buffer_fmt+0x34>
 801d116:	4a27      	ldr	r2, [pc, #156]	@ (801d1b4 <ai_array_to_buffer_fmt+0xc8>)
 801d118:	4293      	cmp	r3, r2
 801d11a:	bf0c      	ite	eq
 801d11c:	4613      	moveq	r3, r2
 801d11e:	2340      	movne	r3, #64	@ 0x40
 801d120:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 801d124:	4318      	orrs	r0, r3
 801d126:	4770      	bx	lr
 801d128:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 801d12c:	4293      	cmp	r3, r2
 801d12e:	d0f7      	beq.n	801d120 <ai_array_to_buffer_fmt+0x34>
 801d130:	dd2a      	ble.n	801d188 <ai_array_to_buffer_fmt+0x9c>
 801d132:	4a21      	ldr	r2, [pc, #132]	@ (801d1b8 <ai_array_to_buffer_fmt+0xcc>)
 801d134:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 801d138:	4293      	cmp	r3, r2
 801d13a:	bf0c      	ite	eq
 801d13c:	4613      	moveq	r3, r2
 801d13e:	2340      	movne	r3, #64	@ 0x40
 801d140:	4318      	orrs	r0, r3
 801d142:	4770      	bx	lr
 801d144:	4a1d      	ldr	r2, [pc, #116]	@ (801d1bc <ai_array_to_buffer_fmt+0xd0>)
 801d146:	4293      	cmp	r3, r2
 801d148:	d0ea      	beq.n	801d120 <ai_array_to_buffer_fmt+0x34>
 801d14a:	dd0f      	ble.n	801d16c <ai_array_to_buffer_fmt+0x80>
 801d14c:	4a1c      	ldr	r2, [pc, #112]	@ (801d1c0 <ai_array_to_buffer_fmt+0xd4>)
 801d14e:	4293      	cmp	r3, r2
 801d150:	d0e6      	beq.n	801d120 <ai_array_to_buffer_fmt+0x34>
 801d152:	f502 027e 	add.w	r2, r2, #16646144	@ 0xfe0000
 801d156:	4293      	cmp	r3, r2
 801d158:	d0e2      	beq.n	801d120 <ai_array_to_buffer_fmt+0x34>
 801d15a:	4a1a      	ldr	r2, [pc, #104]	@ (801d1c4 <ai_array_to_buffer_fmt+0xd8>)
 801d15c:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 801d160:	4293      	cmp	r3, r2
 801d162:	bf0c      	ite	eq
 801d164:	4613      	moveq	r3, r2
 801d166:	2340      	movne	r3, #64	@ 0x40
 801d168:	4318      	orrs	r0, r3
 801d16a:	4770      	bx	lr
 801d16c:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 801d170:	4293      	cmp	r3, r2
 801d172:	d0d5      	beq.n	801d120 <ai_array_to_buffer_fmt+0x34>
 801d174:	3207      	adds	r2, #7
 801d176:	4293      	cmp	r3, r2
 801d178:	d0d2      	beq.n	801d120 <ai_array_to_buffer_fmt+0x34>
 801d17a:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 801d17e:	4293      	cmp	r3, r2
 801d180:	bf0c      	ite	eq
 801d182:	4613      	moveq	r3, r2
 801d184:	2340      	movne	r3, #64	@ 0x40
 801d186:	e7cb      	b.n	801d120 <ai_array_to_buffer_fmt+0x34>
 801d188:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 801d18c:	4293      	cmp	r3, r2
 801d18e:	d0c7      	beq.n	801d120 <ai_array_to_buffer_fmt+0x34>
 801d190:	3280      	adds	r2, #128	@ 0x80
 801d192:	4293      	cmp	r3, r2
 801d194:	bf0c      	ite	eq
 801d196:	4613      	moveq	r3, r2
 801d198:	2340      	movne	r3, #64	@ 0x40
 801d19a:	e7c1      	b.n	801d120 <ai_array_to_buffer_fmt+0x34>
 801d19c:	4b0a      	ldr	r3, [pc, #40]	@ (801d1c8 <ai_array_to_buffer_fmt+0xdc>)
 801d19e:	4003      	ands	r3, r0
 801d1a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801d1a4:	e7bc      	b.n	801d120 <ai_array_to_buffer_fmt+0x34>
 801d1a6:	bf00      	nop
 801d1a8:	00840040 	.word	0x00840040
 801d1ac:	00040840 	.word	0x00040840
 801d1b0:	00041040 	.word	0x00041040
 801d1b4:	0004084f 	.word	0x0004084f
 801d1b8:	00040447 	.word	0x00040447
 801d1bc:	00840840 	.word	0x00840840
 801d1c0:	00841040 	.word	0x00841040
 801d1c4:	0084084f 	.word	0x0084084f
 801d1c8:	00803fff 	.word	0x00803fff

0801d1cc <ai_array_get_byte_size>:
 801d1cc:	b319      	cbz	r1, 801d216 <ai_array_get_byte_size+0x4a>
 801d1ce:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 801d1d2:	fb01 f303 	mul.w	r3, r1, r3
 801d1d6:	f3c0 4243 	ubfx	r2, r0, #17, #4
 801d1da:	3307      	adds	r3, #7
 801d1dc:	f3c0 5141 	ubfx	r1, r0, #21, #2
 801d1e0:	f023 0307 	bic.w	r3, r3, #7
 801d1e4:	2a04      	cmp	r2, #4
 801d1e6:	ea4f 10e0 	mov.w	r0, r0, asr #7
 801d1ea:	fa23 f101 	lsr.w	r1, r3, r1
 801d1ee:	d00b      	beq.n	801d208 <ai_array_get_byte_size+0x3c>
 801d1f0:	2a08      	cmp	r2, #8
 801d1f2:	d002      	beq.n	801d1fa <ai_array_get_byte_size+0x2e>
 801d1f4:	3107      	adds	r1, #7
 801d1f6:	08c8      	lsrs	r0, r1, #3
 801d1f8:	4770      	bx	lr
 801d1fa:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 801d1fe:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 801d202:	3107      	adds	r1, #7
 801d204:	08c8      	lsrs	r0, r1, #3
 801d206:	4770      	bx	lr
 801d208:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 801d20c:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 801d210:	3107      	adds	r1, #7
 801d212:	08c8      	lsrs	r0, r1, #3
 801d214:	4770      	bx	lr
 801d216:	4608      	mov	r0, r1
 801d218:	4770      	bx	lr
 801d21a:	bf00      	nop

0801d21c <ai_array_get_data_byte_size>:
 801d21c:	b169      	cbz	r1, 801d23a <ai_array_get_data_byte_size+0x1e>
 801d21e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 801d222:	fb03 f101 	mul.w	r1, r3, r1
 801d226:	1dcb      	adds	r3, r1, #7
 801d228:	f023 0307 	bic.w	r3, r3, #7
 801d22c:	f3c0 5041 	ubfx	r0, r0, #21, #2
 801d230:	fa23 f000 	lsr.w	r0, r3, r0
 801d234:	3007      	adds	r0, #7
 801d236:	08c0      	lsrs	r0, r0, #3
 801d238:	4770      	bx	lr
 801d23a:	4608      	mov	r0, r1
 801d23c:	4770      	bx	lr
 801d23e:	bf00      	nop

0801d240 <ai_version_get>:
 801d240:	0212      	lsls	r2, r2, #8
 801d242:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801d246:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 801d24a:	4770      	bx	lr

0801d24c <ai_platform_version_get>:
 801d24c:	0e02      	lsrs	r2, r0, #24
 801d24e:	2300      	movs	r3, #0
 801d250:	f362 0307 	bfi	r3, r2, #0, #8
 801d254:	f3c0 4207 	ubfx	r2, r0, #16, #8
 801d258:	f362 230f 	bfi	r3, r2, #8, #8
 801d25c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801d260:	f360 4317 	bfi	r3, r0, #16, #8
 801d264:	b082      	sub	sp, #8
 801d266:	f023 407f 	bic.w	r0, r3, #4278190080	@ 0xff000000
 801d26a:	b002      	add	sp, #8
 801d26c:	4770      	bx	lr
 801d26e:	bf00      	nop

0801d270 <get_tensor_byte_size>:
 801d270:	b410      	push	{r4}
 801d272:	6983      	ldr	r3, [r0, #24]
 801d274:	68c4      	ldr	r4, [r0, #12]
 801d276:	6941      	ldr	r1, [r0, #20]
 801d278:	681b      	ldr	r3, [r3, #0]
 801d27a:	68e0      	ldr	r0, [r4, #12]
 801d27c:	4a07      	ldr	r2, [pc, #28]	@ (801d29c <get_tensor_byte_size+0x2c>)
 801d27e:	68c9      	ldr	r1, [r1, #12]
 801d280:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d284:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 801d288:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 801d28c:	fb01 f000 	mul.w	r0, r1, r0
 801d290:	4293      	cmp	r3, r2
 801d292:	bf04      	itt	eq
 801d294:	3007      	addeq	r0, #7
 801d296:	08c0      	lsreq	r0, r0, #3
 801d298:	4770      	bx	lr
 801d29a:	bf00      	nop
 801d29c:	000400c0 	.word	0x000400c0

0801d2a0 <GW_init>:
 801d2a0:	b580      	push	{r7, lr}
 801d2a2:	b096      	sub	sp, #88	@ 0x58
 801d2a4:	af10      	add	r7, sp, #64	@ 0x40
 801d2a6:	60f8      	str	r0, [r7, #12]
 801d2a8:	60b9      	str	r1, [r7, #8]
 801d2aa:	607a      	str	r2, [r7, #4]
 801d2ac:	4b5e      	ldr	r3, [pc, #376]	@ (801d428 <GW_init+0x188>)
 801d2ae:	681b      	ldr	r3, [r3, #0]
 801d2b0:	2b01      	cmp	r3, #1
 801d2b2:	dd02      	ble.n	801d2ba <GW_init+0x1a>
 801d2b4:	485d      	ldr	r0, [pc, #372]	@ (801d42c <GW_init+0x18c>)
 801d2b6:	f006 f811 	bl	80232dc <puts>
 801d2ba:	68fb      	ldr	r3, [r7, #12]
 801d2bc:	2b00      	cmp	r3, #0
 801d2be:	d005      	beq.n	801d2cc <GW_init+0x2c>
 801d2c0:	68bb      	ldr	r3, [r7, #8]
 801d2c2:	2b00      	cmp	r3, #0
 801d2c4:	d002      	beq.n	801d2cc <GW_init+0x2c>
 801d2c6:	687b      	ldr	r3, [r7, #4]
 801d2c8:	2b00      	cmp	r3, #0
 801d2ca:	d109      	bne.n	801d2e0 <GW_init+0x40>
 801d2cc:	4b56      	ldr	r3, [pc, #344]	@ (801d428 <GW_init+0x188>)
 801d2ce:	681b      	ldr	r3, [r3, #0]
 801d2d0:	2b00      	cmp	r3, #0
 801d2d2:	dd02      	ble.n	801d2da <GW_init+0x3a>
 801d2d4:	4856      	ldr	r0, [pc, #344]	@ (801d430 <GW_init+0x190>)
 801d2d6:	f006 f801 	bl	80232dc <puts>
 801d2da:	f06f 0301 	mvn.w	r3, #1
 801d2de:	e09e      	b.n	801d41e <GW_init+0x17e>
 801d2e0:	6879      	ldr	r1, [r7, #4]
 801d2e2:	68b8      	ldr	r0, [r7, #8]
 801d2e4:	f002 f97a 	bl	801f5dc <HT_init>
 801d2e8:	6178      	str	r0, [r7, #20]
 801d2ea:	697b      	ldr	r3, [r7, #20]
 801d2ec:	2b00      	cmp	r3, #0
 801d2ee:	d001      	beq.n	801d2f4 <GW_init+0x54>
 801d2f0:	697b      	ldr	r3, [r7, #20]
 801d2f2:	e094      	b.n	801d41e <GW_init+0x17e>
 801d2f4:	f04f 33ff 	mov.w	r3, #4294967295
 801d2f8:	930e      	str	r3, [sp, #56]	@ 0x38
 801d2fa:	f04f 33ff 	mov.w	r3, #4294967295
 801d2fe:	930d      	str	r3, [sp, #52]	@ 0x34
 801d300:	f04f 33ff 	mov.w	r3, #4294967295
 801d304:	930c      	str	r3, [sp, #48]	@ 0x30
 801d306:	f04f 33ff 	mov.w	r3, #4294967295
 801d30a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d30c:	f04f 33ff 	mov.w	r3, #4294967295
 801d310:	930a      	str	r3, [sp, #40]	@ 0x28
 801d312:	f04f 33ff 	mov.w	r3, #4294967295
 801d316:	9309      	str	r3, [sp, #36]	@ 0x24
 801d318:	f04f 33ff 	mov.w	r3, #4294967295
 801d31c:	9308      	str	r3, [sp, #32]
 801d31e:	f04f 33ff 	mov.w	r3, #4294967295
 801d322:	9307      	str	r3, [sp, #28]
 801d324:	f04f 33ff 	mov.w	r3, #4294967295
 801d328:	9306      	str	r3, [sp, #24]
 801d32a:	f04f 33ff 	mov.w	r3, #4294967295
 801d32e:	9305      	str	r3, [sp, #20]
 801d330:	f04f 33ff 	mov.w	r3, #4294967295
 801d334:	9304      	str	r3, [sp, #16]
 801d336:	f04f 33ff 	mov.w	r3, #4294967295
 801d33a:	9303      	str	r3, [sp, #12]
 801d33c:	f04f 33ff 	mov.w	r3, #4294967295
 801d340:	9302      	str	r3, [sp, #8]
 801d342:	f04f 33ff 	mov.w	r3, #4294967295
 801d346:	9301      	str	r3, [sp, #4]
 801d348:	f04f 33ff 	mov.w	r3, #4294967295
 801d34c:	9300      	str	r3, [sp, #0]
 801d34e:	eebf 3a00 	vmov.f32	s6, #240	@ 0xbf800000 -1.0
 801d352:	eeff 2a00 	vmov.f32	s5, #240	@ 0xbf800000 -1.0
 801d356:	eebf 2a00 	vmov.f32	s4, #240	@ 0xbf800000 -1.0
 801d35a:	eeff 1a00 	vmov.f32	s3, #240	@ 0xbf800000 -1.0
 801d35e:	eebf 1a00 	vmov.f32	s2, #240	@ 0xbf800000 -1.0
 801d362:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 801d366:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 801d36a:	f04f 33ff 	mov.w	r3, #4294967295
 801d36e:	f04f 32ff 	mov.w	r2, #4294967295
 801d372:	f04f 31ff 	mov.w	r1, #4294967295
 801d376:	68f8      	ldr	r0, [r7, #12]
 801d378:	f000 f85e 	bl	801d438 <GW_set_params>
 801d37c:	6178      	str	r0, [r7, #20]
 801d37e:	697b      	ldr	r3, [r7, #20]
 801d380:	2b00      	cmp	r3, #0
 801d382:	d001      	beq.n	801d388 <GW_init+0xe8>
 801d384:	697b      	ldr	r3, [r7, #20]
 801d386:	e04a      	b.n	801d41e <GW_init+0x17e>
 801d388:	68fb      	ldr	r3, [r7, #12]
 801d38a:	2200      	movs	r2, #0
 801d38c:	f883 2f20 	strb.w	r2, [r3, #3872]	@ 0xf20
 801d390:	68fb      	ldr	r3, [r7, #12]
 801d392:	2200      	movs	r2, #0
 801d394:	f8c3 2f24 	str.w	r2, [r3, #3876]	@ 0xf24
 801d398:	68fb      	ldr	r3, [r7, #12]
 801d39a:	2200      	movs	r2, #0
 801d39c:	f8c3 2f28 	str.w	r2, [r3, #3880]	@ 0xf28
 801d3a0:	68fb      	ldr	r3, [r7, #12]
 801d3a2:	2200      	movs	r2, #0
 801d3a4:	f883 2f2c 	strb.w	r2, [r3, #3884]	@ 0xf2c
 801d3a8:	68fb      	ldr	r3, [r7, #12]
 801d3aa:	2200      	movs	r2, #0
 801d3ac:	f883 2f2d 	strb.w	r2, [r3, #3885]	@ 0xf2d
 801d3b0:	68bb      	ldr	r3, [r7, #8]
 801d3b2:	689b      	ldr	r3, [r3, #8]
 801d3b4:	ee07 3a90 	vmov	s15, r3
 801d3b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d3bc:	68fb      	ldr	r3, [r7, #12]
 801d3be:	f503 6373 	add.w	r3, r3, #3888	@ 0xf30
 801d3c2:	edc3 7a00 	vstr	s15, [r3]
 801d3c6:	68fb      	ldr	r3, [r7, #12]
 801d3c8:	f503 6373 	add.w	r3, r3, #3888	@ 0xf30
 801d3cc:	681a      	ldr	r2, [r3, #0]
 801d3ce:	68fb      	ldr	r3, [r7, #12]
 801d3d0:	f603 7334 	addw	r3, r3, #3892	@ 0xf34
 801d3d4:	601a      	str	r2, [r3, #0]
 801d3d6:	68fb      	ldr	r3, [r7, #12]
 801d3d8:	2200      	movs	r2, #0
 801d3da:	f8c3 2f38 	str.w	r2, [r3, #3896]	@ 0xf38
 801d3de:	68fb      	ldr	r3, [r7, #12]
 801d3e0:	f04f 0200 	mov.w	r2, #0
 801d3e4:	671a      	str	r2, [r3, #112]	@ 0x70
 801d3e6:	68fb      	ldr	r3, [r7, #12]
 801d3e8:	f04f 0200 	mov.w	r2, #0
 801d3ec:	675a      	str	r2, [r3, #116]	@ 0x74
 801d3ee:	68fb      	ldr	r3, [r7, #12]
 801d3f0:	f04f 0200 	mov.w	r2, #0
 801d3f4:	679a      	str	r2, [r3, #120]	@ 0x78
 801d3f6:	68fb      	ldr	r3, [r7, #12]
 801d3f8:	2264      	movs	r2, #100	@ 0x64
 801d3fa:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
 801d3fe:	68fb      	ldr	r3, [r7, #12]
 801d400:	2200      	movs	r2, #0
 801d402:	f883 2f44 	strb.w	r2, [r3, #3908]	@ 0xf44
 801d406:	68fb      	ldr	r3, [r7, #12]
 801d408:	2200      	movs	r2, #0
 801d40a:	f8c3 2f48 	str.w	r2, [r3, #3912]	@ 0xf48
 801d40e:	4b06      	ldr	r3, [pc, #24]	@ (801d428 <GW_init+0x188>)
 801d410:	681b      	ldr	r3, [r3, #0]
 801d412:	2b02      	cmp	r3, #2
 801d414:	dd02      	ble.n	801d41c <GW_init+0x17c>
 801d416:	4807      	ldr	r0, [pc, #28]	@ (801d434 <GW_init+0x194>)
 801d418:	f005 ff60 	bl	80232dc <puts>
 801d41c:	2300      	movs	r3, #0
 801d41e:	4618      	mov	r0, r3
 801d420:	3718      	adds	r7, #24
 801d422:	46bd      	mov	sp, r7
 801d424:	bd80      	pop	{r7, pc}
 801d426:	bf00      	nop
 801d428:	200019c8 	.word	0x200019c8
 801d42c:	08042430 	.word	0x08042430
 801d430:	08042450 	.word	0x08042450
 801d434:	0804247c 	.word	0x0804247c

0801d438 <GW_set_params>:
 801d438:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801d43c:	b092      	sub	sp, #72	@ 0x48
 801d43e:	af06      	add	r7, sp, #24
 801d440:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801d442:	62b9      	str	r1, [r7, #40]	@ 0x28
 801d444:	627a      	str	r2, [r7, #36]	@ 0x24
 801d446:	623b      	str	r3, [r7, #32]
 801d448:	ed87 0a07 	vstr	s0, [r7, #28]
 801d44c:	edc7 0a06 	vstr	s1, [r7, #24]
 801d450:	ed87 1a05 	vstr	s2, [r7, #20]
 801d454:	edc7 1a04 	vstr	s3, [r7, #16]
 801d458:	ed87 2a03 	vstr	s4, [r7, #12]
 801d45c:	edc7 2a02 	vstr	s5, [r7, #8]
 801d460:	ed87 3a01 	vstr	s6, [r7, #4]
 801d464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d466:	2b00      	cmp	r3, #0
 801d468:	d109      	bne.n	801d47e <GW_set_params+0x46>
 801d46a:	4b9e      	ldr	r3, [pc, #632]	@ (801d6e4 <GW_set_params+0x2ac>)
 801d46c:	681b      	ldr	r3, [r3, #0]
 801d46e:	2b00      	cmp	r3, #0
 801d470:	dd02      	ble.n	801d478 <GW_set_params+0x40>
 801d472:	489d      	ldr	r0, [pc, #628]	@ (801d6e8 <GW_set_params+0x2b0>)
 801d474:	f005 ff32 	bl	80232dc <puts>
 801d478:	f06f 0301 	mvn.w	r3, #1
 801d47c:	e204      	b.n	801d888 <GW_set_params+0x450>
 801d47e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d480:	2b00      	cmp	r3, #0
 801d482:	db01      	blt.n	801d488 <GW_set_params+0x50>
 801d484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d486:	e000      	b.n	801d48a <GW_set_params+0x52>
 801d488:	235f      	movs	r3, #95	@ 0x5f
 801d48a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d48c:	6013      	str	r3, [r2, #0]
 801d48e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d490:	681b      	ldr	r3, [r3, #0]
 801d492:	43da      	mvns	r2, r3
 801d494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d496:	605a      	str	r2, [r3, #4]
 801d498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d49a:	2b00      	cmp	r3, #0
 801d49c:	db01      	blt.n	801d4a2 <GW_set_params+0x6a>
 801d49e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d4a0:	e000      	b.n	801d4a4 <GW_set_params+0x6c>
 801d4a2:	23c8      	movs	r3, #200	@ 0xc8
 801d4a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d4a6:	6093      	str	r3, [r2, #8]
 801d4a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d4aa:	f04f 32ff 	mov.w	r2, #4294967295
 801d4ae:	60da      	str	r2, [r3, #12]
 801d4b0:	6a3b      	ldr	r3, [r7, #32]
 801d4b2:	2b00      	cmp	r3, #0
 801d4b4:	db01      	blt.n	801d4ba <GW_set_params+0x82>
 801d4b6:	6a3b      	ldr	r3, [r7, #32]
 801d4b8:	e001      	b.n	801d4be <GW_set_params+0x86>
 801d4ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801d4be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d4c0:	6113      	str	r3, [r2, #16]
 801d4c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d4c4:	2b00      	cmp	r3, #0
 801d4c6:	db01      	blt.n	801d4cc <GW_set_params+0x94>
 801d4c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d4ca:	e001      	b.n	801d4d0 <GW_set_params+0x98>
 801d4cc:	f44f 7316 	mov.w	r3, #600	@ 0x258
 801d4d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d4d2:	6153      	str	r3, [r2, #20]
 801d4d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801d4d6:	2b00      	cmp	r3, #0
 801d4d8:	db01      	blt.n	801d4de <GW_set_params+0xa6>
 801d4da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801d4dc:	e000      	b.n	801d4e0 <GW_set_params+0xa8>
 801d4de:	2314      	movs	r3, #20
 801d4e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d4e2:	6193      	str	r3, [r2, #24]
 801d4e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801d4e6:	2b00      	cmp	r3, #0
 801d4e8:	db01      	blt.n	801d4ee <GW_set_params+0xb6>
 801d4ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801d4ec:	e001      	b.n	801d4f2 <GW_set_params+0xba>
 801d4ee:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 801d4f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d4f4:	61d3      	str	r3, [r2, #28]
 801d4f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801d4f8:	2b00      	cmp	r3, #0
 801d4fa:	db01      	blt.n	801d500 <GW_set_params+0xc8>
 801d4fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801d4fe:	e001      	b.n	801d504 <GW_set_params+0xcc>
 801d500:	f44f 7316 	mov.w	r3, #600	@ 0x258
 801d504:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d506:	6213      	str	r3, [r2, #32]
 801d508:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801d50a:	2b00      	cmp	r3, #0
 801d50c:	db01      	blt.n	801d512 <GW_set_params+0xda>
 801d50e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801d510:	e001      	b.n	801d516 <GW_set_params+0xde>
 801d512:	f44f 7316 	mov.w	r3, #600	@ 0x258
 801d516:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d518:	6253      	str	r3, [r2, #36]	@ 0x24
 801d51a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801d51c:	2b00      	cmp	r3, #0
 801d51e:	db01      	blt.n	801d524 <GW_set_params+0xec>
 801d520:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801d522:	e001      	b.n	801d528 <GW_set_params+0xf0>
 801d524:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 801d528:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d52a:	6293      	str	r3, [r2, #40]	@ 0x28
 801d52c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801d52e:	2b00      	cmp	r3, #0
 801d530:	db01      	blt.n	801d536 <GW_set_params+0xfe>
 801d532:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801d534:	e001      	b.n	801d53a <GW_set_params+0x102>
 801d536:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 801d53a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d53c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801d53e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801d540:	2b00      	cmp	r3, #0
 801d542:	db01      	blt.n	801d548 <GW_set_params+0x110>
 801d544:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801d546:	e001      	b.n	801d54c <GW_set_params+0x114>
 801d548:	f240 431a 	movw	r3, #1050	@ 0x41a
 801d54c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d54e:	6513      	str	r3, [r2, #80]	@ 0x50
 801d550:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801d552:	2b00      	cmp	r3, #0
 801d554:	db01      	blt.n	801d55a <GW_set_params+0x122>
 801d556:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801d558:	e000      	b.n	801d55c <GW_set_params+0x124>
 801d55a:	23c8      	movs	r3, #200	@ 0xc8
 801d55c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d55e:	6553      	str	r3, [r2, #84]	@ 0x54
 801d560:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801d562:	2b00      	cmp	r3, #0
 801d564:	db01      	blt.n	801d56a <GW_set_params+0x132>
 801d566:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801d568:	e001      	b.n	801d56e <GW_set_params+0x136>
 801d56a:	f240 3352 	movw	r3, #850	@ 0x352
 801d56e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d570:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801d572:	edd7 7a07 	vldr	s15, [r7, #28]
 801d576:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d57a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d57e:	db01      	blt.n	801d584 <GW_set_params+0x14c>
 801d580:	69fb      	ldr	r3, [r7, #28]
 801d582:	e000      	b.n	801d586 <GW_set_params+0x14e>
 801d584:	4b59      	ldr	r3, [pc, #356]	@ (801d6ec <GW_set_params+0x2b4>)
 801d586:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d588:	6313      	str	r3, [r2, #48]	@ 0x30
 801d58a:	edd7 7a06 	vldr	s15, [r7, #24]
 801d58e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d596:	db01      	blt.n	801d59c <GW_set_params+0x164>
 801d598:	69bb      	ldr	r3, [r7, #24]
 801d59a:	e001      	b.n	801d5a0 <GW_set_params+0x168>
 801d59c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 801d5a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d5a2:	6353      	str	r3, [r2, #52]	@ 0x34
 801d5a4:	edd7 7a05 	vldr	s15, [r7, #20]
 801d5a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d5ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d5b0:	db01      	blt.n	801d5b6 <GW_set_params+0x17e>
 801d5b2:	697b      	ldr	r3, [r7, #20]
 801d5b4:	e000      	b.n	801d5b8 <GW_set_params+0x180>
 801d5b6:	4b4e      	ldr	r3, [pc, #312]	@ (801d6f0 <GW_set_params+0x2b8>)
 801d5b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d5ba:	6393      	str	r3, [r2, #56]	@ 0x38
 801d5bc:	edd7 7a04 	vldr	s15, [r7, #16]
 801d5c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d5c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d5c8:	db01      	blt.n	801d5ce <GW_set_params+0x196>
 801d5ca:	693b      	ldr	r3, [r7, #16]
 801d5cc:	e000      	b.n	801d5d0 <GW_set_params+0x198>
 801d5ce:	4b49      	ldr	r3, [pc, #292]	@ (801d6f4 <GW_set_params+0x2bc>)
 801d5d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d5d2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 801d5d4:	edd7 7a03 	vldr	s15, [r7, #12]
 801d5d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d5dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d5e0:	db01      	blt.n	801d5e6 <GW_set_params+0x1ae>
 801d5e2:	68fb      	ldr	r3, [r7, #12]
 801d5e4:	e001      	b.n	801d5ea <GW_set_params+0x1b2>
 801d5e6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801d5ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d5ec:	6413      	str	r3, [r2, #64]	@ 0x40
 801d5ee:	edd7 7a02 	vldr	s15, [r7, #8]
 801d5f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d5f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d5fa:	db01      	blt.n	801d600 <GW_set_params+0x1c8>
 801d5fc:	68bb      	ldr	r3, [r7, #8]
 801d5fe:	e000      	b.n	801d602 <GW_set_params+0x1ca>
 801d600:	4b3d      	ldr	r3, [pc, #244]	@ (801d6f8 <GW_set_params+0x2c0>)
 801d602:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d604:	6453      	str	r3, [r2, #68]	@ 0x44
 801d606:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801d608:	2b00      	cmp	r3, #0
 801d60a:	db04      	blt.n	801d616 <GW_set_params+0x1de>
 801d60c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801d60e:	2b00      	cmp	r3, #0
 801d610:	d001      	beq.n	801d616 <GW_set_params+0x1de>
 801d612:	2301      	movs	r3, #1
 801d614:	e000      	b.n	801d618 <GW_set_params+0x1e0>
 801d616:	2300      	movs	r3, #0
 801d618:	f003 0301 	and.w	r3, r3, #1
 801d61c:	b2da      	uxtb	r2, r3
 801d61e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d620:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 801d624:	edd7 7a01 	vldr	s15, [r7, #4]
 801d628:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d62c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d630:	dd01      	ble.n	801d636 <GW_set_params+0x1fe>
 801d632:	687b      	ldr	r3, [r7, #4]
 801d634:	e000      	b.n	801d638 <GW_set_params+0x200>
 801d636:	4b31      	ldr	r3, [pc, #196]	@ (801d6fc <GW_set_params+0x2c4>)
 801d638:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d63a:	6593      	str	r3, [r2, #88]	@ 0x58
 801d63c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801d63e:	2b00      	cmp	r3, #0
 801d640:	dd01      	ble.n	801d646 <GW_set_params+0x20e>
 801d642:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801d644:	e001      	b.n	801d64a <GW_set_params+0x212>
 801d646:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801d64a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d64c:	65d3      	str	r3, [r2, #92]	@ 0x5c
 801d64e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801d652:	2b00      	cmp	r3, #0
 801d654:	dd02      	ble.n	801d65c <GW_set_params+0x224>
 801d656:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801d65a:	e001      	b.n	801d660 <GW_set_params+0x228>
 801d65c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801d660:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d662:	6613      	str	r3, [r2, #96]	@ 0x60
 801d664:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801d668:	2b00      	cmp	r3, #0
 801d66a:	dd02      	ble.n	801d672 <GW_set_params+0x23a>
 801d66c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801d670:	e000      	b.n	801d674 <GW_set_params+0x23c>
 801d672:	2364      	movs	r3, #100	@ 0x64
 801d674:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d676:	6653      	str	r3, [r2, #100]	@ 0x64
 801d678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d67a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 801d67c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d67e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801d680:	1ad3      	subs	r3, r2, r3
 801d682:	4618      	mov	r0, r3
 801d684:	f7fc fa4e 	bl	8019b24 <__aeabi_i2d>
 801d688:	4602      	mov	r2, r0
 801d68a:	460b      	mov	r3, r1
 801d68c:	f04f 0000 	mov.w	r0, #0
 801d690:	491b      	ldr	r1, [pc, #108]	@ (801d700 <GW_set_params+0x2c8>)
 801d692:	f7fc fbdb 	bl	8019e4c <__aeabi_ddiv>
 801d696:	4602      	mov	r2, r0
 801d698:	460b      	mov	r3, r1
 801d69a:	4610      	mov	r0, r2
 801d69c:	4619      	mov	r1, r3
 801d69e:	f7fc fda3 	bl	801a1e8 <__aeabi_d2f>
 801d6a2:	4602      	mov	r2, r0
 801d6a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d6a6:	f603 23f4 	addw	r3, r3, #2804	@ 0xaf4
 801d6aa:	601a      	str	r2, [r3, #0]
 801d6ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d6ae:	f503 630e 	add.w	r3, r3, #2272	@ 0x8e0
 801d6b2:	2105      	movs	r1, #5
 801d6b4:	4618      	mov	r0, r3
 801d6b6:	f003 feb5 	bl	8021424 <RFBVM_init>
 801d6ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d6bc:	f603 23f8 	addw	r3, r3, #2808	@ 0xaf8
 801d6c0:	2105      	movs	r1, #5
 801d6c2:	4618      	mov	r0, r3
 801d6c4:	f003 feae 	bl	8021424 <RFBVM_init>
 801d6c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d6ca:	f603 530c 	addw	r3, r3, #3340	@ 0xd0c
 801d6ce:	2105      	movs	r1, #5
 801d6d0:	4618      	mov	r0, r3
 801d6d2:	f003 fea7 	bl	8021424 <RFBVM_init>
 801d6d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801d6da:	2b00      	cmp	r3, #0
 801d6dc:	dd12      	ble.n	801d704 <GW_set_params+0x2cc>
 801d6de:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801d6e2:	e010      	b.n	801d706 <GW_set_params+0x2ce>
 801d6e4:	200019c8 	.word	0x200019c8
 801d6e8:	0804249c 	.word	0x0804249c
 801d6ec:	3ed58106 	.word	0x3ed58106
 801d6f0:	3fcf7cee 	.word	0x3fcf7cee
 801d6f4:	3f99999a 	.word	0x3f99999a
 801d6f8:	3f8f1aa0 	.word	0x3f8f1aa0
 801d6fc:	451c4000 	.word	0x451c4000
 801d700:	40590000 	.word	0x40590000
 801d704:	23fa      	movs	r3, #250	@ 0xfa
 801d706:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d708:	6693      	str	r3, [r2, #104]	@ 0x68
 801d70a:	4b62      	ldr	r3, [pc, #392]	@ (801d894 <GW_set_params+0x45c>)
 801d70c:	681b      	ldr	r3, [r3, #0]
 801d70e:	2b01      	cmp	r3, #1
 801d710:	dd0f      	ble.n	801d732 <GW_set_params+0x2fa>
 801d712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d714:	6899      	ldr	r1, [r3, #8]
 801d716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d718:	691b      	ldr	r3, [r3, #16]
 801d71a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d71c:	6952      	ldr	r2, [r2, #20]
 801d71e:	9202      	str	r2, [sp, #8]
 801d720:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801d722:	9201      	str	r2, [sp, #4]
 801d724:	9300      	str	r3, [sp, #0]
 801d726:	6a3b      	ldr	r3, [r7, #32]
 801d728:	460a      	mov	r2, r1
 801d72a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801d72c:	485a      	ldr	r0, [pc, #360]	@ (801d898 <GW_set_params+0x460>)
 801d72e:	f005 fd6d 	bl	802320c <iprintf>
 801d732:	4b58      	ldr	r3, [pc, #352]	@ (801d894 <GW_set_params+0x45c>)
 801d734:	681b      	ldr	r3, [r3, #0]
 801d736:	2b01      	cmp	r3, #1
 801d738:	dd0f      	ble.n	801d75a <GW_set_params+0x322>
 801d73a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d73c:	69d9      	ldr	r1, [r3, #28]
 801d73e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d740:	6a1b      	ldr	r3, [r3, #32]
 801d742:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d744:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801d746:	9202      	str	r2, [sp, #8]
 801d748:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801d74a:	9201      	str	r2, [sp, #4]
 801d74c:	9300      	str	r3, [sp, #0]
 801d74e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801d750:	460a      	mov	r2, r1
 801d752:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801d754:	4851      	ldr	r0, [pc, #324]	@ (801d89c <GW_set_params+0x464>)
 801d756:	f005 fd59 	bl	802320c <iprintf>
 801d75a:	4b4e      	ldr	r3, [pc, #312]	@ (801d894 <GW_set_params+0x45c>)
 801d75c:	681b      	ldr	r3, [r3, #0]
 801d75e:	2b01      	cmp	r3, #1
 801d760:	dd0a      	ble.n	801d778 <GW_set_params+0x340>
 801d762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d764:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801d766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d768:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801d76c:	9300      	str	r3, [sp, #0]
 801d76e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801d770:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 801d772:	484b      	ldr	r0, [pc, #300]	@ (801d8a0 <GW_set_params+0x468>)
 801d774:	f005 fd4a 	bl	802320c <iprintf>
 801d778:	4b46      	ldr	r3, [pc, #280]	@ (801d894 <GW_set_params+0x45c>)
 801d77a:	681b      	ldr	r3, [r3, #0]
 801d77c:	2b01      	cmp	r3, #1
 801d77e:	dd22      	ble.n	801d7c6 <GW_set_params+0x38e>
 801d780:	69f8      	ldr	r0, [r7, #28]
 801d782:	f7fc f9e1 	bl	8019b48 <__aeabi_f2d>
 801d786:	4682      	mov	sl, r0
 801d788:	468b      	mov	fp, r1
 801d78a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d78c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d78e:	4618      	mov	r0, r3
 801d790:	f7fc f9da 	bl	8019b48 <__aeabi_f2d>
 801d794:	4604      	mov	r4, r0
 801d796:	460d      	mov	r5, r1
 801d798:	69b8      	ldr	r0, [r7, #24]
 801d79a:	f7fc f9d5 	bl	8019b48 <__aeabi_f2d>
 801d79e:	4680      	mov	r8, r0
 801d7a0:	4689      	mov	r9, r1
 801d7a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d7a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d7a6:	4618      	mov	r0, r3
 801d7a8:	f7fc f9ce 	bl	8019b48 <__aeabi_f2d>
 801d7ac:	4602      	mov	r2, r0
 801d7ae:	460b      	mov	r3, r1
 801d7b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801d7b4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801d7b8:	e9cd 4500 	strd	r4, r5, [sp]
 801d7bc:	4652      	mov	r2, sl
 801d7be:	465b      	mov	r3, fp
 801d7c0:	4838      	ldr	r0, [pc, #224]	@ (801d8a4 <GW_set_params+0x46c>)
 801d7c2:	f005 fd23 	bl	802320c <iprintf>
 801d7c6:	4b33      	ldr	r3, [pc, #204]	@ (801d894 <GW_set_params+0x45c>)
 801d7c8:	681b      	ldr	r3, [r3, #0]
 801d7ca:	2b01      	cmp	r3, #1
 801d7cc:	dd22      	ble.n	801d814 <GW_set_params+0x3dc>
 801d7ce:	6978      	ldr	r0, [r7, #20]
 801d7d0:	f7fc f9ba 	bl	8019b48 <__aeabi_f2d>
 801d7d4:	4682      	mov	sl, r0
 801d7d6:	468b      	mov	fp, r1
 801d7d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d7da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d7dc:	4618      	mov	r0, r3
 801d7de:	f7fc f9b3 	bl	8019b48 <__aeabi_f2d>
 801d7e2:	4604      	mov	r4, r0
 801d7e4:	460d      	mov	r5, r1
 801d7e6:	6938      	ldr	r0, [r7, #16]
 801d7e8:	f7fc f9ae 	bl	8019b48 <__aeabi_f2d>
 801d7ec:	4680      	mov	r8, r0
 801d7ee:	4689      	mov	r9, r1
 801d7f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d7f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801d7f4:	4618      	mov	r0, r3
 801d7f6:	f7fc f9a7 	bl	8019b48 <__aeabi_f2d>
 801d7fa:	4602      	mov	r2, r0
 801d7fc:	460b      	mov	r3, r1
 801d7fe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801d802:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801d806:	e9cd 4500 	strd	r4, r5, [sp]
 801d80a:	4652      	mov	r2, sl
 801d80c:	465b      	mov	r3, fp
 801d80e:	4826      	ldr	r0, [pc, #152]	@ (801d8a8 <GW_set_params+0x470>)
 801d810:	f005 fcfc 	bl	802320c <iprintf>
 801d814:	4b1f      	ldr	r3, [pc, #124]	@ (801d894 <GW_set_params+0x45c>)
 801d816:	681b      	ldr	r3, [r3, #0]
 801d818:	2b01      	cmp	r3, #1
 801d81a:	dd22      	ble.n	801d862 <GW_set_params+0x42a>
 801d81c:	68f8      	ldr	r0, [r7, #12]
 801d81e:	f7fc f993 	bl	8019b48 <__aeabi_f2d>
 801d822:	4682      	mov	sl, r0
 801d824:	468b      	mov	fp, r1
 801d826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d82a:	4618      	mov	r0, r3
 801d82c:	f7fc f98c 	bl	8019b48 <__aeabi_f2d>
 801d830:	4604      	mov	r4, r0
 801d832:	460d      	mov	r5, r1
 801d834:	68b8      	ldr	r0, [r7, #8]
 801d836:	f7fc f987 	bl	8019b48 <__aeabi_f2d>
 801d83a:	4680      	mov	r8, r0
 801d83c:	4689      	mov	r9, r1
 801d83e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801d842:	4618      	mov	r0, r3
 801d844:	f7fc f980 	bl	8019b48 <__aeabi_f2d>
 801d848:	4602      	mov	r2, r0
 801d84a:	460b      	mov	r3, r1
 801d84c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801d850:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801d854:	e9cd 4500 	strd	r4, r5, [sp]
 801d858:	4652      	mov	r2, sl
 801d85a:	465b      	mov	r3, fp
 801d85c:	4813      	ldr	r0, [pc, #76]	@ (801d8ac <GW_set_params+0x474>)
 801d85e:	f005 fcd5 	bl	802320c <iprintf>
 801d862:	4b0c      	ldr	r3, [pc, #48]	@ (801d894 <GW_set_params+0x45c>)
 801d864:	681b      	ldr	r3, [r3, #0]
 801d866:	2b01      	cmp	r3, #1
 801d868:	dd06      	ble.n	801d878 <GW_set_params+0x440>
 801d86a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d86c:	681b      	ldr	r3, [r3, #0]
 801d86e:	461a      	mov	r2, r3
 801d870:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801d872:	480f      	ldr	r0, [pc, #60]	@ (801d8b0 <GW_set_params+0x478>)
 801d874:	f005 fcca 	bl	802320c <iprintf>
 801d878:	4b06      	ldr	r3, [pc, #24]	@ (801d894 <GW_set_params+0x45c>)
 801d87a:	681b      	ldr	r3, [r3, #0]
 801d87c:	2b02      	cmp	r3, #2
 801d87e:	dd02      	ble.n	801d886 <GW_set_params+0x44e>
 801d880:	480c      	ldr	r0, [pc, #48]	@ (801d8b4 <GW_set_params+0x47c>)
 801d882:	f005 fd2b 	bl	80232dc <puts>
 801d886:	2300      	movs	r3, #0
 801d888:	4618      	mov	r0, r3
 801d88a:	3730      	adds	r7, #48	@ 0x30
 801d88c:	46bd      	mov	sp, r7
 801d88e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801d892:	bf00      	nop
 801d894:	200019c8 	.word	0x200019c8
 801d898:	080424cc 	.word	0x080424cc
 801d89c:	0804251c 	.word	0x0804251c
 801d8a0:	08042568 	.word	0x08042568
 801d8a4:	080425b0 	.word	0x080425b0
 801d8a8:	080425f4 	.word	0x080425f4
 801d8ac:	08042638 	.word	0x08042638
 801d8b0:	0804267c 	.word	0x0804267c
 801d8b4:	080426b4 	.word	0x080426b4

0801d8b8 <GW_set_frequency>:
 801d8b8:	b580      	push	{r7, lr}
 801d8ba:	b086      	sub	sp, #24
 801d8bc:	af00      	add	r7, sp, #0
 801d8be:	60f8      	str	r0, [r7, #12]
 801d8c0:	60b9      	str	r1, [r7, #8]
 801d8c2:	607a      	str	r2, [r7, #4]
 801d8c4:	ed87 0a00 	vstr	s0, [r7]
 801d8c8:	68fb      	ldr	r3, [r7, #12]
 801d8ca:	2b00      	cmp	r3, #0
 801d8cc:	d005      	beq.n	801d8da <GW_set_frequency+0x22>
 801d8ce:	68bb      	ldr	r3, [r7, #8]
 801d8d0:	2b00      	cmp	r3, #0
 801d8d2:	d002      	beq.n	801d8da <GW_set_frequency+0x22>
 801d8d4:	687b      	ldr	r3, [r7, #4]
 801d8d6:	2b00      	cmp	r3, #0
 801d8d8:	d109      	bne.n	801d8ee <GW_set_frequency+0x36>
 801d8da:	4b1c      	ldr	r3, [pc, #112]	@ (801d94c <GW_set_frequency+0x94>)
 801d8dc:	681b      	ldr	r3, [r3, #0]
 801d8de:	2b00      	cmp	r3, #0
 801d8e0:	dd02      	ble.n	801d8e8 <GW_set_frequency+0x30>
 801d8e2:	481b      	ldr	r0, [pc, #108]	@ (801d950 <GW_set_frequency+0x98>)
 801d8e4:	f005 fcfa 	bl	80232dc <puts>
 801d8e8:	f06f 0301 	mvn.w	r3, #1
 801d8ec:	e02a      	b.n	801d944 <GW_set_frequency+0x8c>
 801d8ee:	edd7 7a00 	vldr	s15, [r7]
 801d8f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d8f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d8fa:	d809      	bhi.n	801d910 <GW_set_frequency+0x58>
 801d8fc:	4b13      	ldr	r3, [pc, #76]	@ (801d94c <GW_set_frequency+0x94>)
 801d8fe:	681b      	ldr	r3, [r3, #0]
 801d900:	2b00      	cmp	r3, #0
 801d902:	dd02      	ble.n	801d90a <GW_set_frequency+0x52>
 801d904:	4813      	ldr	r0, [pc, #76]	@ (801d954 <GW_set_frequency+0x9c>)
 801d906:	f005 fce9 	bl	80232dc <puts>
 801d90a:	f06f 0305 	mvn.w	r3, #5
 801d90e:	e019      	b.n	801d944 <GW_set_frequency+0x8c>
 801d910:	ed97 0a00 	vldr	s0, [r7]
 801d914:	6879      	ldr	r1, [r7, #4]
 801d916:	68b8      	ldr	r0, [r7, #8]
 801d918:	f001 ff6e 	bl	801f7f8 <HT_set_frequency>
 801d91c:	6178      	str	r0, [r7, #20]
 801d91e:	697b      	ldr	r3, [r7, #20]
 801d920:	2b00      	cmp	r3, #0
 801d922:	d001      	beq.n	801d928 <GW_set_frequency+0x70>
 801d924:	697b      	ldr	r3, [r7, #20]
 801d926:	e00d      	b.n	801d944 <GW_set_frequency+0x8c>
 801d928:	687b      	ldr	r3, [r7, #4]
 801d92a:	4619      	mov	r1, r3
 801d92c:	68f8      	ldr	r0, [r7, #12]
 801d92e:	f000 f815 	bl	801d95c <GW_set_buffer_length>
 801d932:	6178      	str	r0, [r7, #20]
 801d934:	4b05      	ldr	r3, [pc, #20]	@ (801d94c <GW_set_frequency+0x94>)
 801d936:	681b      	ldr	r3, [r3, #0]
 801d938:	2b02      	cmp	r3, #2
 801d93a:	dd02      	ble.n	801d942 <GW_set_frequency+0x8a>
 801d93c:	4806      	ldr	r0, [pc, #24]	@ (801d958 <GW_set_frequency+0xa0>)
 801d93e:	f005 fccd 	bl	80232dc <puts>
 801d942:	697b      	ldr	r3, [r7, #20]
 801d944:	4618      	mov	r0, r3
 801d946:	3718      	adds	r7, #24
 801d948:	46bd      	mov	sp, r7
 801d94a:	bd80      	pop	{r7, pc}
 801d94c:	200019c8 	.word	0x200019c8
 801d950:	080426d8 	.word	0x080426d8
 801d954:	08042704 	.word	0x08042704
 801d958:	08042738 	.word	0x08042738

0801d95c <GW_set_buffer_length>:
 801d95c:	b580      	push	{r7, lr}
 801d95e:	b084      	sub	sp, #16
 801d960:	af00      	add	r7, sp, #0
 801d962:	6078      	str	r0, [r7, #4]
 801d964:	6039      	str	r1, [r7, #0]
 801d966:	687b      	ldr	r3, [r7, #4]
 801d968:	2b00      	cmp	r3, #0
 801d96a:	d002      	beq.n	801d972 <GW_set_buffer_length+0x16>
 801d96c:	683b      	ldr	r3, [r7, #0]
 801d96e:	2b00      	cmp	r3, #0
 801d970:	d109      	bne.n	801d986 <GW_set_buffer_length+0x2a>
 801d972:	4b66      	ldr	r3, [pc, #408]	@ (801db0c <GW_set_buffer_length+0x1b0>)
 801d974:	681b      	ldr	r3, [r3, #0]
 801d976:	2b00      	cmp	r3, #0
 801d978:	dd02      	ble.n	801d980 <GW_set_buffer_length+0x24>
 801d97a:	4865      	ldr	r0, [pc, #404]	@ (801db10 <GW_set_buffer_length+0x1b4>)
 801d97c:	f005 fcae 	bl	80232dc <puts>
 801d980:	f06f 0301 	mvn.w	r3, #1
 801d984:	e0bd      	b.n	801db02 <GW_set_buffer_length+0x1a6>
 801d986:	687b      	ldr	r3, [r7, #4]
 801d988:	689b      	ldr	r3, [r3, #8]
 801d98a:	ee07 3a90 	vmov	s15, r3
 801d98e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801d992:	683b      	ldr	r3, [r7, #0]
 801d994:	edd3 7a03 	vldr	s15, [r3, #12]
 801d998:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d99c:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 801db14 <GW_set_buffer_length+0x1b8>
 801d9a0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801d9a4:	ee16 0a90 	vmov	r0, s13
 801d9a8:	f7fc f8ce 	bl	8019b48 <__aeabi_f2d>
 801d9ac:	4602      	mov	r2, r0
 801d9ae:	460b      	mov	r3, r1
 801d9b0:	ec43 2b10 	vmov	d0, r2, r3
 801d9b4:	f009 fa94 	bl	8026ee0 <ceil>
 801d9b8:	ec53 2b10 	vmov	r2, r3, d0
 801d9bc:	4610      	mov	r0, r2
 801d9be:	4619      	mov	r1, r3
 801d9c0:	f7fc fbca 	bl	801a158 <__aeabi_d2iz>
 801d9c4:	4602      	mov	r2, r0
 801d9c6:	687b      	ldr	r3, [r7, #4]
 801d9c8:	60da      	str	r2, [r3, #12]
 801d9ca:	687b      	ldr	r3, [r7, #4]
 801d9cc:	68db      	ldr	r3, [r3, #12]
 801d9ce:	2b01      	cmp	r3, #1
 801d9d0:	dc02      	bgt.n	801d9d8 <GW_set_buffer_length+0x7c>
 801d9d2:	687b      	ldr	r3, [r7, #4]
 801d9d4:	2202      	movs	r2, #2
 801d9d6:	60da      	str	r2, [r3, #12]
 801d9d8:	4b4c      	ldr	r3, [pc, #304]	@ (801db0c <GW_set_buffer_length+0x1b0>)
 801d9da:	681b      	ldr	r3, [r3, #0]
 801d9dc:	2b01      	cmp	r3, #1
 801d9de:	dd05      	ble.n	801d9ec <GW_set_buffer_length+0x90>
 801d9e0:	687b      	ldr	r3, [r7, #4]
 801d9e2:	68db      	ldr	r3, [r3, #12]
 801d9e4:	4619      	mov	r1, r3
 801d9e6:	484c      	ldr	r0, [pc, #304]	@ (801db18 <GW_set_buffer_length+0x1bc>)
 801d9e8:	f005 fc10 	bl	802320c <iprintf>
 801d9ec:	687b      	ldr	r3, [r7, #4]
 801d9ee:	f103 027c 	add.w	r2, r3, #124	@ 0x7c
 801d9f2:	687b      	ldr	r3, [r7, #4]
 801d9f4:	68db      	ldr	r3, [r3, #12]
 801d9f6:	4619      	mov	r1, r3
 801d9f8:	4610      	mov	r0, r2
 801d9fa:	f003 fd13 	bl	8021424 <RFBVM_init>
 801d9fe:	60b8      	str	r0, [r7, #8]
 801da00:	68bb      	ldr	r3, [r7, #8]
 801da02:	2b00      	cmp	r3, #0
 801da04:	d001      	beq.n	801da0a <GW_set_buffer_length+0xae>
 801da06:	68bb      	ldr	r3, [r7, #8]
 801da08:	e07b      	b.n	801db02 <GW_set_buffer_length+0x1a6>
 801da0a:	687b      	ldr	r3, [r7, #4]
 801da0c:	f503 7224 	add.w	r2, r3, #656	@ 0x290
 801da10:	687b      	ldr	r3, [r7, #4]
 801da12:	68db      	ldr	r3, [r3, #12]
 801da14:	4619      	mov	r1, r3
 801da16:	4610      	mov	r0, r2
 801da18:	f003 fd04 	bl	8021424 <RFBVM_init>
 801da1c:	60b8      	str	r0, [r7, #8]
 801da1e:	68bb      	ldr	r3, [r7, #8]
 801da20:	2b00      	cmp	r3, #0
 801da22:	d001      	beq.n	801da28 <GW_set_buffer_length+0xcc>
 801da24:	68bb      	ldr	r3, [r7, #8]
 801da26:	e06c      	b.n	801db02 <GW_set_buffer_length+0x1a6>
 801da28:	687b      	ldr	r3, [r7, #4]
 801da2a:	f203 42a4 	addw	r2, r3, #1188	@ 0x4a4
 801da2e:	687b      	ldr	r3, [r7, #4]
 801da30:	68db      	ldr	r3, [r3, #12]
 801da32:	4619      	mov	r1, r3
 801da34:	4610      	mov	r0, r2
 801da36:	f003 fcf5 	bl	8021424 <RFBVM_init>
 801da3a:	60b8      	str	r0, [r7, #8]
 801da3c:	68bb      	ldr	r3, [r7, #8]
 801da3e:	2b00      	cmp	r3, #0
 801da40:	d001      	beq.n	801da46 <GW_set_buffer_length+0xea>
 801da42:	68bb      	ldr	r3, [r7, #8]
 801da44:	e05d      	b.n	801db02 <GW_set_buffer_length+0x1a6>
 801da46:	687b      	ldr	r3, [r7, #4]
 801da48:	f503 62d7 	add.w	r2, r3, #1720	@ 0x6b8
 801da4c:	687b      	ldr	r3, [r7, #4]
 801da4e:	68db      	ldr	r3, [r3, #12]
 801da50:	4619      	mov	r1, r3
 801da52:	4610      	mov	r0, r2
 801da54:	f003 fce6 	bl	8021424 <RFBVM_init>
 801da58:	60b8      	str	r0, [r7, #8]
 801da5a:	68bb      	ldr	r3, [r7, #8]
 801da5c:	2b00      	cmp	r3, #0
 801da5e:	d001      	beq.n	801da64 <GW_set_buffer_length+0x108>
 801da60:	68bb      	ldr	r3, [r7, #8]
 801da62:	e04e      	b.n	801db02 <GW_set_buffer_length+0x1a6>
 801da64:	2300      	movs	r3, #0
 801da66:	60fb      	str	r3, [r7, #12]
 801da68:	e031      	b.n	801dace <GW_set_buffer_length+0x172>
 801da6a:	687b      	ldr	r3, [r7, #4]
 801da6c:	337c      	adds	r3, #124	@ 0x7c
 801da6e:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 801db1c <GW_set_buffer_length+0x1c0>
 801da72:	4618      	mov	r0, r3
 801da74:	f003 fd0c 	bl	8021490 <RFBVM_push>
 801da78:	4602      	mov	r2, r0
 801da7a:	68bb      	ldr	r3, [r7, #8]
 801da7c:	4413      	add	r3, r2
 801da7e:	60bb      	str	r3, [r7, #8]
 801da80:	687b      	ldr	r3, [r7, #4]
 801da82:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 801da86:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 801db1c <GW_set_buffer_length+0x1c0>
 801da8a:	4618      	mov	r0, r3
 801da8c:	f003 fd00 	bl	8021490 <RFBVM_push>
 801da90:	4602      	mov	r2, r0
 801da92:	68bb      	ldr	r3, [r7, #8]
 801da94:	4413      	add	r3, r2
 801da96:	60bb      	str	r3, [r7, #8]
 801da98:	687b      	ldr	r3, [r7, #4]
 801da9a:	f203 43a4 	addw	r3, r3, #1188	@ 0x4a4
 801da9e:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 801db1c <GW_set_buffer_length+0x1c0>
 801daa2:	4618      	mov	r0, r3
 801daa4:	f003 fcf4 	bl	8021490 <RFBVM_push>
 801daa8:	4602      	mov	r2, r0
 801daaa:	68bb      	ldr	r3, [r7, #8]
 801daac:	4413      	add	r3, r2
 801daae:	60bb      	str	r3, [r7, #8]
 801dab0:	687b      	ldr	r3, [r7, #4]
 801dab2:	f503 63d7 	add.w	r3, r3, #1720	@ 0x6b8
 801dab6:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 801db1c <GW_set_buffer_length+0x1c0>
 801daba:	4618      	mov	r0, r3
 801dabc:	f003 fce8 	bl	8021490 <RFBVM_push>
 801dac0:	4602      	mov	r2, r0
 801dac2:	68bb      	ldr	r3, [r7, #8]
 801dac4:	4413      	add	r3, r2
 801dac6:	60bb      	str	r3, [r7, #8]
 801dac8:	68fb      	ldr	r3, [r7, #12]
 801daca:	3301      	adds	r3, #1
 801dacc:	60fb      	str	r3, [r7, #12]
 801dace:	687b      	ldr	r3, [r7, #4]
 801dad0:	68db      	ldr	r3, [r3, #12]
 801dad2:	68fa      	ldr	r2, [r7, #12]
 801dad4:	429a      	cmp	r2, r3
 801dad6:	dbc8      	blt.n	801da6a <GW_set_buffer_length+0x10e>
 801dad8:	68bb      	ldr	r3, [r7, #8]
 801dada:	2b00      	cmp	r3, #0
 801dadc:	d009      	beq.n	801daf2 <GW_set_buffer_length+0x196>
 801dade:	4b0b      	ldr	r3, [pc, #44]	@ (801db0c <GW_set_buffer_length+0x1b0>)
 801dae0:	681b      	ldr	r3, [r3, #0]
 801dae2:	2b00      	cmp	r3, #0
 801dae4:	dd02      	ble.n	801daec <GW_set_buffer_length+0x190>
 801dae6:	480e      	ldr	r0, [pc, #56]	@ (801db20 <GW_set_buffer_length+0x1c4>)
 801dae8:	f005 fbf8 	bl	80232dc <puts>
 801daec:	f06f 0307 	mvn.w	r3, #7
 801daf0:	e007      	b.n	801db02 <GW_set_buffer_length+0x1a6>
 801daf2:	4b06      	ldr	r3, [pc, #24]	@ (801db0c <GW_set_buffer_length+0x1b0>)
 801daf4:	681b      	ldr	r3, [r3, #0]
 801daf6:	2b02      	cmp	r3, #2
 801daf8:	dd02      	ble.n	801db00 <GW_set_buffer_length+0x1a4>
 801dafa:	480a      	ldr	r0, [pc, #40]	@ (801db24 <GW_set_buffer_length+0x1c8>)
 801dafc:	f005 fbee 	bl	80232dc <puts>
 801db00:	68bb      	ldr	r3, [r7, #8]
 801db02:	4618      	mov	r0, r3
 801db04:	3710      	adds	r7, #16
 801db06:	46bd      	mov	sp, r7
 801db08:	bd80      	pop	{r7, pc}
 801db0a:	bf00      	nop
 801db0c:	200019c8 	.word	0x200019c8
 801db10:	0804275c 	.word	0x0804275c
 801db14:	447a0000 	.word	0x447a0000
 801db18:	08042790 	.word	0x08042790
 801db1c:	00000000 	.word	0x00000000
 801db20:	080427cc 	.word	0x080427cc
 801db24:	08042804 	.word	0x08042804

0801db28 <GW_run>:
 801db28:	b580      	push	{r7, lr}
 801db2a:	b086      	sub	sp, #24
 801db2c:	af00      	add	r7, sp, #0
 801db2e:	60f8      	str	r0, [r7, #12]
 801db30:	60b9      	str	r1, [r7, #8]
 801db32:	607a      	str	r2, [r7, #4]
 801db34:	68fb      	ldr	r3, [r7, #12]
 801db36:	2b00      	cmp	r3, #0
 801db38:	d005      	beq.n	801db46 <GW_run+0x1e>
 801db3a:	68bb      	ldr	r3, [r7, #8]
 801db3c:	2b00      	cmp	r3, #0
 801db3e:	d002      	beq.n	801db46 <GW_run+0x1e>
 801db40:	687b      	ldr	r3, [r7, #4]
 801db42:	2b00      	cmp	r3, #0
 801db44:	d109      	bne.n	801db5a <GW_run+0x32>
 801db46:	4b40      	ldr	r3, [pc, #256]	@ (801dc48 <GW_run+0x120>)
 801db48:	681b      	ldr	r3, [r3, #0]
 801db4a:	2b00      	cmp	r3, #0
 801db4c:	dd02      	ble.n	801db54 <GW_run+0x2c>
 801db4e:	483f      	ldr	r0, [pc, #252]	@ (801dc4c <GW_run+0x124>)
 801db50:	f005 fbc4 	bl	80232dc <puts>
 801db54:	f06f 0301 	mvn.w	r3, #1
 801db58:	e072      	b.n	801dc40 <GW_run+0x118>
 801db5a:	687b      	ldr	r3, [r7, #4]
 801db5c:	69da      	ldr	r2, [r3, #28]
 801db5e:	68fb      	ldr	r3, [r7, #12]
 801db60:	f8c3 2f4c 	str.w	r2, [r3, #3916]	@ 0xf4c
 801db64:	6879      	ldr	r1, [r7, #4]
 801db66:	68b8      	ldr	r0, [r7, #8]
 801db68:	f001 fff8 	bl	801fb5c <HT_run>
 801db6c:	6178      	str	r0, [r7, #20]
 801db6e:	697b      	ldr	r3, [r7, #20]
 801db70:	2b00      	cmp	r3, #0
 801db72:	d001      	beq.n	801db78 <GW_run+0x50>
 801db74:	697b      	ldr	r3, [r7, #20]
 801db76:	e063      	b.n	801dc40 <GW_run+0x118>
 801db78:	68bb      	ldr	r3, [r7, #8]
 801db7a:	f893 3168 	ldrb.w	r3, [r3, #360]	@ 0x168
 801db7e:	2b00      	cmp	r3, #0
 801db80:	d00b      	beq.n	801db9a <GW_run+0x72>
 801db82:	68fb      	ldr	r3, [r7, #12]
 801db84:	22c8      	movs	r2, #200	@ 0xc8
 801db86:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
 801db8a:	4b2f      	ldr	r3, [pc, #188]	@ (801dc48 <GW_run+0x120>)
 801db8c:	681b      	ldr	r3, [r3, #0]
 801db8e:	2b02      	cmp	r3, #2
 801db90:	dd0e      	ble.n	801dbb0 <GW_run+0x88>
 801db92:	482f      	ldr	r0, [pc, #188]	@ (801dc50 <GW_run+0x128>)
 801db94:	f005 fba2 	bl	80232dc <puts>
 801db98:	e00a      	b.n	801dbb0 <GW_run+0x88>
 801db9a:	68fb      	ldr	r3, [r7, #12]
 801db9c:	2264      	movs	r2, #100	@ 0x64
 801db9e:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
 801dba2:	4b29      	ldr	r3, [pc, #164]	@ (801dc48 <GW_run+0x120>)
 801dba4:	681b      	ldr	r3, [r3, #0]
 801dba6:	2b02      	cmp	r3, #2
 801dba8:	dd02      	ble.n	801dbb0 <GW_run+0x88>
 801dbaa:	482a      	ldr	r0, [pc, #168]	@ (801dc54 <GW_run+0x12c>)
 801dbac:	f005 fb96 	bl	80232dc <puts>
 801dbb0:	687b      	ldr	r3, [r7, #4]
 801dbb2:	461a      	mov	r2, r3
 801dbb4:	68b9      	ldr	r1, [r7, #8]
 801dbb6:	68f8      	ldr	r0, [r7, #12]
 801dbb8:	f000 f850 	bl	801dc5c <GW_update_hand_buffers>
 801dbbc:	6178      	str	r0, [r7, #20]
 801dbbe:	697b      	ldr	r3, [r7, #20]
 801dbc0:	2b00      	cmp	r3, #0
 801dbc2:	d001      	beq.n	801dbc8 <GW_run+0xa0>
 801dbc4:	697b      	ldr	r3, [r7, #20]
 801dbc6:	e03b      	b.n	801dc40 <GW_run+0x118>
 801dbc8:	687b      	ldr	r3, [r7, #4]
 801dbca:	4619      	mov	r1, r3
 801dbcc:	68f8      	ldr	r0, [r7, #12]
 801dbce:	f000 f99d 	bl	801df0c <GW_compute_speeds>
 801dbd2:	6178      	str	r0, [r7, #20]
 801dbd4:	697b      	ldr	r3, [r7, #20]
 801dbd6:	2b00      	cmp	r3, #0
 801dbd8:	d001      	beq.n	801dbde <GW_run+0xb6>
 801dbda:	697b      	ldr	r3, [r7, #20]
 801dbdc:	e030      	b.n	801dc40 <GW_run+0x118>
 801dbde:	68f8      	ldr	r0, [r7, #12]
 801dbe0:	f000 fc02 	bl	801e3e8 <GW_interpret_speeds>
 801dbe4:	6178      	str	r0, [r7, #20]
 801dbe6:	697b      	ldr	r3, [r7, #20]
 801dbe8:	2b00      	cmp	r3, #0
 801dbea:	d001      	beq.n	801dbf0 <GW_run+0xc8>
 801dbec:	697b      	ldr	r3, [r7, #20]
 801dbee:	e027      	b.n	801dc40 <GW_run+0x118>
 801dbf0:	687b      	ldr	r3, [r7, #4]
 801dbf2:	69db      	ldr	r3, [r3, #28]
 801dbf4:	461a      	mov	r2, r3
 801dbf6:	68b9      	ldr	r1, [r7, #8]
 801dbf8:	68f8      	ldr	r0, [r7, #12]
 801dbfa:	f001 f82d 	bl	801ec58 <GW_update_prediction>
 801dbfe:	6178      	str	r0, [r7, #20]
 801dc00:	697b      	ldr	r3, [r7, #20]
 801dc02:	2b00      	cmp	r3, #0
 801dc04:	d001      	beq.n	801dc0a <GW_run+0xe2>
 801dc06:	697b      	ldr	r3, [r7, #20]
 801dc08:	e01a      	b.n	801dc40 <GW_run+0x118>
 801dc0a:	687a      	ldr	r2, [r7, #4]
 801dc0c:	68b9      	ldr	r1, [r7, #8]
 801dc0e:	68f8      	ldr	r0, [r7, #12]
 801dc10:	f001 fa9a 	bl	801f148 <GW_filter_prediction>
 801dc14:	6178      	str	r0, [r7, #20]
 801dc16:	697b      	ldr	r3, [r7, #20]
 801dc18:	2b00      	cmp	r3, #0
 801dc1a:	d001      	beq.n	801dc20 <GW_run+0xf8>
 801dc1c:	697b      	ldr	r3, [r7, #20]
 801dc1e:	e00f      	b.n	801dc40 <GW_run+0x118>
 801dc20:	687b      	ldr	r3, [r7, #4]
 801dc22:	69db      	ldr	r3, [r3, #28]
 801dc24:	461a      	mov	r2, r3
 801dc26:	68b9      	ldr	r1, [r7, #8]
 801dc28:	68f8      	ldr	r0, [r7, #12]
 801dc2a:	f001 fb6d 	bl	801f308 <GW_level_control>
 801dc2e:	6178      	str	r0, [r7, #20]
 801dc30:	4b05      	ldr	r3, [pc, #20]	@ (801dc48 <GW_run+0x120>)
 801dc32:	681b      	ldr	r3, [r3, #0]
 801dc34:	2b02      	cmp	r3, #2
 801dc36:	dd02      	ble.n	801dc3e <GW_run+0x116>
 801dc38:	4807      	ldr	r0, [pc, #28]	@ (801dc58 <GW_run+0x130>)
 801dc3a:	f005 fb4f 	bl	80232dc <puts>
 801dc3e:	697b      	ldr	r3, [r7, #20]
 801dc40:	4618      	mov	r0, r3
 801dc42:	3718      	adds	r7, #24
 801dc44:	46bd      	mov	sp, r7
 801dc46:	bd80      	pop	{r7, pc}
 801dc48:	200019c8 	.word	0x200019c8
 801dc4c:	08042830 	.word	0x08042830
 801dc50:	08042858 	.word	0x08042858
 801dc54:	08042880 	.word	0x08042880
 801dc58:	080428a8 	.word	0x080428a8

0801dc5c <GW_update_hand_buffers>:
 801dc5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801dc60:	b092      	sub	sp, #72	@ 0x48
 801dc62:	af08      	add	r7, sp, #32
 801dc64:	60f8      	str	r0, [r7, #12]
 801dc66:	60b9      	str	r1, [r7, #8]
 801dc68:	607a      	str	r2, [r7, #4]
 801dc6a:	68fb      	ldr	r3, [r7, #12]
 801dc6c:	2b00      	cmp	r3, #0
 801dc6e:	d002      	beq.n	801dc76 <GW_update_hand_buffers+0x1a>
 801dc70:	68bb      	ldr	r3, [r7, #8]
 801dc72:	2b00      	cmp	r3, #0
 801dc74:	d109      	bne.n	801dc8a <GW_update_hand_buffers+0x2e>
 801dc76:	4b9f      	ldr	r3, [pc, #636]	@ (801def4 <GW_update_hand_buffers+0x298>)
 801dc78:	681b      	ldr	r3, [r3, #0]
 801dc7a:	2b00      	cmp	r3, #0
 801dc7c:	dd02      	ble.n	801dc84 <GW_update_hand_buffers+0x28>
 801dc7e:	489e      	ldr	r0, [pc, #632]	@ (801def8 <GW_update_hand_buffers+0x29c>)
 801dc80:	f005 fb2c 	bl	80232dc <puts>
 801dc84:	f06f 0301 	mvn.w	r3, #1
 801dc88:	e12f      	b.n	801deea <GW_update_hand_buffers+0x28e>
 801dc8a:	68bb      	ldr	r3, [r7, #8]
 801dc8c:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 801dc90:	2b00      	cmp	r3, #0
 801dc92:	f000 8119 	beq.w	801dec8 <GW_update_hand_buffers+0x26c>
 801dc96:	68bb      	ldr	r3, [r7, #8]
 801dc98:	f8d3 2178 	ldr.w	r2, [r3, #376]	@ 0x178
 801dc9c:	68fb      	ldr	r3, [r7, #12]
 801dc9e:	68db      	ldr	r3, [r3, #12]
 801dca0:	429a      	cmp	r2, r3
 801dca2:	f300 8111 	bgt.w	801dec8 <GW_update_hand_buffers+0x26c>
 801dca6:	68bb      	ldr	r3, [r7, #8]
 801dca8:	f503 70be 	add.w	r0, r3, #380	@ 0x17c
 801dcac:	68bb      	ldr	r3, [r7, #8]
 801dcae:	f8d3 2388 	ldr.w	r2, [r3, #904]	@ 0x388
 801dcb2:	68bb      	ldr	r3, [r7, #8]
 801dcb4:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 801dcb8:	1ad3      	subs	r3, r2, r3
 801dcba:	4619      	mov	r1, r3
 801dcbc:	f003 fccd 	bl	802165a <RFBVM_get_element_value>
 801dcc0:	ed87 0a07 	vstr	s0, [r7, #28]
 801dcc4:	68bb      	ldr	r3, [r7, #8]
 801dcc6:	f503 7064 	add.w	r0, r3, #912	@ 0x390
 801dcca:	68bb      	ldr	r3, [r7, #8]
 801dccc:	f8d3 259c 	ldr.w	r2, [r3, #1436]	@ 0x59c
 801dcd0:	68bb      	ldr	r3, [r7, #8]
 801dcd2:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 801dcd6:	1ad3      	subs	r3, r2, r3
 801dcd8:	4619      	mov	r1, r3
 801dcda:	f003 fcbe 	bl	802165a <RFBVM_get_element_value>
 801dcde:	ed87 0a06 	vstr	s0, [r7, #24]
 801dce2:	68bb      	ldr	r3, [r7, #8]
 801dce4:	f203 50a4 	addw	r0, r3, #1444	@ 0x5a4
 801dce8:	68bb      	ldr	r3, [r7, #8]
 801dcea:	f8d3 27b0 	ldr.w	r2, [r3, #1968]	@ 0x7b0
 801dcee:	68bb      	ldr	r3, [r7, #8]
 801dcf0:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 801dcf4:	1ad3      	subs	r3, r2, r3
 801dcf6:	4619      	mov	r1, r3
 801dcf8:	f003 fcaf 	bl	802165a <RFBVM_get_element_value>
 801dcfc:	ed87 0a05 	vstr	s0, [r7, #20]
 801dd00:	68bb      	ldr	r3, [r7, #8]
 801dd02:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 801dd06:	ee07 3a90 	vmov	s15, r3
 801dd0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dd0e:	edc7 7a04 	vstr	s15, [r7, #16]
 801dd12:	68bb      	ldr	r3, [r7, #8]
 801dd14:	f893 3168 	ldrb.w	r3, [r3, #360]	@ 0x168
 801dd18:	2b00      	cmp	r3, #0
 801dd1a:	d07c      	beq.n	801de16 <GW_update_hand_buffers+0x1ba>
 801dd1c:	68bb      	ldr	r3, [r7, #8]
 801dd1e:	f893 3169 	ldrb.w	r3, [r3, #361]	@ 0x169
 801dd22:	2b00      	cmp	r3, #0
 801dd24:	d077      	beq.n	801de16 <GW_update_hand_buffers+0x1ba>
 801dd26:	4b73      	ldr	r3, [pc, #460]	@ (801def4 <GW_update_hand_buffers+0x298>)
 801dd28:	681b      	ldr	r3, [r3, #0]
 801dd2a:	2b02      	cmp	r3, #2
 801dd2c:	dd1e      	ble.n	801dd6c <GW_update_hand_buffers+0x110>
 801dd2e:	69f8      	ldr	r0, [r7, #28]
 801dd30:	f7fb ff0a 	bl	8019b48 <__aeabi_f2d>
 801dd34:	4682      	mov	sl, r0
 801dd36:	468b      	mov	fp, r1
 801dd38:	69b8      	ldr	r0, [r7, #24]
 801dd3a:	f7fb ff05 	bl	8019b48 <__aeabi_f2d>
 801dd3e:	4604      	mov	r4, r0
 801dd40:	460d      	mov	r5, r1
 801dd42:	6978      	ldr	r0, [r7, #20]
 801dd44:	f7fb ff00 	bl	8019b48 <__aeabi_f2d>
 801dd48:	4680      	mov	r8, r0
 801dd4a:	4689      	mov	r9, r1
 801dd4c:	6938      	ldr	r0, [r7, #16]
 801dd4e:	f7fb fefb 	bl	8019b48 <__aeabi_f2d>
 801dd52:	4602      	mov	r2, r0
 801dd54:	460b      	mov	r3, r1
 801dd56:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801dd5a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801dd5e:	e9cd 4500 	strd	r4, r5, [sp]
 801dd62:	4652      	mov	r2, sl
 801dd64:	465b      	mov	r3, fp
 801dd66:	4865      	ldr	r0, [pc, #404]	@ (801defc <GW_update_hand_buffers+0x2a0>)
 801dd68:	f005 fa50 	bl	802320c <iprintf>
 801dd6c:	68fb      	ldr	r3, [r7, #12]
 801dd6e:	337c      	adds	r3, #124	@ 0x7c
 801dd70:	ed97 0a07 	vldr	s0, [r7, #28]
 801dd74:	4618      	mov	r0, r3
 801dd76:	f003 fbda 	bl	802152e <RFBVM_fill>
 801dd7a:	6238      	str	r0, [r7, #32]
 801dd7c:	68fb      	ldr	r3, [r7, #12]
 801dd7e:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 801dd82:	ed97 0a06 	vldr	s0, [r7, #24]
 801dd86:	4618      	mov	r0, r3
 801dd88:	f003 fbd1 	bl	802152e <RFBVM_fill>
 801dd8c:	4602      	mov	r2, r0
 801dd8e:	6a3b      	ldr	r3, [r7, #32]
 801dd90:	4413      	add	r3, r2
 801dd92:	623b      	str	r3, [r7, #32]
 801dd94:	68fb      	ldr	r3, [r7, #12]
 801dd96:	f203 43a4 	addw	r3, r3, #1188	@ 0x4a4
 801dd9a:	ed97 0a05 	vldr	s0, [r7, #20]
 801dd9e:	4618      	mov	r0, r3
 801dda0:	f003 fbc5 	bl	802152e <RFBVM_fill>
 801dda4:	4602      	mov	r2, r0
 801dda6:	6a3b      	ldr	r3, [r7, #32]
 801dda8:	4413      	add	r3, r2
 801ddaa:	623b      	str	r3, [r7, #32]
 801ddac:	2300      	movs	r3, #0
 801ddae:	627b      	str	r3, [r7, #36]	@ 0x24
 801ddb0:	e026      	b.n	801de00 <GW_update_hand_buffers+0x1a4>
 801ddb2:	68fb      	ldr	r3, [r7, #12]
 801ddb4:	f503 60d7 	add.w	r0, r3, #1720	@ 0x6b8
 801ddb8:	68fb      	ldr	r3, [r7, #12]
 801ddba:	f8d3 38c4 	ldr.w	r3, [r3, #2244]	@ 0x8c4
 801ddbe:	1e5a      	subs	r2, r3, #1
 801ddc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ddc2:	1ad2      	subs	r2, r2, r3
 801ddc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ddc6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801ddca:	fb01 f303 	mul.w	r3, r1, r3
 801ddce:	ee07 3a90 	vmov	s15, r3
 801ddd2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801ddd6:	687b      	ldr	r3, [r7, #4]
 801ddd8:	ed93 7a03 	vldr	s14, [r3, #12]
 801dddc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801dde0:	ed97 7a04 	vldr	s14, [r7, #16]
 801dde4:	ee77 7a67 	vsub.f32	s15, s14, s15
 801dde8:	eeb0 0a67 	vmov.f32	s0, s15
 801ddec:	4611      	mov	r1, r2
 801ddee:	f003 fc4f 	bl	8021690 <RFBVM_set_element_value>
 801ddf2:	4602      	mov	r2, r0
 801ddf4:	6a3b      	ldr	r3, [r7, #32]
 801ddf6:	4413      	add	r3, r2
 801ddf8:	623b      	str	r3, [r7, #32]
 801ddfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ddfc:	3301      	adds	r3, #1
 801ddfe:	627b      	str	r3, [r7, #36]	@ 0x24
 801de00:	68fb      	ldr	r3, [r7, #12]
 801de02:	f8d3 38c4 	ldr.w	r3, [r3, #2244]	@ 0x8c4
 801de06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801de08:	429a      	cmp	r2, r3
 801de0a:	dbd2      	blt.n	801ddb2 <GW_update_hand_buffers+0x156>
 801de0c:	6a3b      	ldr	r3, [r7, #32]
 801de0e:	2b00      	cmp	r3, #0
 801de10:	d059      	beq.n	801dec6 <GW_update_hand_buffers+0x26a>
 801de12:	6a3b      	ldr	r3, [r7, #32]
 801de14:	e069      	b.n	801deea <GW_update_hand_buffers+0x28e>
 801de16:	4b37      	ldr	r3, [pc, #220]	@ (801def4 <GW_update_hand_buffers+0x298>)
 801de18:	681b      	ldr	r3, [r3, #0]
 801de1a:	2b02      	cmp	r3, #2
 801de1c:	dd22      	ble.n	801de64 <GW_update_hand_buffers+0x208>
 801de1e:	69f8      	ldr	r0, [r7, #28]
 801de20:	f7fb fe92 	bl	8019b48 <__aeabi_f2d>
 801de24:	4682      	mov	sl, r0
 801de26:	468b      	mov	fp, r1
 801de28:	69b8      	ldr	r0, [r7, #24]
 801de2a:	f7fb fe8d 	bl	8019b48 <__aeabi_f2d>
 801de2e:	4604      	mov	r4, r0
 801de30:	460d      	mov	r5, r1
 801de32:	6978      	ldr	r0, [r7, #20]
 801de34:	f7fb fe88 	bl	8019b48 <__aeabi_f2d>
 801de38:	4680      	mov	r8, r0
 801de3a:	4689      	mov	r9, r1
 801de3c:	6938      	ldr	r0, [r7, #16]
 801de3e:	f7fb fe83 	bl	8019b48 <__aeabi_f2d>
 801de42:	4602      	mov	r2, r0
 801de44:	460b      	mov	r3, r1
 801de46:	68b9      	ldr	r1, [r7, #8]
 801de48:	f8d1 1178 	ldr.w	r1, [r1, #376]	@ 0x178
 801de4c:	9106      	str	r1, [sp, #24]
 801de4e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801de52:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801de56:	e9cd 4500 	strd	r4, r5, [sp]
 801de5a:	4652      	mov	r2, sl
 801de5c:	465b      	mov	r3, fp
 801de5e:	4828      	ldr	r0, [pc, #160]	@ (801df00 <GW_update_hand_buffers+0x2a4>)
 801de60:	f005 f9d4 	bl	802320c <iprintf>
 801de64:	68fb      	ldr	r3, [r7, #12]
 801de66:	337c      	adds	r3, #124	@ 0x7c
 801de68:	ed97 0a07 	vldr	s0, [r7, #28]
 801de6c:	4618      	mov	r0, r3
 801de6e:	f003 fb0f 	bl	8021490 <RFBVM_push>
 801de72:	6238      	str	r0, [r7, #32]
 801de74:	68fb      	ldr	r3, [r7, #12]
 801de76:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 801de7a:	ed97 0a06 	vldr	s0, [r7, #24]
 801de7e:	4618      	mov	r0, r3
 801de80:	f003 fb06 	bl	8021490 <RFBVM_push>
 801de84:	4602      	mov	r2, r0
 801de86:	6a3b      	ldr	r3, [r7, #32]
 801de88:	4413      	add	r3, r2
 801de8a:	623b      	str	r3, [r7, #32]
 801de8c:	68fb      	ldr	r3, [r7, #12]
 801de8e:	f203 43a4 	addw	r3, r3, #1188	@ 0x4a4
 801de92:	ed97 0a05 	vldr	s0, [r7, #20]
 801de96:	4618      	mov	r0, r3
 801de98:	f003 fafa 	bl	8021490 <RFBVM_push>
 801de9c:	4602      	mov	r2, r0
 801de9e:	6a3b      	ldr	r3, [r7, #32]
 801dea0:	4413      	add	r3, r2
 801dea2:	623b      	str	r3, [r7, #32]
 801dea4:	68fb      	ldr	r3, [r7, #12]
 801dea6:	f503 63d7 	add.w	r3, r3, #1720	@ 0x6b8
 801deaa:	ed97 0a04 	vldr	s0, [r7, #16]
 801deae:	4618      	mov	r0, r3
 801deb0:	f003 faee 	bl	8021490 <RFBVM_push>
 801deb4:	4602      	mov	r2, r0
 801deb6:	6a3b      	ldr	r3, [r7, #32]
 801deb8:	4413      	add	r3, r2
 801deba:	623b      	str	r3, [r7, #32]
 801debc:	6a3b      	ldr	r3, [r7, #32]
 801debe:	2b00      	cmp	r3, #0
 801dec0:	d00a      	beq.n	801ded8 <GW_update_hand_buffers+0x27c>
 801dec2:	6a3b      	ldr	r3, [r7, #32]
 801dec4:	e011      	b.n	801deea <GW_update_hand_buffers+0x28e>
 801dec6:	e007      	b.n	801ded8 <GW_update_hand_buffers+0x27c>
 801dec8:	4b0a      	ldr	r3, [pc, #40]	@ (801def4 <GW_update_hand_buffers+0x298>)
 801deca:	681b      	ldr	r3, [r3, #0]
 801decc:	2b02      	cmp	r3, #2
 801dece:	dd04      	ble.n	801deda <GW_update_hand_buffers+0x27e>
 801ded0:	480c      	ldr	r0, [pc, #48]	@ (801df04 <GW_update_hand_buffers+0x2a8>)
 801ded2:	f005 fa03 	bl	80232dc <puts>
 801ded6:	e000      	b.n	801deda <GW_update_hand_buffers+0x27e>
 801ded8:	bf00      	nop
 801deda:	4b06      	ldr	r3, [pc, #24]	@ (801def4 <GW_update_hand_buffers+0x298>)
 801dedc:	681b      	ldr	r3, [r3, #0]
 801dede:	2b02      	cmp	r3, #2
 801dee0:	dd02      	ble.n	801dee8 <GW_update_hand_buffers+0x28c>
 801dee2:	4809      	ldr	r0, [pc, #36]	@ (801df08 <GW_update_hand_buffers+0x2ac>)
 801dee4:	f005 f9fa 	bl	80232dc <puts>
 801dee8:	2300      	movs	r3, #0
 801deea:	4618      	mov	r0, r3
 801deec:	3728      	adds	r7, #40	@ 0x28
 801deee:	46bd      	mov	sp, r7
 801def0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801def4:	200019c8 	.word	0x200019c8
 801def8:	080428c8 	.word	0x080428c8
 801defc:	08042900 	.word	0x08042900
 801df00:	08042964 	.word	0x08042964
 801df04:	080429c4 	.word	0x080429c4
 801df08:	080429f0 	.word	0x080429f0

0801df0c <GW_compute_speeds>:
 801df0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801df10:	ed2d 8b02 	vpush	{d8}
 801df14:	b0ac      	sub	sp, #176	@ 0xb0
 801df16:	af0e      	add	r7, sp, #56	@ 0x38
 801df18:	6278      	str	r0, [r7, #36]	@ 0x24
 801df1a:	6239      	str	r1, [r7, #32]
 801df1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801df1e:	2b00      	cmp	r3, #0
 801df20:	d002      	beq.n	801df28 <GW_compute_speeds+0x1c>
 801df22:	6a3b      	ldr	r3, [r7, #32]
 801df24:	2b00      	cmp	r3, #0
 801df26:	d109      	bne.n	801df3c <GW_compute_speeds+0x30>
 801df28:	4baf      	ldr	r3, [pc, #700]	@ (801e1e8 <GW_compute_speeds+0x2dc>)
 801df2a:	681b      	ldr	r3, [r3, #0]
 801df2c:	2b00      	cmp	r3, #0
 801df2e:	dd02      	ble.n	801df36 <GW_compute_speeds+0x2a>
 801df30:	48ae      	ldr	r0, [pc, #696]	@ (801e1ec <GW_compute_speeds+0x2e0>)
 801df32:	f005 f9d3 	bl	80232dc <puts>
 801df36:	f06f 0301 	mvn.w	r3, #1
 801df3a:	e243      	b.n	801e3c4 <GW_compute_speeds+0x4b8>
 801df3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801df3e:	68db      	ldr	r3, [r3, #12]
 801df40:	647b      	str	r3, [r7, #68]	@ 0x44
 801df42:	f04f 0300 	mov.w	r3, #0
 801df46:	673b      	str	r3, [r7, #112]	@ 0x70
 801df48:	f04f 0300 	mov.w	r3, #0
 801df4c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801df4e:	f04f 0300 	mov.w	r3, #0
 801df52:	66bb      	str	r3, [r7, #104]	@ 0x68
 801df54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801df56:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801df5a:	2b00      	cmp	r3, #0
 801df5c:	f000 814e 	beq.w	801e1fc <GW_compute_speeds+0x2f0>
 801df60:	4ba1      	ldr	r3, [pc, #644]	@ (801e1e8 <GW_compute_speeds+0x2dc>)
 801df62:	681b      	ldr	r3, [r3, #0]
 801df64:	2b02      	cmp	r3, #2
 801df66:	dd02      	ble.n	801df6e <GW_compute_speeds+0x62>
 801df68:	48a1      	ldr	r0, [pc, #644]	@ (801e1f0 <GW_compute_speeds+0x2e4>)
 801df6a:	f005 f9b7 	bl	80232dc <puts>
 801df6e:	f04f 0300 	mov.w	r3, #0
 801df72:	667b      	str	r3, [r7, #100]	@ 0x64
 801df74:	f04f 0300 	mov.w	r3, #0
 801df78:	663b      	str	r3, [r7, #96]	@ 0x60
 801df7a:	f04f 0300 	mov.w	r3, #0
 801df7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801df80:	f04f 0300 	mov.w	r3, #0
 801df84:	65bb      	str	r3, [r7, #88]	@ 0x58
 801df86:	f04f 0300 	mov.w	r3, #0
 801df8a:	657b      	str	r3, [r7, #84]	@ 0x54
 801df8c:	f04f 0300 	mov.w	r3, #0
 801df90:	653b      	str	r3, [r7, #80]	@ 0x50
 801df92:	f04f 0300 	mov.w	r3, #0
 801df96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801df98:	f04f 0300 	mov.w	r3, #0
 801df9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801df9e:	2300      	movs	r3, #0
 801dfa0:	677b      	str	r3, [r7, #116]	@ 0x74
 801dfa2:	e079      	b.n	801e098 <GW_compute_speeds+0x18c>
 801dfa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dfa6:	337c      	adds	r3, #124	@ 0x7c
 801dfa8:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 801dfaa:	4618      	mov	r0, r3
 801dfac:	f003 fb55 	bl	802165a <RFBVM_get_element_value>
 801dfb0:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
 801dfb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dfb6:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 801dfba:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 801dfbc:	4618      	mov	r0, r3
 801dfbe:	f003 fb4c 	bl	802165a <RFBVM_get_element_value>
 801dfc2:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
 801dfc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dfc8:	f203 43a4 	addw	r3, r3, #1188	@ 0x4a4
 801dfcc:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 801dfce:	4618      	mov	r0, r3
 801dfd0:	f003 fb43 	bl	802165a <RFBVM_get_element_value>
 801dfd4:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
 801dfd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dfda:	f503 63d7 	add.w	r3, r3, #1720	@ 0x6b8
 801dfde:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 801dfe0:	4618      	mov	r0, r3
 801dfe2:	f003 fb3a 	bl	802165a <RFBVM_get_element_value>
 801dfe6:	eeb0 7a40 	vmov.f32	s14, s0
 801dfea:	eddf 6a82 	vldr	s13, [pc, #520]	@ 801e1f4 <GW_compute_speeds+0x2e8>
 801dfee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801dff2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
 801dff6:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 801dffa:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 801dffe:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e002:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
 801e006:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 801e00a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801e00e:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 801e012:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e016:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
 801e01a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 801e01e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 801e022:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e026:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 801e02a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e02e:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
 801e032:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 801e036:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 801e03a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e03e:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 801e042:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e046:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
 801e04a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 801e04e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 801e052:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e056:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 801e05a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e05e:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
 801e062:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 801e066:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 801e06a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e06e:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
 801e072:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 801e076:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 801e07a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e07e:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
 801e082:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 801e086:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 801e08a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e08e:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
 801e092:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801e094:	3301      	adds	r3, #1
 801e096:	677b      	str	r3, [r7, #116]	@ 0x74
 801e098:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 801e09a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e09c:	429a      	cmp	r2, r3
 801e09e:	db81      	blt.n	801dfa4 <GW_compute_speeds+0x98>
 801e0a0:	4b51      	ldr	r3, [pc, #324]	@ (801e1e8 <GW_compute_speeds+0x2dc>)
 801e0a2:	681b      	ldr	r3, [r3, #0]
 801e0a4:	2b02      	cmp	r3, #2
 801e0a6:	dd40      	ble.n	801e12a <GW_compute_speeds+0x21e>
 801e0a8:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 801e0aa:	f7fb fd4d 	bl	8019b48 <__aeabi_f2d>
 801e0ae:	e9c7 0106 	strd	r0, r1, [r7, #24]
 801e0b2:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 801e0b4:	f7fb fd48 	bl	8019b48 <__aeabi_f2d>
 801e0b8:	4682      	mov	sl, r0
 801e0ba:	468b      	mov	fp, r1
 801e0bc:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 801e0be:	f7fb fd43 	bl	8019b48 <__aeabi_f2d>
 801e0c2:	e9c7 0104 	strd	r0, r1, [r7, #16]
 801e0c6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801e0c8:	f7fb fd3e 	bl	8019b48 <__aeabi_f2d>
 801e0cc:	e9c7 0102 	strd	r0, r1, [r7, #8]
 801e0d0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801e0d2:	f7fb fd39 	bl	8019b48 <__aeabi_f2d>
 801e0d6:	e9c7 0100 	strd	r0, r1, [r7]
 801e0da:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801e0dc:	f7fb fd34 	bl	8019b48 <__aeabi_f2d>
 801e0e0:	4680      	mov	r8, r0
 801e0e2:	4689      	mov	r9, r1
 801e0e4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801e0e6:	f7fb fd2f 	bl	8019b48 <__aeabi_f2d>
 801e0ea:	4604      	mov	r4, r0
 801e0ec:	460d      	mov	r5, r1
 801e0ee:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 801e0f0:	f7fb fd2a 	bl	8019b48 <__aeabi_f2d>
 801e0f4:	4602      	mov	r2, r0
 801e0f6:	460b      	mov	r3, r1
 801e0f8:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801e0fc:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
 801e100:	e9cd 8908 	strd	r8, r9, [sp, #32]
 801e104:	ed97 7b00 	vldr	d7, [r7]
 801e108:	ed8d 7b06 	vstr	d7, [sp, #24]
 801e10c:	ed97 7b02 	vldr	d7, [r7, #8]
 801e110:	ed8d 7b04 	vstr	d7, [sp, #16]
 801e114:	ed97 7b04 	vldr	d7, [r7, #16]
 801e118:	ed8d 7b02 	vstr	d7, [sp, #8]
 801e11c:	e9cd ab00 	strd	sl, fp, [sp]
 801e120:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801e124:	4834      	ldr	r0, [pc, #208]	@ (801e1f8 <GW_compute_speeds+0x2ec>)
 801e126:	f005 f871 	bl	802320c <iprintf>
 801e12a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e12c:	ee07 3a90 	vmov	s15, r3
 801e130:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801e134:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 801e138:	ee27 7a27 	vmul.f32	s14, s14, s15
 801e13c:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 801e140:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801e144:	ee77 7a67 	vsub.f32	s15, s14, s15
 801e148:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
 801e14c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 801e150:	eef5 7a40 	vcmp.f32	s15, #0.0
 801e154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e158:	f000 8101 	beq.w	801e35e <GW_compute_speeds+0x452>
 801e15c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e15e:	ee07 3a90 	vmov	s15, r3
 801e162:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801e166:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 801e16a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801e16e:	edd7 6a19 	vldr	s13, [r7, #100]	@ 0x64
 801e172:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 801e176:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801e17a:	ee77 6a67 	vsub.f32	s13, s14, s15
 801e17e:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 801e182:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e186:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
 801e18a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e18c:	ee07 3a90 	vmov	s15, r3
 801e190:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801e194:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 801e198:	ee27 7a27 	vmul.f32	s14, s14, s15
 801e19c:	edd7 6a19 	vldr	s13, [r7, #100]	@ 0x64
 801e1a0:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 801e1a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801e1a8:	ee77 6a67 	vsub.f32	s13, s14, s15
 801e1ac:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 801e1b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e1b4:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
 801e1b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e1ba:	ee07 3a90 	vmov	s15, r3
 801e1be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801e1c2:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 801e1c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 801e1ca:	edd7 6a19 	vldr	s13, [r7, #100]	@ 0x64
 801e1ce:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 801e1d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801e1d6:	ee77 6a67 	vsub.f32	s13, s14, s15
 801e1da:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 801e1de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e1e2:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
 801e1e6:	e0ba      	b.n	801e35e <GW_compute_speeds+0x452>
 801e1e8:	200019c8 	.word	0x200019c8
 801e1ec:	08042a20 	.word	0x08042a20
 801e1f0:	08042a54 	.word	0x08042a54
 801e1f4:	447a0000 	.word	0x447a0000
 801e1f8:	08042a88 	.word	0x08042a88
 801e1fc:	4b75      	ldr	r3, [pc, #468]	@ (801e3d4 <GW_compute_speeds+0x4c8>)
 801e1fe:	681b      	ldr	r3, [r3, #0]
 801e200:	2b02      	cmp	r3, #2
 801e202:	dd02      	ble.n	801e20a <GW_compute_speeds+0x2fe>
 801e204:	4874      	ldr	r0, [pc, #464]	@ (801e3d8 <GW_compute_speeds+0x4cc>)
 801e206:	f005 f869 	bl	80232dc <puts>
 801e20a:	6a3b      	ldr	r3, [r7, #32]
 801e20c:	edd3 7a03 	vldr	s15, [r3, #12]
 801e210:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 801e214:	ee27 7a87 	vmul.f32	s14, s15, s14
 801e218:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e21a:	ee07 3a90 	vmov	s15, r3
 801e21e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e222:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801e226:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e228:	fb03 f303 	mul.w	r3, r3, r3
 801e22c:	3b01      	subs	r3, #1
 801e22e:	ee07 3a90 	vmov	s15, r3
 801e232:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801e236:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e23a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
 801e23e:	6a3b      	ldr	r3, [r7, #32]
 801e240:	edd3 7a03 	vldr	s15, [r3, #12]
 801e244:	eeb9 7a08 	vmov.f32	s14, #152	@ 0xc0c00000 -6.0
 801e248:	ee27 7a87 	vmul.f32	s14, s15, s14
 801e24c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e24e:	ee07 3a90 	vmov	s15, r3
 801e252:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e256:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801e25a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e25c:	3301      	adds	r3, #1
 801e25e:	ee07 3a90 	vmov	s15, r3
 801e262:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801e266:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e26a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 801e26e:	4b59      	ldr	r3, [pc, #356]	@ (801e3d4 <GW_compute_speeds+0x4c8>)
 801e270:	681b      	ldr	r3, [r3, #0]
 801e272:	2b02      	cmp	r3, #2
 801e274:	dd10      	ble.n	801e298 <GW_compute_speeds+0x38c>
 801e276:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801e278:	f7fb fc66 	bl	8019b48 <__aeabi_f2d>
 801e27c:	4604      	mov	r4, r0
 801e27e:	460d      	mov	r5, r1
 801e280:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801e282:	f7fb fc61 	bl	8019b48 <__aeabi_f2d>
 801e286:	4602      	mov	r2, r0
 801e288:	460b      	mov	r3, r1
 801e28a:	e9cd 2300 	strd	r2, r3, [sp]
 801e28e:	4622      	mov	r2, r4
 801e290:	462b      	mov	r3, r5
 801e292:	4852      	ldr	r0, [pc, #328]	@ (801e3dc <GW_compute_speeds+0x4d0>)
 801e294:	f004 ffba 	bl	802320c <iprintf>
 801e298:	2300      	movs	r3, #0
 801e29a:	677b      	str	r3, [r7, #116]	@ 0x74
 801e29c:	e05b      	b.n	801e356 <GW_compute_speeds+0x44a>
 801e29e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801e2a0:	ee07 3a90 	vmov	s15, r3
 801e2a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801e2a8:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 801e2ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 801e2b0:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 801e2b4:	ee37 8a27 	vadd.f32	s16, s14, s15
 801e2b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e2ba:	337c      	adds	r3, #124	@ 0x7c
 801e2bc:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 801e2be:	4618      	mov	r0, r3
 801e2c0:	f003 f9cb 	bl	802165a <RFBVM_get_element_value>
 801e2c4:	eef0 7a40 	vmov.f32	s15, s0
 801e2c8:	ee68 7a27 	vmul.f32	s15, s16, s15
 801e2cc:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 801e2d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e2d4:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
 801e2d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801e2da:	ee07 3a90 	vmov	s15, r3
 801e2de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801e2e2:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 801e2e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 801e2ea:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 801e2ee:	ee37 8a27 	vadd.f32	s16, s14, s15
 801e2f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e2f4:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 801e2f8:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 801e2fa:	4618      	mov	r0, r3
 801e2fc:	f003 f9ad 	bl	802165a <RFBVM_get_element_value>
 801e300:	eef0 7a40 	vmov.f32	s15, s0
 801e304:	ee68 7a27 	vmul.f32	s15, s16, s15
 801e308:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 801e30c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e310:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
 801e314:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801e316:	ee07 3a90 	vmov	s15, r3
 801e31a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801e31e:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 801e322:	ee27 7a27 	vmul.f32	s14, s14, s15
 801e326:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 801e32a:	ee37 8a27 	vadd.f32	s16, s14, s15
 801e32e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e330:	f203 43a4 	addw	r3, r3, #1188	@ 0x4a4
 801e334:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 801e336:	4618      	mov	r0, r3
 801e338:	f003 f98f 	bl	802165a <RFBVM_get_element_value>
 801e33c:	eef0 7a40 	vmov.f32	s15, s0
 801e340:	ee68 7a27 	vmul.f32	s15, s16, s15
 801e344:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 801e348:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e34c:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
 801e350:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801e352:	3301      	adds	r3, #1
 801e354:	677b      	str	r3, [r7, #116]	@ 0x74
 801e356:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 801e358:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e35a:	429a      	cmp	r2, r3
 801e35c:	db9f      	blt.n	801e29e <GW_compute_speeds+0x392>
 801e35e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e360:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801e362:	671a      	str	r2, [r3, #112]	@ 0x70
 801e364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e366:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801e368:	675a      	str	r2, [r3, #116]	@ 0x74
 801e36a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e36c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801e36e:	679a      	str	r2, [r3, #120]	@ 0x78
 801e370:	4b18      	ldr	r3, [pc, #96]	@ (801e3d4 <GW_compute_speeds+0x4c8>)
 801e372:	681b      	ldr	r3, [r3, #0]
 801e374:	2b01      	cmp	r3, #1
 801e376:	dd1d      	ble.n	801e3b4 <GW_compute_speeds+0x4a8>
 801e378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e37a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e37c:	4618      	mov	r0, r3
 801e37e:	f7fb fbe3 	bl	8019b48 <__aeabi_f2d>
 801e382:	4680      	mov	r8, r0
 801e384:	4689      	mov	r9, r1
 801e386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e388:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e38a:	4618      	mov	r0, r3
 801e38c:	f7fb fbdc 	bl	8019b48 <__aeabi_f2d>
 801e390:	4604      	mov	r4, r0
 801e392:	460d      	mov	r5, r1
 801e394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e396:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801e398:	4618      	mov	r0, r3
 801e39a:	f7fb fbd5 	bl	8019b48 <__aeabi_f2d>
 801e39e:	4602      	mov	r2, r0
 801e3a0:	460b      	mov	r3, r1
 801e3a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801e3a6:	e9cd 4500 	strd	r4, r5, [sp]
 801e3aa:	4642      	mov	r2, r8
 801e3ac:	464b      	mov	r3, r9
 801e3ae:	480c      	ldr	r0, [pc, #48]	@ (801e3e0 <GW_compute_speeds+0x4d4>)
 801e3b0:	f004 ff2c 	bl	802320c <iprintf>
 801e3b4:	4b07      	ldr	r3, [pc, #28]	@ (801e3d4 <GW_compute_speeds+0x4c8>)
 801e3b6:	681b      	ldr	r3, [r3, #0]
 801e3b8:	2b02      	cmp	r3, #2
 801e3ba:	dd02      	ble.n	801e3c2 <GW_compute_speeds+0x4b6>
 801e3bc:	4809      	ldr	r0, [pc, #36]	@ (801e3e4 <GW_compute_speeds+0x4d8>)
 801e3be:	f004 ff8d 	bl	80232dc <puts>
 801e3c2:	2300      	movs	r3, #0
 801e3c4:	4618      	mov	r0, r3
 801e3c6:	3778      	adds	r7, #120	@ 0x78
 801e3c8:	46bd      	mov	sp, r7
 801e3ca:	ecbd 8b02 	vpop	{d8}
 801e3ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801e3d2:	bf00      	nop
 801e3d4:	200019c8 	.word	0x200019c8
 801e3d8:	08042adc 	.word	0x08042adc
 801e3dc:	08042b0c 	.word	0x08042b0c
 801e3e0:	08042b38 	.word	0x08042b38
 801e3e4:	08042b74 	.word	0x08042b74

0801e3e8 <GW_interpret_speeds>:
 801e3e8:	b5b0      	push	{r4, r5, r7, lr}
 801e3ea:	b0aa      	sub	sp, #168	@ 0xa8
 801e3ec:	af0a      	add	r7, sp, #40	@ 0x28
 801e3ee:	6178      	str	r0, [r7, #20]
 801e3f0:	697b      	ldr	r3, [r7, #20]
 801e3f2:	2b00      	cmp	r3, #0
 801e3f4:	d10a      	bne.n	801e40c <GW_interpret_speeds+0x24>
 801e3f6:	4bab      	ldr	r3, [pc, #684]	@ (801e6a4 <GW_interpret_speeds+0x2bc>)
 801e3f8:	681b      	ldr	r3, [r3, #0]
 801e3fa:	2b00      	cmp	r3, #0
 801e3fc:	dd02      	ble.n	801e404 <GW_interpret_speeds+0x1c>
 801e3fe:	48aa      	ldr	r0, [pc, #680]	@ (801e6a8 <GW_interpret_speeds+0x2c0>)
 801e400:	f004 ff6c 	bl	80232dc <puts>
 801e404:	f06f 0301 	mvn.w	r3, #1
 801e408:	f000 bc19 	b.w	801ec3e <GW_interpret_speeds+0x856>
 801e40c:	697b      	ldr	r3, [r7, #20]
 801e40e:	681b      	ldr	r3, [r3, #0]
 801e410:	f003 0301 	and.w	r3, r3, #1
 801e414:	2b00      	cmp	r3, #0
 801e416:	d105      	bne.n	801e424 <GW_interpret_speeds+0x3c>
 801e418:	697b      	ldr	r3, [r7, #20]
 801e41a:	681b      	ldr	r3, [r3, #0]
 801e41c:	f003 0302 	and.w	r3, r3, #2
 801e420:	2b00      	cmp	r3, #0
 801e422:	d001      	beq.n	801e428 <GW_interpret_speeds+0x40>
 801e424:	2301      	movs	r3, #1
 801e426:	e000      	b.n	801e42a <GW_interpret_speeds+0x42>
 801e428:	2300      	movs	r3, #0
 801e42a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 801e42e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801e432:	f003 0301 	and.w	r3, r3, #1
 801e436:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 801e43a:	697b      	ldr	r3, [r7, #20]
 801e43c:	681b      	ldr	r3, [r3, #0]
 801e43e:	f003 0304 	and.w	r3, r3, #4
 801e442:	2b00      	cmp	r3, #0
 801e444:	d105      	bne.n	801e452 <GW_interpret_speeds+0x6a>
 801e446:	697b      	ldr	r3, [r7, #20]
 801e448:	681b      	ldr	r3, [r3, #0]
 801e44a:	f003 0308 	and.w	r3, r3, #8
 801e44e:	2b00      	cmp	r3, #0
 801e450:	d001      	beq.n	801e456 <GW_interpret_speeds+0x6e>
 801e452:	2301      	movs	r3, #1
 801e454:	e000      	b.n	801e458 <GW_interpret_speeds+0x70>
 801e456:	2300      	movs	r3, #0
 801e458:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 801e45c:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 801e460:	f003 0301 	and.w	r3, r3, #1
 801e464:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 801e468:	697b      	ldr	r3, [r7, #20]
 801e46a:	681b      	ldr	r3, [r3, #0]
 801e46c:	f003 0310 	and.w	r3, r3, #16
 801e470:	2b00      	cmp	r3, #0
 801e472:	d10b      	bne.n	801e48c <GW_interpret_speeds+0xa4>
 801e474:	697b      	ldr	r3, [r7, #20]
 801e476:	681b      	ldr	r3, [r3, #0]
 801e478:	f003 0320 	and.w	r3, r3, #32
 801e47c:	2b00      	cmp	r3, #0
 801e47e:	d105      	bne.n	801e48c <GW_interpret_speeds+0xa4>
 801e480:	697b      	ldr	r3, [r7, #20]
 801e482:	681b      	ldr	r3, [r3, #0]
 801e484:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801e488:	2b00      	cmp	r3, #0
 801e48a:	d001      	beq.n	801e490 <GW_interpret_speeds+0xa8>
 801e48c:	2301      	movs	r3, #1
 801e48e:	e000      	b.n	801e492 <GW_interpret_speeds+0xaa>
 801e490:	2300      	movs	r3, #0
 801e492:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
 801e496:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 801e49a:	f003 0301 	and.w	r3, r3, #1
 801e49e:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
 801e4a2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801e4a6:	2b00      	cmp	r3, #0
 801e4a8:	d007      	beq.n	801e4ba <GW_interpret_speeds+0xd2>
 801e4aa:	697b      	ldr	r3, [r7, #20]
 801e4ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e4ae:	4618      	mov	r0, r3
 801e4b0:	f7fb fb4a 	bl	8019b48 <__aeabi_f2d>
 801e4b4:	4602      	mov	r2, r0
 801e4b6:	460b      	mov	r3, r1
 801e4b8:	e003      	b.n	801e4c2 <GW_interpret_speeds+0xda>
 801e4ba:	f04f 0200 	mov.w	r2, #0
 801e4be:	f04f 0300 	mov.w	r3, #0
 801e4c2:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 801e4c6:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 801e4ca:	2b00      	cmp	r3, #0
 801e4cc:	d007      	beq.n	801e4de <GW_interpret_speeds+0xf6>
 801e4ce:	697b      	ldr	r3, [r7, #20]
 801e4d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e4d2:	4618      	mov	r0, r3
 801e4d4:	f7fb fb38 	bl	8019b48 <__aeabi_f2d>
 801e4d8:	4602      	mov	r2, r0
 801e4da:	460b      	mov	r3, r1
 801e4dc:	e003      	b.n	801e4e6 <GW_interpret_speeds+0xfe>
 801e4de:	f04f 0200 	mov.w	r2, #0
 801e4e2:	f04f 0300 	mov.w	r3, #0
 801e4e6:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
 801e4ea:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 801e4ee:	2b00      	cmp	r3, #0
 801e4f0:	d007      	beq.n	801e502 <GW_interpret_speeds+0x11a>
 801e4f2:	697b      	ldr	r3, [r7, #20]
 801e4f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801e4f6:	4618      	mov	r0, r3
 801e4f8:	f7fb fb26 	bl	8019b48 <__aeabi_f2d>
 801e4fc:	4602      	mov	r2, r0
 801e4fe:	460b      	mov	r3, r1
 801e500:	e003      	b.n	801e50a <GW_interpret_speeds+0x122>
 801e502:	f04f 0200 	mov.w	r2, #0
 801e506:	f04f 0300 	mov.w	r3, #0
 801e50a:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 801e50e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801e510:	60bb      	str	r3, [r7, #8]
 801e512:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801e514:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801e518:	60fb      	str	r3, [r7, #12]
 801e51a:	ed97 7b02 	vldr	d7, [r7, #8]
 801e51e:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 801e522:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801e524:	603b      	str	r3, [r7, #0]
 801e526:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801e528:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801e52c:	607b      	str	r3, [r7, #4]
 801e52e:	ed97 7b00 	vldr	d7, [r7]
 801e532:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 801e536:	6e3c      	ldr	r4, [r7, #96]	@ 0x60
 801e538:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801e53a:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 801e53e:	e9c7 4512 	strd	r4, r5, [r7, #72]	@ 0x48
 801e542:	697b      	ldr	r3, [r7, #20]
 801e544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e546:	4618      	mov	r0, r3
 801e548:	f7fb faec 	bl	8019b24 <__aeabi_i2d>
 801e54c:	4602      	mov	r2, r0
 801e54e:	460b      	mov	r3, r1
 801e550:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 801e554:	697b      	ldr	r3, [r7, #20]
 801e556:	2200      	movs	r2, #0
 801e558:	f883 28cc 	strb.w	r2, [r3, #2252]	@ 0x8cc
 801e55c:	4b51      	ldr	r3, [pc, #324]	@ (801e6a4 <GW_interpret_speeds+0x2bc>)
 801e55e:	681b      	ldr	r3, [r3, #0]
 801e560:	2b02      	cmp	r3, #2
 801e562:	dd38      	ble.n	801e5d6 <GW_interpret_speeds+0x1ee>
 801e564:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 801e568:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 801e56c:	f7fb fb44 	bl	8019bf8 <__aeabi_dmul>
 801e570:	4602      	mov	r2, r0
 801e572:	460b      	mov	r3, r1
 801e574:	4614      	mov	r4, r2
 801e576:	461d      	mov	r5, r3
 801e578:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 801e57c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 801e580:	f7fb fb3a 	bl	8019bf8 <__aeabi_dmul>
 801e584:	4602      	mov	r2, r0
 801e586:	460b      	mov	r3, r1
 801e588:	4620      	mov	r0, r4
 801e58a:	4629      	mov	r1, r5
 801e58c:	f7fb f97e 	bl	801988c <__adddf3>
 801e590:	4602      	mov	r2, r0
 801e592:	460b      	mov	r3, r1
 801e594:	4614      	mov	r4, r2
 801e596:	461d      	mov	r5, r3
 801e598:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 801e59c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 801e5a0:	f7fb fb2a 	bl	8019bf8 <__aeabi_dmul>
 801e5a4:	4602      	mov	r2, r0
 801e5a6:	460b      	mov	r3, r1
 801e5a8:	4620      	mov	r0, r4
 801e5aa:	4629      	mov	r1, r5
 801e5ac:	f7fb f96e 	bl	801988c <__adddf3>
 801e5b0:	4602      	mov	r2, r0
 801e5b2:	460b      	mov	r3, r1
 801e5b4:	4614      	mov	r4, r2
 801e5b6:	461d      	mov	r5, r3
 801e5b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 801e5bc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 801e5c0:	f7fb fb1a 	bl	8019bf8 <__aeabi_dmul>
 801e5c4:	4602      	mov	r2, r0
 801e5c6:	460b      	mov	r3, r1
 801e5c8:	e9cd 2300 	strd	r2, r3, [sp]
 801e5cc:	4622      	mov	r2, r4
 801e5ce:	462b      	mov	r3, r5
 801e5d0:	4836      	ldr	r0, [pc, #216]	@ (801e6ac <GW_interpret_speeds+0x2c4>)
 801e5d2:	f004 fe1b 	bl	802320c <iprintf>
 801e5d6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 801e5da:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 801e5de:	f7fb fb0b 	bl	8019bf8 <__aeabi_dmul>
 801e5e2:	4602      	mov	r2, r0
 801e5e4:	460b      	mov	r3, r1
 801e5e6:	4614      	mov	r4, r2
 801e5e8:	461d      	mov	r5, r3
 801e5ea:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 801e5ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 801e5f2:	f7fb fb01 	bl	8019bf8 <__aeabi_dmul>
 801e5f6:	4602      	mov	r2, r0
 801e5f8:	460b      	mov	r3, r1
 801e5fa:	4620      	mov	r0, r4
 801e5fc:	4629      	mov	r1, r5
 801e5fe:	f7fb f945 	bl	801988c <__adddf3>
 801e602:	4602      	mov	r2, r0
 801e604:	460b      	mov	r3, r1
 801e606:	4614      	mov	r4, r2
 801e608:	461d      	mov	r5, r3
 801e60a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 801e60e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 801e612:	f7fb faf1 	bl	8019bf8 <__aeabi_dmul>
 801e616:	4602      	mov	r2, r0
 801e618:	460b      	mov	r3, r1
 801e61a:	4620      	mov	r0, r4
 801e61c:	4629      	mov	r1, r5
 801e61e:	f7fb f935 	bl	801988c <__adddf3>
 801e622:	4602      	mov	r2, r0
 801e624:	460b      	mov	r3, r1
 801e626:	4614      	mov	r4, r2
 801e628:	461d      	mov	r5, r3
 801e62a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 801e62e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 801e632:	f7fb fae1 	bl	8019bf8 <__aeabi_dmul>
 801e636:	4602      	mov	r2, r0
 801e638:	460b      	mov	r3, r1
 801e63a:	4620      	mov	r0, r4
 801e63c:	4629      	mov	r1, r5
 801e63e:	f7fb fd4d 	bl	801a0dc <__aeabi_dcmplt>
 801e642:	4603      	mov	r3, r0
 801e644:	2b00      	cmp	r3, #0
 801e646:	f000 82e7 	beq.w	801ec18 <GW_interpret_speeds+0x830>
 801e64a:	f04f 0200 	mov.w	r2, #0
 801e64e:	f04f 0300 	mov.w	r3, #0
 801e652:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 801e656:	f7fb fd5f 	bl	801a118 <__aeabi_dcmpgt>
 801e65a:	4603      	mov	r3, r0
 801e65c:	2b00      	cmp	r3, #0
 801e65e:	d008      	beq.n	801e672 <GW_interpret_speeds+0x28a>
 801e660:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 801e664:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 801e668:	f7fb fbf0 	bl	8019e4c <__aeabi_ddiv>
 801e66c:	4602      	mov	r2, r0
 801e66e:	460b      	mov	r3, r1
 801e670:	e002      	b.n	801e678 <GW_interpret_speeds+0x290>
 801e672:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 801e676:	4b0e      	ldr	r3, [pc, #56]	@ (801e6b0 <GW_interpret_speeds+0x2c8>)
 801e678:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 801e67c:	f04f 0200 	mov.w	r2, #0
 801e680:	f04f 0300 	mov.w	r3, #0
 801e684:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 801e688:	f7fb fd46 	bl	801a118 <__aeabi_dcmpgt>
 801e68c:	4603      	mov	r3, r0
 801e68e:	2b00      	cmp	r3, #0
 801e690:	d010      	beq.n	801e6b4 <GW_interpret_speeds+0x2cc>
 801e692:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 801e696:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 801e69a:	f7fb fbd7 	bl	8019e4c <__aeabi_ddiv>
 801e69e:	4602      	mov	r2, r0
 801e6a0:	460b      	mov	r3, r1
 801e6a2:	e00a      	b.n	801e6ba <GW_interpret_speeds+0x2d2>
 801e6a4:	200019c8 	.word	0x200019c8
 801e6a8:	08042ba0 	.word	0x08042ba0
 801e6ac:	08042bd4 	.word	0x08042bd4
 801e6b0:	47efffff 	.word	0x47efffff
 801e6b4:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 801e6b8:	4b90      	ldr	r3, [pc, #576]	@ (801e8fc <GW_interpret_speeds+0x514>)
 801e6ba:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 801e6be:	697b      	ldr	r3, [r7, #20]
 801e6c0:	69db      	ldr	r3, [r3, #28]
 801e6c2:	4618      	mov	r0, r3
 801e6c4:	f7fb fa2e 	bl	8019b24 <__aeabi_i2d>
 801e6c8:	4602      	mov	r2, r0
 801e6ca:	460b      	mov	r3, r1
 801e6cc:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 801e6d0:	697b      	ldr	r3, [r7, #20]
 801e6d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801e6d4:	4618      	mov	r0, r3
 801e6d6:	f7fb fa37 	bl	8019b48 <__aeabi_f2d>
 801e6da:	4602      	mov	r2, r0
 801e6dc:	460b      	mov	r3, r1
 801e6de:	e9c7 2308 	strd	r2, r3, [r7, #32]
 801e6e2:	697b      	ldr	r3, [r7, #20]
 801e6e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801e6e6:	4618      	mov	r0, r3
 801e6e8:	f7fb fa2e 	bl	8019b48 <__aeabi_f2d>
 801e6ec:	4602      	mov	r2, r0
 801e6ee:	460b      	mov	r3, r1
 801e6f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
 801e6f4:	4b82      	ldr	r3, [pc, #520]	@ (801e900 <GW_interpret_speeds+0x518>)
 801e6f6:	681b      	ldr	r3, [r3, #0]
 801e6f8:	2b01      	cmp	r3, #1
 801e6fa:	dd18      	ble.n	801e72e <GW_interpret_speeds+0x346>
 801e6fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801e700:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801e704:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801e708:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801e70c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 801e710:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801e714:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 801e718:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801e71c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 801e720:	e9cd 2300 	strd	r2, r3, [sp]
 801e724:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 801e728:	4876      	ldr	r0, [pc, #472]	@ (801e904 <GW_interpret_speeds+0x51c>)
 801e72a:	f004 fd6f 	bl	802320c <iprintf>
 801e72e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 801e732:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 801e736:	f7fb fcef 	bl	801a118 <__aeabi_dcmpgt>
 801e73a:	4603      	mov	r3, r0
 801e73c:	2b00      	cmp	r3, #0
 801e73e:	d040      	beq.n	801e7c2 <GW_interpret_speeds+0x3da>
 801e740:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801e744:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 801e748:	f7fb fce6 	bl	801a118 <__aeabi_dcmpgt>
 801e74c:	4603      	mov	r3, r0
 801e74e:	2b00      	cmp	r3, #0
 801e750:	d037      	beq.n	801e7c2 <GW_interpret_speeds+0x3da>
 801e752:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801e756:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 801e75a:	f7fb fcdd 	bl	801a118 <__aeabi_dcmpgt>
 801e75e:	4603      	mov	r3, r0
 801e760:	2b00      	cmp	r3, #0
 801e762:	d02e      	beq.n	801e7c2 <GW_interpret_speeds+0x3da>
 801e764:	f04f 0200 	mov.w	r2, #0
 801e768:	f04f 0300 	mov.w	r3, #0
 801e76c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 801e770:	f7fb fcd2 	bl	801a118 <__aeabi_dcmpgt>
 801e774:	4603      	mov	r3, r0
 801e776:	2b00      	cmp	r3, #0
 801e778:	d00c      	beq.n	801e794 <GW_interpret_speeds+0x3ac>
 801e77a:	697b      	ldr	r3, [r7, #20]
 801e77c:	2202      	movs	r2, #2
 801e77e:	f883 28cc 	strb.w	r2, [r3, #2252]	@ 0x8cc
 801e782:	4b5f      	ldr	r3, [pc, #380]	@ (801e900 <GW_interpret_speeds+0x518>)
 801e784:	681b      	ldr	r3, [r3, #0]
 801e786:	2b02      	cmp	r3, #2
 801e788:	dd1b      	ble.n	801e7c2 <GW_interpret_speeds+0x3da>
 801e78a:	2102      	movs	r1, #2
 801e78c:	485e      	ldr	r0, [pc, #376]	@ (801e908 <GW_interpret_speeds+0x520>)
 801e78e:	f004 fd3d 	bl	802320c <iprintf>
 801e792:	e016      	b.n	801e7c2 <GW_interpret_speeds+0x3da>
 801e794:	f04f 0200 	mov.w	r2, #0
 801e798:	f04f 0300 	mov.w	r3, #0
 801e79c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 801e7a0:	f7fb fc9c 	bl	801a0dc <__aeabi_dcmplt>
 801e7a4:	4603      	mov	r3, r0
 801e7a6:	2b00      	cmp	r3, #0
 801e7a8:	d00b      	beq.n	801e7c2 <GW_interpret_speeds+0x3da>
 801e7aa:	697b      	ldr	r3, [r7, #20]
 801e7ac:	2201      	movs	r2, #1
 801e7ae:	f883 28cc 	strb.w	r2, [r3, #2252]	@ 0x8cc
 801e7b2:	4b53      	ldr	r3, [pc, #332]	@ (801e900 <GW_interpret_speeds+0x518>)
 801e7b4:	681b      	ldr	r3, [r3, #0]
 801e7b6:	2b02      	cmp	r3, #2
 801e7b8:	dd03      	ble.n	801e7c2 <GW_interpret_speeds+0x3da>
 801e7ba:	2101      	movs	r1, #1
 801e7bc:	4853      	ldr	r0, [pc, #332]	@ (801e90c <GW_interpret_speeds+0x524>)
 801e7be:	f004 fd25 	bl	802320c <iprintf>
 801e7c2:	f04f 0200 	mov.w	r2, #0
 801e7c6:	f04f 0300 	mov.w	r3, #0
 801e7ca:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 801e7ce:	f7fb fca3 	bl	801a118 <__aeabi_dcmpgt>
 801e7d2:	4603      	mov	r3, r0
 801e7d4:	2b00      	cmp	r3, #0
 801e7d6:	d008      	beq.n	801e7ea <GW_interpret_speeds+0x402>
 801e7d8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 801e7dc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 801e7e0:	f7fb fb34 	bl	8019e4c <__aeabi_ddiv>
 801e7e4:	4602      	mov	r2, r0
 801e7e6:	460b      	mov	r3, r1
 801e7e8:	e002      	b.n	801e7f0 <GW_interpret_speeds+0x408>
 801e7ea:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 801e7ee:	4b43      	ldr	r3, [pc, #268]	@ (801e8fc <GW_interpret_speeds+0x514>)
 801e7f0:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 801e7f4:	f04f 0200 	mov.w	r2, #0
 801e7f8:	f04f 0300 	mov.w	r3, #0
 801e7fc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 801e800:	f7fb fc8a 	bl	801a118 <__aeabi_dcmpgt>
 801e804:	4603      	mov	r3, r0
 801e806:	2b00      	cmp	r3, #0
 801e808:	d008      	beq.n	801e81c <GW_interpret_speeds+0x434>
 801e80a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 801e80e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 801e812:	f7fb fb1b 	bl	8019e4c <__aeabi_ddiv>
 801e816:	4602      	mov	r2, r0
 801e818:	460b      	mov	r3, r1
 801e81a:	e002      	b.n	801e822 <GW_interpret_speeds+0x43a>
 801e81c:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 801e820:	4b36      	ldr	r3, [pc, #216]	@ (801e8fc <GW_interpret_speeds+0x514>)
 801e822:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 801e826:	697b      	ldr	r3, [r7, #20]
 801e828:	6a1b      	ldr	r3, [r3, #32]
 801e82a:	4618      	mov	r0, r3
 801e82c:	f7fb f97a 	bl	8019b24 <__aeabi_i2d>
 801e830:	4602      	mov	r2, r0
 801e832:	460b      	mov	r3, r1
 801e834:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 801e838:	697b      	ldr	r3, [r7, #20]
 801e83a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e83c:	4618      	mov	r0, r3
 801e83e:	f7fb f983 	bl	8019b48 <__aeabi_f2d>
 801e842:	4602      	mov	r2, r0
 801e844:	460b      	mov	r3, r1
 801e846:	e9c7 2308 	strd	r2, r3, [r7, #32]
 801e84a:	697b      	ldr	r3, [r7, #20]
 801e84c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801e84e:	4618      	mov	r0, r3
 801e850:	f7fb f97a 	bl	8019b48 <__aeabi_f2d>
 801e854:	4602      	mov	r2, r0
 801e856:	460b      	mov	r3, r1
 801e858:	e9c7 2306 	strd	r2, r3, [r7, #24]
 801e85c:	4b28      	ldr	r3, [pc, #160]	@ (801e900 <GW_interpret_speeds+0x518>)
 801e85e:	681b      	ldr	r3, [r3, #0]
 801e860:	2b01      	cmp	r3, #1
 801e862:	dd18      	ble.n	801e896 <GW_interpret_speeds+0x4ae>
 801e864:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801e868:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801e86c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801e870:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801e874:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 801e878:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801e87c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 801e880:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801e884:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 801e888:	e9cd 2300 	strd	r2, r3, [sp]
 801e88c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 801e890:	481f      	ldr	r0, [pc, #124]	@ (801e910 <GW_interpret_speeds+0x528>)
 801e892:	f004 fcbb 	bl	802320c <iprintf>
 801e896:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 801e89a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 801e89e:	f7fb fc3b 	bl	801a118 <__aeabi_dcmpgt>
 801e8a2:	4603      	mov	r3, r0
 801e8a4:	2b00      	cmp	r3, #0
 801e8a6:	d04e      	beq.n	801e946 <GW_interpret_speeds+0x55e>
 801e8a8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801e8ac:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 801e8b0:	f7fb fc32 	bl	801a118 <__aeabi_dcmpgt>
 801e8b4:	4603      	mov	r3, r0
 801e8b6:	2b00      	cmp	r3, #0
 801e8b8:	d045      	beq.n	801e946 <GW_interpret_speeds+0x55e>
 801e8ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801e8be:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 801e8c2:	f7fb fc29 	bl	801a118 <__aeabi_dcmpgt>
 801e8c6:	4603      	mov	r3, r0
 801e8c8:	2b00      	cmp	r3, #0
 801e8ca:	d03c      	beq.n	801e946 <GW_interpret_speeds+0x55e>
 801e8cc:	f04f 0200 	mov.w	r2, #0
 801e8d0:	f04f 0300 	mov.w	r3, #0
 801e8d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 801e8d8:	f7fb fc1e 	bl	801a118 <__aeabi_dcmpgt>
 801e8dc:	4603      	mov	r3, r0
 801e8de:	2b00      	cmp	r3, #0
 801e8e0:	d01a      	beq.n	801e918 <GW_interpret_speeds+0x530>
 801e8e2:	697b      	ldr	r3, [r7, #20]
 801e8e4:	2204      	movs	r2, #4
 801e8e6:	f883 28cc 	strb.w	r2, [r3, #2252]	@ 0x8cc
 801e8ea:	4b05      	ldr	r3, [pc, #20]	@ (801e900 <GW_interpret_speeds+0x518>)
 801e8ec:	681b      	ldr	r3, [r3, #0]
 801e8ee:	2b02      	cmp	r3, #2
 801e8f0:	dd29      	ble.n	801e946 <GW_interpret_speeds+0x55e>
 801e8f2:	2104      	movs	r1, #4
 801e8f4:	4807      	ldr	r0, [pc, #28]	@ (801e914 <GW_interpret_speeds+0x52c>)
 801e8f6:	f004 fc89 	bl	802320c <iprintf>
 801e8fa:	e024      	b.n	801e946 <GW_interpret_speeds+0x55e>
 801e8fc:	47efffff 	.word	0x47efffff
 801e900:	200019c8 	.word	0x200019c8
 801e904:	08042c0c 	.word	0x08042c0c
 801e908:	08042c64 	.word	0x08042c64
 801e90c:	08042c98 	.word	0x08042c98
 801e910:	08042ccc 	.word	0x08042ccc
 801e914:	08042d24 	.word	0x08042d24
 801e918:	f04f 0200 	mov.w	r2, #0
 801e91c:	f04f 0300 	mov.w	r3, #0
 801e920:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 801e924:	f7fb fbda 	bl	801a0dc <__aeabi_dcmplt>
 801e928:	4603      	mov	r3, r0
 801e92a:	2b00      	cmp	r3, #0
 801e92c:	d00b      	beq.n	801e946 <GW_interpret_speeds+0x55e>
 801e92e:	697b      	ldr	r3, [r7, #20]
 801e930:	2203      	movs	r2, #3
 801e932:	f883 28cc 	strb.w	r2, [r3, #2252]	@ 0x8cc
 801e936:	4b7f      	ldr	r3, [pc, #508]	@ (801eb34 <GW_interpret_speeds+0x74c>)
 801e938:	681b      	ldr	r3, [r3, #0]
 801e93a:	2b02      	cmp	r3, #2
 801e93c:	dd03      	ble.n	801e946 <GW_interpret_speeds+0x55e>
 801e93e:	2103      	movs	r1, #3
 801e940:	487d      	ldr	r0, [pc, #500]	@ (801eb38 <GW_interpret_speeds+0x750>)
 801e942:	f004 fc63 	bl	802320c <iprintf>
 801e946:	f04f 0200 	mov.w	r2, #0
 801e94a:	f04f 0300 	mov.w	r3, #0
 801e94e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 801e952:	f7fb fbe1 	bl	801a118 <__aeabi_dcmpgt>
 801e956:	4603      	mov	r3, r0
 801e958:	2b00      	cmp	r3, #0
 801e95a:	d008      	beq.n	801e96e <GW_interpret_speeds+0x586>
 801e95c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 801e960:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 801e964:	f7fb fa72 	bl	8019e4c <__aeabi_ddiv>
 801e968:	4602      	mov	r2, r0
 801e96a:	460b      	mov	r3, r1
 801e96c:	e002      	b.n	801e974 <GW_interpret_speeds+0x58c>
 801e96e:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 801e972:	4b72      	ldr	r3, [pc, #456]	@ (801eb3c <GW_interpret_speeds+0x754>)
 801e974:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 801e978:	f04f 0200 	mov.w	r2, #0
 801e97c:	f04f 0300 	mov.w	r3, #0
 801e980:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 801e984:	f7fb fbc8 	bl	801a118 <__aeabi_dcmpgt>
 801e988:	4603      	mov	r3, r0
 801e98a:	2b00      	cmp	r3, #0
 801e98c:	d008      	beq.n	801e9a0 <GW_interpret_speeds+0x5b8>
 801e98e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 801e992:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 801e996:	f7fb fa59 	bl	8019e4c <__aeabi_ddiv>
 801e99a:	4602      	mov	r2, r0
 801e99c:	460b      	mov	r3, r1
 801e99e:	e002      	b.n	801e9a6 <GW_interpret_speeds+0x5be>
 801e9a0:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 801e9a4:	4b65      	ldr	r3, [pc, #404]	@ (801eb3c <GW_interpret_speeds+0x754>)
 801e9a6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 801e9aa:	697b      	ldr	r3, [r7, #20]
 801e9ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e9ae:	4618      	mov	r0, r3
 801e9b0:	f7fb f8b8 	bl	8019b24 <__aeabi_i2d>
 801e9b4:	4602      	mov	r2, r0
 801e9b6:	460b      	mov	r3, r1
 801e9b8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 801e9bc:	697b      	ldr	r3, [r7, #20]
 801e9be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e9c0:	4618      	mov	r0, r3
 801e9c2:	f7fb f8c1 	bl	8019b48 <__aeabi_f2d>
 801e9c6:	4602      	mov	r2, r0
 801e9c8:	460b      	mov	r3, r1
 801e9ca:	e9c7 2308 	strd	r2, r3, [r7, #32]
 801e9ce:	697b      	ldr	r3, [r7, #20]
 801e9d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801e9d2:	4618      	mov	r0, r3
 801e9d4:	f7fb f8b8 	bl	8019b48 <__aeabi_f2d>
 801e9d8:	4602      	mov	r2, r0
 801e9da:	460b      	mov	r3, r1
 801e9dc:	e9c7 2306 	strd	r2, r3, [r7, #24]
 801e9e0:	4b54      	ldr	r3, [pc, #336]	@ (801eb34 <GW_interpret_speeds+0x74c>)
 801e9e2:	681b      	ldr	r3, [r3, #0]
 801e9e4:	2b01      	cmp	r3, #1
 801e9e6:	dd18      	ble.n	801ea1a <GW_interpret_speeds+0x632>
 801e9e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801e9ec:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801e9f0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801e9f4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801e9f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 801e9fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801ea00:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 801ea04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801ea08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 801ea0c:	e9cd 2300 	strd	r2, r3, [sp]
 801ea10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 801ea14:	484a      	ldr	r0, [pc, #296]	@ (801eb40 <GW_interpret_speeds+0x758>)
 801ea16:	f004 fbf9 	bl	802320c <iprintf>
 801ea1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 801ea1e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 801ea22:	f7fb fb79 	bl	801a118 <__aeabi_dcmpgt>
 801ea26:	4603      	mov	r3, r0
 801ea28:	2b00      	cmp	r3, #0
 801ea2a:	f000 80a1 	beq.w	801eb70 <GW_interpret_speeds+0x788>
 801ea2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801ea32:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 801ea36:	f7fb fb6f 	bl	801a118 <__aeabi_dcmpgt>
 801ea3a:	4603      	mov	r3, r0
 801ea3c:	2b00      	cmp	r3, #0
 801ea3e:	f000 8097 	beq.w	801eb70 <GW_interpret_speeds+0x788>
 801ea42:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801ea46:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 801ea4a:	f7fb fb65 	bl	801a118 <__aeabi_dcmpgt>
 801ea4e:	4603      	mov	r3, r0
 801ea50:	2b00      	cmp	r3, #0
 801ea52:	f000 808d 	beq.w	801eb70 <GW_interpret_speeds+0x788>
 801ea56:	f04f 0200 	mov.w	r2, #0
 801ea5a:	f04f 0300 	mov.w	r3, #0
 801ea5e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 801ea62:	f7fb fb59 	bl	801a118 <__aeabi_dcmpgt>
 801ea66:	4603      	mov	r3, r0
 801ea68:	2b00      	cmp	r3, #0
 801ea6a:	d01a      	beq.n	801eaa2 <GW_interpret_speeds+0x6ba>
 801ea6c:	697b      	ldr	r3, [r7, #20]
 801ea6e:	f8d3 2f4c 	ldr.w	r2, [r3, #3916]	@ 0xf4c
 801ea72:	697b      	ldr	r3, [r7, #20]
 801ea74:	f8c3 2f54 	str.w	r2, [r3, #3924]	@ 0xf54
 801ea78:	697b      	ldr	r3, [r7, #20]
 801ea7a:	2201      	movs	r2, #1
 801ea7c:	f8c3 2f5c 	str.w	r2, [r3, #3932]	@ 0xf5c
 801ea80:	697b      	ldr	r3, [r7, #20]
 801ea82:	2206      	movs	r2, #6
 801ea84:	f883 28cc 	strb.w	r2, [r3, #2252]	@ 0x8cc
 801ea88:	4b2a      	ldr	r3, [pc, #168]	@ (801eb34 <GW_interpret_speeds+0x74c>)
 801ea8a:	681b      	ldr	r3, [r3, #0]
 801ea8c:	2b02      	cmp	r3, #2
 801ea8e:	dd6f      	ble.n	801eb70 <GW_interpret_speeds+0x788>
 801ea90:	697b      	ldr	r3, [r7, #20]
 801ea92:	f8d3 3f4c 	ldr.w	r3, [r3, #3916]	@ 0xf4c
 801ea96:	461a      	mov	r2, r3
 801ea98:	2106      	movs	r1, #6
 801ea9a:	482a      	ldr	r0, [pc, #168]	@ (801eb44 <GW_interpret_speeds+0x75c>)
 801ea9c:	f004 fbb6 	bl	802320c <iprintf>
 801eaa0:	e066      	b.n	801eb70 <GW_interpret_speeds+0x788>
 801eaa2:	697b      	ldr	r3, [r7, #20]
 801eaa4:	f8d3 2f4c 	ldr.w	r2, [r3, #3916]	@ 0xf4c
 801eaa8:	697b      	ldr	r3, [r7, #20]
 801eaaa:	f8c3 2f50 	str.w	r2, [r3, #3920]	@ 0xf50
 801eaae:	697b      	ldr	r3, [r7, #20]
 801eab0:	f8d3 3f5c 	ldr.w	r3, [r3, #3932]	@ 0xf5c
 801eab4:	2b01      	cmp	r3, #1
 801eab6:	d14b      	bne.n	801eb50 <GW_interpret_speeds+0x768>
 801eab8:	697b      	ldr	r3, [r7, #20]
 801eaba:	2200      	movs	r2, #0
 801eabc:	f8c3 2f5c 	str.w	r2, [r3, #3932]	@ 0xf5c
 801eac0:	697b      	ldr	r3, [r7, #20]
 801eac2:	f8d3 2f50 	ldr.w	r2, [r3, #3920]	@ 0xf50
 801eac6:	697b      	ldr	r3, [r7, #20]
 801eac8:	f8d3 3f54 	ldr.w	r3, [r3, #3924]	@ 0xf54
 801eacc:	1ad2      	subs	r2, r2, r3
 801eace:	697b      	ldr	r3, [r7, #20]
 801ead0:	f8c3 2f58 	str.w	r2, [r3, #3928]	@ 0xf58
 801ead4:	697b      	ldr	r3, [r7, #20]
 801ead6:	f8d3 2f58 	ldr.w	r2, [r3, #3928]	@ 0xf58
 801eada:	697b      	ldr	r3, [r7, #20]
 801eadc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801eade:	429a      	cmp	r2, r3
 801eae0:	dc13      	bgt.n	801eb0a <GW_interpret_speeds+0x722>
 801eae2:	4b14      	ldr	r3, [pc, #80]	@ (801eb34 <GW_interpret_speeds+0x74c>)
 801eae4:	681b      	ldr	r3, [r3, #0]
 801eae6:	2b02      	cmp	r3, #2
 801eae8:	dd06      	ble.n	801eaf8 <GW_interpret_speeds+0x710>
 801eaea:	697b      	ldr	r3, [r7, #20]
 801eaec:	f8d3 3f58 	ldr.w	r3, [r3, #3928]	@ 0xf58
 801eaf0:	4619      	mov	r1, r3
 801eaf2:	4815      	ldr	r0, [pc, #84]	@ (801eb48 <GW_interpret_speeds+0x760>)
 801eaf4:	f004 fb8a 	bl	802320c <iprintf>
 801eaf8:	697b      	ldr	r3, [r7, #20]
 801eafa:	2201      	movs	r2, #1
 801eafc:	f8c3 2f60 	str.w	r2, [r3, #3936]	@ 0xf60
 801eb00:	697b      	ldr	r3, [r7, #20]
 801eb02:	2207      	movs	r2, #7
 801eb04:	f883 28cc 	strb.w	r2, [r3, #2252]	@ 0x8cc
 801eb08:	e026      	b.n	801eb58 <GW_interpret_speeds+0x770>
 801eb0a:	697b      	ldr	r3, [r7, #20]
 801eb0c:	2200      	movs	r2, #0
 801eb0e:	f8c3 2f60 	str.w	r2, [r3, #3936]	@ 0xf60
 801eb12:	4b08      	ldr	r3, [pc, #32]	@ (801eb34 <GW_interpret_speeds+0x74c>)
 801eb14:	681b      	ldr	r3, [r3, #0]
 801eb16:	2b02      	cmp	r3, #2
 801eb18:	dd06      	ble.n	801eb28 <GW_interpret_speeds+0x740>
 801eb1a:	697b      	ldr	r3, [r7, #20]
 801eb1c:	f8d3 3f58 	ldr.w	r3, [r3, #3928]	@ 0xf58
 801eb20:	4619      	mov	r1, r3
 801eb22:	480a      	ldr	r0, [pc, #40]	@ (801eb4c <GW_interpret_speeds+0x764>)
 801eb24:	f004 fb72 	bl	802320c <iprintf>
 801eb28:	697b      	ldr	r3, [r7, #20]
 801eb2a:	2205      	movs	r2, #5
 801eb2c:	f883 28cc 	strb.w	r2, [r3, #2252]	@ 0x8cc
 801eb30:	e012      	b.n	801eb58 <GW_interpret_speeds+0x770>
 801eb32:	bf00      	nop
 801eb34:	200019c8 	.word	0x200019c8
 801eb38:	08042d54 	.word	0x08042d54
 801eb3c:	47efffff 	.word	0x47efffff
 801eb40:	08042d88 	.word	0x08042d88
 801eb44:	08042de0 	.word	0x08042de0
 801eb48:	08042e20 	.word	0x08042e20
 801eb4c:	08042e5c 	.word	0x08042e5c
 801eb50:	697b      	ldr	r3, [r7, #20]
 801eb52:	2205      	movs	r2, #5
 801eb54:	f883 28cc 	strb.w	r2, [r3, #2252]	@ 0x8cc
 801eb58:	4b3b      	ldr	r3, [pc, #236]	@ (801ec48 <GW_interpret_speeds+0x860>)
 801eb5a:	681b      	ldr	r3, [r3, #0]
 801eb5c:	2b02      	cmp	r3, #2
 801eb5e:	dd07      	ble.n	801eb70 <GW_interpret_speeds+0x788>
 801eb60:	697b      	ldr	r3, [r7, #20]
 801eb62:	f8d3 3f4c 	ldr.w	r3, [r3, #3916]	@ 0xf4c
 801eb66:	461a      	mov	r2, r3
 801eb68:	2105      	movs	r1, #5
 801eb6a:	4838      	ldr	r0, [pc, #224]	@ (801ec4c <GW_interpret_speeds+0x864>)
 801eb6c:	f004 fb4e 	bl	802320c <iprintf>
 801eb70:	697b      	ldr	r3, [r7, #20]
 801eb72:	f893 3f44 	ldrb.w	r3, [r3, #3908]	@ 0xf44
 801eb76:	2b00      	cmp	r3, #0
 801eb78:	d140      	bne.n	801ebfc <GW_interpret_speeds+0x814>
 801eb7a:	697b      	ldr	r3, [r7, #20]
 801eb7c:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 801eb80:	2bc8      	cmp	r3, #200	@ 0xc8
 801eb82:	d13b      	bne.n	801ebfc <GW_interpret_speeds+0x814>
 801eb84:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 801eb88:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 801eb8c:	f7fb f834 	bl	8019bf8 <__aeabi_dmul>
 801eb90:	4602      	mov	r2, r0
 801eb92:	460b      	mov	r3, r1
 801eb94:	4614      	mov	r4, r2
 801eb96:	461d      	mov	r5, r3
 801eb98:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 801eb9c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 801eba0:	f7fb f82a 	bl	8019bf8 <__aeabi_dmul>
 801eba4:	4602      	mov	r2, r0
 801eba6:	460b      	mov	r3, r1
 801eba8:	4620      	mov	r0, r4
 801ebaa:	4629      	mov	r1, r5
 801ebac:	f7fa fe6e 	bl	801988c <__adddf3>
 801ebb0:	4602      	mov	r2, r0
 801ebb2:	460b      	mov	r3, r1
 801ebb4:	4614      	mov	r4, r2
 801ebb6:	461d      	mov	r5, r3
 801ebb8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 801ebbc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 801ebc0:	f7fb f81a 	bl	8019bf8 <__aeabi_dmul>
 801ebc4:	4602      	mov	r2, r0
 801ebc6:	460b      	mov	r3, r1
 801ebc8:	4620      	mov	r0, r4
 801ebca:	4629      	mov	r1, r5
 801ebcc:	f7fa fe5e 	bl	801988c <__adddf3>
 801ebd0:	4602      	mov	r2, r0
 801ebd2:	460b      	mov	r3, r1
 801ebd4:	4614      	mov	r4, r2
 801ebd6:	461d      	mov	r5, r3
 801ebd8:	697b      	ldr	r3, [r7, #20]
 801ebda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801ebdc:	4618      	mov	r0, r3
 801ebde:	f7fa ffb3 	bl	8019b48 <__aeabi_f2d>
 801ebe2:	4602      	mov	r2, r0
 801ebe4:	460b      	mov	r3, r1
 801ebe6:	4620      	mov	r0, r4
 801ebe8:	4629      	mov	r1, r5
 801ebea:	f7fb fa77 	bl	801a0dc <__aeabi_dcmplt>
 801ebee:	4603      	mov	r3, r0
 801ebf0:	2b00      	cmp	r3, #0
 801ebf2:	d003      	beq.n	801ebfc <GW_interpret_speeds+0x814>
 801ebf4:	697b      	ldr	r3, [r7, #20]
 801ebf6:	2201      	movs	r2, #1
 801ebf8:	f883 2f44 	strb.w	r2, [r3, #3908]	@ 0xf44
 801ebfc:	697b      	ldr	r3, [r7, #20]
 801ebfe:	f893 3f44 	ldrb.w	r3, [r3, #3908]	@ 0xf44
 801ec02:	2b00      	cmp	r3, #0
 801ec04:	d008      	beq.n	801ec18 <GW_interpret_speeds+0x830>
 801ec06:	697b      	ldr	r3, [r7, #20]
 801ec08:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 801ec0c:	2bc8      	cmp	r3, #200	@ 0xc8
 801ec0e:	d003      	beq.n	801ec18 <GW_interpret_speeds+0x830>
 801ec10:	697b      	ldr	r3, [r7, #20]
 801ec12:	2200      	movs	r2, #0
 801ec14:	f883 2f44 	strb.w	r2, [r3, #3908]	@ 0xf44
 801ec18:	4b0b      	ldr	r3, [pc, #44]	@ (801ec48 <GW_interpret_speeds+0x860>)
 801ec1a:	681b      	ldr	r3, [r3, #0]
 801ec1c:	2b01      	cmp	r3, #1
 801ec1e:	dd06      	ble.n	801ec2e <GW_interpret_speeds+0x846>
 801ec20:	697b      	ldr	r3, [r7, #20]
 801ec22:	f893 38cc 	ldrb.w	r3, [r3, #2252]	@ 0x8cc
 801ec26:	4619      	mov	r1, r3
 801ec28:	4809      	ldr	r0, [pc, #36]	@ (801ec50 <GW_interpret_speeds+0x868>)
 801ec2a:	f004 faef 	bl	802320c <iprintf>
 801ec2e:	4b06      	ldr	r3, [pc, #24]	@ (801ec48 <GW_interpret_speeds+0x860>)
 801ec30:	681b      	ldr	r3, [r3, #0]
 801ec32:	2b02      	cmp	r3, #2
 801ec34:	dd02      	ble.n	801ec3c <GW_interpret_speeds+0x854>
 801ec36:	4807      	ldr	r0, [pc, #28]	@ (801ec54 <GW_interpret_speeds+0x86c>)
 801ec38:	f004 fb50 	bl	80232dc <puts>
 801ec3c:	2300      	movs	r3, #0
 801ec3e:	4618      	mov	r0, r3
 801ec40:	3780      	adds	r7, #128	@ 0x80
 801ec42:	46bd      	mov	sp, r7
 801ec44:	bdb0      	pop	{r4, r5, r7, pc}
 801ec46:	bf00      	nop
 801ec48:	200019c8 	.word	0x200019c8
 801ec4c:	08042e9c 	.word	0x08042e9c
 801ec50:	08042edc 	.word	0x08042edc
 801ec54:	08042f10 	.word	0x08042f10

0801ec58 <GW_update_prediction>:
 801ec58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ec5c:	b088      	sub	sp, #32
 801ec5e:	af04      	add	r7, sp, #16
 801ec60:	60f8      	str	r0, [r7, #12]
 801ec62:	60b9      	str	r1, [r7, #8]
 801ec64:	607a      	str	r2, [r7, #4]
 801ec66:	68fb      	ldr	r3, [r7, #12]
 801ec68:	2b00      	cmp	r3, #0
 801ec6a:	d109      	bne.n	801ec80 <GW_update_prediction+0x28>
 801ec6c:	4b49      	ldr	r3, [pc, #292]	@ (801ed94 <GW_update_prediction+0x13c>)
 801ec6e:	681b      	ldr	r3, [r3, #0]
 801ec70:	2b00      	cmp	r3, #0
 801ec72:	dd02      	ble.n	801ec7a <GW_update_prediction+0x22>
 801ec74:	4848      	ldr	r0, [pc, #288]	@ (801ed98 <GW_update_prediction+0x140>)
 801ec76:	f004 fb31 	bl	80232dc <puts>
 801ec7a:	f06f 0301 	mvn.w	r3, #1
 801ec7e:	e253      	b.n	801f128 <GW_update_prediction+0x4d0>
 801ec80:	68fb      	ldr	r3, [r7, #12]
 801ec82:	f203 43a4 	addw	r3, r3, #1188	@ 0x4a4
 801ec86:	4618      	mov	r0, r3
 801ec88:	f002 fcc3 	bl	8021612 <RFBVM_mean>
 801ec8c:	eef0 7a40 	vmov.f32	s15, s0
 801ec90:	68fb      	ldr	r3, [r7, #12]
 801ec92:	f503 630d 	add.w	r3, r3, #2256	@ 0x8d0
 801ec96:	edc3 7a00 	vstr	s15, [r3]
 801ec9a:	4b3e      	ldr	r3, [pc, #248]	@ (801ed94 <GW_update_prediction+0x13c>)
 801ec9c:	681b      	ldr	r3, [r3, #0]
 801ec9e:	2b02      	cmp	r3, #2
 801eca0:	dd0b      	ble.n	801ecba <GW_update_prediction+0x62>
 801eca2:	68fb      	ldr	r3, [r7, #12]
 801eca4:	f503 630d 	add.w	r3, r3, #2256	@ 0x8d0
 801eca8:	681b      	ldr	r3, [r3, #0]
 801ecaa:	4618      	mov	r0, r3
 801ecac:	f7fa ff4c 	bl	8019b48 <__aeabi_f2d>
 801ecb0:	4602      	mov	r2, r0
 801ecb2:	460b      	mov	r3, r1
 801ecb4:	4839      	ldr	r0, [pc, #228]	@ (801ed9c <GW_update_prediction+0x144>)
 801ecb6:	f004 faa9 	bl	802320c <iprintf>
 801ecba:	68fb      	ldr	r3, [r7, #12]
 801ecbc:	f893 2f20 	ldrb.w	r2, [r3, #3872]	@ 0xf20
 801ecc0:	68fb      	ldr	r3, [r7, #12]
 801ecc2:	f893 38cc 	ldrb.w	r3, [r3, #2252]	@ 0x8cc
 801ecc6:	429a      	cmp	r2, r3
 801ecc8:	bf0c      	ite	eq
 801ecca:	2301      	moveq	r3, #1
 801eccc:	2300      	movne	r3, #0
 801ecce:	b2da      	uxtb	r2, r3
 801ecd0:	68fb      	ldr	r3, [r7, #12]
 801ecd2:	f883 28dc 	strb.w	r2, [r3, #2268]	@ 0x8dc
 801ecd6:	68fb      	ldr	r3, [r7, #12]
 801ecd8:	f893 3f2c 	ldrb.w	r3, [r3, #3884]	@ 0xf2c
 801ecdc:	2b00      	cmp	r3, #0
 801ecde:	d006      	beq.n	801ecee <GW_update_prediction+0x96>
 801ece0:	68fb      	ldr	r3, [r7, #12]
 801ece2:	f893 38dc 	ldrb.w	r3, [r3, #2268]	@ 0x8dc
 801ece6:	2b00      	cmp	r3, #0
 801ece8:	d001      	beq.n	801ecee <GW_update_prediction+0x96>
 801ecea:	2301      	movs	r3, #1
 801ecec:	e000      	b.n	801ecf0 <GW_update_prediction+0x98>
 801ecee:	2300      	movs	r3, #0
 801ecf0:	f003 0301 	and.w	r3, r3, #1
 801ecf4:	b2da      	uxtb	r2, r3
 801ecf6:	68fb      	ldr	r3, [r7, #12]
 801ecf8:	f883 28d9 	strb.w	r2, [r3, #2265]	@ 0x8d9
 801ecfc:	4b25      	ldr	r3, [pc, #148]	@ (801ed94 <GW_update_prediction+0x13c>)
 801ecfe:	681b      	ldr	r3, [r3, #0]
 801ed00:	2b02      	cmp	r3, #2
 801ed02:	dd08      	ble.n	801ed16 <GW_update_prediction+0xbe>
 801ed04:	68fb      	ldr	r3, [r7, #12]
 801ed06:	f8d3 2f28 	ldr.w	r2, [r3, #3880]	@ 0xf28
 801ed0a:	68fb      	ldr	r3, [r7, #12]
 801ed0c:	691b      	ldr	r3, [r3, #16]
 801ed0e:	6879      	ldr	r1, [r7, #4]
 801ed10:	4823      	ldr	r0, [pc, #140]	@ (801eda0 <GW_update_prediction+0x148>)
 801ed12:	f004 fa7b 	bl	802320c <iprintf>
 801ed16:	68fb      	ldr	r3, [r7, #12]
 801ed18:	f8d3 3f28 	ldr.w	r3, [r3, #3880]	@ 0xf28
 801ed1c:	687a      	ldr	r2, [r7, #4]
 801ed1e:	1ad2      	subs	r2, r2, r3
 801ed20:	68fb      	ldr	r3, [r7, #12]
 801ed22:	691b      	ldr	r3, [r3, #16]
 801ed24:	429a      	cmp	r2, r3
 801ed26:	bfcc      	ite	gt
 801ed28:	2301      	movgt	r3, #1
 801ed2a:	2300      	movle	r3, #0
 801ed2c:	b2da      	uxtb	r2, r3
 801ed2e:	68fb      	ldr	r3, [r7, #12]
 801ed30:	f883 28da 	strb.w	r2, [r3, #2266]	@ 0x8da
 801ed34:	68fb      	ldr	r3, [r7, #12]
 801ed36:	f503 6373 	add.w	r3, r3, #3888	@ 0xf30
 801ed3a:	ed93 7a00 	vldr	s14, [r3]
 801ed3e:	68fb      	ldr	r3, [r7, #12]
 801ed40:	f503 630d 	add.w	r3, r3, #2256	@ 0x8d0
 801ed44:	edd3 7a00 	vldr	s15, [r3]
 801ed48:	ee37 7a67 	vsub.f32	s14, s14, s15
 801ed4c:	68fb      	ldr	r3, [r7, #12]
 801ed4e:	699b      	ldr	r3, [r3, #24]
 801ed50:	ee07 3a90 	vmov	s15, r3
 801ed54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ed58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ed5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ed60:	bfcc      	ite	gt
 801ed62:	2301      	movgt	r3, #1
 801ed64:	2300      	movle	r3, #0
 801ed66:	b2da      	uxtb	r2, r3
 801ed68:	68fb      	ldr	r3, [r7, #12]
 801ed6a:	f883 28d8 	strb.w	r2, [r3, #2264]	@ 0x8d8
 801ed6e:	68fb      	ldr	r3, [r7, #12]
 801ed70:	f893 38cc 	ldrb.w	r3, [r3, #2252]	@ 0x8cc
 801ed74:	2b00      	cmp	r3, #0
 801ed76:	d00a      	beq.n	801ed8e <GW_update_prediction+0x136>
 801ed78:	68fb      	ldr	r3, [r7, #12]
 801ed7a:	f893 38cc 	ldrb.w	r3, [r3, #2252]	@ 0x8cc
 801ed7e:	461a      	mov	r2, r3
 801ed80:	68fb      	ldr	r3, [r7, #12]
 801ed82:	f893 38cc 	ldrb.w	r3, [r3, #2252]	@ 0x8cc
 801ed86:	3b01      	subs	r3, #1
 801ed88:	4013      	ands	r3, r2
 801ed8a:	2b00      	cmp	r3, #0
 801ed8c:	d10a      	bne.n	801eda4 <GW_update_prediction+0x14c>
 801ed8e:	2301      	movs	r3, #1
 801ed90:	e009      	b.n	801eda6 <GW_update_prediction+0x14e>
 801ed92:	bf00      	nop
 801ed94:	200019c8 	.word	0x200019c8
 801ed98:	08042f3c 	.word	0x08042f3c
 801ed9c:	08042f74 	.word	0x08042f74
 801eda0:	08042fa4 	.word	0x08042fa4
 801eda4:	2300      	movs	r3, #0
 801eda6:	f003 0301 	and.w	r3, r3, #1
 801edaa:	b2da      	uxtb	r2, r3
 801edac:	68fb      	ldr	r3, [r7, #12]
 801edae:	f883 28dd 	strb.w	r2, [r3, #2269]	@ 0x8dd
 801edb2:	4b93      	ldr	r3, [pc, #588]	@ (801f000 <GW_update_prediction+0x3a8>)
 801edb4:	681b      	ldr	r3, [r3, #0]
 801edb6:	2b01      	cmp	r3, #1
 801edb8:	dd19      	ble.n	801edee <GW_update_prediction+0x196>
 801edba:	68fb      	ldr	r3, [r7, #12]
 801edbc:	f893 38dc 	ldrb.w	r3, [r3, #2268]	@ 0x8dc
 801edc0:	4619      	mov	r1, r3
 801edc2:	68fb      	ldr	r3, [r7, #12]
 801edc4:	f893 38d9 	ldrb.w	r3, [r3, #2265]	@ 0x8d9
 801edc8:	4618      	mov	r0, r3
 801edca:	68fb      	ldr	r3, [r7, #12]
 801edcc:	f893 38da 	ldrb.w	r3, [r3, #2266]	@ 0x8da
 801edd0:	461c      	mov	r4, r3
 801edd2:	68fb      	ldr	r3, [r7, #12]
 801edd4:	f893 38d8 	ldrb.w	r3, [r3, #2264]	@ 0x8d8
 801edd8:	461a      	mov	r2, r3
 801edda:	68fb      	ldr	r3, [r7, #12]
 801eddc:	f893 38dd 	ldrb.w	r3, [r3, #2269]	@ 0x8dd
 801ede0:	9301      	str	r3, [sp, #4]
 801ede2:	9200      	str	r2, [sp, #0]
 801ede4:	4623      	mov	r3, r4
 801ede6:	4602      	mov	r2, r0
 801ede8:	4886      	ldr	r0, [pc, #536]	@ (801f004 <GW_update_prediction+0x3ac>)
 801edea:	f004 fa0f 	bl	802320c <iprintf>
 801edee:	68fb      	ldr	r3, [r7, #12]
 801edf0:	f893 38dc 	ldrb.w	r3, [r3, #2268]	@ 0x8dc
 801edf4:	f083 0301 	eor.w	r3, r3, #1
 801edf8:	b2db      	uxtb	r3, r3
 801edfa:	2b00      	cmp	r3, #0
 801edfc:	d01a      	beq.n	801ee34 <GW_update_prediction+0x1dc>
 801edfe:	68fb      	ldr	r3, [r7, #12]
 801ee00:	f893 3f2c 	ldrb.w	r3, [r3, #3884]	@ 0xf2c
 801ee04:	2b00      	cmp	r3, #0
 801ee06:	d015      	beq.n	801ee34 <GW_update_prediction+0x1dc>
 801ee08:	68fb      	ldr	r3, [r7, #12]
 801ee0a:	2200      	movs	r2, #0
 801ee0c:	f883 2f2c 	strb.w	r2, [r3, #3884]	@ 0xf2c
 801ee10:	4b7b      	ldr	r3, [pc, #492]	@ (801f000 <GW_update_prediction+0x3a8>)
 801ee12:	681b      	ldr	r3, [r3, #0]
 801ee14:	2b01      	cmp	r3, #1
 801ee16:	dd0d      	ble.n	801ee34 <GW_update_prediction+0x1dc>
 801ee18:	68fb      	ldr	r3, [r7, #12]
 801ee1a:	f893 3f20 	ldrb.w	r3, [r3, #3872]	@ 0xf20
 801ee1e:	4619      	mov	r1, r3
 801ee20:	68fb      	ldr	r3, [r7, #12]
 801ee22:	f893 38cc 	ldrb.w	r3, [r3, #2252]	@ 0x8cc
 801ee26:	461a      	mov	r2, r3
 801ee28:	68fb      	ldr	r3, [r7, #12]
 801ee2a:	f8d3 3f24 	ldr.w	r3, [r3, #3876]	@ 0xf24
 801ee2e:	4876      	ldr	r0, [pc, #472]	@ (801f008 <GW_update_prediction+0x3b0>)
 801ee30:	f004 f9ec 	bl	802320c <iprintf>
 801ee34:	68fb      	ldr	r3, [r7, #12]
 801ee36:	f893 38cc 	ldrb.w	r3, [r3, #2252]	@ 0x8cc
 801ee3a:	2b00      	cmp	r3, #0
 801ee3c:	bf0c      	ite	eq
 801ee3e:	2301      	moveq	r3, #1
 801ee40:	2300      	movne	r3, #0
 801ee42:	b2da      	uxtb	r2, r3
 801ee44:	68fb      	ldr	r3, [r7, #12]
 801ee46:	f883 28db 	strb.w	r2, [r3, #2267]	@ 0x8db
 801ee4a:	68fb      	ldr	r3, [r7, #12]
 801ee4c:	f893 38cc 	ldrb.w	r3, [r3, #2252]	@ 0x8cc
 801ee50:	3b01      	subs	r3, #1
 801ee52:	4618      	mov	r0, r3
 801ee54:	f7fa fe66 	bl	8019b24 <__aeabi_i2d>
 801ee58:	4602      	mov	r2, r0
 801ee5a:	460b      	mov	r3, r1
 801ee5c:	ec43 2b11 	vmov	d1, r2, r3
 801ee60:	ed9f 0b65 	vldr	d0, [pc, #404]	@ 801eff8 <GW_update_prediction+0x3a0>
 801ee64:	f007 fde4 	bl	8026a30 <pow>
 801ee68:	ec53 2b10 	vmov	r2, r3, d0
 801ee6c:	4610      	mov	r0, r2
 801ee6e:	4619      	mov	r1, r3
 801ee70:	f7fb f99a 	bl	801a1a8 <__aeabi_d2uiz>
 801ee74:	4602      	mov	r2, r0
 801ee76:	68fb      	ldr	r3, [r7, #12]
 801ee78:	685b      	ldr	r3, [r3, #4]
 801ee7a:	4013      	ands	r3, r2
 801ee7c:	2b00      	cmp	r3, #0
 801ee7e:	bf14      	ite	ne
 801ee80:	2301      	movne	r3, #1
 801ee82:	2300      	moveq	r3, #0
 801ee84:	b2db      	uxtb	r3, r3
 801ee86:	461a      	mov	r2, r3
 801ee88:	68fb      	ldr	r3, [r7, #12]
 801ee8a:	f893 38db 	ldrb.w	r3, [r3, #2267]	@ 0x8db
 801ee8e:	4313      	orrs	r3, r2
 801ee90:	2b00      	cmp	r3, #0
 801ee92:	bf14      	ite	ne
 801ee94:	2301      	movne	r3, #1
 801ee96:	2300      	moveq	r3, #0
 801ee98:	b2da      	uxtb	r2, r3
 801ee9a:	68fb      	ldr	r3, [r7, #12]
 801ee9c:	f883 28db 	strb.w	r2, [r3, #2267]	@ 0x8db
 801eea0:	4b57      	ldr	r3, [pc, #348]	@ (801f000 <GW_update_prediction+0x3a8>)
 801eea2:	681b      	ldr	r3, [r3, #0]
 801eea4:	2b01      	cmp	r3, #1
 801eea6:	dd06      	ble.n	801eeb6 <GW_update_prediction+0x25e>
 801eea8:	68fb      	ldr	r3, [r7, #12]
 801eeaa:	f893 38db 	ldrb.w	r3, [r3, #2267]	@ 0x8db
 801eeae:	4619      	mov	r1, r3
 801eeb0:	4856      	ldr	r0, [pc, #344]	@ (801f00c <GW_update_prediction+0x3b4>)
 801eeb2:	f004 f9ab 	bl	802320c <iprintf>
 801eeb6:	68fb      	ldr	r3, [r7, #12]
 801eeb8:	f893 38db 	ldrb.w	r3, [r3, #2267]	@ 0x8db
 801eebc:	f083 0301 	eor.w	r3, r3, #1
 801eec0:	b2db      	uxtb	r3, r3
 801eec2:	2b00      	cmp	r3, #0
 801eec4:	f000 80aa 	beq.w	801f01c <GW_update_prediction+0x3c4>
 801eec8:	4b4d      	ldr	r3, [pc, #308]	@ (801f000 <GW_update_prediction+0x3a8>)
 801eeca:	681b      	ldr	r3, [r3, #0]
 801eecc:	2b02      	cmp	r3, #2
 801eece:	dd06      	ble.n	801eede <GW_update_prediction+0x286>
 801eed0:	68fb      	ldr	r3, [r7, #12]
 801eed2:	f893 38da 	ldrb.w	r3, [r3, #2266]	@ 0x8da
 801eed6:	4619      	mov	r1, r3
 801eed8:	484d      	ldr	r0, [pc, #308]	@ (801f010 <GW_update_prediction+0x3b8>)
 801eeda:	f004 f997 	bl	802320c <iprintf>
 801eede:	68fb      	ldr	r3, [r7, #12]
 801eee0:	f893 38d9 	ldrb.w	r3, [r3, #2265]	@ 0x8d9
 801eee4:	f083 0301 	eor.w	r3, r3, #1
 801eee8:	b2db      	uxtb	r3, r3
 801eeea:	2b00      	cmp	r3, #0
 801eeec:	d067      	beq.n	801efbe <GW_update_prediction+0x366>
 801eeee:	68fb      	ldr	r3, [r7, #12]
 801eef0:	f893 38d8 	ldrb.w	r3, [r3, #2264]	@ 0x8d8
 801eef4:	2b00      	cmp	r3, #0
 801eef6:	d109      	bne.n	801ef0c <GW_update_prediction+0x2b4>
 801eef8:	68fb      	ldr	r3, [r7, #12]
 801eefa:	f893 38da 	ldrb.w	r3, [r3, #2266]	@ 0x8da
 801eefe:	2b00      	cmp	r3, #0
 801ef00:	d104      	bne.n	801ef0c <GW_update_prediction+0x2b4>
 801ef02:	68fb      	ldr	r3, [r7, #12]
 801ef04:	f893 38dc 	ldrb.w	r3, [r3, #2268]	@ 0x8dc
 801ef08:	2b00      	cmp	r3, #0
 801ef0a:	d058      	beq.n	801efbe <GW_update_prediction+0x366>
 801ef0c:	68fb      	ldr	r3, [r7, #12]
 801ef0e:	f503 630d 	add.w	r3, r3, #2256	@ 0x8d0
 801ef12:	ed93 7a00 	vldr	s14, [r3]
 801ef16:	68fb      	ldr	r3, [r7, #12]
 801ef18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ef1a:	ee07 3a90 	vmov	s15, r3
 801ef1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ef22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ef26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef2a:	d548      	bpl.n	801efbe <GW_update_prediction+0x366>
 801ef2c:	68fb      	ldr	r3, [r7, #12]
 801ef2e:	f893 28cc 	ldrb.w	r2, [r3, #2252]	@ 0x8cc
 801ef32:	68fb      	ldr	r3, [r7, #12]
 801ef34:	f883 2f20 	strb.w	r2, [r3, #3872]	@ 0xf20
 801ef38:	68fb      	ldr	r3, [r7, #12]
 801ef3a:	f8d3 3f60 	ldr.w	r3, [r3, #3936]	@ 0xf60
 801ef3e:	2b00      	cmp	r3, #0
 801ef40:	d003      	beq.n	801ef4a <GW_update_prediction+0x2f2>
 801ef42:	68fb      	ldr	r3, [r7, #12]
 801ef44:	2207      	movs	r2, #7
 801ef46:	f883 2f20 	strb.w	r2, [r3, #3872]	@ 0xf20
 801ef4a:	68fb      	ldr	r3, [r7, #12]
 801ef4c:	687a      	ldr	r2, [r7, #4]
 801ef4e:	f8c3 2f24 	str.w	r2, [r3, #3876]	@ 0xf24
 801ef52:	68fb      	ldr	r3, [r7, #12]
 801ef54:	687a      	ldr	r2, [r7, #4]
 801ef56:	f8c3 2f28 	str.w	r2, [r3, #3880]	@ 0xf28
 801ef5a:	68fb      	ldr	r3, [r7, #12]
 801ef5c:	2201      	movs	r2, #1
 801ef5e:	f883 2f2c 	strb.w	r2, [r3, #3884]	@ 0xf2c
 801ef62:	68fb      	ldr	r3, [r7, #12]
 801ef64:	2201      	movs	r2, #1
 801ef66:	f883 2f2d 	strb.w	r2, [r3, #3885]	@ 0xf2d
 801ef6a:	68fb      	ldr	r3, [r7, #12]
 801ef6c:	f503 630d 	add.w	r3, r3, #2256	@ 0x8d0
 801ef70:	681a      	ldr	r2, [r3, #0]
 801ef72:	68fb      	ldr	r3, [r7, #12]
 801ef74:	f503 6373 	add.w	r3, r3, #3888	@ 0xf30
 801ef78:	601a      	str	r2, [r3, #0]
 801ef7a:	68fb      	ldr	r3, [r7, #12]
 801ef7c:	f603 03d4 	addw	r3, r3, #2260	@ 0x8d4
 801ef80:	681a      	ldr	r2, [r3, #0]
 801ef82:	68fb      	ldr	r3, [r7, #12]
 801ef84:	f603 7334 	addw	r3, r3, #3892	@ 0xf34
 801ef88:	601a      	str	r2, [r3, #0]
 801ef8a:	4b1d      	ldr	r3, [pc, #116]	@ (801f000 <GW_update_prediction+0x3a8>)
 801ef8c:	681b      	ldr	r3, [r3, #0]
 801ef8e:	2b01      	cmp	r3, #1
 801ef90:	dd51      	ble.n	801f036 <GW_update_prediction+0x3de>
 801ef92:	68fb      	ldr	r3, [r7, #12]
 801ef94:	f893 3f20 	ldrb.w	r3, [r3, #3872]	@ 0xf20
 801ef98:	461c      	mov	r4, r3
 801ef9a:	68fb      	ldr	r3, [r7, #12]
 801ef9c:	f503 6373 	add.w	r3, r3, #3888	@ 0xf30
 801efa0:	681b      	ldr	r3, [r3, #0]
 801efa2:	4618      	mov	r0, r3
 801efa4:	f7fa fdd0 	bl	8019b48 <__aeabi_f2d>
 801efa8:	4602      	mov	r2, r0
 801efaa:	460b      	mov	r3, r1
 801efac:	68f9      	ldr	r1, [r7, #12]
 801efae:	f8d1 1f24 	ldr.w	r1, [r1, #3876]	@ 0xf24
 801efb2:	9100      	str	r1, [sp, #0]
 801efb4:	4621      	mov	r1, r4
 801efb6:	4817      	ldr	r0, [pc, #92]	@ (801f014 <GW_update_prediction+0x3bc>)
 801efb8:	f004 f928 	bl	802320c <iprintf>
 801efbc:	e03b      	b.n	801f036 <GW_update_prediction+0x3de>
 801efbe:	68fb      	ldr	r3, [r7, #12]
 801efc0:	f893 38d9 	ldrb.w	r3, [r3, #2265]	@ 0x8d9
 801efc4:	2b00      	cmp	r3, #0
 801efc6:	d036      	beq.n	801f036 <GW_update_prediction+0x3de>
 801efc8:	68fb      	ldr	r3, [r7, #12]
 801efca:	687a      	ldr	r2, [r7, #4]
 801efcc:	f8c3 2f28 	str.w	r2, [r3, #3880]	@ 0xf28
 801efd0:	4b0b      	ldr	r3, [pc, #44]	@ (801f000 <GW_update_prediction+0x3a8>)
 801efd2:	681b      	ldr	r3, [r3, #0]
 801efd4:	2b02      	cmp	r3, #2
 801efd6:	dd2e      	ble.n	801f036 <GW_update_prediction+0x3de>
 801efd8:	68fb      	ldr	r3, [r7, #12]
 801efda:	f893 3f20 	ldrb.w	r3, [r3, #3872]	@ 0xf20
 801efde:	4619      	mov	r1, r3
 801efe0:	68fb      	ldr	r3, [r7, #12]
 801efe2:	f8d3 2f24 	ldr.w	r2, [r3, #3876]	@ 0xf24
 801efe6:	68fb      	ldr	r3, [r7, #12]
 801efe8:	f8d3 3f28 	ldr.w	r3, [r3, #3880]	@ 0xf28
 801efec:	480a      	ldr	r0, [pc, #40]	@ (801f018 <GW_update_prediction+0x3c0>)
 801efee:	f004 f90d 	bl	802320c <iprintf>
 801eff2:	e020      	b.n	801f036 <GW_update_prediction+0x3de>
 801eff4:	f3af 8000 	nop.w
 801eff8:	00000000 	.word	0x00000000
 801effc:	40000000 	.word	0x40000000
 801f000:	200019c8 	.word	0x200019c8
 801f004:	08043000 	.word	0x08043000
 801f008:	08043060 	.word	0x08043060
 801f00c:	080430a8 	.word	0x080430a8
 801f010:	080430e8 	.word	0x080430e8
 801f014:	08043114 	.word	0x08043114
 801f018:	08043158 	.word	0x08043158
 801f01c:	4b45      	ldr	r3, [pc, #276]	@ (801f134 <GW_update_prediction+0x4dc>)
 801f01e:	681b      	ldr	r3, [r3, #0]
 801f020:	2b02      	cmp	r3, #2
 801f022:	dd08      	ble.n	801f036 <GW_update_prediction+0x3de>
 801f024:	68fb      	ldr	r3, [r7, #12]
 801f026:	f893 38cc 	ldrb.w	r3, [r3, #2252]	@ 0x8cc
 801f02a:	4619      	mov	r1, r3
 801f02c:	2301      	movs	r3, #1
 801f02e:	222f      	movs	r2, #47	@ 0x2f
 801f030:	4841      	ldr	r0, [pc, #260]	@ (801f138 <GW_update_prediction+0x4e0>)
 801f032:	f004 f8eb 	bl	802320c <iprintf>
 801f036:	68fb      	ldr	r3, [r7, #12]
 801f038:	f8d3 3f24 	ldr.w	r3, [r3, #3876]	@ 0xf24
 801f03c:	687a      	ldr	r2, [r7, #4]
 801f03e:	1ad2      	subs	r2, r2, r3
 801f040:	68fb      	ldr	r3, [r7, #12]
 801f042:	695b      	ldr	r3, [r3, #20]
 801f044:	429a      	cmp	r2, r3
 801f046:	bfcc      	ite	gt
 801f048:	2301      	movgt	r3, #1
 801f04a:	2300      	movle	r3, #0
 801f04c:	b2da      	uxtb	r2, r3
 801f04e:	68fb      	ldr	r3, [r7, #12]
 801f050:	f883 28de 	strb.w	r2, [r3, #2270]	@ 0x8de
 801f054:	68fb      	ldr	r3, [r7, #12]
 801f056:	f893 38de 	ldrb.w	r3, [r3, #2270]	@ 0x8de
 801f05a:	2b00      	cmp	r3, #0
 801f05c:	d025      	beq.n	801f0aa <GW_update_prediction+0x452>
 801f05e:	68fb      	ldr	r3, [r7, #12]
 801f060:	f893 3f2d 	ldrb.w	r3, [r3, #3885]	@ 0xf2d
 801f064:	2b00      	cmp	r3, #0
 801f066:	d020      	beq.n	801f0aa <GW_update_prediction+0x452>
 801f068:	68fb      	ldr	r3, [r7, #12]
 801f06a:	2200      	movs	r2, #0
 801f06c:	f883 2f2d 	strb.w	r2, [r3, #3885]	@ 0xf2d
 801f070:	68fb      	ldr	r3, [r7, #12]
 801f072:	2201      	movs	r2, #1
 801f074:	f883 2f2e 	strb.w	r2, [r3, #3886]	@ 0xf2e
 801f078:	68fb      	ldr	r3, [r7, #12]
 801f07a:	f893 3f20 	ldrb.w	r3, [r3, #3872]	@ 0xf20
 801f07e:	2b05      	cmp	r3, #5
 801f080:	d020      	beq.n	801f0c4 <GW_update_prediction+0x46c>
 801f082:	4b2c      	ldr	r3, [pc, #176]	@ (801f134 <GW_update_prediction+0x4dc>)
 801f084:	681b      	ldr	r3, [r3, #0]
 801f086:	2b02      	cmp	r3, #2
 801f088:	dd06      	ble.n	801f098 <GW_update_prediction+0x440>
 801f08a:	68fb      	ldr	r3, [r7, #12]
 801f08c:	f893 3f20 	ldrb.w	r3, [r3, #3872]	@ 0xf20
 801f090:	4619      	mov	r1, r3
 801f092:	482a      	ldr	r0, [pc, #168]	@ (801f13c <GW_update_prediction+0x4e4>)
 801f094:	f004 f8ba 	bl	802320c <iprintf>
 801f098:	68fb      	ldr	r3, [r7, #12]
 801f09a:	2200      	movs	r2, #0
 801f09c:	f8c3 2f60 	str.w	r2, [r3, #3936]	@ 0xf60
 801f0a0:	68fb      	ldr	r3, [r7, #12]
 801f0a2:	2200      	movs	r2, #0
 801f0a4:	f8c3 2f5c 	str.w	r2, [r3, #3932]	@ 0xf5c
 801f0a8:	e00c      	b.n	801f0c4 <GW_update_prediction+0x46c>
 801f0aa:	68fb      	ldr	r3, [r7, #12]
 801f0ac:	f893 3f2e 	ldrb.w	r3, [r3, #3886]	@ 0xf2e
 801f0b0:	2b00      	cmp	r3, #0
 801f0b2:	d003      	beq.n	801f0bc <GW_update_prediction+0x464>
 801f0b4:	68fb      	ldr	r3, [r7, #12]
 801f0b6:	2200      	movs	r2, #0
 801f0b8:	f8c3 2f60 	str.w	r2, [r3, #3936]	@ 0xf60
 801f0bc:	68fb      	ldr	r3, [r7, #12]
 801f0be:	2200      	movs	r2, #0
 801f0c0:	f883 2f2e 	strb.w	r2, [r3, #3886]	@ 0xf2e
 801f0c4:	4b1b      	ldr	r3, [pc, #108]	@ (801f134 <GW_update_prediction+0x4dc>)
 801f0c6:	681b      	ldr	r3, [r3, #0]
 801f0c8:	2b02      	cmp	r3, #2
 801f0ca:	dd25      	ble.n	801f118 <GW_update_prediction+0x4c0>
 801f0cc:	68fb      	ldr	r3, [r7, #12]
 801f0ce:	f893 3f20 	ldrb.w	r3, [r3, #3872]	@ 0xf20
 801f0d2:	4698      	mov	r8, r3
 801f0d4:	68fb      	ldr	r3, [r7, #12]
 801f0d6:	f8d3 4f24 	ldr.w	r4, [r3, #3876]	@ 0xf24
 801f0da:	68fb      	ldr	r3, [r7, #12]
 801f0dc:	f8d3 5f28 	ldr.w	r5, [r3, #3880]	@ 0xf28
 801f0e0:	68fb      	ldr	r3, [r7, #12]
 801f0e2:	f893 3f2c 	ldrb.w	r3, [r3, #3884]	@ 0xf2c
 801f0e6:	461e      	mov	r6, r3
 801f0e8:	68fb      	ldr	r3, [r7, #12]
 801f0ea:	f893 3f2d 	ldrb.w	r3, [r3, #3885]	@ 0xf2d
 801f0ee:	603b      	str	r3, [r7, #0]
 801f0f0:	68fb      	ldr	r3, [r7, #12]
 801f0f2:	f503 6373 	add.w	r3, r3, #3888	@ 0xf30
 801f0f6:	681b      	ldr	r3, [r3, #0]
 801f0f8:	4618      	mov	r0, r3
 801f0fa:	f7fa fd25 	bl	8019b48 <__aeabi_f2d>
 801f0fe:	4602      	mov	r2, r0
 801f100:	460b      	mov	r3, r1
 801f102:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f106:	683b      	ldr	r3, [r7, #0]
 801f108:	9301      	str	r3, [sp, #4]
 801f10a:	9600      	str	r6, [sp, #0]
 801f10c:	462b      	mov	r3, r5
 801f10e:	4622      	mov	r2, r4
 801f110:	4641      	mov	r1, r8
 801f112:	480b      	ldr	r0, [pc, #44]	@ (801f140 <GW_update_prediction+0x4e8>)
 801f114:	f004 f87a 	bl	802320c <iprintf>
 801f118:	4b06      	ldr	r3, [pc, #24]	@ (801f134 <GW_update_prediction+0x4dc>)
 801f11a:	681b      	ldr	r3, [r3, #0]
 801f11c:	2b02      	cmp	r3, #2
 801f11e:	dd02      	ble.n	801f126 <GW_update_prediction+0x4ce>
 801f120:	4808      	ldr	r0, [pc, #32]	@ (801f144 <GW_update_prediction+0x4ec>)
 801f122:	f004 f8db 	bl	80232dc <puts>
 801f126:	2300      	movs	r3, #0
 801f128:	4618      	mov	r0, r3
 801f12a:	3710      	adds	r7, #16
 801f12c:	46bd      	mov	sp, r7
 801f12e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f132:	bf00      	nop
 801f134:	200019c8 	.word	0x200019c8
 801f138:	080431a4 	.word	0x080431a4
 801f13c:	080431ec 	.word	0x080431ec
 801f140:	08043218 	.word	0x08043218
 801f144:	08043284 	.word	0x08043284

0801f148 <GW_filter_prediction>:
 801f148:	b580      	push	{r7, lr}
 801f14a:	b08a      	sub	sp, #40	@ 0x28
 801f14c:	af00      	add	r7, sp, #0
 801f14e:	60f8      	str	r0, [r7, #12]
 801f150:	60b9      	str	r1, [r7, #8]
 801f152:	607a      	str	r2, [r7, #4]
 801f154:	2300      	movs	r3, #0
 801f156:	623b      	str	r3, [r7, #32]
 801f158:	2300      	movs	r3, #0
 801f15a:	61fb      	str	r3, [r7, #28]
 801f15c:	68fb      	ldr	r3, [r7, #12]
 801f15e:	f603 03d4 	addw	r3, r3, #2260	@ 0x8d4
 801f162:	f04f 0200 	mov.w	r2, #0
 801f166:	601a      	str	r2, [r3, #0]
 801f168:	f04f 0300 	mov.w	r3, #0
 801f16c:	61bb      	str	r3, [r7, #24]
 801f16e:	f04f 0300 	mov.w	r3, #0
 801f172:	617b      	str	r3, [r7, #20]
 801f174:	68fb      	ldr	r3, [r7, #12]
 801f176:	2b00      	cmp	r3, #0
 801f178:	d109      	bne.n	801f18e <GW_filter_prediction+0x46>
 801f17a:	4b61      	ldr	r3, [pc, #388]	@ (801f300 <GW_filter_prediction+0x1b8>)
 801f17c:	681b      	ldr	r3, [r3, #0]
 801f17e:	2b00      	cmp	r3, #0
 801f180:	dd02      	ble.n	801f188 <GW_filter_prediction+0x40>
 801f182:	4860      	ldr	r0, [pc, #384]	@ (801f304 <GW_filter_prediction+0x1bc>)
 801f184:	f004 f8aa 	bl	80232dc <puts>
 801f188:	f06f 0301 	mvn.w	r3, #1
 801f18c:	e0b3      	b.n	801f2f6 <GW_filter_prediction+0x1ae>
 801f18e:	2300      	movs	r3, #0
 801f190:	627b      	str	r3, [r7, #36]	@ 0x24
 801f192:	e045      	b.n	801f220 <GW_filter_prediction+0xd8>
 801f194:	687a      	ldr	r2, [r7, #4]
 801f196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f198:	4413      	add	r3, r2
 801f19a:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 801f19e:	781b      	ldrb	r3, [r3, #0]
 801f1a0:	2b00      	cmp	r3, #0
 801f1a2:	d03a      	beq.n	801f21a <GW_filter_prediction+0xd2>
 801f1a4:	687a      	ldr	r2, [r7, #4]
 801f1a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f1a8:	3308      	adds	r3, #8
 801f1aa:	009b      	lsls	r3, r3, #2
 801f1ac:	4413      	add	r3, r2
 801f1ae:	ed93 7a00 	vldr	s14, [r3]
 801f1b2:	68fb      	ldr	r3, [r7, #12]
 801f1b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801f1b6:	ee07 3a90 	vmov	s15, r3
 801f1ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f1be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801f1c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f1c6:	d528      	bpl.n	801f21a <GW_filter_prediction+0xd2>
 801f1c8:	68ba      	ldr	r2, [r7, #8]
 801f1ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f1cc:	4413      	add	r3, r2
 801f1ce:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 801f1d2:	781b      	ldrb	r3, [r3, #0]
 801f1d4:	2b00      	cmp	r3, #0
 801f1d6:	d010      	beq.n	801f1fa <GW_filter_prediction+0xb2>
 801f1d8:	687a      	ldr	r2, [r7, #4]
 801f1da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f1dc:	3308      	adds	r3, #8
 801f1de:	009b      	lsls	r3, r3, #2
 801f1e0:	4413      	add	r3, r2
 801f1e2:	edd3 7a00 	vldr	s15, [r3]
 801f1e6:	ed97 7a05 	vldr	s14, [r7, #20]
 801f1ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f1ee:	edc7 7a05 	vstr	s15, [r7, #20]
 801f1f2:	6a3b      	ldr	r3, [r7, #32]
 801f1f4:	3301      	adds	r3, #1
 801f1f6:	623b      	str	r3, [r7, #32]
 801f1f8:	e00f      	b.n	801f21a <GW_filter_prediction+0xd2>
 801f1fa:	687a      	ldr	r2, [r7, #4]
 801f1fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f1fe:	3308      	adds	r3, #8
 801f200:	009b      	lsls	r3, r3, #2
 801f202:	4413      	add	r3, r2
 801f204:	edd3 7a00 	vldr	s15, [r3]
 801f208:	ed97 7a06 	vldr	s14, [r7, #24]
 801f20c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f210:	edc7 7a06 	vstr	s15, [r7, #24]
 801f214:	69fb      	ldr	r3, [r7, #28]
 801f216:	3301      	adds	r3, #1
 801f218:	61fb      	str	r3, [r7, #28]
 801f21a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f21c:	3301      	adds	r3, #1
 801f21e:	627b      	str	r3, [r7, #36]	@ 0x24
 801f220:	687b      	ldr	r3, [r7, #4]
 801f222:	689b      	ldr	r3, [r3, #8]
 801f224:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801f226:	429a      	cmp	r2, r3
 801f228:	dbb4      	blt.n	801f194 <GW_filter_prediction+0x4c>
 801f22a:	69fb      	ldr	r3, [r7, #28]
 801f22c:	2b01      	cmp	r3, #1
 801f22e:	dd0e      	ble.n	801f24e <GW_filter_prediction+0x106>
 801f230:	69fb      	ldr	r3, [r7, #28]
 801f232:	ee07 3a90 	vmov	s15, r3
 801f236:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801f23a:	edd7 6a06 	vldr	s13, [r7, #24]
 801f23e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f242:	68fb      	ldr	r3, [r7, #12]
 801f244:	f603 03d4 	addw	r3, r3, #2260	@ 0x8d4
 801f248:	edc3 7a00 	vstr	s15, [r3]
 801f24c:	e017      	b.n	801f27e <GW_filter_prediction+0x136>
 801f24e:	6a3b      	ldr	r3, [r7, #32]
 801f250:	2b01      	cmp	r3, #1
 801f252:	dd0e      	ble.n	801f272 <GW_filter_prediction+0x12a>
 801f254:	6a3b      	ldr	r3, [r7, #32]
 801f256:	ee07 3a90 	vmov	s15, r3
 801f25a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801f25e:	edd7 6a05 	vldr	s13, [r7, #20]
 801f262:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f266:	68fb      	ldr	r3, [r7, #12]
 801f268:	f603 03d4 	addw	r3, r3, #2260	@ 0x8d4
 801f26c:	edc3 7a00 	vstr	s15, [r3]
 801f270:	e005      	b.n	801f27e <GW_filter_prediction+0x136>
 801f272:	68fb      	ldr	r3, [r7, #12]
 801f274:	f603 03d4 	addw	r3, r3, #2260	@ 0x8d4
 801f278:	f04f 0200 	mov.w	r2, #0
 801f27c:	601a      	str	r2, [r3, #0]
 801f27e:	68fb      	ldr	r3, [r7, #12]
 801f280:	f603 03d4 	addw	r3, r3, #2260	@ 0x8d4
 801f284:	ed93 7a00 	vldr	s14, [r3]
 801f288:	68fb      	ldr	r3, [r7, #12]
 801f28a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801f28c:	ee07 3a90 	vmov	s15, r3
 801f290:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f294:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801f298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f29c:	d50a      	bpl.n	801f2b4 <GW_filter_prediction+0x16c>
 801f29e:	68fb      	ldr	r3, [r7, #12]
 801f2a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801f2a2:	ee07 3a90 	vmov	s15, r3
 801f2a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f2aa:	68fb      	ldr	r3, [r7, #12]
 801f2ac:	f603 03d4 	addw	r3, r3, #2260	@ 0x8d4
 801f2b0:	edc3 7a00 	vstr	s15, [r3]
 801f2b4:	68fb      	ldr	r3, [r7, #12]
 801f2b6:	f893 3f2e 	ldrb.w	r3, [r3, #3886]	@ 0xf2e
 801f2ba:	2b00      	cmp	r3, #0
 801f2bc:	d01a      	beq.n	801f2f4 <GW_filter_prediction+0x1ac>
 801f2be:	68fb      	ldr	r3, [r7, #12]
 801f2c0:	f503 6373 	add.w	r3, r3, #3888	@ 0xf30
 801f2c4:	ed93 7a00 	vldr	s14, [r3]
 801f2c8:	68fb      	ldr	r3, [r7, #12]
 801f2ca:	f603 7334 	addw	r3, r3, #3892	@ 0xf34
 801f2ce:	edd3 6a00 	vldr	s13, [r3]
 801f2d2:	68fb      	ldr	r3, [r7, #12]
 801f2d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f2d6:	ee07 3a90 	vmov	s15, r3
 801f2da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f2de:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801f2e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801f2e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f2ea:	dd03      	ble.n	801f2f4 <GW_filter_prediction+0x1ac>
 801f2ec:	68fb      	ldr	r3, [r7, #12]
 801f2ee:	2200      	movs	r2, #0
 801f2f0:	f883 2f2e 	strb.w	r2, [r3, #3886]	@ 0xf2e
 801f2f4:	2300      	movs	r3, #0
 801f2f6:	4618      	mov	r0, r3
 801f2f8:	3728      	adds	r7, #40	@ 0x28
 801f2fa:	46bd      	mov	sp, r7
 801f2fc:	bd80      	pop	{r7, pc}
 801f2fe:	bf00      	nop
 801f300:	200019c8 	.word	0x200019c8
 801f304:	08042f3c 	.word	0x08042f3c

0801f308 <GW_level_control>:
 801f308:	b580      	push	{r7, lr}
 801f30a:	b084      	sub	sp, #16
 801f30c:	af00      	add	r7, sp, #0
 801f30e:	60f8      	str	r0, [r7, #12]
 801f310:	60b9      	str	r1, [r7, #8]
 801f312:	607a      	str	r2, [r7, #4]
 801f314:	68fb      	ldr	r3, [r7, #12]
 801f316:	2b00      	cmp	r3, #0
 801f318:	d109      	bne.n	801f32e <GW_level_control+0x26>
 801f31a:	4b28      	ldr	r3, [pc, #160]	@ (801f3bc <GW_level_control+0xb4>)
 801f31c:	681b      	ldr	r3, [r3, #0]
 801f31e:	2b00      	cmp	r3, #0
 801f320:	dd02      	ble.n	801f328 <GW_level_control+0x20>
 801f322:	4827      	ldr	r0, [pc, #156]	@ (801f3c0 <GW_level_control+0xb8>)
 801f324:	f003 ffda 	bl	80232dc <puts>
 801f328:	f06f 0301 	mvn.w	r3, #1
 801f32c:	e042      	b.n	801f3b4 <GW_level_control+0xac>
 801f32e:	68bb      	ldr	r3, [r7, #8]
 801f330:	f893 3168 	ldrb.w	r3, [r3, #360]	@ 0x168
 801f334:	f083 0301 	eor.w	r3, r3, #1
 801f338:	b2db      	uxtb	r3, r3
 801f33a:	2b00      	cmp	r3, #0
 801f33c:	d003      	beq.n	801f346 <GW_level_control+0x3e>
 801f33e:	68fb      	ldr	r3, [r7, #12]
 801f340:	2200      	movs	r2, #0
 801f342:	f883 2f44 	strb.w	r2, [r3, #3908]	@ 0xf44
 801f346:	68fb      	ldr	r3, [r7, #12]
 801f348:	f893 3f44 	ldrb.w	r3, [r3, #3908]	@ 0xf44
 801f34c:	2b00      	cmp	r3, #0
 801f34e:	d103      	bne.n	801f358 <GW_level_control+0x50>
 801f350:	68fb      	ldr	r3, [r7, #12]
 801f352:	2200      	movs	r2, #0
 801f354:	f8c3 2f48 	str.w	r2, [r3, #3912]	@ 0xf48
 801f358:	68fb      	ldr	r3, [r7, #12]
 801f35a:	f893 3f44 	ldrb.w	r3, [r3, #3908]	@ 0xf44
 801f35e:	2b01      	cmp	r3, #1
 801f360:	d108      	bne.n	801f374 <GW_level_control+0x6c>
 801f362:	68fb      	ldr	r3, [r7, #12]
 801f364:	f8d3 3f48 	ldr.w	r3, [r3, #3912]	@ 0xf48
 801f368:	2b00      	cmp	r3, #0
 801f36a:	d103      	bne.n	801f374 <GW_level_control+0x6c>
 801f36c:	68fb      	ldr	r3, [r7, #12]
 801f36e:	687a      	ldr	r2, [r7, #4]
 801f370:	f8c3 2f48 	str.w	r2, [r3, #3912]	@ 0xf48
 801f374:	68fb      	ldr	r3, [r7, #12]
 801f376:	f893 3f44 	ldrb.w	r3, [r3, #3908]	@ 0xf44
 801f37a:	2b01      	cmp	r3, #1
 801f37c:	d10c      	bne.n	801f398 <GW_level_control+0x90>
 801f37e:	68fb      	ldr	r3, [r7, #12]
 801f380:	f8d3 3f48 	ldr.w	r3, [r3, #3912]	@ 0xf48
 801f384:	687a      	ldr	r2, [r7, #4]
 801f386:	1ad2      	subs	r2, r2, r3
 801f388:	68fb      	ldr	r3, [r7, #12]
 801f38a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801f38c:	429a      	cmp	r2, r3
 801f38e:	dd03      	ble.n	801f398 <GW_level_control+0x90>
 801f390:	68fb      	ldr	r3, [r7, #12]
 801f392:	2202      	movs	r2, #2
 801f394:	f883 2f44 	strb.w	r2, [r3, #3908]	@ 0xf44
 801f398:	68fb      	ldr	r3, [r7, #12]
 801f39a:	f893 3f44 	ldrb.w	r3, [r3, #3908]	@ 0xf44
 801f39e:	2b02      	cmp	r3, #2
 801f3a0:	d107      	bne.n	801f3b2 <GW_level_control+0xaa>
 801f3a2:	68b9      	ldr	r1, [r7, #8]
 801f3a4:	68f8      	ldr	r0, [r7, #12]
 801f3a6:	f000 f80d 	bl	801f3c4 <setLevelController>
 801f3aa:	68b9      	ldr	r1, [r7, #8]
 801f3ac:	68f8      	ldr	r0, [r7, #12]
 801f3ae:	f000 f865 	bl	801f47c <setPolarLevelController>
 801f3b2:	2300      	movs	r3, #0
 801f3b4:	4618      	mov	r0, r3
 801f3b6:	3710      	adds	r7, #16
 801f3b8:	46bd      	mov	sp, r7
 801f3ba:	bd80      	pop	{r7, pc}
 801f3bc:	200019c8 	.word	0x200019c8
 801f3c0:	08042f3c 	.word	0x08042f3c

0801f3c4 <setLevelController>:
 801f3c4:	b580      	push	{r7, lr}
 801f3c6:	b084      	sub	sp, #16
 801f3c8:	af00      	add	r7, sp, #0
 801f3ca:	6078      	str	r0, [r7, #4]
 801f3cc:	6039      	str	r1, [r7, #0]
 801f3ce:	683b      	ldr	r3, [r7, #0]
 801f3d0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 801f3d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f3d8:	ee17 3a90 	vmov	r3, s15
 801f3dc:	60fb      	str	r3, [r7, #12]
 801f3de:	687b      	ldr	r3, [r7, #4]
 801f3e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801f3e2:	68fa      	ldr	r2, [r7, #12]
 801f3e4:	429a      	cmp	r2, r3
 801f3e6:	dd08      	ble.n	801f3fa <setLevelController+0x36>
 801f3e8:	687b      	ldr	r3, [r7, #4]
 801f3ea:	f503 630e 	add.w	r3, r3, #2272	@ 0x8e0
 801f3ee:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 801f474 <setLevelController+0xb0>
 801f3f2:	4618      	mov	r0, r3
 801f3f4:	f002 f84c 	bl	8021490 <RFBVM_push>
 801f3f8:	e028      	b.n	801f44c <setLevelController+0x88>
 801f3fa:	687b      	ldr	r3, [r7, #4]
 801f3fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801f3fe:	68fa      	ldr	r2, [r7, #12]
 801f400:	429a      	cmp	r2, r3
 801f402:	da08      	bge.n	801f416 <setLevelController+0x52>
 801f404:	687b      	ldr	r3, [r7, #4]
 801f406:	f503 630e 	add.w	r3, r3, #2272	@ 0x8e0
 801f40a:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 801f478 <setLevelController+0xb4>
 801f40e:	4618      	mov	r0, r3
 801f410:	f002 f83e 	bl	8021490 <RFBVM_push>
 801f414:	e01a      	b.n	801f44c <setLevelController+0x88>
 801f416:	687b      	ldr	r3, [r7, #4]
 801f418:	f503 610e 	add.w	r1, r3, #2272	@ 0x8e0
 801f41c:	687b      	ldr	r3, [r7, #4]
 801f41e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801f420:	68fa      	ldr	r2, [r7, #12]
 801f422:	1ad3      	subs	r3, r2, r3
 801f424:	ee07 3a90 	vmov	s15, r3
 801f428:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801f42c:	687b      	ldr	r3, [r7, #4]
 801f42e:	f603 23f4 	addw	r3, r3, #2804	@ 0xaf4
 801f432:	edd3 7a00 	vldr	s15, [r3]
 801f436:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f43a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f43e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f442:	eeb0 0a67 	vmov.f32	s0, s15
 801f446:	4608      	mov	r0, r1
 801f448:	f002 f822 	bl	8021490 <RFBVM_push>
 801f44c:	687b      	ldr	r3, [r7, #4]
 801f44e:	f503 630e 	add.w	r3, r3, #2272	@ 0x8e0
 801f452:	4618      	mov	r0, r3
 801f454:	f002 f8dd 	bl	8021612 <RFBVM_mean>
 801f458:	eef0 7a40 	vmov.f32	s15, s0
 801f45c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f460:	ee17 2a90 	vmov	r2, s15
 801f464:	687b      	ldr	r3, [r7, #4]
 801f466:	f8c3 2f38 	str.w	r2, [r3, #3896]	@ 0xf38
 801f46a:	bf00      	nop
 801f46c:	3710      	adds	r7, #16
 801f46e:	46bd      	mov	sp, r7
 801f470:	bd80      	pop	{r7, pc}
 801f472:	bf00      	nop
 801f474:	42c80000 	.word	0x42c80000
 801f478:	00000000 	.word	0x00000000

0801f47c <setPolarLevelController>:
 801f47c:	b5b0      	push	{r4, r5, r7, lr}
 801f47e:	b086      	sub	sp, #24
 801f480:	af00      	add	r7, sp, #0
 801f482:	6078      	str	r0, [r7, #4]
 801f484:	6039      	str	r1, [r7, #0]
 801f486:	4b50      	ldr	r3, [pc, #320]	@ (801f5c8 <setPolarLevelController+0x14c>)
 801f488:	613b      	str	r3, [r7, #16]
 801f48a:	683b      	ldr	r3, [r7, #0]
 801f48c:	ed93 7a07 	vldr	s14, [r3, #28]
 801f490:	683b      	ldr	r3, [r7, #0]
 801f492:	edd3 7a07 	vldr	s15, [r3, #28]
 801f496:	ee27 7a27 	vmul.f32	s14, s14, s15
 801f49a:	683b      	ldr	r3, [r7, #0]
 801f49c:	edd3 6a08 	vldr	s13, [r3, #32]
 801f4a0:	683b      	ldr	r3, [r7, #0]
 801f4a2:	edd3 7a08 	vldr	s15, [r3, #32]
 801f4a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801f4aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f4ae:	eeb0 0a67 	vmov.f32	s0, s15
 801f4b2:	f001 ff57 	bl	8021364 <taylor_sqrt>
 801f4b6:	ed87 0a03 	vstr	s0, [r7, #12]
 801f4ba:	683b      	ldr	r3, [r7, #0]
 801f4bc:	edd3 7a07 	vldr	s15, [r3, #28]
 801f4c0:	eef5 7a40 	vcmp.f32	s15, #0.0
 801f4c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f4c8:	d102      	bne.n	801f4d0 <setPolarLevelController+0x54>
 801f4ca:	4b40      	ldr	r3, [pc, #256]	@ (801f5cc <setPolarLevelController+0x150>)
 801f4cc:	617b      	str	r3, [r7, #20]
 801f4ce:	e02a      	b.n	801f526 <setPolarLevelController+0xaa>
 801f4d0:	683b      	ldr	r3, [r7, #0]
 801f4d2:	ed93 7a08 	vldr	s14, [r3, #32]
 801f4d6:	683b      	ldr	r3, [r7, #0]
 801f4d8:	edd3 7a07 	vldr	s15, [r3, #28]
 801f4dc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801f4e0:	eeb0 0a66 	vmov.f32	s0, s13
 801f4e4:	f001 fe68 	bl	80211b8 <taylor_atan>
 801f4e8:	ee10 3a10 	vmov	r3, s0
 801f4ec:	4618      	mov	r0, r3
 801f4ee:	f7fa fb2b 	bl	8019b48 <__aeabi_f2d>
 801f4f2:	4604      	mov	r4, r0
 801f4f4:	460d      	mov	r5, r1
 801f4f6:	6938      	ldr	r0, [r7, #16]
 801f4f8:	f7fa fb26 	bl	8019b48 <__aeabi_f2d>
 801f4fc:	4602      	mov	r2, r0
 801f4fe:	460b      	mov	r3, r1
 801f500:	f04f 0000 	mov.w	r0, #0
 801f504:	4932      	ldr	r1, [pc, #200]	@ (801f5d0 <setPolarLevelController+0x154>)
 801f506:	f7fa fca1 	bl	8019e4c <__aeabi_ddiv>
 801f50a:	4602      	mov	r2, r0
 801f50c:	460b      	mov	r3, r1
 801f50e:	4620      	mov	r0, r4
 801f510:	4629      	mov	r1, r5
 801f512:	f7fa fb71 	bl	8019bf8 <__aeabi_dmul>
 801f516:	4602      	mov	r2, r0
 801f518:	460b      	mov	r3, r1
 801f51a:	4610      	mov	r0, r2
 801f51c:	4619      	mov	r1, r3
 801f51e:	f7fa fe63 	bl	801a1e8 <__aeabi_d2f>
 801f522:	4603      	mov	r3, r0
 801f524:	617b      	str	r3, [r7, #20]
 801f526:	683b      	ldr	r3, [r7, #0]
 801f528:	edd3 7a07 	vldr	s15, [r3, #28]
 801f52c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801f530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f534:	d508      	bpl.n	801f548 <setPolarLevelController+0xcc>
 801f536:	edd7 7a05 	vldr	s15, [r7, #20]
 801f53a:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 801f5d4 <setPolarLevelController+0x158>
 801f53e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f542:	edc7 7a05 	vstr	s15, [r7, #20]
 801f546:	e021      	b.n	801f58c <setPolarLevelController+0x110>
 801f548:	683b      	ldr	r3, [r7, #0]
 801f54a:	edd3 7a07 	vldr	s15, [r3, #28]
 801f54e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801f552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f556:	bfcc      	ite	gt
 801f558:	2301      	movgt	r3, #1
 801f55a:	2300      	movle	r3, #0
 801f55c:	b2da      	uxtb	r2, r3
 801f55e:	683b      	ldr	r3, [r7, #0]
 801f560:	edd3 7a08 	vldr	s15, [r3, #32]
 801f564:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801f568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f56c:	bf4c      	ite	mi
 801f56e:	2301      	movmi	r3, #1
 801f570:	2300      	movpl	r3, #0
 801f572:	b2db      	uxtb	r3, r3
 801f574:	4013      	ands	r3, r2
 801f576:	b2db      	uxtb	r3, r3
 801f578:	2b00      	cmp	r3, #0
 801f57a:	d007      	beq.n	801f58c <setPolarLevelController+0x110>
 801f57c:	edd7 7a05 	vldr	s15, [r7, #20]
 801f580:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 801f5d8 <setPolarLevelController+0x15c>
 801f584:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f588:	edc7 7a05 	vstr	s15, [r7, #20]
 801f58c:	687b      	ldr	r3, [r7, #4]
 801f58e:	f603 23f8 	addw	r3, r3, #2808	@ 0xaf8
 801f592:	ed97 0a03 	vldr	s0, [r7, #12]
 801f596:	4618      	mov	r0, r3
 801f598:	f001 ff7a 	bl	8021490 <RFBVM_push>
 801f59c:	687b      	ldr	r3, [r7, #4]
 801f59e:	f603 23f8 	addw	r3, r3, #2808	@ 0xaf8
 801f5a2:	4618      	mov	r0, r3
 801f5a4:	f002 f835 	bl	8021612 <RFBVM_mean>
 801f5a8:	eef0 7a40 	vmov.f32	s15, s0
 801f5ac:	687b      	ldr	r3, [r7, #4]
 801f5ae:	f603 733c 	addw	r3, r3, #3900	@ 0xf3c
 801f5b2:	edc3 7a00 	vstr	s15, [r3]
 801f5b6:	687b      	ldr	r3, [r7, #4]
 801f5b8:	f503 6374 	add.w	r3, r3, #3904	@ 0xf40
 801f5bc:	697a      	ldr	r2, [r7, #20]
 801f5be:	601a      	str	r2, [r3, #0]
 801f5c0:	bf00      	nop
 801f5c2:	3718      	adds	r7, #24
 801f5c4:	46bd      	mov	sp, r7
 801f5c6:	bdb0      	pop	{r4, r5, r7, pc}
 801f5c8:	40490fd8 	.word	0x40490fd8
 801f5cc:	42b40000 	.word	0x42b40000
 801f5d0:	40668000 	.word	0x40668000
 801f5d4:	43340000 	.word	0x43340000
 801f5d8:	43b40000 	.word	0x43b40000

0801f5dc <HT_init>:
 801f5dc:	b580      	push	{r7, lr}
 801f5de:	b088      	sub	sp, #32
 801f5e0:	af04      	add	r7, sp, #16
 801f5e2:	6078      	str	r0, [r7, #4]
 801f5e4:	6039      	str	r1, [r7, #0]
 801f5e6:	4b2f      	ldr	r3, [pc, #188]	@ (801f6a4 <HT_init+0xc8>)
 801f5e8:	681b      	ldr	r3, [r3, #0]
 801f5ea:	2b01      	cmp	r3, #1
 801f5ec:	dd02      	ble.n	801f5f4 <HT_init+0x18>
 801f5ee:	482e      	ldr	r0, [pc, #184]	@ (801f6a8 <HT_init+0xcc>)
 801f5f0:	f003 fe74 	bl	80232dc <puts>
 801f5f4:	687b      	ldr	r3, [r7, #4]
 801f5f6:	2b00      	cmp	r3, #0
 801f5f8:	d002      	beq.n	801f600 <HT_init+0x24>
 801f5fa:	683b      	ldr	r3, [r7, #0]
 801f5fc:	2b00      	cmp	r3, #0
 801f5fe:	d109      	bne.n	801f614 <HT_init+0x38>
 801f600:	4b28      	ldr	r3, [pc, #160]	@ (801f6a4 <HT_init+0xc8>)
 801f602:	681b      	ldr	r3, [r3, #0]
 801f604:	2b00      	cmp	r3, #0
 801f606:	dd02      	ble.n	801f60e <HT_init+0x32>
 801f608:	4828      	ldr	r0, [pc, #160]	@ (801f6ac <HT_init+0xd0>)
 801f60a:	f003 fe67 	bl	80232dc <puts>
 801f60e:	f06f 0301 	mvn.w	r3, #1
 801f612:	e042      	b.n	801f69a <HT_init+0xbe>
 801f614:	f04f 33ff 	mov.w	r3, #4294967295
 801f618:	9303      	str	r3, [sp, #12]
 801f61a:	f04f 33ff 	mov.w	r3, #4294967295
 801f61e:	9302      	str	r3, [sp, #8]
 801f620:	f04f 33ff 	mov.w	r3, #4294967295
 801f624:	9301      	str	r3, [sp, #4]
 801f626:	f04f 33ff 	mov.w	r3, #4294967295
 801f62a:	9300      	str	r3, [sp, #0]
 801f62c:	f04f 33ff 	mov.w	r3, #4294967295
 801f630:	f04f 32ff 	mov.w	r2, #4294967295
 801f634:	f04f 31ff 	mov.w	r1, #4294967295
 801f638:	6878      	ldr	r0, [r7, #4]
 801f63a:	f000 f83b 	bl	801f6b4 <HT_set_params>
 801f63e:	60f8      	str	r0, [r7, #12]
 801f640:	68fb      	ldr	r3, [r7, #12]
 801f642:	2b00      	cmp	r3, #0
 801f644:	d001      	beq.n	801f64a <HT_init+0x6e>
 801f646:	68fb      	ldr	r3, [r7, #12]
 801f648:	e027      	b.n	801f69a <HT_init+0xbe>
 801f64a:	687b      	ldr	r3, [r7, #4]
 801f64c:	f04f 0200 	mov.w	r2, #0
 801f650:	61da      	str	r2, [r3, #28]
 801f652:	687b      	ldr	r3, [r7, #4]
 801f654:	f04f 0200 	mov.w	r2, #0
 801f658:	621a      	str	r2, [r3, #32]
 801f65a:	687b      	ldr	r3, [r7, #4]
 801f65c:	f04f 0200 	mov.w	r2, #0
 801f660:	625a      	str	r2, [r3, #36]	@ 0x24
 801f662:	687b      	ldr	r3, [r7, #4]
 801f664:	2200      	movs	r2, #0
 801f666:	f883 2168 	strb.w	r2, [r3, #360]	@ 0x168
 801f66a:	687b      	ldr	r3, [r7, #4]
 801f66c:	2200      	movs	r2, #0
 801f66e:	f883 2169 	strb.w	r2, [r3, #361]	@ 0x169
 801f672:	687b      	ldr	r3, [r7, #4]
 801f674:	2200      	movs	r2, #0
 801f676:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 801f67a:	687b      	ldr	r3, [r7, #4]
 801f67c:	2200      	movs	r2, #0
 801f67e:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178
 801f682:	6838      	ldr	r0, [r7, #0]
 801f684:	f002 f84a 	bl	802171c <SEN_init>
 801f688:	60f8      	str	r0, [r7, #12]
 801f68a:	4b06      	ldr	r3, [pc, #24]	@ (801f6a4 <HT_init+0xc8>)
 801f68c:	681b      	ldr	r3, [r3, #0]
 801f68e:	2b02      	cmp	r3, #2
 801f690:	dd02      	ble.n	801f698 <HT_init+0xbc>
 801f692:	4807      	ldr	r0, [pc, #28]	@ (801f6b0 <HT_init+0xd4>)
 801f694:	f003 fe22 	bl	80232dc <puts>
 801f698:	68fb      	ldr	r3, [r7, #12]
 801f69a:	4618      	mov	r0, r3
 801f69c:	3710      	adds	r7, #16
 801f69e:	46bd      	mov	sp, r7
 801f6a0:	bd80      	pop	{r7, pc}
 801f6a2:	bf00      	nop
 801f6a4:	200019c8 	.word	0x200019c8
 801f6a8:	080432b0 	.word	0x080432b0
 801f6ac:	080432d0 	.word	0x080432d0
 801f6b0:	080432fc 	.word	0x080432fc

0801f6b4 <HT_set_params>:
 801f6b4:	b580      	push	{r7, lr}
 801f6b6:	b088      	sub	sp, #32
 801f6b8:	af04      	add	r7, sp, #16
 801f6ba:	60f8      	str	r0, [r7, #12]
 801f6bc:	60b9      	str	r1, [r7, #8]
 801f6be:	607a      	str	r2, [r7, #4]
 801f6c0:	603b      	str	r3, [r7, #0]
 801f6c2:	68fb      	ldr	r3, [r7, #12]
 801f6c4:	2b00      	cmp	r3, #0
 801f6c6:	d109      	bne.n	801f6dc <HT_set_params+0x28>
 801f6c8:	4b45      	ldr	r3, [pc, #276]	@ (801f7e0 <HT_set_params+0x12c>)
 801f6ca:	681b      	ldr	r3, [r3, #0]
 801f6cc:	2b00      	cmp	r3, #0
 801f6ce:	dd02      	ble.n	801f6d6 <HT_set_params+0x22>
 801f6d0:	4844      	ldr	r0, [pc, #272]	@ (801f7e4 <HT_set_params+0x130>)
 801f6d2:	f003 fe03 	bl	80232dc <puts>
 801f6d6:	f06f 0301 	mvn.w	r3, #1
 801f6da:	e07c      	b.n	801f7d6 <HT_set_params+0x122>
 801f6dc:	68bb      	ldr	r3, [r7, #8]
 801f6de:	2b00      	cmp	r3, #0
 801f6e0:	dd01      	ble.n	801f6e6 <HT_set_params+0x32>
 801f6e2:	68bb      	ldr	r3, [r7, #8]
 801f6e4:	e001      	b.n	801f6ea <HT_set_params+0x36>
 801f6e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801f6ea:	68fa      	ldr	r2, [r7, #12]
 801f6ec:	6013      	str	r3, [r2, #0]
 801f6ee:	687b      	ldr	r3, [r7, #4]
 801f6f0:	2b00      	cmp	r3, #0
 801f6f2:	da01      	bge.n	801f6f8 <HT_set_params+0x44>
 801f6f4:	23fa      	movs	r3, #250	@ 0xfa
 801f6f6:	607b      	str	r3, [r7, #4]
 801f6f8:	68fb      	ldr	r3, [r7, #12]
 801f6fa:	681a      	ldr	r2, [r3, #0]
 801f6fc:	687b      	ldr	r3, [r7, #4]
 801f6fe:	429a      	cmp	r2, r3
 801f700:	bfa8      	it	ge
 801f702:	461a      	movge	r2, r3
 801f704:	68fb      	ldr	r3, [r7, #12]
 801f706:	605a      	str	r2, [r3, #4]
 801f708:	683b      	ldr	r3, [r7, #0]
 801f70a:	2b00      	cmp	r3, #0
 801f70c:	db01      	blt.n	801f712 <HT_set_params+0x5e>
 801f70e:	683b      	ldr	r3, [r7, #0]
 801f710:	e001      	b.n	801f716 <HT_set_params+0x62>
 801f712:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 801f716:	68fa      	ldr	r2, [r7, #12]
 801f718:	6093      	str	r3, [r2, #8]
 801f71a:	69bb      	ldr	r3, [r7, #24]
 801f71c:	2b00      	cmp	r3, #0
 801f71e:	db01      	blt.n	801f724 <HT_set_params+0x70>
 801f720:	69bb      	ldr	r3, [r7, #24]
 801f722:	e000      	b.n	801f726 <HT_set_params+0x72>
 801f724:	2301      	movs	r3, #1
 801f726:	68fa      	ldr	r2, [r7, #12]
 801f728:	60d3      	str	r3, [r2, #12]
 801f72a:	69fb      	ldr	r3, [r7, #28]
 801f72c:	2b00      	cmp	r3, #0
 801f72e:	db01      	blt.n	801f734 <HT_set_params+0x80>
 801f730:	69fb      	ldr	r3, [r7, #28]
 801f732:	e000      	b.n	801f736 <HT_set_params+0x82>
 801f734:	2396      	movs	r3, #150	@ 0x96
 801f736:	68fa      	ldr	r2, [r7, #12]
 801f738:	6113      	str	r3, [r2, #16]
 801f73a:	6a3b      	ldr	r3, [r7, #32]
 801f73c:	2b00      	cmp	r3, #0
 801f73e:	db01      	blt.n	801f744 <HT_set_params+0x90>
 801f740:	6a3b      	ldr	r3, [r7, #32]
 801f742:	e000      	b.n	801f746 <HT_set_params+0x92>
 801f744:	23fa      	movs	r3, #250	@ 0xfa
 801f746:	68fa      	ldr	r2, [r7, #12]
 801f748:	6153      	str	r3, [r2, #20]
 801f74a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f74c:	2b00      	cmp	r3, #0
 801f74e:	db02      	blt.n	801f756 <HT_set_params+0xa2>
 801f750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f752:	2b00      	cmp	r3, #0
 801f754:	d001      	beq.n	801f75a <HT_set_params+0xa6>
 801f756:	2301      	movs	r3, #1
 801f758:	e000      	b.n	801f75c <HT_set_params+0xa8>
 801f75a:	2300      	movs	r3, #0
 801f75c:	f003 0301 	and.w	r3, r3, #1
 801f760:	b2da      	uxtb	r2, r3
 801f762:	68fb      	ldr	r3, [r7, #12]
 801f764:	761a      	strb	r2, [r3, #24]
 801f766:	4b1e      	ldr	r3, [pc, #120]	@ (801f7e0 <HT_set_params+0x12c>)
 801f768:	681b      	ldr	r3, [r3, #0]
 801f76a:	2b01      	cmp	r3, #1
 801f76c:	dd09      	ble.n	801f782 <HT_set_params+0xce>
 801f76e:	68fb      	ldr	r3, [r7, #12]
 801f770:	681a      	ldr	r2, [r3, #0]
 801f772:	68fb      	ldr	r3, [r7, #12]
 801f774:	685b      	ldr	r3, [r3, #4]
 801f776:	9300      	str	r3, [sp, #0]
 801f778:	687b      	ldr	r3, [r7, #4]
 801f77a:	68b9      	ldr	r1, [r7, #8]
 801f77c:	481a      	ldr	r0, [pc, #104]	@ (801f7e8 <HT_set_params+0x134>)
 801f77e:	f003 fd45 	bl	802320c <iprintf>
 801f782:	4b17      	ldr	r3, [pc, #92]	@ (801f7e0 <HT_set_params+0x12c>)
 801f784:	681b      	ldr	r3, [r3, #0]
 801f786:	2b01      	cmp	r3, #1
 801f788:	dd0f      	ble.n	801f7aa <HT_set_params+0xf6>
 801f78a:	68fb      	ldr	r3, [r7, #12]
 801f78c:	6899      	ldr	r1, [r3, #8]
 801f78e:	68fb      	ldr	r3, [r7, #12]
 801f790:	68db      	ldr	r3, [r3, #12]
 801f792:	68fa      	ldr	r2, [r7, #12]
 801f794:	6912      	ldr	r2, [r2, #16]
 801f796:	9202      	str	r2, [sp, #8]
 801f798:	69fa      	ldr	r2, [r7, #28]
 801f79a:	9201      	str	r2, [sp, #4]
 801f79c:	9300      	str	r3, [sp, #0]
 801f79e:	69bb      	ldr	r3, [r7, #24]
 801f7a0:	460a      	mov	r2, r1
 801f7a2:	6839      	ldr	r1, [r7, #0]
 801f7a4:	4811      	ldr	r0, [pc, #68]	@ (801f7ec <HT_set_params+0x138>)
 801f7a6:	f003 fd31 	bl	802320c <iprintf>
 801f7aa:	4b0d      	ldr	r3, [pc, #52]	@ (801f7e0 <HT_set_params+0x12c>)
 801f7ac:	681b      	ldr	r3, [r3, #0]
 801f7ae:	2b01      	cmp	r3, #1
 801f7b0:	dd09      	ble.n	801f7c6 <HT_set_params+0x112>
 801f7b2:	68fb      	ldr	r3, [r7, #12]
 801f7b4:	695a      	ldr	r2, [r3, #20]
 801f7b6:	68fb      	ldr	r3, [r7, #12]
 801f7b8:	7e1b      	ldrb	r3, [r3, #24]
 801f7ba:	9300      	str	r3, [sp, #0]
 801f7bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f7be:	6a39      	ldr	r1, [r7, #32]
 801f7c0:	480b      	ldr	r0, [pc, #44]	@ (801f7f0 <HT_set_params+0x13c>)
 801f7c2:	f003 fd23 	bl	802320c <iprintf>
 801f7c6:	4b06      	ldr	r3, [pc, #24]	@ (801f7e0 <HT_set_params+0x12c>)
 801f7c8:	681b      	ldr	r3, [r3, #0]
 801f7ca:	2b02      	cmp	r3, #2
 801f7cc:	dd02      	ble.n	801f7d4 <HT_set_params+0x120>
 801f7ce:	4809      	ldr	r0, [pc, #36]	@ (801f7f4 <HT_set_params+0x140>)
 801f7d0:	f003 fd84 	bl	80232dc <puts>
 801f7d4:	2300      	movs	r3, #0
 801f7d6:	4618      	mov	r0, r3
 801f7d8:	3710      	adds	r7, #16
 801f7da:	46bd      	mov	sp, r7
 801f7dc:	bd80      	pop	{r7, pc}
 801f7de:	bf00      	nop
 801f7e0:	200019c8 	.word	0x200019c8
 801f7e4:	0804331c 	.word	0x0804331c
 801f7e8:	0804334c 	.word	0x0804334c
 801f7ec:	08043390 	.word	0x08043390
 801f7f0:	080433dc 	.word	0x080433dc
 801f7f4:	08043418 	.word	0x08043418

0801f7f8 <HT_set_frequency>:
 801f7f8:	b580      	push	{r7, lr}
 801f7fa:	b088      	sub	sp, #32
 801f7fc:	af00      	add	r7, sp, #0
 801f7fe:	60f8      	str	r0, [r7, #12]
 801f800:	60b9      	str	r1, [r7, #8]
 801f802:	ed87 0a01 	vstr	s0, [r7, #4]
 801f806:	68fb      	ldr	r3, [r7, #12]
 801f808:	2b00      	cmp	r3, #0
 801f80a:	d002      	beq.n	801f812 <HT_set_frequency+0x1a>
 801f80c:	68bb      	ldr	r3, [r7, #8]
 801f80e:	2b00      	cmp	r3, #0
 801f810:	d109      	bne.n	801f826 <HT_set_frequency+0x2e>
 801f812:	4b4b      	ldr	r3, [pc, #300]	@ (801f940 <HT_set_frequency+0x148>)
 801f814:	681b      	ldr	r3, [r3, #0]
 801f816:	2b00      	cmp	r3, #0
 801f818:	dd02      	ble.n	801f820 <HT_set_frequency+0x28>
 801f81a:	484a      	ldr	r0, [pc, #296]	@ (801f944 <HT_set_frequency+0x14c>)
 801f81c:	f003 fd5e 	bl	80232dc <puts>
 801f820:	f06f 0301 	mvn.w	r3, #1
 801f824:	e088      	b.n	801f938 <HT_set_frequency+0x140>
 801f826:	edd7 7a01 	vldr	s15, [r7, #4]
 801f82a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801f82e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f832:	d809      	bhi.n	801f848 <HT_set_frequency+0x50>
 801f834:	4b42      	ldr	r3, [pc, #264]	@ (801f940 <HT_set_frequency+0x148>)
 801f836:	681b      	ldr	r3, [r3, #0]
 801f838:	2b00      	cmp	r3, #0
 801f83a:	dd02      	ble.n	801f842 <HT_set_frequency+0x4a>
 801f83c:	4842      	ldr	r0, [pc, #264]	@ (801f948 <HT_set_frequency+0x150>)
 801f83e:	f003 fd4d 	bl	80232dc <puts>
 801f842:	f06f 0305 	mvn.w	r3, #5
 801f846:	e077      	b.n	801f938 <HT_set_frequency+0x140>
 801f848:	ed97 0a01 	vldr	s0, [r7, #4]
 801f84c:	68b8      	ldr	r0, [r7, #8]
 801f84e:	f001 ffc9 	bl	80217e4 <SEN_set_frequency>
 801f852:	61f8      	str	r0, [r7, #28]
 801f854:	69fb      	ldr	r3, [r7, #28]
 801f856:	2b00      	cmp	r3, #0
 801f858:	d001      	beq.n	801f85e <HT_set_frequency+0x66>
 801f85a:	69fb      	ldr	r3, [r7, #28]
 801f85c:	e06c      	b.n	801f938 <HT_set_frequency+0x140>
 801f85e:	68fb      	ldr	r3, [r7, #12]
 801f860:	681b      	ldr	r3, [r3, #0]
 801f862:	ee07 3a90 	vmov	s15, r3
 801f866:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801f86a:	68bb      	ldr	r3, [r7, #8]
 801f86c:	edd3 7a03 	vldr	s15, [r3, #12]
 801f870:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f874:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 801f94c <HT_set_frequency+0x154>
 801f878:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801f87c:	ee16 0a90 	vmov	r0, s13
 801f880:	f7fa f962 	bl	8019b48 <__aeabi_f2d>
 801f884:	4602      	mov	r2, r0
 801f886:	460b      	mov	r3, r1
 801f888:	ec43 2b10 	vmov	d0, r2, r3
 801f88c:	f007 fb28 	bl	8026ee0 <ceil>
 801f890:	ec53 2b10 	vmov	r2, r3, d0
 801f894:	4610      	mov	r0, r2
 801f896:	4619      	mov	r1, r3
 801f898:	f7fa fc5e 	bl	801a158 <__aeabi_d2iz>
 801f89c:	4603      	mov	r3, r0
 801f89e:	61bb      	str	r3, [r7, #24]
 801f8a0:	68fb      	ldr	r3, [r7, #12]
 801f8a2:	685b      	ldr	r3, [r3, #4]
 801f8a4:	ee07 3a90 	vmov	s15, r3
 801f8a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801f8ac:	68bb      	ldr	r3, [r7, #8]
 801f8ae:	edd3 7a03 	vldr	s15, [r3, #12]
 801f8b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f8b6:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 801f94c <HT_set_frequency+0x154>
 801f8ba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801f8be:	ee16 0a90 	vmov	r0, s13
 801f8c2:	f7fa f941 	bl	8019b48 <__aeabi_f2d>
 801f8c6:	4602      	mov	r2, r0
 801f8c8:	460b      	mov	r3, r1
 801f8ca:	ec43 2b10 	vmov	d0, r2, r3
 801f8ce:	f007 fb07 	bl	8026ee0 <ceil>
 801f8d2:	ec53 2b10 	vmov	r2, r3, d0
 801f8d6:	4610      	mov	r0, r2
 801f8d8:	4619      	mov	r1, r3
 801f8da:	f7fa fc3d 	bl	801a158 <__aeabi_d2iz>
 801f8de:	4603      	mov	r3, r0
 801f8e0:	617b      	str	r3, [r7, #20]
 801f8e2:	4b17      	ldr	r3, [pc, #92]	@ (801f940 <HT_set_frequency+0x148>)
 801f8e4:	681b      	ldr	r3, [r3, #0]
 801f8e6:	2b01      	cmp	r3, #1
 801f8e8:	dd04      	ble.n	801f8f4 <HT_set_frequency+0xfc>
 801f8ea:	697a      	ldr	r2, [r7, #20]
 801f8ec:	69b9      	ldr	r1, [r7, #24]
 801f8ee:	4818      	ldr	r0, [pc, #96]	@ (801f950 <HT_set_frequency+0x158>)
 801f8f0:	f003 fc8c 	bl	802320c <iprintf>
 801f8f4:	69ba      	ldr	r2, [r7, #24]
 801f8f6:	697b      	ldr	r3, [r7, #20]
 801f8f8:	429a      	cmp	r2, r3
 801f8fa:	da09      	bge.n	801f910 <HT_set_frequency+0x118>
 801f8fc:	4b10      	ldr	r3, [pc, #64]	@ (801f940 <HT_set_frequency+0x148>)
 801f8fe:	681b      	ldr	r3, [r3, #0]
 801f900:	2b00      	cmp	r3, #0
 801f902:	dd02      	ble.n	801f90a <HT_set_frequency+0x112>
 801f904:	4813      	ldr	r0, [pc, #76]	@ (801f954 <HT_set_frequency+0x15c>)
 801f906:	f003 fce9 	bl	80232dc <puts>
 801f90a:	f06f 0306 	mvn.w	r3, #6
 801f90e:	e013      	b.n	801f938 <HT_set_frequency+0x140>
 801f910:	68fb      	ldr	r3, [r7, #12]
 801f912:	697a      	ldr	r2, [r7, #20]
 801f914:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174
 801f918:	68fb      	ldr	r3, [r7, #12]
 801f91a:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 801f91e:	69b9      	ldr	r1, [r7, #24]
 801f920:	4618      	mov	r0, r3
 801f922:	f000 f81b 	bl	801f95c <HT_set_path_length>
 801f926:	61f8      	str	r0, [r7, #28]
 801f928:	4b05      	ldr	r3, [pc, #20]	@ (801f940 <HT_set_frequency+0x148>)
 801f92a:	681b      	ldr	r3, [r3, #0]
 801f92c:	2b02      	cmp	r3, #2
 801f92e:	dd02      	ble.n	801f936 <HT_set_frequency+0x13e>
 801f930:	4809      	ldr	r0, [pc, #36]	@ (801f958 <HT_set_frequency+0x160>)
 801f932:	f003 fcd3 	bl	80232dc <puts>
 801f936:	69fb      	ldr	r3, [r7, #28]
 801f938:	4618      	mov	r0, r3
 801f93a:	3720      	adds	r7, #32
 801f93c:	46bd      	mov	sp, r7
 801f93e:	bd80      	pop	{r7, pc}
 801f940:	200019c8 	.word	0x200019c8
 801f944:	08043440 	.word	0x08043440
 801f948:	0804346c 	.word	0x0804346c
 801f94c:	447a0000 	.word	0x447a0000
 801f950:	080434a0 	.word	0x080434a0
 801f954:	080434d8 	.word	0x080434d8
 801f958:	08043514 	.word	0x08043514

0801f95c <HT_set_path_length>:
 801f95c:	b580      	push	{r7, lr}
 801f95e:	b084      	sub	sp, #16
 801f960:	af00      	add	r7, sp, #0
 801f962:	6078      	str	r0, [r7, #4]
 801f964:	6039      	str	r1, [r7, #0]
 801f966:	687b      	ldr	r3, [r7, #4]
 801f968:	2b00      	cmp	r3, #0
 801f96a:	d109      	bne.n	801f980 <HT_set_path_length+0x24>
 801f96c:	4b28      	ldr	r3, [pc, #160]	@ (801fa10 <HT_set_path_length+0xb4>)
 801f96e:	681b      	ldr	r3, [r3, #0]
 801f970:	2b00      	cmp	r3, #0
 801f972:	dd02      	ble.n	801f97a <HT_set_path_length+0x1e>
 801f974:	4827      	ldr	r0, [pc, #156]	@ (801fa14 <HT_set_path_length+0xb8>)
 801f976:	f003 fcb1 	bl	80232dc <puts>
 801f97a:	f06f 0301 	mvn.w	r3, #1
 801f97e:	e042      	b.n	801fa06 <HT_set_path_length+0xaa>
 801f980:	683b      	ldr	r3, [r7, #0]
 801f982:	2b00      	cmp	r3, #0
 801f984:	da09      	bge.n	801f99a <HT_set_path_length+0x3e>
 801f986:	4b22      	ldr	r3, [pc, #136]	@ (801fa10 <HT_set_path_length+0xb4>)
 801f988:	681b      	ldr	r3, [r3, #0]
 801f98a:	2b00      	cmp	r3, #0
 801f98c:	dd02      	ble.n	801f994 <HT_set_path_length+0x38>
 801f98e:	4822      	ldr	r0, [pc, #136]	@ (801fa18 <HT_set_path_length+0xbc>)
 801f990:	f003 fca4 	bl	80232dc <puts>
 801f994:	f06f 0303 	mvn.w	r3, #3
 801f998:	e035      	b.n	801fa06 <HT_set_path_length+0xaa>
 801f99a:	687b      	ldr	r3, [r7, #4]
 801f99c:	683a      	ldr	r2, [r7, #0]
 801f99e:	601a      	str	r2, [r3, #0]
 801f9a0:	687b      	ldr	r3, [r7, #4]
 801f9a2:	2200      	movs	r2, #0
 801f9a4:	609a      	str	r2, [r3, #8]
 801f9a6:	687b      	ldr	r3, [r7, #4]
 801f9a8:	f103 020c 	add.w	r2, r3, #12
 801f9ac:	687b      	ldr	r3, [r7, #4]
 801f9ae:	681b      	ldr	r3, [r3, #0]
 801f9b0:	4619      	mov	r1, r3
 801f9b2:	4610      	mov	r0, r2
 801f9b4:	f001 fd36 	bl	8021424 <RFBVM_init>
 801f9b8:	60f8      	str	r0, [r7, #12]
 801f9ba:	68fb      	ldr	r3, [r7, #12]
 801f9bc:	2b00      	cmp	r3, #0
 801f9be:	d001      	beq.n	801f9c4 <HT_set_path_length+0x68>
 801f9c0:	68fb      	ldr	r3, [r7, #12]
 801f9c2:	e020      	b.n	801fa06 <HT_set_path_length+0xaa>
 801f9c4:	687b      	ldr	r3, [r7, #4]
 801f9c6:	f503 7208 	add.w	r2, r3, #544	@ 0x220
 801f9ca:	687b      	ldr	r3, [r7, #4]
 801f9cc:	681b      	ldr	r3, [r3, #0]
 801f9ce:	4619      	mov	r1, r3
 801f9d0:	4610      	mov	r0, r2
 801f9d2:	f001 fd27 	bl	8021424 <RFBVM_init>
 801f9d6:	60f8      	str	r0, [r7, #12]
 801f9d8:	68fb      	ldr	r3, [r7, #12]
 801f9da:	2b00      	cmp	r3, #0
 801f9dc:	d001      	beq.n	801f9e2 <HT_set_path_length+0x86>
 801f9de:	68fb      	ldr	r3, [r7, #12]
 801f9e0:	e011      	b.n	801fa06 <HT_set_path_length+0xaa>
 801f9e2:	687b      	ldr	r3, [r7, #4]
 801f9e4:	f203 4234 	addw	r2, r3, #1076	@ 0x434
 801f9e8:	687b      	ldr	r3, [r7, #4]
 801f9ea:	681b      	ldr	r3, [r3, #0]
 801f9ec:	4619      	mov	r1, r3
 801f9ee:	4610      	mov	r0, r2
 801f9f0:	f001 fd18 	bl	8021424 <RFBVM_init>
 801f9f4:	60f8      	str	r0, [r7, #12]
 801f9f6:	4b06      	ldr	r3, [pc, #24]	@ (801fa10 <HT_set_path_length+0xb4>)
 801f9f8:	681b      	ldr	r3, [r3, #0]
 801f9fa:	2b02      	cmp	r3, #2
 801f9fc:	dd02      	ble.n	801fa04 <HT_set_path_length+0xa8>
 801f9fe:	4807      	ldr	r0, [pc, #28]	@ (801fa1c <HT_set_path_length+0xc0>)
 801fa00:	f003 fc6c 	bl	80232dc <puts>
 801fa04:	68fb      	ldr	r3, [r7, #12]
 801fa06:	4618      	mov	r0, r3
 801fa08:	3710      	adds	r7, #16
 801fa0a:	46bd      	mov	sp, r7
 801fa0c:	bd80      	pop	{r7, pc}
 801fa0e:	bf00      	nop
 801fa10:	200019c8 	.word	0x200019c8
 801fa14:	08043538 	.word	0x08043538
 801fa18:	0804356c 	.word	0x0804356c
 801fa1c:	080435a4 	.word	0x080435a4

0801fa20 <HT_set_square_resolution>:
 801fa20:	b580      	push	{r7, lr}
 801fa22:	b086      	sub	sp, #24
 801fa24:	af00      	add	r7, sp, #0
 801fa26:	60f8      	str	r0, [r7, #12]
 801fa28:	60b9      	str	r1, [r7, #8]
 801fa2a:	607a      	str	r2, [r7, #4]
 801fa2c:	68fb      	ldr	r3, [r7, #12]
 801fa2e:	2b00      	cmp	r3, #0
 801fa30:	d002      	beq.n	801fa38 <HT_set_square_resolution+0x18>
 801fa32:	68bb      	ldr	r3, [r7, #8]
 801fa34:	2b00      	cmp	r3, #0
 801fa36:	d109      	bne.n	801fa4c <HT_set_square_resolution+0x2c>
 801fa38:	4b1b      	ldr	r3, [pc, #108]	@ (801faa8 <HT_set_square_resolution+0x88>)
 801fa3a:	681b      	ldr	r3, [r3, #0]
 801fa3c:	2b00      	cmp	r3, #0
 801fa3e:	dd02      	ble.n	801fa46 <HT_set_square_resolution+0x26>
 801fa40:	481a      	ldr	r0, [pc, #104]	@ (801faac <HT_set_square_resolution+0x8c>)
 801fa42:	f003 fc4b 	bl	80232dc <puts>
 801fa46:	f06f 0301 	mvn.w	r3, #1
 801fa4a:	e028      	b.n	801fa9e <HT_set_square_resolution+0x7e>
 801fa4c:	687b      	ldr	r3, [r7, #4]
 801fa4e:	2b00      	cmp	r3, #0
 801fa50:	dc09      	bgt.n	801fa66 <HT_set_square_resolution+0x46>
 801fa52:	4b15      	ldr	r3, [pc, #84]	@ (801faa8 <HT_set_square_resolution+0x88>)
 801fa54:	681b      	ldr	r3, [r3, #0]
 801fa56:	2b00      	cmp	r3, #0
 801fa58:	dd02      	ble.n	801fa60 <HT_set_square_resolution+0x40>
 801fa5a:	4815      	ldr	r0, [pc, #84]	@ (801fab0 <HT_set_square_resolution+0x90>)
 801fa5c:	f003 fc3e 	bl	80232dc <puts>
 801fa60:	f06f 0303 	mvn.w	r3, #3
 801fa64:	e01b      	b.n	801fa9e <HT_set_square_resolution+0x7e>
 801fa66:	6879      	ldr	r1, [r7, #4]
 801fa68:	68b8      	ldr	r0, [r7, #8]
 801fa6a:	f001 ff31 	bl	80218d0 <SEN_set_square_resolution>
 801fa6e:	6178      	str	r0, [r7, #20]
 801fa70:	697b      	ldr	r3, [r7, #20]
 801fa72:	2b00      	cmp	r3, #0
 801fa74:	d001      	beq.n	801fa7a <HT_set_square_resolution+0x5a>
 801fa76:	697b      	ldr	r3, [r7, #20]
 801fa78:	e011      	b.n	801fa9e <HT_set_square_resolution+0x7e>
 801fa7a:	68fb      	ldr	r3, [r7, #12]
 801fa7c:	f103 021c 	add.w	r2, r3, #28
 801fa80:	68bb      	ldr	r3, [r7, #8]
 801fa82:	689b      	ldr	r3, [r3, #8]
 801fa84:	4619      	mov	r1, r3
 801fa86:	4610      	mov	r0, r2
 801fa88:	f000 f816 	bl	801fab8 <HT_struct_init>
 801fa8c:	6178      	str	r0, [r7, #20]
 801fa8e:	4b06      	ldr	r3, [pc, #24]	@ (801faa8 <HT_set_square_resolution+0x88>)
 801fa90:	681b      	ldr	r3, [r3, #0]
 801fa92:	2b02      	cmp	r3, #2
 801fa94:	dd02      	ble.n	801fa9c <HT_set_square_resolution+0x7c>
 801fa96:	4807      	ldr	r0, [pc, #28]	@ (801fab4 <HT_set_square_resolution+0x94>)
 801fa98:	f003 fc20 	bl	80232dc <puts>
 801fa9c:	697b      	ldr	r3, [r7, #20]
 801fa9e:	4618      	mov	r0, r3
 801faa0:	3718      	adds	r7, #24
 801faa2:	46bd      	mov	sp, r7
 801faa4:	bd80      	pop	{r7, pc}
 801faa6:	bf00      	nop
 801faa8:	200019c8 	.word	0x200019c8
 801faac:	08043670 	.word	0x08043670
 801fab0:	080436a8 	.word	0x080436a8
 801fab4:	080436f0 	.word	0x080436f0

0801fab8 <HT_struct_init>:
 801fab8:	b580      	push	{r7, lr}
 801faba:	b084      	sub	sp, #16
 801fabc:	af00      	add	r7, sp, #0
 801fabe:	6078      	str	r0, [r7, #4]
 801fac0:	6039      	str	r1, [r7, #0]
 801fac2:	687b      	ldr	r3, [r7, #4]
 801fac4:	2b00      	cmp	r3, #0
 801fac6:	d109      	bne.n	801fadc <HT_struct_init+0x24>
 801fac8:	4b20      	ldr	r3, [pc, #128]	@ (801fb4c <HT_struct_init+0x94>)
 801faca:	681b      	ldr	r3, [r3, #0]
 801facc:	2b00      	cmp	r3, #0
 801face:	dd02      	ble.n	801fad6 <HT_struct_init+0x1e>
 801fad0:	481f      	ldr	r0, [pc, #124]	@ (801fb50 <HT_struct_init+0x98>)
 801fad2:	f003 fc03 	bl	80232dc <puts>
 801fad6:	f06f 0301 	mvn.w	r3, #1
 801fada:	e032      	b.n	801fb42 <HT_struct_init+0x8a>
 801fadc:	683b      	ldr	r3, [r7, #0]
 801fade:	2b00      	cmp	r3, #0
 801fae0:	dd02      	ble.n	801fae8 <HT_struct_init+0x30>
 801fae2:	683b      	ldr	r3, [r7, #0]
 801fae4:	2b40      	cmp	r3, #64	@ 0x40
 801fae6:	dd0a      	ble.n	801fafe <HT_struct_init+0x46>
 801fae8:	4b18      	ldr	r3, [pc, #96]	@ (801fb4c <HT_struct_init+0x94>)
 801faea:	681b      	ldr	r3, [r3, #0]
 801faec:	2b00      	cmp	r3, #0
 801faee:	dd03      	ble.n	801faf8 <HT_struct_init+0x40>
 801faf0:	6839      	ldr	r1, [r7, #0]
 801faf2:	4818      	ldr	r0, [pc, #96]	@ (801fb54 <HT_struct_init+0x9c>)
 801faf4:	f003 fb8a 	bl	802320c <iprintf>
 801faf8:	f06f 0303 	mvn.w	r3, #3
 801fafc:	e021      	b.n	801fb42 <HT_struct_init+0x8a>
 801fafe:	2300      	movs	r3, #0
 801fb00:	60fb      	str	r3, [r7, #12]
 801fb02:	e012      	b.n	801fb2a <HT_struct_init+0x72>
 801fb04:	687a      	ldr	r2, [r7, #4]
 801fb06:	68fb      	ldr	r3, [r7, #12]
 801fb08:	3302      	adds	r3, #2
 801fb0a:	009b      	lsls	r3, r3, #2
 801fb0c:	4413      	add	r3, r2
 801fb0e:	3304      	adds	r3, #4
 801fb10:	f04f 0200 	mov.w	r2, #0
 801fb14:	601a      	str	r2, [r3, #0]
 801fb16:	687a      	ldr	r2, [r7, #4]
 801fb18:	68fb      	ldr	r3, [r7, #12]
 801fb1a:	4413      	add	r3, r2
 801fb1c:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 801fb20:	2200      	movs	r2, #0
 801fb22:	701a      	strb	r2, [r3, #0]
 801fb24:	68fb      	ldr	r3, [r7, #12]
 801fb26:	3301      	adds	r3, #1
 801fb28:	60fb      	str	r3, [r7, #12]
 801fb2a:	68fa      	ldr	r2, [r7, #12]
 801fb2c:	683b      	ldr	r3, [r7, #0]
 801fb2e:	429a      	cmp	r2, r3
 801fb30:	dbe8      	blt.n	801fb04 <HT_struct_init+0x4c>
 801fb32:	4b06      	ldr	r3, [pc, #24]	@ (801fb4c <HT_struct_init+0x94>)
 801fb34:	681b      	ldr	r3, [r3, #0]
 801fb36:	2b02      	cmp	r3, #2
 801fb38:	dd02      	ble.n	801fb40 <HT_struct_init+0x88>
 801fb3a:	4807      	ldr	r0, [pc, #28]	@ (801fb58 <HT_struct_init+0xa0>)
 801fb3c:	f003 fbce 	bl	80232dc <puts>
 801fb40:	2300      	movs	r3, #0
 801fb42:	4618      	mov	r0, r3
 801fb44:	3710      	adds	r7, #16
 801fb46:	46bd      	mov	sp, r7
 801fb48:	bd80      	pop	{r7, pc}
 801fb4a:	bf00      	nop
 801fb4c:	200019c8 	.word	0x200019c8
 801fb50:	08043720 	.word	0x08043720
 801fb54:	08043750 	.word	0x08043750
 801fb58:	08043794 	.word	0x08043794

0801fb5c <HT_run>:
 801fb5c:	b580      	push	{r7, lr}
 801fb5e:	b084      	sub	sp, #16
 801fb60:	af00      	add	r7, sp, #0
 801fb62:	6078      	str	r0, [r7, #4]
 801fb64:	6039      	str	r1, [r7, #0]
 801fb66:	687b      	ldr	r3, [r7, #4]
 801fb68:	2b00      	cmp	r3, #0
 801fb6a:	d002      	beq.n	801fb72 <HT_run+0x16>
 801fb6c:	683b      	ldr	r3, [r7, #0]
 801fb6e:	2b00      	cmp	r3, #0
 801fb70:	d109      	bne.n	801fb86 <HT_run+0x2a>
 801fb72:	4b14      	ldr	r3, [pc, #80]	@ (801fbc4 <HT_run+0x68>)
 801fb74:	681b      	ldr	r3, [r3, #0]
 801fb76:	2b00      	cmp	r3, #0
 801fb78:	dd02      	ble.n	801fb80 <HT_run+0x24>
 801fb7a:	4813      	ldr	r0, [pc, #76]	@ (801fbc8 <HT_run+0x6c>)
 801fb7c:	f003 fbae 	bl	80232dc <puts>
 801fb80:	f06f 0301 	mvn.w	r3, #1
 801fb84:	e01a      	b.n	801fbbc <HT_run+0x60>
 801fb86:	6839      	ldr	r1, [r7, #0]
 801fb88:	6878      	ldr	r0, [r7, #4]
 801fb8a:	f000 f821 	bl	801fbd0 <HT_find_hand>
 801fb8e:	60f8      	str	r0, [r7, #12]
 801fb90:	68fb      	ldr	r3, [r7, #12]
 801fb92:	2b00      	cmp	r3, #0
 801fb94:	d001      	beq.n	801fb9a <HT_run+0x3e>
 801fb96:	68fb      	ldr	r3, [r7, #12]
 801fb98:	e010      	b.n	801fbbc <HT_run+0x60>
 801fb9a:	6878      	ldr	r0, [r7, #4]
 801fb9c:	f001 f916 	bl	8020dcc <HT_update_path>
 801fba0:	60f8      	str	r0, [r7, #12]
 801fba2:	68fb      	ldr	r3, [r7, #12]
 801fba4:	2b00      	cmp	r3, #0
 801fba6:	d001      	beq.n	801fbac <HT_run+0x50>
 801fba8:	68fb      	ldr	r3, [r7, #12]
 801fbaa:	e007      	b.n	801fbbc <HT_run+0x60>
 801fbac:	4b05      	ldr	r3, [pc, #20]	@ (801fbc4 <HT_run+0x68>)
 801fbae:	681b      	ldr	r3, [r3, #0]
 801fbb0:	2b02      	cmp	r3, #2
 801fbb2:	dd02      	ble.n	801fbba <HT_run+0x5e>
 801fbb4:	4805      	ldr	r0, [pc, #20]	@ (801fbcc <HT_run+0x70>)
 801fbb6:	f003 fb91 	bl	80232dc <puts>
 801fbba:	2300      	movs	r3, #0
 801fbbc:	4618      	mov	r0, r3
 801fbbe:	3710      	adds	r7, #16
 801fbc0:	46bd      	mov	sp, r7
 801fbc2:	bd80      	pop	{r7, pc}
 801fbc4:	200019c8 	.word	0x200019c8
 801fbc8:	080437bc 	.word	0x080437bc
 801fbcc:	080437e4 	.word	0x080437e4

0801fbd0 <HT_find_hand>:
 801fbd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fbd4:	f2ad 5d34 	subw	sp, sp, #1332	@ 0x534
 801fbd8:	af06      	add	r7, sp, #24
 801fbda:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 801fbde:	f2a3 43ec 	subw	r3, r3, #1260	@ 0x4ec
 801fbe2:	6018      	str	r0, [r3, #0]
 801fbe4:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 801fbe8:	f5a3 639e 	sub.w	r3, r3, #1264	@ 0x4f0
 801fbec:	6019      	str	r1, [r3, #0]
 801fbee:	2300      	movs	r3, #0
 801fbf0:	f8c7 34fc 	str.w	r3, [r7, #1276]	@ 0x4fc
 801fbf4:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 801fbf8:	f2a3 43ec 	subw	r3, r3, #1260	@ 0x4ec
 801fbfc:	681b      	ldr	r3, [r3, #0]
 801fbfe:	2b00      	cmp	r3, #0
 801fc00:	d006      	beq.n	801fc10 <HT_find_hand+0x40>
 801fc02:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 801fc06:	f5a3 639e 	sub.w	r3, r3, #1264	@ 0x4f0
 801fc0a:	681b      	ldr	r3, [r3, #0]
 801fc0c:	2b00      	cmp	r3, #0
 801fc0e:	d10a      	bne.n	801fc26 <HT_find_hand+0x56>
 801fc10:	4b9c      	ldr	r3, [pc, #624]	@ (801fe84 <HT_find_hand+0x2b4>)
 801fc12:	681b      	ldr	r3, [r3, #0]
 801fc14:	2b00      	cmp	r3, #0
 801fc16:	dd02      	ble.n	801fc1e <HT_find_hand+0x4e>
 801fc18:	489b      	ldr	r0, [pc, #620]	@ (801fe88 <HT_find_hand+0x2b8>)
 801fc1a:	f003 fb5f 	bl	80232dc <puts>
 801fc1e:	f06f 0301 	mvn.w	r3, #1
 801fc22:	f001 b8bd 	b.w	8020da0 <HT_find_hand+0x11d0>
 801fc26:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 801fc2a:	f5a3 639e 	sub.w	r3, r3, #1264	@ 0x4f0
 801fc2e:	681b      	ldr	r3, [r3, #0]
 801fc30:	689b      	ldr	r3, [r3, #8]
 801fc32:	2b00      	cmp	r3, #0
 801fc34:	dc0a      	bgt.n	801fc4c <HT_find_hand+0x7c>
 801fc36:	4b93      	ldr	r3, [pc, #588]	@ (801fe84 <HT_find_hand+0x2b4>)
 801fc38:	681b      	ldr	r3, [r3, #0]
 801fc3a:	2b00      	cmp	r3, #0
 801fc3c:	dd02      	ble.n	801fc44 <HT_find_hand+0x74>
 801fc3e:	4893      	ldr	r0, [pc, #588]	@ (801fe8c <HT_find_hand+0x2bc>)
 801fc40:	f003 fb4c 	bl	80232dc <puts>
 801fc44:	f06f 0303 	mvn.w	r3, #3
 801fc48:	f001 b8aa 	b.w	8020da0 <HT_find_hand+0x11d0>
 801fc4c:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 801fc50:	f2a3 43ec 	subw	r3, r3, #1260	@ 0x4ec
 801fc54:	681b      	ldr	r3, [r3, #0]
 801fc56:	331c      	adds	r3, #28
 801fc58:	f8c7 34e0 	str.w	r3, [r7, #1248]	@ 0x4e0
 801fc5c:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 801fc60:	f2a3 43ec 	subw	r3, r3, #1260	@ 0x4ec
 801fc64:	681b      	ldr	r3, [r3, #0]
 801fc66:	f8c7 34dc 	str.w	r3, [r7, #1244]	@ 0x4dc
 801fc6a:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 801fc6e:	f2a3 43ec 	subw	r3, r3, #1260	@ 0x4ec
 801fc72:	681b      	ldr	r3, [r3, #0]
 801fc74:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 801fc78:	f8c7 34d8 	str.w	r3, [r7, #1240]	@ 0x4d8
 801fc7c:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 801fc80:	f5a3 639e 	sub.w	r3, r3, #1264	@ 0x4f0
 801fc84:	681b      	ldr	r3, [r3, #0]
 801fc86:	689b      	ldr	r3, [r3, #8]
 801fc88:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
 801fc8c:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 801fc90:	f5a3 639e 	sub.w	r3, r3, #1264	@ 0x4f0
 801fc94:	681b      	ldr	r3, [r3, #0]
 801fc96:	3320      	adds	r3, #32
 801fc98:	f8c7 34d0 	str.w	r3, [r7, #1232]	@ 0x4d0
 801fc9c:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 801fca0:	f5a3 639e 	sub.w	r3, r3, #1264	@ 0x4f0
 801fca4:	681b      	ldr	r3, [r3, #0]
 801fca6:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 801fcaa:	f8c7 34cc 	str.w	r3, [r7, #1228]	@ 0x4cc
 801fcae:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 801fcb2:	f5a3 639e 	sub.w	r3, r3, #1264	@ 0x4f0
 801fcb6:	681b      	ldr	r3, [r3, #0]
 801fcb8:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 801fcbc:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
 801fcc0:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 801fcc4:	681a      	ldr	r2, [r3, #0]
 801fcc6:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 801fcca:	f5a3 639d 	sub.w	r3, r3, #1256	@ 0x4e8
 801fcce:	601a      	str	r2, [r3, #0]
 801fcd0:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 801fcd4:	685a      	ldr	r2, [r3, #4]
 801fcd6:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 801fcda:	f5a3 639d 	sub.w	r3, r3, #1256	@ 0x4e8
 801fcde:	605a      	str	r2, [r3, #4]
 801fce0:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 801fce4:	689a      	ldr	r2, [r3, #8]
 801fce6:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 801fcea:	f5a3 639d 	sub.w	r3, r3, #1256	@ 0x4e8
 801fcee:	609a      	str	r2, [r3, #8]
 801fcf0:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 801fcf4:	f04f 0200 	mov.w	r2, #0
 801fcf8:	601a      	str	r2, [r3, #0]
 801fcfa:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 801fcfe:	f04f 0200 	mov.w	r2, #0
 801fd02:	605a      	str	r2, [r3, #4]
 801fd04:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 801fd08:	f04f 0200 	mov.w	r2, #0
 801fd0c:	609a      	str	r2, [r3, #8]
 801fd0e:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 801fd12:	2200      	movs	r2, #0
 801fd14:	f883 214c 	strb.w	r2, [r3, #332]	@ 0x14c
 801fd18:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 801fd1c:	2200      	movs	r2, #0
 801fd1e:	f883 214d 	strb.w	r2, [r3, #333]	@ 0x14d
 801fd22:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 801fd26:	f5a3 639e 	sub.w	r3, r3, #1264	@ 0x4f0
 801fd2a:	681b      	ldr	r3, [r3, #0]
 801fd2c:	69da      	ldr	r2, [r3, #28]
 801fd2e:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 801fd32:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
 801fd36:	2300      	movs	r3, #0
 801fd38:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
 801fd3c:	e055      	b.n	801fdea <HT_find_hand+0x21a>
 801fd3e:	f8d7 24e0 	ldr.w	r2, [r7, #1248]	@ 0x4e0
 801fd42:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 801fd46:	3302      	adds	r3, #2
 801fd48:	009b      	lsls	r3, r3, #2
 801fd4a:	4413      	add	r3, r2
 801fd4c:	3304      	adds	r3, #4
 801fd4e:	681a      	ldr	r2, [r3, #0]
 801fd50:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 801fd54:	f5a3 619d 	sub.w	r1, r3, #1256	@ 0x4e8
 801fd58:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 801fd5c:	3302      	adds	r3, #2
 801fd5e:	009b      	lsls	r3, r3, #2
 801fd60:	440b      	add	r3, r1
 801fd62:	3304      	adds	r3, #4
 801fd64:	601a      	str	r2, [r3, #0]
 801fd66:	f8d7 24e0 	ldr.w	r2, [r7, #1248]	@ 0x4e0
 801fd6a:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 801fd6e:	4413      	add	r3, r2
 801fd70:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 801fd74:	7819      	ldrb	r1, [r3, #0]
 801fd76:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 801fd7a:	f5a3 629d 	sub.w	r2, r3, #1256	@ 0x4e8
 801fd7e:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 801fd82:	4413      	add	r3, r2
 801fd84:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 801fd88:	460a      	mov	r2, r1
 801fd8a:	701a      	strb	r2, [r3, #0]
 801fd8c:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 801fd90:	009b      	lsls	r3, r3, #2
 801fd92:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	@ 0x4d0
 801fd96:	4413      	add	r3, r2
 801fd98:	edd3 7a00 	vldr	s15, [r3]
 801fd9c:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 801fda0:	f8d7 24c8 	ldr.w	r2, [r7, #1224]	@ 0x4c8
 801fda4:	4413      	add	r3, r2
 801fda6:	781b      	ldrb	r3, [r3, #0]
 801fda8:	2b00      	cmp	r3, #0
 801fdaa:	d002      	beq.n	801fdb2 <HT_find_hand+0x1e2>
 801fdac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801fdb0:	e001      	b.n	801fdb6 <HT_find_hand+0x1e6>
 801fdb2:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 801fe90 <HT_find_hand+0x2c0>
 801fdb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 801fdba:	f8d7 24e0 	ldr.w	r2, [r7, #1248]	@ 0x4e0
 801fdbe:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 801fdc2:	3302      	adds	r3, #2
 801fdc4:	009b      	lsls	r3, r3, #2
 801fdc6:	4413      	add	r3, r2
 801fdc8:	3304      	adds	r3, #4
 801fdca:	edc3 7a00 	vstr	s15, [r3]
 801fdce:	f8d7 24e0 	ldr.w	r2, [r7, #1248]	@ 0x4e0
 801fdd2:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 801fdd6:	4413      	add	r3, r2
 801fdd8:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 801fddc:	2200      	movs	r2, #0
 801fdde:	701a      	strb	r2, [r3, #0]
 801fde0:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 801fde4:	3301      	adds	r3, #1
 801fde6:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
 801fdea:	f8d7 2514 	ldr.w	r2, [r7, #1300]	@ 0x514
 801fdee:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
 801fdf2:	429a      	cmp	r2, r3
 801fdf4:	dba3      	blt.n	801fd3e <HT_find_hand+0x16e>
 801fdf6:	f04f 33ff 	mov.w	r3, #4294967295
 801fdfa:	f8c7 350c 	str.w	r3, [r7, #1292]	@ 0x50c
 801fdfe:	2300      	movs	r3, #0
 801fe00:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
 801fe04:	e029      	b.n	801fe5a <HT_find_hand+0x28a>
 801fe06:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 801fe0a:	f8d7 24c8 	ldr.w	r2, [r7, #1224]	@ 0x4c8
 801fe0e:	4413      	add	r3, r2
 801fe10:	781b      	ldrb	r3, [r3, #0]
 801fe12:	2b00      	cmp	r3, #0
 801fe14:	d01c      	beq.n	801fe50 <HT_find_hand+0x280>
 801fe16:	f8d7 350c 	ldr.w	r3, [r7, #1292]	@ 0x50c
 801fe1a:	2b00      	cmp	r3, #0
 801fe1c:	db14      	blt.n	801fe48 <HT_find_hand+0x278>
 801fe1e:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 801fe22:	009b      	lsls	r3, r3, #2
 801fe24:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	@ 0x4d0
 801fe28:	4413      	add	r3, r2
 801fe2a:	ed93 7a00 	vldr	s14, [r3]
 801fe2e:	f8d7 350c 	ldr.w	r3, [r7, #1292]	@ 0x50c
 801fe32:	009b      	lsls	r3, r3, #2
 801fe34:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	@ 0x4d0
 801fe38:	4413      	add	r3, r2
 801fe3a:	edd3 7a00 	vldr	s15, [r3]
 801fe3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801fe42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fe46:	d503      	bpl.n	801fe50 <HT_find_hand+0x280>
 801fe48:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 801fe4c:	f8c7 350c 	str.w	r3, [r7, #1292]	@ 0x50c
 801fe50:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 801fe54:	3301      	adds	r3, #1
 801fe56:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
 801fe5a:	f8d7 2514 	ldr.w	r2, [r7, #1300]	@ 0x514
 801fe5e:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
 801fe62:	429a      	cmp	r2, r3
 801fe64:	dbcf      	blt.n	801fe06 <HT_find_hand+0x236>
 801fe66:	f8d7 350c 	ldr.w	r3, [r7, #1292]	@ 0x50c
 801fe6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801fe6e:	d113      	bne.n	801fe98 <HT_find_hand+0x2c8>
 801fe70:	4b04      	ldr	r3, [pc, #16]	@ (801fe84 <HT_find_hand+0x2b4>)
 801fe72:	681b      	ldr	r3, [r3, #0]
 801fe74:	2b02      	cmp	r3, #2
 801fe76:	f340 876f 	ble.w	8020d58 <HT_find_hand+0x1188>
 801fe7a:	4806      	ldr	r0, [pc, #24]	@ (801fe94 <HT_find_hand+0x2c4>)
 801fe7c:	f003 fa2e 	bl	80232dc <puts>
 801fe80:	f000 bf6a 	b.w	8020d58 <HT_find_hand+0x1188>
 801fe84:	200019c8 	.word	0x200019c8
 801fe88:	08043804 	.word	0x08043804
 801fe8c:	08043834 	.word	0x08043834
 801fe90:	00000000 	.word	0x00000000
 801fe94:	0804387c 	.word	0x0804387c
 801fe98:	4bc0      	ldr	r3, [pc, #768]	@ (802019c <HT_find_hand+0x5cc>)
 801fe9a:	681b      	ldr	r3, [r3, #0]
 801fe9c:	2b02      	cmp	r3, #2
 801fe9e:	dd10      	ble.n	801fec2 <HT_find_hand+0x2f2>
 801fea0:	f8d7 350c 	ldr.w	r3, [r7, #1292]	@ 0x50c
 801fea4:	009b      	lsls	r3, r3, #2
 801fea6:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	@ 0x4d0
 801feaa:	4413      	add	r3, r2
 801feac:	681b      	ldr	r3, [r3, #0]
 801feae:	4618      	mov	r0, r3
 801feb0:	f7f9 fe4a 	bl	8019b48 <__aeabi_f2d>
 801feb4:	4602      	mov	r2, r0
 801feb6:	460b      	mov	r3, r1
 801feb8:	f8d7 150c 	ldr.w	r1, [r7, #1292]	@ 0x50c
 801febc:	48b8      	ldr	r0, [pc, #736]	@ (80201a0 <HT_find_hand+0x5d0>)
 801febe:	f003 f9a5 	bl	802320c <iprintf>
 801fec2:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 801fec6:	f5a3 639d 	sub.w	r3, r3, #1256	@ 0x4e8
 801feca:	edd3 7a00 	vldr	s15, [r3]
 801fece:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 801fed2:	f5a3 639d 	sub.w	r3, r3, #1256	@ 0x4e8
 801fed6:	ed93 7a01 	vldr	s14, [r3, #4]
 801feda:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 801fede:	f5a3 639d 	sub.w	r3, r3, #1256	@ 0x4e8
 801fee2:	edd3 6a02 	vldr	s13, [r3, #8]
 801fee6:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 801feea:	f5a3 639e 	sub.w	r3, r3, #1264	@ 0x4f0
 801feee:	681a      	ldr	r2, [r3, #0]
 801fef0:	f507 71c6 	add.w	r1, r7, #396	@ 0x18c
 801fef4:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801fef8:	eeb0 1a66 	vmov.f32	s2, s13
 801fefc:	eef0 0a47 	vmov.f32	s1, s14
 801ff00:	eeb0 0a67 	vmov.f32	s0, s15
 801ff04:	4618      	mov	r0, r3
 801ff06:	f001 ffa5 	bl	8021e54 <SEN_mm_to_col_row>
 801ff0a:	f8c7 04fc 	str.w	r0, [r7, #1276]	@ 0x4fc
 801ff0e:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	@ 0x4fc
 801ff12:	f113 0f03 	cmn.w	r3, #3
 801ff16:	f000 8095 	beq.w	8020044 <HT_find_hand+0x474>
 801ff1a:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	@ 0x4fc
 801ff1e:	2b00      	cmp	r3, #0
 801ff20:	f040 871c 	bne.w	8020d5c <HT_find_hand+0x118c>
 801ff24:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 801ff28:	f5a3 7362 	sub.w	r3, r3, #904	@ 0x388
 801ff2c:	edd3 7a00 	vldr	s15, [r3]
 801ff30:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801ff34:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 801ff38:	f5a3 7363 	sub.w	r3, r3, #908	@ 0x38c
 801ff3c:	edd3 7a00 	vldr	s15, [r3]
 801ff40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ff44:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 801ff48:	f5a3 639e 	sub.w	r3, r3, #1264	@ 0x4f0
 801ff4c:	681b      	ldr	r3, [r3, #0]
 801ff4e:	f207 40bc 	addw	r0, r7, #1212	@ 0x4bc
 801ff52:	ee17 2a90 	vmov	r2, s15
 801ff56:	ee17 1a10 	vmov	r1, s14
 801ff5a:	f001 fe0f 	bl	8021b7c <SEN_col_row_to_idx>
 801ff5e:	f8c7 04fc 	str.w	r0, [r7, #1276]	@ 0x4fc
 801ff62:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	@ 0x4fc
 801ff66:	2b00      	cmp	r3, #0
 801ff68:	f040 86fa 	bne.w	8020d60 <HT_find_hand+0x1190>
 801ff6c:	4b8b      	ldr	r3, [pc, #556]	@ (802019c <HT_find_hand+0x5cc>)
 801ff6e:	681b      	ldr	r3, [r3, #0]
 801ff70:	2b02      	cmp	r3, #2
 801ff72:	dd35      	ble.n	801ffe0 <HT_find_hand+0x410>
 801ff74:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 801ff78:	f5a3 7362 	sub.w	r3, r3, #904	@ 0x388
 801ff7c:	681b      	ldr	r3, [r3, #0]
 801ff7e:	4618      	mov	r0, r3
 801ff80:	f7f9 fde2 	bl	8019b48 <__aeabi_f2d>
 801ff84:	4680      	mov	r8, r0
 801ff86:	4689      	mov	r9, r1
 801ff88:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 801ff8c:	f5a3 7363 	sub.w	r3, r3, #908	@ 0x38c
 801ff90:	681b      	ldr	r3, [r3, #0]
 801ff92:	4618      	mov	r0, r3
 801ff94:	f7f9 fdd8 	bl	8019b48 <__aeabi_f2d>
 801ff98:	4604      	mov	r4, r0
 801ff9a:	460d      	mov	r5, r1
 801ff9c:	f8d7 64bc 	ldr.w	r6, [r7, #1212]	@ 0x4bc
 801ffa0:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 801ffa4:	461a      	mov	r2, r3
 801ffa6:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 801ffaa:	4413      	add	r3, r2
 801ffac:	781b      	ldrb	r3, [r3, #0]
 801ffae:	607b      	str	r3, [r7, #4]
 801ffb0:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 801ffb4:	009a      	lsls	r2, r3, #2
 801ffb6:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	@ 0x4d0
 801ffba:	4413      	add	r3, r2
 801ffbc:	681b      	ldr	r3, [r3, #0]
 801ffbe:	4618      	mov	r0, r3
 801ffc0:	f7f9 fdc2 	bl	8019b48 <__aeabi_f2d>
 801ffc4:	4602      	mov	r2, r0
 801ffc6:	460b      	mov	r3, r1
 801ffc8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801ffcc:	687b      	ldr	r3, [r7, #4]
 801ffce:	9303      	str	r3, [sp, #12]
 801ffd0:	9602      	str	r6, [sp, #8]
 801ffd2:	e9cd 4500 	strd	r4, r5, [sp]
 801ffd6:	4642      	mov	r2, r8
 801ffd8:	464b      	mov	r3, r9
 801ffda:	4872      	ldr	r0, [pc, #456]	@ (80201a4 <HT_find_hand+0x5d4>)
 801ffdc:	f003 f916 	bl	802320c <iprintf>
 801ffe0:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 801ffe4:	461a      	mov	r2, r3
 801ffe6:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 801ffea:	4413      	add	r3, r2
 801ffec:	781b      	ldrb	r3, [r3, #0]
 801ffee:	2b00      	cmp	r3, #0
 801fff0:	d028      	beq.n	8020044 <HT_find_hand+0x474>
 801fff2:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 801fff6:	009b      	lsls	r3, r3, #2
 801fff8:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	@ 0x4d0
 801fffc:	4413      	add	r3, r2
 801fffe:	ed93 7a00 	vldr	s14, [r3]
 8020002:	f8d7 350c 	ldr.w	r3, [r7, #1292]	@ 0x50c
 8020006:	009b      	lsls	r3, r3, #2
 8020008:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	@ 0x4d0
 802000c:	4413      	add	r3, r2
 802000e:	edd3 7a00 	vldr	s15, [r3]
 8020012:	ee37 7a67 	vsub.f32	s14, s14, s15
 8020016:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	@ 0x4dc
 802001a:	691b      	ldr	r3, [r3, #16]
 802001c:	ee07 3a90 	vmov	s15, r3
 8020020:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020024:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8020028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802002c:	d50a      	bpl.n	8020044 <HT_find_hand+0x474>
 802002e:	4b5b      	ldr	r3, [pc, #364]	@ (802019c <HT_find_hand+0x5cc>)
 8020030:	681b      	ldr	r3, [r3, #0]
 8020032:	2b01      	cmp	r3, #1
 8020034:	dd18      	ble.n	8020068 <HT_find_hand+0x498>
 8020036:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 802003a:	4619      	mov	r1, r3
 802003c:	485a      	ldr	r0, [pc, #360]	@ (80201a8 <HT_find_hand+0x5d8>)
 802003e:	f003 f8e5 	bl	802320c <iprintf>
 8020042:	e011      	b.n	8020068 <HT_find_hand+0x498>
 8020044:	2300      	movs	r3, #0
 8020046:	f8c7 34fc 	str.w	r3, [r7, #1276]	@ 0x4fc
 802004a:	f8d7 350c 	ldr.w	r3, [r7, #1292]	@ 0x50c
 802004e:	f8c7 34bc 	str.w	r3, [r7, #1212]	@ 0x4bc
 8020052:	4b52      	ldr	r3, [pc, #328]	@ (802019c <HT_find_hand+0x5cc>)
 8020054:	681b      	ldr	r3, [r3, #0]
 8020056:	2b01      	cmp	r3, #1
 8020058:	dd08      	ble.n	802006c <HT_find_hand+0x49c>
 802005a:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 802005e:	4619      	mov	r1, r3
 8020060:	4852      	ldr	r0, [pc, #328]	@ (80201ac <HT_find_hand+0x5dc>)
 8020062:	f003 f8d3 	bl	802320c <iprintf>
 8020066:	e001      	b.n	802006c <HT_find_hand+0x49c>
 8020068:	bf00      	nop
 802006a:	e000      	b.n	802006e <HT_find_hand+0x49e>
 802006c:	bf00      	nop
 802006e:	2300      	movs	r3, #0
 8020070:	f8c7 3500 	str.w	r3, [r7, #1280]	@ 0x500
 8020074:	f8d7 3500 	ldr.w	r3, [r7, #1280]	@ 0x500
 8020078:	1c5a      	adds	r2, r3, #1
 802007a:	f8c7 2500 	str.w	r2, [r7, #1280]	@ 0x500
 802007e:	f8d7 14bc 	ldr.w	r1, [r7, #1212]	@ 0x4bc
 8020082:	f507 62a3 	add.w	r2, r7, #1304	@ 0x518
 8020086:	f5a2 72c2 	sub.w	r2, r2, #388	@ 0x184
 802008a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 802008e:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 8020092:	f8d7 24e0 	ldr.w	r2, [r7, #1248]	@ 0x4e0
 8020096:	4413      	add	r3, r2
 8020098:	2201      	movs	r2, #1
 802009a:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
 802009e:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 80200a2:	009b      	lsls	r3, r3, #2
 80200a4:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	@ 0x4d0
 80200a8:	4413      	add	r3, r2
 80200aa:	681b      	ldr	r3, [r3, #0]
 80200ac:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 80200b0:	6013      	str	r3, [r2, #0]
 80200b2:	2300      	movs	r3, #0
 80200b4:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
 80200b8:	4b38      	ldr	r3, [pc, #224]	@ (802019c <HT_find_hand+0x5cc>)
 80200ba:	681b      	ldr	r3, [r3, #0]
 80200bc:	2b02      	cmp	r3, #2
 80200be:	dd0b      	ble.n	80200d8 <HT_find_hand+0x508>
 80200c0:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80200c4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80200c8:	f8d7 2514 	ldr.w	r2, [r7, #1300]	@ 0x514
 80200cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80200d0:	4619      	mov	r1, r3
 80200d2:	4837      	ldr	r0, [pc, #220]	@ (80201b0 <HT_find_hand+0x5e0>)
 80200d4:	f003 f89a 	bl	802320c <iprintf>
 80200d8:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80200dc:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80200e0:	f8d7 2514 	ldr.w	r2, [r7, #1300]	@ 0x514
 80200e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80200e8:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80200ec:	f5a3 639e 	sub.w	r3, r3, #1264	@ 0x4f0
 80200f0:	681b      	ldr	r3, [r3, #0]
 80200f2:	f207 4194 	addw	r1, r7, #1172	@ 0x494
 80200f6:	f507 6098 	add.w	r0, r7, #1216	@ 0x4c0
 80200fa:	f001 fc87 	bl	8021a0c <SEN_idx_to_col_row>
 80200fe:	f8c7 04fc 	str.w	r0, [r7, #1276]	@ 0x4fc
 8020102:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	@ 0x4fc
 8020106:	2b00      	cmp	r3, #0
 8020108:	f040 862c 	bne.w	8020d64 <HT_find_hand+0x1194>
 802010c:	2300      	movs	r3, #0
 802010e:	f8c7 3504 	str.w	r3, [r7, #1284]	@ 0x504
 8020112:	f04f 33ff 	mov.w	r3, #4294967295
 8020116:	f8c7 34f8 	str.w	r3, [r7, #1272]	@ 0x4f8
 802011a:	e106      	b.n	802032a <HT_find_hand+0x75a>
 802011c:	f04f 33ff 	mov.w	r3, #4294967295
 8020120:	f8c7 34f4 	str.w	r3, [r7, #1268]	@ 0x4f4
 8020124:	e0f7      	b.n	8020316 <HT_find_hand+0x746>
 8020126:	f8d7 24c0 	ldr.w	r2, [r7, #1216]	@ 0x4c0
 802012a:	f8d7 34f8 	ldr.w	r3, [r7, #1272]	@ 0x4f8
 802012e:	18d1      	adds	r1, r2, r3
 8020130:	f8d7 2494 	ldr.w	r2, [r7, #1172]	@ 0x494
 8020134:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	@ 0x4f4
 8020138:	441a      	add	r2, r3
 802013a:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 802013e:	f5a3 639e 	sub.w	r3, r3, #1264	@ 0x4f0
 8020142:	681b      	ldr	r3, [r3, #0]
 8020144:	f207 40bc 	addw	r0, r7, #1212	@ 0x4bc
 8020148:	f001 fd18 	bl	8021b7c <SEN_col_row_to_idx>
 802014c:	f8c7 04fc 	str.w	r0, [r7, #1276]	@ 0x4fc
 8020150:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	@ 0x4fc
 8020154:	f113 0f03 	cmn.w	r3, #3
 8020158:	f000 80d4 	beq.w	8020304 <HT_find_hand+0x734>
 802015c:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	@ 0x4fc
 8020160:	2b00      	cmp	r3, #0
 8020162:	f040 8601 	bne.w	8020d68 <HT_find_hand+0x1198>
 8020166:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 802016a:	f8d7 24e0 	ldr.w	r2, [r7, #1248]	@ 0x4e0
 802016e:	4413      	add	r3, r2
 8020170:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8020174:	f083 0301 	eor.w	r3, r3, #1
 8020178:	b2db      	uxtb	r3, r3
 802017a:	2b00      	cmp	r3, #0
 802017c:	f000 80c2 	beq.w	8020304 <HT_find_hand+0x734>
 8020180:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 8020184:	461a      	mov	r2, r3
 8020186:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 802018a:	4413      	add	r3, r2
 802018c:	781b      	ldrb	r3, [r3, #0]
 802018e:	2b00      	cmp	r3, #0
 8020190:	f000 80b8 	beq.w	8020304 <HT_find_hand+0x734>
 8020194:	2300      	movs	r3, #0
 8020196:	f8c7 3510 	str.w	r3, [r7, #1296]	@ 0x510
 802019a:	e09d      	b.n	80202d8 <HT_find_hand+0x708>
 802019c:	200019c8 	.word	0x200019c8
 80201a0:	080438b0 	.word	0x080438b0
 80201a4:	080438e8 	.word	0x080438e8
 80201a8:	08043940 	.word	0x08043940
 80201ac:	08043988 	.word	0x08043988
 80201b0:	080439cc 	.word	0x080439cc
 80201b4:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 80201b8:	009b      	lsls	r3, r3, #2
 80201ba:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 80201be:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80201c2:	4413      	add	r3, r2
 80201c4:	f853 3c80 	ldr.w	r3, [r3, #-128]
 80201c8:	009b      	lsls	r3, r3, #2
 80201ca:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	@ 0x4d0
 80201ce:	4413      	add	r3, r2
 80201d0:	681b      	ldr	r3, [r3, #0]
 80201d2:	4618      	mov	r0, r3
 80201d4:	f7f9 fcb8 	bl	8019b48 <__aeabi_f2d>
 80201d8:	4604      	mov	r4, r0
 80201da:	460d      	mov	r5, r1
 80201dc:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80201e0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80201e4:	f8d7 2514 	ldr.w	r2, [r7, #1300]	@ 0x514
 80201e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80201ec:	009b      	lsls	r3, r3, #2
 80201ee:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	@ 0x4d0
 80201f2:	4413      	add	r3, r2
 80201f4:	681b      	ldr	r3, [r3, #0]
 80201f6:	4618      	mov	r0, r3
 80201f8:	f7f9 fca6 	bl	8019b48 <__aeabi_f2d>
 80201fc:	4602      	mov	r2, r0
 80201fe:	460b      	mov	r3, r1
 8020200:	4620      	mov	r0, r4
 8020202:	4629      	mov	r1, r5
 8020204:	f7f9 fb40 	bl	8019888 <__aeabi_dsub>
 8020208:	4602      	mov	r2, r0
 802020a:	460b      	mov	r3, r1
 802020c:	623a      	str	r2, [r7, #32]
 802020e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8020212:	627b      	str	r3, [r7, #36]	@ 0x24
 8020214:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 8020218:	009b      	lsls	r3, r3, #2
 802021a:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	@ 0x4d0
 802021e:	4413      	add	r3, r2
 8020220:	681b      	ldr	r3, [r3, #0]
 8020222:	4618      	mov	r0, r3
 8020224:	f7f9 fc90 	bl	8019b48 <__aeabi_f2d>
 8020228:	4604      	mov	r4, r0
 802022a:	460d      	mov	r5, r1
 802022c:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8020230:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8020234:	f8d7 2514 	ldr.w	r2, [r7, #1300]	@ 0x514
 8020238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802023c:	009b      	lsls	r3, r3, #2
 802023e:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	@ 0x4d0
 8020242:	4413      	add	r3, r2
 8020244:	681b      	ldr	r3, [r3, #0]
 8020246:	4618      	mov	r0, r3
 8020248:	f7f9 fc7e 	bl	8019b48 <__aeabi_f2d>
 802024c:	4602      	mov	r2, r0
 802024e:	460b      	mov	r3, r1
 8020250:	4620      	mov	r0, r4
 8020252:	4629      	mov	r1, r5
 8020254:	f7f9 fb18 	bl	8019888 <__aeabi_dsub>
 8020258:	4602      	mov	r2, r0
 802025a:	460b      	mov	r3, r1
 802025c:	61ba      	str	r2, [r7, #24]
 802025e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8020262:	61fb      	str	r3, [r7, #28]
 8020264:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8020268:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 802026c:	f7f9 ff54 	bl	801a118 <__aeabi_dcmpgt>
 8020270:	4603      	mov	r3, r0
 8020272:	2b00      	cmp	r3, #0
 8020274:	d02b      	beq.n	80202ce <HT_find_hand+0x6fe>
 8020276:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 802027a:	009b      	lsls	r3, r3, #2
 802027c:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 8020280:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8020284:	4413      	add	r3, r2
 8020286:	f853 2c80 	ldr.w	r2, [r3, #-128]
 802028a:	f8d7 3504 	ldr.w	r3, [r7, #1284]	@ 0x504
 802028e:	009b      	lsls	r3, r3, #2
 8020290:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 8020294:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8020298:	440b      	add	r3, r1
 802029a:	f843 2c80 	str.w	r2, [r3, #-128]
 802029e:	f8d7 24bc 	ldr.w	r2, [r7, #1212]	@ 0x4bc
 80202a2:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 80202a6:	009b      	lsls	r3, r3, #2
 80202a8:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 80202ac:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80202b0:	440b      	add	r3, r1
 80202b2:	f843 2c80 	str.w	r2, [r3, #-128]
 80202b6:	f8d7 3504 	ldr.w	r3, [r7, #1284]	@ 0x504
 80202ba:	009b      	lsls	r3, r3, #2
 80202bc:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 80202c0:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80202c4:	4413      	add	r3, r2
 80202c6:	f853 3c80 	ldr.w	r3, [r3, #-128]
 80202ca:	f8c7 34bc 	str.w	r3, [r7, #1212]	@ 0x4bc
 80202ce:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 80202d2:	3301      	adds	r3, #1
 80202d4:	f8c7 3510 	str.w	r3, [r7, #1296]	@ 0x510
 80202d8:	f8d7 2510 	ldr.w	r2, [r7, #1296]	@ 0x510
 80202dc:	f8d7 3504 	ldr.w	r3, [r7, #1284]	@ 0x504
 80202e0:	429a      	cmp	r2, r3
 80202e2:	f6ff af67 	blt.w	80201b4 <HT_find_hand+0x5e4>
 80202e6:	f8d7 3504 	ldr.w	r3, [r7, #1284]	@ 0x504
 80202ea:	1c5a      	adds	r2, r3, #1
 80202ec:	f8c7 2504 	str.w	r2, [r7, #1284]	@ 0x504
 80202f0:	f8d7 24bc 	ldr.w	r2, [r7, #1212]	@ 0x4bc
 80202f4:	009b      	lsls	r3, r3, #2
 80202f6:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 80202fa:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80202fe:	440b      	add	r3, r1
 8020300:	f843 2c80 	str.w	r2, [r3, #-128]
 8020304:	2300      	movs	r3, #0
 8020306:	f8c7 34fc 	str.w	r3, [r7, #1276]	@ 0x4fc
 802030a:	bf00      	nop
 802030c:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	@ 0x4f4
 8020310:	3301      	adds	r3, #1
 8020312:	f8c7 34f4 	str.w	r3, [r7, #1268]	@ 0x4f4
 8020316:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	@ 0x4f4
 802031a:	2b01      	cmp	r3, #1
 802031c:	f77f af03 	ble.w	8020126 <HT_find_hand+0x556>
 8020320:	f8d7 34f8 	ldr.w	r3, [r7, #1272]	@ 0x4f8
 8020324:	3301      	adds	r3, #1
 8020326:	f8c7 34f8 	str.w	r3, [r7, #1272]	@ 0x4f8
 802032a:	f8d7 34f8 	ldr.w	r3, [r7, #1272]	@ 0x4f8
 802032e:	2b01      	cmp	r3, #1
 8020330:	f77f aef4 	ble.w	802011c <HT_find_hand+0x54c>
 8020334:	4bc6      	ldr	r3, [pc, #792]	@ (8020650 <HT_find_hand+0xa80>)
 8020336:	681b      	ldr	r3, [r3, #0]
 8020338:	2b02      	cmp	r3, #2
 802033a:	dd1d      	ble.n	8020378 <HT_find_hand+0x7a8>
 802033c:	f8d7 6498 	ldr.w	r6, [r7, #1176]	@ 0x498
 8020340:	f8d7 349c 	ldr.w	r3, [r7, #1180]	@ 0x49c
 8020344:	607b      	str	r3, [r7, #4]
 8020346:	f8d7 44a0 	ldr.w	r4, [r7, #1184]	@ 0x4a0
 802034a:	f8d7 54a4 	ldr.w	r5, [r7, #1188]	@ 0x4a4
 802034e:	f8d7 04a8 	ldr.w	r0, [r7, #1192]	@ 0x4a8
 8020352:	f8d7 14ac 	ldr.w	r1, [r7, #1196]	@ 0x4ac
 8020356:	f8d7 24b0 	ldr.w	r2, [r7, #1200]	@ 0x4b0
 802035a:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	@ 0x4b4
 802035e:	9305      	str	r3, [sp, #20]
 8020360:	9204      	str	r2, [sp, #16]
 8020362:	9103      	str	r1, [sp, #12]
 8020364:	9002      	str	r0, [sp, #8]
 8020366:	9501      	str	r5, [sp, #4]
 8020368:	9400      	str	r4, [sp, #0]
 802036a:	687b      	ldr	r3, [r7, #4]
 802036c:	4632      	mov	r2, r6
 802036e:	f8d7 1504 	ldr.w	r1, [r7, #1284]	@ 0x504
 8020372:	48b8      	ldr	r0, [pc, #736]	@ (8020654 <HT_find_hand+0xa84>)
 8020374:	f002 ff4a 	bl	802320c <iprintf>
 8020378:	2300      	movs	r3, #0
 802037a:	f8c7 34bc 	str.w	r3, [r7, #1212]	@ 0x4bc
 802037e:	e088      	b.n	8020492 <HT_find_hand+0x8c2>
 8020380:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8020384:	6818      	ldr	r0, [r3, #0]
 8020386:	f7f9 fbdf 	bl	8019b48 <__aeabi_f2d>
 802038a:	4604      	mov	r4, r0
 802038c:	460d      	mov	r5, r1
 802038e:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 8020392:	009b      	lsls	r3, r3, #2
 8020394:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 8020398:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 802039c:	4413      	add	r3, r2
 802039e:	f853 3c80 	ldr.w	r3, [r3, #-128]
 80203a2:	009b      	lsls	r3, r3, #2
 80203a4:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	@ 0x4d0
 80203a8:	4413      	add	r3, r2
 80203aa:	681b      	ldr	r3, [r3, #0]
 80203ac:	4618      	mov	r0, r3
 80203ae:	f7f9 fbcb 	bl	8019b48 <__aeabi_f2d>
 80203b2:	4602      	mov	r2, r0
 80203b4:	460b      	mov	r3, r1
 80203b6:	4620      	mov	r0, r4
 80203b8:	4629      	mov	r1, r5
 80203ba:	f7f9 fa65 	bl	8019888 <__aeabi_dsub>
 80203be:	4602      	mov	r2, r0
 80203c0:	460b      	mov	r3, r1
 80203c2:	613a      	str	r2, [r7, #16]
 80203c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80203c8:	617b      	str	r3, [r7, #20]
 80203ca:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	@ 0x4dc
 80203ce:	691b      	ldr	r3, [r3, #16]
 80203d0:	4618      	mov	r0, r3
 80203d2:	f7f9 fba7 	bl	8019b24 <__aeabi_i2d>
 80203d6:	4602      	mov	r2, r0
 80203d8:	460b      	mov	r3, r1
 80203da:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80203de:	f7f9 fe7d 	bl	801a0dc <__aeabi_dcmplt>
 80203e2:	4603      	mov	r3, r0
 80203e4:	2b00      	cmp	r3, #0
 80203e6:	d04f      	beq.n	8020488 <HT_find_hand+0x8b8>
 80203e8:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 80203ec:	009b      	lsls	r3, r3, #2
 80203ee:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 80203f2:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80203f6:	4413      	add	r3, r2
 80203f8:	f853 3c80 	ldr.w	r3, [r3, #-128]
 80203fc:	f8d7 24e0 	ldr.w	r2, [r7, #1248]	@ 0x4e0
 8020400:	4413      	add	r3, r2
 8020402:	2201      	movs	r2, #1
 8020404:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
 8020408:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 802040c:	f8d7 2500 	ldr.w	r2, [r7, #1280]	@ 0x500
 8020410:	1c51      	adds	r1, r2, #1
 8020412:	f8c7 1500 	str.w	r1, [r7, #1280]	@ 0x500
 8020416:	009b      	lsls	r3, r3, #2
 8020418:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 802041c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8020420:	440b      	add	r3, r1
 8020422:	f853 1c80 	ldr.w	r1, [r3, #-128]
 8020426:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 802042a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 802042e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8020432:	f8d7 3500 	ldr.w	r3, [r7, #1280]	@ 0x500
 8020436:	3b01      	subs	r3, #1
 8020438:	ee07 3a90 	vmov	s15, r3
 802043c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8020440:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8020444:	edd3 7a00 	vldr	s15, [r3]
 8020448:	ee27 7a27 	vmul.f32	s14, s14, s15
 802044c:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 8020450:	009b      	lsls	r3, r3, #2
 8020452:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 8020456:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 802045a:	4413      	add	r3, r2
 802045c:	f853 3c80 	ldr.w	r3, [r3, #-128]
 8020460:	009b      	lsls	r3, r3, #2
 8020462:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	@ 0x4d0
 8020466:	4413      	add	r3, r2
 8020468:	edd3 7a00 	vldr	s15, [r3]
 802046c:	ee77 6a27 	vadd.f32	s13, s14, s15
 8020470:	f8d7 3500 	ldr.w	r3, [r7, #1280]	@ 0x500
 8020474:	ee07 3a90 	vmov	s15, r3
 8020478:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802047c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8020480:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8020484:	edc3 7a00 	vstr	s15, [r3]
 8020488:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 802048c:	3301      	adds	r3, #1
 802048e:	f8c7 34bc 	str.w	r3, [r7, #1212]	@ 0x4bc
 8020492:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 8020496:	f8d7 2504 	ldr.w	r2, [r7, #1284]	@ 0x504
 802049a:	429a      	cmp	r2, r3
 802049c:	f73f af70 	bgt.w	8020380 <HT_find_hand+0x7b0>
 80204a0:	4b6b      	ldr	r3, [pc, #428]	@ (8020650 <HT_find_hand+0xa80>)
 80204a2:	681b      	ldr	r3, [r3, #0]
 80204a4:	2b02      	cmp	r3, #2
 80204a6:	dd0c      	ble.n	80204c2 <HT_find_hand+0x8f2>
 80204a8:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80204ac:	6818      	ldr	r0, [r3, #0]
 80204ae:	f7f9 fb4b 	bl	8019b48 <__aeabi_f2d>
 80204b2:	4602      	mov	r2, r0
 80204b4:	460b      	mov	r3, r1
 80204b6:	f8d7 1500 	ldr.w	r1, [r7, #1280]	@ 0x500
 80204ba:	9100      	str	r1, [sp, #0]
 80204bc:	4866      	ldr	r0, [pc, #408]	@ (8020658 <HT_find_hand+0xa88>)
 80204be:	f002 fea5 	bl	802320c <iprintf>
 80204c2:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 80204c6:	3301      	adds	r3, #1
 80204c8:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
 80204cc:	f8d7 2514 	ldr.w	r2, [r7, #1300]	@ 0x514
 80204d0:	f8d7 3500 	ldr.w	r3, [r7, #1280]	@ 0x500
 80204d4:	429a      	cmp	r2, r3
 80204d6:	f6ff adef 	blt.w	80200b8 <HT_find_hand+0x4e8>
 80204da:	4b5d      	ldr	r3, [pc, #372]	@ (8020650 <HT_find_hand+0xa80>)
 80204dc:	681b      	ldr	r3, [r3, #0]
 80204de:	2b01      	cmp	r3, #1
 80204e0:	dd0c      	ble.n	80204fc <HT_find_hand+0x92c>
 80204e2:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80204e6:	6818      	ldr	r0, [r3, #0]
 80204e8:	f7f9 fb2e 	bl	8019b48 <__aeabi_f2d>
 80204ec:	4602      	mov	r2, r0
 80204ee:	460b      	mov	r3, r1
 80204f0:	f8d7 1500 	ldr.w	r1, [r7, #1280]	@ 0x500
 80204f4:	9100      	str	r1, [sp, #0]
 80204f6:	4859      	ldr	r0, [pc, #356]	@ (802065c <HT_find_hand+0xa8c>)
 80204f8:	f002 fe88 	bl	802320c <iprintf>
 80204fc:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	@ 0x4dc
 8020500:	689b      	ldr	r3, [r3, #8]
 8020502:	ee07 3a90 	vmov	s15, r3
 8020506:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802050a:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 802050e:	ed93 7a00 	vldr	s14, [r3]
 8020512:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8020516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802051a:	dc06      	bgt.n	802052a <HT_find_hand+0x95a>
 802051c:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	@ 0x4dc
 8020520:	68db      	ldr	r3, [r3, #12]
 8020522:	f8d7 2500 	ldr.w	r2, [r7, #1280]	@ 0x500
 8020526:	429a      	cmp	r2, r3
 8020528:	dc09      	bgt.n	802053e <HT_find_hand+0x96e>
 802052a:	4b49      	ldr	r3, [pc, #292]	@ (8020650 <HT_find_hand+0xa80>)
 802052c:	681b      	ldr	r3, [r3, #0]
 802052e:	2b02      	cmp	r3, #2
 8020530:	f340 841c 	ble.w	8020d6c <HT_find_hand+0x119c>
 8020534:	484a      	ldr	r0, [pc, #296]	@ (8020660 <HT_find_hand+0xa90>)
 8020536:	f002 fed1 	bl	80232dc <puts>
 802053a:	f000 bc17 	b.w	8020d6c <HT_find_hand+0x119c>
 802053e:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	@ 0x4dc
 8020542:	695b      	ldr	r3, [r3, #20]
 8020544:	ee07 3a90 	vmov	s15, r3
 8020548:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802054c:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8020550:	ed93 7a00 	vldr	s14, [r3]
 8020554:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8020558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802055c:	d50e      	bpl.n	802057c <HT_find_hand+0x9ac>
 802055e:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
 8020562:	ee07 3a90 	vmov	s15, r3
 8020566:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802056a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802056e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8020572:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 8020576:	edc3 7a00 	vstr	s15, [r3]
 802057a:	e023      	b.n	80205c4 <HT_find_hand+0x9f4>
 802057c:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
 8020580:	ee07 3a90 	vmov	s15, r3
 8020584:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8020588:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 802058c:	edd3 7a00 	vldr	s15, [r3]
 8020590:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8020594:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	@ 0x4dc
 8020598:	695b      	ldr	r3, [r3, #20]
 802059a:	f8d7 24dc 	ldr.w	r2, [r7, #1244]	@ 0x4dc
 802059e:	6952      	ldr	r2, [r2, #20]
 80205a0:	fb02 f303 	mul.w	r3, r2, r3
 80205a4:	ee07 3a90 	vmov	s15, r3
 80205a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80205ac:	ee86 7a27 	vdiv.f32	s14, s12, s15
 80205b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80205b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80205b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80205bc:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 80205c0:	edc3 7a00 	vstr	s15, [r3]
 80205c4:	4b22      	ldr	r3, [pc, #136]	@ (8020650 <HT_find_hand+0xa80>)
 80205c6:	681b      	ldr	r3, [r3, #0]
 80205c8:	2b01      	cmp	r3, #1
 80205ca:	dd14      	ble.n	80205f6 <HT_find_hand+0xa26>
 80205cc:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80205d0:	6818      	ldr	r0, [r3, #0]
 80205d2:	f7f9 fab9 	bl	8019b48 <__aeabi_f2d>
 80205d6:	4604      	mov	r4, r0
 80205d8:	460d      	mov	r5, r1
 80205da:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 80205de:	6818      	ldr	r0, [r3, #0]
 80205e0:	f7f9 fab2 	bl	8019b48 <__aeabi_f2d>
 80205e4:	4602      	mov	r2, r0
 80205e6:	460b      	mov	r3, r1
 80205e8:	e9cd 2300 	strd	r2, r3, [sp]
 80205ec:	4622      	mov	r2, r4
 80205ee:	462b      	mov	r3, r5
 80205f0:	481c      	ldr	r0, [pc, #112]	@ (8020664 <HT_find_hand+0xa94>)
 80205f2:	f002 fe0b 	bl	802320c <iprintf>
 80205f6:	f8d7 3500 	ldr.w	r3, [r7, #1280]	@ 0x500
 80205fa:	ee07 3a90 	vmov	s15, r3
 80205fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020602:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 8020606:	ed93 7a00 	vldr	s14, [r3]
 802060a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802060e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020612:	d508      	bpl.n	8020626 <HT_find_hand+0xa56>
 8020614:	4b0e      	ldr	r3, [pc, #56]	@ (8020650 <HT_find_hand+0xa80>)
 8020616:	681b      	ldr	r3, [r3, #0]
 8020618:	2b02      	cmp	r3, #2
 802061a:	f340 83a9 	ble.w	8020d70 <HT_find_hand+0x11a0>
 802061e:	4812      	ldr	r0, [pc, #72]	@ (8020668 <HT_find_hand+0xa98>)
 8020620:	f002 fe5c 	bl	80232dc <puts>
 8020624:	e3a4      	b.n	8020d70 <HT_find_hand+0x11a0>
 8020626:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 802062a:	2201      	movs	r2, #1
 802062c:	f883 214c 	strb.w	r2, [r3, #332]	@ 0x14c
 8020630:	4b07      	ldr	r3, [pc, #28]	@ (8020650 <HT_find_hand+0xa80>)
 8020632:	681b      	ldr	r3, [r3, #0]
 8020634:	2b02      	cmp	r3, #2
 8020636:	dd02      	ble.n	802063e <HT_find_hand+0xa6e>
 8020638:	480c      	ldr	r0, [pc, #48]	@ (802066c <HT_find_hand+0xa9c>)
 802063a:	f002 fe4f 	bl	80232dc <puts>
 802063e:	f04f 33ff 	mov.w	r3, #4294967295
 8020642:	f8c7 3508 	str.w	r3, [r7, #1288]	@ 0x508
 8020646:	2300      	movs	r3, #0
 8020648:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
 802064c:	e066      	b.n	802071c <HT_find_hand+0xb4c>
 802064e:	bf00      	nop
 8020650:	200019c8 	.word	0x200019c8
 8020654:	080439f8 	.word	0x080439f8
 8020658:	08043a48 	.word	0x08043a48
 802065c:	08043a88 	.word	0x08043a88
 8020660:	08043acc 	.word	0x08043acc
 8020664:	08043b10 	.word	0x08043b10
 8020668:	08043b60 	.word	0x08043b60
 802066c:	08043b8c 	.word	0x08043b8c
 8020670:	f8d7 24e0 	ldr.w	r2, [r7, #1248]	@ 0x4e0
 8020674:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8020678:	4413      	add	r3, r2
 802067a:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 802067e:	781b      	ldrb	r3, [r3, #0]
 8020680:	2b00      	cmp	r3, #0
 8020682:	d046      	beq.n	8020712 <HT_find_hand+0xb42>
 8020684:	f507 7225 	add.w	r2, r7, #660	@ 0x294
 8020688:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 802068c:	009b      	lsls	r3, r3, #2
 802068e:	18d0      	adds	r0, r2, r3
 8020690:	f507 72ca 	add.w	r2, r7, #404	@ 0x194
 8020694:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8020698:	009b      	lsls	r3, r3, #2
 802069a:	18d1      	adds	r1, r2, r3
 802069c:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 80206a0:	009b      	lsls	r3, r3, #2
 80206a2:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	@ 0x4d0
 80206a6:	4413      	add	r3, r2
 80206a8:	edd3 7a00 	vldr	s15, [r3]
 80206ac:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80206b0:	f5a3 639e 	sub.w	r3, r3, #1264	@ 0x4f0
 80206b4:	681b      	ldr	r3, [r3, #0]
 80206b6:	eeb0 0a67 	vmov.f32	s0, s15
 80206ba:	f8d7 2514 	ldr.w	r2, [r7, #1300]	@ 0x514
 80206be:	f001 fb03 	bl	8021cc8 <SEN_idx_to_mm>
 80206c2:	f8c7 04fc 	str.w	r0, [r7, #1276]	@ 0x4fc
 80206c6:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	@ 0x4fc
 80206ca:	2b00      	cmp	r3, #0
 80206cc:	f040 8352 	bne.w	8020d74 <HT_find_hand+0x11a4>
 80206d0:	f8d7 3508 	ldr.w	r3, [r7, #1288]	@ 0x508
 80206d4:	2b00      	cmp	r3, #0
 80206d6:	db18      	blt.n	802070a <HT_find_hand+0xb3a>
 80206d8:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80206dc:	f5a3 7261 	sub.w	r2, r3, #900	@ 0x384
 80206e0:	f8d7 3508 	ldr.w	r3, [r7, #1288]	@ 0x508
 80206e4:	009b      	lsls	r3, r3, #2
 80206e6:	4413      	add	r3, r2
 80206e8:	ed93 7a00 	vldr	s14, [r3]
 80206ec:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80206f0:	f5a3 7261 	sub.w	r2, r3, #900	@ 0x384
 80206f4:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 80206f8:	009b      	lsls	r3, r3, #2
 80206fa:	4413      	add	r3, r2
 80206fc:	edd3 7a00 	vldr	s15, [r3]
 8020700:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8020704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020708:	d503      	bpl.n	8020712 <HT_find_hand+0xb42>
 802070a:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 802070e:	f8c7 3508 	str.w	r3, [r7, #1288]	@ 0x508
 8020712:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8020716:	3301      	adds	r3, #1
 8020718:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
 802071c:	f8d7 2514 	ldr.w	r2, [r7, #1300]	@ 0x514
 8020720:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
 8020724:	429a      	cmp	r2, r3
 8020726:	dba3      	blt.n	8020670 <HT_find_hand+0xaa0>
 8020728:	f8d7 3508 	ldr.w	r3, [r7, #1288]	@ 0x508
 802072c:	2b00      	cmp	r3, #0
 802072e:	da08      	bge.n	8020742 <HT_find_hand+0xb72>
 8020730:	4bd3      	ldr	r3, [pc, #844]	@ (8020a80 <HT_find_hand+0xeb0>)
 8020732:	681b      	ldr	r3, [r3, #0]
 8020734:	2b00      	cmp	r3, #0
 8020736:	f340 831f 	ble.w	8020d78 <HT_find_hand+0x11a8>
 802073a:	48d2      	ldr	r0, [pc, #840]	@ (8020a84 <HT_find_hand+0xeb4>)
 802073c:	f002 fdce 	bl	80232dc <puts>
 8020740:	e31a      	b.n	8020d78 <HT_find_hand+0x11a8>
 8020742:	4bcf      	ldr	r3, [pc, #828]	@ (8020a80 <HT_find_hand+0xeb0>)
 8020744:	681b      	ldr	r3, [r3, #0]
 8020746:	2b02      	cmp	r3, #2
 8020748:	dd12      	ble.n	8020770 <HT_find_hand+0xba0>
 802074a:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 802074e:	f5a3 7261 	sub.w	r2, r3, #900	@ 0x384
 8020752:	f8d7 3508 	ldr.w	r3, [r7, #1288]	@ 0x508
 8020756:	009b      	lsls	r3, r3, #2
 8020758:	4413      	add	r3, r2
 802075a:	681b      	ldr	r3, [r3, #0]
 802075c:	4618      	mov	r0, r3
 802075e:	f7f9 f9f3 	bl	8019b48 <__aeabi_f2d>
 8020762:	4602      	mov	r2, r0
 8020764:	460b      	mov	r3, r1
 8020766:	f8d7 1508 	ldr.w	r1, [r7, #1288]	@ 0x508
 802076a:	48c7      	ldr	r0, [pc, #796]	@ (8020a88 <HT_find_hand+0xeb8>)
 802076c:	f002 fd4e 	bl	802320c <iprintf>
 8020770:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8020774:	f5a3 639e 	sub.w	r3, r3, #1264	@ 0x4f0
 8020778:	681a      	ldr	r2, [r3, #0]
 802077a:	f507 71c4 	add.w	r1, r7, #392	@ 0x188
 802077e:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 8020782:	f507 609e 	add.w	r0, r7, #1264	@ 0x4f0
 8020786:	ed90 0a00 	vldr	s0, [r0]
 802078a:	4618      	mov	r0, r3
 802078c:	f001 fc60 	bl	8022050 <SEN_zone_size>
 8020790:	f8c7 04fc 	str.w	r0, [r7, #1276]	@ 0x4fc
 8020794:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	@ 0x4fc
 8020798:	2b00      	cmp	r3, #0
 802079a:	f040 82ef 	bne.w	8020d7c <HT_find_hand+0x11ac>
 802079e:	4bb8      	ldr	r3, [pc, #736]	@ (8020a80 <HT_find_hand+0xeb0>)
 80207a0:	681b      	ldr	r3, [r3, #0]
 80207a2:	2b02      	cmp	r3, #2
 80207a4:	dd23      	ble.n	80207ee <HT_find_hand+0xc1e>
 80207a6:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80207aa:	6818      	ldr	r0, [r3, #0]
 80207ac:	f7f9 f9cc 	bl	8019b48 <__aeabi_f2d>
 80207b0:	4680      	mov	r8, r0
 80207b2:	4689      	mov	r9, r1
 80207b4:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80207b8:	f5a3 7365 	sub.w	r3, r3, #916	@ 0x394
 80207bc:	681b      	ldr	r3, [r3, #0]
 80207be:	4618      	mov	r0, r3
 80207c0:	f7f9 f9c2 	bl	8019b48 <__aeabi_f2d>
 80207c4:	4604      	mov	r4, r0
 80207c6:	460d      	mov	r5, r1
 80207c8:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80207cc:	f5a3 7364 	sub.w	r3, r3, #912	@ 0x390
 80207d0:	681b      	ldr	r3, [r3, #0]
 80207d2:	4618      	mov	r0, r3
 80207d4:	f7f9 f9b8 	bl	8019b48 <__aeabi_f2d>
 80207d8:	4602      	mov	r2, r0
 80207da:	460b      	mov	r3, r1
 80207dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80207e0:	e9cd 4500 	strd	r4, r5, [sp]
 80207e4:	4642      	mov	r2, r8
 80207e6:	464b      	mov	r3, r9
 80207e8:	48a8      	ldr	r0, [pc, #672]	@ (8020a8c <HT_find_hand+0xebc>)
 80207ea:	f002 fd0f 	bl	802320c <iprintf>
 80207ee:	f04f 0300 	mov.w	r3, #0
 80207f2:	f507 629d 	add.w	r2, r7, #1256	@ 0x4e8
 80207f6:	6013      	str	r3, [r2, #0]
 80207f8:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80207fc:	edd3 7a00 	vldr	s15, [r3]
 8020800:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8020804:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	@ 0x4dc
 8020808:	695b      	ldr	r3, [r3, #20]
 802080a:	f8d7 24dc 	ldr.w	r2, [r7, #1244]	@ 0x4dc
 802080e:	6952      	ldr	r2, [r2, #20]
 8020810:	fb02 f303 	mul.w	r3, r2, r3
 8020814:	ee07 3a90 	vmov	s15, r3
 8020818:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802081c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8020820:	ee16 0a90 	vmov	r0, s13
 8020824:	f7f9 f990 	bl	8019b48 <__aeabi_f2d>
 8020828:	4602      	mov	r2, r0
 802082a:	460b      	mov	r3, r1
 802082c:	ec43 2b11 	vmov	d1, r2, r3
 8020830:	ed9f 0b91 	vldr	d0, [pc, #580]	@ 8020a78 <HT_find_hand+0xea8>
 8020834:	f006 f8fc 	bl	8026a30 <pow>
 8020838:	ec53 2b10 	vmov	r2, r3, d0
 802083c:	f04f 0000 	mov.w	r0, #0
 8020840:	4993      	ldr	r1, [pc, #588]	@ (8020a90 <HT_find_hand+0xec0>)
 8020842:	f7f9 f821 	bl	8019888 <__aeabi_dsub>
 8020846:	4602      	mov	r2, r0
 8020848:	460b      	mov	r3, r1
 802084a:	4610      	mov	r0, r2
 802084c:	4619      	mov	r1, r3
 802084e:	4602      	mov	r2, r0
 8020850:	460b      	mov	r3, r1
 8020852:	f7f9 f81b 	bl	801988c <__adddf3>
 8020856:	4602      	mov	r2, r0
 8020858:	460b      	mov	r3, r1
 802085a:	4610      	mov	r0, r2
 802085c:	4619      	mov	r1, r3
 802085e:	f7f9 fcc3 	bl	801a1e8 <__aeabi_d2f>
 8020862:	4603      	mov	r3, r0
 8020864:	f207 42c4 	addw	r2, r7, #1220	@ 0x4c4
 8020868:	6013      	str	r3, [r2, #0]
 802086a:	4b85      	ldr	r3, [pc, #532]	@ (8020a80 <HT_find_hand+0xeb0>)
 802086c:	681b      	ldr	r3, [r3, #0]
 802086e:	2b02      	cmp	r3, #2
 8020870:	dd09      	ble.n	8020886 <HT_find_hand+0xcb6>
 8020872:	f207 43c4 	addw	r3, r7, #1220	@ 0x4c4
 8020876:	6818      	ldr	r0, [r3, #0]
 8020878:	f7f9 f966 	bl	8019b48 <__aeabi_f2d>
 802087c:	4602      	mov	r2, r0
 802087e:	460b      	mov	r3, r1
 8020880:	4884      	ldr	r0, [pc, #528]	@ (8020a94 <HT_find_hand+0xec4>)
 8020882:	f002 fcc3 	bl	802320c <iprintf>
 8020886:	2300      	movs	r3, #0
 8020888:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
 802088c:	e0b8      	b.n	8020a00 <HT_find_hand+0xe30>
 802088e:	f8d7 24e0 	ldr.w	r2, [r7, #1248]	@ 0x4e0
 8020892:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8020896:	4413      	add	r3, r2
 8020898:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 802089c:	781b      	ldrb	r3, [r3, #0]
 802089e:	2b00      	cmp	r3, #0
 80208a0:	f000 80a9 	beq.w	80209f6 <HT_find_hand+0xe26>
 80208a4:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 80208a8:	009b      	lsls	r3, r3, #2
 80208aa:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	@ 0x4cc
 80208ae:	4413      	add	r3, r2
 80208b0:	681b      	ldr	r3, [r3, #0]
 80208b2:	f207 42e4 	addw	r2, r7, #1252	@ 0x4e4
 80208b6:	6013      	str	r3, [r2, #0]
 80208b8:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	@ 0x4dc
 80208bc:	7e1b      	ldrb	r3, [r3, #24]
 80208be:	2b00      	cmp	r3, #0
 80208c0:	d03f      	beq.n	8020942 <HT_find_hand+0xd72>
 80208c2:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80208c6:	f5a3 7261 	sub.w	r2, r3, #900	@ 0x384
 80208ca:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 80208ce:	009b      	lsls	r3, r3, #2
 80208d0:	4413      	add	r3, r2
 80208d2:	ed93 7a00 	vldr	s14, [r3]
 80208d6:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80208da:	f5a3 7261 	sub.w	r2, r3, #900	@ 0x384
 80208de:	f8d7 3508 	ldr.w	r3, [r7, #1288]	@ 0x508
 80208e2:	009b      	lsls	r3, r3, #2
 80208e4:	4413      	add	r3, r2
 80208e6:	edd3 7a00 	vldr	s15, [r3]
 80208ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80208ee:	f207 43c4 	addw	r3, r7, #1220	@ 0x4c4
 80208f2:	edd3 7a00 	vldr	s15, [r3]
 80208f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80208fa:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80208fe:	f5a3 7364 	sub.w	r3, r3, #912	@ 0x390
 8020902:	edd3 7a00 	vldr	s15, [r3]
 8020906:	eec7 6a27 	vdiv.f32	s13, s14, s15
 802090a:	ee16 0a90 	vmov	r0, s13
 802090e:	f7f9 f91b 	bl	8019b48 <__aeabi_f2d>
 8020912:	4602      	mov	r2, r0
 8020914:	460b      	mov	r3, r1
 8020916:	ec43 2b10 	vmov	d0, r2, r3
 802091a:	f006 f841 	bl	80269a0 <exp>
 802091e:	ec53 2b10 	vmov	r2, r3, d0
 8020922:	4610      	mov	r0, r2
 8020924:	4619      	mov	r1, r3
 8020926:	f7f9 fc5f 	bl	801a1e8 <__aeabi_d2f>
 802092a:	ee07 0a10 	vmov	s14, r0
 802092e:	f207 43e4 	addw	r3, r7, #1252	@ 0x4e4
 8020932:	edd3 7a00 	vldr	s15, [r3]
 8020936:	ee67 7a87 	vmul.f32	s15, s15, s14
 802093a:	f207 43e4 	addw	r3, r7, #1252	@ 0x4e4
 802093e:	edc3 7a00 	vstr	s15, [r3]
 8020942:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8020946:	ed93 7a00 	vldr	s14, [r3]
 802094a:	f207 43e4 	addw	r3, r7, #1252	@ 0x4e4
 802094e:	edd3 7a00 	vldr	s15, [r3]
 8020952:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020956:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 802095a:	edc3 7a00 	vstr	s15, [r3]
 802095e:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 8020962:	ed93 7a00 	vldr	s14, [r3]
 8020966:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 802096a:	f5a3 7221 	sub.w	r2, r3, #644	@ 0x284
 802096e:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8020972:	009b      	lsls	r3, r3, #2
 8020974:	4413      	add	r3, r2
 8020976:	edd3 6a00 	vldr	s13, [r3]
 802097a:	f207 43e4 	addw	r3, r7, #1252	@ 0x4e4
 802097e:	edd3 7a00 	vldr	s15, [r3]
 8020982:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8020986:	ee77 7a27 	vadd.f32	s15, s14, s15
 802098a:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 802098e:	edc3 7a00 	vstr	s15, [r3]
 8020992:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 8020996:	ed93 7a01 	vldr	s14, [r3, #4]
 802099a:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 802099e:	f5a3 7261 	sub.w	r2, r3, #900	@ 0x384
 80209a2:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 80209a6:	009b      	lsls	r3, r3, #2
 80209a8:	4413      	add	r3, r2
 80209aa:	edd3 6a00 	vldr	s13, [r3]
 80209ae:	f207 43e4 	addw	r3, r7, #1252	@ 0x4e4
 80209b2:	edd3 7a00 	vldr	s15, [r3]
 80209b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80209ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80209be:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 80209c2:	edc3 7a01 	vstr	s15, [r3, #4]
 80209c6:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 80209ca:	ed93 7a02 	vldr	s14, [r3, #8]
 80209ce:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 80209d2:	009b      	lsls	r3, r3, #2
 80209d4:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	@ 0x4d0
 80209d8:	4413      	add	r3, r2
 80209da:	edd3 6a00 	vldr	s13, [r3]
 80209de:	f207 43e4 	addw	r3, r7, #1252	@ 0x4e4
 80209e2:	edd3 7a00 	vldr	s15, [r3]
 80209e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80209ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80209ee:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 80209f2:	edc3 7a02 	vstr	s15, [r3, #8]
 80209f6:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 80209fa:	3301      	adds	r3, #1
 80209fc:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
 8020a00:	f8d7 2514 	ldr.w	r2, [r7, #1300]	@ 0x514
 8020a04:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
 8020a08:	429a      	cmp	r2, r3
 8020a0a:	f6ff af40 	blt.w	802088e <HT_find_hand+0xcbe>
 8020a0e:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8020a12:	edd3 7a00 	vldr	s15, [r3]
 8020a16:	eef5 7a40 	vcmp.f32	s15, #0.0
 8020a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020a1e:	d03b      	beq.n	8020a98 <HT_find_hand+0xec8>
 8020a20:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 8020a24:	edd3 6a00 	vldr	s13, [r3]
 8020a28:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8020a2c:	ed93 7a00 	vldr	s14, [r3]
 8020a30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8020a34:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 8020a38:	edc3 7a00 	vstr	s15, [r3]
 8020a3c:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 8020a40:	edd3 6a01 	vldr	s13, [r3, #4]
 8020a44:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8020a48:	ed93 7a00 	vldr	s14, [r3]
 8020a4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8020a50:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 8020a54:	edc3 7a01 	vstr	s15, [r3, #4]
 8020a58:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 8020a5c:	edd3 6a02 	vldr	s13, [r3, #8]
 8020a60:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8020a64:	ed93 7a00 	vldr	s14, [r3]
 8020a68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8020a6c:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 8020a70:	edc3 7a02 	vstr	s15, [r3, #8]
 8020a74:	e017      	b.n	8020aa6 <HT_find_hand+0xed6>
 8020a76:	bf00      	nop
 8020a78:	00000000 	.word	0x00000000
 8020a7c:	3fe00000 	.word	0x3fe00000
 8020a80:	200019c8 	.word	0x200019c8
 8020a84:	08043bc4 	.word	0x08043bc4
 8020a88:	08043bf4 	.word	0x08043bf4
 8020a8c:	08043c30 	.word	0x08043c30
 8020a90:	3ff00000 	.word	0x3ff00000
 8020a94:	08043c74 	.word	0x08043c74
 8020a98:	4bc4      	ldr	r3, [pc, #784]	@ (8020dac <HT_find_hand+0x11dc>)
 8020a9a:	681b      	ldr	r3, [r3, #0]
 8020a9c:	2b00      	cmp	r3, #0
 8020a9e:	dd02      	ble.n	8020aa6 <HT_find_hand+0xed6>
 8020aa0:	48c3      	ldr	r0, [pc, #780]	@ (8020db0 <HT_find_hand+0x11e0>)
 8020aa2:	f002 fc1b 	bl	80232dc <puts>
 8020aa6:	4bc1      	ldr	r3, [pc, #772]	@ (8020dac <HT_find_hand+0x11dc>)
 8020aa8:	681b      	ldr	r3, [r3, #0]
 8020aaa:	2b01      	cmp	r3, #1
 8020aac:	dd20      	ble.n	8020af0 <HT_find_hand+0xf20>
 8020aae:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 8020ab2:	681b      	ldr	r3, [r3, #0]
 8020ab4:	4618      	mov	r0, r3
 8020ab6:	f7f9 f847 	bl	8019b48 <__aeabi_f2d>
 8020aba:	4680      	mov	r8, r0
 8020abc:	4689      	mov	r9, r1
 8020abe:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 8020ac2:	685b      	ldr	r3, [r3, #4]
 8020ac4:	4618      	mov	r0, r3
 8020ac6:	f7f9 f83f 	bl	8019b48 <__aeabi_f2d>
 8020aca:	4604      	mov	r4, r0
 8020acc:	460d      	mov	r5, r1
 8020ace:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 8020ad2:	689b      	ldr	r3, [r3, #8]
 8020ad4:	4618      	mov	r0, r3
 8020ad6:	f7f9 f837 	bl	8019b48 <__aeabi_f2d>
 8020ada:	4602      	mov	r2, r0
 8020adc:	460b      	mov	r3, r1
 8020ade:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8020ae2:	e9cd 4500 	strd	r4, r5, [sp]
 8020ae6:	4642      	mov	r2, r8
 8020ae8:	464b      	mov	r3, r9
 8020aea:	48b2      	ldr	r0, [pc, #712]	@ (8020db4 <HT_find_hand+0x11e4>)
 8020aec:	f002 fb8e 	bl	802320c <iprintf>
 8020af0:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8020af4:	f5a3 639d 	sub.w	r3, r3, #1256	@ 0x4e8
 8020af8:	edd3 7a00 	vldr	s15, [r3]
 8020afc:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8020b00:	f5a3 639d 	sub.w	r3, r3, #1256	@ 0x4e8
 8020b04:	ed93 7a01 	vldr	s14, [r3, #4]
 8020b08:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8020b0c:	f5a3 639d 	sub.w	r3, r3, #1256	@ 0x4e8
 8020b10:	edd3 6a02 	vldr	s13, [r3, #8]
 8020b14:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8020b18:	f5a3 639e 	sub.w	r3, r3, #1264	@ 0x4f0
 8020b1c:	681a      	ldr	r2, [r3, #0]
 8020b1e:	f207 43bc 	addw	r3, r7, #1212	@ 0x4bc
 8020b22:	4611      	mov	r1, r2
 8020b24:	eeb0 1a66 	vmov.f32	s2, s13
 8020b28:	eef0 0a47 	vmov.f32	s1, s14
 8020b2c:	eeb0 0a67 	vmov.f32	s0, s15
 8020b30:	4618      	mov	r0, r3
 8020b32:	f001 fa47 	bl	8021fc4 <SEN_mm_to_idx>
 8020b36:	f8c7 04fc 	str.w	r0, [r7, #1276]	@ 0x4fc
 8020b3a:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	@ 0x4fc
 8020b3e:	f113 0f03 	cmn.w	r3, #3
 8020b42:	f000 80ec 	beq.w	8020d1e <HT_find_hand+0x114e>
 8020b46:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	@ 0x4fc
 8020b4a:	2b00      	cmp	r3, #0
 8020b4c:	f040 8118 	bne.w	8020d80 <HT_find_hand+0x11b0>
 8020b50:	4b96      	ldr	r3, [pc, #600]	@ (8020dac <HT_find_hand+0x11dc>)
 8020b52:	681b      	ldr	r3, [r3, #0]
 8020b54:	2b02      	cmp	r3, #2
 8020b56:	dd05      	ble.n	8020b64 <HT_find_hand+0xf94>
 8020b58:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 8020b5c:	4619      	mov	r1, r3
 8020b5e:	4896      	ldr	r0, [pc, #600]	@ (8020db8 <HT_find_hand+0x11e8>)
 8020b60:	f002 fb54 	bl	802320c <iprintf>
 8020b64:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 8020b68:	f8d7 24e0 	ldr.w	r2, [r7, #1248]	@ 0x4e0
 8020b6c:	4413      	add	r3, r2
 8020b6e:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8020b72:	f083 0301 	eor.w	r3, r3, #1
 8020b76:	b2db      	uxtb	r3, r3
 8020b78:	2b00      	cmp	r3, #0
 8020b7a:	f000 80cc 	beq.w	8020d16 <HT_find_hand+0x1146>
 8020b7e:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 8020b82:	461a      	mov	r2, r3
 8020b84:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8020b88:	4413      	add	r3, r2
 8020b8a:	781b      	ldrb	r3, [r3, #0]
 8020b8c:	2b00      	cmp	r3, #0
 8020b8e:	d03c      	beq.n	8020c0a <HT_find_hand+0x103a>
 8020b90:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 8020b94:	009b      	lsls	r3, r3, #2
 8020b96:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	@ 0x4d0
 8020b9a:	4413      	add	r3, r2
 8020b9c:	681b      	ldr	r3, [r3, #0]
 8020b9e:	4618      	mov	r0, r3
 8020ba0:	f7f8 ffd2 	bl	8019b48 <__aeabi_f2d>
 8020ba4:	4604      	mov	r4, r0
 8020ba6:	460d      	mov	r5, r1
 8020ba8:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8020bac:	f5a3 639d 	sub.w	r3, r3, #1256	@ 0x4e8
 8020bb0:	689b      	ldr	r3, [r3, #8]
 8020bb2:	4618      	mov	r0, r3
 8020bb4:	f7f8 ffc8 	bl	8019b48 <__aeabi_f2d>
 8020bb8:	4602      	mov	r2, r0
 8020bba:	460b      	mov	r3, r1
 8020bbc:	4620      	mov	r0, r4
 8020bbe:	4629      	mov	r1, r5
 8020bc0:	f7f8 fe62 	bl	8019888 <__aeabi_dsub>
 8020bc4:	4602      	mov	r2, r0
 8020bc6:	460b      	mov	r3, r1
 8020bc8:	60ba      	str	r2, [r7, #8]
 8020bca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8020bce:	60fb      	str	r3, [r7, #12]
 8020bd0:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	@ 0x4dc
 8020bd4:	691b      	ldr	r3, [r3, #16]
 8020bd6:	4618      	mov	r0, r3
 8020bd8:	f7f8 ffa4 	bl	8019b24 <__aeabi_i2d>
 8020bdc:	4602      	mov	r2, r0
 8020bde:	460b      	mov	r3, r1
 8020be0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8020be4:	f7f9 fa7a 	bl	801a0dc <__aeabi_dcmplt>
 8020be8:	4603      	mov	r3, r0
 8020bea:	2b00      	cmp	r3, #0
 8020bec:	d00d      	beq.n	8020c0a <HT_find_hand+0x103a>
 8020bee:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 8020bf2:	2201      	movs	r2, #1
 8020bf4:	f883 214d 	strb.w	r2, [r3, #333]	@ 0x14d
 8020bf8:	4b6c      	ldr	r3, [pc, #432]	@ (8020dac <HT_find_hand+0x11dc>)
 8020bfa:	681b      	ldr	r3, [r3, #0]
 8020bfc:	2b01      	cmp	r3, #1
 8020bfe:	f340 808d 	ble.w	8020d1c <HT_find_hand+0x114c>
 8020c02:	486e      	ldr	r0, [pc, #440]	@ (8020dbc <HT_find_hand+0x11ec>)
 8020c04:	f002 fb6a 	bl	80232dc <puts>
 8020c08:	e088      	b.n	8020d1c <HT_find_hand+0x114c>
 8020c0a:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 8020c0e:	edd3 7a00 	vldr	s15, [r3]
 8020c12:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 8020c16:	ed93 7a01 	vldr	s14, [r3, #4]
 8020c1a:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 8020c1e:	edd3 6a02 	vldr	s13, [r3, #8]
 8020c22:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8020c26:	f5a3 639e 	sub.w	r3, r3, #1264	@ 0x4f0
 8020c2a:	681a      	ldr	r2, [r3, #0]
 8020c2c:	f207 43bc 	addw	r3, r7, #1212	@ 0x4bc
 8020c30:	4611      	mov	r1, r2
 8020c32:	eeb0 1a66 	vmov.f32	s2, s13
 8020c36:	eef0 0a47 	vmov.f32	s1, s14
 8020c3a:	eeb0 0a67 	vmov.f32	s0, s15
 8020c3e:	4618      	mov	r0, r3
 8020c40:	f001 f9c0 	bl	8021fc4 <SEN_mm_to_idx>
 8020c44:	f8c7 04fc 	str.w	r0, [r7, #1276]	@ 0x4fc
 8020c48:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	@ 0x4fc
 8020c4c:	f113 0f03 	cmn.w	r3, #3
 8020c50:	d05d      	beq.n	8020d0e <HT_find_hand+0x113e>
 8020c52:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	@ 0x4fc
 8020c56:	2b00      	cmp	r3, #0
 8020c58:	f040 8094 	bne.w	8020d84 <HT_find_hand+0x11b4>
 8020c5c:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 8020c60:	461a      	mov	r2, r3
 8020c62:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8020c66:	4413      	add	r3, r2
 8020c68:	781b      	ldrb	r3, [r3, #0]
 8020c6a:	2b00      	cmp	r3, #0
 8020c6c:	d055      	beq.n	8020d1a <HT_find_hand+0x114a>
 8020c6e:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 8020c72:	f507 62a3 	add.w	r2, r7, #1304	@ 0x518
 8020c76:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 8020c7a:	4413      	add	r3, r2
 8020c7c:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8020c80:	f083 0301 	eor.w	r3, r3, #1
 8020c84:	b2db      	uxtb	r3, r3
 8020c86:	2b00      	cmp	r3, #0
 8020c88:	d047      	beq.n	8020d1a <HT_find_hand+0x114a>
 8020c8a:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 8020c8e:	009b      	lsls	r3, r3, #2
 8020c90:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	@ 0x4d0
 8020c94:	4413      	add	r3, r2
 8020c96:	681b      	ldr	r3, [r3, #0]
 8020c98:	4618      	mov	r0, r3
 8020c9a:	f7f8 ff55 	bl	8019b48 <__aeabi_f2d>
 8020c9e:	4604      	mov	r4, r0
 8020ca0:	460d      	mov	r5, r1
 8020ca2:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 8020ca6:	f507 62a3 	add.w	r2, r7, #1304	@ 0x518
 8020caa:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 8020cae:	3302      	adds	r3, #2
 8020cb0:	009b      	lsls	r3, r3, #2
 8020cb2:	4413      	add	r3, r2
 8020cb4:	3304      	adds	r3, #4
 8020cb6:	681b      	ldr	r3, [r3, #0]
 8020cb8:	4618      	mov	r0, r3
 8020cba:	f7f8 ff45 	bl	8019b48 <__aeabi_f2d>
 8020cbe:	4602      	mov	r2, r0
 8020cc0:	460b      	mov	r3, r1
 8020cc2:	4620      	mov	r0, r4
 8020cc4:	4629      	mov	r1, r5
 8020cc6:	f7f8 fddf 	bl	8019888 <__aeabi_dsub>
 8020cca:	4602      	mov	r2, r0
 8020ccc:	460b      	mov	r3, r1
 8020cce:	4692      	mov	sl, r2
 8020cd0:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 8020cd4:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	@ 0x4dc
 8020cd8:	691b      	ldr	r3, [r3, #16]
 8020cda:	4618      	mov	r0, r3
 8020cdc:	f7f8 ff22 	bl	8019b24 <__aeabi_i2d>
 8020ce0:	4602      	mov	r2, r0
 8020ce2:	460b      	mov	r3, r1
 8020ce4:	4650      	mov	r0, sl
 8020ce6:	4659      	mov	r1, fp
 8020ce8:	f7f9 f9f8 	bl	801a0dc <__aeabi_dcmplt>
 8020cec:	4603      	mov	r3, r0
 8020cee:	2b00      	cmp	r3, #0
 8020cf0:	d100      	bne.n	8020cf4 <HT_find_hand+0x1124>
 8020cf2:	e012      	b.n	8020d1a <HT_find_hand+0x114a>
 8020cf4:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 8020cf8:	2201      	movs	r2, #1
 8020cfa:	f883 214d 	strb.w	r2, [r3, #333]	@ 0x14d
 8020cfe:	4b2b      	ldr	r3, [pc, #172]	@ (8020dac <HT_find_hand+0x11dc>)
 8020d00:	681b      	ldr	r3, [r3, #0]
 8020d02:	2b01      	cmp	r3, #1
 8020d04:	dd09      	ble.n	8020d1a <HT_find_hand+0x114a>
 8020d06:	482e      	ldr	r0, [pc, #184]	@ (8020dc0 <HT_find_hand+0x11f0>)
 8020d08:	f002 fae8 	bl	80232dc <puts>
 8020d0c:	e005      	b.n	8020d1a <HT_find_hand+0x114a>
 8020d0e:	2300      	movs	r3, #0
 8020d10:	f8c7 34fc 	str.w	r3, [r7, #1276]	@ 0x4fc
 8020d14:	e002      	b.n	8020d1c <HT_find_hand+0x114c>
 8020d16:	bf00      	nop
 8020d18:	e037      	b.n	8020d8a <HT_find_hand+0x11ba>
 8020d1a:	bf00      	nop
 8020d1c:	e035      	b.n	8020d8a <HT_find_hand+0x11ba>
 8020d1e:	2300      	movs	r3, #0
 8020d20:	f8c7 34fc 	str.w	r3, [r7, #1276]	@ 0x4fc
 8020d24:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	@ 0x4d8
 8020d28:	689b      	ldr	r3, [r3, #8]
 8020d2a:	2b00      	cmp	r3, #0
 8020d2c:	dd07      	ble.n	8020d3e <HT_find_hand+0x116e>
 8020d2e:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	@ 0x4d8
 8020d32:	689a      	ldr	r2, [r3, #8]
 8020d34:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	@ 0x4d8
 8020d38:	685b      	ldr	r3, [r3, #4]
 8020d3a:	429a      	cmp	r2, r3
 8020d3c:	dd24      	ble.n	8020d88 <HT_find_hand+0x11b8>
 8020d3e:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 8020d42:	2201      	movs	r2, #1
 8020d44:	f883 214d 	strb.w	r2, [r3, #333]	@ 0x14d
 8020d48:	4b18      	ldr	r3, [pc, #96]	@ (8020dac <HT_find_hand+0x11dc>)
 8020d4a:	681b      	ldr	r3, [r3, #0]
 8020d4c:	2b01      	cmp	r3, #1
 8020d4e:	dd1b      	ble.n	8020d88 <HT_find_hand+0x11b8>
 8020d50:	481c      	ldr	r0, [pc, #112]	@ (8020dc4 <HT_find_hand+0x11f4>)
 8020d52:	f002 fac3 	bl	80232dc <puts>
 8020d56:	e017      	b.n	8020d88 <HT_find_hand+0x11b8>
 8020d58:	bf00      	nop
 8020d5a:	e016      	b.n	8020d8a <HT_find_hand+0x11ba>
 8020d5c:	bf00      	nop
 8020d5e:	e014      	b.n	8020d8a <HT_find_hand+0x11ba>
 8020d60:	bf00      	nop
 8020d62:	e012      	b.n	8020d8a <HT_find_hand+0x11ba>
 8020d64:	bf00      	nop
 8020d66:	e010      	b.n	8020d8a <HT_find_hand+0x11ba>
 8020d68:	bf00      	nop
 8020d6a:	e00e      	b.n	8020d8a <HT_find_hand+0x11ba>
 8020d6c:	bf00      	nop
 8020d6e:	e00c      	b.n	8020d8a <HT_find_hand+0x11ba>
 8020d70:	bf00      	nop
 8020d72:	e00a      	b.n	8020d8a <HT_find_hand+0x11ba>
 8020d74:	bf00      	nop
 8020d76:	e008      	b.n	8020d8a <HT_find_hand+0x11ba>
 8020d78:	bf00      	nop
 8020d7a:	e006      	b.n	8020d8a <HT_find_hand+0x11ba>
 8020d7c:	bf00      	nop
 8020d7e:	e004      	b.n	8020d8a <HT_find_hand+0x11ba>
 8020d80:	bf00      	nop
 8020d82:	e002      	b.n	8020d8a <HT_find_hand+0x11ba>
 8020d84:	bf00      	nop
 8020d86:	e000      	b.n	8020d8a <HT_find_hand+0x11ba>
 8020d88:	bf00      	nop
 8020d8a:	4b08      	ldr	r3, [pc, #32]	@ (8020dac <HT_find_hand+0x11dc>)
 8020d8c:	681b      	ldr	r3, [r3, #0]
 8020d8e:	2b02      	cmp	r3, #2
 8020d90:	dd04      	ble.n	8020d9c <HT_find_hand+0x11cc>
 8020d92:	f8d7 14fc 	ldr.w	r1, [r7, #1276]	@ 0x4fc
 8020d96:	480c      	ldr	r0, [pc, #48]	@ (8020dc8 <HT_find_hand+0x11f8>)
 8020d98:	f002 fa38 	bl	802320c <iprintf>
 8020d9c:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	@ 0x4fc
 8020da0:	4618      	mov	r0, r3
 8020da2:	f207 571c 	addw	r7, r7, #1308	@ 0x51c
 8020da6:	46bd      	mov	sp, r7
 8020da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020dac:	200019c8 	.word	0x200019c8
 8020db0:	08043ca4 	.word	0x08043ca4
 8020db4:	08043cf0 	.word	0x08043cf0
 8020db8:	08043d30 	.word	0x08043d30
 8020dbc:	08043d64 	.word	0x08043d64
 8020dc0:	08043db8 	.word	0x08043db8
 8020dc4:	08043e10 	.word	0x08043e10
 8020dc8:	08043e54 	.word	0x08043e54

08020dcc <HT_update_path>:
 8020dcc:	b580      	push	{r7, lr}
 8020dce:	b084      	sub	sp, #16
 8020dd0:	af00      	add	r7, sp, #0
 8020dd2:	6078      	str	r0, [r7, #4]
 8020dd4:	687b      	ldr	r3, [r7, #4]
 8020dd6:	2b00      	cmp	r3, #0
 8020dd8:	d109      	bne.n	8020dee <HT_update_path+0x22>
 8020dda:	4b5d      	ldr	r3, [pc, #372]	@ (8020f50 <HT_update_path+0x184>)
 8020ddc:	681b      	ldr	r3, [r3, #0]
 8020dde:	2b00      	cmp	r3, #0
 8020de0:	dd02      	ble.n	8020de8 <HT_update_path+0x1c>
 8020de2:	485c      	ldr	r0, [pc, #368]	@ (8020f54 <HT_update_path+0x188>)
 8020de4:	f002 fa7a 	bl	80232dc <puts>
 8020de8:	f06f 0301 	mvn.w	r3, #1
 8020dec:	e0ac      	b.n	8020f48 <HT_update_path+0x17c>
 8020dee:	687b      	ldr	r3, [r7, #4]
 8020df0:	f893 3168 	ldrb.w	r3, [r3, #360]	@ 0x168
 8020df4:	2b00      	cmp	r3, #0
 8020df6:	d044      	beq.n	8020e82 <HT_update_path+0xb6>
 8020df8:	4b55      	ldr	r3, [pc, #340]	@ (8020f50 <HT_update_path+0x184>)
 8020dfa:	681b      	ldr	r3, [r3, #0]
 8020dfc:	2b02      	cmp	r3, #2
 8020dfe:	dd0b      	ble.n	8020e18 <HT_update_path+0x4c>
 8020e00:	687b      	ldr	r3, [r7, #4]
 8020e02:	f8d3 1178 	ldr.w	r1, [r3, #376]	@ 0x178
 8020e06:	687b      	ldr	r3, [r7, #4]
 8020e08:	f8d3 2174 	ldr.w	r2, [r3, #372]	@ 0x174
 8020e0c:	687b      	ldr	r3, [r7, #4]
 8020e0e:	f893 3169 	ldrb.w	r3, [r3, #361]	@ 0x169
 8020e12:	4851      	ldr	r0, [pc, #324]	@ (8020f58 <HT_update_path+0x18c>)
 8020e14:	f002 f9fa 	bl	802320c <iprintf>
 8020e18:	687b      	ldr	r3, [r7, #4]
 8020e1a:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 8020e1e:	2b01      	cmp	r3, #1
 8020e20:	dd2a      	ble.n	8020e78 <HT_update_path+0xac>
 8020e22:	687b      	ldr	r3, [r7, #4]
 8020e24:	f8d3 2178 	ldr.w	r2, [r3, #376]	@ 0x178
 8020e28:	687b      	ldr	r3, [r7, #4]
 8020e2a:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 8020e2e:	429a      	cmp	r2, r3
 8020e30:	dc22      	bgt.n	8020e78 <HT_update_path+0xac>
 8020e32:	687b      	ldr	r3, [r7, #4]
 8020e34:	f893 3169 	ldrb.w	r3, [r3, #361]	@ 0x169
 8020e38:	f083 0301 	eor.w	r3, r3, #1
 8020e3c:	b2db      	uxtb	r3, r3
 8020e3e:	2b00      	cmp	r3, #0
 8020e40:	d01a      	beq.n	8020e78 <HT_update_path+0xac>
 8020e42:	687b      	ldr	r3, [r7, #4]
 8020e44:	f503 72b8 	add.w	r2, r3, #368	@ 0x170
 8020e48:	687b      	ldr	r3, [r7, #4]
 8020e4a:	edd3 7a07 	vldr	s15, [r3, #28]
 8020e4e:	687b      	ldr	r3, [r7, #4]
 8020e50:	ed93 7a08 	vldr	s14, [r3, #32]
 8020e54:	687b      	ldr	r3, [r7, #4]
 8020e56:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8020e5a:	eeb0 1a66 	vmov.f32	s2, s13
 8020e5e:	eef0 0a47 	vmov.f32	s1, s14
 8020e62:	eeb0 0a67 	vmov.f32	s0, s15
 8020e66:	4610      	mov	r0, r2
 8020e68:	f000 f87e 	bl	8020f68 <HT_path_interpolate>
 8020e6c:	60f8      	str	r0, [r7, #12]
 8020e6e:	68fb      	ldr	r3, [r7, #12]
 8020e70:	2b00      	cmp	r3, #0
 8020e72:	d001      	beq.n	8020e78 <HT_update_path+0xac>
 8020e74:	68fb      	ldr	r3, [r7, #12]
 8020e76:	e067      	b.n	8020f48 <HT_update_path+0x17c>
 8020e78:	687b      	ldr	r3, [r7, #4]
 8020e7a:	2201      	movs	r2, #1
 8020e7c:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178
 8020e80:	e02c      	b.n	8020edc <HT_update_path+0x110>
 8020e82:	687b      	ldr	r3, [r7, #4]
 8020e84:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 8020e88:	2b00      	cmp	r3, #0
 8020e8a:	dd1c      	ble.n	8020ec6 <HT_update_path+0xfa>
 8020e8c:	687b      	ldr	r3, [r7, #4]
 8020e8e:	f8d3 2170 	ldr.w	r2, [r3, #368]	@ 0x170
 8020e92:	687b      	ldr	r3, [r7, #4]
 8020e94:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 8020e98:	1ad3      	subs	r3, r2, r3
 8020e9a:	2b00      	cmp	r3, #0
 8020e9c:	dd13      	ble.n	8020ec6 <HT_update_path+0xfa>
 8020e9e:	687b      	ldr	r3, [r7, #4]
 8020ea0:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 8020ea4:	1c5a      	adds	r2, r3, #1
 8020ea6:	687b      	ldr	r3, [r7, #4]
 8020ea8:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178
 8020eac:	4b28      	ldr	r3, [pc, #160]	@ (8020f50 <HT_update_path+0x184>)
 8020eae:	681b      	ldr	r3, [r3, #0]
 8020eb0:	2b02      	cmp	r3, #2
 8020eb2:	dd13      	ble.n	8020edc <HT_update_path+0x110>
 8020eb4:	687b      	ldr	r3, [r7, #4]
 8020eb6:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 8020eba:	3b01      	subs	r3, #1
 8020ebc:	4619      	mov	r1, r3
 8020ebe:	4827      	ldr	r0, [pc, #156]	@ (8020f5c <HT_update_path+0x190>)
 8020ec0:	f002 f9a4 	bl	802320c <iprintf>
 8020ec4:	e00a      	b.n	8020edc <HT_update_path+0x110>
 8020ec6:	687b      	ldr	r3, [r7, #4]
 8020ec8:	2200      	movs	r2, #0
 8020eca:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178
 8020ece:	4b20      	ldr	r3, [pc, #128]	@ (8020f50 <HT_update_path+0x184>)
 8020ed0:	681b      	ldr	r3, [r3, #0]
 8020ed2:	2b02      	cmp	r3, #2
 8020ed4:	dd02      	ble.n	8020edc <HT_update_path+0x110>
 8020ed6:	4822      	ldr	r0, [pc, #136]	@ (8020f60 <HT_update_path+0x194>)
 8020ed8:	f002 fa00 	bl	80232dc <puts>
 8020edc:	687b      	ldr	r3, [r7, #4]
 8020ede:	f503 72be 	add.w	r2, r3, #380	@ 0x17c
 8020ee2:	687b      	ldr	r3, [r7, #4]
 8020ee4:	edd3 7a07 	vldr	s15, [r3, #28]
 8020ee8:	eeb0 0a67 	vmov.f32	s0, s15
 8020eec:	4610      	mov	r0, r2
 8020eee:	f000 facf 	bl	8021490 <RFBVM_push>
 8020ef2:	60f8      	str	r0, [r7, #12]
 8020ef4:	68fb      	ldr	r3, [r7, #12]
 8020ef6:	2b00      	cmp	r3, #0
 8020ef8:	d001      	beq.n	8020efe <HT_update_path+0x132>
 8020efa:	68fb      	ldr	r3, [r7, #12]
 8020efc:	e024      	b.n	8020f48 <HT_update_path+0x17c>
 8020efe:	687b      	ldr	r3, [r7, #4]
 8020f00:	f503 7264 	add.w	r2, r3, #912	@ 0x390
 8020f04:	687b      	ldr	r3, [r7, #4]
 8020f06:	edd3 7a08 	vldr	s15, [r3, #32]
 8020f0a:	eeb0 0a67 	vmov.f32	s0, s15
 8020f0e:	4610      	mov	r0, r2
 8020f10:	f000 fabe 	bl	8021490 <RFBVM_push>
 8020f14:	60f8      	str	r0, [r7, #12]
 8020f16:	68fb      	ldr	r3, [r7, #12]
 8020f18:	2b00      	cmp	r3, #0
 8020f1a:	d001      	beq.n	8020f20 <HT_update_path+0x154>
 8020f1c:	68fb      	ldr	r3, [r7, #12]
 8020f1e:	e013      	b.n	8020f48 <HT_update_path+0x17c>
 8020f20:	687b      	ldr	r3, [r7, #4]
 8020f22:	f203 52a4 	addw	r2, r3, #1444	@ 0x5a4
 8020f26:	687b      	ldr	r3, [r7, #4]
 8020f28:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8020f2c:	eeb0 0a67 	vmov.f32	s0, s15
 8020f30:	4610      	mov	r0, r2
 8020f32:	f000 faad 	bl	8021490 <RFBVM_push>
 8020f36:	60f8      	str	r0, [r7, #12]
 8020f38:	4b05      	ldr	r3, [pc, #20]	@ (8020f50 <HT_update_path+0x184>)
 8020f3a:	681b      	ldr	r3, [r3, #0]
 8020f3c:	2b02      	cmp	r3, #2
 8020f3e:	dd02      	ble.n	8020f46 <HT_update_path+0x17a>
 8020f40:	4808      	ldr	r0, [pc, #32]	@ (8020f64 <HT_update_path+0x198>)
 8020f42:	f002 f9cb 	bl	80232dc <puts>
 8020f46:	68fb      	ldr	r3, [r7, #12]
 8020f48:	4618      	mov	r0, r3
 8020f4a:	3710      	adds	r7, #16
 8020f4c:	46bd      	mov	sp, r7
 8020f4e:	bd80      	pop	{r7, pc}
 8020f50:	200019c8 	.word	0x200019c8
 8020f54:	08043e84 	.word	0x08043e84
 8020f58:	08043eb4 	.word	0x08043eb4
 8020f5c:	08043f10 	.word	0x08043f10
 8020f60:	08043f48 	.word	0x08043f48
 8020f64:	08043f78 	.word	0x08043f78

08020f68 <HT_path_interpolate>:
 8020f68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8020f6c:	b09a      	sub	sp, #104	@ 0x68
 8020f6e:	af0c      	add	r7, sp, #48	@ 0x30
 8020f70:	61f8      	str	r0, [r7, #28]
 8020f72:	ed87 0a06 	vstr	s0, [r7, #24]
 8020f76:	edc7 0a05 	vstr	s1, [r7, #20]
 8020f7a:	ed87 1a04 	vstr	s2, [r7, #16]
 8020f7e:	69fb      	ldr	r3, [r7, #28]
 8020f80:	2b00      	cmp	r3, #0
 8020f82:	d109      	bne.n	8020f98 <HT_path_interpolate+0x30>
 8020f84:	4b87      	ldr	r3, [pc, #540]	@ (80211a4 <HT_path_interpolate+0x23c>)
 8020f86:	681b      	ldr	r3, [r3, #0]
 8020f88:	2b00      	cmp	r3, #0
 8020f8a:	dd02      	ble.n	8020f92 <HT_path_interpolate+0x2a>
 8020f8c:	4886      	ldr	r0, [pc, #536]	@ (80211a8 <HT_path_interpolate+0x240>)
 8020f8e:	f002 f9a5 	bl	80232dc <puts>
 8020f92:	f06f 0301 	mvn.w	r3, #1
 8020f96:	e100      	b.n	802119a <HT_path_interpolate+0x232>
 8020f98:	69fb      	ldr	r3, [r7, #28]
 8020f9a:	f103 000c 	add.w	r0, r3, #12
 8020f9e:	69fb      	ldr	r3, [r7, #28]
 8020fa0:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8020fa4:	69fb      	ldr	r3, [r7, #28]
 8020fa6:	689b      	ldr	r3, [r3, #8]
 8020fa8:	1ad3      	subs	r3, r2, r3
 8020faa:	4619      	mov	r1, r3
 8020fac:	f000 fb55 	bl	802165a <RFBVM_get_element_value>
 8020fb0:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
 8020fb4:	69fb      	ldr	r3, [r7, #28]
 8020fb6:	f503 7008 	add.w	r0, r3, #544	@ 0x220
 8020fba:	69fb      	ldr	r3, [r7, #28]
 8020fbc:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 8020fc0:	69fb      	ldr	r3, [r7, #28]
 8020fc2:	689b      	ldr	r3, [r3, #8]
 8020fc4:	1ad3      	subs	r3, r2, r3
 8020fc6:	4619      	mov	r1, r3
 8020fc8:	f000 fb47 	bl	802165a <RFBVM_get_element_value>
 8020fcc:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
 8020fd0:	69fb      	ldr	r3, [r7, #28]
 8020fd2:	f203 4034 	addw	r0, r3, #1076	@ 0x434
 8020fd6:	69fb      	ldr	r3, [r7, #28]
 8020fd8:	f8d3 2640 	ldr.w	r2, [r3, #1600]	@ 0x640
 8020fdc:	69fb      	ldr	r3, [r7, #28]
 8020fde:	689b      	ldr	r3, [r3, #8]
 8020fe0:	1ad3      	subs	r3, r2, r3
 8020fe2:	4619      	mov	r1, r3
 8020fe4:	f000 fb39 	bl	802165a <RFBVM_get_element_value>
 8020fe8:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 8020fec:	4b6d      	ldr	r3, [pc, #436]	@ (80211a4 <HT_path_interpolate+0x23c>)
 8020fee:	681b      	ldr	r3, [r3, #0]
 8020ff0:	2b01      	cmp	r3, #1
 8020ff2:	dd31      	ble.n	8021058 <HT_path_interpolate+0xf0>
 8020ff4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8020ff6:	f7f8 fda7 	bl	8019b48 <__aeabi_f2d>
 8020ffa:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8020ffe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8021000:	f7f8 fda2 	bl	8019b48 <__aeabi_f2d>
 8021004:	4604      	mov	r4, r0
 8021006:	460d      	mov	r5, r1
 8021008:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802100a:	f7f8 fd9d 	bl	8019b48 <__aeabi_f2d>
 802100e:	4680      	mov	r8, r0
 8021010:	4689      	mov	r9, r1
 8021012:	69b8      	ldr	r0, [r7, #24]
 8021014:	f7f8 fd98 	bl	8019b48 <__aeabi_f2d>
 8021018:	4682      	mov	sl, r0
 802101a:	468b      	mov	fp, r1
 802101c:	6978      	ldr	r0, [r7, #20]
 802101e:	f7f8 fd93 	bl	8019b48 <__aeabi_f2d>
 8021022:	e9c7 0100 	strd	r0, r1, [r7]
 8021026:	6938      	ldr	r0, [r7, #16]
 8021028:	f7f8 fd8e 	bl	8019b48 <__aeabi_f2d>
 802102c:	4602      	mov	r2, r0
 802102e:	460b      	mov	r3, r1
 8021030:	69f9      	ldr	r1, [r7, #28]
 8021032:	6889      	ldr	r1, [r1, #8]
 8021034:	910a      	str	r1, [sp, #40]	@ 0x28
 8021036:	e9cd 2308 	strd	r2, r3, [sp, #32]
 802103a:	ed97 7b00 	vldr	d7, [r7]
 802103e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8021042:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8021046:	e9cd 8902 	strd	r8, r9, [sp, #8]
 802104a:	e9cd 4500 	strd	r4, r5, [sp]
 802104e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8021052:	4856      	ldr	r0, [pc, #344]	@ (80211ac <HT_path_interpolate+0x244>)
 8021054:	f002 f8da 	bl	802320c <iprintf>
 8021058:	2300      	movs	r3, #0
 802105a:	633b      	str	r3, [r7, #48]	@ 0x30
 802105c:	2301      	movs	r3, #1
 802105e:	637b      	str	r3, [r7, #52]	@ 0x34
 8021060:	e080      	b.n	8021164 <HT_path_interpolate+0x1fc>
 8021062:	69fb      	ldr	r3, [r7, #28]
 8021064:	f103 000c 	add.w	r0, r3, #12
 8021068:	69fb      	ldr	r3, [r7, #28]
 802106a:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 802106e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021070:	1ad2      	subs	r2, r2, r3
 8021072:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8021076:	edd7 7a06 	vldr	s15, [r7, #24]
 802107a:	ee37 7a67 	vsub.f32	s14, s14, s15
 802107e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021080:	ee07 3a90 	vmov	s15, r3
 8021084:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021088:	ee67 6a27 	vmul.f32	s13, s14, s15
 802108c:	69fb      	ldr	r3, [r7, #28]
 802108e:	689b      	ldr	r3, [r3, #8]
 8021090:	ee07 3a90 	vmov	s15, r3
 8021094:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021098:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802109c:	edd7 7a06 	vldr	s15, [r7, #24]
 80210a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80210a4:	eeb0 0a67 	vmov.f32	s0, s15
 80210a8:	4611      	mov	r1, r2
 80210aa:	f000 faf1 	bl	8021690 <RFBVM_set_element_value>
 80210ae:	4602      	mov	r2, r0
 80210b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80210b2:	4413      	add	r3, r2
 80210b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80210b6:	69fb      	ldr	r3, [r7, #28]
 80210b8:	f503 7008 	add.w	r0, r3, #544	@ 0x220
 80210bc:	69fb      	ldr	r3, [r7, #28]
 80210be:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 80210c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80210c4:	1ad2      	subs	r2, r2, r3
 80210c6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80210ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80210ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80210d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80210d4:	ee07 3a90 	vmov	s15, r3
 80210d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80210dc:	ee67 6a27 	vmul.f32	s13, s14, s15
 80210e0:	69fb      	ldr	r3, [r7, #28]
 80210e2:	689b      	ldr	r3, [r3, #8]
 80210e4:	ee07 3a90 	vmov	s15, r3
 80210e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80210ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80210f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80210f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80210f8:	eeb0 0a67 	vmov.f32	s0, s15
 80210fc:	4611      	mov	r1, r2
 80210fe:	f000 fac7 	bl	8021690 <RFBVM_set_element_value>
 8021102:	4602      	mov	r2, r0
 8021104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021106:	4413      	add	r3, r2
 8021108:	633b      	str	r3, [r7, #48]	@ 0x30
 802110a:	69fb      	ldr	r3, [r7, #28]
 802110c:	f203 4034 	addw	r0, r3, #1076	@ 0x434
 8021110:	69fb      	ldr	r3, [r7, #28]
 8021112:	f8d3 2640 	ldr.w	r2, [r3, #1600]	@ 0x640
 8021116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021118:	1ad2      	subs	r2, r2, r3
 802111a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 802111e:	edd7 7a04 	vldr	s15, [r7, #16]
 8021122:	ee37 7a67 	vsub.f32	s14, s14, s15
 8021126:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021128:	ee07 3a90 	vmov	s15, r3
 802112c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021130:	ee67 6a27 	vmul.f32	s13, s14, s15
 8021134:	69fb      	ldr	r3, [r7, #28]
 8021136:	689b      	ldr	r3, [r3, #8]
 8021138:	ee07 3a90 	vmov	s15, r3
 802113c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021140:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021144:	edd7 7a04 	vldr	s15, [r7, #16]
 8021148:	ee77 7a27 	vadd.f32	s15, s14, s15
 802114c:	eeb0 0a67 	vmov.f32	s0, s15
 8021150:	4611      	mov	r1, r2
 8021152:	f000 fa9d 	bl	8021690 <RFBVM_set_element_value>
 8021156:	4602      	mov	r2, r0
 8021158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802115a:	4413      	add	r3, r2
 802115c:	633b      	str	r3, [r7, #48]	@ 0x30
 802115e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021160:	3301      	adds	r3, #1
 8021162:	637b      	str	r3, [r7, #52]	@ 0x34
 8021164:	69fb      	ldr	r3, [r7, #28]
 8021166:	689b      	ldr	r3, [r3, #8]
 8021168:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802116a:	429a      	cmp	r2, r3
 802116c:	f6ff af79 	blt.w	8021062 <HT_path_interpolate+0xfa>
 8021170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021172:	2b00      	cmp	r3, #0
 8021174:	d009      	beq.n	802118a <HT_path_interpolate+0x222>
 8021176:	4b0b      	ldr	r3, [pc, #44]	@ (80211a4 <HT_path_interpolate+0x23c>)
 8021178:	681b      	ldr	r3, [r3, #0]
 802117a:	2b00      	cmp	r3, #0
 802117c:	dd02      	ble.n	8021184 <HT_path_interpolate+0x21c>
 802117e:	480c      	ldr	r0, [pc, #48]	@ (80211b0 <HT_path_interpolate+0x248>)
 8021180:	f002 f8ac 	bl	80232dc <puts>
 8021184:	f06f 0307 	mvn.w	r3, #7
 8021188:	e007      	b.n	802119a <HT_path_interpolate+0x232>
 802118a:	4b06      	ldr	r3, [pc, #24]	@ (80211a4 <HT_path_interpolate+0x23c>)
 802118c:	681b      	ldr	r3, [r3, #0]
 802118e:	2b02      	cmp	r3, #2
 8021190:	dd02      	ble.n	8021198 <HT_path_interpolate+0x230>
 8021192:	4808      	ldr	r0, [pc, #32]	@ (80211b4 <HT_path_interpolate+0x24c>)
 8021194:	f002 f8a2 	bl	80232dc <puts>
 8021198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802119a:	4618      	mov	r0, r3
 802119c:	3738      	adds	r7, #56	@ 0x38
 802119e:	46bd      	mov	sp, r7
 80211a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80211a4:	200019c8 	.word	0x200019c8
 80211a8:	08043fa0 	.word	0x08043fa0
 80211ac:	08043fd0 	.word	0x08043fd0
 80211b0:	08044024 	.word	0x08044024
 80211b4:	08044064 	.word	0x08044064

080211b8 <taylor_atan>:
 80211b8:	b5b0      	push	{r4, r5, r7, lr}
 80211ba:	b086      	sub	sp, #24
 80211bc:	af00      	add	r7, sp, #0
 80211be:	ed87 0a01 	vstr	s0, [r7, #4]
 80211c2:	4b67      	ldr	r3, [pc, #412]	@ (8021360 <taylor_atan+0x1a8>)
 80211c4:	613b      	str	r3, [r7, #16]
 80211c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80211ca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80211ce:	ed97 7a01 	vldr	s14, [r7, #4]
 80211d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80211d6:	edc7 7a03 	vstr	s15, [r7, #12]
 80211da:	edd7 7a01 	vldr	s15, [r7, #4]
 80211de:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80211e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80211e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80211ea:	db2b      	blt.n	8021244 <taylor_atan+0x8c>
 80211ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80211f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80211f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80211f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80211fc:	d822      	bhi.n	8021244 <taylor_atan+0x8c>
 80211fe:	6878      	ldr	r0, [r7, #4]
 8021200:	f7f8 fca2 	bl	8019b48 <__aeabi_f2d>
 8021204:	a352      	add	r3, pc, #328	@ (adr r3, 8021350 <taylor_atan+0x198>)
 8021206:	e9d3 2300 	ldrd	r2, r3, [r3]
 802120a:	f7f8 fcf5 	bl	8019bf8 <__aeabi_dmul>
 802120e:	4602      	mov	r2, r0
 8021210:	460b      	mov	r3, r1
 8021212:	4614      	mov	r4, r2
 8021214:	461d      	mov	r5, r3
 8021216:	68f8      	ldr	r0, [r7, #12]
 8021218:	f7f8 fc96 	bl	8019b48 <__aeabi_f2d>
 802121c:	a34e      	add	r3, pc, #312	@ (adr r3, 8021358 <taylor_atan+0x1a0>)
 802121e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021222:	f7f8 fce9 	bl	8019bf8 <__aeabi_dmul>
 8021226:	4602      	mov	r2, r0
 8021228:	460b      	mov	r3, r1
 802122a:	4620      	mov	r0, r4
 802122c:	4629      	mov	r1, r5
 802122e:	f7f8 fb2b 	bl	8019888 <__aeabi_dsub>
 8021232:	4602      	mov	r2, r0
 8021234:	460b      	mov	r3, r1
 8021236:	4610      	mov	r0, r2
 8021238:	4619      	mov	r1, r3
 802123a:	f7f8 ffd5 	bl	801a1e8 <__aeabi_d2f>
 802123e:	4603      	mov	r3, r0
 8021240:	617b      	str	r3, [r7, #20]
 8021242:	e07b      	b.n	802133c <taylor_atan+0x184>
 8021244:	edd7 7a01 	vldr	s15, [r7, #4]
 8021248:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 802124c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8021250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021254:	d83a      	bhi.n	80212cc <taylor_atan+0x114>
 8021256:	edd7 7a04 	vldr	s15, [r7, #16]
 802125a:	eef1 7a67 	vneg.f32	s15, s15
 802125e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8021262:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8021266:	ee16 0a90 	vmov	r0, s13
 802126a:	f7f8 fc6d 	bl	8019b48 <__aeabi_f2d>
 802126e:	4604      	mov	r4, r0
 8021270:	460d      	mov	r5, r1
 8021272:	6878      	ldr	r0, [r7, #4]
 8021274:	f7f8 fc68 	bl	8019b48 <__aeabi_f2d>
 8021278:	4602      	mov	r2, r0
 802127a:	460b      	mov	r3, r1
 802127c:	a134      	add	r1, pc, #208	@ (adr r1, 8021350 <taylor_atan+0x198>)
 802127e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8021282:	f7f8 fde3 	bl	8019e4c <__aeabi_ddiv>
 8021286:	4602      	mov	r2, r0
 8021288:	460b      	mov	r3, r1
 802128a:	4620      	mov	r0, r4
 802128c:	4629      	mov	r1, r5
 802128e:	f7f8 fafb 	bl	8019888 <__aeabi_dsub>
 8021292:	4602      	mov	r2, r0
 8021294:	460b      	mov	r3, r1
 8021296:	4614      	mov	r4, r2
 8021298:	461d      	mov	r5, r3
 802129a:	68f8      	ldr	r0, [r7, #12]
 802129c:	f7f8 fc54 	bl	8019b48 <__aeabi_f2d>
 80212a0:	4602      	mov	r2, r0
 80212a2:	460b      	mov	r3, r1
 80212a4:	a12c      	add	r1, pc, #176	@ (adr r1, 8021358 <taylor_atan+0x1a0>)
 80212a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80212aa:	f7f8 fdcf 	bl	8019e4c <__aeabi_ddiv>
 80212ae:	4602      	mov	r2, r0
 80212b0:	460b      	mov	r3, r1
 80212b2:	4620      	mov	r0, r4
 80212b4:	4629      	mov	r1, r5
 80212b6:	f7f8 fae9 	bl	801988c <__adddf3>
 80212ba:	4602      	mov	r2, r0
 80212bc:	460b      	mov	r3, r1
 80212be:	4610      	mov	r0, r2
 80212c0:	4619      	mov	r1, r3
 80212c2:	f7f8 ff91 	bl	801a1e8 <__aeabi_d2f>
 80212c6:	4603      	mov	r3, r0
 80212c8:	617b      	str	r3, [r7, #20]
 80212ca:	e037      	b.n	802133c <taylor_atan+0x184>
 80212cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80212d0:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80212d4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80212d8:	ee16 0a90 	vmov	r0, s13
 80212dc:	f7f8 fc34 	bl	8019b48 <__aeabi_f2d>
 80212e0:	4604      	mov	r4, r0
 80212e2:	460d      	mov	r5, r1
 80212e4:	6878      	ldr	r0, [r7, #4]
 80212e6:	f7f8 fc2f 	bl	8019b48 <__aeabi_f2d>
 80212ea:	4602      	mov	r2, r0
 80212ec:	460b      	mov	r3, r1
 80212ee:	a118      	add	r1, pc, #96	@ (adr r1, 8021350 <taylor_atan+0x198>)
 80212f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80212f4:	f7f8 fdaa 	bl	8019e4c <__aeabi_ddiv>
 80212f8:	4602      	mov	r2, r0
 80212fa:	460b      	mov	r3, r1
 80212fc:	4620      	mov	r0, r4
 80212fe:	4629      	mov	r1, r5
 8021300:	f7f8 fac2 	bl	8019888 <__aeabi_dsub>
 8021304:	4602      	mov	r2, r0
 8021306:	460b      	mov	r3, r1
 8021308:	4614      	mov	r4, r2
 802130a:	461d      	mov	r5, r3
 802130c:	68f8      	ldr	r0, [r7, #12]
 802130e:	f7f8 fc1b 	bl	8019b48 <__aeabi_f2d>
 8021312:	4602      	mov	r2, r0
 8021314:	460b      	mov	r3, r1
 8021316:	a110      	add	r1, pc, #64	@ (adr r1, 8021358 <taylor_atan+0x1a0>)
 8021318:	e9d1 0100 	ldrd	r0, r1, [r1]
 802131c:	f7f8 fd96 	bl	8019e4c <__aeabi_ddiv>
 8021320:	4602      	mov	r2, r0
 8021322:	460b      	mov	r3, r1
 8021324:	4620      	mov	r0, r4
 8021326:	4629      	mov	r1, r5
 8021328:	f7f8 fab0 	bl	801988c <__adddf3>
 802132c:	4602      	mov	r2, r0
 802132e:	460b      	mov	r3, r1
 8021330:	4610      	mov	r0, r2
 8021332:	4619      	mov	r1, r3
 8021334:	f7f8 ff58 	bl	801a1e8 <__aeabi_d2f>
 8021338:	4603      	mov	r3, r0
 802133a:	617b      	str	r3, [r7, #20]
 802133c:	697b      	ldr	r3, [r7, #20]
 802133e:	ee07 3a90 	vmov	s15, r3
 8021342:	eeb0 0a67 	vmov.f32	s0, s15
 8021346:	3718      	adds	r7, #24
 8021348:	46bd      	mov	sp, r7
 802134a:	bdb0      	pop	{r4, r5, r7, pc}
 802134c:	f3af 8000 	nop.w
 8021350:	9ad42c3d 	.word	0x9ad42c3d
 8021354:	3fef1de6 	.word	0x3fef1de6
 8021358:	e00d1b71 	.word	0xe00d1b71
 802135c:	3fc8902d 	.word	0x3fc8902d
 8021360:	40490fd8 	.word	0x40490fd8

08021364 <taylor_sqrt>:
 8021364:	b480      	push	{r7}
 8021366:	b087      	sub	sp, #28
 8021368:	af00      	add	r7, sp, #0
 802136a:	ed87 0a01 	vstr	s0, [r7, #4]
 802136e:	2301      	movs	r3, #1
 8021370:	617b      	str	r3, [r7, #20]
 8021372:	e00a      	b.n	802138a <taylor_sqrt+0x26>
 8021374:	ed97 7a01 	vldr	s14, [r7, #4]
 8021378:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 802137c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8021380:	edc7 7a01 	vstr	s15, [r7, #4]
 8021384:	697b      	ldr	r3, [r7, #20]
 8021386:	005b      	lsls	r3, r3, #1
 8021388:	617b      	str	r3, [r7, #20]
 802138a:	edd7 7a01 	vldr	s15, [r7, #4]
 802138e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021392:	eef4 7ac7 	vcmpe.f32	s15, s14
 8021396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802139a:	dceb      	bgt.n	8021374 <taylor_sqrt+0x10>
 802139c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80213a0:	60bb      	str	r3, [r7, #8]
 80213a2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80213a6:	60fb      	str	r3, [r7, #12]
 80213a8:	2301      	movs	r3, #1
 80213aa:	613b      	str	r3, [r7, #16]
 80213ac:	e027      	b.n	80213fe <taylor_sqrt+0x9a>
 80213ae:	693b      	ldr	r3, [r7, #16]
 80213b0:	005b      	lsls	r3, r3, #1
 80213b2:	3b03      	subs	r3, #3
 80213b4:	ee07 3a90 	vmov	s15, r3
 80213b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80213bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80213c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80213c4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80213c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80213cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80213d0:	ee67 6a27 	vmul.f32	s13, s14, s15
 80213d4:	693b      	ldr	r3, [r7, #16]
 80213d6:	005b      	lsls	r3, r3, #1
 80213d8:	ee07 3a90 	vmov	s15, r3
 80213dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80213e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80213e4:	edc7 7a02 	vstr	s15, [r7, #8]
 80213e8:	ed97 7a03 	vldr	s14, [r7, #12]
 80213ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80213f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80213f4:	edc7 7a03 	vstr	s15, [r7, #12]
 80213f8:	693b      	ldr	r3, [r7, #16]
 80213fa:	3301      	adds	r3, #1
 80213fc:	613b      	str	r3, [r7, #16]
 80213fe:	693b      	ldr	r3, [r7, #16]
 8021400:	2b05      	cmp	r3, #5
 8021402:	ddd4      	ble.n	80213ae <taylor_sqrt+0x4a>
 8021404:	697b      	ldr	r3, [r7, #20]
 8021406:	ee07 3a90 	vmov	s15, r3
 802140a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 802140e:	edd7 7a03 	vldr	s15, [r7, #12]
 8021412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021416:	eeb0 0a67 	vmov.f32	s0, s15
 802141a:	371c      	adds	r7, #28
 802141c:	46bd      	mov	sp, r7
 802141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021422:	4770      	bx	lr

08021424 <RFBVM_init>:
 8021424:	b480      	push	{r7}
 8021426:	b083      	sub	sp, #12
 8021428:	af00      	add	r7, sp, #0
 802142a:	6078      	str	r0, [r7, #4]
 802142c:	6039      	str	r1, [r7, #0]
 802142e:	683b      	ldr	r3, [r7, #0]
 8021430:	2b7f      	cmp	r3, #127	@ 0x7f
 8021432:	dc04      	bgt.n	802143e <RFBVM_init+0x1a>
 8021434:	683b      	ldr	r3, [r7, #0]
 8021436:	2b01      	cmp	r3, #1
 8021438:	bfb8      	it	lt
 802143a:	2301      	movlt	r3, #1
 802143c:	e000      	b.n	8021440 <RFBVM_init+0x1c>
 802143e:	2380      	movs	r3, #128	@ 0x80
 8021440:	687a      	ldr	r2, [r7, #4]
 8021442:	f8c2 3210 	str.w	r3, [r2, #528]	@ 0x210
 8021446:	687a      	ldr	r2, [r7, #4]
 8021448:	687b      	ldr	r3, [r7, #4]
 802144a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 802144e:	009b      	lsls	r3, r3, #2
 8021450:	441a      	add	r2, r3
 8021452:	687b      	ldr	r3, [r7, #4]
 8021454:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
 8021458:	687a      	ldr	r2, [r7, #4]
 802145a:	687b      	ldr	r3, [r7, #4]
 802145c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8021460:	687a      	ldr	r2, [r7, #4]
 8021462:	687b      	ldr	r3, [r7, #4]
 8021464:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 8021468:	687b      	ldr	r3, [r7, #4]
 802146a:	2200      	movs	r2, #0
 802146c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
 8021470:	687b      	ldr	r3, [r7, #4]
 8021472:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8021476:	683a      	ldr	r2, [r7, #0]
 8021478:	429a      	cmp	r2, r3
 802147a:	d101      	bne.n	8021480 <RFBVM_init+0x5c>
 802147c:	2300      	movs	r3, #0
 802147e:	e001      	b.n	8021484 <RFBVM_init+0x60>
 8021480:	f04f 33ff 	mov.w	r3, #4294967295
 8021484:	4618      	mov	r0, r3
 8021486:	370c      	adds	r7, #12
 8021488:	46bd      	mov	sp, r7
 802148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802148e:	4770      	bx	lr

08021490 <RFBVM_push>:
 8021490:	b580      	push	{r7, lr}
 8021492:	b082      	sub	sp, #8
 8021494:	af00      	add	r7, sp, #0
 8021496:	6078      	str	r0, [r7, #4]
 8021498:	ed87 0a00 	vstr	s0, [r7]
 802149c:	687b      	ldr	r3, [r7, #4]
 802149e:	2b00      	cmp	r3, #0
 80214a0:	d002      	beq.n	80214a8 <RFBVM_push+0x18>
 80214a2:	687b      	ldr	r3, [r7, #4]
 80214a4:	2b00      	cmp	r3, #0
 80214a6:	d102      	bne.n	80214ae <RFBVM_push+0x1e>
 80214a8:	f04f 33ff 	mov.w	r3, #4294967295
 80214ac:	e03b      	b.n	8021526 <RFBVM_push+0x96>
 80214ae:	687b      	ldr	r3, [r7, #4]
 80214b0:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80214b4:	683a      	ldr	r2, [r7, #0]
 80214b6:	601a      	str	r2, [r3, #0]
 80214b8:	687b      	ldr	r3, [r7, #4]
 80214ba:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80214be:	1d1a      	adds	r2, r3, #4
 80214c0:	687b      	ldr	r3, [r7, #4]
 80214c2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 80214c6:	687b      	ldr	r3, [r7, #4]
 80214c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80214cc:	687b      	ldr	r3, [r7, #4]
 80214ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80214d2:	429a      	cmp	r2, r3
 80214d4:	d103      	bne.n	80214de <RFBVM_push+0x4e>
 80214d6:	687a      	ldr	r2, [r7, #4]
 80214d8:	687b      	ldr	r3, [r7, #4]
 80214da:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 80214de:	6878      	ldr	r0, [r7, #4]
 80214e0:	f000 f84e 	bl	8021580 <RFBVM_full>
 80214e4:	4603      	mov	r3, r0
 80214e6:	2b00      	cmp	r3, #0
 80214e8:	d015      	beq.n	8021516 <RFBVM_push+0x86>
 80214ea:	687b      	ldr	r3, [r7, #4]
 80214ec:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80214f0:	1d1a      	adds	r2, r3, #4
 80214f2:	687b      	ldr	r3, [r7, #4]
 80214f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80214f8:	429a      	cmp	r2, r3
 80214fa:	d104      	bne.n	8021506 <RFBVM_push+0x76>
 80214fc:	687a      	ldr	r2, [r7, #4]
 80214fe:	687b      	ldr	r3, [r7, #4]
 8021500:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8021504:	e00e      	b.n	8021524 <RFBVM_push+0x94>
 8021506:	687b      	ldr	r3, [r7, #4]
 8021508:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 802150c:	1d1a      	adds	r2, r3, #4
 802150e:	687b      	ldr	r3, [r7, #4]
 8021510:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8021514:	e006      	b.n	8021524 <RFBVM_push+0x94>
 8021516:	687b      	ldr	r3, [r7, #4]
 8021518:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 802151c:	1c5a      	adds	r2, r3, #1
 802151e:	687b      	ldr	r3, [r7, #4]
 8021520:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
 8021524:	2300      	movs	r3, #0
 8021526:	4618      	mov	r0, r3
 8021528:	3708      	adds	r7, #8
 802152a:	46bd      	mov	sp, r7
 802152c:	bd80      	pop	{r7, pc}

0802152e <RFBVM_fill>:
 802152e:	b580      	push	{r7, lr}
 8021530:	b084      	sub	sp, #16
 8021532:	af00      	add	r7, sp, #0
 8021534:	6078      	str	r0, [r7, #4]
 8021536:	ed87 0a00 	vstr	s0, [r7]
 802153a:	2300      	movs	r3, #0
 802153c:	60bb      	str	r3, [r7, #8]
 802153e:	2300      	movs	r3, #0
 8021540:	60fb      	str	r3, [r7, #12]
 8021542:	e00c      	b.n	802155e <RFBVM_fill+0x30>
 8021544:	ed97 0a00 	vldr	s0, [r7]
 8021548:	68f9      	ldr	r1, [r7, #12]
 802154a:	6878      	ldr	r0, [r7, #4]
 802154c:	f000 f8a0 	bl	8021690 <RFBVM_set_element_value>
 8021550:	4602      	mov	r2, r0
 8021552:	68bb      	ldr	r3, [r7, #8]
 8021554:	4413      	add	r3, r2
 8021556:	60bb      	str	r3, [r7, #8]
 8021558:	68fb      	ldr	r3, [r7, #12]
 802155a:	3301      	adds	r3, #1
 802155c:	60fb      	str	r3, [r7, #12]
 802155e:	687b      	ldr	r3, [r7, #4]
 8021560:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8021564:	68fa      	ldr	r2, [r7, #12]
 8021566:	429a      	cmp	r2, r3
 8021568:	dbec      	blt.n	8021544 <RFBVM_fill+0x16>
 802156a:	68bb      	ldr	r3, [r7, #8]
 802156c:	2b00      	cmp	r3, #0
 802156e:	d002      	beq.n	8021576 <RFBVM_fill+0x48>
 8021570:	f04f 33ff 	mov.w	r3, #4294967295
 8021574:	60bb      	str	r3, [r7, #8]
 8021576:	68bb      	ldr	r3, [r7, #8]
 8021578:	4618      	mov	r0, r3
 802157a:	3710      	adds	r7, #16
 802157c:	46bd      	mov	sp, r7
 802157e:	bd80      	pop	{r7, pc}

08021580 <RFBVM_full>:
 8021580:	b480      	push	{r7}
 8021582:	b083      	sub	sp, #12
 8021584:	af00      	add	r7, sp, #0
 8021586:	6078      	str	r0, [r7, #4]
 8021588:	687b      	ldr	r3, [r7, #4]
 802158a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 802158e:	687b      	ldr	r3, [r7, #4]
 8021590:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8021594:	429a      	cmp	r2, r3
 8021596:	bf0c      	ite	eq
 8021598:	2301      	moveq	r3, #1
 802159a:	2300      	movne	r3, #0
 802159c:	b2db      	uxtb	r3, r3
 802159e:	4618      	mov	r0, r3
 80215a0:	370c      	adds	r7, #12
 80215a2:	46bd      	mov	sp, r7
 80215a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80215a8:	4770      	bx	lr

080215aa <RFBVM_sum>:
 80215aa:	b480      	push	{r7}
 80215ac:	b087      	sub	sp, #28
 80215ae:	af00      	add	r7, sp, #0
 80215b0:	6078      	str	r0, [r7, #4]
 80215b2:	f04f 0300 	mov.w	r3, #0
 80215b6:	613b      	str	r3, [r7, #16]
 80215b8:	687b      	ldr	r3, [r7, #4]
 80215ba:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80215be:	60fb      	str	r3, [r7, #12]
 80215c0:	2300      	movs	r3, #0
 80215c2:	617b      	str	r3, [r7, #20]
 80215c4:	e015      	b.n	80215f2 <RFBVM_sum+0x48>
 80215c6:	68fb      	ldr	r3, [r7, #12]
 80215c8:	1d1a      	adds	r2, r3, #4
 80215ca:	60fa      	str	r2, [r7, #12]
 80215cc:	edd3 7a00 	vldr	s15, [r3]
 80215d0:	ed97 7a04 	vldr	s14, [r7, #16]
 80215d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80215d8:	edc7 7a04 	vstr	s15, [r7, #16]
 80215dc:	687b      	ldr	r3, [r7, #4]
 80215de:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80215e2:	68fa      	ldr	r2, [r7, #12]
 80215e4:	429a      	cmp	r2, r3
 80215e6:	d101      	bne.n	80215ec <RFBVM_sum+0x42>
 80215e8:	687b      	ldr	r3, [r7, #4]
 80215ea:	60fb      	str	r3, [r7, #12]
 80215ec:	697b      	ldr	r3, [r7, #20]
 80215ee:	3301      	adds	r3, #1
 80215f0:	617b      	str	r3, [r7, #20]
 80215f2:	687b      	ldr	r3, [r7, #4]
 80215f4:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80215f8:	697a      	ldr	r2, [r7, #20]
 80215fa:	429a      	cmp	r2, r3
 80215fc:	dbe3      	blt.n	80215c6 <RFBVM_sum+0x1c>
 80215fe:	693b      	ldr	r3, [r7, #16]
 8021600:	ee07 3a90 	vmov	s15, r3
 8021604:	eeb0 0a67 	vmov.f32	s0, s15
 8021608:	371c      	adds	r7, #28
 802160a:	46bd      	mov	sp, r7
 802160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021610:	4770      	bx	lr

08021612 <RFBVM_mean>:
 8021612:	b580      	push	{r7, lr}
 8021614:	b084      	sub	sp, #16
 8021616:	af00      	add	r7, sp, #0
 8021618:	6078      	str	r0, [r7, #4]
 802161a:	f04f 0300 	mov.w	r3, #0
 802161e:	60fb      	str	r3, [r7, #12]
 8021620:	687b      	ldr	r3, [r7, #4]
 8021622:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8021626:	2b00      	cmp	r3, #0
 8021628:	d00f      	beq.n	802164a <RFBVM_mean+0x38>
 802162a:	6878      	ldr	r0, [r7, #4]
 802162c:	f7ff ffbd 	bl	80215aa <RFBVM_sum>
 8021630:	eef0 6a40 	vmov.f32	s13, s0
 8021634:	687b      	ldr	r3, [r7, #4]
 8021636:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 802163a:	ee07 3a90 	vmov	s15, r3
 802163e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8021642:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8021646:	edc7 7a03 	vstr	s15, [r7, #12]
 802164a:	68fb      	ldr	r3, [r7, #12]
 802164c:	ee07 3a90 	vmov	s15, r3
 8021650:	eeb0 0a67 	vmov.f32	s0, s15
 8021654:	3710      	adds	r7, #16
 8021656:	46bd      	mov	sp, r7
 8021658:	bd80      	pop	{r7, pc}

0802165a <RFBVM_get_element_value>:
 802165a:	b580      	push	{r7, lr}
 802165c:	b084      	sub	sp, #16
 802165e:	af00      	add	r7, sp, #0
 8021660:	6078      	str	r0, [r7, #4]
 8021662:	6039      	str	r1, [r7, #0]
 8021664:	f04f 0300 	mov.w	r3, #0
 8021668:	60fb      	str	r3, [r7, #12]
 802166a:	6839      	ldr	r1, [r7, #0]
 802166c:	6878      	ldr	r0, [r7, #4]
 802166e:	f000 f829 	bl	80216c4 <RFBVM_get_element_pointer>
 8021672:	60b8      	str	r0, [r7, #8]
 8021674:	68bb      	ldr	r3, [r7, #8]
 8021676:	2b00      	cmp	r3, #0
 8021678:	d002      	beq.n	8021680 <RFBVM_get_element_value+0x26>
 802167a:	68bb      	ldr	r3, [r7, #8]
 802167c:	681b      	ldr	r3, [r3, #0]
 802167e:	60fb      	str	r3, [r7, #12]
 8021680:	68fb      	ldr	r3, [r7, #12]
 8021682:	ee07 3a90 	vmov	s15, r3
 8021686:	eeb0 0a67 	vmov.f32	s0, s15
 802168a:	3710      	adds	r7, #16
 802168c:	46bd      	mov	sp, r7
 802168e:	bd80      	pop	{r7, pc}

08021690 <RFBVM_set_element_value>:
 8021690:	b580      	push	{r7, lr}
 8021692:	b086      	sub	sp, #24
 8021694:	af00      	add	r7, sp, #0
 8021696:	60f8      	str	r0, [r7, #12]
 8021698:	60b9      	str	r1, [r7, #8]
 802169a:	ed87 0a01 	vstr	s0, [r7, #4]
 802169e:	68b9      	ldr	r1, [r7, #8]
 80216a0:	68f8      	ldr	r0, [r7, #12]
 80216a2:	f000 f80f 	bl	80216c4 <RFBVM_get_element_pointer>
 80216a6:	6178      	str	r0, [r7, #20]
 80216a8:	697b      	ldr	r3, [r7, #20]
 80216aa:	2b00      	cmp	r3, #0
 80216ac:	d102      	bne.n	80216b4 <RFBVM_set_element_value+0x24>
 80216ae:	f04f 33ff 	mov.w	r3, #4294967295
 80216b2:	e003      	b.n	80216bc <RFBVM_set_element_value+0x2c>
 80216b4:	697b      	ldr	r3, [r7, #20]
 80216b6:	687a      	ldr	r2, [r7, #4]
 80216b8:	601a      	str	r2, [r3, #0]
 80216ba:	2300      	movs	r3, #0
 80216bc:	4618      	mov	r0, r3
 80216be:	3718      	adds	r7, #24
 80216c0:	46bd      	mov	sp, r7
 80216c2:	bd80      	pop	{r7, pc}

080216c4 <RFBVM_get_element_pointer>:
 80216c4:	b480      	push	{r7}
 80216c6:	b085      	sub	sp, #20
 80216c8:	af00      	add	r7, sp, #0
 80216ca:	6078      	str	r0, [r7, #4]
 80216cc:	6039      	str	r1, [r7, #0]
 80216ce:	2300      	movs	r3, #0
 80216d0:	60fb      	str	r3, [r7, #12]
 80216d2:	683b      	ldr	r3, [r7, #0]
 80216d4:	2b00      	cmp	r3, #0
 80216d6:	db1a      	blt.n	802170e <RFBVM_get_element_pointer+0x4a>
 80216d8:	687b      	ldr	r3, [r7, #4]
 80216da:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80216de:	683a      	ldr	r2, [r7, #0]
 80216e0:	429a      	cmp	r2, r3
 80216e2:	da14      	bge.n	802170e <RFBVM_get_element_pointer+0x4a>
 80216e4:	687b      	ldr	r3, [r7, #4]
 80216e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80216ea:	683b      	ldr	r3, [r7, #0]
 80216ec:	009b      	lsls	r3, r3, #2
 80216ee:	4413      	add	r3, r2
 80216f0:	60fb      	str	r3, [r7, #12]
 80216f2:	687b      	ldr	r3, [r7, #4]
 80216f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80216f8:	68fa      	ldr	r2, [r7, #12]
 80216fa:	429a      	cmp	r2, r3
 80216fc:	d307      	bcc.n	802170e <RFBVM_get_element_pointer+0x4a>
 80216fe:	687b      	ldr	r3, [r7, #4]
 8021700:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8021704:	009b      	lsls	r3, r3, #2
 8021706:	425b      	negs	r3, r3
 8021708:	68fa      	ldr	r2, [r7, #12]
 802170a:	4413      	add	r3, r2
 802170c:	60fb      	str	r3, [r7, #12]
 802170e:	68fb      	ldr	r3, [r7, #12]
 8021710:	4618      	mov	r0, r3
 8021712:	3714      	adds	r7, #20
 8021714:	46bd      	mov	sp, r7
 8021716:	f85d 7b04 	ldr.w	r7, [sp], #4
 802171a:	4770      	bx	lr

0802171c <SEN_init>:
 802171c:	b580      	push	{r7, lr}
 802171e:	b082      	sub	sp, #8
 8021720:	af00      	add	r7, sp, #0
 8021722:	6078      	str	r0, [r7, #4]
 8021724:	4b17      	ldr	r3, [pc, #92]	@ (8021784 <SEN_init+0x68>)
 8021726:	681b      	ldr	r3, [r3, #0]
 8021728:	2b01      	cmp	r3, #1
 802172a:	dd02      	ble.n	8021732 <SEN_init+0x16>
 802172c:	4816      	ldr	r0, [pc, #88]	@ (8021788 <SEN_init+0x6c>)
 802172e:	f001 fdd5 	bl	80232dc <puts>
 8021732:	687b      	ldr	r3, [r7, #4]
 8021734:	2b00      	cmp	r3, #0
 8021736:	d109      	bne.n	802174c <SEN_init+0x30>
 8021738:	4b12      	ldr	r3, [pc, #72]	@ (8021784 <SEN_init+0x68>)
 802173a:	681b      	ldr	r3, [r3, #0]
 802173c:	2b00      	cmp	r3, #0
 802173e:	dd02      	ble.n	8021746 <SEN_init+0x2a>
 8021740:	4812      	ldr	r0, [pc, #72]	@ (802178c <SEN_init+0x70>)
 8021742:	f001 fdcb 	bl	80232dc <puts>
 8021746:	f06f 0301 	mvn.w	r3, #1
 802174a:	e016      	b.n	802177a <SEN_init+0x5e>
 802174c:	687b      	ldr	r3, [r7, #4]
 802174e:	2200      	movs	r2, #0
 8021750:	601a      	str	r2, [r3, #0]
 8021752:	687b      	ldr	r3, [r7, #4]
 8021754:	2200      	movs	r2, #0
 8021756:	605a      	str	r2, [r3, #4]
 8021758:	687b      	ldr	r3, [r7, #4]
 802175a:	2200      	movs	r2, #0
 802175c:	609a      	str	r2, [r3, #8]
 802175e:	687b      	ldr	r3, [r7, #4]
 8021760:	f04f 0200 	mov.w	r2, #0
 8021764:	60da      	str	r2, [r3, #12]
 8021766:	687b      	ldr	r3, [r7, #4]
 8021768:	4a09      	ldr	r2, [pc, #36]	@ (8021790 <SEN_init+0x74>)
 802176a:	611a      	str	r2, [r3, #16]
 802176c:	687b      	ldr	r3, [r7, #4]
 802176e:	4a08      	ldr	r2, [pc, #32]	@ (8021790 <SEN_init+0x74>)
 8021770:	615a      	str	r2, [r3, #20]
 8021772:	687b      	ldr	r3, [r7, #4]
 8021774:	2201      	movs	r2, #1
 8021776:	761a      	strb	r2, [r3, #24]
 8021778:	2300      	movs	r3, #0
 802177a:	4618      	mov	r0, r3
 802177c:	3708      	adds	r7, #8
 802177e:	46bd      	mov	sp, r7
 8021780:	bd80      	pop	{r7, pc}
 8021782:	bf00      	nop
 8021784:	200019c8 	.word	0x200019c8
 8021788:	0804408c 	.word	0x0804408c
 802178c:	080440ac 	.word	0x080440ac
 8021790:	3f402037 	.word	0x3f402037

08021794 <SEN_set_orientation>:
 8021794:	b580      	push	{r7, lr}
 8021796:	b082      	sub	sp, #8
 8021798:	af00      	add	r7, sp, #0
 802179a:	6078      	str	r0, [r7, #4]
 802179c:	6039      	str	r1, [r7, #0]
 802179e:	687b      	ldr	r3, [r7, #4]
 80217a0:	2b00      	cmp	r3, #0
 80217a2:	d109      	bne.n	80217b8 <SEN_set_orientation+0x24>
 80217a4:	4b0d      	ldr	r3, [pc, #52]	@ (80217dc <SEN_set_orientation+0x48>)
 80217a6:	681b      	ldr	r3, [r3, #0]
 80217a8:	2b00      	cmp	r3, #0
 80217aa:	dd02      	ble.n	80217b2 <SEN_set_orientation+0x1e>
 80217ac:	480c      	ldr	r0, [pc, #48]	@ (80217e0 <SEN_set_orientation+0x4c>)
 80217ae:	f001 fd95 	bl	80232dc <puts>
 80217b2:	f06f 0301 	mvn.w	r3, #1
 80217b6:	e00c      	b.n	80217d2 <SEN_set_orientation+0x3e>
 80217b8:	683b      	ldr	r3, [r7, #0]
 80217ba:	2b00      	cmp	r3, #0
 80217bc:	db05      	blt.n	80217ca <SEN_set_orientation+0x36>
 80217be:	683b      	ldr	r3, [r7, #0]
 80217c0:	2b07      	cmp	r3, #7
 80217c2:	dc02      	bgt.n	80217ca <SEN_set_orientation+0x36>
 80217c4:	683b      	ldr	r3, [r7, #0]
 80217c6:	b2da      	uxtb	r2, r3
 80217c8:	e000      	b.n	80217cc <SEN_set_orientation+0x38>
 80217ca:	2201      	movs	r2, #1
 80217cc:	687b      	ldr	r3, [r7, #4]
 80217ce:	761a      	strb	r2, [r3, #24]
 80217d0:	2300      	movs	r3, #0
 80217d2:	4618      	mov	r0, r3
 80217d4:	3708      	adds	r7, #8
 80217d6:	46bd      	mov	sp, r7
 80217d8:	bd80      	pop	{r7, pc}
 80217da:	bf00      	nop
 80217dc:	200019c8 	.word	0x200019c8
 80217e0:	080440d8 	.word	0x080440d8

080217e4 <SEN_set_frequency>:
 80217e4:	b580      	push	{r7, lr}
 80217e6:	b082      	sub	sp, #8
 80217e8:	af00      	add	r7, sp, #0
 80217ea:	6078      	str	r0, [r7, #4]
 80217ec:	ed87 0a00 	vstr	s0, [r7]
 80217f0:	687b      	ldr	r3, [r7, #4]
 80217f2:	2b00      	cmp	r3, #0
 80217f4:	d109      	bne.n	802180a <SEN_set_frequency+0x26>
 80217f6:	4b11      	ldr	r3, [pc, #68]	@ (802183c <SEN_set_frequency+0x58>)
 80217f8:	681b      	ldr	r3, [r3, #0]
 80217fa:	2b00      	cmp	r3, #0
 80217fc:	dd02      	ble.n	8021804 <SEN_set_frequency+0x20>
 80217fe:	4810      	ldr	r0, [pc, #64]	@ (8021840 <SEN_set_frequency+0x5c>)
 8021800:	f001 fd6c 	bl	80232dc <puts>
 8021804:	f06f 0301 	mvn.w	r3, #1
 8021808:	e014      	b.n	8021834 <SEN_set_frequency+0x50>
 802180a:	edd7 7a00 	vldr	s15, [r7]
 802180e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021816:	d809      	bhi.n	802182c <SEN_set_frequency+0x48>
 8021818:	4b08      	ldr	r3, [pc, #32]	@ (802183c <SEN_set_frequency+0x58>)
 802181a:	681b      	ldr	r3, [r3, #0]
 802181c:	2b00      	cmp	r3, #0
 802181e:	dd02      	ble.n	8021826 <SEN_set_frequency+0x42>
 8021820:	4808      	ldr	r0, [pc, #32]	@ (8021844 <SEN_set_frequency+0x60>)
 8021822:	f001 fd5b 	bl	80232dc <puts>
 8021826:	f06f 0305 	mvn.w	r3, #5
 802182a:	e003      	b.n	8021834 <SEN_set_frequency+0x50>
 802182c:	687b      	ldr	r3, [r7, #4]
 802182e:	683a      	ldr	r2, [r7, #0]
 8021830:	60da      	str	r2, [r3, #12]
 8021832:	2300      	movs	r3, #0
 8021834:	4618      	mov	r0, r3
 8021836:	3708      	adds	r7, #8
 8021838:	46bd      	mov	sp, r7
 802183a:	bd80      	pop	{r7, pc}
 802183c:	200019c8 	.word	0x200019c8
 8021840:	0804410c 	.word	0x0804410c
 8021844:	08044140 	.word	0x08044140

08021848 <SEN_set_resolution>:
 8021848:	b580      	push	{r7, lr}
 802184a:	b084      	sub	sp, #16
 802184c:	af00      	add	r7, sp, #0
 802184e:	60f8      	str	r0, [r7, #12]
 8021850:	60b9      	str	r1, [r7, #8]
 8021852:	607a      	str	r2, [r7, #4]
 8021854:	68fb      	ldr	r3, [r7, #12]
 8021856:	2b00      	cmp	r3, #0
 8021858:	d109      	bne.n	802186e <SEN_set_resolution+0x26>
 802185a:	4b1a      	ldr	r3, [pc, #104]	@ (80218c4 <SEN_set_resolution+0x7c>)
 802185c:	681b      	ldr	r3, [r3, #0]
 802185e:	2b00      	cmp	r3, #0
 8021860:	dd02      	ble.n	8021868 <SEN_set_resolution+0x20>
 8021862:	4819      	ldr	r0, [pc, #100]	@ (80218c8 <SEN_set_resolution+0x80>)
 8021864:	f001 fd3a 	bl	80232dc <puts>
 8021868:	f06f 0301 	mvn.w	r3, #1
 802186c:	e025      	b.n	80218ba <SEN_set_resolution+0x72>
 802186e:	68bb      	ldr	r3, [r7, #8]
 8021870:	2b00      	cmp	r3, #0
 8021872:	dd08      	ble.n	8021886 <SEN_set_resolution+0x3e>
 8021874:	687b      	ldr	r3, [r7, #4]
 8021876:	2b00      	cmp	r3, #0
 8021878:	dd05      	ble.n	8021886 <SEN_set_resolution+0x3e>
 802187a:	68bb      	ldr	r3, [r7, #8]
 802187c:	687a      	ldr	r2, [r7, #4]
 802187e:	fb02 f303 	mul.w	r3, r2, r3
 8021882:	2b40      	cmp	r3, #64	@ 0x40
 8021884:	dd0c      	ble.n	80218a0 <SEN_set_resolution+0x58>
 8021886:	4b0f      	ldr	r3, [pc, #60]	@ (80218c4 <SEN_set_resolution+0x7c>)
 8021888:	681b      	ldr	r3, [r3, #0]
 802188a:	2b00      	cmp	r3, #0
 802188c:	dd05      	ble.n	802189a <SEN_set_resolution+0x52>
 802188e:	2340      	movs	r3, #64	@ 0x40
 8021890:	687a      	ldr	r2, [r7, #4]
 8021892:	68b9      	ldr	r1, [r7, #8]
 8021894:	480d      	ldr	r0, [pc, #52]	@ (80218cc <SEN_set_resolution+0x84>)
 8021896:	f001 fcb9 	bl	802320c <iprintf>
 802189a:	f06f 0303 	mvn.w	r3, #3
 802189e:	e00c      	b.n	80218ba <SEN_set_resolution+0x72>
 80218a0:	68fb      	ldr	r3, [r7, #12]
 80218a2:	68ba      	ldr	r2, [r7, #8]
 80218a4:	601a      	str	r2, [r3, #0]
 80218a6:	68fb      	ldr	r3, [r7, #12]
 80218a8:	687a      	ldr	r2, [r7, #4]
 80218aa:	605a      	str	r2, [r3, #4]
 80218ac:	68bb      	ldr	r3, [r7, #8]
 80218ae:	687a      	ldr	r2, [r7, #4]
 80218b0:	fb03 f202 	mul.w	r2, r3, r2
 80218b4:	68fb      	ldr	r3, [r7, #12]
 80218b6:	609a      	str	r2, [r3, #8]
 80218b8:	2300      	movs	r3, #0
 80218ba:	4618      	mov	r0, r3
 80218bc:	3710      	adds	r7, #16
 80218be:	46bd      	mov	sp, r7
 80218c0:	bd80      	pop	{r7, pc}
 80218c2:	bf00      	nop
 80218c4:	200019c8 	.word	0x200019c8
 80218c8:	08044184 	.word	0x08044184
 80218cc:	080441b8 	.word	0x080441b8

080218d0 <SEN_set_square_resolution>:
 80218d0:	b580      	push	{r7, lr}
 80218d2:	b084      	sub	sp, #16
 80218d4:	af00      	add	r7, sp, #0
 80218d6:	6078      	str	r0, [r7, #4]
 80218d8:	6039      	str	r1, [r7, #0]
 80218da:	687b      	ldr	r3, [r7, #4]
 80218dc:	2b00      	cmp	r3, #0
 80218de:	d109      	bne.n	80218f4 <SEN_set_square_resolution+0x24>
 80218e0:	4b21      	ldr	r3, [pc, #132]	@ (8021968 <SEN_set_square_resolution+0x98>)
 80218e2:	681b      	ldr	r3, [r3, #0]
 80218e4:	2b00      	cmp	r3, #0
 80218e6:	dd02      	ble.n	80218ee <SEN_set_square_resolution+0x1e>
 80218e8:	4820      	ldr	r0, [pc, #128]	@ (802196c <SEN_set_square_resolution+0x9c>)
 80218ea:	f001 fcf7 	bl	80232dc <puts>
 80218ee:	f06f 0301 	mvn.w	r3, #1
 80218f2:	e034      	b.n	802195e <SEN_set_square_resolution+0x8e>
 80218f4:	683b      	ldr	r3, [r7, #0]
 80218f6:	2b00      	cmp	r3, #0
 80218f8:	dc09      	bgt.n	802190e <SEN_set_square_resolution+0x3e>
 80218fa:	4b1b      	ldr	r3, [pc, #108]	@ (8021968 <SEN_set_square_resolution+0x98>)
 80218fc:	681b      	ldr	r3, [r3, #0]
 80218fe:	2b00      	cmp	r3, #0
 8021900:	dd02      	ble.n	8021908 <SEN_set_square_resolution+0x38>
 8021902:	481b      	ldr	r0, [pc, #108]	@ (8021970 <SEN_set_square_resolution+0xa0>)
 8021904:	f001 fcea 	bl	80232dc <puts>
 8021908:	f06f 0303 	mvn.w	r3, #3
 802190c:	e027      	b.n	802195e <SEN_set_square_resolution+0x8e>
 802190e:	6838      	ldr	r0, [r7, #0]
 8021910:	f7f8 f908 	bl	8019b24 <__aeabi_i2d>
 8021914:	4602      	mov	r2, r0
 8021916:	460b      	mov	r3, r1
 8021918:	ec43 2b10 	vmov	d0, r2, r3
 802191c:	f005 f8f8 	bl	8026b10 <sqrt>
 8021920:	ec53 2b10 	vmov	r2, r3, d0
 8021924:	4610      	mov	r0, r2
 8021926:	4619      	mov	r1, r3
 8021928:	f7f8 fc16 	bl	801a158 <__aeabi_d2iz>
 802192c:	4603      	mov	r3, r0
 802192e:	60fb      	str	r3, [r7, #12]
 8021930:	68fb      	ldr	r3, [r7, #12]
 8021932:	fb03 f303 	mul.w	r3, r3, r3
 8021936:	683a      	ldr	r2, [r7, #0]
 8021938:	429a      	cmp	r2, r3
 802193a:	d009      	beq.n	8021950 <SEN_set_square_resolution+0x80>
 802193c:	4b0a      	ldr	r3, [pc, #40]	@ (8021968 <SEN_set_square_resolution+0x98>)
 802193e:	681b      	ldr	r3, [r3, #0]
 8021940:	2b00      	cmp	r3, #0
 8021942:	dd02      	ble.n	802194a <SEN_set_square_resolution+0x7a>
 8021944:	480b      	ldr	r0, [pc, #44]	@ (8021974 <SEN_set_square_resolution+0xa4>)
 8021946:	f001 fcc9 	bl	80232dc <puts>
 802194a:	f06f 0304 	mvn.w	r3, #4
 802194e:	e006      	b.n	802195e <SEN_set_square_resolution+0x8e>
 8021950:	68fa      	ldr	r2, [r7, #12]
 8021952:	68f9      	ldr	r1, [r7, #12]
 8021954:	6878      	ldr	r0, [r7, #4]
 8021956:	f7ff ff77 	bl	8021848 <SEN_set_resolution>
 802195a:	60b8      	str	r0, [r7, #8]
 802195c:	68bb      	ldr	r3, [r7, #8]
 802195e:	4618      	mov	r0, r3
 8021960:	3710      	adds	r7, #16
 8021962:	46bd      	mov	sp, r7
 8021964:	bd80      	pop	{r7, pc}
 8021966:	bf00      	nop
 8021968:	200019c8 	.word	0x200019c8
 802196c:	08044214 	.word	0x08044214
 8021970:	08044250 	.word	0x08044250
 8021974:	080442a0 	.word	0x080442a0

08021978 <SEN_set_data>:
 8021978:	b580      	push	{r7, lr}
 802197a:	b086      	sub	sp, #24
 802197c:	af00      	add	r7, sp, #0
 802197e:	6178      	str	r0, [r7, #20]
 8021980:	6139      	str	r1, [r7, #16]
 8021982:	ed87 0a03 	vstr	s0, [r7, #12]
 8021986:	edc7 0a02 	vstr	s1, [r7, #8]
 802198a:	4613      	mov	r3, r2
 802198c:	71fb      	strb	r3, [r7, #7]
 802198e:	697b      	ldr	r3, [r7, #20]
 8021990:	2b00      	cmp	r3, #0
 8021992:	d109      	bne.n	80219a8 <SEN_set_data+0x30>
 8021994:	4b1a      	ldr	r3, [pc, #104]	@ (8021a00 <SEN_set_data+0x88>)
 8021996:	681b      	ldr	r3, [r3, #0]
 8021998:	2b00      	cmp	r3, #0
 802199a:	dd02      	ble.n	80219a2 <SEN_set_data+0x2a>
 802199c:	4819      	ldr	r0, [pc, #100]	@ (8021a04 <SEN_set_data+0x8c>)
 802199e:	f001 fc9d 	bl	80232dc <puts>
 80219a2:	f06f 0301 	mvn.w	r3, #1
 80219a6:	e027      	b.n	80219f8 <SEN_set_data+0x80>
 80219a8:	693b      	ldr	r3, [r7, #16]
 80219aa:	2b00      	cmp	r3, #0
 80219ac:	db04      	blt.n	80219b8 <SEN_set_data+0x40>
 80219ae:	697b      	ldr	r3, [r7, #20]
 80219b0:	689b      	ldr	r3, [r3, #8]
 80219b2:	693a      	ldr	r2, [r7, #16]
 80219b4:	429a      	cmp	r2, r3
 80219b6:	db09      	blt.n	80219cc <SEN_set_data+0x54>
 80219b8:	4b11      	ldr	r3, [pc, #68]	@ (8021a00 <SEN_set_data+0x88>)
 80219ba:	681b      	ldr	r3, [r3, #0]
 80219bc:	2b00      	cmp	r3, #0
 80219be:	dd02      	ble.n	80219c6 <SEN_set_data+0x4e>
 80219c0:	4811      	ldr	r0, [pc, #68]	@ (8021a08 <SEN_set_data+0x90>)
 80219c2:	f001 fc8b 	bl	80232dc <puts>
 80219c6:	f06f 0302 	mvn.w	r3, #2
 80219ca:	e015      	b.n	80219f8 <SEN_set_data+0x80>
 80219cc:	697a      	ldr	r2, [r7, #20]
 80219ce:	693b      	ldr	r3, [r7, #16]
 80219d0:	3308      	adds	r3, #8
 80219d2:	009b      	lsls	r3, r3, #2
 80219d4:	4413      	add	r3, r2
 80219d6:	68fa      	ldr	r2, [r7, #12]
 80219d8:	601a      	str	r2, [r3, #0]
 80219da:	697a      	ldr	r2, [r7, #20]
 80219dc:	693b      	ldr	r3, [r7, #16]
 80219de:	3348      	adds	r3, #72	@ 0x48
 80219e0:	009b      	lsls	r3, r3, #2
 80219e2:	4413      	add	r3, r2
 80219e4:	68ba      	ldr	r2, [r7, #8]
 80219e6:	601a      	str	r2, [r3, #0]
 80219e8:	697a      	ldr	r2, [r7, #20]
 80219ea:	693b      	ldr	r3, [r7, #16]
 80219ec:	4413      	add	r3, r2
 80219ee:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 80219f2:	79fa      	ldrb	r2, [r7, #7]
 80219f4:	701a      	strb	r2, [r3, #0]
 80219f6:	2300      	movs	r3, #0
 80219f8:	4618      	mov	r0, r3
 80219fa:	3718      	adds	r7, #24
 80219fc:	46bd      	mov	sp, r7
 80219fe:	bd80      	pop	{r7, pc}
 8021a00:	200019c8 	.word	0x200019c8
 8021a04:	080442f0 	.word	0x080442f0
 8021a08:	08044320 	.word	0x08044320

08021a0c <SEN_idx_to_col_row>:
 8021a0c:	b580      	push	{r7, lr}
 8021a0e:	b088      	sub	sp, #32
 8021a10:	af00      	add	r7, sp, #0
 8021a12:	60f8      	str	r0, [r7, #12]
 8021a14:	60b9      	str	r1, [r7, #8]
 8021a16:	607a      	str	r2, [r7, #4]
 8021a18:	603b      	str	r3, [r7, #0]
 8021a1a:	683b      	ldr	r3, [r7, #0]
 8021a1c:	2b00      	cmp	r3, #0
 8021a1e:	d109      	bne.n	8021a34 <SEN_idx_to_col_row+0x28>
 8021a20:	4b52      	ldr	r3, [pc, #328]	@ (8021b6c <SEN_idx_to_col_row+0x160>)
 8021a22:	681b      	ldr	r3, [r3, #0]
 8021a24:	2b00      	cmp	r3, #0
 8021a26:	dd02      	ble.n	8021a2e <SEN_idx_to_col_row+0x22>
 8021a28:	4851      	ldr	r0, [pc, #324]	@ (8021b70 <SEN_idx_to_col_row+0x164>)
 8021a2a:	f001 fc57 	bl	80232dc <puts>
 8021a2e:	f06f 0301 	mvn.w	r3, #1
 8021a32:	e097      	b.n	8021b64 <SEN_idx_to_col_row+0x158>
 8021a34:	687b      	ldr	r3, [r7, #4]
 8021a36:	2b00      	cmp	r3, #0
 8021a38:	db04      	blt.n	8021a44 <SEN_idx_to_col_row+0x38>
 8021a3a:	683b      	ldr	r3, [r7, #0]
 8021a3c:	689b      	ldr	r3, [r3, #8]
 8021a3e:	687a      	ldr	r2, [r7, #4]
 8021a40:	429a      	cmp	r2, r3
 8021a42:	db09      	blt.n	8021a58 <SEN_idx_to_col_row+0x4c>
 8021a44:	4b49      	ldr	r3, [pc, #292]	@ (8021b6c <SEN_idx_to_col_row+0x160>)
 8021a46:	681b      	ldr	r3, [r3, #0]
 8021a48:	2b00      	cmp	r3, #0
 8021a4a:	dd02      	ble.n	8021a52 <SEN_idx_to_col_row+0x46>
 8021a4c:	4849      	ldr	r0, [pc, #292]	@ (8021b74 <SEN_idx_to_col_row+0x168>)
 8021a4e:	f001 fc45 	bl	80232dc <puts>
 8021a52:	f06f 0302 	mvn.w	r3, #2
 8021a56:	e085      	b.n	8021b64 <SEN_idx_to_col_row+0x158>
 8021a58:	683b      	ldr	r3, [r7, #0]
 8021a5a:	681b      	ldr	r3, [r3, #0]
 8021a5c:	2b00      	cmp	r3, #0
 8021a5e:	dc09      	bgt.n	8021a74 <SEN_idx_to_col_row+0x68>
 8021a60:	4b42      	ldr	r3, [pc, #264]	@ (8021b6c <SEN_idx_to_col_row+0x160>)
 8021a62:	681b      	ldr	r3, [r3, #0]
 8021a64:	2b00      	cmp	r3, #0
 8021a66:	dd02      	ble.n	8021a6e <SEN_idx_to_col_row+0x62>
 8021a68:	4843      	ldr	r0, [pc, #268]	@ (8021b78 <SEN_idx_to_col_row+0x16c>)
 8021a6a:	f001 fc37 	bl	80232dc <puts>
 8021a6e:	f06f 0303 	mvn.w	r3, #3
 8021a72:	e077      	b.n	8021b64 <SEN_idx_to_col_row+0x158>
 8021a74:	683b      	ldr	r3, [r7, #0]
 8021a76:	681a      	ldr	r2, [r3, #0]
 8021a78:	687b      	ldr	r3, [r7, #4]
 8021a7a:	fb93 f1f2 	sdiv	r1, r3, r2
 8021a7e:	fb01 f202 	mul.w	r2, r1, r2
 8021a82:	1a9b      	subs	r3, r3, r2
 8021a84:	61fb      	str	r3, [r7, #28]
 8021a86:	683b      	ldr	r3, [r7, #0]
 8021a88:	681b      	ldr	r3, [r3, #0]
 8021a8a:	687a      	ldr	r2, [r7, #4]
 8021a8c:	fb92 f3f3 	sdiv	r3, r2, r3
 8021a90:	61bb      	str	r3, [r7, #24]
 8021a92:	683b      	ldr	r3, [r7, #0]
 8021a94:	7e1b      	ldrb	r3, [r3, #24]
 8021a96:	2b07      	cmp	r3, #7
 8021a98:	d859      	bhi.n	8021b4e <SEN_idx_to_col_row+0x142>
 8021a9a:	a201      	add	r2, pc, #4	@ (adr r2, 8021aa0 <SEN_idx_to_col_row+0x94>)
 8021a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021aa0:	08021b55 	.word	0x08021b55
 8021aa4:	08021ac1 	.word	0x08021ac1
 8021aa8:	08021adb 	.word	0x08021adb
 8021aac:	08021ae9 	.word	0x08021ae9
 8021ab0:	08021af7 	.word	0x08021af7
 8021ab4:	08021b0d 	.word	0x08021b0d
 8021ab8:	08021b23 	.word	0x08021b23
 8021abc:	08021b31 	.word	0x08021b31
 8021ac0:	683b      	ldr	r3, [r7, #0]
 8021ac2:	681b      	ldr	r3, [r3, #0]
 8021ac4:	1e5a      	subs	r2, r3, #1
 8021ac6:	69fb      	ldr	r3, [r7, #28]
 8021ac8:	1ad3      	subs	r3, r2, r3
 8021aca:	61fb      	str	r3, [r7, #28]
 8021acc:	683b      	ldr	r3, [r7, #0]
 8021ace:	685b      	ldr	r3, [r3, #4]
 8021ad0:	1e5a      	subs	r2, r3, #1
 8021ad2:	69bb      	ldr	r3, [r7, #24]
 8021ad4:	1ad3      	subs	r3, r2, r3
 8021ad6:	61bb      	str	r3, [r7, #24]
 8021ad8:	e03d      	b.n	8021b56 <SEN_idx_to_col_row+0x14a>
 8021ada:	683b      	ldr	r3, [r7, #0]
 8021adc:	681b      	ldr	r3, [r3, #0]
 8021ade:	1e5a      	subs	r2, r3, #1
 8021ae0:	69fb      	ldr	r3, [r7, #28]
 8021ae2:	1ad3      	subs	r3, r2, r3
 8021ae4:	61fb      	str	r3, [r7, #28]
 8021ae6:	e036      	b.n	8021b56 <SEN_idx_to_col_row+0x14a>
 8021ae8:	683b      	ldr	r3, [r7, #0]
 8021aea:	685b      	ldr	r3, [r3, #4]
 8021aec:	1e5a      	subs	r2, r3, #1
 8021aee:	69bb      	ldr	r3, [r7, #24]
 8021af0:	1ad3      	subs	r3, r2, r3
 8021af2:	61bb      	str	r3, [r7, #24]
 8021af4:	e02f      	b.n	8021b56 <SEN_idx_to_col_row+0x14a>
 8021af6:	69fb      	ldr	r3, [r7, #28]
 8021af8:	617b      	str	r3, [r7, #20]
 8021afa:	69bb      	ldr	r3, [r7, #24]
 8021afc:	61fb      	str	r3, [r7, #28]
 8021afe:	683b      	ldr	r3, [r7, #0]
 8021b00:	681b      	ldr	r3, [r3, #0]
 8021b02:	1e5a      	subs	r2, r3, #1
 8021b04:	697b      	ldr	r3, [r7, #20]
 8021b06:	1ad3      	subs	r3, r2, r3
 8021b08:	61bb      	str	r3, [r7, #24]
 8021b0a:	e024      	b.n	8021b56 <SEN_idx_to_col_row+0x14a>
 8021b0c:	69fb      	ldr	r3, [r7, #28]
 8021b0e:	617b      	str	r3, [r7, #20]
 8021b10:	683b      	ldr	r3, [r7, #0]
 8021b12:	685b      	ldr	r3, [r3, #4]
 8021b14:	1e5a      	subs	r2, r3, #1
 8021b16:	69bb      	ldr	r3, [r7, #24]
 8021b18:	1ad3      	subs	r3, r2, r3
 8021b1a:	61fb      	str	r3, [r7, #28]
 8021b1c:	697b      	ldr	r3, [r7, #20]
 8021b1e:	61bb      	str	r3, [r7, #24]
 8021b20:	e019      	b.n	8021b56 <SEN_idx_to_col_row+0x14a>
 8021b22:	69fb      	ldr	r3, [r7, #28]
 8021b24:	617b      	str	r3, [r7, #20]
 8021b26:	69bb      	ldr	r3, [r7, #24]
 8021b28:	61fb      	str	r3, [r7, #28]
 8021b2a:	697b      	ldr	r3, [r7, #20]
 8021b2c:	61bb      	str	r3, [r7, #24]
 8021b2e:	e012      	b.n	8021b56 <SEN_idx_to_col_row+0x14a>
 8021b30:	69fb      	ldr	r3, [r7, #28]
 8021b32:	617b      	str	r3, [r7, #20]
 8021b34:	683b      	ldr	r3, [r7, #0]
 8021b36:	685b      	ldr	r3, [r3, #4]
 8021b38:	1e5a      	subs	r2, r3, #1
 8021b3a:	69bb      	ldr	r3, [r7, #24]
 8021b3c:	1ad3      	subs	r3, r2, r3
 8021b3e:	61fb      	str	r3, [r7, #28]
 8021b40:	683b      	ldr	r3, [r7, #0]
 8021b42:	681b      	ldr	r3, [r3, #0]
 8021b44:	1e5a      	subs	r2, r3, #1
 8021b46:	697b      	ldr	r3, [r7, #20]
 8021b48:	1ad3      	subs	r3, r2, r3
 8021b4a:	61bb      	str	r3, [r7, #24]
 8021b4c:	e003      	b.n	8021b56 <SEN_idx_to_col_row+0x14a>
 8021b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8021b52:	e007      	b.n	8021b64 <SEN_idx_to_col_row+0x158>
 8021b54:	bf00      	nop
 8021b56:	68fb      	ldr	r3, [r7, #12]
 8021b58:	69fa      	ldr	r2, [r7, #28]
 8021b5a:	601a      	str	r2, [r3, #0]
 8021b5c:	68bb      	ldr	r3, [r7, #8]
 8021b5e:	69ba      	ldr	r2, [r7, #24]
 8021b60:	601a      	str	r2, [r3, #0]
 8021b62:	2300      	movs	r3, #0
 8021b64:	4618      	mov	r0, r3
 8021b66:	3720      	adds	r7, #32
 8021b68:	46bd      	mov	sp, r7
 8021b6a:	bd80      	pop	{r7, pc}
 8021b6c:	200019c8 	.word	0x200019c8
 8021b70:	08044354 	.word	0x08044354
 8021b74:	08044384 	.word	0x08044384
 8021b78:	080443bc 	.word	0x080443bc

08021b7c <SEN_col_row_to_idx>:
 8021b7c:	b580      	push	{r7, lr}
 8021b7e:	b086      	sub	sp, #24
 8021b80:	af00      	add	r7, sp, #0
 8021b82:	60f8      	str	r0, [r7, #12]
 8021b84:	60b9      	str	r1, [r7, #8]
 8021b86:	607a      	str	r2, [r7, #4]
 8021b88:	603b      	str	r3, [r7, #0]
 8021b8a:	683b      	ldr	r3, [r7, #0]
 8021b8c:	2b00      	cmp	r3, #0
 8021b8e:	d109      	bne.n	8021ba4 <SEN_col_row_to_idx+0x28>
 8021b90:	4b4a      	ldr	r3, [pc, #296]	@ (8021cbc <SEN_col_row_to_idx+0x140>)
 8021b92:	681b      	ldr	r3, [r3, #0]
 8021b94:	2b00      	cmp	r3, #0
 8021b96:	dd02      	ble.n	8021b9e <SEN_col_row_to_idx+0x22>
 8021b98:	4849      	ldr	r0, [pc, #292]	@ (8021cc0 <SEN_col_row_to_idx+0x144>)
 8021b9a:	f001 fb9f 	bl	80232dc <puts>
 8021b9e:	f06f 0301 	mvn.w	r3, #1
 8021ba2:	e086      	b.n	8021cb2 <SEN_col_row_to_idx+0x136>
 8021ba4:	683b      	ldr	r3, [r7, #0]
 8021ba6:	7e1b      	ldrb	r3, [r3, #24]
 8021ba8:	2b07      	cmp	r3, #7
 8021baa:	d85b      	bhi.n	8021c64 <SEN_col_row_to_idx+0xe8>
 8021bac:	a201      	add	r2, pc, #4	@ (adr r2, 8021bb4 <SEN_col_row_to_idx+0x38>)
 8021bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021bb2:	bf00      	nop
 8021bb4:	08021bd5 	.word	0x08021bd5
 8021bb8:	08021bdf 	.word	0x08021bdf
 8021bbc:	08021bf9 	.word	0x08021bf9
 8021bc0:	08021c0b 	.word	0x08021c0b
 8021bc4:	08021c1d 	.word	0x08021c1d
 8021bc8:	08021c2f 	.word	0x08021c2f
 8021bcc:	08021c41 	.word	0x08021c41
 8021bd0:	08021c4b 	.word	0x08021c4b
 8021bd4:	68bb      	ldr	r3, [r7, #8]
 8021bd6:	617b      	str	r3, [r7, #20]
 8021bd8:	687b      	ldr	r3, [r7, #4]
 8021bda:	613b      	str	r3, [r7, #16]
 8021bdc:	e045      	b.n	8021c6a <SEN_col_row_to_idx+0xee>
 8021bde:	683b      	ldr	r3, [r7, #0]
 8021be0:	681b      	ldr	r3, [r3, #0]
 8021be2:	1e5a      	subs	r2, r3, #1
 8021be4:	68bb      	ldr	r3, [r7, #8]
 8021be6:	1ad3      	subs	r3, r2, r3
 8021be8:	617b      	str	r3, [r7, #20]
 8021bea:	683b      	ldr	r3, [r7, #0]
 8021bec:	685b      	ldr	r3, [r3, #4]
 8021bee:	1e5a      	subs	r2, r3, #1
 8021bf0:	687b      	ldr	r3, [r7, #4]
 8021bf2:	1ad3      	subs	r3, r2, r3
 8021bf4:	613b      	str	r3, [r7, #16]
 8021bf6:	e038      	b.n	8021c6a <SEN_col_row_to_idx+0xee>
 8021bf8:	683b      	ldr	r3, [r7, #0]
 8021bfa:	681b      	ldr	r3, [r3, #0]
 8021bfc:	1e5a      	subs	r2, r3, #1
 8021bfe:	68bb      	ldr	r3, [r7, #8]
 8021c00:	1ad3      	subs	r3, r2, r3
 8021c02:	617b      	str	r3, [r7, #20]
 8021c04:	687b      	ldr	r3, [r7, #4]
 8021c06:	613b      	str	r3, [r7, #16]
 8021c08:	e02f      	b.n	8021c6a <SEN_col_row_to_idx+0xee>
 8021c0a:	68bb      	ldr	r3, [r7, #8]
 8021c0c:	617b      	str	r3, [r7, #20]
 8021c0e:	683b      	ldr	r3, [r7, #0]
 8021c10:	685b      	ldr	r3, [r3, #4]
 8021c12:	1e5a      	subs	r2, r3, #1
 8021c14:	687b      	ldr	r3, [r7, #4]
 8021c16:	1ad3      	subs	r3, r2, r3
 8021c18:	613b      	str	r3, [r7, #16]
 8021c1a:	e026      	b.n	8021c6a <SEN_col_row_to_idx+0xee>
 8021c1c:	683b      	ldr	r3, [r7, #0]
 8021c1e:	681b      	ldr	r3, [r3, #0]
 8021c20:	1e5a      	subs	r2, r3, #1
 8021c22:	687b      	ldr	r3, [r7, #4]
 8021c24:	1ad3      	subs	r3, r2, r3
 8021c26:	617b      	str	r3, [r7, #20]
 8021c28:	68bb      	ldr	r3, [r7, #8]
 8021c2a:	613b      	str	r3, [r7, #16]
 8021c2c:	e01d      	b.n	8021c6a <SEN_col_row_to_idx+0xee>
 8021c2e:	687b      	ldr	r3, [r7, #4]
 8021c30:	617b      	str	r3, [r7, #20]
 8021c32:	683b      	ldr	r3, [r7, #0]
 8021c34:	685b      	ldr	r3, [r3, #4]
 8021c36:	1e5a      	subs	r2, r3, #1
 8021c38:	68bb      	ldr	r3, [r7, #8]
 8021c3a:	1ad3      	subs	r3, r2, r3
 8021c3c:	613b      	str	r3, [r7, #16]
 8021c3e:	e014      	b.n	8021c6a <SEN_col_row_to_idx+0xee>
 8021c40:	687b      	ldr	r3, [r7, #4]
 8021c42:	617b      	str	r3, [r7, #20]
 8021c44:	68bb      	ldr	r3, [r7, #8]
 8021c46:	613b      	str	r3, [r7, #16]
 8021c48:	e00f      	b.n	8021c6a <SEN_col_row_to_idx+0xee>
 8021c4a:	683b      	ldr	r3, [r7, #0]
 8021c4c:	681b      	ldr	r3, [r3, #0]
 8021c4e:	1e5a      	subs	r2, r3, #1
 8021c50:	687b      	ldr	r3, [r7, #4]
 8021c52:	1ad3      	subs	r3, r2, r3
 8021c54:	617b      	str	r3, [r7, #20]
 8021c56:	683b      	ldr	r3, [r7, #0]
 8021c58:	685b      	ldr	r3, [r3, #4]
 8021c5a:	1e5a      	subs	r2, r3, #1
 8021c5c:	68bb      	ldr	r3, [r7, #8]
 8021c5e:	1ad3      	subs	r3, r2, r3
 8021c60:	613b      	str	r3, [r7, #16]
 8021c62:	e002      	b.n	8021c6a <SEN_col_row_to_idx+0xee>
 8021c64:	f04f 33ff 	mov.w	r3, #4294967295
 8021c68:	e023      	b.n	8021cb2 <SEN_col_row_to_idx+0x136>
 8021c6a:	697b      	ldr	r3, [r7, #20]
 8021c6c:	2b00      	cmp	r3, #0
 8021c6e:	db0c      	blt.n	8021c8a <SEN_col_row_to_idx+0x10e>
 8021c70:	683b      	ldr	r3, [r7, #0]
 8021c72:	681b      	ldr	r3, [r3, #0]
 8021c74:	697a      	ldr	r2, [r7, #20]
 8021c76:	429a      	cmp	r2, r3
 8021c78:	da07      	bge.n	8021c8a <SEN_col_row_to_idx+0x10e>
 8021c7a:	693b      	ldr	r3, [r7, #16]
 8021c7c:	2b00      	cmp	r3, #0
 8021c7e:	db04      	blt.n	8021c8a <SEN_col_row_to_idx+0x10e>
 8021c80:	683b      	ldr	r3, [r7, #0]
 8021c82:	685b      	ldr	r3, [r3, #4]
 8021c84:	693a      	ldr	r2, [r7, #16]
 8021c86:	429a      	cmp	r2, r3
 8021c88:	db09      	blt.n	8021c9e <SEN_col_row_to_idx+0x122>
 8021c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8021cbc <SEN_col_row_to_idx+0x140>)
 8021c8c:	681b      	ldr	r3, [r3, #0]
 8021c8e:	2b02      	cmp	r3, #2
 8021c90:	dd02      	ble.n	8021c98 <SEN_col_row_to_idx+0x11c>
 8021c92:	480c      	ldr	r0, [pc, #48]	@ (8021cc4 <SEN_col_row_to_idx+0x148>)
 8021c94:	f001 fb22 	bl	80232dc <puts>
 8021c98:	f06f 0302 	mvn.w	r3, #2
 8021c9c:	e009      	b.n	8021cb2 <SEN_col_row_to_idx+0x136>
 8021c9e:	683b      	ldr	r3, [r7, #0]
 8021ca0:	681b      	ldr	r3, [r3, #0]
 8021ca2:	693a      	ldr	r2, [r7, #16]
 8021ca4:	fb03 f202 	mul.w	r2, r3, r2
 8021ca8:	697b      	ldr	r3, [r7, #20]
 8021caa:	441a      	add	r2, r3
 8021cac:	68fb      	ldr	r3, [r7, #12]
 8021cae:	601a      	str	r2, [r3, #0]
 8021cb0:	2300      	movs	r3, #0
 8021cb2:	4618      	mov	r0, r3
 8021cb4:	3718      	adds	r7, #24
 8021cb6:	46bd      	mov	sp, r7
 8021cb8:	bd80      	pop	{r7, pc}
 8021cba:	bf00      	nop
 8021cbc:	200019c8 	.word	0x200019c8
 8021cc0:	08044400 	.word	0x08044400
 8021cc4:	08044430 	.word	0x08044430

08021cc8 <SEN_idx_to_mm>:
 8021cc8:	b580      	push	{r7, lr}
 8021cca:	b08c      	sub	sp, #48	@ 0x30
 8021ccc:	af02      	add	r7, sp, #8
 8021cce:	6178      	str	r0, [r7, #20]
 8021cd0:	6139      	str	r1, [r7, #16]
 8021cd2:	60fa      	str	r2, [r7, #12]
 8021cd4:	ed87 0a02 	vstr	s0, [r7, #8]
 8021cd8:	607b      	str	r3, [r7, #4]
 8021cda:	687b      	ldr	r3, [r7, #4]
 8021cdc:	2b00      	cmp	r3, #0
 8021cde:	d109      	bne.n	8021cf4 <SEN_idx_to_mm+0x2c>
 8021ce0:	4b1d      	ldr	r3, [pc, #116]	@ (8021d58 <SEN_idx_to_mm+0x90>)
 8021ce2:	681b      	ldr	r3, [r3, #0]
 8021ce4:	2b00      	cmp	r3, #0
 8021ce6:	dd02      	ble.n	8021cee <SEN_idx_to_mm+0x26>
 8021ce8:	481c      	ldr	r0, [pc, #112]	@ (8021d5c <SEN_idx_to_mm+0x94>)
 8021cea:	f001 faf7 	bl	80232dc <puts>
 8021cee:	f06f 0301 	mvn.w	r3, #1
 8021cf2:	e02c      	b.n	8021d4e <SEN_idx_to_mm+0x86>
 8021cf4:	68fb      	ldr	r3, [r7, #12]
 8021cf6:	2b00      	cmp	r3, #0
 8021cf8:	db04      	blt.n	8021d04 <SEN_idx_to_mm+0x3c>
 8021cfa:	687b      	ldr	r3, [r7, #4]
 8021cfc:	689b      	ldr	r3, [r3, #8]
 8021cfe:	68fa      	ldr	r2, [r7, #12]
 8021d00:	429a      	cmp	r2, r3
 8021d02:	db09      	blt.n	8021d18 <SEN_idx_to_mm+0x50>
 8021d04:	4b14      	ldr	r3, [pc, #80]	@ (8021d58 <SEN_idx_to_mm+0x90>)
 8021d06:	681b      	ldr	r3, [r3, #0]
 8021d08:	2b00      	cmp	r3, #0
 8021d0a:	dd02      	ble.n	8021d12 <SEN_idx_to_mm+0x4a>
 8021d0c:	4814      	ldr	r0, [pc, #80]	@ (8021d60 <SEN_idx_to_mm+0x98>)
 8021d0e:	f001 fae5 	bl	80232dc <puts>
 8021d12:	f06f 0302 	mvn.w	r3, #2
 8021d16:	e01a      	b.n	8021d4e <SEN_idx_to_mm+0x86>
 8021d18:	f107 011c 	add.w	r1, r7, #28
 8021d1c:	f107 0020 	add.w	r0, r7, #32
 8021d20:	687b      	ldr	r3, [r7, #4]
 8021d22:	68fa      	ldr	r2, [r7, #12]
 8021d24:	f7ff fe72 	bl	8021a0c <SEN_idx_to_col_row>
 8021d28:	6278      	str	r0, [r7, #36]	@ 0x24
 8021d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021d2c:	2b00      	cmp	r3, #0
 8021d2e:	d001      	beq.n	8021d34 <SEN_idx_to_mm+0x6c>
 8021d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021d32:	e00c      	b.n	8021d4e <SEN_idx_to_mm+0x86>
 8021d34:	6a3a      	ldr	r2, [r7, #32]
 8021d36:	69f9      	ldr	r1, [r7, #28]
 8021d38:	687b      	ldr	r3, [r7, #4]
 8021d3a:	9300      	str	r3, [sp, #0]
 8021d3c:	ed97 0a02 	vldr	s0, [r7, #8]
 8021d40:	460b      	mov	r3, r1
 8021d42:	6939      	ldr	r1, [r7, #16]
 8021d44:	6978      	ldr	r0, [r7, #20]
 8021d46:	f000 f80d 	bl	8021d64 <SEN_col_row_to_mm>
 8021d4a:	6278      	str	r0, [r7, #36]	@ 0x24
 8021d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021d4e:	4618      	mov	r0, r3
 8021d50:	3728      	adds	r7, #40	@ 0x28
 8021d52:	46bd      	mov	sp, r7
 8021d54:	bd80      	pop	{r7, pc}
 8021d56:	bf00      	nop
 8021d58:	200019c8 	.word	0x200019c8
 8021d5c:	08044468 	.word	0x08044468
 8021d60:	08044494 	.word	0x08044494

08021d64 <SEN_col_row_to_mm>:
 8021d64:	b580      	push	{r7, lr}
 8021d66:	b08e      	sub	sp, #56	@ 0x38
 8021d68:	af00      	add	r7, sp, #0
 8021d6a:	6178      	str	r0, [r7, #20]
 8021d6c:	6139      	str	r1, [r7, #16]
 8021d6e:	60fa      	str	r2, [r7, #12]
 8021d70:	60bb      	str	r3, [r7, #8]
 8021d72:	ed87 0a01 	vstr	s0, [r7, #4]
 8021d76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8021d78:	2b00      	cmp	r3, #0
 8021d7a:	d109      	bne.n	8021d90 <SEN_col_row_to_mm+0x2c>
 8021d7c:	4b33      	ldr	r3, [pc, #204]	@ (8021e4c <SEN_col_row_to_mm+0xe8>)
 8021d7e:	681b      	ldr	r3, [r3, #0]
 8021d80:	2b00      	cmp	r3, #0
 8021d82:	dd02      	ble.n	8021d8a <SEN_col_row_to_mm+0x26>
 8021d84:	4832      	ldr	r0, [pc, #200]	@ (8021e50 <SEN_col_row_to_mm+0xec>)
 8021d86:	f001 faa9 	bl	80232dc <puts>
 8021d8a:	f06f 0301 	mvn.w	r3, #1
 8021d8e:	e058      	b.n	8021e42 <SEN_col_row_to_mm+0xde>
 8021d90:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8021d94:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8021d98:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8021d9a:	ed97 0a01 	vldr	s0, [r7, #4]
 8021d9e:	4618      	mov	r0, r3
 8021da0:	f000 f956 	bl	8022050 <SEN_zone_size>
 8021da4:	6378      	str	r0, [r7, #52]	@ 0x34
 8021da6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021da8:	2b00      	cmp	r3, #0
 8021daa:	d001      	beq.n	8021db0 <SEN_col_row_to_mm+0x4c>
 8021dac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021dae:	e048      	b.n	8021e42 <SEN_col_row_to_mm+0xde>
 8021db0:	f107 011c 	add.w	r1, r7, #28
 8021db4:	f107 0320 	add.w	r3, r7, #32
 8021db8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8021dba:	4618      	mov	r0, r3
 8021dbc:	f000 f9e2 	bl	8022184 <SEN_actual_res>
 8021dc0:	6378      	str	r0, [r7, #52]	@ 0x34
 8021dc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021dc4:	2b00      	cmp	r3, #0
 8021dc6:	d001      	beq.n	8021dcc <SEN_col_row_to_mm+0x68>
 8021dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021dca:	e03a      	b.n	8021e42 <SEN_col_row_to_mm+0xde>
 8021dcc:	68fb      	ldr	r3, [r7, #12]
 8021dce:	ee07 3a90 	vmov	s15, r3
 8021dd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8021dd6:	6a3b      	ldr	r3, [r7, #32]
 8021dd8:	ee07 3a90 	vmov	s15, r3
 8021ddc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021de0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021de4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8021de8:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8021dec:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8021df0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8021df4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8021df8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021dfc:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
 8021e00:	68bb      	ldr	r3, [r7, #8]
 8021e02:	ee07 3a90 	vmov	s15, r3
 8021e06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8021e0a:	69fb      	ldr	r3, [r7, #28]
 8021e0c:	ee07 3a90 	vmov	s15, r3
 8021e10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021e14:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021e18:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8021e1c:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8021e20:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8021e24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8021e28:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8021e2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021e30:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8021e34:	697b      	ldr	r3, [r7, #20]
 8021e36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8021e38:	601a      	str	r2, [r3, #0]
 8021e3a:	693b      	ldr	r3, [r7, #16]
 8021e3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8021e3e:	601a      	str	r2, [r3, #0]
 8021e40:	2300      	movs	r3, #0
 8021e42:	4618      	mov	r0, r3
 8021e44:	3738      	adds	r7, #56	@ 0x38
 8021e46:	46bd      	mov	sp, r7
 8021e48:	bd80      	pop	{r7, pc}
 8021e4a:	bf00      	nop
 8021e4c:	200019c8 	.word	0x200019c8
 8021e50:	080444c8 	.word	0x080444c8

08021e54 <SEN_mm_to_col_row>:
 8021e54:	b580      	push	{r7, lr}
 8021e56:	b08e      	sub	sp, #56	@ 0x38
 8021e58:	af00      	add	r7, sp, #0
 8021e5a:	6178      	str	r0, [r7, #20]
 8021e5c:	6139      	str	r1, [r7, #16]
 8021e5e:	ed87 0a03 	vstr	s0, [r7, #12]
 8021e62:	edc7 0a02 	vstr	s1, [r7, #8]
 8021e66:	ed87 1a01 	vstr	s2, [r7, #4]
 8021e6a:	603a      	str	r2, [r7, #0]
 8021e6c:	683b      	ldr	r3, [r7, #0]
 8021e6e:	2b00      	cmp	r3, #0
 8021e70:	d109      	bne.n	8021e86 <SEN_mm_to_col_row+0x32>
 8021e72:	4b50      	ldr	r3, [pc, #320]	@ (8021fb4 <SEN_mm_to_col_row+0x160>)
 8021e74:	681b      	ldr	r3, [r3, #0]
 8021e76:	2b00      	cmp	r3, #0
 8021e78:	dd02      	ble.n	8021e80 <SEN_mm_to_col_row+0x2c>
 8021e7a:	484f      	ldr	r0, [pc, #316]	@ (8021fb8 <SEN_mm_to_col_row+0x164>)
 8021e7c:	f001 fa2e 	bl	80232dc <puts>
 8021e80:	f06f 0301 	mvn.w	r3, #1
 8021e84:	e092      	b.n	8021fac <SEN_mm_to_col_row+0x158>
 8021e86:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8021e8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8021e8e:	683a      	ldr	r2, [r7, #0]
 8021e90:	ed97 0a01 	vldr	s0, [r7, #4]
 8021e94:	4618      	mov	r0, r3
 8021e96:	f000 f8db 	bl	8022050 <SEN_zone_size>
 8021e9a:	6378      	str	r0, [r7, #52]	@ 0x34
 8021e9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021e9e:	2b00      	cmp	r3, #0
 8021ea0:	d001      	beq.n	8021ea6 <SEN_mm_to_col_row+0x52>
 8021ea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021ea4:	e082      	b.n	8021fac <SEN_mm_to_col_row+0x158>
 8021ea6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8021eaa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021eb2:	d906      	bls.n	8021ec2 <SEN_mm_to_col_row+0x6e>
 8021eb4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8021eb8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021ec0:	d809      	bhi.n	8021ed6 <SEN_mm_to_col_row+0x82>
 8021ec2:	4b3c      	ldr	r3, [pc, #240]	@ (8021fb4 <SEN_mm_to_col_row+0x160>)
 8021ec4:	681b      	ldr	r3, [r3, #0]
 8021ec6:	2b01      	cmp	r3, #1
 8021ec8:	dd02      	ble.n	8021ed0 <SEN_mm_to_col_row+0x7c>
 8021eca:	483c      	ldr	r0, [pc, #240]	@ (8021fbc <SEN_mm_to_col_row+0x168>)
 8021ecc:	f001 fa06 	bl	80232dc <puts>
 8021ed0:	f06f 0302 	mvn.w	r3, #2
 8021ed4:	e06a      	b.n	8021fac <SEN_mm_to_col_row+0x158>
 8021ed6:	f107 011c 	add.w	r1, r7, #28
 8021eda:	f107 0320 	add.w	r3, r7, #32
 8021ede:	683a      	ldr	r2, [r7, #0]
 8021ee0:	4618      	mov	r0, r3
 8021ee2:	f000 f94f 	bl	8022184 <SEN_actual_res>
 8021ee6:	6378      	str	r0, [r7, #52]	@ 0x34
 8021ee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021eea:	2b00      	cmp	r3, #0
 8021eec:	d001      	beq.n	8021ef2 <SEN_mm_to_col_row+0x9e>
 8021eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021ef0:	e05c      	b.n	8021fac <SEN_mm_to_col_row+0x158>
 8021ef2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8021ef6:	edd7 6a03 	vldr	s13, [r7, #12]
 8021efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021efe:	6a3b      	ldr	r3, [r7, #32]
 8021f00:	ee07 3a90 	vmov	s15, r3
 8021f04:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8021f08:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8021f0c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8021f10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021f14:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
 8021f18:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8021f1c:	edd7 6a02 	vldr	s13, [r7, #8]
 8021f20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021f24:	69fb      	ldr	r3, [r7, #28]
 8021f26:	ee07 3a90 	vmov	s15, r3
 8021f2a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8021f2e:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8021f32:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8021f36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021f3a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8021f3e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8021f42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021f4a:	d41e      	bmi.n	8021f8a <SEN_mm_to_col_row+0x136>
 8021f4c:	6a3b      	ldr	r3, [r7, #32]
 8021f4e:	ee07 3a90 	vmov	s15, r3
 8021f52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021f56:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8021f5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8021f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021f62:	da12      	bge.n	8021f8a <SEN_mm_to_col_row+0x136>
 8021f64:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8021f68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021f70:	d40b      	bmi.n	8021f8a <SEN_mm_to_col_row+0x136>
 8021f72:	69fb      	ldr	r3, [r7, #28]
 8021f74:	ee07 3a90 	vmov	s15, r3
 8021f78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021f7c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8021f80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8021f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021f88:	db09      	blt.n	8021f9e <SEN_mm_to_col_row+0x14a>
 8021f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8021fb4 <SEN_mm_to_col_row+0x160>)
 8021f8c:	681b      	ldr	r3, [r3, #0]
 8021f8e:	2b00      	cmp	r3, #0
 8021f90:	dd02      	ble.n	8021f98 <SEN_mm_to_col_row+0x144>
 8021f92:	480b      	ldr	r0, [pc, #44]	@ (8021fc0 <SEN_mm_to_col_row+0x16c>)
 8021f94:	f001 f9a2 	bl	80232dc <puts>
 8021f98:	f06f 0302 	mvn.w	r3, #2
 8021f9c:	e006      	b.n	8021fac <SEN_mm_to_col_row+0x158>
 8021f9e:	697b      	ldr	r3, [r7, #20]
 8021fa0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8021fa2:	601a      	str	r2, [r3, #0]
 8021fa4:	693b      	ldr	r3, [r7, #16]
 8021fa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8021fa8:	601a      	str	r2, [r3, #0]
 8021faa:	2300      	movs	r3, #0
 8021fac:	4618      	mov	r0, r3
 8021fae:	3738      	adds	r7, #56	@ 0x38
 8021fb0:	46bd      	mov	sp, r7
 8021fb2:	bd80      	pop	{r7, pc}
 8021fb4:	200019c8 	.word	0x200019c8
 8021fb8:	080444f8 	.word	0x080444f8
 8021fbc:	08044528 	.word	0x08044528
 8021fc0:	08044560 	.word	0x08044560

08021fc4 <SEN_mm_to_idx>:
 8021fc4:	b580      	push	{r7, lr}
 8021fc6:	b08a      	sub	sp, #40	@ 0x28
 8021fc8:	af00      	add	r7, sp, #0
 8021fca:	6178      	str	r0, [r7, #20]
 8021fcc:	ed87 0a04 	vstr	s0, [r7, #16]
 8021fd0:	edc7 0a03 	vstr	s1, [r7, #12]
 8021fd4:	ed87 1a02 	vstr	s2, [r7, #8]
 8021fd8:	6079      	str	r1, [r7, #4]
 8021fda:	687b      	ldr	r3, [r7, #4]
 8021fdc:	2b00      	cmp	r3, #0
 8021fde:	d109      	bne.n	8021ff4 <SEN_mm_to_idx+0x30>
 8021fe0:	4b19      	ldr	r3, [pc, #100]	@ (8022048 <SEN_mm_to_idx+0x84>)
 8021fe2:	681b      	ldr	r3, [r3, #0]
 8021fe4:	2b00      	cmp	r3, #0
 8021fe6:	dd02      	ble.n	8021fee <SEN_mm_to_idx+0x2a>
 8021fe8:	4818      	ldr	r0, [pc, #96]	@ (802204c <SEN_mm_to_idx+0x88>)
 8021fea:	f001 f977 	bl	80232dc <puts>
 8021fee:	f06f 0301 	mvn.w	r3, #1
 8021ff2:	e025      	b.n	8022040 <SEN_mm_to_idx+0x7c>
 8021ff4:	f107 011c 	add.w	r1, r7, #28
 8021ff8:	f107 0320 	add.w	r3, r7, #32
 8021ffc:	687a      	ldr	r2, [r7, #4]
 8021ffe:	ed97 1a02 	vldr	s2, [r7, #8]
 8022002:	edd7 0a03 	vldr	s1, [r7, #12]
 8022006:	ed97 0a04 	vldr	s0, [r7, #16]
 802200a:	4618      	mov	r0, r3
 802200c:	f7ff ff22 	bl	8021e54 <SEN_mm_to_col_row>
 8022010:	6278      	str	r0, [r7, #36]	@ 0x24
 8022012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022014:	2b00      	cmp	r3, #0
 8022016:	d001      	beq.n	802201c <SEN_mm_to_idx+0x58>
 8022018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802201a:	e011      	b.n	8022040 <SEN_mm_to_idx+0x7c>
 802201c:	edd7 7a08 	vldr	s15, [r7, #32]
 8022020:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8022024:	edd7 7a07 	vldr	s15, [r7, #28]
 8022028:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802202c:	687b      	ldr	r3, [r7, #4]
 802202e:	ee17 2a90 	vmov	r2, s15
 8022032:	ee17 1a10 	vmov	r1, s14
 8022036:	6978      	ldr	r0, [r7, #20]
 8022038:	f7ff fda0 	bl	8021b7c <SEN_col_row_to_idx>
 802203c:	6278      	str	r0, [r7, #36]	@ 0x24
 802203e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022040:	4618      	mov	r0, r3
 8022042:	3728      	adds	r7, #40	@ 0x28
 8022044:	46bd      	mov	sp, r7
 8022046:	bd80      	pop	{r7, pc}
 8022048:	200019c8 	.word	0x200019c8
 802204c:	08044598 	.word	0x08044598

08022050 <SEN_zone_size>:
 8022050:	b580      	push	{r7, lr}
 8022052:	ed2d 8b02 	vpush	{d8}
 8022056:	b086      	sub	sp, #24
 8022058:	af00      	add	r7, sp, #0
 802205a:	60f8      	str	r0, [r7, #12]
 802205c:	60b9      	str	r1, [r7, #8]
 802205e:	ed87 0a01 	vstr	s0, [r7, #4]
 8022062:	603a      	str	r2, [r7, #0]
 8022064:	683b      	ldr	r3, [r7, #0]
 8022066:	2b00      	cmp	r3, #0
 8022068:	d109      	bne.n	802207e <SEN_zone_size+0x2e>
 802206a:	4b43      	ldr	r3, [pc, #268]	@ (8022178 <SEN_zone_size+0x128>)
 802206c:	681b      	ldr	r3, [r3, #0]
 802206e:	2b00      	cmp	r3, #0
 8022070:	dd02      	ble.n	8022078 <SEN_zone_size+0x28>
 8022072:	4842      	ldr	r0, [pc, #264]	@ (802217c <SEN_zone_size+0x12c>)
 8022074:	f001 f932 	bl	80232dc <puts>
 8022078:	f06f 0301 	mvn.w	r3, #1
 802207c:	e075      	b.n	802216a <SEN_zone_size+0x11a>
 802207e:	683b      	ldr	r3, [r7, #0]
 8022080:	681b      	ldr	r3, [r3, #0]
 8022082:	2b00      	cmp	r3, #0
 8022084:	dd03      	ble.n	802208e <SEN_zone_size+0x3e>
 8022086:	683b      	ldr	r3, [r7, #0]
 8022088:	685b      	ldr	r3, [r3, #4]
 802208a:	2b00      	cmp	r3, #0
 802208c:	dc09      	bgt.n	80220a2 <SEN_zone_size+0x52>
 802208e:	4b3a      	ldr	r3, [pc, #232]	@ (8022178 <SEN_zone_size+0x128>)
 8022090:	681b      	ldr	r3, [r3, #0]
 8022092:	2b00      	cmp	r3, #0
 8022094:	dd02      	ble.n	802209c <SEN_zone_size+0x4c>
 8022096:	483a      	ldr	r0, [pc, #232]	@ (8022180 <SEN_zone_size+0x130>)
 8022098:	f001 f920 	bl	80232dc <puts>
 802209c:	f06f 0303 	mvn.w	r3, #3
 80220a0:	e063      	b.n	802216a <SEN_zone_size+0x11a>
 80220a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80220a6:	ee37 8aa7 	vadd.f32	s16, s15, s15
 80220aa:	683b      	ldr	r3, [r7, #0]
 80220ac:	edd3 7a04 	vldr	s15, [r3, #16]
 80220b0:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80220b4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80220b8:	ee16 0a90 	vmov	r0, s13
 80220bc:	f7f7 fd44 	bl	8019b48 <__aeabi_f2d>
 80220c0:	4602      	mov	r2, r0
 80220c2:	460b      	mov	r3, r1
 80220c4:	ec43 2b10 	vmov	d0, r2, r3
 80220c8:	f004 fd4e 	bl	8026b68 <tan>
 80220cc:	ec53 2b10 	vmov	r2, r3, d0
 80220d0:	4610      	mov	r0, r2
 80220d2:	4619      	mov	r1, r3
 80220d4:	f7f8 f888 	bl	801a1e8 <__aeabi_d2f>
 80220d8:	ee07 0a90 	vmov	s15, r0
 80220dc:	ee68 6a27 	vmul.f32	s13, s16, s15
 80220e0:	683b      	ldr	r3, [r7, #0]
 80220e2:	681b      	ldr	r3, [r3, #0]
 80220e4:	ee07 3a90 	vmov	s15, r3
 80220e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80220ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80220f0:	edc7 7a05 	vstr	s15, [r7, #20]
 80220f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80220f8:	ee37 8aa7 	vadd.f32	s16, s15, s15
 80220fc:	683b      	ldr	r3, [r7, #0]
 80220fe:	edd3 7a05 	vldr	s15, [r3, #20]
 8022102:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8022106:	eec7 6a87 	vdiv.f32	s13, s15, s14
 802210a:	ee16 0a90 	vmov	r0, s13
 802210e:	f7f7 fd1b 	bl	8019b48 <__aeabi_f2d>
 8022112:	4602      	mov	r2, r0
 8022114:	460b      	mov	r3, r1
 8022116:	ec43 2b10 	vmov	d0, r2, r3
 802211a:	f004 fd25 	bl	8026b68 <tan>
 802211e:	ec53 2b10 	vmov	r2, r3, d0
 8022122:	4610      	mov	r0, r2
 8022124:	4619      	mov	r1, r3
 8022126:	f7f8 f85f 	bl	801a1e8 <__aeabi_d2f>
 802212a:	ee07 0a90 	vmov	s15, r0
 802212e:	ee68 6a27 	vmul.f32	s13, s16, s15
 8022132:	683b      	ldr	r3, [r7, #0]
 8022134:	685b      	ldr	r3, [r3, #4]
 8022136:	ee07 3a90 	vmov	s15, r3
 802213a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802213e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8022142:	edc7 7a04 	vstr	s15, [r7, #16]
 8022146:	683b      	ldr	r3, [r7, #0]
 8022148:	7e1b      	ldrb	r3, [r3, #24]
 802214a:	2b03      	cmp	r3, #3
 802214c:	d806      	bhi.n	802215c <SEN_zone_size+0x10c>
 802214e:	68fb      	ldr	r3, [r7, #12]
 8022150:	697a      	ldr	r2, [r7, #20]
 8022152:	601a      	str	r2, [r3, #0]
 8022154:	68bb      	ldr	r3, [r7, #8]
 8022156:	693a      	ldr	r2, [r7, #16]
 8022158:	601a      	str	r2, [r3, #0]
 802215a:	e005      	b.n	8022168 <SEN_zone_size+0x118>
 802215c:	68fb      	ldr	r3, [r7, #12]
 802215e:	693a      	ldr	r2, [r7, #16]
 8022160:	601a      	str	r2, [r3, #0]
 8022162:	68bb      	ldr	r3, [r7, #8]
 8022164:	697a      	ldr	r2, [r7, #20]
 8022166:	601a      	str	r2, [r3, #0]
 8022168:	2300      	movs	r3, #0
 802216a:	4618      	mov	r0, r3
 802216c:	3718      	adds	r7, #24
 802216e:	46bd      	mov	sp, r7
 8022170:	ecbd 8b02 	vpop	{d8}
 8022174:	bd80      	pop	{r7, pc}
 8022176:	bf00      	nop
 8022178:	200019c8 	.word	0x200019c8
 802217c:	080445c4 	.word	0x080445c4
 8022180:	080445f4 	.word	0x080445f4

08022184 <SEN_actual_res>:
 8022184:	b580      	push	{r7, lr}
 8022186:	b084      	sub	sp, #16
 8022188:	af00      	add	r7, sp, #0
 802218a:	60f8      	str	r0, [r7, #12]
 802218c:	60b9      	str	r1, [r7, #8]
 802218e:	607a      	str	r2, [r7, #4]
 8022190:	687b      	ldr	r3, [r7, #4]
 8022192:	2b00      	cmp	r3, #0
 8022194:	d109      	bne.n	80221aa <SEN_actual_res+0x26>
 8022196:	4b12      	ldr	r3, [pc, #72]	@ (80221e0 <SEN_actual_res+0x5c>)
 8022198:	681b      	ldr	r3, [r3, #0]
 802219a:	2b00      	cmp	r3, #0
 802219c:	dd02      	ble.n	80221a4 <SEN_actual_res+0x20>
 802219e:	4811      	ldr	r0, [pc, #68]	@ (80221e4 <SEN_actual_res+0x60>)
 80221a0:	f001 f89c 	bl	80232dc <puts>
 80221a4:	f06f 0301 	mvn.w	r3, #1
 80221a8:	e015      	b.n	80221d6 <SEN_actual_res+0x52>
 80221aa:	687b      	ldr	r3, [r7, #4]
 80221ac:	7e1b      	ldrb	r3, [r3, #24]
 80221ae:	2b03      	cmp	r3, #3
 80221b0:	d808      	bhi.n	80221c4 <SEN_actual_res+0x40>
 80221b2:	687b      	ldr	r3, [r7, #4]
 80221b4:	681a      	ldr	r2, [r3, #0]
 80221b6:	68fb      	ldr	r3, [r7, #12]
 80221b8:	601a      	str	r2, [r3, #0]
 80221ba:	687b      	ldr	r3, [r7, #4]
 80221bc:	685a      	ldr	r2, [r3, #4]
 80221be:	68bb      	ldr	r3, [r7, #8]
 80221c0:	601a      	str	r2, [r3, #0]
 80221c2:	e007      	b.n	80221d4 <SEN_actual_res+0x50>
 80221c4:	687b      	ldr	r3, [r7, #4]
 80221c6:	685a      	ldr	r2, [r3, #4]
 80221c8:	68fb      	ldr	r3, [r7, #12]
 80221ca:	601a      	str	r2, [r3, #0]
 80221cc:	687b      	ldr	r3, [r7, #4]
 80221ce:	681a      	ldr	r2, [r3, #0]
 80221d0:	68bb      	ldr	r3, [r7, #8]
 80221d2:	601a      	str	r2, [r3, #0]
 80221d4:	2300      	movs	r3, #0
 80221d6:	4618      	mov	r0, r3
 80221d8:	3710      	adds	r7, #16
 80221da:	46bd      	mov	sp, r7
 80221dc:	bd80      	pop	{r7, pc}
 80221de:	bf00      	nop
 80221e0:	200019c8 	.word	0x200019c8
 80221e4:	08044634 	.word	0x08044634

080221e8 <malloc>:
 80221e8:	4b02      	ldr	r3, [pc, #8]	@ (80221f4 <malloc+0xc>)
 80221ea:	4601      	mov	r1, r0
 80221ec:	6818      	ldr	r0, [r3, #0]
 80221ee:	f000 b825 	b.w	802223c <_malloc_r>
 80221f2:	bf00      	nop
 80221f4:	200007cc 	.word	0x200007cc

080221f8 <sbrk_aligned>:
 80221f8:	b570      	push	{r4, r5, r6, lr}
 80221fa:	4e0f      	ldr	r6, [pc, #60]	@ (8022238 <sbrk_aligned+0x40>)
 80221fc:	460c      	mov	r4, r1
 80221fe:	6831      	ldr	r1, [r6, #0]
 8022200:	4605      	mov	r5, r0
 8022202:	b911      	cbnz	r1, 802220a <sbrk_aligned+0x12>
 8022204:	f001 f9bc 	bl	8023580 <_sbrk_r>
 8022208:	6030      	str	r0, [r6, #0]
 802220a:	4621      	mov	r1, r4
 802220c:	4628      	mov	r0, r5
 802220e:	f001 f9b7 	bl	8023580 <_sbrk_r>
 8022212:	1c43      	adds	r3, r0, #1
 8022214:	d103      	bne.n	802221e <sbrk_aligned+0x26>
 8022216:	f04f 34ff 	mov.w	r4, #4294967295
 802221a:	4620      	mov	r0, r4
 802221c:	bd70      	pop	{r4, r5, r6, pc}
 802221e:	1cc4      	adds	r4, r0, #3
 8022220:	f024 0403 	bic.w	r4, r4, #3
 8022224:	42a0      	cmp	r0, r4
 8022226:	d0f8      	beq.n	802221a <sbrk_aligned+0x22>
 8022228:	1a21      	subs	r1, r4, r0
 802222a:	4628      	mov	r0, r5
 802222c:	f001 f9a8 	bl	8023580 <_sbrk_r>
 8022230:	3001      	adds	r0, #1
 8022232:	d1f2      	bne.n	802221a <sbrk_aligned+0x22>
 8022234:	e7ef      	b.n	8022216 <sbrk_aligned+0x1e>
 8022236:	bf00      	nop
 8022238:	20009d3c 	.word	0x20009d3c

0802223c <_malloc_r>:
 802223c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022240:	1ccd      	adds	r5, r1, #3
 8022242:	f025 0503 	bic.w	r5, r5, #3
 8022246:	3508      	adds	r5, #8
 8022248:	2d0c      	cmp	r5, #12
 802224a:	bf38      	it	cc
 802224c:	250c      	movcc	r5, #12
 802224e:	2d00      	cmp	r5, #0
 8022250:	4606      	mov	r6, r0
 8022252:	db01      	blt.n	8022258 <_malloc_r+0x1c>
 8022254:	42a9      	cmp	r1, r5
 8022256:	d904      	bls.n	8022262 <_malloc_r+0x26>
 8022258:	230c      	movs	r3, #12
 802225a:	6033      	str	r3, [r6, #0]
 802225c:	2000      	movs	r0, #0
 802225e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022262:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8022338 <_malloc_r+0xfc>
 8022266:	f000 f869 	bl	802233c <__malloc_lock>
 802226a:	f8d8 3000 	ldr.w	r3, [r8]
 802226e:	461c      	mov	r4, r3
 8022270:	bb44      	cbnz	r4, 80222c4 <_malloc_r+0x88>
 8022272:	4629      	mov	r1, r5
 8022274:	4630      	mov	r0, r6
 8022276:	f7ff ffbf 	bl	80221f8 <sbrk_aligned>
 802227a:	1c43      	adds	r3, r0, #1
 802227c:	4604      	mov	r4, r0
 802227e:	d158      	bne.n	8022332 <_malloc_r+0xf6>
 8022280:	f8d8 4000 	ldr.w	r4, [r8]
 8022284:	4627      	mov	r7, r4
 8022286:	2f00      	cmp	r7, #0
 8022288:	d143      	bne.n	8022312 <_malloc_r+0xd6>
 802228a:	2c00      	cmp	r4, #0
 802228c:	d04b      	beq.n	8022326 <_malloc_r+0xea>
 802228e:	6823      	ldr	r3, [r4, #0]
 8022290:	4639      	mov	r1, r7
 8022292:	4630      	mov	r0, r6
 8022294:	eb04 0903 	add.w	r9, r4, r3
 8022298:	f001 f972 	bl	8023580 <_sbrk_r>
 802229c:	4581      	cmp	r9, r0
 802229e:	d142      	bne.n	8022326 <_malloc_r+0xea>
 80222a0:	6821      	ldr	r1, [r4, #0]
 80222a2:	1a6d      	subs	r5, r5, r1
 80222a4:	4629      	mov	r1, r5
 80222a6:	4630      	mov	r0, r6
 80222a8:	f7ff ffa6 	bl	80221f8 <sbrk_aligned>
 80222ac:	3001      	adds	r0, #1
 80222ae:	d03a      	beq.n	8022326 <_malloc_r+0xea>
 80222b0:	6823      	ldr	r3, [r4, #0]
 80222b2:	442b      	add	r3, r5
 80222b4:	6023      	str	r3, [r4, #0]
 80222b6:	f8d8 3000 	ldr.w	r3, [r8]
 80222ba:	685a      	ldr	r2, [r3, #4]
 80222bc:	bb62      	cbnz	r2, 8022318 <_malloc_r+0xdc>
 80222be:	f8c8 7000 	str.w	r7, [r8]
 80222c2:	e00f      	b.n	80222e4 <_malloc_r+0xa8>
 80222c4:	6822      	ldr	r2, [r4, #0]
 80222c6:	1b52      	subs	r2, r2, r5
 80222c8:	d420      	bmi.n	802230c <_malloc_r+0xd0>
 80222ca:	2a0b      	cmp	r2, #11
 80222cc:	d917      	bls.n	80222fe <_malloc_r+0xc2>
 80222ce:	1961      	adds	r1, r4, r5
 80222d0:	42a3      	cmp	r3, r4
 80222d2:	6025      	str	r5, [r4, #0]
 80222d4:	bf18      	it	ne
 80222d6:	6059      	strne	r1, [r3, #4]
 80222d8:	6863      	ldr	r3, [r4, #4]
 80222da:	bf08      	it	eq
 80222dc:	f8c8 1000 	streq.w	r1, [r8]
 80222e0:	5162      	str	r2, [r4, r5]
 80222e2:	604b      	str	r3, [r1, #4]
 80222e4:	4630      	mov	r0, r6
 80222e6:	f000 f82f 	bl	8022348 <__malloc_unlock>
 80222ea:	f104 000b 	add.w	r0, r4, #11
 80222ee:	1d23      	adds	r3, r4, #4
 80222f0:	f020 0007 	bic.w	r0, r0, #7
 80222f4:	1ac2      	subs	r2, r0, r3
 80222f6:	bf1c      	itt	ne
 80222f8:	1a1b      	subne	r3, r3, r0
 80222fa:	50a3      	strne	r3, [r4, r2]
 80222fc:	e7af      	b.n	802225e <_malloc_r+0x22>
 80222fe:	6862      	ldr	r2, [r4, #4]
 8022300:	42a3      	cmp	r3, r4
 8022302:	bf0c      	ite	eq
 8022304:	f8c8 2000 	streq.w	r2, [r8]
 8022308:	605a      	strne	r2, [r3, #4]
 802230a:	e7eb      	b.n	80222e4 <_malloc_r+0xa8>
 802230c:	4623      	mov	r3, r4
 802230e:	6864      	ldr	r4, [r4, #4]
 8022310:	e7ae      	b.n	8022270 <_malloc_r+0x34>
 8022312:	463c      	mov	r4, r7
 8022314:	687f      	ldr	r7, [r7, #4]
 8022316:	e7b6      	b.n	8022286 <_malloc_r+0x4a>
 8022318:	461a      	mov	r2, r3
 802231a:	685b      	ldr	r3, [r3, #4]
 802231c:	42a3      	cmp	r3, r4
 802231e:	d1fb      	bne.n	8022318 <_malloc_r+0xdc>
 8022320:	2300      	movs	r3, #0
 8022322:	6053      	str	r3, [r2, #4]
 8022324:	e7de      	b.n	80222e4 <_malloc_r+0xa8>
 8022326:	230c      	movs	r3, #12
 8022328:	6033      	str	r3, [r6, #0]
 802232a:	4630      	mov	r0, r6
 802232c:	f000 f80c 	bl	8022348 <__malloc_unlock>
 8022330:	e794      	b.n	802225c <_malloc_r+0x20>
 8022332:	6005      	str	r5, [r0, #0]
 8022334:	e7d6      	b.n	80222e4 <_malloc_r+0xa8>
 8022336:	bf00      	nop
 8022338:	20009d40 	.word	0x20009d40

0802233c <__malloc_lock>:
 802233c:	4801      	ldr	r0, [pc, #4]	@ (8022344 <__malloc_lock+0x8>)
 802233e:	f001 b96c 	b.w	802361a <__retarget_lock_acquire_recursive>
 8022342:	bf00      	nop
 8022344:	20009e84 	.word	0x20009e84

08022348 <__malloc_unlock>:
 8022348:	4801      	ldr	r0, [pc, #4]	@ (8022350 <__malloc_unlock+0x8>)
 802234a:	f001 b967 	b.w	802361c <__retarget_lock_release_recursive>
 802234e:	bf00      	nop
 8022350:	20009e84 	.word	0x20009e84

08022354 <_realloc_r>:
 8022354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022358:	4680      	mov	r8, r0
 802235a:	4615      	mov	r5, r2
 802235c:	460c      	mov	r4, r1
 802235e:	b921      	cbnz	r1, 802236a <_realloc_r+0x16>
 8022360:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022364:	4611      	mov	r1, r2
 8022366:	f7ff bf69 	b.w	802223c <_malloc_r>
 802236a:	b92a      	cbnz	r2, 8022378 <_realloc_r+0x24>
 802236c:	f001 ffb8 	bl	80242e0 <_free_r>
 8022370:	2400      	movs	r4, #0
 8022372:	4620      	mov	r0, r4
 8022374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022378:	f002 fcae 	bl	8024cd8 <_malloc_usable_size_r>
 802237c:	4285      	cmp	r5, r0
 802237e:	4606      	mov	r6, r0
 8022380:	d802      	bhi.n	8022388 <_realloc_r+0x34>
 8022382:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8022386:	d8f4      	bhi.n	8022372 <_realloc_r+0x1e>
 8022388:	4629      	mov	r1, r5
 802238a:	4640      	mov	r0, r8
 802238c:	f7ff ff56 	bl	802223c <_malloc_r>
 8022390:	4607      	mov	r7, r0
 8022392:	2800      	cmp	r0, #0
 8022394:	d0ec      	beq.n	8022370 <_realloc_r+0x1c>
 8022396:	42b5      	cmp	r5, r6
 8022398:	462a      	mov	r2, r5
 802239a:	4621      	mov	r1, r4
 802239c:	bf28      	it	cs
 802239e:	4632      	movcs	r2, r6
 80223a0:	f001 f93d 	bl	802361e <memcpy>
 80223a4:	4621      	mov	r1, r4
 80223a6:	4640      	mov	r0, r8
 80223a8:	f001 ff9a 	bl	80242e0 <_free_r>
 80223ac:	463c      	mov	r4, r7
 80223ae:	e7e0      	b.n	8022372 <_realloc_r+0x1e>

080223b0 <__cvt>:
 80223b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80223b4:	ec57 6b10 	vmov	r6, r7, d0
 80223b8:	2f00      	cmp	r7, #0
 80223ba:	460c      	mov	r4, r1
 80223bc:	4619      	mov	r1, r3
 80223be:	463b      	mov	r3, r7
 80223c0:	bfbb      	ittet	lt
 80223c2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80223c6:	461f      	movlt	r7, r3
 80223c8:	2300      	movge	r3, #0
 80223ca:	232d      	movlt	r3, #45	@ 0x2d
 80223cc:	700b      	strb	r3, [r1, #0]
 80223ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80223d0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80223d4:	4691      	mov	r9, r2
 80223d6:	f023 0820 	bic.w	r8, r3, #32
 80223da:	bfbc      	itt	lt
 80223dc:	4632      	movlt	r2, r6
 80223de:	4616      	movlt	r6, r2
 80223e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80223e4:	d005      	beq.n	80223f2 <__cvt+0x42>
 80223e6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80223ea:	d100      	bne.n	80223ee <__cvt+0x3e>
 80223ec:	3401      	adds	r4, #1
 80223ee:	2102      	movs	r1, #2
 80223f0:	e000      	b.n	80223f4 <__cvt+0x44>
 80223f2:	2103      	movs	r1, #3
 80223f4:	ab03      	add	r3, sp, #12
 80223f6:	9301      	str	r3, [sp, #4]
 80223f8:	ab02      	add	r3, sp, #8
 80223fa:	9300      	str	r3, [sp, #0]
 80223fc:	ec47 6b10 	vmov	d0, r6, r7
 8022400:	4653      	mov	r3, sl
 8022402:	4622      	mov	r2, r4
 8022404:	f001 f9a8 	bl	8023758 <_dtoa_r>
 8022408:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 802240c:	4605      	mov	r5, r0
 802240e:	d119      	bne.n	8022444 <__cvt+0x94>
 8022410:	f019 0f01 	tst.w	r9, #1
 8022414:	d00e      	beq.n	8022434 <__cvt+0x84>
 8022416:	eb00 0904 	add.w	r9, r0, r4
 802241a:	2200      	movs	r2, #0
 802241c:	2300      	movs	r3, #0
 802241e:	4630      	mov	r0, r6
 8022420:	4639      	mov	r1, r7
 8022422:	f7f7 fe51 	bl	801a0c8 <__aeabi_dcmpeq>
 8022426:	b108      	cbz	r0, 802242c <__cvt+0x7c>
 8022428:	f8cd 900c 	str.w	r9, [sp, #12]
 802242c:	2230      	movs	r2, #48	@ 0x30
 802242e:	9b03      	ldr	r3, [sp, #12]
 8022430:	454b      	cmp	r3, r9
 8022432:	d31e      	bcc.n	8022472 <__cvt+0xc2>
 8022434:	9b03      	ldr	r3, [sp, #12]
 8022436:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8022438:	1b5b      	subs	r3, r3, r5
 802243a:	4628      	mov	r0, r5
 802243c:	6013      	str	r3, [r2, #0]
 802243e:	b004      	add	sp, #16
 8022440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022444:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8022448:	eb00 0904 	add.w	r9, r0, r4
 802244c:	d1e5      	bne.n	802241a <__cvt+0x6a>
 802244e:	7803      	ldrb	r3, [r0, #0]
 8022450:	2b30      	cmp	r3, #48	@ 0x30
 8022452:	d10a      	bne.n	802246a <__cvt+0xba>
 8022454:	2200      	movs	r2, #0
 8022456:	2300      	movs	r3, #0
 8022458:	4630      	mov	r0, r6
 802245a:	4639      	mov	r1, r7
 802245c:	f7f7 fe34 	bl	801a0c8 <__aeabi_dcmpeq>
 8022460:	b918      	cbnz	r0, 802246a <__cvt+0xba>
 8022462:	f1c4 0401 	rsb	r4, r4, #1
 8022466:	f8ca 4000 	str.w	r4, [sl]
 802246a:	f8da 3000 	ldr.w	r3, [sl]
 802246e:	4499      	add	r9, r3
 8022470:	e7d3      	b.n	802241a <__cvt+0x6a>
 8022472:	1c59      	adds	r1, r3, #1
 8022474:	9103      	str	r1, [sp, #12]
 8022476:	701a      	strb	r2, [r3, #0]
 8022478:	e7d9      	b.n	802242e <__cvt+0x7e>

0802247a <__exponent>:
 802247a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802247c:	2900      	cmp	r1, #0
 802247e:	bfba      	itte	lt
 8022480:	4249      	neglt	r1, r1
 8022482:	232d      	movlt	r3, #45	@ 0x2d
 8022484:	232b      	movge	r3, #43	@ 0x2b
 8022486:	2909      	cmp	r1, #9
 8022488:	7002      	strb	r2, [r0, #0]
 802248a:	7043      	strb	r3, [r0, #1]
 802248c:	dd29      	ble.n	80224e2 <__exponent+0x68>
 802248e:	f10d 0307 	add.w	r3, sp, #7
 8022492:	461d      	mov	r5, r3
 8022494:	270a      	movs	r7, #10
 8022496:	461a      	mov	r2, r3
 8022498:	fbb1 f6f7 	udiv	r6, r1, r7
 802249c:	fb07 1416 	mls	r4, r7, r6, r1
 80224a0:	3430      	adds	r4, #48	@ 0x30
 80224a2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80224a6:	460c      	mov	r4, r1
 80224a8:	2c63      	cmp	r4, #99	@ 0x63
 80224aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80224ae:	4631      	mov	r1, r6
 80224b0:	dcf1      	bgt.n	8022496 <__exponent+0x1c>
 80224b2:	3130      	adds	r1, #48	@ 0x30
 80224b4:	1e94      	subs	r4, r2, #2
 80224b6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80224ba:	1c41      	adds	r1, r0, #1
 80224bc:	4623      	mov	r3, r4
 80224be:	42ab      	cmp	r3, r5
 80224c0:	d30a      	bcc.n	80224d8 <__exponent+0x5e>
 80224c2:	f10d 0309 	add.w	r3, sp, #9
 80224c6:	1a9b      	subs	r3, r3, r2
 80224c8:	42ac      	cmp	r4, r5
 80224ca:	bf88      	it	hi
 80224cc:	2300      	movhi	r3, #0
 80224ce:	3302      	adds	r3, #2
 80224d0:	4403      	add	r3, r0
 80224d2:	1a18      	subs	r0, r3, r0
 80224d4:	b003      	add	sp, #12
 80224d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80224d8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80224dc:	f801 6f01 	strb.w	r6, [r1, #1]!
 80224e0:	e7ed      	b.n	80224be <__exponent+0x44>
 80224e2:	2330      	movs	r3, #48	@ 0x30
 80224e4:	3130      	adds	r1, #48	@ 0x30
 80224e6:	7083      	strb	r3, [r0, #2]
 80224e8:	70c1      	strb	r1, [r0, #3]
 80224ea:	1d03      	adds	r3, r0, #4
 80224ec:	e7f1      	b.n	80224d2 <__exponent+0x58>
	...

080224f0 <_printf_float>:
 80224f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80224f4:	b08d      	sub	sp, #52	@ 0x34
 80224f6:	460c      	mov	r4, r1
 80224f8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80224fc:	4616      	mov	r6, r2
 80224fe:	461f      	mov	r7, r3
 8022500:	4605      	mov	r5, r0
 8022502:	f001 f805 	bl	8023510 <_localeconv_r>
 8022506:	6803      	ldr	r3, [r0, #0]
 8022508:	9304      	str	r3, [sp, #16]
 802250a:	4618      	mov	r0, r3
 802250c:	f7f7 f9b0 	bl	8019870 <strlen>
 8022510:	2300      	movs	r3, #0
 8022512:	930a      	str	r3, [sp, #40]	@ 0x28
 8022514:	f8d8 3000 	ldr.w	r3, [r8]
 8022518:	9005      	str	r0, [sp, #20]
 802251a:	3307      	adds	r3, #7
 802251c:	f023 0307 	bic.w	r3, r3, #7
 8022520:	f103 0208 	add.w	r2, r3, #8
 8022524:	f894 a018 	ldrb.w	sl, [r4, #24]
 8022528:	f8d4 b000 	ldr.w	fp, [r4]
 802252c:	f8c8 2000 	str.w	r2, [r8]
 8022530:	e9d3 8900 	ldrd	r8, r9, [r3]
 8022534:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8022538:	9307      	str	r3, [sp, #28]
 802253a:	f8cd 8018 	str.w	r8, [sp, #24]
 802253e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8022542:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022546:	4b9c      	ldr	r3, [pc, #624]	@ (80227b8 <_printf_float+0x2c8>)
 8022548:	f04f 32ff 	mov.w	r2, #4294967295
 802254c:	f7f7 fdee 	bl	801a12c <__aeabi_dcmpun>
 8022550:	bb70      	cbnz	r0, 80225b0 <_printf_float+0xc0>
 8022552:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022556:	4b98      	ldr	r3, [pc, #608]	@ (80227b8 <_printf_float+0x2c8>)
 8022558:	f04f 32ff 	mov.w	r2, #4294967295
 802255c:	f7f7 fdc8 	bl	801a0f0 <__aeabi_dcmple>
 8022560:	bb30      	cbnz	r0, 80225b0 <_printf_float+0xc0>
 8022562:	2200      	movs	r2, #0
 8022564:	2300      	movs	r3, #0
 8022566:	4640      	mov	r0, r8
 8022568:	4649      	mov	r1, r9
 802256a:	f7f7 fdb7 	bl	801a0dc <__aeabi_dcmplt>
 802256e:	b110      	cbz	r0, 8022576 <_printf_float+0x86>
 8022570:	232d      	movs	r3, #45	@ 0x2d
 8022572:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8022576:	4a91      	ldr	r2, [pc, #580]	@ (80227bc <_printf_float+0x2cc>)
 8022578:	4b91      	ldr	r3, [pc, #580]	@ (80227c0 <_printf_float+0x2d0>)
 802257a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 802257e:	bf94      	ite	ls
 8022580:	4690      	movls	r8, r2
 8022582:	4698      	movhi	r8, r3
 8022584:	2303      	movs	r3, #3
 8022586:	6123      	str	r3, [r4, #16]
 8022588:	f02b 0304 	bic.w	r3, fp, #4
 802258c:	6023      	str	r3, [r4, #0]
 802258e:	f04f 0900 	mov.w	r9, #0
 8022592:	9700      	str	r7, [sp, #0]
 8022594:	4633      	mov	r3, r6
 8022596:	aa0b      	add	r2, sp, #44	@ 0x2c
 8022598:	4621      	mov	r1, r4
 802259a:	4628      	mov	r0, r5
 802259c:	f000 f9d2 	bl	8022944 <_printf_common>
 80225a0:	3001      	adds	r0, #1
 80225a2:	f040 808d 	bne.w	80226c0 <_printf_float+0x1d0>
 80225a6:	f04f 30ff 	mov.w	r0, #4294967295
 80225aa:	b00d      	add	sp, #52	@ 0x34
 80225ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80225b0:	4642      	mov	r2, r8
 80225b2:	464b      	mov	r3, r9
 80225b4:	4640      	mov	r0, r8
 80225b6:	4649      	mov	r1, r9
 80225b8:	f7f7 fdb8 	bl	801a12c <__aeabi_dcmpun>
 80225bc:	b140      	cbz	r0, 80225d0 <_printf_float+0xe0>
 80225be:	464b      	mov	r3, r9
 80225c0:	2b00      	cmp	r3, #0
 80225c2:	bfbc      	itt	lt
 80225c4:	232d      	movlt	r3, #45	@ 0x2d
 80225c6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80225ca:	4a7e      	ldr	r2, [pc, #504]	@ (80227c4 <_printf_float+0x2d4>)
 80225cc:	4b7e      	ldr	r3, [pc, #504]	@ (80227c8 <_printf_float+0x2d8>)
 80225ce:	e7d4      	b.n	802257a <_printf_float+0x8a>
 80225d0:	6863      	ldr	r3, [r4, #4]
 80225d2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80225d6:	9206      	str	r2, [sp, #24]
 80225d8:	1c5a      	adds	r2, r3, #1
 80225da:	d13b      	bne.n	8022654 <_printf_float+0x164>
 80225dc:	2306      	movs	r3, #6
 80225de:	6063      	str	r3, [r4, #4]
 80225e0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80225e4:	2300      	movs	r3, #0
 80225e6:	6022      	str	r2, [r4, #0]
 80225e8:	9303      	str	r3, [sp, #12]
 80225ea:	ab0a      	add	r3, sp, #40	@ 0x28
 80225ec:	e9cd a301 	strd	sl, r3, [sp, #4]
 80225f0:	ab09      	add	r3, sp, #36	@ 0x24
 80225f2:	9300      	str	r3, [sp, #0]
 80225f4:	6861      	ldr	r1, [r4, #4]
 80225f6:	ec49 8b10 	vmov	d0, r8, r9
 80225fa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80225fe:	4628      	mov	r0, r5
 8022600:	f7ff fed6 	bl	80223b0 <__cvt>
 8022604:	9b06      	ldr	r3, [sp, #24]
 8022606:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8022608:	2b47      	cmp	r3, #71	@ 0x47
 802260a:	4680      	mov	r8, r0
 802260c:	d129      	bne.n	8022662 <_printf_float+0x172>
 802260e:	1cc8      	adds	r0, r1, #3
 8022610:	db02      	blt.n	8022618 <_printf_float+0x128>
 8022612:	6863      	ldr	r3, [r4, #4]
 8022614:	4299      	cmp	r1, r3
 8022616:	dd41      	ble.n	802269c <_printf_float+0x1ac>
 8022618:	f1aa 0a02 	sub.w	sl, sl, #2
 802261c:	fa5f fa8a 	uxtb.w	sl, sl
 8022620:	3901      	subs	r1, #1
 8022622:	4652      	mov	r2, sl
 8022624:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8022628:	9109      	str	r1, [sp, #36]	@ 0x24
 802262a:	f7ff ff26 	bl	802247a <__exponent>
 802262e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022630:	1813      	adds	r3, r2, r0
 8022632:	2a01      	cmp	r2, #1
 8022634:	4681      	mov	r9, r0
 8022636:	6123      	str	r3, [r4, #16]
 8022638:	dc02      	bgt.n	8022640 <_printf_float+0x150>
 802263a:	6822      	ldr	r2, [r4, #0]
 802263c:	07d2      	lsls	r2, r2, #31
 802263e:	d501      	bpl.n	8022644 <_printf_float+0x154>
 8022640:	3301      	adds	r3, #1
 8022642:	6123      	str	r3, [r4, #16]
 8022644:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8022648:	2b00      	cmp	r3, #0
 802264a:	d0a2      	beq.n	8022592 <_printf_float+0xa2>
 802264c:	232d      	movs	r3, #45	@ 0x2d
 802264e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8022652:	e79e      	b.n	8022592 <_printf_float+0xa2>
 8022654:	9a06      	ldr	r2, [sp, #24]
 8022656:	2a47      	cmp	r2, #71	@ 0x47
 8022658:	d1c2      	bne.n	80225e0 <_printf_float+0xf0>
 802265a:	2b00      	cmp	r3, #0
 802265c:	d1c0      	bne.n	80225e0 <_printf_float+0xf0>
 802265e:	2301      	movs	r3, #1
 8022660:	e7bd      	b.n	80225de <_printf_float+0xee>
 8022662:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8022666:	d9db      	bls.n	8022620 <_printf_float+0x130>
 8022668:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 802266c:	d118      	bne.n	80226a0 <_printf_float+0x1b0>
 802266e:	2900      	cmp	r1, #0
 8022670:	6863      	ldr	r3, [r4, #4]
 8022672:	dd0b      	ble.n	802268c <_printf_float+0x19c>
 8022674:	6121      	str	r1, [r4, #16]
 8022676:	b913      	cbnz	r3, 802267e <_printf_float+0x18e>
 8022678:	6822      	ldr	r2, [r4, #0]
 802267a:	07d0      	lsls	r0, r2, #31
 802267c:	d502      	bpl.n	8022684 <_printf_float+0x194>
 802267e:	3301      	adds	r3, #1
 8022680:	440b      	add	r3, r1
 8022682:	6123      	str	r3, [r4, #16]
 8022684:	65a1      	str	r1, [r4, #88]	@ 0x58
 8022686:	f04f 0900 	mov.w	r9, #0
 802268a:	e7db      	b.n	8022644 <_printf_float+0x154>
 802268c:	b913      	cbnz	r3, 8022694 <_printf_float+0x1a4>
 802268e:	6822      	ldr	r2, [r4, #0]
 8022690:	07d2      	lsls	r2, r2, #31
 8022692:	d501      	bpl.n	8022698 <_printf_float+0x1a8>
 8022694:	3302      	adds	r3, #2
 8022696:	e7f4      	b.n	8022682 <_printf_float+0x192>
 8022698:	2301      	movs	r3, #1
 802269a:	e7f2      	b.n	8022682 <_printf_float+0x192>
 802269c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80226a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80226a2:	4299      	cmp	r1, r3
 80226a4:	db05      	blt.n	80226b2 <_printf_float+0x1c2>
 80226a6:	6823      	ldr	r3, [r4, #0]
 80226a8:	6121      	str	r1, [r4, #16]
 80226aa:	07d8      	lsls	r0, r3, #31
 80226ac:	d5ea      	bpl.n	8022684 <_printf_float+0x194>
 80226ae:	1c4b      	adds	r3, r1, #1
 80226b0:	e7e7      	b.n	8022682 <_printf_float+0x192>
 80226b2:	2900      	cmp	r1, #0
 80226b4:	bfd4      	ite	le
 80226b6:	f1c1 0202 	rsble	r2, r1, #2
 80226ba:	2201      	movgt	r2, #1
 80226bc:	4413      	add	r3, r2
 80226be:	e7e0      	b.n	8022682 <_printf_float+0x192>
 80226c0:	6823      	ldr	r3, [r4, #0]
 80226c2:	055a      	lsls	r2, r3, #21
 80226c4:	d407      	bmi.n	80226d6 <_printf_float+0x1e6>
 80226c6:	6923      	ldr	r3, [r4, #16]
 80226c8:	4642      	mov	r2, r8
 80226ca:	4631      	mov	r1, r6
 80226cc:	4628      	mov	r0, r5
 80226ce:	47b8      	blx	r7
 80226d0:	3001      	adds	r0, #1
 80226d2:	d12b      	bne.n	802272c <_printf_float+0x23c>
 80226d4:	e767      	b.n	80225a6 <_printf_float+0xb6>
 80226d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80226da:	f240 80dd 	bls.w	8022898 <_printf_float+0x3a8>
 80226de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80226e2:	2200      	movs	r2, #0
 80226e4:	2300      	movs	r3, #0
 80226e6:	f7f7 fcef 	bl	801a0c8 <__aeabi_dcmpeq>
 80226ea:	2800      	cmp	r0, #0
 80226ec:	d033      	beq.n	8022756 <_printf_float+0x266>
 80226ee:	4a37      	ldr	r2, [pc, #220]	@ (80227cc <_printf_float+0x2dc>)
 80226f0:	2301      	movs	r3, #1
 80226f2:	4631      	mov	r1, r6
 80226f4:	4628      	mov	r0, r5
 80226f6:	47b8      	blx	r7
 80226f8:	3001      	adds	r0, #1
 80226fa:	f43f af54 	beq.w	80225a6 <_printf_float+0xb6>
 80226fe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8022702:	4543      	cmp	r3, r8
 8022704:	db02      	blt.n	802270c <_printf_float+0x21c>
 8022706:	6823      	ldr	r3, [r4, #0]
 8022708:	07d8      	lsls	r0, r3, #31
 802270a:	d50f      	bpl.n	802272c <_printf_float+0x23c>
 802270c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8022710:	4631      	mov	r1, r6
 8022712:	4628      	mov	r0, r5
 8022714:	47b8      	blx	r7
 8022716:	3001      	adds	r0, #1
 8022718:	f43f af45 	beq.w	80225a6 <_printf_float+0xb6>
 802271c:	f04f 0900 	mov.w	r9, #0
 8022720:	f108 38ff 	add.w	r8, r8, #4294967295
 8022724:	f104 0a1a 	add.w	sl, r4, #26
 8022728:	45c8      	cmp	r8, r9
 802272a:	dc09      	bgt.n	8022740 <_printf_float+0x250>
 802272c:	6823      	ldr	r3, [r4, #0]
 802272e:	079b      	lsls	r3, r3, #30
 8022730:	f100 8103 	bmi.w	802293a <_printf_float+0x44a>
 8022734:	68e0      	ldr	r0, [r4, #12]
 8022736:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022738:	4298      	cmp	r0, r3
 802273a:	bfb8      	it	lt
 802273c:	4618      	movlt	r0, r3
 802273e:	e734      	b.n	80225aa <_printf_float+0xba>
 8022740:	2301      	movs	r3, #1
 8022742:	4652      	mov	r2, sl
 8022744:	4631      	mov	r1, r6
 8022746:	4628      	mov	r0, r5
 8022748:	47b8      	blx	r7
 802274a:	3001      	adds	r0, #1
 802274c:	f43f af2b 	beq.w	80225a6 <_printf_float+0xb6>
 8022750:	f109 0901 	add.w	r9, r9, #1
 8022754:	e7e8      	b.n	8022728 <_printf_float+0x238>
 8022756:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022758:	2b00      	cmp	r3, #0
 802275a:	dc39      	bgt.n	80227d0 <_printf_float+0x2e0>
 802275c:	4a1b      	ldr	r2, [pc, #108]	@ (80227cc <_printf_float+0x2dc>)
 802275e:	2301      	movs	r3, #1
 8022760:	4631      	mov	r1, r6
 8022762:	4628      	mov	r0, r5
 8022764:	47b8      	blx	r7
 8022766:	3001      	adds	r0, #1
 8022768:	f43f af1d 	beq.w	80225a6 <_printf_float+0xb6>
 802276c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8022770:	ea59 0303 	orrs.w	r3, r9, r3
 8022774:	d102      	bne.n	802277c <_printf_float+0x28c>
 8022776:	6823      	ldr	r3, [r4, #0]
 8022778:	07d9      	lsls	r1, r3, #31
 802277a:	d5d7      	bpl.n	802272c <_printf_float+0x23c>
 802277c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8022780:	4631      	mov	r1, r6
 8022782:	4628      	mov	r0, r5
 8022784:	47b8      	blx	r7
 8022786:	3001      	adds	r0, #1
 8022788:	f43f af0d 	beq.w	80225a6 <_printf_float+0xb6>
 802278c:	f04f 0a00 	mov.w	sl, #0
 8022790:	f104 0b1a 	add.w	fp, r4, #26
 8022794:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022796:	425b      	negs	r3, r3
 8022798:	4553      	cmp	r3, sl
 802279a:	dc01      	bgt.n	80227a0 <_printf_float+0x2b0>
 802279c:	464b      	mov	r3, r9
 802279e:	e793      	b.n	80226c8 <_printf_float+0x1d8>
 80227a0:	2301      	movs	r3, #1
 80227a2:	465a      	mov	r2, fp
 80227a4:	4631      	mov	r1, r6
 80227a6:	4628      	mov	r0, r5
 80227a8:	47b8      	blx	r7
 80227aa:	3001      	adds	r0, #1
 80227ac:	f43f aefb 	beq.w	80225a6 <_printf_float+0xb6>
 80227b0:	f10a 0a01 	add.w	sl, sl, #1
 80227b4:	e7ee      	b.n	8022794 <_printf_float+0x2a4>
 80227b6:	bf00      	nop
 80227b8:	7fefffff 	.word	0x7fefffff
 80227bc:	08044670 	.word	0x08044670
 80227c0:	08044674 	.word	0x08044674
 80227c4:	08044678 	.word	0x08044678
 80227c8:	0804467c 	.word	0x0804467c
 80227cc:	08044680 	.word	0x08044680
 80227d0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80227d2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80227d6:	4553      	cmp	r3, sl
 80227d8:	bfa8      	it	ge
 80227da:	4653      	movge	r3, sl
 80227dc:	2b00      	cmp	r3, #0
 80227de:	4699      	mov	r9, r3
 80227e0:	dc36      	bgt.n	8022850 <_printf_float+0x360>
 80227e2:	f04f 0b00 	mov.w	fp, #0
 80227e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80227ea:	f104 021a 	add.w	r2, r4, #26
 80227ee:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80227f0:	9306      	str	r3, [sp, #24]
 80227f2:	eba3 0309 	sub.w	r3, r3, r9
 80227f6:	455b      	cmp	r3, fp
 80227f8:	dc31      	bgt.n	802285e <_printf_float+0x36e>
 80227fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80227fc:	459a      	cmp	sl, r3
 80227fe:	dc3a      	bgt.n	8022876 <_printf_float+0x386>
 8022800:	6823      	ldr	r3, [r4, #0]
 8022802:	07da      	lsls	r2, r3, #31
 8022804:	d437      	bmi.n	8022876 <_printf_float+0x386>
 8022806:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022808:	ebaa 0903 	sub.w	r9, sl, r3
 802280c:	9b06      	ldr	r3, [sp, #24]
 802280e:	ebaa 0303 	sub.w	r3, sl, r3
 8022812:	4599      	cmp	r9, r3
 8022814:	bfa8      	it	ge
 8022816:	4699      	movge	r9, r3
 8022818:	f1b9 0f00 	cmp.w	r9, #0
 802281c:	dc33      	bgt.n	8022886 <_printf_float+0x396>
 802281e:	f04f 0800 	mov.w	r8, #0
 8022822:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8022826:	f104 0b1a 	add.w	fp, r4, #26
 802282a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802282c:	ebaa 0303 	sub.w	r3, sl, r3
 8022830:	eba3 0309 	sub.w	r3, r3, r9
 8022834:	4543      	cmp	r3, r8
 8022836:	f77f af79 	ble.w	802272c <_printf_float+0x23c>
 802283a:	2301      	movs	r3, #1
 802283c:	465a      	mov	r2, fp
 802283e:	4631      	mov	r1, r6
 8022840:	4628      	mov	r0, r5
 8022842:	47b8      	blx	r7
 8022844:	3001      	adds	r0, #1
 8022846:	f43f aeae 	beq.w	80225a6 <_printf_float+0xb6>
 802284a:	f108 0801 	add.w	r8, r8, #1
 802284e:	e7ec      	b.n	802282a <_printf_float+0x33a>
 8022850:	4642      	mov	r2, r8
 8022852:	4631      	mov	r1, r6
 8022854:	4628      	mov	r0, r5
 8022856:	47b8      	blx	r7
 8022858:	3001      	adds	r0, #1
 802285a:	d1c2      	bne.n	80227e2 <_printf_float+0x2f2>
 802285c:	e6a3      	b.n	80225a6 <_printf_float+0xb6>
 802285e:	2301      	movs	r3, #1
 8022860:	4631      	mov	r1, r6
 8022862:	4628      	mov	r0, r5
 8022864:	9206      	str	r2, [sp, #24]
 8022866:	47b8      	blx	r7
 8022868:	3001      	adds	r0, #1
 802286a:	f43f ae9c 	beq.w	80225a6 <_printf_float+0xb6>
 802286e:	9a06      	ldr	r2, [sp, #24]
 8022870:	f10b 0b01 	add.w	fp, fp, #1
 8022874:	e7bb      	b.n	80227ee <_printf_float+0x2fe>
 8022876:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802287a:	4631      	mov	r1, r6
 802287c:	4628      	mov	r0, r5
 802287e:	47b8      	blx	r7
 8022880:	3001      	adds	r0, #1
 8022882:	d1c0      	bne.n	8022806 <_printf_float+0x316>
 8022884:	e68f      	b.n	80225a6 <_printf_float+0xb6>
 8022886:	9a06      	ldr	r2, [sp, #24]
 8022888:	464b      	mov	r3, r9
 802288a:	4442      	add	r2, r8
 802288c:	4631      	mov	r1, r6
 802288e:	4628      	mov	r0, r5
 8022890:	47b8      	blx	r7
 8022892:	3001      	adds	r0, #1
 8022894:	d1c3      	bne.n	802281e <_printf_float+0x32e>
 8022896:	e686      	b.n	80225a6 <_printf_float+0xb6>
 8022898:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 802289c:	f1ba 0f01 	cmp.w	sl, #1
 80228a0:	dc01      	bgt.n	80228a6 <_printf_float+0x3b6>
 80228a2:	07db      	lsls	r3, r3, #31
 80228a4:	d536      	bpl.n	8022914 <_printf_float+0x424>
 80228a6:	2301      	movs	r3, #1
 80228a8:	4642      	mov	r2, r8
 80228aa:	4631      	mov	r1, r6
 80228ac:	4628      	mov	r0, r5
 80228ae:	47b8      	blx	r7
 80228b0:	3001      	adds	r0, #1
 80228b2:	f43f ae78 	beq.w	80225a6 <_printf_float+0xb6>
 80228b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80228ba:	4631      	mov	r1, r6
 80228bc:	4628      	mov	r0, r5
 80228be:	47b8      	blx	r7
 80228c0:	3001      	adds	r0, #1
 80228c2:	f43f ae70 	beq.w	80225a6 <_printf_float+0xb6>
 80228c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80228ca:	2200      	movs	r2, #0
 80228cc:	2300      	movs	r3, #0
 80228ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80228d2:	f7f7 fbf9 	bl	801a0c8 <__aeabi_dcmpeq>
 80228d6:	b9c0      	cbnz	r0, 802290a <_printf_float+0x41a>
 80228d8:	4653      	mov	r3, sl
 80228da:	f108 0201 	add.w	r2, r8, #1
 80228de:	4631      	mov	r1, r6
 80228e0:	4628      	mov	r0, r5
 80228e2:	47b8      	blx	r7
 80228e4:	3001      	adds	r0, #1
 80228e6:	d10c      	bne.n	8022902 <_printf_float+0x412>
 80228e8:	e65d      	b.n	80225a6 <_printf_float+0xb6>
 80228ea:	2301      	movs	r3, #1
 80228ec:	465a      	mov	r2, fp
 80228ee:	4631      	mov	r1, r6
 80228f0:	4628      	mov	r0, r5
 80228f2:	47b8      	blx	r7
 80228f4:	3001      	adds	r0, #1
 80228f6:	f43f ae56 	beq.w	80225a6 <_printf_float+0xb6>
 80228fa:	f108 0801 	add.w	r8, r8, #1
 80228fe:	45d0      	cmp	r8, sl
 8022900:	dbf3      	blt.n	80228ea <_printf_float+0x3fa>
 8022902:	464b      	mov	r3, r9
 8022904:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8022908:	e6df      	b.n	80226ca <_printf_float+0x1da>
 802290a:	f04f 0800 	mov.w	r8, #0
 802290e:	f104 0b1a 	add.w	fp, r4, #26
 8022912:	e7f4      	b.n	80228fe <_printf_float+0x40e>
 8022914:	2301      	movs	r3, #1
 8022916:	4642      	mov	r2, r8
 8022918:	e7e1      	b.n	80228de <_printf_float+0x3ee>
 802291a:	2301      	movs	r3, #1
 802291c:	464a      	mov	r2, r9
 802291e:	4631      	mov	r1, r6
 8022920:	4628      	mov	r0, r5
 8022922:	47b8      	blx	r7
 8022924:	3001      	adds	r0, #1
 8022926:	f43f ae3e 	beq.w	80225a6 <_printf_float+0xb6>
 802292a:	f108 0801 	add.w	r8, r8, #1
 802292e:	68e3      	ldr	r3, [r4, #12]
 8022930:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8022932:	1a5b      	subs	r3, r3, r1
 8022934:	4543      	cmp	r3, r8
 8022936:	dcf0      	bgt.n	802291a <_printf_float+0x42a>
 8022938:	e6fc      	b.n	8022734 <_printf_float+0x244>
 802293a:	f04f 0800 	mov.w	r8, #0
 802293e:	f104 0919 	add.w	r9, r4, #25
 8022942:	e7f4      	b.n	802292e <_printf_float+0x43e>

08022944 <_printf_common>:
 8022944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022948:	4616      	mov	r6, r2
 802294a:	4698      	mov	r8, r3
 802294c:	688a      	ldr	r2, [r1, #8]
 802294e:	690b      	ldr	r3, [r1, #16]
 8022950:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8022954:	4293      	cmp	r3, r2
 8022956:	bfb8      	it	lt
 8022958:	4613      	movlt	r3, r2
 802295a:	6033      	str	r3, [r6, #0]
 802295c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8022960:	4607      	mov	r7, r0
 8022962:	460c      	mov	r4, r1
 8022964:	b10a      	cbz	r2, 802296a <_printf_common+0x26>
 8022966:	3301      	adds	r3, #1
 8022968:	6033      	str	r3, [r6, #0]
 802296a:	6823      	ldr	r3, [r4, #0]
 802296c:	0699      	lsls	r1, r3, #26
 802296e:	bf42      	ittt	mi
 8022970:	6833      	ldrmi	r3, [r6, #0]
 8022972:	3302      	addmi	r3, #2
 8022974:	6033      	strmi	r3, [r6, #0]
 8022976:	6825      	ldr	r5, [r4, #0]
 8022978:	f015 0506 	ands.w	r5, r5, #6
 802297c:	d106      	bne.n	802298c <_printf_common+0x48>
 802297e:	f104 0a19 	add.w	sl, r4, #25
 8022982:	68e3      	ldr	r3, [r4, #12]
 8022984:	6832      	ldr	r2, [r6, #0]
 8022986:	1a9b      	subs	r3, r3, r2
 8022988:	42ab      	cmp	r3, r5
 802298a:	dc26      	bgt.n	80229da <_printf_common+0x96>
 802298c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8022990:	6822      	ldr	r2, [r4, #0]
 8022992:	3b00      	subs	r3, #0
 8022994:	bf18      	it	ne
 8022996:	2301      	movne	r3, #1
 8022998:	0692      	lsls	r2, r2, #26
 802299a:	d42b      	bmi.n	80229f4 <_printf_common+0xb0>
 802299c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80229a0:	4641      	mov	r1, r8
 80229a2:	4638      	mov	r0, r7
 80229a4:	47c8      	blx	r9
 80229a6:	3001      	adds	r0, #1
 80229a8:	d01e      	beq.n	80229e8 <_printf_common+0xa4>
 80229aa:	6823      	ldr	r3, [r4, #0]
 80229ac:	6922      	ldr	r2, [r4, #16]
 80229ae:	f003 0306 	and.w	r3, r3, #6
 80229b2:	2b04      	cmp	r3, #4
 80229b4:	bf02      	ittt	eq
 80229b6:	68e5      	ldreq	r5, [r4, #12]
 80229b8:	6833      	ldreq	r3, [r6, #0]
 80229ba:	1aed      	subeq	r5, r5, r3
 80229bc:	68a3      	ldr	r3, [r4, #8]
 80229be:	bf0c      	ite	eq
 80229c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80229c4:	2500      	movne	r5, #0
 80229c6:	4293      	cmp	r3, r2
 80229c8:	bfc4      	itt	gt
 80229ca:	1a9b      	subgt	r3, r3, r2
 80229cc:	18ed      	addgt	r5, r5, r3
 80229ce:	2600      	movs	r6, #0
 80229d0:	341a      	adds	r4, #26
 80229d2:	42b5      	cmp	r5, r6
 80229d4:	d11a      	bne.n	8022a0c <_printf_common+0xc8>
 80229d6:	2000      	movs	r0, #0
 80229d8:	e008      	b.n	80229ec <_printf_common+0xa8>
 80229da:	2301      	movs	r3, #1
 80229dc:	4652      	mov	r2, sl
 80229de:	4641      	mov	r1, r8
 80229e0:	4638      	mov	r0, r7
 80229e2:	47c8      	blx	r9
 80229e4:	3001      	adds	r0, #1
 80229e6:	d103      	bne.n	80229f0 <_printf_common+0xac>
 80229e8:	f04f 30ff 	mov.w	r0, #4294967295
 80229ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80229f0:	3501      	adds	r5, #1
 80229f2:	e7c6      	b.n	8022982 <_printf_common+0x3e>
 80229f4:	18e1      	adds	r1, r4, r3
 80229f6:	1c5a      	adds	r2, r3, #1
 80229f8:	2030      	movs	r0, #48	@ 0x30
 80229fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80229fe:	4422      	add	r2, r4
 8022a00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8022a04:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8022a08:	3302      	adds	r3, #2
 8022a0a:	e7c7      	b.n	802299c <_printf_common+0x58>
 8022a0c:	2301      	movs	r3, #1
 8022a0e:	4622      	mov	r2, r4
 8022a10:	4641      	mov	r1, r8
 8022a12:	4638      	mov	r0, r7
 8022a14:	47c8      	blx	r9
 8022a16:	3001      	adds	r0, #1
 8022a18:	d0e6      	beq.n	80229e8 <_printf_common+0xa4>
 8022a1a:	3601      	adds	r6, #1
 8022a1c:	e7d9      	b.n	80229d2 <_printf_common+0x8e>
	...

08022a20 <_printf_i>:
 8022a20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022a24:	7e0f      	ldrb	r7, [r1, #24]
 8022a26:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8022a28:	2f78      	cmp	r7, #120	@ 0x78
 8022a2a:	4691      	mov	r9, r2
 8022a2c:	4680      	mov	r8, r0
 8022a2e:	460c      	mov	r4, r1
 8022a30:	469a      	mov	sl, r3
 8022a32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8022a36:	d807      	bhi.n	8022a48 <_printf_i+0x28>
 8022a38:	2f62      	cmp	r7, #98	@ 0x62
 8022a3a:	d80a      	bhi.n	8022a52 <_printf_i+0x32>
 8022a3c:	2f00      	cmp	r7, #0
 8022a3e:	f000 80d2 	beq.w	8022be6 <_printf_i+0x1c6>
 8022a42:	2f58      	cmp	r7, #88	@ 0x58
 8022a44:	f000 80b9 	beq.w	8022bba <_printf_i+0x19a>
 8022a48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8022a4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8022a50:	e03a      	b.n	8022ac8 <_printf_i+0xa8>
 8022a52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8022a56:	2b15      	cmp	r3, #21
 8022a58:	d8f6      	bhi.n	8022a48 <_printf_i+0x28>
 8022a5a:	a101      	add	r1, pc, #4	@ (adr r1, 8022a60 <_printf_i+0x40>)
 8022a5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8022a60:	08022ab9 	.word	0x08022ab9
 8022a64:	08022acd 	.word	0x08022acd
 8022a68:	08022a49 	.word	0x08022a49
 8022a6c:	08022a49 	.word	0x08022a49
 8022a70:	08022a49 	.word	0x08022a49
 8022a74:	08022a49 	.word	0x08022a49
 8022a78:	08022acd 	.word	0x08022acd
 8022a7c:	08022a49 	.word	0x08022a49
 8022a80:	08022a49 	.word	0x08022a49
 8022a84:	08022a49 	.word	0x08022a49
 8022a88:	08022a49 	.word	0x08022a49
 8022a8c:	08022bcd 	.word	0x08022bcd
 8022a90:	08022af7 	.word	0x08022af7
 8022a94:	08022b87 	.word	0x08022b87
 8022a98:	08022a49 	.word	0x08022a49
 8022a9c:	08022a49 	.word	0x08022a49
 8022aa0:	08022bef 	.word	0x08022bef
 8022aa4:	08022a49 	.word	0x08022a49
 8022aa8:	08022af7 	.word	0x08022af7
 8022aac:	08022a49 	.word	0x08022a49
 8022ab0:	08022a49 	.word	0x08022a49
 8022ab4:	08022b8f 	.word	0x08022b8f
 8022ab8:	6833      	ldr	r3, [r6, #0]
 8022aba:	1d1a      	adds	r2, r3, #4
 8022abc:	681b      	ldr	r3, [r3, #0]
 8022abe:	6032      	str	r2, [r6, #0]
 8022ac0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8022ac4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8022ac8:	2301      	movs	r3, #1
 8022aca:	e09d      	b.n	8022c08 <_printf_i+0x1e8>
 8022acc:	6833      	ldr	r3, [r6, #0]
 8022ace:	6820      	ldr	r0, [r4, #0]
 8022ad0:	1d19      	adds	r1, r3, #4
 8022ad2:	6031      	str	r1, [r6, #0]
 8022ad4:	0606      	lsls	r6, r0, #24
 8022ad6:	d501      	bpl.n	8022adc <_printf_i+0xbc>
 8022ad8:	681d      	ldr	r5, [r3, #0]
 8022ada:	e003      	b.n	8022ae4 <_printf_i+0xc4>
 8022adc:	0645      	lsls	r5, r0, #25
 8022ade:	d5fb      	bpl.n	8022ad8 <_printf_i+0xb8>
 8022ae0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8022ae4:	2d00      	cmp	r5, #0
 8022ae6:	da03      	bge.n	8022af0 <_printf_i+0xd0>
 8022ae8:	232d      	movs	r3, #45	@ 0x2d
 8022aea:	426d      	negs	r5, r5
 8022aec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8022af0:	4859      	ldr	r0, [pc, #356]	@ (8022c58 <_printf_i+0x238>)
 8022af2:	230a      	movs	r3, #10
 8022af4:	e011      	b.n	8022b1a <_printf_i+0xfa>
 8022af6:	6821      	ldr	r1, [r4, #0]
 8022af8:	6833      	ldr	r3, [r6, #0]
 8022afa:	0608      	lsls	r0, r1, #24
 8022afc:	f853 5b04 	ldr.w	r5, [r3], #4
 8022b00:	d402      	bmi.n	8022b08 <_printf_i+0xe8>
 8022b02:	0649      	lsls	r1, r1, #25
 8022b04:	bf48      	it	mi
 8022b06:	b2ad      	uxthmi	r5, r5
 8022b08:	2f6f      	cmp	r7, #111	@ 0x6f
 8022b0a:	4853      	ldr	r0, [pc, #332]	@ (8022c58 <_printf_i+0x238>)
 8022b0c:	6033      	str	r3, [r6, #0]
 8022b0e:	bf14      	ite	ne
 8022b10:	230a      	movne	r3, #10
 8022b12:	2308      	moveq	r3, #8
 8022b14:	2100      	movs	r1, #0
 8022b16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8022b1a:	6866      	ldr	r6, [r4, #4]
 8022b1c:	60a6      	str	r6, [r4, #8]
 8022b1e:	2e00      	cmp	r6, #0
 8022b20:	bfa2      	ittt	ge
 8022b22:	6821      	ldrge	r1, [r4, #0]
 8022b24:	f021 0104 	bicge.w	r1, r1, #4
 8022b28:	6021      	strge	r1, [r4, #0]
 8022b2a:	b90d      	cbnz	r5, 8022b30 <_printf_i+0x110>
 8022b2c:	2e00      	cmp	r6, #0
 8022b2e:	d04b      	beq.n	8022bc8 <_printf_i+0x1a8>
 8022b30:	4616      	mov	r6, r2
 8022b32:	fbb5 f1f3 	udiv	r1, r5, r3
 8022b36:	fb03 5711 	mls	r7, r3, r1, r5
 8022b3a:	5dc7      	ldrb	r7, [r0, r7]
 8022b3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8022b40:	462f      	mov	r7, r5
 8022b42:	42bb      	cmp	r3, r7
 8022b44:	460d      	mov	r5, r1
 8022b46:	d9f4      	bls.n	8022b32 <_printf_i+0x112>
 8022b48:	2b08      	cmp	r3, #8
 8022b4a:	d10b      	bne.n	8022b64 <_printf_i+0x144>
 8022b4c:	6823      	ldr	r3, [r4, #0]
 8022b4e:	07df      	lsls	r7, r3, #31
 8022b50:	d508      	bpl.n	8022b64 <_printf_i+0x144>
 8022b52:	6923      	ldr	r3, [r4, #16]
 8022b54:	6861      	ldr	r1, [r4, #4]
 8022b56:	4299      	cmp	r1, r3
 8022b58:	bfde      	ittt	le
 8022b5a:	2330      	movle	r3, #48	@ 0x30
 8022b5c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8022b60:	f106 36ff 	addle.w	r6, r6, #4294967295
 8022b64:	1b92      	subs	r2, r2, r6
 8022b66:	6122      	str	r2, [r4, #16]
 8022b68:	f8cd a000 	str.w	sl, [sp]
 8022b6c:	464b      	mov	r3, r9
 8022b6e:	aa03      	add	r2, sp, #12
 8022b70:	4621      	mov	r1, r4
 8022b72:	4640      	mov	r0, r8
 8022b74:	f7ff fee6 	bl	8022944 <_printf_common>
 8022b78:	3001      	adds	r0, #1
 8022b7a:	d14a      	bne.n	8022c12 <_printf_i+0x1f2>
 8022b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8022b80:	b004      	add	sp, #16
 8022b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022b86:	6823      	ldr	r3, [r4, #0]
 8022b88:	f043 0320 	orr.w	r3, r3, #32
 8022b8c:	6023      	str	r3, [r4, #0]
 8022b8e:	4833      	ldr	r0, [pc, #204]	@ (8022c5c <_printf_i+0x23c>)
 8022b90:	2778      	movs	r7, #120	@ 0x78
 8022b92:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8022b96:	6823      	ldr	r3, [r4, #0]
 8022b98:	6831      	ldr	r1, [r6, #0]
 8022b9a:	061f      	lsls	r7, r3, #24
 8022b9c:	f851 5b04 	ldr.w	r5, [r1], #4
 8022ba0:	d402      	bmi.n	8022ba8 <_printf_i+0x188>
 8022ba2:	065f      	lsls	r7, r3, #25
 8022ba4:	bf48      	it	mi
 8022ba6:	b2ad      	uxthmi	r5, r5
 8022ba8:	6031      	str	r1, [r6, #0]
 8022baa:	07d9      	lsls	r1, r3, #31
 8022bac:	bf44      	itt	mi
 8022bae:	f043 0320 	orrmi.w	r3, r3, #32
 8022bb2:	6023      	strmi	r3, [r4, #0]
 8022bb4:	b11d      	cbz	r5, 8022bbe <_printf_i+0x19e>
 8022bb6:	2310      	movs	r3, #16
 8022bb8:	e7ac      	b.n	8022b14 <_printf_i+0xf4>
 8022bba:	4827      	ldr	r0, [pc, #156]	@ (8022c58 <_printf_i+0x238>)
 8022bbc:	e7e9      	b.n	8022b92 <_printf_i+0x172>
 8022bbe:	6823      	ldr	r3, [r4, #0]
 8022bc0:	f023 0320 	bic.w	r3, r3, #32
 8022bc4:	6023      	str	r3, [r4, #0]
 8022bc6:	e7f6      	b.n	8022bb6 <_printf_i+0x196>
 8022bc8:	4616      	mov	r6, r2
 8022bca:	e7bd      	b.n	8022b48 <_printf_i+0x128>
 8022bcc:	6833      	ldr	r3, [r6, #0]
 8022bce:	6825      	ldr	r5, [r4, #0]
 8022bd0:	6961      	ldr	r1, [r4, #20]
 8022bd2:	1d18      	adds	r0, r3, #4
 8022bd4:	6030      	str	r0, [r6, #0]
 8022bd6:	062e      	lsls	r6, r5, #24
 8022bd8:	681b      	ldr	r3, [r3, #0]
 8022bda:	d501      	bpl.n	8022be0 <_printf_i+0x1c0>
 8022bdc:	6019      	str	r1, [r3, #0]
 8022bde:	e002      	b.n	8022be6 <_printf_i+0x1c6>
 8022be0:	0668      	lsls	r0, r5, #25
 8022be2:	d5fb      	bpl.n	8022bdc <_printf_i+0x1bc>
 8022be4:	8019      	strh	r1, [r3, #0]
 8022be6:	2300      	movs	r3, #0
 8022be8:	6123      	str	r3, [r4, #16]
 8022bea:	4616      	mov	r6, r2
 8022bec:	e7bc      	b.n	8022b68 <_printf_i+0x148>
 8022bee:	6833      	ldr	r3, [r6, #0]
 8022bf0:	1d1a      	adds	r2, r3, #4
 8022bf2:	6032      	str	r2, [r6, #0]
 8022bf4:	681e      	ldr	r6, [r3, #0]
 8022bf6:	6862      	ldr	r2, [r4, #4]
 8022bf8:	2100      	movs	r1, #0
 8022bfa:	4630      	mov	r0, r6
 8022bfc:	f7f6 fde8 	bl	80197d0 <memchr>
 8022c00:	b108      	cbz	r0, 8022c06 <_printf_i+0x1e6>
 8022c02:	1b80      	subs	r0, r0, r6
 8022c04:	6060      	str	r0, [r4, #4]
 8022c06:	6863      	ldr	r3, [r4, #4]
 8022c08:	6123      	str	r3, [r4, #16]
 8022c0a:	2300      	movs	r3, #0
 8022c0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8022c10:	e7aa      	b.n	8022b68 <_printf_i+0x148>
 8022c12:	6923      	ldr	r3, [r4, #16]
 8022c14:	4632      	mov	r2, r6
 8022c16:	4649      	mov	r1, r9
 8022c18:	4640      	mov	r0, r8
 8022c1a:	47d0      	blx	sl
 8022c1c:	3001      	adds	r0, #1
 8022c1e:	d0ad      	beq.n	8022b7c <_printf_i+0x15c>
 8022c20:	6823      	ldr	r3, [r4, #0]
 8022c22:	079b      	lsls	r3, r3, #30
 8022c24:	d413      	bmi.n	8022c4e <_printf_i+0x22e>
 8022c26:	68e0      	ldr	r0, [r4, #12]
 8022c28:	9b03      	ldr	r3, [sp, #12]
 8022c2a:	4298      	cmp	r0, r3
 8022c2c:	bfb8      	it	lt
 8022c2e:	4618      	movlt	r0, r3
 8022c30:	e7a6      	b.n	8022b80 <_printf_i+0x160>
 8022c32:	2301      	movs	r3, #1
 8022c34:	4632      	mov	r2, r6
 8022c36:	4649      	mov	r1, r9
 8022c38:	4640      	mov	r0, r8
 8022c3a:	47d0      	blx	sl
 8022c3c:	3001      	adds	r0, #1
 8022c3e:	d09d      	beq.n	8022b7c <_printf_i+0x15c>
 8022c40:	3501      	adds	r5, #1
 8022c42:	68e3      	ldr	r3, [r4, #12]
 8022c44:	9903      	ldr	r1, [sp, #12]
 8022c46:	1a5b      	subs	r3, r3, r1
 8022c48:	42ab      	cmp	r3, r5
 8022c4a:	dcf2      	bgt.n	8022c32 <_printf_i+0x212>
 8022c4c:	e7eb      	b.n	8022c26 <_printf_i+0x206>
 8022c4e:	2500      	movs	r5, #0
 8022c50:	f104 0619 	add.w	r6, r4, #25
 8022c54:	e7f5      	b.n	8022c42 <_printf_i+0x222>
 8022c56:	bf00      	nop
 8022c58:	08044682 	.word	0x08044682
 8022c5c:	08044693 	.word	0x08044693

08022c60 <_scanf_float>:
 8022c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c64:	b087      	sub	sp, #28
 8022c66:	4617      	mov	r7, r2
 8022c68:	9303      	str	r3, [sp, #12]
 8022c6a:	688b      	ldr	r3, [r1, #8]
 8022c6c:	1e5a      	subs	r2, r3, #1
 8022c6e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8022c72:	bf81      	itttt	hi
 8022c74:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8022c78:	eb03 0b05 	addhi.w	fp, r3, r5
 8022c7c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8022c80:	608b      	strhi	r3, [r1, #8]
 8022c82:	680b      	ldr	r3, [r1, #0]
 8022c84:	460a      	mov	r2, r1
 8022c86:	f04f 0500 	mov.w	r5, #0
 8022c8a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8022c8e:	f842 3b1c 	str.w	r3, [r2], #28
 8022c92:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8022c96:	4680      	mov	r8, r0
 8022c98:	460c      	mov	r4, r1
 8022c9a:	bf98      	it	ls
 8022c9c:	f04f 0b00 	movls.w	fp, #0
 8022ca0:	9201      	str	r2, [sp, #4]
 8022ca2:	4616      	mov	r6, r2
 8022ca4:	46aa      	mov	sl, r5
 8022ca6:	46a9      	mov	r9, r5
 8022ca8:	9502      	str	r5, [sp, #8]
 8022caa:	68a2      	ldr	r2, [r4, #8]
 8022cac:	b152      	cbz	r2, 8022cc4 <_scanf_float+0x64>
 8022cae:	683b      	ldr	r3, [r7, #0]
 8022cb0:	781b      	ldrb	r3, [r3, #0]
 8022cb2:	2b4e      	cmp	r3, #78	@ 0x4e
 8022cb4:	d864      	bhi.n	8022d80 <_scanf_float+0x120>
 8022cb6:	2b40      	cmp	r3, #64	@ 0x40
 8022cb8:	d83c      	bhi.n	8022d34 <_scanf_float+0xd4>
 8022cba:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8022cbe:	b2c8      	uxtb	r0, r1
 8022cc0:	280e      	cmp	r0, #14
 8022cc2:	d93a      	bls.n	8022d3a <_scanf_float+0xda>
 8022cc4:	f1b9 0f00 	cmp.w	r9, #0
 8022cc8:	d003      	beq.n	8022cd2 <_scanf_float+0x72>
 8022cca:	6823      	ldr	r3, [r4, #0]
 8022ccc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8022cd0:	6023      	str	r3, [r4, #0]
 8022cd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8022cd6:	f1ba 0f01 	cmp.w	sl, #1
 8022cda:	f200 8117 	bhi.w	8022f0c <_scanf_float+0x2ac>
 8022cde:	9b01      	ldr	r3, [sp, #4]
 8022ce0:	429e      	cmp	r6, r3
 8022ce2:	f200 8108 	bhi.w	8022ef6 <_scanf_float+0x296>
 8022ce6:	2001      	movs	r0, #1
 8022ce8:	b007      	add	sp, #28
 8022cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022cee:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8022cf2:	2a0d      	cmp	r2, #13
 8022cf4:	d8e6      	bhi.n	8022cc4 <_scanf_float+0x64>
 8022cf6:	a101      	add	r1, pc, #4	@ (adr r1, 8022cfc <_scanf_float+0x9c>)
 8022cf8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8022cfc:	08022e43 	.word	0x08022e43
 8022d00:	08022cc5 	.word	0x08022cc5
 8022d04:	08022cc5 	.word	0x08022cc5
 8022d08:	08022cc5 	.word	0x08022cc5
 8022d0c:	08022ea3 	.word	0x08022ea3
 8022d10:	08022e7b 	.word	0x08022e7b
 8022d14:	08022cc5 	.word	0x08022cc5
 8022d18:	08022cc5 	.word	0x08022cc5
 8022d1c:	08022e51 	.word	0x08022e51
 8022d20:	08022cc5 	.word	0x08022cc5
 8022d24:	08022cc5 	.word	0x08022cc5
 8022d28:	08022cc5 	.word	0x08022cc5
 8022d2c:	08022cc5 	.word	0x08022cc5
 8022d30:	08022e09 	.word	0x08022e09
 8022d34:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8022d38:	e7db      	b.n	8022cf2 <_scanf_float+0x92>
 8022d3a:	290e      	cmp	r1, #14
 8022d3c:	d8c2      	bhi.n	8022cc4 <_scanf_float+0x64>
 8022d3e:	a001      	add	r0, pc, #4	@ (adr r0, 8022d44 <_scanf_float+0xe4>)
 8022d40:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8022d44:	08022df9 	.word	0x08022df9
 8022d48:	08022cc5 	.word	0x08022cc5
 8022d4c:	08022df9 	.word	0x08022df9
 8022d50:	08022e8f 	.word	0x08022e8f
 8022d54:	08022cc5 	.word	0x08022cc5
 8022d58:	08022da1 	.word	0x08022da1
 8022d5c:	08022ddf 	.word	0x08022ddf
 8022d60:	08022ddf 	.word	0x08022ddf
 8022d64:	08022ddf 	.word	0x08022ddf
 8022d68:	08022ddf 	.word	0x08022ddf
 8022d6c:	08022ddf 	.word	0x08022ddf
 8022d70:	08022ddf 	.word	0x08022ddf
 8022d74:	08022ddf 	.word	0x08022ddf
 8022d78:	08022ddf 	.word	0x08022ddf
 8022d7c:	08022ddf 	.word	0x08022ddf
 8022d80:	2b6e      	cmp	r3, #110	@ 0x6e
 8022d82:	d809      	bhi.n	8022d98 <_scanf_float+0x138>
 8022d84:	2b60      	cmp	r3, #96	@ 0x60
 8022d86:	d8b2      	bhi.n	8022cee <_scanf_float+0x8e>
 8022d88:	2b54      	cmp	r3, #84	@ 0x54
 8022d8a:	d07b      	beq.n	8022e84 <_scanf_float+0x224>
 8022d8c:	2b59      	cmp	r3, #89	@ 0x59
 8022d8e:	d199      	bne.n	8022cc4 <_scanf_float+0x64>
 8022d90:	2d07      	cmp	r5, #7
 8022d92:	d197      	bne.n	8022cc4 <_scanf_float+0x64>
 8022d94:	2508      	movs	r5, #8
 8022d96:	e02c      	b.n	8022df2 <_scanf_float+0x192>
 8022d98:	2b74      	cmp	r3, #116	@ 0x74
 8022d9a:	d073      	beq.n	8022e84 <_scanf_float+0x224>
 8022d9c:	2b79      	cmp	r3, #121	@ 0x79
 8022d9e:	e7f6      	b.n	8022d8e <_scanf_float+0x12e>
 8022da0:	6821      	ldr	r1, [r4, #0]
 8022da2:	05c8      	lsls	r0, r1, #23
 8022da4:	d51b      	bpl.n	8022dde <_scanf_float+0x17e>
 8022da6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8022daa:	6021      	str	r1, [r4, #0]
 8022dac:	f109 0901 	add.w	r9, r9, #1
 8022db0:	f1bb 0f00 	cmp.w	fp, #0
 8022db4:	d003      	beq.n	8022dbe <_scanf_float+0x15e>
 8022db6:	3201      	adds	r2, #1
 8022db8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022dbc:	60a2      	str	r2, [r4, #8]
 8022dbe:	68a3      	ldr	r3, [r4, #8]
 8022dc0:	3b01      	subs	r3, #1
 8022dc2:	60a3      	str	r3, [r4, #8]
 8022dc4:	6923      	ldr	r3, [r4, #16]
 8022dc6:	3301      	adds	r3, #1
 8022dc8:	6123      	str	r3, [r4, #16]
 8022dca:	687b      	ldr	r3, [r7, #4]
 8022dcc:	3b01      	subs	r3, #1
 8022dce:	2b00      	cmp	r3, #0
 8022dd0:	607b      	str	r3, [r7, #4]
 8022dd2:	f340 8087 	ble.w	8022ee4 <_scanf_float+0x284>
 8022dd6:	683b      	ldr	r3, [r7, #0]
 8022dd8:	3301      	adds	r3, #1
 8022dda:	603b      	str	r3, [r7, #0]
 8022ddc:	e765      	b.n	8022caa <_scanf_float+0x4a>
 8022dde:	eb1a 0105 	adds.w	r1, sl, r5
 8022de2:	f47f af6f 	bne.w	8022cc4 <_scanf_float+0x64>
 8022de6:	6822      	ldr	r2, [r4, #0]
 8022de8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8022dec:	6022      	str	r2, [r4, #0]
 8022dee:	460d      	mov	r5, r1
 8022df0:	468a      	mov	sl, r1
 8022df2:	f806 3b01 	strb.w	r3, [r6], #1
 8022df6:	e7e2      	b.n	8022dbe <_scanf_float+0x15e>
 8022df8:	6822      	ldr	r2, [r4, #0]
 8022dfa:	0610      	lsls	r0, r2, #24
 8022dfc:	f57f af62 	bpl.w	8022cc4 <_scanf_float+0x64>
 8022e00:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8022e04:	6022      	str	r2, [r4, #0]
 8022e06:	e7f4      	b.n	8022df2 <_scanf_float+0x192>
 8022e08:	f1ba 0f00 	cmp.w	sl, #0
 8022e0c:	d10e      	bne.n	8022e2c <_scanf_float+0x1cc>
 8022e0e:	f1b9 0f00 	cmp.w	r9, #0
 8022e12:	d10e      	bne.n	8022e32 <_scanf_float+0x1d2>
 8022e14:	6822      	ldr	r2, [r4, #0]
 8022e16:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8022e1a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8022e1e:	d108      	bne.n	8022e32 <_scanf_float+0x1d2>
 8022e20:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8022e24:	6022      	str	r2, [r4, #0]
 8022e26:	f04f 0a01 	mov.w	sl, #1
 8022e2a:	e7e2      	b.n	8022df2 <_scanf_float+0x192>
 8022e2c:	f1ba 0f02 	cmp.w	sl, #2
 8022e30:	d055      	beq.n	8022ede <_scanf_float+0x27e>
 8022e32:	2d01      	cmp	r5, #1
 8022e34:	d002      	beq.n	8022e3c <_scanf_float+0x1dc>
 8022e36:	2d04      	cmp	r5, #4
 8022e38:	f47f af44 	bne.w	8022cc4 <_scanf_float+0x64>
 8022e3c:	3501      	adds	r5, #1
 8022e3e:	b2ed      	uxtb	r5, r5
 8022e40:	e7d7      	b.n	8022df2 <_scanf_float+0x192>
 8022e42:	f1ba 0f01 	cmp.w	sl, #1
 8022e46:	f47f af3d 	bne.w	8022cc4 <_scanf_float+0x64>
 8022e4a:	f04f 0a02 	mov.w	sl, #2
 8022e4e:	e7d0      	b.n	8022df2 <_scanf_float+0x192>
 8022e50:	b97d      	cbnz	r5, 8022e72 <_scanf_float+0x212>
 8022e52:	f1b9 0f00 	cmp.w	r9, #0
 8022e56:	f47f af38 	bne.w	8022cca <_scanf_float+0x6a>
 8022e5a:	6822      	ldr	r2, [r4, #0]
 8022e5c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8022e60:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8022e64:	f040 8108 	bne.w	8023078 <_scanf_float+0x418>
 8022e68:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8022e6c:	6022      	str	r2, [r4, #0]
 8022e6e:	2501      	movs	r5, #1
 8022e70:	e7bf      	b.n	8022df2 <_scanf_float+0x192>
 8022e72:	2d03      	cmp	r5, #3
 8022e74:	d0e2      	beq.n	8022e3c <_scanf_float+0x1dc>
 8022e76:	2d05      	cmp	r5, #5
 8022e78:	e7de      	b.n	8022e38 <_scanf_float+0x1d8>
 8022e7a:	2d02      	cmp	r5, #2
 8022e7c:	f47f af22 	bne.w	8022cc4 <_scanf_float+0x64>
 8022e80:	2503      	movs	r5, #3
 8022e82:	e7b6      	b.n	8022df2 <_scanf_float+0x192>
 8022e84:	2d06      	cmp	r5, #6
 8022e86:	f47f af1d 	bne.w	8022cc4 <_scanf_float+0x64>
 8022e8a:	2507      	movs	r5, #7
 8022e8c:	e7b1      	b.n	8022df2 <_scanf_float+0x192>
 8022e8e:	6822      	ldr	r2, [r4, #0]
 8022e90:	0591      	lsls	r1, r2, #22
 8022e92:	f57f af17 	bpl.w	8022cc4 <_scanf_float+0x64>
 8022e96:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8022e9a:	6022      	str	r2, [r4, #0]
 8022e9c:	f8cd 9008 	str.w	r9, [sp, #8]
 8022ea0:	e7a7      	b.n	8022df2 <_scanf_float+0x192>
 8022ea2:	6822      	ldr	r2, [r4, #0]
 8022ea4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8022ea8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8022eac:	d006      	beq.n	8022ebc <_scanf_float+0x25c>
 8022eae:	0550      	lsls	r0, r2, #21
 8022eb0:	f57f af08 	bpl.w	8022cc4 <_scanf_float+0x64>
 8022eb4:	f1b9 0f00 	cmp.w	r9, #0
 8022eb8:	f000 80de 	beq.w	8023078 <_scanf_float+0x418>
 8022ebc:	0591      	lsls	r1, r2, #22
 8022ebe:	bf58      	it	pl
 8022ec0:	9902      	ldrpl	r1, [sp, #8]
 8022ec2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8022ec6:	bf58      	it	pl
 8022ec8:	eba9 0101 	subpl.w	r1, r9, r1
 8022ecc:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8022ed0:	bf58      	it	pl
 8022ed2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8022ed6:	6022      	str	r2, [r4, #0]
 8022ed8:	f04f 0900 	mov.w	r9, #0
 8022edc:	e789      	b.n	8022df2 <_scanf_float+0x192>
 8022ede:	f04f 0a03 	mov.w	sl, #3
 8022ee2:	e786      	b.n	8022df2 <_scanf_float+0x192>
 8022ee4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8022ee8:	4639      	mov	r1, r7
 8022eea:	4640      	mov	r0, r8
 8022eec:	4798      	blx	r3
 8022eee:	2800      	cmp	r0, #0
 8022ef0:	f43f aedb 	beq.w	8022caa <_scanf_float+0x4a>
 8022ef4:	e6e6      	b.n	8022cc4 <_scanf_float+0x64>
 8022ef6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8022efa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8022efe:	463a      	mov	r2, r7
 8022f00:	4640      	mov	r0, r8
 8022f02:	4798      	blx	r3
 8022f04:	6923      	ldr	r3, [r4, #16]
 8022f06:	3b01      	subs	r3, #1
 8022f08:	6123      	str	r3, [r4, #16]
 8022f0a:	e6e8      	b.n	8022cde <_scanf_float+0x7e>
 8022f0c:	1e6b      	subs	r3, r5, #1
 8022f0e:	2b06      	cmp	r3, #6
 8022f10:	d824      	bhi.n	8022f5c <_scanf_float+0x2fc>
 8022f12:	2d02      	cmp	r5, #2
 8022f14:	d836      	bhi.n	8022f84 <_scanf_float+0x324>
 8022f16:	9b01      	ldr	r3, [sp, #4]
 8022f18:	429e      	cmp	r6, r3
 8022f1a:	f67f aee4 	bls.w	8022ce6 <_scanf_float+0x86>
 8022f1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8022f22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8022f26:	463a      	mov	r2, r7
 8022f28:	4640      	mov	r0, r8
 8022f2a:	4798      	blx	r3
 8022f2c:	6923      	ldr	r3, [r4, #16]
 8022f2e:	3b01      	subs	r3, #1
 8022f30:	6123      	str	r3, [r4, #16]
 8022f32:	e7f0      	b.n	8022f16 <_scanf_float+0x2b6>
 8022f34:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8022f38:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8022f3c:	463a      	mov	r2, r7
 8022f3e:	4640      	mov	r0, r8
 8022f40:	4798      	blx	r3
 8022f42:	6923      	ldr	r3, [r4, #16]
 8022f44:	3b01      	subs	r3, #1
 8022f46:	6123      	str	r3, [r4, #16]
 8022f48:	f10a 3aff 	add.w	sl, sl, #4294967295
 8022f4c:	fa5f fa8a 	uxtb.w	sl, sl
 8022f50:	f1ba 0f02 	cmp.w	sl, #2
 8022f54:	d1ee      	bne.n	8022f34 <_scanf_float+0x2d4>
 8022f56:	3d03      	subs	r5, #3
 8022f58:	b2ed      	uxtb	r5, r5
 8022f5a:	1b76      	subs	r6, r6, r5
 8022f5c:	6823      	ldr	r3, [r4, #0]
 8022f5e:	05da      	lsls	r2, r3, #23
 8022f60:	d530      	bpl.n	8022fc4 <_scanf_float+0x364>
 8022f62:	055b      	lsls	r3, r3, #21
 8022f64:	d511      	bpl.n	8022f8a <_scanf_float+0x32a>
 8022f66:	9b01      	ldr	r3, [sp, #4]
 8022f68:	429e      	cmp	r6, r3
 8022f6a:	f67f aebc 	bls.w	8022ce6 <_scanf_float+0x86>
 8022f6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8022f72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8022f76:	463a      	mov	r2, r7
 8022f78:	4640      	mov	r0, r8
 8022f7a:	4798      	blx	r3
 8022f7c:	6923      	ldr	r3, [r4, #16]
 8022f7e:	3b01      	subs	r3, #1
 8022f80:	6123      	str	r3, [r4, #16]
 8022f82:	e7f0      	b.n	8022f66 <_scanf_float+0x306>
 8022f84:	46aa      	mov	sl, r5
 8022f86:	46b3      	mov	fp, r6
 8022f88:	e7de      	b.n	8022f48 <_scanf_float+0x2e8>
 8022f8a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8022f8e:	6923      	ldr	r3, [r4, #16]
 8022f90:	2965      	cmp	r1, #101	@ 0x65
 8022f92:	f103 33ff 	add.w	r3, r3, #4294967295
 8022f96:	f106 35ff 	add.w	r5, r6, #4294967295
 8022f9a:	6123      	str	r3, [r4, #16]
 8022f9c:	d00c      	beq.n	8022fb8 <_scanf_float+0x358>
 8022f9e:	2945      	cmp	r1, #69	@ 0x45
 8022fa0:	d00a      	beq.n	8022fb8 <_scanf_float+0x358>
 8022fa2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8022fa6:	463a      	mov	r2, r7
 8022fa8:	4640      	mov	r0, r8
 8022faa:	4798      	blx	r3
 8022fac:	6923      	ldr	r3, [r4, #16]
 8022fae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8022fb2:	3b01      	subs	r3, #1
 8022fb4:	1eb5      	subs	r5, r6, #2
 8022fb6:	6123      	str	r3, [r4, #16]
 8022fb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8022fbc:	463a      	mov	r2, r7
 8022fbe:	4640      	mov	r0, r8
 8022fc0:	4798      	blx	r3
 8022fc2:	462e      	mov	r6, r5
 8022fc4:	6822      	ldr	r2, [r4, #0]
 8022fc6:	f012 0210 	ands.w	r2, r2, #16
 8022fca:	d001      	beq.n	8022fd0 <_scanf_float+0x370>
 8022fcc:	2000      	movs	r0, #0
 8022fce:	e68b      	b.n	8022ce8 <_scanf_float+0x88>
 8022fd0:	7032      	strb	r2, [r6, #0]
 8022fd2:	6823      	ldr	r3, [r4, #0]
 8022fd4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8022fd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8022fdc:	d11c      	bne.n	8023018 <_scanf_float+0x3b8>
 8022fde:	9b02      	ldr	r3, [sp, #8]
 8022fe0:	454b      	cmp	r3, r9
 8022fe2:	eba3 0209 	sub.w	r2, r3, r9
 8022fe6:	d123      	bne.n	8023030 <_scanf_float+0x3d0>
 8022fe8:	9901      	ldr	r1, [sp, #4]
 8022fea:	2200      	movs	r2, #0
 8022fec:	4640      	mov	r0, r8
 8022fee:	f002 fc7f 	bl	80258f0 <_strtod_r>
 8022ff2:	9b03      	ldr	r3, [sp, #12]
 8022ff4:	6821      	ldr	r1, [r4, #0]
 8022ff6:	681b      	ldr	r3, [r3, #0]
 8022ff8:	f011 0f02 	tst.w	r1, #2
 8022ffc:	ec57 6b10 	vmov	r6, r7, d0
 8023000:	f103 0204 	add.w	r2, r3, #4
 8023004:	d01f      	beq.n	8023046 <_scanf_float+0x3e6>
 8023006:	9903      	ldr	r1, [sp, #12]
 8023008:	600a      	str	r2, [r1, #0]
 802300a:	681b      	ldr	r3, [r3, #0]
 802300c:	e9c3 6700 	strd	r6, r7, [r3]
 8023010:	68e3      	ldr	r3, [r4, #12]
 8023012:	3301      	adds	r3, #1
 8023014:	60e3      	str	r3, [r4, #12]
 8023016:	e7d9      	b.n	8022fcc <_scanf_float+0x36c>
 8023018:	9b04      	ldr	r3, [sp, #16]
 802301a:	2b00      	cmp	r3, #0
 802301c:	d0e4      	beq.n	8022fe8 <_scanf_float+0x388>
 802301e:	9905      	ldr	r1, [sp, #20]
 8023020:	230a      	movs	r3, #10
 8023022:	3101      	adds	r1, #1
 8023024:	4640      	mov	r0, r8
 8023026:	f002 fce3 	bl	80259f0 <_strtol_r>
 802302a:	9b04      	ldr	r3, [sp, #16]
 802302c:	9e05      	ldr	r6, [sp, #20]
 802302e:	1ac2      	subs	r2, r0, r3
 8023030:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8023034:	429e      	cmp	r6, r3
 8023036:	bf28      	it	cs
 8023038:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 802303c:	4910      	ldr	r1, [pc, #64]	@ (8023080 <_scanf_float+0x420>)
 802303e:	4630      	mov	r0, r6
 8023040:	f000 f954 	bl	80232ec <siprintf>
 8023044:	e7d0      	b.n	8022fe8 <_scanf_float+0x388>
 8023046:	f011 0f04 	tst.w	r1, #4
 802304a:	9903      	ldr	r1, [sp, #12]
 802304c:	600a      	str	r2, [r1, #0]
 802304e:	d1dc      	bne.n	802300a <_scanf_float+0x3aa>
 8023050:	681d      	ldr	r5, [r3, #0]
 8023052:	4632      	mov	r2, r6
 8023054:	463b      	mov	r3, r7
 8023056:	4630      	mov	r0, r6
 8023058:	4639      	mov	r1, r7
 802305a:	f7f7 f867 	bl	801a12c <__aeabi_dcmpun>
 802305e:	b128      	cbz	r0, 802306c <_scanf_float+0x40c>
 8023060:	4808      	ldr	r0, [pc, #32]	@ (8023084 <_scanf_float+0x424>)
 8023062:	f000 faeb 	bl	802363c <nanf>
 8023066:	ed85 0a00 	vstr	s0, [r5]
 802306a:	e7d1      	b.n	8023010 <_scanf_float+0x3b0>
 802306c:	4630      	mov	r0, r6
 802306e:	4639      	mov	r1, r7
 8023070:	f7f7 f8ba 	bl	801a1e8 <__aeabi_d2f>
 8023074:	6028      	str	r0, [r5, #0]
 8023076:	e7cb      	b.n	8023010 <_scanf_float+0x3b0>
 8023078:	f04f 0900 	mov.w	r9, #0
 802307c:	e629      	b.n	8022cd2 <_scanf_float+0x72>
 802307e:	bf00      	nop
 8023080:	080446a4 	.word	0x080446a4
 8023084:	08044a3d 	.word	0x08044a3d

08023088 <std>:
 8023088:	2300      	movs	r3, #0
 802308a:	b510      	push	{r4, lr}
 802308c:	4604      	mov	r4, r0
 802308e:	e9c0 3300 	strd	r3, r3, [r0]
 8023092:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8023096:	6083      	str	r3, [r0, #8]
 8023098:	8181      	strh	r1, [r0, #12]
 802309a:	6643      	str	r3, [r0, #100]	@ 0x64
 802309c:	81c2      	strh	r2, [r0, #14]
 802309e:	6183      	str	r3, [r0, #24]
 80230a0:	4619      	mov	r1, r3
 80230a2:	2208      	movs	r2, #8
 80230a4:	305c      	adds	r0, #92	@ 0x5c
 80230a6:	f000 fa19 	bl	80234dc <memset>
 80230aa:	4b0d      	ldr	r3, [pc, #52]	@ (80230e0 <std+0x58>)
 80230ac:	6263      	str	r3, [r4, #36]	@ 0x24
 80230ae:	4b0d      	ldr	r3, [pc, #52]	@ (80230e4 <std+0x5c>)
 80230b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80230b2:	4b0d      	ldr	r3, [pc, #52]	@ (80230e8 <std+0x60>)
 80230b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80230b6:	4b0d      	ldr	r3, [pc, #52]	@ (80230ec <std+0x64>)
 80230b8:	6323      	str	r3, [r4, #48]	@ 0x30
 80230ba:	4b0d      	ldr	r3, [pc, #52]	@ (80230f0 <std+0x68>)
 80230bc:	6224      	str	r4, [r4, #32]
 80230be:	429c      	cmp	r4, r3
 80230c0:	d006      	beq.n	80230d0 <std+0x48>
 80230c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80230c6:	4294      	cmp	r4, r2
 80230c8:	d002      	beq.n	80230d0 <std+0x48>
 80230ca:	33d0      	adds	r3, #208	@ 0xd0
 80230cc:	429c      	cmp	r4, r3
 80230ce:	d105      	bne.n	80230dc <std+0x54>
 80230d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80230d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80230d8:	f000 ba9e 	b.w	8023618 <__retarget_lock_init_recursive>
 80230dc:	bd10      	pop	{r4, pc}
 80230de:	bf00      	nop
 80230e0:	0802332d 	.word	0x0802332d
 80230e4:	0802334f 	.word	0x0802334f
 80230e8:	08023387 	.word	0x08023387
 80230ec:	080233ab 	.word	0x080233ab
 80230f0:	20009d44 	.word	0x20009d44

080230f4 <stdio_exit_handler>:
 80230f4:	4a02      	ldr	r2, [pc, #8]	@ (8023100 <stdio_exit_handler+0xc>)
 80230f6:	4903      	ldr	r1, [pc, #12]	@ (8023104 <stdio_exit_handler+0x10>)
 80230f8:	4803      	ldr	r0, [pc, #12]	@ (8023108 <stdio_exit_handler+0x14>)
 80230fa:	f000 b869 	b.w	80231d0 <_fwalk_sglue>
 80230fe:	bf00      	nop
 8023100:	200007c0 	.word	0x200007c0
 8023104:	08026031 	.word	0x08026031
 8023108:	200007d0 	.word	0x200007d0

0802310c <cleanup_stdio>:
 802310c:	6841      	ldr	r1, [r0, #4]
 802310e:	4b0c      	ldr	r3, [pc, #48]	@ (8023140 <cleanup_stdio+0x34>)
 8023110:	4299      	cmp	r1, r3
 8023112:	b510      	push	{r4, lr}
 8023114:	4604      	mov	r4, r0
 8023116:	d001      	beq.n	802311c <cleanup_stdio+0x10>
 8023118:	f002 ff8a 	bl	8026030 <_fflush_r>
 802311c:	68a1      	ldr	r1, [r4, #8]
 802311e:	4b09      	ldr	r3, [pc, #36]	@ (8023144 <cleanup_stdio+0x38>)
 8023120:	4299      	cmp	r1, r3
 8023122:	d002      	beq.n	802312a <cleanup_stdio+0x1e>
 8023124:	4620      	mov	r0, r4
 8023126:	f002 ff83 	bl	8026030 <_fflush_r>
 802312a:	68e1      	ldr	r1, [r4, #12]
 802312c:	4b06      	ldr	r3, [pc, #24]	@ (8023148 <cleanup_stdio+0x3c>)
 802312e:	4299      	cmp	r1, r3
 8023130:	d004      	beq.n	802313c <cleanup_stdio+0x30>
 8023132:	4620      	mov	r0, r4
 8023134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023138:	f002 bf7a 	b.w	8026030 <_fflush_r>
 802313c:	bd10      	pop	{r4, pc}
 802313e:	bf00      	nop
 8023140:	20009d44 	.word	0x20009d44
 8023144:	20009dac 	.word	0x20009dac
 8023148:	20009e14 	.word	0x20009e14

0802314c <global_stdio_init.part.0>:
 802314c:	b510      	push	{r4, lr}
 802314e:	4b0b      	ldr	r3, [pc, #44]	@ (802317c <global_stdio_init.part.0+0x30>)
 8023150:	4c0b      	ldr	r4, [pc, #44]	@ (8023180 <global_stdio_init.part.0+0x34>)
 8023152:	4a0c      	ldr	r2, [pc, #48]	@ (8023184 <global_stdio_init.part.0+0x38>)
 8023154:	601a      	str	r2, [r3, #0]
 8023156:	4620      	mov	r0, r4
 8023158:	2200      	movs	r2, #0
 802315a:	2104      	movs	r1, #4
 802315c:	f7ff ff94 	bl	8023088 <std>
 8023160:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8023164:	2201      	movs	r2, #1
 8023166:	2109      	movs	r1, #9
 8023168:	f7ff ff8e 	bl	8023088 <std>
 802316c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8023170:	2202      	movs	r2, #2
 8023172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023176:	2112      	movs	r1, #18
 8023178:	f7ff bf86 	b.w	8023088 <std>
 802317c:	20009e7c 	.word	0x20009e7c
 8023180:	20009d44 	.word	0x20009d44
 8023184:	080230f5 	.word	0x080230f5

08023188 <__sfp_lock_acquire>:
 8023188:	4801      	ldr	r0, [pc, #4]	@ (8023190 <__sfp_lock_acquire+0x8>)
 802318a:	f000 ba46 	b.w	802361a <__retarget_lock_acquire_recursive>
 802318e:	bf00      	nop
 8023190:	20009e85 	.word	0x20009e85

08023194 <__sfp_lock_release>:
 8023194:	4801      	ldr	r0, [pc, #4]	@ (802319c <__sfp_lock_release+0x8>)
 8023196:	f000 ba41 	b.w	802361c <__retarget_lock_release_recursive>
 802319a:	bf00      	nop
 802319c:	20009e85 	.word	0x20009e85

080231a0 <__sinit>:
 80231a0:	b510      	push	{r4, lr}
 80231a2:	4604      	mov	r4, r0
 80231a4:	f7ff fff0 	bl	8023188 <__sfp_lock_acquire>
 80231a8:	6a23      	ldr	r3, [r4, #32]
 80231aa:	b11b      	cbz	r3, 80231b4 <__sinit+0x14>
 80231ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80231b0:	f7ff bff0 	b.w	8023194 <__sfp_lock_release>
 80231b4:	4b04      	ldr	r3, [pc, #16]	@ (80231c8 <__sinit+0x28>)
 80231b6:	6223      	str	r3, [r4, #32]
 80231b8:	4b04      	ldr	r3, [pc, #16]	@ (80231cc <__sinit+0x2c>)
 80231ba:	681b      	ldr	r3, [r3, #0]
 80231bc:	2b00      	cmp	r3, #0
 80231be:	d1f5      	bne.n	80231ac <__sinit+0xc>
 80231c0:	f7ff ffc4 	bl	802314c <global_stdio_init.part.0>
 80231c4:	e7f2      	b.n	80231ac <__sinit+0xc>
 80231c6:	bf00      	nop
 80231c8:	0802310d 	.word	0x0802310d
 80231cc:	20009e7c 	.word	0x20009e7c

080231d0 <_fwalk_sglue>:
 80231d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80231d4:	4607      	mov	r7, r0
 80231d6:	4688      	mov	r8, r1
 80231d8:	4614      	mov	r4, r2
 80231da:	2600      	movs	r6, #0
 80231dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80231e0:	f1b9 0901 	subs.w	r9, r9, #1
 80231e4:	d505      	bpl.n	80231f2 <_fwalk_sglue+0x22>
 80231e6:	6824      	ldr	r4, [r4, #0]
 80231e8:	2c00      	cmp	r4, #0
 80231ea:	d1f7      	bne.n	80231dc <_fwalk_sglue+0xc>
 80231ec:	4630      	mov	r0, r6
 80231ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80231f2:	89ab      	ldrh	r3, [r5, #12]
 80231f4:	2b01      	cmp	r3, #1
 80231f6:	d907      	bls.n	8023208 <_fwalk_sglue+0x38>
 80231f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80231fc:	3301      	adds	r3, #1
 80231fe:	d003      	beq.n	8023208 <_fwalk_sglue+0x38>
 8023200:	4629      	mov	r1, r5
 8023202:	4638      	mov	r0, r7
 8023204:	47c0      	blx	r8
 8023206:	4306      	orrs	r6, r0
 8023208:	3568      	adds	r5, #104	@ 0x68
 802320a:	e7e9      	b.n	80231e0 <_fwalk_sglue+0x10>

0802320c <iprintf>:
 802320c:	b40f      	push	{r0, r1, r2, r3}
 802320e:	b507      	push	{r0, r1, r2, lr}
 8023210:	4906      	ldr	r1, [pc, #24]	@ (802322c <iprintf+0x20>)
 8023212:	ab04      	add	r3, sp, #16
 8023214:	6808      	ldr	r0, [r1, #0]
 8023216:	f853 2b04 	ldr.w	r2, [r3], #4
 802321a:	6881      	ldr	r1, [r0, #8]
 802321c:	9301      	str	r3, [sp, #4]
 802321e:	f002 fd6b 	bl	8025cf8 <_vfiprintf_r>
 8023222:	b003      	add	sp, #12
 8023224:	f85d eb04 	ldr.w	lr, [sp], #4
 8023228:	b004      	add	sp, #16
 802322a:	4770      	bx	lr
 802322c:	200007cc 	.word	0x200007cc

08023230 <_puts_r>:
 8023230:	6a03      	ldr	r3, [r0, #32]
 8023232:	b570      	push	{r4, r5, r6, lr}
 8023234:	6884      	ldr	r4, [r0, #8]
 8023236:	4605      	mov	r5, r0
 8023238:	460e      	mov	r6, r1
 802323a:	b90b      	cbnz	r3, 8023240 <_puts_r+0x10>
 802323c:	f7ff ffb0 	bl	80231a0 <__sinit>
 8023240:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8023242:	07db      	lsls	r3, r3, #31
 8023244:	d405      	bmi.n	8023252 <_puts_r+0x22>
 8023246:	89a3      	ldrh	r3, [r4, #12]
 8023248:	0598      	lsls	r0, r3, #22
 802324a:	d402      	bmi.n	8023252 <_puts_r+0x22>
 802324c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802324e:	f000 f9e4 	bl	802361a <__retarget_lock_acquire_recursive>
 8023252:	89a3      	ldrh	r3, [r4, #12]
 8023254:	0719      	lsls	r1, r3, #28
 8023256:	d502      	bpl.n	802325e <_puts_r+0x2e>
 8023258:	6923      	ldr	r3, [r4, #16]
 802325a:	2b00      	cmp	r3, #0
 802325c:	d135      	bne.n	80232ca <_puts_r+0x9a>
 802325e:	4621      	mov	r1, r4
 8023260:	4628      	mov	r0, r5
 8023262:	f000 f8e5 	bl	8023430 <__swsetup_r>
 8023266:	b380      	cbz	r0, 80232ca <_puts_r+0x9a>
 8023268:	f04f 35ff 	mov.w	r5, #4294967295
 802326c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802326e:	07da      	lsls	r2, r3, #31
 8023270:	d405      	bmi.n	802327e <_puts_r+0x4e>
 8023272:	89a3      	ldrh	r3, [r4, #12]
 8023274:	059b      	lsls	r3, r3, #22
 8023276:	d402      	bmi.n	802327e <_puts_r+0x4e>
 8023278:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802327a:	f000 f9cf 	bl	802361c <__retarget_lock_release_recursive>
 802327e:	4628      	mov	r0, r5
 8023280:	bd70      	pop	{r4, r5, r6, pc}
 8023282:	2b00      	cmp	r3, #0
 8023284:	da04      	bge.n	8023290 <_puts_r+0x60>
 8023286:	69a2      	ldr	r2, [r4, #24]
 8023288:	429a      	cmp	r2, r3
 802328a:	dc17      	bgt.n	80232bc <_puts_r+0x8c>
 802328c:	290a      	cmp	r1, #10
 802328e:	d015      	beq.n	80232bc <_puts_r+0x8c>
 8023290:	6823      	ldr	r3, [r4, #0]
 8023292:	1c5a      	adds	r2, r3, #1
 8023294:	6022      	str	r2, [r4, #0]
 8023296:	7019      	strb	r1, [r3, #0]
 8023298:	68a3      	ldr	r3, [r4, #8]
 802329a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802329e:	3b01      	subs	r3, #1
 80232a0:	60a3      	str	r3, [r4, #8]
 80232a2:	2900      	cmp	r1, #0
 80232a4:	d1ed      	bne.n	8023282 <_puts_r+0x52>
 80232a6:	2b00      	cmp	r3, #0
 80232a8:	da11      	bge.n	80232ce <_puts_r+0x9e>
 80232aa:	4622      	mov	r2, r4
 80232ac:	210a      	movs	r1, #10
 80232ae:	4628      	mov	r0, r5
 80232b0:	f000 f87f 	bl	80233b2 <__swbuf_r>
 80232b4:	3001      	adds	r0, #1
 80232b6:	d0d7      	beq.n	8023268 <_puts_r+0x38>
 80232b8:	250a      	movs	r5, #10
 80232ba:	e7d7      	b.n	802326c <_puts_r+0x3c>
 80232bc:	4622      	mov	r2, r4
 80232be:	4628      	mov	r0, r5
 80232c0:	f000 f877 	bl	80233b2 <__swbuf_r>
 80232c4:	3001      	adds	r0, #1
 80232c6:	d1e7      	bne.n	8023298 <_puts_r+0x68>
 80232c8:	e7ce      	b.n	8023268 <_puts_r+0x38>
 80232ca:	3e01      	subs	r6, #1
 80232cc:	e7e4      	b.n	8023298 <_puts_r+0x68>
 80232ce:	6823      	ldr	r3, [r4, #0]
 80232d0:	1c5a      	adds	r2, r3, #1
 80232d2:	6022      	str	r2, [r4, #0]
 80232d4:	220a      	movs	r2, #10
 80232d6:	701a      	strb	r2, [r3, #0]
 80232d8:	e7ee      	b.n	80232b8 <_puts_r+0x88>
	...

080232dc <puts>:
 80232dc:	4b02      	ldr	r3, [pc, #8]	@ (80232e8 <puts+0xc>)
 80232de:	4601      	mov	r1, r0
 80232e0:	6818      	ldr	r0, [r3, #0]
 80232e2:	f7ff bfa5 	b.w	8023230 <_puts_r>
 80232e6:	bf00      	nop
 80232e8:	200007cc 	.word	0x200007cc

080232ec <siprintf>:
 80232ec:	b40e      	push	{r1, r2, r3}
 80232ee:	b500      	push	{lr}
 80232f0:	b09c      	sub	sp, #112	@ 0x70
 80232f2:	ab1d      	add	r3, sp, #116	@ 0x74
 80232f4:	9002      	str	r0, [sp, #8]
 80232f6:	9006      	str	r0, [sp, #24]
 80232f8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80232fc:	4809      	ldr	r0, [pc, #36]	@ (8023324 <siprintf+0x38>)
 80232fe:	9107      	str	r1, [sp, #28]
 8023300:	9104      	str	r1, [sp, #16]
 8023302:	4909      	ldr	r1, [pc, #36]	@ (8023328 <siprintf+0x3c>)
 8023304:	f853 2b04 	ldr.w	r2, [r3], #4
 8023308:	9105      	str	r1, [sp, #20]
 802330a:	6800      	ldr	r0, [r0, #0]
 802330c:	9301      	str	r3, [sp, #4]
 802330e:	a902      	add	r1, sp, #8
 8023310:	f002 fbcc 	bl	8025aac <_svfiprintf_r>
 8023314:	9b02      	ldr	r3, [sp, #8]
 8023316:	2200      	movs	r2, #0
 8023318:	701a      	strb	r2, [r3, #0]
 802331a:	b01c      	add	sp, #112	@ 0x70
 802331c:	f85d eb04 	ldr.w	lr, [sp], #4
 8023320:	b003      	add	sp, #12
 8023322:	4770      	bx	lr
 8023324:	200007cc 	.word	0x200007cc
 8023328:	ffff0208 	.word	0xffff0208

0802332c <__sread>:
 802332c:	b510      	push	{r4, lr}
 802332e:	460c      	mov	r4, r1
 8023330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023334:	f000 f912 	bl	802355c <_read_r>
 8023338:	2800      	cmp	r0, #0
 802333a:	bfab      	itete	ge
 802333c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802333e:	89a3      	ldrhlt	r3, [r4, #12]
 8023340:	181b      	addge	r3, r3, r0
 8023342:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8023346:	bfac      	ite	ge
 8023348:	6563      	strge	r3, [r4, #84]	@ 0x54
 802334a:	81a3      	strhlt	r3, [r4, #12]
 802334c:	bd10      	pop	{r4, pc}

0802334e <__swrite>:
 802334e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023352:	461f      	mov	r7, r3
 8023354:	898b      	ldrh	r3, [r1, #12]
 8023356:	05db      	lsls	r3, r3, #23
 8023358:	4605      	mov	r5, r0
 802335a:	460c      	mov	r4, r1
 802335c:	4616      	mov	r6, r2
 802335e:	d505      	bpl.n	802336c <__swrite+0x1e>
 8023360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023364:	2302      	movs	r3, #2
 8023366:	2200      	movs	r2, #0
 8023368:	f000 f8e6 	bl	8023538 <_lseek_r>
 802336c:	89a3      	ldrh	r3, [r4, #12]
 802336e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023372:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8023376:	81a3      	strh	r3, [r4, #12]
 8023378:	4632      	mov	r2, r6
 802337a:	463b      	mov	r3, r7
 802337c:	4628      	mov	r0, r5
 802337e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023382:	f000 b90d 	b.w	80235a0 <_write_r>

08023386 <__sseek>:
 8023386:	b510      	push	{r4, lr}
 8023388:	460c      	mov	r4, r1
 802338a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802338e:	f000 f8d3 	bl	8023538 <_lseek_r>
 8023392:	1c43      	adds	r3, r0, #1
 8023394:	89a3      	ldrh	r3, [r4, #12]
 8023396:	bf15      	itete	ne
 8023398:	6560      	strne	r0, [r4, #84]	@ 0x54
 802339a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802339e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80233a2:	81a3      	strheq	r3, [r4, #12]
 80233a4:	bf18      	it	ne
 80233a6:	81a3      	strhne	r3, [r4, #12]
 80233a8:	bd10      	pop	{r4, pc}

080233aa <__sclose>:
 80233aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80233ae:	f000 b8b3 	b.w	8023518 <_close_r>

080233b2 <__swbuf_r>:
 80233b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80233b4:	460e      	mov	r6, r1
 80233b6:	4614      	mov	r4, r2
 80233b8:	4605      	mov	r5, r0
 80233ba:	b118      	cbz	r0, 80233c4 <__swbuf_r+0x12>
 80233bc:	6a03      	ldr	r3, [r0, #32]
 80233be:	b90b      	cbnz	r3, 80233c4 <__swbuf_r+0x12>
 80233c0:	f7ff feee 	bl	80231a0 <__sinit>
 80233c4:	69a3      	ldr	r3, [r4, #24]
 80233c6:	60a3      	str	r3, [r4, #8]
 80233c8:	89a3      	ldrh	r3, [r4, #12]
 80233ca:	071a      	lsls	r2, r3, #28
 80233cc:	d501      	bpl.n	80233d2 <__swbuf_r+0x20>
 80233ce:	6923      	ldr	r3, [r4, #16]
 80233d0:	b943      	cbnz	r3, 80233e4 <__swbuf_r+0x32>
 80233d2:	4621      	mov	r1, r4
 80233d4:	4628      	mov	r0, r5
 80233d6:	f000 f82b 	bl	8023430 <__swsetup_r>
 80233da:	b118      	cbz	r0, 80233e4 <__swbuf_r+0x32>
 80233dc:	f04f 37ff 	mov.w	r7, #4294967295
 80233e0:	4638      	mov	r0, r7
 80233e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80233e4:	6823      	ldr	r3, [r4, #0]
 80233e6:	6922      	ldr	r2, [r4, #16]
 80233e8:	1a98      	subs	r0, r3, r2
 80233ea:	6963      	ldr	r3, [r4, #20]
 80233ec:	b2f6      	uxtb	r6, r6
 80233ee:	4283      	cmp	r3, r0
 80233f0:	4637      	mov	r7, r6
 80233f2:	dc05      	bgt.n	8023400 <__swbuf_r+0x4e>
 80233f4:	4621      	mov	r1, r4
 80233f6:	4628      	mov	r0, r5
 80233f8:	f002 fe1a 	bl	8026030 <_fflush_r>
 80233fc:	2800      	cmp	r0, #0
 80233fe:	d1ed      	bne.n	80233dc <__swbuf_r+0x2a>
 8023400:	68a3      	ldr	r3, [r4, #8]
 8023402:	3b01      	subs	r3, #1
 8023404:	60a3      	str	r3, [r4, #8]
 8023406:	6823      	ldr	r3, [r4, #0]
 8023408:	1c5a      	adds	r2, r3, #1
 802340a:	6022      	str	r2, [r4, #0]
 802340c:	701e      	strb	r6, [r3, #0]
 802340e:	6962      	ldr	r2, [r4, #20]
 8023410:	1c43      	adds	r3, r0, #1
 8023412:	429a      	cmp	r2, r3
 8023414:	d004      	beq.n	8023420 <__swbuf_r+0x6e>
 8023416:	89a3      	ldrh	r3, [r4, #12]
 8023418:	07db      	lsls	r3, r3, #31
 802341a:	d5e1      	bpl.n	80233e0 <__swbuf_r+0x2e>
 802341c:	2e0a      	cmp	r6, #10
 802341e:	d1df      	bne.n	80233e0 <__swbuf_r+0x2e>
 8023420:	4621      	mov	r1, r4
 8023422:	4628      	mov	r0, r5
 8023424:	f002 fe04 	bl	8026030 <_fflush_r>
 8023428:	2800      	cmp	r0, #0
 802342a:	d0d9      	beq.n	80233e0 <__swbuf_r+0x2e>
 802342c:	e7d6      	b.n	80233dc <__swbuf_r+0x2a>
	...

08023430 <__swsetup_r>:
 8023430:	b538      	push	{r3, r4, r5, lr}
 8023432:	4b29      	ldr	r3, [pc, #164]	@ (80234d8 <__swsetup_r+0xa8>)
 8023434:	4605      	mov	r5, r0
 8023436:	6818      	ldr	r0, [r3, #0]
 8023438:	460c      	mov	r4, r1
 802343a:	b118      	cbz	r0, 8023444 <__swsetup_r+0x14>
 802343c:	6a03      	ldr	r3, [r0, #32]
 802343e:	b90b      	cbnz	r3, 8023444 <__swsetup_r+0x14>
 8023440:	f7ff feae 	bl	80231a0 <__sinit>
 8023444:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023448:	0719      	lsls	r1, r3, #28
 802344a:	d422      	bmi.n	8023492 <__swsetup_r+0x62>
 802344c:	06da      	lsls	r2, r3, #27
 802344e:	d407      	bmi.n	8023460 <__swsetup_r+0x30>
 8023450:	2209      	movs	r2, #9
 8023452:	602a      	str	r2, [r5, #0]
 8023454:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023458:	81a3      	strh	r3, [r4, #12]
 802345a:	f04f 30ff 	mov.w	r0, #4294967295
 802345e:	e033      	b.n	80234c8 <__swsetup_r+0x98>
 8023460:	0758      	lsls	r0, r3, #29
 8023462:	d512      	bpl.n	802348a <__swsetup_r+0x5a>
 8023464:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8023466:	b141      	cbz	r1, 802347a <__swsetup_r+0x4a>
 8023468:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802346c:	4299      	cmp	r1, r3
 802346e:	d002      	beq.n	8023476 <__swsetup_r+0x46>
 8023470:	4628      	mov	r0, r5
 8023472:	f000 ff35 	bl	80242e0 <_free_r>
 8023476:	2300      	movs	r3, #0
 8023478:	6363      	str	r3, [r4, #52]	@ 0x34
 802347a:	89a3      	ldrh	r3, [r4, #12]
 802347c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8023480:	81a3      	strh	r3, [r4, #12]
 8023482:	2300      	movs	r3, #0
 8023484:	6063      	str	r3, [r4, #4]
 8023486:	6923      	ldr	r3, [r4, #16]
 8023488:	6023      	str	r3, [r4, #0]
 802348a:	89a3      	ldrh	r3, [r4, #12]
 802348c:	f043 0308 	orr.w	r3, r3, #8
 8023490:	81a3      	strh	r3, [r4, #12]
 8023492:	6923      	ldr	r3, [r4, #16]
 8023494:	b94b      	cbnz	r3, 80234aa <__swsetup_r+0x7a>
 8023496:	89a3      	ldrh	r3, [r4, #12]
 8023498:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802349c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80234a0:	d003      	beq.n	80234aa <__swsetup_r+0x7a>
 80234a2:	4621      	mov	r1, r4
 80234a4:	4628      	mov	r0, r5
 80234a6:	f002 fe11 	bl	80260cc <__smakebuf_r>
 80234aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80234ae:	f013 0201 	ands.w	r2, r3, #1
 80234b2:	d00a      	beq.n	80234ca <__swsetup_r+0x9a>
 80234b4:	2200      	movs	r2, #0
 80234b6:	60a2      	str	r2, [r4, #8]
 80234b8:	6962      	ldr	r2, [r4, #20]
 80234ba:	4252      	negs	r2, r2
 80234bc:	61a2      	str	r2, [r4, #24]
 80234be:	6922      	ldr	r2, [r4, #16]
 80234c0:	b942      	cbnz	r2, 80234d4 <__swsetup_r+0xa4>
 80234c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80234c6:	d1c5      	bne.n	8023454 <__swsetup_r+0x24>
 80234c8:	bd38      	pop	{r3, r4, r5, pc}
 80234ca:	0799      	lsls	r1, r3, #30
 80234cc:	bf58      	it	pl
 80234ce:	6962      	ldrpl	r2, [r4, #20]
 80234d0:	60a2      	str	r2, [r4, #8]
 80234d2:	e7f4      	b.n	80234be <__swsetup_r+0x8e>
 80234d4:	2000      	movs	r0, #0
 80234d6:	e7f7      	b.n	80234c8 <__swsetup_r+0x98>
 80234d8:	200007cc 	.word	0x200007cc

080234dc <memset>:
 80234dc:	4402      	add	r2, r0
 80234de:	4603      	mov	r3, r0
 80234e0:	4293      	cmp	r3, r2
 80234e2:	d100      	bne.n	80234e6 <memset+0xa>
 80234e4:	4770      	bx	lr
 80234e6:	f803 1b01 	strb.w	r1, [r3], #1
 80234ea:	e7f9      	b.n	80234e0 <memset+0x4>

080234ec <strncmp>:
 80234ec:	b510      	push	{r4, lr}
 80234ee:	b16a      	cbz	r2, 802350c <strncmp+0x20>
 80234f0:	3901      	subs	r1, #1
 80234f2:	1884      	adds	r4, r0, r2
 80234f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80234f8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80234fc:	429a      	cmp	r2, r3
 80234fe:	d103      	bne.n	8023508 <strncmp+0x1c>
 8023500:	42a0      	cmp	r0, r4
 8023502:	d001      	beq.n	8023508 <strncmp+0x1c>
 8023504:	2a00      	cmp	r2, #0
 8023506:	d1f5      	bne.n	80234f4 <strncmp+0x8>
 8023508:	1ad0      	subs	r0, r2, r3
 802350a:	bd10      	pop	{r4, pc}
 802350c:	4610      	mov	r0, r2
 802350e:	e7fc      	b.n	802350a <strncmp+0x1e>

08023510 <_localeconv_r>:
 8023510:	4800      	ldr	r0, [pc, #0]	@ (8023514 <_localeconv_r+0x4>)
 8023512:	4770      	bx	lr
 8023514:	2000090c 	.word	0x2000090c

08023518 <_close_r>:
 8023518:	b538      	push	{r3, r4, r5, lr}
 802351a:	4d06      	ldr	r5, [pc, #24]	@ (8023534 <_close_r+0x1c>)
 802351c:	2300      	movs	r3, #0
 802351e:	4604      	mov	r4, r0
 8023520:	4608      	mov	r0, r1
 8023522:	602b      	str	r3, [r5, #0]
 8023524:	f7de fd83 	bl	800202e <_close>
 8023528:	1c43      	adds	r3, r0, #1
 802352a:	d102      	bne.n	8023532 <_close_r+0x1a>
 802352c:	682b      	ldr	r3, [r5, #0]
 802352e:	b103      	cbz	r3, 8023532 <_close_r+0x1a>
 8023530:	6023      	str	r3, [r4, #0]
 8023532:	bd38      	pop	{r3, r4, r5, pc}
 8023534:	20009e80 	.word	0x20009e80

08023538 <_lseek_r>:
 8023538:	b538      	push	{r3, r4, r5, lr}
 802353a:	4d07      	ldr	r5, [pc, #28]	@ (8023558 <_lseek_r+0x20>)
 802353c:	4604      	mov	r4, r0
 802353e:	4608      	mov	r0, r1
 8023540:	4611      	mov	r1, r2
 8023542:	2200      	movs	r2, #0
 8023544:	602a      	str	r2, [r5, #0]
 8023546:	461a      	mov	r2, r3
 8023548:	f7de fd98 	bl	800207c <_lseek>
 802354c:	1c43      	adds	r3, r0, #1
 802354e:	d102      	bne.n	8023556 <_lseek_r+0x1e>
 8023550:	682b      	ldr	r3, [r5, #0]
 8023552:	b103      	cbz	r3, 8023556 <_lseek_r+0x1e>
 8023554:	6023      	str	r3, [r4, #0]
 8023556:	bd38      	pop	{r3, r4, r5, pc}
 8023558:	20009e80 	.word	0x20009e80

0802355c <_read_r>:
 802355c:	b538      	push	{r3, r4, r5, lr}
 802355e:	4d07      	ldr	r5, [pc, #28]	@ (802357c <_read_r+0x20>)
 8023560:	4604      	mov	r4, r0
 8023562:	4608      	mov	r0, r1
 8023564:	4611      	mov	r1, r2
 8023566:	2200      	movs	r2, #0
 8023568:	602a      	str	r2, [r5, #0]
 802356a:	461a      	mov	r2, r3
 802356c:	f7de fd26 	bl	8001fbc <_read>
 8023570:	1c43      	adds	r3, r0, #1
 8023572:	d102      	bne.n	802357a <_read_r+0x1e>
 8023574:	682b      	ldr	r3, [r5, #0]
 8023576:	b103      	cbz	r3, 802357a <_read_r+0x1e>
 8023578:	6023      	str	r3, [r4, #0]
 802357a:	bd38      	pop	{r3, r4, r5, pc}
 802357c:	20009e80 	.word	0x20009e80

08023580 <_sbrk_r>:
 8023580:	b538      	push	{r3, r4, r5, lr}
 8023582:	4d06      	ldr	r5, [pc, #24]	@ (802359c <_sbrk_r+0x1c>)
 8023584:	2300      	movs	r3, #0
 8023586:	4604      	mov	r4, r0
 8023588:	4608      	mov	r0, r1
 802358a:	602b      	str	r3, [r5, #0]
 802358c:	f7de fdf8 	bl	8002180 <_sbrk>
 8023590:	1c43      	adds	r3, r0, #1
 8023592:	d102      	bne.n	802359a <_sbrk_r+0x1a>
 8023594:	682b      	ldr	r3, [r5, #0]
 8023596:	b103      	cbz	r3, 802359a <_sbrk_r+0x1a>
 8023598:	6023      	str	r3, [r4, #0]
 802359a:	bd38      	pop	{r3, r4, r5, pc}
 802359c:	20009e80 	.word	0x20009e80

080235a0 <_write_r>:
 80235a0:	b538      	push	{r3, r4, r5, lr}
 80235a2:	4d07      	ldr	r5, [pc, #28]	@ (80235c0 <_write_r+0x20>)
 80235a4:	4604      	mov	r4, r0
 80235a6:	4608      	mov	r0, r1
 80235a8:	4611      	mov	r1, r2
 80235aa:	2200      	movs	r2, #0
 80235ac:	602a      	str	r2, [r5, #0]
 80235ae:	461a      	mov	r2, r3
 80235b0:	f7de fd21 	bl	8001ff6 <_write>
 80235b4:	1c43      	adds	r3, r0, #1
 80235b6:	d102      	bne.n	80235be <_write_r+0x1e>
 80235b8:	682b      	ldr	r3, [r5, #0]
 80235ba:	b103      	cbz	r3, 80235be <_write_r+0x1e>
 80235bc:	6023      	str	r3, [r4, #0]
 80235be:	bd38      	pop	{r3, r4, r5, pc}
 80235c0:	20009e80 	.word	0x20009e80

080235c4 <__errno>:
 80235c4:	4b01      	ldr	r3, [pc, #4]	@ (80235cc <__errno+0x8>)
 80235c6:	6818      	ldr	r0, [r3, #0]
 80235c8:	4770      	bx	lr
 80235ca:	bf00      	nop
 80235cc:	200007cc 	.word	0x200007cc

080235d0 <__libc_init_array>:
 80235d0:	b570      	push	{r4, r5, r6, lr}
 80235d2:	4d0d      	ldr	r5, [pc, #52]	@ (8023608 <__libc_init_array+0x38>)
 80235d4:	4c0d      	ldr	r4, [pc, #52]	@ (802360c <__libc_init_array+0x3c>)
 80235d6:	1b64      	subs	r4, r4, r5
 80235d8:	10a4      	asrs	r4, r4, #2
 80235da:	2600      	movs	r6, #0
 80235dc:	42a6      	cmp	r6, r4
 80235de:	d109      	bne.n	80235f4 <__libc_init_array+0x24>
 80235e0:	4d0b      	ldr	r5, [pc, #44]	@ (8023610 <__libc_init_array+0x40>)
 80235e2:	4c0c      	ldr	r4, [pc, #48]	@ (8023614 <__libc_init_array+0x44>)
 80235e4:	f005 fce4 	bl	8028fb0 <_init>
 80235e8:	1b64      	subs	r4, r4, r5
 80235ea:	10a4      	asrs	r4, r4, #2
 80235ec:	2600      	movs	r6, #0
 80235ee:	42a6      	cmp	r6, r4
 80235f0:	d105      	bne.n	80235fe <__libc_init_array+0x2e>
 80235f2:	bd70      	pop	{r4, r5, r6, pc}
 80235f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80235f8:	4798      	blx	r3
 80235fa:	3601      	adds	r6, #1
 80235fc:	e7ee      	b.n	80235dc <__libc_init_array+0xc>
 80235fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8023602:	4798      	blx	r3
 8023604:	3601      	adds	r6, #1
 8023606:	e7f2      	b.n	80235ee <__libc_init_array+0x1e>
 8023608:	08044cf8 	.word	0x08044cf8
 802360c:	08044cf8 	.word	0x08044cf8
 8023610:	08044cf8 	.word	0x08044cf8
 8023614:	08044cfc 	.word	0x08044cfc

08023618 <__retarget_lock_init_recursive>:
 8023618:	4770      	bx	lr

0802361a <__retarget_lock_acquire_recursive>:
 802361a:	4770      	bx	lr

0802361c <__retarget_lock_release_recursive>:
 802361c:	4770      	bx	lr

0802361e <memcpy>:
 802361e:	440a      	add	r2, r1
 8023620:	4291      	cmp	r1, r2
 8023622:	f100 33ff 	add.w	r3, r0, #4294967295
 8023626:	d100      	bne.n	802362a <memcpy+0xc>
 8023628:	4770      	bx	lr
 802362a:	b510      	push	{r4, lr}
 802362c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8023630:	f803 4f01 	strb.w	r4, [r3, #1]!
 8023634:	4291      	cmp	r1, r2
 8023636:	d1f9      	bne.n	802362c <memcpy+0xe>
 8023638:	bd10      	pop	{r4, pc}
	...

0802363c <nanf>:
 802363c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8023644 <nanf+0x8>
 8023640:	4770      	bx	lr
 8023642:	bf00      	nop
 8023644:	7fc00000 	.word	0x7fc00000

08023648 <quorem>:
 8023648:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802364c:	6903      	ldr	r3, [r0, #16]
 802364e:	690c      	ldr	r4, [r1, #16]
 8023650:	42a3      	cmp	r3, r4
 8023652:	4607      	mov	r7, r0
 8023654:	db7e      	blt.n	8023754 <quorem+0x10c>
 8023656:	3c01      	subs	r4, #1
 8023658:	f101 0814 	add.w	r8, r1, #20
 802365c:	00a3      	lsls	r3, r4, #2
 802365e:	f100 0514 	add.w	r5, r0, #20
 8023662:	9300      	str	r3, [sp, #0]
 8023664:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8023668:	9301      	str	r3, [sp, #4]
 802366a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802366e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8023672:	3301      	adds	r3, #1
 8023674:	429a      	cmp	r2, r3
 8023676:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 802367a:	fbb2 f6f3 	udiv	r6, r2, r3
 802367e:	d32e      	bcc.n	80236de <quorem+0x96>
 8023680:	f04f 0a00 	mov.w	sl, #0
 8023684:	46c4      	mov	ip, r8
 8023686:	46ae      	mov	lr, r5
 8023688:	46d3      	mov	fp, sl
 802368a:	f85c 3b04 	ldr.w	r3, [ip], #4
 802368e:	b298      	uxth	r0, r3
 8023690:	fb06 a000 	mla	r0, r6, r0, sl
 8023694:	0c02      	lsrs	r2, r0, #16
 8023696:	0c1b      	lsrs	r3, r3, #16
 8023698:	fb06 2303 	mla	r3, r6, r3, r2
 802369c:	f8de 2000 	ldr.w	r2, [lr]
 80236a0:	b280      	uxth	r0, r0
 80236a2:	b292      	uxth	r2, r2
 80236a4:	1a12      	subs	r2, r2, r0
 80236a6:	445a      	add	r2, fp
 80236a8:	f8de 0000 	ldr.w	r0, [lr]
 80236ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80236b0:	b29b      	uxth	r3, r3
 80236b2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80236b6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80236ba:	b292      	uxth	r2, r2
 80236bc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80236c0:	45e1      	cmp	r9, ip
 80236c2:	f84e 2b04 	str.w	r2, [lr], #4
 80236c6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80236ca:	d2de      	bcs.n	802368a <quorem+0x42>
 80236cc:	9b00      	ldr	r3, [sp, #0]
 80236ce:	58eb      	ldr	r3, [r5, r3]
 80236d0:	b92b      	cbnz	r3, 80236de <quorem+0x96>
 80236d2:	9b01      	ldr	r3, [sp, #4]
 80236d4:	3b04      	subs	r3, #4
 80236d6:	429d      	cmp	r5, r3
 80236d8:	461a      	mov	r2, r3
 80236da:	d32f      	bcc.n	802373c <quorem+0xf4>
 80236dc:	613c      	str	r4, [r7, #16]
 80236de:	4638      	mov	r0, r7
 80236e0:	f001 f90c 	bl	80248fc <__mcmp>
 80236e4:	2800      	cmp	r0, #0
 80236e6:	db25      	blt.n	8023734 <quorem+0xec>
 80236e8:	4629      	mov	r1, r5
 80236ea:	2000      	movs	r0, #0
 80236ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80236f0:	f8d1 c000 	ldr.w	ip, [r1]
 80236f4:	fa1f fe82 	uxth.w	lr, r2
 80236f8:	fa1f f38c 	uxth.w	r3, ip
 80236fc:	eba3 030e 	sub.w	r3, r3, lr
 8023700:	4403      	add	r3, r0
 8023702:	0c12      	lsrs	r2, r2, #16
 8023704:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8023708:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 802370c:	b29b      	uxth	r3, r3
 802370e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8023712:	45c1      	cmp	r9, r8
 8023714:	f841 3b04 	str.w	r3, [r1], #4
 8023718:	ea4f 4022 	mov.w	r0, r2, asr #16
 802371c:	d2e6      	bcs.n	80236ec <quorem+0xa4>
 802371e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8023722:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8023726:	b922      	cbnz	r2, 8023732 <quorem+0xea>
 8023728:	3b04      	subs	r3, #4
 802372a:	429d      	cmp	r5, r3
 802372c:	461a      	mov	r2, r3
 802372e:	d30b      	bcc.n	8023748 <quorem+0x100>
 8023730:	613c      	str	r4, [r7, #16]
 8023732:	3601      	adds	r6, #1
 8023734:	4630      	mov	r0, r6
 8023736:	b003      	add	sp, #12
 8023738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802373c:	6812      	ldr	r2, [r2, #0]
 802373e:	3b04      	subs	r3, #4
 8023740:	2a00      	cmp	r2, #0
 8023742:	d1cb      	bne.n	80236dc <quorem+0x94>
 8023744:	3c01      	subs	r4, #1
 8023746:	e7c6      	b.n	80236d6 <quorem+0x8e>
 8023748:	6812      	ldr	r2, [r2, #0]
 802374a:	3b04      	subs	r3, #4
 802374c:	2a00      	cmp	r2, #0
 802374e:	d1ef      	bne.n	8023730 <quorem+0xe8>
 8023750:	3c01      	subs	r4, #1
 8023752:	e7ea      	b.n	802372a <quorem+0xe2>
 8023754:	2000      	movs	r0, #0
 8023756:	e7ee      	b.n	8023736 <quorem+0xee>

08023758 <_dtoa_r>:
 8023758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802375c:	69c7      	ldr	r7, [r0, #28]
 802375e:	b099      	sub	sp, #100	@ 0x64
 8023760:	ed8d 0b02 	vstr	d0, [sp, #8]
 8023764:	ec55 4b10 	vmov	r4, r5, d0
 8023768:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 802376a:	9109      	str	r1, [sp, #36]	@ 0x24
 802376c:	4683      	mov	fp, r0
 802376e:	920e      	str	r2, [sp, #56]	@ 0x38
 8023770:	9313      	str	r3, [sp, #76]	@ 0x4c
 8023772:	b97f      	cbnz	r7, 8023794 <_dtoa_r+0x3c>
 8023774:	2010      	movs	r0, #16
 8023776:	f7fe fd37 	bl	80221e8 <malloc>
 802377a:	4602      	mov	r2, r0
 802377c:	f8cb 001c 	str.w	r0, [fp, #28]
 8023780:	b920      	cbnz	r0, 802378c <_dtoa_r+0x34>
 8023782:	4ba7      	ldr	r3, [pc, #668]	@ (8023a20 <_dtoa_r+0x2c8>)
 8023784:	21ef      	movs	r1, #239	@ 0xef
 8023786:	48a7      	ldr	r0, [pc, #668]	@ (8023a24 <_dtoa_r+0x2cc>)
 8023788:	f002 fd22 	bl	80261d0 <__assert_func>
 802378c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8023790:	6007      	str	r7, [r0, #0]
 8023792:	60c7      	str	r7, [r0, #12]
 8023794:	f8db 301c 	ldr.w	r3, [fp, #28]
 8023798:	6819      	ldr	r1, [r3, #0]
 802379a:	b159      	cbz	r1, 80237b4 <_dtoa_r+0x5c>
 802379c:	685a      	ldr	r2, [r3, #4]
 802379e:	604a      	str	r2, [r1, #4]
 80237a0:	2301      	movs	r3, #1
 80237a2:	4093      	lsls	r3, r2
 80237a4:	608b      	str	r3, [r1, #8]
 80237a6:	4658      	mov	r0, fp
 80237a8:	f000 fe24 	bl	80243f4 <_Bfree>
 80237ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80237b0:	2200      	movs	r2, #0
 80237b2:	601a      	str	r2, [r3, #0]
 80237b4:	1e2b      	subs	r3, r5, #0
 80237b6:	bfb9      	ittee	lt
 80237b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80237bc:	9303      	strlt	r3, [sp, #12]
 80237be:	2300      	movge	r3, #0
 80237c0:	6033      	strge	r3, [r6, #0]
 80237c2:	9f03      	ldr	r7, [sp, #12]
 80237c4:	4b98      	ldr	r3, [pc, #608]	@ (8023a28 <_dtoa_r+0x2d0>)
 80237c6:	bfbc      	itt	lt
 80237c8:	2201      	movlt	r2, #1
 80237ca:	6032      	strlt	r2, [r6, #0]
 80237cc:	43bb      	bics	r3, r7
 80237ce:	d112      	bne.n	80237f6 <_dtoa_r+0x9e>
 80237d0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80237d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80237d6:	6013      	str	r3, [r2, #0]
 80237d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80237dc:	4323      	orrs	r3, r4
 80237de:	f000 854d 	beq.w	802427c <_dtoa_r+0xb24>
 80237e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80237e4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8023a3c <_dtoa_r+0x2e4>
 80237e8:	2b00      	cmp	r3, #0
 80237ea:	f000 854f 	beq.w	802428c <_dtoa_r+0xb34>
 80237ee:	f10a 0303 	add.w	r3, sl, #3
 80237f2:	f000 bd49 	b.w	8024288 <_dtoa_r+0xb30>
 80237f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80237fa:	2200      	movs	r2, #0
 80237fc:	ec51 0b17 	vmov	r0, r1, d7
 8023800:	2300      	movs	r3, #0
 8023802:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8023806:	f7f6 fc5f 	bl	801a0c8 <__aeabi_dcmpeq>
 802380a:	4680      	mov	r8, r0
 802380c:	b158      	cbz	r0, 8023826 <_dtoa_r+0xce>
 802380e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8023810:	2301      	movs	r3, #1
 8023812:	6013      	str	r3, [r2, #0]
 8023814:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8023816:	b113      	cbz	r3, 802381e <_dtoa_r+0xc6>
 8023818:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802381a:	4b84      	ldr	r3, [pc, #528]	@ (8023a2c <_dtoa_r+0x2d4>)
 802381c:	6013      	str	r3, [r2, #0]
 802381e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8023a40 <_dtoa_r+0x2e8>
 8023822:	f000 bd33 	b.w	802428c <_dtoa_r+0xb34>
 8023826:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 802382a:	aa16      	add	r2, sp, #88	@ 0x58
 802382c:	a917      	add	r1, sp, #92	@ 0x5c
 802382e:	4658      	mov	r0, fp
 8023830:	f001 f984 	bl	8024b3c <__d2b>
 8023834:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8023838:	4681      	mov	r9, r0
 802383a:	2e00      	cmp	r6, #0
 802383c:	d077      	beq.n	802392e <_dtoa_r+0x1d6>
 802383e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023840:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8023844:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8023848:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802384c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8023850:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8023854:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8023858:	4619      	mov	r1, r3
 802385a:	2200      	movs	r2, #0
 802385c:	4b74      	ldr	r3, [pc, #464]	@ (8023a30 <_dtoa_r+0x2d8>)
 802385e:	f7f6 f813 	bl	8019888 <__aeabi_dsub>
 8023862:	a369      	add	r3, pc, #420	@ (adr r3, 8023a08 <_dtoa_r+0x2b0>)
 8023864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023868:	f7f6 f9c6 	bl	8019bf8 <__aeabi_dmul>
 802386c:	a368      	add	r3, pc, #416	@ (adr r3, 8023a10 <_dtoa_r+0x2b8>)
 802386e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023872:	f7f6 f80b 	bl	801988c <__adddf3>
 8023876:	4604      	mov	r4, r0
 8023878:	4630      	mov	r0, r6
 802387a:	460d      	mov	r5, r1
 802387c:	f7f6 f952 	bl	8019b24 <__aeabi_i2d>
 8023880:	a365      	add	r3, pc, #404	@ (adr r3, 8023a18 <_dtoa_r+0x2c0>)
 8023882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023886:	f7f6 f9b7 	bl	8019bf8 <__aeabi_dmul>
 802388a:	4602      	mov	r2, r0
 802388c:	460b      	mov	r3, r1
 802388e:	4620      	mov	r0, r4
 8023890:	4629      	mov	r1, r5
 8023892:	f7f5 fffb 	bl	801988c <__adddf3>
 8023896:	4604      	mov	r4, r0
 8023898:	460d      	mov	r5, r1
 802389a:	f7f6 fc5d 	bl	801a158 <__aeabi_d2iz>
 802389e:	2200      	movs	r2, #0
 80238a0:	4607      	mov	r7, r0
 80238a2:	2300      	movs	r3, #0
 80238a4:	4620      	mov	r0, r4
 80238a6:	4629      	mov	r1, r5
 80238a8:	f7f6 fc18 	bl	801a0dc <__aeabi_dcmplt>
 80238ac:	b140      	cbz	r0, 80238c0 <_dtoa_r+0x168>
 80238ae:	4638      	mov	r0, r7
 80238b0:	f7f6 f938 	bl	8019b24 <__aeabi_i2d>
 80238b4:	4622      	mov	r2, r4
 80238b6:	462b      	mov	r3, r5
 80238b8:	f7f6 fc06 	bl	801a0c8 <__aeabi_dcmpeq>
 80238bc:	b900      	cbnz	r0, 80238c0 <_dtoa_r+0x168>
 80238be:	3f01      	subs	r7, #1
 80238c0:	2f16      	cmp	r7, #22
 80238c2:	d851      	bhi.n	8023968 <_dtoa_r+0x210>
 80238c4:	4b5b      	ldr	r3, [pc, #364]	@ (8023a34 <_dtoa_r+0x2dc>)
 80238c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80238ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80238ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80238d2:	f7f6 fc03 	bl	801a0dc <__aeabi_dcmplt>
 80238d6:	2800      	cmp	r0, #0
 80238d8:	d048      	beq.n	802396c <_dtoa_r+0x214>
 80238da:	3f01      	subs	r7, #1
 80238dc:	2300      	movs	r3, #0
 80238de:	9312      	str	r3, [sp, #72]	@ 0x48
 80238e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80238e2:	1b9b      	subs	r3, r3, r6
 80238e4:	1e5a      	subs	r2, r3, #1
 80238e6:	bf44      	itt	mi
 80238e8:	f1c3 0801 	rsbmi	r8, r3, #1
 80238ec:	2300      	movmi	r3, #0
 80238ee:	9208      	str	r2, [sp, #32]
 80238f0:	bf54      	ite	pl
 80238f2:	f04f 0800 	movpl.w	r8, #0
 80238f6:	9308      	strmi	r3, [sp, #32]
 80238f8:	2f00      	cmp	r7, #0
 80238fa:	db39      	blt.n	8023970 <_dtoa_r+0x218>
 80238fc:	9b08      	ldr	r3, [sp, #32]
 80238fe:	970f      	str	r7, [sp, #60]	@ 0x3c
 8023900:	443b      	add	r3, r7
 8023902:	9308      	str	r3, [sp, #32]
 8023904:	2300      	movs	r3, #0
 8023906:	930a      	str	r3, [sp, #40]	@ 0x28
 8023908:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802390a:	2b09      	cmp	r3, #9
 802390c:	d864      	bhi.n	80239d8 <_dtoa_r+0x280>
 802390e:	2b05      	cmp	r3, #5
 8023910:	bfc4      	itt	gt
 8023912:	3b04      	subgt	r3, #4
 8023914:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8023916:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023918:	f1a3 0302 	sub.w	r3, r3, #2
 802391c:	bfcc      	ite	gt
 802391e:	2400      	movgt	r4, #0
 8023920:	2401      	movle	r4, #1
 8023922:	2b03      	cmp	r3, #3
 8023924:	d863      	bhi.n	80239ee <_dtoa_r+0x296>
 8023926:	e8df f003 	tbb	[pc, r3]
 802392a:	372a      	.short	0x372a
 802392c:	5535      	.short	0x5535
 802392e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8023932:	441e      	add	r6, r3
 8023934:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8023938:	2b20      	cmp	r3, #32
 802393a:	bfc1      	itttt	gt
 802393c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8023940:	409f      	lslgt	r7, r3
 8023942:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8023946:	fa24 f303 	lsrgt.w	r3, r4, r3
 802394a:	bfd6      	itet	le
 802394c:	f1c3 0320 	rsble	r3, r3, #32
 8023950:	ea47 0003 	orrgt.w	r0, r7, r3
 8023954:	fa04 f003 	lslle.w	r0, r4, r3
 8023958:	f7f6 f8d4 	bl	8019b04 <__aeabi_ui2d>
 802395c:	2201      	movs	r2, #1
 802395e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8023962:	3e01      	subs	r6, #1
 8023964:	9214      	str	r2, [sp, #80]	@ 0x50
 8023966:	e777      	b.n	8023858 <_dtoa_r+0x100>
 8023968:	2301      	movs	r3, #1
 802396a:	e7b8      	b.n	80238de <_dtoa_r+0x186>
 802396c:	9012      	str	r0, [sp, #72]	@ 0x48
 802396e:	e7b7      	b.n	80238e0 <_dtoa_r+0x188>
 8023970:	427b      	negs	r3, r7
 8023972:	930a      	str	r3, [sp, #40]	@ 0x28
 8023974:	2300      	movs	r3, #0
 8023976:	eba8 0807 	sub.w	r8, r8, r7
 802397a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802397c:	e7c4      	b.n	8023908 <_dtoa_r+0x1b0>
 802397e:	2300      	movs	r3, #0
 8023980:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023982:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023984:	2b00      	cmp	r3, #0
 8023986:	dc35      	bgt.n	80239f4 <_dtoa_r+0x29c>
 8023988:	2301      	movs	r3, #1
 802398a:	9300      	str	r3, [sp, #0]
 802398c:	9307      	str	r3, [sp, #28]
 802398e:	461a      	mov	r2, r3
 8023990:	920e      	str	r2, [sp, #56]	@ 0x38
 8023992:	e00b      	b.n	80239ac <_dtoa_r+0x254>
 8023994:	2301      	movs	r3, #1
 8023996:	e7f3      	b.n	8023980 <_dtoa_r+0x228>
 8023998:	2300      	movs	r3, #0
 802399a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802399c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802399e:	18fb      	adds	r3, r7, r3
 80239a0:	9300      	str	r3, [sp, #0]
 80239a2:	3301      	adds	r3, #1
 80239a4:	2b01      	cmp	r3, #1
 80239a6:	9307      	str	r3, [sp, #28]
 80239a8:	bfb8      	it	lt
 80239aa:	2301      	movlt	r3, #1
 80239ac:	f8db 001c 	ldr.w	r0, [fp, #28]
 80239b0:	2100      	movs	r1, #0
 80239b2:	2204      	movs	r2, #4
 80239b4:	f102 0514 	add.w	r5, r2, #20
 80239b8:	429d      	cmp	r5, r3
 80239ba:	d91f      	bls.n	80239fc <_dtoa_r+0x2a4>
 80239bc:	6041      	str	r1, [r0, #4]
 80239be:	4658      	mov	r0, fp
 80239c0:	f000 fcd8 	bl	8024374 <_Balloc>
 80239c4:	4682      	mov	sl, r0
 80239c6:	2800      	cmp	r0, #0
 80239c8:	d13c      	bne.n	8023a44 <_dtoa_r+0x2ec>
 80239ca:	4b1b      	ldr	r3, [pc, #108]	@ (8023a38 <_dtoa_r+0x2e0>)
 80239cc:	4602      	mov	r2, r0
 80239ce:	f240 11af 	movw	r1, #431	@ 0x1af
 80239d2:	e6d8      	b.n	8023786 <_dtoa_r+0x2e>
 80239d4:	2301      	movs	r3, #1
 80239d6:	e7e0      	b.n	802399a <_dtoa_r+0x242>
 80239d8:	2401      	movs	r4, #1
 80239da:	2300      	movs	r3, #0
 80239dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80239de:	940b      	str	r4, [sp, #44]	@ 0x2c
 80239e0:	f04f 33ff 	mov.w	r3, #4294967295
 80239e4:	9300      	str	r3, [sp, #0]
 80239e6:	9307      	str	r3, [sp, #28]
 80239e8:	2200      	movs	r2, #0
 80239ea:	2312      	movs	r3, #18
 80239ec:	e7d0      	b.n	8023990 <_dtoa_r+0x238>
 80239ee:	2301      	movs	r3, #1
 80239f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80239f2:	e7f5      	b.n	80239e0 <_dtoa_r+0x288>
 80239f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80239f6:	9300      	str	r3, [sp, #0]
 80239f8:	9307      	str	r3, [sp, #28]
 80239fa:	e7d7      	b.n	80239ac <_dtoa_r+0x254>
 80239fc:	3101      	adds	r1, #1
 80239fe:	0052      	lsls	r2, r2, #1
 8023a00:	e7d8      	b.n	80239b4 <_dtoa_r+0x25c>
 8023a02:	bf00      	nop
 8023a04:	f3af 8000 	nop.w
 8023a08:	636f4361 	.word	0x636f4361
 8023a0c:	3fd287a7 	.word	0x3fd287a7
 8023a10:	8b60c8b3 	.word	0x8b60c8b3
 8023a14:	3fc68a28 	.word	0x3fc68a28
 8023a18:	509f79fb 	.word	0x509f79fb
 8023a1c:	3fd34413 	.word	0x3fd34413
 8023a20:	080446b6 	.word	0x080446b6
 8023a24:	080446cd 	.word	0x080446cd
 8023a28:	7ff00000 	.word	0x7ff00000
 8023a2c:	08044681 	.word	0x08044681
 8023a30:	3ff80000 	.word	0x3ff80000
 8023a34:	080447c8 	.word	0x080447c8
 8023a38:	08044725 	.word	0x08044725
 8023a3c:	080446b2 	.word	0x080446b2
 8023a40:	08044680 	.word	0x08044680
 8023a44:	f8db 301c 	ldr.w	r3, [fp, #28]
 8023a48:	6018      	str	r0, [r3, #0]
 8023a4a:	9b07      	ldr	r3, [sp, #28]
 8023a4c:	2b0e      	cmp	r3, #14
 8023a4e:	f200 80a4 	bhi.w	8023b9a <_dtoa_r+0x442>
 8023a52:	2c00      	cmp	r4, #0
 8023a54:	f000 80a1 	beq.w	8023b9a <_dtoa_r+0x442>
 8023a58:	2f00      	cmp	r7, #0
 8023a5a:	dd33      	ble.n	8023ac4 <_dtoa_r+0x36c>
 8023a5c:	4bad      	ldr	r3, [pc, #692]	@ (8023d14 <_dtoa_r+0x5bc>)
 8023a5e:	f007 020f 	and.w	r2, r7, #15
 8023a62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8023a66:	ed93 7b00 	vldr	d7, [r3]
 8023a6a:	05f8      	lsls	r0, r7, #23
 8023a6c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8023a70:	ea4f 1427 	mov.w	r4, r7, asr #4
 8023a74:	d516      	bpl.n	8023aa4 <_dtoa_r+0x34c>
 8023a76:	4ba8      	ldr	r3, [pc, #672]	@ (8023d18 <_dtoa_r+0x5c0>)
 8023a78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8023a7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8023a80:	f7f6 f9e4 	bl	8019e4c <__aeabi_ddiv>
 8023a84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8023a88:	f004 040f 	and.w	r4, r4, #15
 8023a8c:	2603      	movs	r6, #3
 8023a8e:	4da2      	ldr	r5, [pc, #648]	@ (8023d18 <_dtoa_r+0x5c0>)
 8023a90:	b954      	cbnz	r4, 8023aa8 <_dtoa_r+0x350>
 8023a92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8023a96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023a9a:	f7f6 f9d7 	bl	8019e4c <__aeabi_ddiv>
 8023a9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8023aa2:	e028      	b.n	8023af6 <_dtoa_r+0x39e>
 8023aa4:	2602      	movs	r6, #2
 8023aa6:	e7f2      	b.n	8023a8e <_dtoa_r+0x336>
 8023aa8:	07e1      	lsls	r1, r4, #31
 8023aaa:	d508      	bpl.n	8023abe <_dtoa_r+0x366>
 8023aac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8023ab0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8023ab4:	f7f6 f8a0 	bl	8019bf8 <__aeabi_dmul>
 8023ab8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8023abc:	3601      	adds	r6, #1
 8023abe:	1064      	asrs	r4, r4, #1
 8023ac0:	3508      	adds	r5, #8
 8023ac2:	e7e5      	b.n	8023a90 <_dtoa_r+0x338>
 8023ac4:	f000 80d2 	beq.w	8023c6c <_dtoa_r+0x514>
 8023ac8:	427c      	negs	r4, r7
 8023aca:	4b92      	ldr	r3, [pc, #584]	@ (8023d14 <_dtoa_r+0x5bc>)
 8023acc:	4d92      	ldr	r5, [pc, #584]	@ (8023d18 <_dtoa_r+0x5c0>)
 8023ace:	f004 020f 	and.w	r2, r4, #15
 8023ad2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8023ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023ada:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8023ade:	f7f6 f88b 	bl	8019bf8 <__aeabi_dmul>
 8023ae2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8023ae6:	1124      	asrs	r4, r4, #4
 8023ae8:	2300      	movs	r3, #0
 8023aea:	2602      	movs	r6, #2
 8023aec:	2c00      	cmp	r4, #0
 8023aee:	f040 80b2 	bne.w	8023c56 <_dtoa_r+0x4fe>
 8023af2:	2b00      	cmp	r3, #0
 8023af4:	d1d3      	bne.n	8023a9e <_dtoa_r+0x346>
 8023af6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8023af8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8023afc:	2b00      	cmp	r3, #0
 8023afe:	f000 80b7 	beq.w	8023c70 <_dtoa_r+0x518>
 8023b02:	4b86      	ldr	r3, [pc, #536]	@ (8023d1c <_dtoa_r+0x5c4>)
 8023b04:	2200      	movs	r2, #0
 8023b06:	4620      	mov	r0, r4
 8023b08:	4629      	mov	r1, r5
 8023b0a:	f7f6 fae7 	bl	801a0dc <__aeabi_dcmplt>
 8023b0e:	2800      	cmp	r0, #0
 8023b10:	f000 80ae 	beq.w	8023c70 <_dtoa_r+0x518>
 8023b14:	9b07      	ldr	r3, [sp, #28]
 8023b16:	2b00      	cmp	r3, #0
 8023b18:	f000 80aa 	beq.w	8023c70 <_dtoa_r+0x518>
 8023b1c:	9b00      	ldr	r3, [sp, #0]
 8023b1e:	2b00      	cmp	r3, #0
 8023b20:	dd37      	ble.n	8023b92 <_dtoa_r+0x43a>
 8023b22:	1e7b      	subs	r3, r7, #1
 8023b24:	9304      	str	r3, [sp, #16]
 8023b26:	4620      	mov	r0, r4
 8023b28:	4b7d      	ldr	r3, [pc, #500]	@ (8023d20 <_dtoa_r+0x5c8>)
 8023b2a:	2200      	movs	r2, #0
 8023b2c:	4629      	mov	r1, r5
 8023b2e:	f7f6 f863 	bl	8019bf8 <__aeabi_dmul>
 8023b32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8023b36:	9c00      	ldr	r4, [sp, #0]
 8023b38:	3601      	adds	r6, #1
 8023b3a:	4630      	mov	r0, r6
 8023b3c:	f7f5 fff2 	bl	8019b24 <__aeabi_i2d>
 8023b40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8023b44:	f7f6 f858 	bl	8019bf8 <__aeabi_dmul>
 8023b48:	4b76      	ldr	r3, [pc, #472]	@ (8023d24 <_dtoa_r+0x5cc>)
 8023b4a:	2200      	movs	r2, #0
 8023b4c:	f7f5 fe9e 	bl	801988c <__adddf3>
 8023b50:	4605      	mov	r5, r0
 8023b52:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8023b56:	2c00      	cmp	r4, #0
 8023b58:	f040 808d 	bne.w	8023c76 <_dtoa_r+0x51e>
 8023b5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023b60:	4b71      	ldr	r3, [pc, #452]	@ (8023d28 <_dtoa_r+0x5d0>)
 8023b62:	2200      	movs	r2, #0
 8023b64:	f7f5 fe90 	bl	8019888 <__aeabi_dsub>
 8023b68:	4602      	mov	r2, r0
 8023b6a:	460b      	mov	r3, r1
 8023b6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8023b70:	462a      	mov	r2, r5
 8023b72:	4633      	mov	r3, r6
 8023b74:	f7f6 fad0 	bl	801a118 <__aeabi_dcmpgt>
 8023b78:	2800      	cmp	r0, #0
 8023b7a:	f040 828b 	bne.w	8024094 <_dtoa_r+0x93c>
 8023b7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023b82:	462a      	mov	r2, r5
 8023b84:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8023b88:	f7f6 faa8 	bl	801a0dc <__aeabi_dcmplt>
 8023b8c:	2800      	cmp	r0, #0
 8023b8e:	f040 8128 	bne.w	8023de2 <_dtoa_r+0x68a>
 8023b92:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8023b96:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8023b9a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8023b9c:	2b00      	cmp	r3, #0
 8023b9e:	f2c0 815a 	blt.w	8023e56 <_dtoa_r+0x6fe>
 8023ba2:	2f0e      	cmp	r7, #14
 8023ba4:	f300 8157 	bgt.w	8023e56 <_dtoa_r+0x6fe>
 8023ba8:	4b5a      	ldr	r3, [pc, #360]	@ (8023d14 <_dtoa_r+0x5bc>)
 8023baa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8023bae:	ed93 7b00 	vldr	d7, [r3]
 8023bb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023bb4:	2b00      	cmp	r3, #0
 8023bb6:	ed8d 7b00 	vstr	d7, [sp]
 8023bba:	da03      	bge.n	8023bc4 <_dtoa_r+0x46c>
 8023bbc:	9b07      	ldr	r3, [sp, #28]
 8023bbe:	2b00      	cmp	r3, #0
 8023bc0:	f340 8101 	ble.w	8023dc6 <_dtoa_r+0x66e>
 8023bc4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8023bc8:	4656      	mov	r6, sl
 8023bca:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023bce:	4620      	mov	r0, r4
 8023bd0:	4629      	mov	r1, r5
 8023bd2:	f7f6 f93b 	bl	8019e4c <__aeabi_ddiv>
 8023bd6:	f7f6 fabf 	bl	801a158 <__aeabi_d2iz>
 8023bda:	4680      	mov	r8, r0
 8023bdc:	f7f5 ffa2 	bl	8019b24 <__aeabi_i2d>
 8023be0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023be4:	f7f6 f808 	bl	8019bf8 <__aeabi_dmul>
 8023be8:	4602      	mov	r2, r0
 8023bea:	460b      	mov	r3, r1
 8023bec:	4620      	mov	r0, r4
 8023bee:	4629      	mov	r1, r5
 8023bf0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8023bf4:	f7f5 fe48 	bl	8019888 <__aeabi_dsub>
 8023bf8:	f806 4b01 	strb.w	r4, [r6], #1
 8023bfc:	9d07      	ldr	r5, [sp, #28]
 8023bfe:	eba6 040a 	sub.w	r4, r6, sl
 8023c02:	42a5      	cmp	r5, r4
 8023c04:	4602      	mov	r2, r0
 8023c06:	460b      	mov	r3, r1
 8023c08:	f040 8117 	bne.w	8023e3a <_dtoa_r+0x6e2>
 8023c0c:	f7f5 fe3e 	bl	801988c <__adddf3>
 8023c10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023c14:	4604      	mov	r4, r0
 8023c16:	460d      	mov	r5, r1
 8023c18:	f7f6 fa7e 	bl	801a118 <__aeabi_dcmpgt>
 8023c1c:	2800      	cmp	r0, #0
 8023c1e:	f040 80f9 	bne.w	8023e14 <_dtoa_r+0x6bc>
 8023c22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023c26:	4620      	mov	r0, r4
 8023c28:	4629      	mov	r1, r5
 8023c2a:	f7f6 fa4d 	bl	801a0c8 <__aeabi_dcmpeq>
 8023c2e:	b118      	cbz	r0, 8023c38 <_dtoa_r+0x4e0>
 8023c30:	f018 0f01 	tst.w	r8, #1
 8023c34:	f040 80ee 	bne.w	8023e14 <_dtoa_r+0x6bc>
 8023c38:	4649      	mov	r1, r9
 8023c3a:	4658      	mov	r0, fp
 8023c3c:	f000 fbda 	bl	80243f4 <_Bfree>
 8023c40:	2300      	movs	r3, #0
 8023c42:	7033      	strb	r3, [r6, #0]
 8023c44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023c46:	3701      	adds	r7, #1
 8023c48:	601f      	str	r7, [r3, #0]
 8023c4a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8023c4c:	2b00      	cmp	r3, #0
 8023c4e:	f000 831d 	beq.w	802428c <_dtoa_r+0xb34>
 8023c52:	601e      	str	r6, [r3, #0]
 8023c54:	e31a      	b.n	802428c <_dtoa_r+0xb34>
 8023c56:	07e2      	lsls	r2, r4, #31
 8023c58:	d505      	bpl.n	8023c66 <_dtoa_r+0x50e>
 8023c5a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8023c5e:	f7f5 ffcb 	bl	8019bf8 <__aeabi_dmul>
 8023c62:	3601      	adds	r6, #1
 8023c64:	2301      	movs	r3, #1
 8023c66:	1064      	asrs	r4, r4, #1
 8023c68:	3508      	adds	r5, #8
 8023c6a:	e73f      	b.n	8023aec <_dtoa_r+0x394>
 8023c6c:	2602      	movs	r6, #2
 8023c6e:	e742      	b.n	8023af6 <_dtoa_r+0x39e>
 8023c70:	9c07      	ldr	r4, [sp, #28]
 8023c72:	9704      	str	r7, [sp, #16]
 8023c74:	e761      	b.n	8023b3a <_dtoa_r+0x3e2>
 8023c76:	4b27      	ldr	r3, [pc, #156]	@ (8023d14 <_dtoa_r+0x5bc>)
 8023c78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8023c7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8023c7e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8023c82:	4454      	add	r4, sl
 8023c84:	2900      	cmp	r1, #0
 8023c86:	d053      	beq.n	8023d30 <_dtoa_r+0x5d8>
 8023c88:	4928      	ldr	r1, [pc, #160]	@ (8023d2c <_dtoa_r+0x5d4>)
 8023c8a:	2000      	movs	r0, #0
 8023c8c:	f7f6 f8de 	bl	8019e4c <__aeabi_ddiv>
 8023c90:	4633      	mov	r3, r6
 8023c92:	462a      	mov	r2, r5
 8023c94:	f7f5 fdf8 	bl	8019888 <__aeabi_dsub>
 8023c98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8023c9c:	4656      	mov	r6, sl
 8023c9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023ca2:	f7f6 fa59 	bl	801a158 <__aeabi_d2iz>
 8023ca6:	4605      	mov	r5, r0
 8023ca8:	f7f5 ff3c 	bl	8019b24 <__aeabi_i2d>
 8023cac:	4602      	mov	r2, r0
 8023cae:	460b      	mov	r3, r1
 8023cb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023cb4:	f7f5 fde8 	bl	8019888 <__aeabi_dsub>
 8023cb8:	3530      	adds	r5, #48	@ 0x30
 8023cba:	4602      	mov	r2, r0
 8023cbc:	460b      	mov	r3, r1
 8023cbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8023cc2:	f806 5b01 	strb.w	r5, [r6], #1
 8023cc6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8023cca:	f7f6 fa07 	bl	801a0dc <__aeabi_dcmplt>
 8023cce:	2800      	cmp	r0, #0
 8023cd0:	d171      	bne.n	8023db6 <_dtoa_r+0x65e>
 8023cd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8023cd6:	4911      	ldr	r1, [pc, #68]	@ (8023d1c <_dtoa_r+0x5c4>)
 8023cd8:	2000      	movs	r0, #0
 8023cda:	f7f5 fdd5 	bl	8019888 <__aeabi_dsub>
 8023cde:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8023ce2:	f7f6 f9fb 	bl	801a0dc <__aeabi_dcmplt>
 8023ce6:	2800      	cmp	r0, #0
 8023ce8:	f040 8095 	bne.w	8023e16 <_dtoa_r+0x6be>
 8023cec:	42a6      	cmp	r6, r4
 8023cee:	f43f af50 	beq.w	8023b92 <_dtoa_r+0x43a>
 8023cf2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8023cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8023d20 <_dtoa_r+0x5c8>)
 8023cf8:	2200      	movs	r2, #0
 8023cfa:	f7f5 ff7d 	bl	8019bf8 <__aeabi_dmul>
 8023cfe:	4b08      	ldr	r3, [pc, #32]	@ (8023d20 <_dtoa_r+0x5c8>)
 8023d00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8023d04:	2200      	movs	r2, #0
 8023d06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023d0a:	f7f5 ff75 	bl	8019bf8 <__aeabi_dmul>
 8023d0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8023d12:	e7c4      	b.n	8023c9e <_dtoa_r+0x546>
 8023d14:	080447c8 	.word	0x080447c8
 8023d18:	080447a0 	.word	0x080447a0
 8023d1c:	3ff00000 	.word	0x3ff00000
 8023d20:	40240000 	.word	0x40240000
 8023d24:	401c0000 	.word	0x401c0000
 8023d28:	40140000 	.word	0x40140000
 8023d2c:	3fe00000 	.word	0x3fe00000
 8023d30:	4631      	mov	r1, r6
 8023d32:	4628      	mov	r0, r5
 8023d34:	f7f5 ff60 	bl	8019bf8 <__aeabi_dmul>
 8023d38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8023d3c:	9415      	str	r4, [sp, #84]	@ 0x54
 8023d3e:	4656      	mov	r6, sl
 8023d40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023d44:	f7f6 fa08 	bl	801a158 <__aeabi_d2iz>
 8023d48:	4605      	mov	r5, r0
 8023d4a:	f7f5 feeb 	bl	8019b24 <__aeabi_i2d>
 8023d4e:	4602      	mov	r2, r0
 8023d50:	460b      	mov	r3, r1
 8023d52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023d56:	f7f5 fd97 	bl	8019888 <__aeabi_dsub>
 8023d5a:	3530      	adds	r5, #48	@ 0x30
 8023d5c:	f806 5b01 	strb.w	r5, [r6], #1
 8023d60:	4602      	mov	r2, r0
 8023d62:	460b      	mov	r3, r1
 8023d64:	42a6      	cmp	r6, r4
 8023d66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8023d6a:	f04f 0200 	mov.w	r2, #0
 8023d6e:	d124      	bne.n	8023dba <_dtoa_r+0x662>
 8023d70:	4bac      	ldr	r3, [pc, #688]	@ (8024024 <_dtoa_r+0x8cc>)
 8023d72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8023d76:	f7f5 fd89 	bl	801988c <__adddf3>
 8023d7a:	4602      	mov	r2, r0
 8023d7c:	460b      	mov	r3, r1
 8023d7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023d82:	f7f6 f9c9 	bl	801a118 <__aeabi_dcmpgt>
 8023d86:	2800      	cmp	r0, #0
 8023d88:	d145      	bne.n	8023e16 <_dtoa_r+0x6be>
 8023d8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8023d8e:	49a5      	ldr	r1, [pc, #660]	@ (8024024 <_dtoa_r+0x8cc>)
 8023d90:	2000      	movs	r0, #0
 8023d92:	f7f5 fd79 	bl	8019888 <__aeabi_dsub>
 8023d96:	4602      	mov	r2, r0
 8023d98:	460b      	mov	r3, r1
 8023d9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023d9e:	f7f6 f99d 	bl	801a0dc <__aeabi_dcmplt>
 8023da2:	2800      	cmp	r0, #0
 8023da4:	f43f aef5 	beq.w	8023b92 <_dtoa_r+0x43a>
 8023da8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8023daa:	1e73      	subs	r3, r6, #1
 8023dac:	9315      	str	r3, [sp, #84]	@ 0x54
 8023dae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8023db2:	2b30      	cmp	r3, #48	@ 0x30
 8023db4:	d0f8      	beq.n	8023da8 <_dtoa_r+0x650>
 8023db6:	9f04      	ldr	r7, [sp, #16]
 8023db8:	e73e      	b.n	8023c38 <_dtoa_r+0x4e0>
 8023dba:	4b9b      	ldr	r3, [pc, #620]	@ (8024028 <_dtoa_r+0x8d0>)
 8023dbc:	f7f5 ff1c 	bl	8019bf8 <__aeabi_dmul>
 8023dc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8023dc4:	e7bc      	b.n	8023d40 <_dtoa_r+0x5e8>
 8023dc6:	d10c      	bne.n	8023de2 <_dtoa_r+0x68a>
 8023dc8:	4b98      	ldr	r3, [pc, #608]	@ (802402c <_dtoa_r+0x8d4>)
 8023dca:	2200      	movs	r2, #0
 8023dcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8023dd0:	f7f5 ff12 	bl	8019bf8 <__aeabi_dmul>
 8023dd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8023dd8:	f7f6 f994 	bl	801a104 <__aeabi_dcmpge>
 8023ddc:	2800      	cmp	r0, #0
 8023dde:	f000 8157 	beq.w	8024090 <_dtoa_r+0x938>
 8023de2:	2400      	movs	r4, #0
 8023de4:	4625      	mov	r5, r4
 8023de6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023de8:	43db      	mvns	r3, r3
 8023dea:	9304      	str	r3, [sp, #16]
 8023dec:	4656      	mov	r6, sl
 8023dee:	2700      	movs	r7, #0
 8023df0:	4621      	mov	r1, r4
 8023df2:	4658      	mov	r0, fp
 8023df4:	f000 fafe 	bl	80243f4 <_Bfree>
 8023df8:	2d00      	cmp	r5, #0
 8023dfa:	d0dc      	beq.n	8023db6 <_dtoa_r+0x65e>
 8023dfc:	b12f      	cbz	r7, 8023e0a <_dtoa_r+0x6b2>
 8023dfe:	42af      	cmp	r7, r5
 8023e00:	d003      	beq.n	8023e0a <_dtoa_r+0x6b2>
 8023e02:	4639      	mov	r1, r7
 8023e04:	4658      	mov	r0, fp
 8023e06:	f000 faf5 	bl	80243f4 <_Bfree>
 8023e0a:	4629      	mov	r1, r5
 8023e0c:	4658      	mov	r0, fp
 8023e0e:	f000 faf1 	bl	80243f4 <_Bfree>
 8023e12:	e7d0      	b.n	8023db6 <_dtoa_r+0x65e>
 8023e14:	9704      	str	r7, [sp, #16]
 8023e16:	4633      	mov	r3, r6
 8023e18:	461e      	mov	r6, r3
 8023e1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8023e1e:	2a39      	cmp	r2, #57	@ 0x39
 8023e20:	d107      	bne.n	8023e32 <_dtoa_r+0x6da>
 8023e22:	459a      	cmp	sl, r3
 8023e24:	d1f8      	bne.n	8023e18 <_dtoa_r+0x6c0>
 8023e26:	9a04      	ldr	r2, [sp, #16]
 8023e28:	3201      	adds	r2, #1
 8023e2a:	9204      	str	r2, [sp, #16]
 8023e2c:	2230      	movs	r2, #48	@ 0x30
 8023e2e:	f88a 2000 	strb.w	r2, [sl]
 8023e32:	781a      	ldrb	r2, [r3, #0]
 8023e34:	3201      	adds	r2, #1
 8023e36:	701a      	strb	r2, [r3, #0]
 8023e38:	e7bd      	b.n	8023db6 <_dtoa_r+0x65e>
 8023e3a:	4b7b      	ldr	r3, [pc, #492]	@ (8024028 <_dtoa_r+0x8d0>)
 8023e3c:	2200      	movs	r2, #0
 8023e3e:	f7f5 fedb 	bl	8019bf8 <__aeabi_dmul>
 8023e42:	2200      	movs	r2, #0
 8023e44:	2300      	movs	r3, #0
 8023e46:	4604      	mov	r4, r0
 8023e48:	460d      	mov	r5, r1
 8023e4a:	f7f6 f93d 	bl	801a0c8 <__aeabi_dcmpeq>
 8023e4e:	2800      	cmp	r0, #0
 8023e50:	f43f aebb 	beq.w	8023bca <_dtoa_r+0x472>
 8023e54:	e6f0      	b.n	8023c38 <_dtoa_r+0x4e0>
 8023e56:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8023e58:	2a00      	cmp	r2, #0
 8023e5a:	f000 80db 	beq.w	8024014 <_dtoa_r+0x8bc>
 8023e5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023e60:	2a01      	cmp	r2, #1
 8023e62:	f300 80bf 	bgt.w	8023fe4 <_dtoa_r+0x88c>
 8023e66:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8023e68:	2a00      	cmp	r2, #0
 8023e6a:	f000 80b7 	beq.w	8023fdc <_dtoa_r+0x884>
 8023e6e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8023e72:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8023e74:	4646      	mov	r6, r8
 8023e76:	9a08      	ldr	r2, [sp, #32]
 8023e78:	2101      	movs	r1, #1
 8023e7a:	441a      	add	r2, r3
 8023e7c:	4658      	mov	r0, fp
 8023e7e:	4498      	add	r8, r3
 8023e80:	9208      	str	r2, [sp, #32]
 8023e82:	f000 fbb5 	bl	80245f0 <__i2b>
 8023e86:	4605      	mov	r5, r0
 8023e88:	b15e      	cbz	r6, 8023ea2 <_dtoa_r+0x74a>
 8023e8a:	9b08      	ldr	r3, [sp, #32]
 8023e8c:	2b00      	cmp	r3, #0
 8023e8e:	dd08      	ble.n	8023ea2 <_dtoa_r+0x74a>
 8023e90:	42b3      	cmp	r3, r6
 8023e92:	9a08      	ldr	r2, [sp, #32]
 8023e94:	bfa8      	it	ge
 8023e96:	4633      	movge	r3, r6
 8023e98:	eba8 0803 	sub.w	r8, r8, r3
 8023e9c:	1af6      	subs	r6, r6, r3
 8023e9e:	1ad3      	subs	r3, r2, r3
 8023ea0:	9308      	str	r3, [sp, #32]
 8023ea2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023ea4:	b1f3      	cbz	r3, 8023ee4 <_dtoa_r+0x78c>
 8023ea6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023ea8:	2b00      	cmp	r3, #0
 8023eaa:	f000 80b7 	beq.w	802401c <_dtoa_r+0x8c4>
 8023eae:	b18c      	cbz	r4, 8023ed4 <_dtoa_r+0x77c>
 8023eb0:	4629      	mov	r1, r5
 8023eb2:	4622      	mov	r2, r4
 8023eb4:	4658      	mov	r0, fp
 8023eb6:	f000 fc5b 	bl	8024770 <__pow5mult>
 8023eba:	464a      	mov	r2, r9
 8023ebc:	4601      	mov	r1, r0
 8023ebe:	4605      	mov	r5, r0
 8023ec0:	4658      	mov	r0, fp
 8023ec2:	f000 fbab 	bl	802461c <__multiply>
 8023ec6:	4649      	mov	r1, r9
 8023ec8:	9004      	str	r0, [sp, #16]
 8023eca:	4658      	mov	r0, fp
 8023ecc:	f000 fa92 	bl	80243f4 <_Bfree>
 8023ed0:	9b04      	ldr	r3, [sp, #16]
 8023ed2:	4699      	mov	r9, r3
 8023ed4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023ed6:	1b1a      	subs	r2, r3, r4
 8023ed8:	d004      	beq.n	8023ee4 <_dtoa_r+0x78c>
 8023eda:	4649      	mov	r1, r9
 8023edc:	4658      	mov	r0, fp
 8023ede:	f000 fc47 	bl	8024770 <__pow5mult>
 8023ee2:	4681      	mov	r9, r0
 8023ee4:	2101      	movs	r1, #1
 8023ee6:	4658      	mov	r0, fp
 8023ee8:	f000 fb82 	bl	80245f0 <__i2b>
 8023eec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023eee:	4604      	mov	r4, r0
 8023ef0:	2b00      	cmp	r3, #0
 8023ef2:	f000 81cf 	beq.w	8024294 <_dtoa_r+0xb3c>
 8023ef6:	461a      	mov	r2, r3
 8023ef8:	4601      	mov	r1, r0
 8023efa:	4658      	mov	r0, fp
 8023efc:	f000 fc38 	bl	8024770 <__pow5mult>
 8023f00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023f02:	2b01      	cmp	r3, #1
 8023f04:	4604      	mov	r4, r0
 8023f06:	f300 8095 	bgt.w	8024034 <_dtoa_r+0x8dc>
 8023f0a:	9b02      	ldr	r3, [sp, #8]
 8023f0c:	2b00      	cmp	r3, #0
 8023f0e:	f040 8087 	bne.w	8024020 <_dtoa_r+0x8c8>
 8023f12:	9b03      	ldr	r3, [sp, #12]
 8023f14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8023f18:	2b00      	cmp	r3, #0
 8023f1a:	f040 8089 	bne.w	8024030 <_dtoa_r+0x8d8>
 8023f1e:	9b03      	ldr	r3, [sp, #12]
 8023f20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8023f24:	0d1b      	lsrs	r3, r3, #20
 8023f26:	051b      	lsls	r3, r3, #20
 8023f28:	b12b      	cbz	r3, 8023f36 <_dtoa_r+0x7de>
 8023f2a:	9b08      	ldr	r3, [sp, #32]
 8023f2c:	3301      	adds	r3, #1
 8023f2e:	9308      	str	r3, [sp, #32]
 8023f30:	f108 0801 	add.w	r8, r8, #1
 8023f34:	2301      	movs	r3, #1
 8023f36:	930a      	str	r3, [sp, #40]	@ 0x28
 8023f38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023f3a:	2b00      	cmp	r3, #0
 8023f3c:	f000 81b0 	beq.w	80242a0 <_dtoa_r+0xb48>
 8023f40:	6923      	ldr	r3, [r4, #16]
 8023f42:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8023f46:	6918      	ldr	r0, [r3, #16]
 8023f48:	f000 fb06 	bl	8024558 <__hi0bits>
 8023f4c:	f1c0 0020 	rsb	r0, r0, #32
 8023f50:	9b08      	ldr	r3, [sp, #32]
 8023f52:	4418      	add	r0, r3
 8023f54:	f010 001f 	ands.w	r0, r0, #31
 8023f58:	d077      	beq.n	802404a <_dtoa_r+0x8f2>
 8023f5a:	f1c0 0320 	rsb	r3, r0, #32
 8023f5e:	2b04      	cmp	r3, #4
 8023f60:	dd6b      	ble.n	802403a <_dtoa_r+0x8e2>
 8023f62:	9b08      	ldr	r3, [sp, #32]
 8023f64:	f1c0 001c 	rsb	r0, r0, #28
 8023f68:	4403      	add	r3, r0
 8023f6a:	4480      	add	r8, r0
 8023f6c:	4406      	add	r6, r0
 8023f6e:	9308      	str	r3, [sp, #32]
 8023f70:	f1b8 0f00 	cmp.w	r8, #0
 8023f74:	dd05      	ble.n	8023f82 <_dtoa_r+0x82a>
 8023f76:	4649      	mov	r1, r9
 8023f78:	4642      	mov	r2, r8
 8023f7a:	4658      	mov	r0, fp
 8023f7c:	f000 fc52 	bl	8024824 <__lshift>
 8023f80:	4681      	mov	r9, r0
 8023f82:	9b08      	ldr	r3, [sp, #32]
 8023f84:	2b00      	cmp	r3, #0
 8023f86:	dd05      	ble.n	8023f94 <_dtoa_r+0x83c>
 8023f88:	4621      	mov	r1, r4
 8023f8a:	461a      	mov	r2, r3
 8023f8c:	4658      	mov	r0, fp
 8023f8e:	f000 fc49 	bl	8024824 <__lshift>
 8023f92:	4604      	mov	r4, r0
 8023f94:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8023f96:	2b00      	cmp	r3, #0
 8023f98:	d059      	beq.n	802404e <_dtoa_r+0x8f6>
 8023f9a:	4621      	mov	r1, r4
 8023f9c:	4648      	mov	r0, r9
 8023f9e:	f000 fcad 	bl	80248fc <__mcmp>
 8023fa2:	2800      	cmp	r0, #0
 8023fa4:	da53      	bge.n	802404e <_dtoa_r+0x8f6>
 8023fa6:	1e7b      	subs	r3, r7, #1
 8023fa8:	9304      	str	r3, [sp, #16]
 8023faa:	4649      	mov	r1, r9
 8023fac:	2300      	movs	r3, #0
 8023fae:	220a      	movs	r2, #10
 8023fb0:	4658      	mov	r0, fp
 8023fb2:	f000 fa41 	bl	8024438 <__multadd>
 8023fb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023fb8:	4681      	mov	r9, r0
 8023fba:	2b00      	cmp	r3, #0
 8023fbc:	f000 8172 	beq.w	80242a4 <_dtoa_r+0xb4c>
 8023fc0:	2300      	movs	r3, #0
 8023fc2:	4629      	mov	r1, r5
 8023fc4:	220a      	movs	r2, #10
 8023fc6:	4658      	mov	r0, fp
 8023fc8:	f000 fa36 	bl	8024438 <__multadd>
 8023fcc:	9b00      	ldr	r3, [sp, #0]
 8023fce:	2b00      	cmp	r3, #0
 8023fd0:	4605      	mov	r5, r0
 8023fd2:	dc67      	bgt.n	80240a4 <_dtoa_r+0x94c>
 8023fd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023fd6:	2b02      	cmp	r3, #2
 8023fd8:	dc41      	bgt.n	802405e <_dtoa_r+0x906>
 8023fda:	e063      	b.n	80240a4 <_dtoa_r+0x94c>
 8023fdc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8023fde:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8023fe2:	e746      	b.n	8023e72 <_dtoa_r+0x71a>
 8023fe4:	9b07      	ldr	r3, [sp, #28]
 8023fe6:	1e5c      	subs	r4, r3, #1
 8023fe8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023fea:	42a3      	cmp	r3, r4
 8023fec:	bfbf      	itttt	lt
 8023fee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8023ff0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8023ff2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8023ff4:	1ae3      	sublt	r3, r4, r3
 8023ff6:	bfb4      	ite	lt
 8023ff8:	18d2      	addlt	r2, r2, r3
 8023ffa:	1b1c      	subge	r4, r3, r4
 8023ffc:	9b07      	ldr	r3, [sp, #28]
 8023ffe:	bfbc      	itt	lt
 8024000:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8024002:	2400      	movlt	r4, #0
 8024004:	2b00      	cmp	r3, #0
 8024006:	bfb5      	itete	lt
 8024008:	eba8 0603 	sublt.w	r6, r8, r3
 802400c:	9b07      	ldrge	r3, [sp, #28]
 802400e:	2300      	movlt	r3, #0
 8024010:	4646      	movge	r6, r8
 8024012:	e730      	b.n	8023e76 <_dtoa_r+0x71e>
 8024014:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8024016:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8024018:	4646      	mov	r6, r8
 802401a:	e735      	b.n	8023e88 <_dtoa_r+0x730>
 802401c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802401e:	e75c      	b.n	8023eda <_dtoa_r+0x782>
 8024020:	2300      	movs	r3, #0
 8024022:	e788      	b.n	8023f36 <_dtoa_r+0x7de>
 8024024:	3fe00000 	.word	0x3fe00000
 8024028:	40240000 	.word	0x40240000
 802402c:	40140000 	.word	0x40140000
 8024030:	9b02      	ldr	r3, [sp, #8]
 8024032:	e780      	b.n	8023f36 <_dtoa_r+0x7de>
 8024034:	2300      	movs	r3, #0
 8024036:	930a      	str	r3, [sp, #40]	@ 0x28
 8024038:	e782      	b.n	8023f40 <_dtoa_r+0x7e8>
 802403a:	d099      	beq.n	8023f70 <_dtoa_r+0x818>
 802403c:	9a08      	ldr	r2, [sp, #32]
 802403e:	331c      	adds	r3, #28
 8024040:	441a      	add	r2, r3
 8024042:	4498      	add	r8, r3
 8024044:	441e      	add	r6, r3
 8024046:	9208      	str	r2, [sp, #32]
 8024048:	e792      	b.n	8023f70 <_dtoa_r+0x818>
 802404a:	4603      	mov	r3, r0
 802404c:	e7f6      	b.n	802403c <_dtoa_r+0x8e4>
 802404e:	9b07      	ldr	r3, [sp, #28]
 8024050:	9704      	str	r7, [sp, #16]
 8024052:	2b00      	cmp	r3, #0
 8024054:	dc20      	bgt.n	8024098 <_dtoa_r+0x940>
 8024056:	9300      	str	r3, [sp, #0]
 8024058:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802405a:	2b02      	cmp	r3, #2
 802405c:	dd1e      	ble.n	802409c <_dtoa_r+0x944>
 802405e:	9b00      	ldr	r3, [sp, #0]
 8024060:	2b00      	cmp	r3, #0
 8024062:	f47f aec0 	bne.w	8023de6 <_dtoa_r+0x68e>
 8024066:	4621      	mov	r1, r4
 8024068:	2205      	movs	r2, #5
 802406a:	4658      	mov	r0, fp
 802406c:	f000 f9e4 	bl	8024438 <__multadd>
 8024070:	4601      	mov	r1, r0
 8024072:	4604      	mov	r4, r0
 8024074:	4648      	mov	r0, r9
 8024076:	f000 fc41 	bl	80248fc <__mcmp>
 802407a:	2800      	cmp	r0, #0
 802407c:	f77f aeb3 	ble.w	8023de6 <_dtoa_r+0x68e>
 8024080:	4656      	mov	r6, sl
 8024082:	2331      	movs	r3, #49	@ 0x31
 8024084:	f806 3b01 	strb.w	r3, [r6], #1
 8024088:	9b04      	ldr	r3, [sp, #16]
 802408a:	3301      	adds	r3, #1
 802408c:	9304      	str	r3, [sp, #16]
 802408e:	e6ae      	b.n	8023dee <_dtoa_r+0x696>
 8024090:	9c07      	ldr	r4, [sp, #28]
 8024092:	9704      	str	r7, [sp, #16]
 8024094:	4625      	mov	r5, r4
 8024096:	e7f3      	b.n	8024080 <_dtoa_r+0x928>
 8024098:	9b07      	ldr	r3, [sp, #28]
 802409a:	9300      	str	r3, [sp, #0]
 802409c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802409e:	2b00      	cmp	r3, #0
 80240a0:	f000 8104 	beq.w	80242ac <_dtoa_r+0xb54>
 80240a4:	2e00      	cmp	r6, #0
 80240a6:	dd05      	ble.n	80240b4 <_dtoa_r+0x95c>
 80240a8:	4629      	mov	r1, r5
 80240aa:	4632      	mov	r2, r6
 80240ac:	4658      	mov	r0, fp
 80240ae:	f000 fbb9 	bl	8024824 <__lshift>
 80240b2:	4605      	mov	r5, r0
 80240b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80240b6:	2b00      	cmp	r3, #0
 80240b8:	d05a      	beq.n	8024170 <_dtoa_r+0xa18>
 80240ba:	6869      	ldr	r1, [r5, #4]
 80240bc:	4658      	mov	r0, fp
 80240be:	f000 f959 	bl	8024374 <_Balloc>
 80240c2:	4606      	mov	r6, r0
 80240c4:	b928      	cbnz	r0, 80240d2 <_dtoa_r+0x97a>
 80240c6:	4b84      	ldr	r3, [pc, #528]	@ (80242d8 <_dtoa_r+0xb80>)
 80240c8:	4602      	mov	r2, r0
 80240ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80240ce:	f7ff bb5a 	b.w	8023786 <_dtoa_r+0x2e>
 80240d2:	692a      	ldr	r2, [r5, #16]
 80240d4:	3202      	adds	r2, #2
 80240d6:	0092      	lsls	r2, r2, #2
 80240d8:	f105 010c 	add.w	r1, r5, #12
 80240dc:	300c      	adds	r0, #12
 80240de:	f7ff fa9e 	bl	802361e <memcpy>
 80240e2:	2201      	movs	r2, #1
 80240e4:	4631      	mov	r1, r6
 80240e6:	4658      	mov	r0, fp
 80240e8:	f000 fb9c 	bl	8024824 <__lshift>
 80240ec:	f10a 0301 	add.w	r3, sl, #1
 80240f0:	9307      	str	r3, [sp, #28]
 80240f2:	9b00      	ldr	r3, [sp, #0]
 80240f4:	4453      	add	r3, sl
 80240f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80240f8:	9b02      	ldr	r3, [sp, #8]
 80240fa:	f003 0301 	and.w	r3, r3, #1
 80240fe:	462f      	mov	r7, r5
 8024100:	930a      	str	r3, [sp, #40]	@ 0x28
 8024102:	4605      	mov	r5, r0
 8024104:	9b07      	ldr	r3, [sp, #28]
 8024106:	4621      	mov	r1, r4
 8024108:	3b01      	subs	r3, #1
 802410a:	4648      	mov	r0, r9
 802410c:	9300      	str	r3, [sp, #0]
 802410e:	f7ff fa9b 	bl	8023648 <quorem>
 8024112:	4639      	mov	r1, r7
 8024114:	9002      	str	r0, [sp, #8]
 8024116:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 802411a:	4648      	mov	r0, r9
 802411c:	f000 fbee 	bl	80248fc <__mcmp>
 8024120:	462a      	mov	r2, r5
 8024122:	9008      	str	r0, [sp, #32]
 8024124:	4621      	mov	r1, r4
 8024126:	4658      	mov	r0, fp
 8024128:	f000 fc04 	bl	8024934 <__mdiff>
 802412c:	68c2      	ldr	r2, [r0, #12]
 802412e:	4606      	mov	r6, r0
 8024130:	bb02      	cbnz	r2, 8024174 <_dtoa_r+0xa1c>
 8024132:	4601      	mov	r1, r0
 8024134:	4648      	mov	r0, r9
 8024136:	f000 fbe1 	bl	80248fc <__mcmp>
 802413a:	4602      	mov	r2, r0
 802413c:	4631      	mov	r1, r6
 802413e:	4658      	mov	r0, fp
 8024140:	920e      	str	r2, [sp, #56]	@ 0x38
 8024142:	f000 f957 	bl	80243f4 <_Bfree>
 8024146:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024148:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802414a:	9e07      	ldr	r6, [sp, #28]
 802414c:	ea43 0102 	orr.w	r1, r3, r2
 8024150:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024152:	4319      	orrs	r1, r3
 8024154:	d110      	bne.n	8024178 <_dtoa_r+0xa20>
 8024156:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 802415a:	d029      	beq.n	80241b0 <_dtoa_r+0xa58>
 802415c:	9b08      	ldr	r3, [sp, #32]
 802415e:	2b00      	cmp	r3, #0
 8024160:	dd02      	ble.n	8024168 <_dtoa_r+0xa10>
 8024162:	9b02      	ldr	r3, [sp, #8]
 8024164:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8024168:	9b00      	ldr	r3, [sp, #0]
 802416a:	f883 8000 	strb.w	r8, [r3]
 802416e:	e63f      	b.n	8023df0 <_dtoa_r+0x698>
 8024170:	4628      	mov	r0, r5
 8024172:	e7bb      	b.n	80240ec <_dtoa_r+0x994>
 8024174:	2201      	movs	r2, #1
 8024176:	e7e1      	b.n	802413c <_dtoa_r+0x9e4>
 8024178:	9b08      	ldr	r3, [sp, #32]
 802417a:	2b00      	cmp	r3, #0
 802417c:	db04      	blt.n	8024188 <_dtoa_r+0xa30>
 802417e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8024180:	430b      	orrs	r3, r1
 8024182:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024184:	430b      	orrs	r3, r1
 8024186:	d120      	bne.n	80241ca <_dtoa_r+0xa72>
 8024188:	2a00      	cmp	r2, #0
 802418a:	dded      	ble.n	8024168 <_dtoa_r+0xa10>
 802418c:	4649      	mov	r1, r9
 802418e:	2201      	movs	r2, #1
 8024190:	4658      	mov	r0, fp
 8024192:	f000 fb47 	bl	8024824 <__lshift>
 8024196:	4621      	mov	r1, r4
 8024198:	4681      	mov	r9, r0
 802419a:	f000 fbaf 	bl	80248fc <__mcmp>
 802419e:	2800      	cmp	r0, #0
 80241a0:	dc03      	bgt.n	80241aa <_dtoa_r+0xa52>
 80241a2:	d1e1      	bne.n	8024168 <_dtoa_r+0xa10>
 80241a4:	f018 0f01 	tst.w	r8, #1
 80241a8:	d0de      	beq.n	8024168 <_dtoa_r+0xa10>
 80241aa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80241ae:	d1d8      	bne.n	8024162 <_dtoa_r+0xa0a>
 80241b0:	9a00      	ldr	r2, [sp, #0]
 80241b2:	2339      	movs	r3, #57	@ 0x39
 80241b4:	7013      	strb	r3, [r2, #0]
 80241b6:	4633      	mov	r3, r6
 80241b8:	461e      	mov	r6, r3
 80241ba:	3b01      	subs	r3, #1
 80241bc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80241c0:	2a39      	cmp	r2, #57	@ 0x39
 80241c2:	d052      	beq.n	802426a <_dtoa_r+0xb12>
 80241c4:	3201      	adds	r2, #1
 80241c6:	701a      	strb	r2, [r3, #0]
 80241c8:	e612      	b.n	8023df0 <_dtoa_r+0x698>
 80241ca:	2a00      	cmp	r2, #0
 80241cc:	dd07      	ble.n	80241de <_dtoa_r+0xa86>
 80241ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80241d2:	d0ed      	beq.n	80241b0 <_dtoa_r+0xa58>
 80241d4:	9a00      	ldr	r2, [sp, #0]
 80241d6:	f108 0301 	add.w	r3, r8, #1
 80241da:	7013      	strb	r3, [r2, #0]
 80241dc:	e608      	b.n	8023df0 <_dtoa_r+0x698>
 80241de:	9b07      	ldr	r3, [sp, #28]
 80241e0:	9a07      	ldr	r2, [sp, #28]
 80241e2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80241e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80241e8:	4293      	cmp	r3, r2
 80241ea:	d028      	beq.n	802423e <_dtoa_r+0xae6>
 80241ec:	4649      	mov	r1, r9
 80241ee:	2300      	movs	r3, #0
 80241f0:	220a      	movs	r2, #10
 80241f2:	4658      	mov	r0, fp
 80241f4:	f000 f920 	bl	8024438 <__multadd>
 80241f8:	42af      	cmp	r7, r5
 80241fa:	4681      	mov	r9, r0
 80241fc:	f04f 0300 	mov.w	r3, #0
 8024200:	f04f 020a 	mov.w	r2, #10
 8024204:	4639      	mov	r1, r7
 8024206:	4658      	mov	r0, fp
 8024208:	d107      	bne.n	802421a <_dtoa_r+0xac2>
 802420a:	f000 f915 	bl	8024438 <__multadd>
 802420e:	4607      	mov	r7, r0
 8024210:	4605      	mov	r5, r0
 8024212:	9b07      	ldr	r3, [sp, #28]
 8024214:	3301      	adds	r3, #1
 8024216:	9307      	str	r3, [sp, #28]
 8024218:	e774      	b.n	8024104 <_dtoa_r+0x9ac>
 802421a:	f000 f90d 	bl	8024438 <__multadd>
 802421e:	4629      	mov	r1, r5
 8024220:	4607      	mov	r7, r0
 8024222:	2300      	movs	r3, #0
 8024224:	220a      	movs	r2, #10
 8024226:	4658      	mov	r0, fp
 8024228:	f000 f906 	bl	8024438 <__multadd>
 802422c:	4605      	mov	r5, r0
 802422e:	e7f0      	b.n	8024212 <_dtoa_r+0xaba>
 8024230:	9b00      	ldr	r3, [sp, #0]
 8024232:	2b00      	cmp	r3, #0
 8024234:	bfcc      	ite	gt
 8024236:	461e      	movgt	r6, r3
 8024238:	2601      	movle	r6, #1
 802423a:	4456      	add	r6, sl
 802423c:	2700      	movs	r7, #0
 802423e:	4649      	mov	r1, r9
 8024240:	2201      	movs	r2, #1
 8024242:	4658      	mov	r0, fp
 8024244:	f000 faee 	bl	8024824 <__lshift>
 8024248:	4621      	mov	r1, r4
 802424a:	4681      	mov	r9, r0
 802424c:	f000 fb56 	bl	80248fc <__mcmp>
 8024250:	2800      	cmp	r0, #0
 8024252:	dcb0      	bgt.n	80241b6 <_dtoa_r+0xa5e>
 8024254:	d102      	bne.n	802425c <_dtoa_r+0xb04>
 8024256:	f018 0f01 	tst.w	r8, #1
 802425a:	d1ac      	bne.n	80241b6 <_dtoa_r+0xa5e>
 802425c:	4633      	mov	r3, r6
 802425e:	461e      	mov	r6, r3
 8024260:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8024264:	2a30      	cmp	r2, #48	@ 0x30
 8024266:	d0fa      	beq.n	802425e <_dtoa_r+0xb06>
 8024268:	e5c2      	b.n	8023df0 <_dtoa_r+0x698>
 802426a:	459a      	cmp	sl, r3
 802426c:	d1a4      	bne.n	80241b8 <_dtoa_r+0xa60>
 802426e:	9b04      	ldr	r3, [sp, #16]
 8024270:	3301      	adds	r3, #1
 8024272:	9304      	str	r3, [sp, #16]
 8024274:	2331      	movs	r3, #49	@ 0x31
 8024276:	f88a 3000 	strb.w	r3, [sl]
 802427a:	e5b9      	b.n	8023df0 <_dtoa_r+0x698>
 802427c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802427e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80242dc <_dtoa_r+0xb84>
 8024282:	b11b      	cbz	r3, 802428c <_dtoa_r+0xb34>
 8024284:	f10a 0308 	add.w	r3, sl, #8
 8024288:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802428a:	6013      	str	r3, [r2, #0]
 802428c:	4650      	mov	r0, sl
 802428e:	b019      	add	sp, #100	@ 0x64
 8024290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024294:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024296:	2b01      	cmp	r3, #1
 8024298:	f77f ae37 	ble.w	8023f0a <_dtoa_r+0x7b2>
 802429c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802429e:	930a      	str	r3, [sp, #40]	@ 0x28
 80242a0:	2001      	movs	r0, #1
 80242a2:	e655      	b.n	8023f50 <_dtoa_r+0x7f8>
 80242a4:	9b00      	ldr	r3, [sp, #0]
 80242a6:	2b00      	cmp	r3, #0
 80242a8:	f77f aed6 	ble.w	8024058 <_dtoa_r+0x900>
 80242ac:	4656      	mov	r6, sl
 80242ae:	4621      	mov	r1, r4
 80242b0:	4648      	mov	r0, r9
 80242b2:	f7ff f9c9 	bl	8023648 <quorem>
 80242b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80242ba:	f806 8b01 	strb.w	r8, [r6], #1
 80242be:	9b00      	ldr	r3, [sp, #0]
 80242c0:	eba6 020a 	sub.w	r2, r6, sl
 80242c4:	4293      	cmp	r3, r2
 80242c6:	ddb3      	ble.n	8024230 <_dtoa_r+0xad8>
 80242c8:	4649      	mov	r1, r9
 80242ca:	2300      	movs	r3, #0
 80242cc:	220a      	movs	r2, #10
 80242ce:	4658      	mov	r0, fp
 80242d0:	f000 f8b2 	bl	8024438 <__multadd>
 80242d4:	4681      	mov	r9, r0
 80242d6:	e7ea      	b.n	80242ae <_dtoa_r+0xb56>
 80242d8:	08044725 	.word	0x08044725
 80242dc:	080446a9 	.word	0x080446a9

080242e0 <_free_r>:
 80242e0:	b538      	push	{r3, r4, r5, lr}
 80242e2:	4605      	mov	r5, r0
 80242e4:	2900      	cmp	r1, #0
 80242e6:	d041      	beq.n	802436c <_free_r+0x8c>
 80242e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80242ec:	1f0c      	subs	r4, r1, #4
 80242ee:	2b00      	cmp	r3, #0
 80242f0:	bfb8      	it	lt
 80242f2:	18e4      	addlt	r4, r4, r3
 80242f4:	f7fe f822 	bl	802233c <__malloc_lock>
 80242f8:	4a1d      	ldr	r2, [pc, #116]	@ (8024370 <_free_r+0x90>)
 80242fa:	6813      	ldr	r3, [r2, #0]
 80242fc:	b933      	cbnz	r3, 802430c <_free_r+0x2c>
 80242fe:	6063      	str	r3, [r4, #4]
 8024300:	6014      	str	r4, [r2, #0]
 8024302:	4628      	mov	r0, r5
 8024304:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024308:	f7fe b81e 	b.w	8022348 <__malloc_unlock>
 802430c:	42a3      	cmp	r3, r4
 802430e:	d908      	bls.n	8024322 <_free_r+0x42>
 8024310:	6820      	ldr	r0, [r4, #0]
 8024312:	1821      	adds	r1, r4, r0
 8024314:	428b      	cmp	r3, r1
 8024316:	bf01      	itttt	eq
 8024318:	6819      	ldreq	r1, [r3, #0]
 802431a:	685b      	ldreq	r3, [r3, #4]
 802431c:	1809      	addeq	r1, r1, r0
 802431e:	6021      	streq	r1, [r4, #0]
 8024320:	e7ed      	b.n	80242fe <_free_r+0x1e>
 8024322:	461a      	mov	r2, r3
 8024324:	685b      	ldr	r3, [r3, #4]
 8024326:	b10b      	cbz	r3, 802432c <_free_r+0x4c>
 8024328:	42a3      	cmp	r3, r4
 802432a:	d9fa      	bls.n	8024322 <_free_r+0x42>
 802432c:	6811      	ldr	r1, [r2, #0]
 802432e:	1850      	adds	r0, r2, r1
 8024330:	42a0      	cmp	r0, r4
 8024332:	d10b      	bne.n	802434c <_free_r+0x6c>
 8024334:	6820      	ldr	r0, [r4, #0]
 8024336:	4401      	add	r1, r0
 8024338:	1850      	adds	r0, r2, r1
 802433a:	4283      	cmp	r3, r0
 802433c:	6011      	str	r1, [r2, #0]
 802433e:	d1e0      	bne.n	8024302 <_free_r+0x22>
 8024340:	6818      	ldr	r0, [r3, #0]
 8024342:	685b      	ldr	r3, [r3, #4]
 8024344:	6053      	str	r3, [r2, #4]
 8024346:	4408      	add	r0, r1
 8024348:	6010      	str	r0, [r2, #0]
 802434a:	e7da      	b.n	8024302 <_free_r+0x22>
 802434c:	d902      	bls.n	8024354 <_free_r+0x74>
 802434e:	230c      	movs	r3, #12
 8024350:	602b      	str	r3, [r5, #0]
 8024352:	e7d6      	b.n	8024302 <_free_r+0x22>
 8024354:	6820      	ldr	r0, [r4, #0]
 8024356:	1821      	adds	r1, r4, r0
 8024358:	428b      	cmp	r3, r1
 802435a:	bf04      	itt	eq
 802435c:	6819      	ldreq	r1, [r3, #0]
 802435e:	685b      	ldreq	r3, [r3, #4]
 8024360:	6063      	str	r3, [r4, #4]
 8024362:	bf04      	itt	eq
 8024364:	1809      	addeq	r1, r1, r0
 8024366:	6021      	streq	r1, [r4, #0]
 8024368:	6054      	str	r4, [r2, #4]
 802436a:	e7ca      	b.n	8024302 <_free_r+0x22>
 802436c:	bd38      	pop	{r3, r4, r5, pc}
 802436e:	bf00      	nop
 8024370:	20009d40 	.word	0x20009d40

08024374 <_Balloc>:
 8024374:	b570      	push	{r4, r5, r6, lr}
 8024376:	69c6      	ldr	r6, [r0, #28]
 8024378:	4604      	mov	r4, r0
 802437a:	460d      	mov	r5, r1
 802437c:	b976      	cbnz	r6, 802439c <_Balloc+0x28>
 802437e:	2010      	movs	r0, #16
 8024380:	f7fd ff32 	bl	80221e8 <malloc>
 8024384:	4602      	mov	r2, r0
 8024386:	61e0      	str	r0, [r4, #28]
 8024388:	b920      	cbnz	r0, 8024394 <_Balloc+0x20>
 802438a:	4b18      	ldr	r3, [pc, #96]	@ (80243ec <_Balloc+0x78>)
 802438c:	4818      	ldr	r0, [pc, #96]	@ (80243f0 <_Balloc+0x7c>)
 802438e:	216b      	movs	r1, #107	@ 0x6b
 8024390:	f001 ff1e 	bl	80261d0 <__assert_func>
 8024394:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8024398:	6006      	str	r6, [r0, #0]
 802439a:	60c6      	str	r6, [r0, #12]
 802439c:	69e6      	ldr	r6, [r4, #28]
 802439e:	68f3      	ldr	r3, [r6, #12]
 80243a0:	b183      	cbz	r3, 80243c4 <_Balloc+0x50>
 80243a2:	69e3      	ldr	r3, [r4, #28]
 80243a4:	68db      	ldr	r3, [r3, #12]
 80243a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80243aa:	b9b8      	cbnz	r0, 80243dc <_Balloc+0x68>
 80243ac:	2101      	movs	r1, #1
 80243ae:	fa01 f605 	lsl.w	r6, r1, r5
 80243b2:	1d72      	adds	r2, r6, #5
 80243b4:	0092      	lsls	r2, r2, #2
 80243b6:	4620      	mov	r0, r4
 80243b8:	f001 ff28 	bl	802620c <_calloc_r>
 80243bc:	b160      	cbz	r0, 80243d8 <_Balloc+0x64>
 80243be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80243c2:	e00e      	b.n	80243e2 <_Balloc+0x6e>
 80243c4:	2221      	movs	r2, #33	@ 0x21
 80243c6:	2104      	movs	r1, #4
 80243c8:	4620      	mov	r0, r4
 80243ca:	f001 ff1f 	bl	802620c <_calloc_r>
 80243ce:	69e3      	ldr	r3, [r4, #28]
 80243d0:	60f0      	str	r0, [r6, #12]
 80243d2:	68db      	ldr	r3, [r3, #12]
 80243d4:	2b00      	cmp	r3, #0
 80243d6:	d1e4      	bne.n	80243a2 <_Balloc+0x2e>
 80243d8:	2000      	movs	r0, #0
 80243da:	bd70      	pop	{r4, r5, r6, pc}
 80243dc:	6802      	ldr	r2, [r0, #0]
 80243de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80243e2:	2300      	movs	r3, #0
 80243e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80243e8:	e7f7      	b.n	80243da <_Balloc+0x66>
 80243ea:	bf00      	nop
 80243ec:	080446b6 	.word	0x080446b6
 80243f0:	08044736 	.word	0x08044736

080243f4 <_Bfree>:
 80243f4:	b570      	push	{r4, r5, r6, lr}
 80243f6:	69c6      	ldr	r6, [r0, #28]
 80243f8:	4605      	mov	r5, r0
 80243fa:	460c      	mov	r4, r1
 80243fc:	b976      	cbnz	r6, 802441c <_Bfree+0x28>
 80243fe:	2010      	movs	r0, #16
 8024400:	f7fd fef2 	bl	80221e8 <malloc>
 8024404:	4602      	mov	r2, r0
 8024406:	61e8      	str	r0, [r5, #28]
 8024408:	b920      	cbnz	r0, 8024414 <_Bfree+0x20>
 802440a:	4b09      	ldr	r3, [pc, #36]	@ (8024430 <_Bfree+0x3c>)
 802440c:	4809      	ldr	r0, [pc, #36]	@ (8024434 <_Bfree+0x40>)
 802440e:	218f      	movs	r1, #143	@ 0x8f
 8024410:	f001 fede 	bl	80261d0 <__assert_func>
 8024414:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8024418:	6006      	str	r6, [r0, #0]
 802441a:	60c6      	str	r6, [r0, #12]
 802441c:	b13c      	cbz	r4, 802442e <_Bfree+0x3a>
 802441e:	69eb      	ldr	r3, [r5, #28]
 8024420:	6862      	ldr	r2, [r4, #4]
 8024422:	68db      	ldr	r3, [r3, #12]
 8024424:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8024428:	6021      	str	r1, [r4, #0]
 802442a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802442e:	bd70      	pop	{r4, r5, r6, pc}
 8024430:	080446b6 	.word	0x080446b6
 8024434:	08044736 	.word	0x08044736

08024438 <__multadd>:
 8024438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802443c:	690d      	ldr	r5, [r1, #16]
 802443e:	4607      	mov	r7, r0
 8024440:	460c      	mov	r4, r1
 8024442:	461e      	mov	r6, r3
 8024444:	f101 0c14 	add.w	ip, r1, #20
 8024448:	2000      	movs	r0, #0
 802444a:	f8dc 3000 	ldr.w	r3, [ip]
 802444e:	b299      	uxth	r1, r3
 8024450:	fb02 6101 	mla	r1, r2, r1, r6
 8024454:	0c1e      	lsrs	r6, r3, #16
 8024456:	0c0b      	lsrs	r3, r1, #16
 8024458:	fb02 3306 	mla	r3, r2, r6, r3
 802445c:	b289      	uxth	r1, r1
 802445e:	3001      	adds	r0, #1
 8024460:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8024464:	4285      	cmp	r5, r0
 8024466:	f84c 1b04 	str.w	r1, [ip], #4
 802446a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 802446e:	dcec      	bgt.n	802444a <__multadd+0x12>
 8024470:	b30e      	cbz	r6, 80244b6 <__multadd+0x7e>
 8024472:	68a3      	ldr	r3, [r4, #8]
 8024474:	42ab      	cmp	r3, r5
 8024476:	dc19      	bgt.n	80244ac <__multadd+0x74>
 8024478:	6861      	ldr	r1, [r4, #4]
 802447a:	4638      	mov	r0, r7
 802447c:	3101      	adds	r1, #1
 802447e:	f7ff ff79 	bl	8024374 <_Balloc>
 8024482:	4680      	mov	r8, r0
 8024484:	b928      	cbnz	r0, 8024492 <__multadd+0x5a>
 8024486:	4602      	mov	r2, r0
 8024488:	4b0c      	ldr	r3, [pc, #48]	@ (80244bc <__multadd+0x84>)
 802448a:	480d      	ldr	r0, [pc, #52]	@ (80244c0 <__multadd+0x88>)
 802448c:	21ba      	movs	r1, #186	@ 0xba
 802448e:	f001 fe9f 	bl	80261d0 <__assert_func>
 8024492:	6922      	ldr	r2, [r4, #16]
 8024494:	3202      	adds	r2, #2
 8024496:	f104 010c 	add.w	r1, r4, #12
 802449a:	0092      	lsls	r2, r2, #2
 802449c:	300c      	adds	r0, #12
 802449e:	f7ff f8be 	bl	802361e <memcpy>
 80244a2:	4621      	mov	r1, r4
 80244a4:	4638      	mov	r0, r7
 80244a6:	f7ff ffa5 	bl	80243f4 <_Bfree>
 80244aa:	4644      	mov	r4, r8
 80244ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80244b0:	3501      	adds	r5, #1
 80244b2:	615e      	str	r6, [r3, #20]
 80244b4:	6125      	str	r5, [r4, #16]
 80244b6:	4620      	mov	r0, r4
 80244b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80244bc:	08044725 	.word	0x08044725
 80244c0:	08044736 	.word	0x08044736

080244c4 <__s2b>:
 80244c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80244c8:	460c      	mov	r4, r1
 80244ca:	4615      	mov	r5, r2
 80244cc:	461f      	mov	r7, r3
 80244ce:	2209      	movs	r2, #9
 80244d0:	3308      	adds	r3, #8
 80244d2:	4606      	mov	r6, r0
 80244d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80244d8:	2100      	movs	r1, #0
 80244da:	2201      	movs	r2, #1
 80244dc:	429a      	cmp	r2, r3
 80244de:	db09      	blt.n	80244f4 <__s2b+0x30>
 80244e0:	4630      	mov	r0, r6
 80244e2:	f7ff ff47 	bl	8024374 <_Balloc>
 80244e6:	b940      	cbnz	r0, 80244fa <__s2b+0x36>
 80244e8:	4602      	mov	r2, r0
 80244ea:	4b19      	ldr	r3, [pc, #100]	@ (8024550 <__s2b+0x8c>)
 80244ec:	4819      	ldr	r0, [pc, #100]	@ (8024554 <__s2b+0x90>)
 80244ee:	21d3      	movs	r1, #211	@ 0xd3
 80244f0:	f001 fe6e 	bl	80261d0 <__assert_func>
 80244f4:	0052      	lsls	r2, r2, #1
 80244f6:	3101      	adds	r1, #1
 80244f8:	e7f0      	b.n	80244dc <__s2b+0x18>
 80244fa:	9b08      	ldr	r3, [sp, #32]
 80244fc:	6143      	str	r3, [r0, #20]
 80244fe:	2d09      	cmp	r5, #9
 8024500:	f04f 0301 	mov.w	r3, #1
 8024504:	6103      	str	r3, [r0, #16]
 8024506:	dd16      	ble.n	8024536 <__s2b+0x72>
 8024508:	f104 0909 	add.w	r9, r4, #9
 802450c:	46c8      	mov	r8, r9
 802450e:	442c      	add	r4, r5
 8024510:	f818 3b01 	ldrb.w	r3, [r8], #1
 8024514:	4601      	mov	r1, r0
 8024516:	3b30      	subs	r3, #48	@ 0x30
 8024518:	220a      	movs	r2, #10
 802451a:	4630      	mov	r0, r6
 802451c:	f7ff ff8c 	bl	8024438 <__multadd>
 8024520:	45a0      	cmp	r8, r4
 8024522:	d1f5      	bne.n	8024510 <__s2b+0x4c>
 8024524:	f1a5 0408 	sub.w	r4, r5, #8
 8024528:	444c      	add	r4, r9
 802452a:	1b2d      	subs	r5, r5, r4
 802452c:	1963      	adds	r3, r4, r5
 802452e:	42bb      	cmp	r3, r7
 8024530:	db04      	blt.n	802453c <__s2b+0x78>
 8024532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024536:	340a      	adds	r4, #10
 8024538:	2509      	movs	r5, #9
 802453a:	e7f6      	b.n	802452a <__s2b+0x66>
 802453c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8024540:	4601      	mov	r1, r0
 8024542:	3b30      	subs	r3, #48	@ 0x30
 8024544:	220a      	movs	r2, #10
 8024546:	4630      	mov	r0, r6
 8024548:	f7ff ff76 	bl	8024438 <__multadd>
 802454c:	e7ee      	b.n	802452c <__s2b+0x68>
 802454e:	bf00      	nop
 8024550:	08044725 	.word	0x08044725
 8024554:	08044736 	.word	0x08044736

08024558 <__hi0bits>:
 8024558:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 802455c:	4603      	mov	r3, r0
 802455e:	bf36      	itet	cc
 8024560:	0403      	lslcc	r3, r0, #16
 8024562:	2000      	movcs	r0, #0
 8024564:	2010      	movcc	r0, #16
 8024566:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 802456a:	bf3c      	itt	cc
 802456c:	021b      	lslcc	r3, r3, #8
 802456e:	3008      	addcc	r0, #8
 8024570:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8024574:	bf3c      	itt	cc
 8024576:	011b      	lslcc	r3, r3, #4
 8024578:	3004      	addcc	r0, #4
 802457a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 802457e:	bf3c      	itt	cc
 8024580:	009b      	lslcc	r3, r3, #2
 8024582:	3002      	addcc	r0, #2
 8024584:	2b00      	cmp	r3, #0
 8024586:	db05      	blt.n	8024594 <__hi0bits+0x3c>
 8024588:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 802458c:	f100 0001 	add.w	r0, r0, #1
 8024590:	bf08      	it	eq
 8024592:	2020      	moveq	r0, #32
 8024594:	4770      	bx	lr

08024596 <__lo0bits>:
 8024596:	6803      	ldr	r3, [r0, #0]
 8024598:	4602      	mov	r2, r0
 802459a:	f013 0007 	ands.w	r0, r3, #7
 802459e:	d00b      	beq.n	80245b8 <__lo0bits+0x22>
 80245a0:	07d9      	lsls	r1, r3, #31
 80245a2:	d421      	bmi.n	80245e8 <__lo0bits+0x52>
 80245a4:	0798      	lsls	r0, r3, #30
 80245a6:	bf49      	itett	mi
 80245a8:	085b      	lsrmi	r3, r3, #1
 80245aa:	089b      	lsrpl	r3, r3, #2
 80245ac:	2001      	movmi	r0, #1
 80245ae:	6013      	strmi	r3, [r2, #0]
 80245b0:	bf5c      	itt	pl
 80245b2:	6013      	strpl	r3, [r2, #0]
 80245b4:	2002      	movpl	r0, #2
 80245b6:	4770      	bx	lr
 80245b8:	b299      	uxth	r1, r3
 80245ba:	b909      	cbnz	r1, 80245c0 <__lo0bits+0x2a>
 80245bc:	0c1b      	lsrs	r3, r3, #16
 80245be:	2010      	movs	r0, #16
 80245c0:	b2d9      	uxtb	r1, r3
 80245c2:	b909      	cbnz	r1, 80245c8 <__lo0bits+0x32>
 80245c4:	3008      	adds	r0, #8
 80245c6:	0a1b      	lsrs	r3, r3, #8
 80245c8:	0719      	lsls	r1, r3, #28
 80245ca:	bf04      	itt	eq
 80245cc:	091b      	lsreq	r3, r3, #4
 80245ce:	3004      	addeq	r0, #4
 80245d0:	0799      	lsls	r1, r3, #30
 80245d2:	bf04      	itt	eq
 80245d4:	089b      	lsreq	r3, r3, #2
 80245d6:	3002      	addeq	r0, #2
 80245d8:	07d9      	lsls	r1, r3, #31
 80245da:	d403      	bmi.n	80245e4 <__lo0bits+0x4e>
 80245dc:	085b      	lsrs	r3, r3, #1
 80245de:	f100 0001 	add.w	r0, r0, #1
 80245e2:	d003      	beq.n	80245ec <__lo0bits+0x56>
 80245e4:	6013      	str	r3, [r2, #0]
 80245e6:	4770      	bx	lr
 80245e8:	2000      	movs	r0, #0
 80245ea:	4770      	bx	lr
 80245ec:	2020      	movs	r0, #32
 80245ee:	4770      	bx	lr

080245f0 <__i2b>:
 80245f0:	b510      	push	{r4, lr}
 80245f2:	460c      	mov	r4, r1
 80245f4:	2101      	movs	r1, #1
 80245f6:	f7ff febd 	bl	8024374 <_Balloc>
 80245fa:	4602      	mov	r2, r0
 80245fc:	b928      	cbnz	r0, 802460a <__i2b+0x1a>
 80245fe:	4b05      	ldr	r3, [pc, #20]	@ (8024614 <__i2b+0x24>)
 8024600:	4805      	ldr	r0, [pc, #20]	@ (8024618 <__i2b+0x28>)
 8024602:	f240 1145 	movw	r1, #325	@ 0x145
 8024606:	f001 fde3 	bl	80261d0 <__assert_func>
 802460a:	2301      	movs	r3, #1
 802460c:	6144      	str	r4, [r0, #20]
 802460e:	6103      	str	r3, [r0, #16]
 8024610:	bd10      	pop	{r4, pc}
 8024612:	bf00      	nop
 8024614:	08044725 	.word	0x08044725
 8024618:	08044736 	.word	0x08044736

0802461c <__multiply>:
 802461c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024620:	4614      	mov	r4, r2
 8024622:	690a      	ldr	r2, [r1, #16]
 8024624:	6923      	ldr	r3, [r4, #16]
 8024626:	429a      	cmp	r2, r3
 8024628:	bfa8      	it	ge
 802462a:	4623      	movge	r3, r4
 802462c:	460f      	mov	r7, r1
 802462e:	bfa4      	itt	ge
 8024630:	460c      	movge	r4, r1
 8024632:	461f      	movge	r7, r3
 8024634:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8024638:	f8d7 9010 	ldr.w	r9, [r7, #16]
 802463c:	68a3      	ldr	r3, [r4, #8]
 802463e:	6861      	ldr	r1, [r4, #4]
 8024640:	eb0a 0609 	add.w	r6, sl, r9
 8024644:	42b3      	cmp	r3, r6
 8024646:	b085      	sub	sp, #20
 8024648:	bfb8      	it	lt
 802464a:	3101      	addlt	r1, #1
 802464c:	f7ff fe92 	bl	8024374 <_Balloc>
 8024650:	b930      	cbnz	r0, 8024660 <__multiply+0x44>
 8024652:	4602      	mov	r2, r0
 8024654:	4b44      	ldr	r3, [pc, #272]	@ (8024768 <__multiply+0x14c>)
 8024656:	4845      	ldr	r0, [pc, #276]	@ (802476c <__multiply+0x150>)
 8024658:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 802465c:	f001 fdb8 	bl	80261d0 <__assert_func>
 8024660:	f100 0514 	add.w	r5, r0, #20
 8024664:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8024668:	462b      	mov	r3, r5
 802466a:	2200      	movs	r2, #0
 802466c:	4543      	cmp	r3, r8
 802466e:	d321      	bcc.n	80246b4 <__multiply+0x98>
 8024670:	f107 0114 	add.w	r1, r7, #20
 8024674:	f104 0214 	add.w	r2, r4, #20
 8024678:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 802467c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8024680:	9302      	str	r3, [sp, #8]
 8024682:	1b13      	subs	r3, r2, r4
 8024684:	3b15      	subs	r3, #21
 8024686:	f023 0303 	bic.w	r3, r3, #3
 802468a:	3304      	adds	r3, #4
 802468c:	f104 0715 	add.w	r7, r4, #21
 8024690:	42ba      	cmp	r2, r7
 8024692:	bf38      	it	cc
 8024694:	2304      	movcc	r3, #4
 8024696:	9301      	str	r3, [sp, #4]
 8024698:	9b02      	ldr	r3, [sp, #8]
 802469a:	9103      	str	r1, [sp, #12]
 802469c:	428b      	cmp	r3, r1
 802469e:	d80c      	bhi.n	80246ba <__multiply+0x9e>
 80246a0:	2e00      	cmp	r6, #0
 80246a2:	dd03      	ble.n	80246ac <__multiply+0x90>
 80246a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80246a8:	2b00      	cmp	r3, #0
 80246aa:	d05b      	beq.n	8024764 <__multiply+0x148>
 80246ac:	6106      	str	r6, [r0, #16]
 80246ae:	b005      	add	sp, #20
 80246b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80246b4:	f843 2b04 	str.w	r2, [r3], #4
 80246b8:	e7d8      	b.n	802466c <__multiply+0x50>
 80246ba:	f8b1 a000 	ldrh.w	sl, [r1]
 80246be:	f1ba 0f00 	cmp.w	sl, #0
 80246c2:	d024      	beq.n	802470e <__multiply+0xf2>
 80246c4:	f104 0e14 	add.w	lr, r4, #20
 80246c8:	46a9      	mov	r9, r5
 80246ca:	f04f 0c00 	mov.w	ip, #0
 80246ce:	f85e 7b04 	ldr.w	r7, [lr], #4
 80246d2:	f8d9 3000 	ldr.w	r3, [r9]
 80246d6:	fa1f fb87 	uxth.w	fp, r7
 80246da:	b29b      	uxth	r3, r3
 80246dc:	fb0a 330b 	mla	r3, sl, fp, r3
 80246e0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80246e4:	f8d9 7000 	ldr.w	r7, [r9]
 80246e8:	4463      	add	r3, ip
 80246ea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80246ee:	fb0a c70b 	mla	r7, sl, fp, ip
 80246f2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80246f6:	b29b      	uxth	r3, r3
 80246f8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80246fc:	4572      	cmp	r2, lr
 80246fe:	f849 3b04 	str.w	r3, [r9], #4
 8024702:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8024706:	d8e2      	bhi.n	80246ce <__multiply+0xb2>
 8024708:	9b01      	ldr	r3, [sp, #4]
 802470a:	f845 c003 	str.w	ip, [r5, r3]
 802470e:	9b03      	ldr	r3, [sp, #12]
 8024710:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8024714:	3104      	adds	r1, #4
 8024716:	f1b9 0f00 	cmp.w	r9, #0
 802471a:	d021      	beq.n	8024760 <__multiply+0x144>
 802471c:	682b      	ldr	r3, [r5, #0]
 802471e:	f104 0c14 	add.w	ip, r4, #20
 8024722:	46ae      	mov	lr, r5
 8024724:	f04f 0a00 	mov.w	sl, #0
 8024728:	f8bc b000 	ldrh.w	fp, [ip]
 802472c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8024730:	fb09 770b 	mla	r7, r9, fp, r7
 8024734:	4457      	add	r7, sl
 8024736:	b29b      	uxth	r3, r3
 8024738:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 802473c:	f84e 3b04 	str.w	r3, [lr], #4
 8024740:	f85c 3b04 	ldr.w	r3, [ip], #4
 8024744:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8024748:	f8be 3000 	ldrh.w	r3, [lr]
 802474c:	fb09 330a 	mla	r3, r9, sl, r3
 8024750:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8024754:	4562      	cmp	r2, ip
 8024756:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802475a:	d8e5      	bhi.n	8024728 <__multiply+0x10c>
 802475c:	9f01      	ldr	r7, [sp, #4]
 802475e:	51eb      	str	r3, [r5, r7]
 8024760:	3504      	adds	r5, #4
 8024762:	e799      	b.n	8024698 <__multiply+0x7c>
 8024764:	3e01      	subs	r6, #1
 8024766:	e79b      	b.n	80246a0 <__multiply+0x84>
 8024768:	08044725 	.word	0x08044725
 802476c:	08044736 	.word	0x08044736

08024770 <__pow5mult>:
 8024770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024774:	4615      	mov	r5, r2
 8024776:	f012 0203 	ands.w	r2, r2, #3
 802477a:	4607      	mov	r7, r0
 802477c:	460e      	mov	r6, r1
 802477e:	d007      	beq.n	8024790 <__pow5mult+0x20>
 8024780:	4c25      	ldr	r4, [pc, #148]	@ (8024818 <__pow5mult+0xa8>)
 8024782:	3a01      	subs	r2, #1
 8024784:	2300      	movs	r3, #0
 8024786:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802478a:	f7ff fe55 	bl	8024438 <__multadd>
 802478e:	4606      	mov	r6, r0
 8024790:	10ad      	asrs	r5, r5, #2
 8024792:	d03d      	beq.n	8024810 <__pow5mult+0xa0>
 8024794:	69fc      	ldr	r4, [r7, #28]
 8024796:	b97c      	cbnz	r4, 80247b8 <__pow5mult+0x48>
 8024798:	2010      	movs	r0, #16
 802479a:	f7fd fd25 	bl	80221e8 <malloc>
 802479e:	4602      	mov	r2, r0
 80247a0:	61f8      	str	r0, [r7, #28]
 80247a2:	b928      	cbnz	r0, 80247b0 <__pow5mult+0x40>
 80247a4:	4b1d      	ldr	r3, [pc, #116]	@ (802481c <__pow5mult+0xac>)
 80247a6:	481e      	ldr	r0, [pc, #120]	@ (8024820 <__pow5mult+0xb0>)
 80247a8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80247ac:	f001 fd10 	bl	80261d0 <__assert_func>
 80247b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80247b4:	6004      	str	r4, [r0, #0]
 80247b6:	60c4      	str	r4, [r0, #12]
 80247b8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80247bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80247c0:	b94c      	cbnz	r4, 80247d6 <__pow5mult+0x66>
 80247c2:	f240 2171 	movw	r1, #625	@ 0x271
 80247c6:	4638      	mov	r0, r7
 80247c8:	f7ff ff12 	bl	80245f0 <__i2b>
 80247cc:	2300      	movs	r3, #0
 80247ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80247d2:	4604      	mov	r4, r0
 80247d4:	6003      	str	r3, [r0, #0]
 80247d6:	f04f 0900 	mov.w	r9, #0
 80247da:	07eb      	lsls	r3, r5, #31
 80247dc:	d50a      	bpl.n	80247f4 <__pow5mult+0x84>
 80247de:	4631      	mov	r1, r6
 80247e0:	4622      	mov	r2, r4
 80247e2:	4638      	mov	r0, r7
 80247e4:	f7ff ff1a 	bl	802461c <__multiply>
 80247e8:	4631      	mov	r1, r6
 80247ea:	4680      	mov	r8, r0
 80247ec:	4638      	mov	r0, r7
 80247ee:	f7ff fe01 	bl	80243f4 <_Bfree>
 80247f2:	4646      	mov	r6, r8
 80247f4:	106d      	asrs	r5, r5, #1
 80247f6:	d00b      	beq.n	8024810 <__pow5mult+0xa0>
 80247f8:	6820      	ldr	r0, [r4, #0]
 80247fa:	b938      	cbnz	r0, 802480c <__pow5mult+0x9c>
 80247fc:	4622      	mov	r2, r4
 80247fe:	4621      	mov	r1, r4
 8024800:	4638      	mov	r0, r7
 8024802:	f7ff ff0b 	bl	802461c <__multiply>
 8024806:	6020      	str	r0, [r4, #0]
 8024808:	f8c0 9000 	str.w	r9, [r0]
 802480c:	4604      	mov	r4, r0
 802480e:	e7e4      	b.n	80247da <__pow5mult+0x6a>
 8024810:	4630      	mov	r0, r6
 8024812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024816:	bf00      	nop
 8024818:	08044790 	.word	0x08044790
 802481c:	080446b6 	.word	0x080446b6
 8024820:	08044736 	.word	0x08044736

08024824 <__lshift>:
 8024824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024828:	460c      	mov	r4, r1
 802482a:	6849      	ldr	r1, [r1, #4]
 802482c:	6923      	ldr	r3, [r4, #16]
 802482e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8024832:	68a3      	ldr	r3, [r4, #8]
 8024834:	4607      	mov	r7, r0
 8024836:	4691      	mov	r9, r2
 8024838:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802483c:	f108 0601 	add.w	r6, r8, #1
 8024840:	42b3      	cmp	r3, r6
 8024842:	db0b      	blt.n	802485c <__lshift+0x38>
 8024844:	4638      	mov	r0, r7
 8024846:	f7ff fd95 	bl	8024374 <_Balloc>
 802484a:	4605      	mov	r5, r0
 802484c:	b948      	cbnz	r0, 8024862 <__lshift+0x3e>
 802484e:	4602      	mov	r2, r0
 8024850:	4b28      	ldr	r3, [pc, #160]	@ (80248f4 <__lshift+0xd0>)
 8024852:	4829      	ldr	r0, [pc, #164]	@ (80248f8 <__lshift+0xd4>)
 8024854:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8024858:	f001 fcba 	bl	80261d0 <__assert_func>
 802485c:	3101      	adds	r1, #1
 802485e:	005b      	lsls	r3, r3, #1
 8024860:	e7ee      	b.n	8024840 <__lshift+0x1c>
 8024862:	2300      	movs	r3, #0
 8024864:	f100 0114 	add.w	r1, r0, #20
 8024868:	f100 0210 	add.w	r2, r0, #16
 802486c:	4618      	mov	r0, r3
 802486e:	4553      	cmp	r3, sl
 8024870:	db33      	blt.n	80248da <__lshift+0xb6>
 8024872:	6920      	ldr	r0, [r4, #16]
 8024874:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8024878:	f104 0314 	add.w	r3, r4, #20
 802487c:	f019 091f 	ands.w	r9, r9, #31
 8024880:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8024884:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8024888:	d02b      	beq.n	80248e2 <__lshift+0xbe>
 802488a:	f1c9 0e20 	rsb	lr, r9, #32
 802488e:	468a      	mov	sl, r1
 8024890:	2200      	movs	r2, #0
 8024892:	6818      	ldr	r0, [r3, #0]
 8024894:	fa00 f009 	lsl.w	r0, r0, r9
 8024898:	4310      	orrs	r0, r2
 802489a:	f84a 0b04 	str.w	r0, [sl], #4
 802489e:	f853 2b04 	ldr.w	r2, [r3], #4
 80248a2:	459c      	cmp	ip, r3
 80248a4:	fa22 f20e 	lsr.w	r2, r2, lr
 80248a8:	d8f3      	bhi.n	8024892 <__lshift+0x6e>
 80248aa:	ebac 0304 	sub.w	r3, ip, r4
 80248ae:	3b15      	subs	r3, #21
 80248b0:	f023 0303 	bic.w	r3, r3, #3
 80248b4:	3304      	adds	r3, #4
 80248b6:	f104 0015 	add.w	r0, r4, #21
 80248ba:	4584      	cmp	ip, r0
 80248bc:	bf38      	it	cc
 80248be:	2304      	movcc	r3, #4
 80248c0:	50ca      	str	r2, [r1, r3]
 80248c2:	b10a      	cbz	r2, 80248c8 <__lshift+0xa4>
 80248c4:	f108 0602 	add.w	r6, r8, #2
 80248c8:	3e01      	subs	r6, #1
 80248ca:	4638      	mov	r0, r7
 80248cc:	612e      	str	r6, [r5, #16]
 80248ce:	4621      	mov	r1, r4
 80248d0:	f7ff fd90 	bl	80243f4 <_Bfree>
 80248d4:	4628      	mov	r0, r5
 80248d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80248da:	f842 0f04 	str.w	r0, [r2, #4]!
 80248de:	3301      	adds	r3, #1
 80248e0:	e7c5      	b.n	802486e <__lshift+0x4a>
 80248e2:	3904      	subs	r1, #4
 80248e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80248e8:	f841 2f04 	str.w	r2, [r1, #4]!
 80248ec:	459c      	cmp	ip, r3
 80248ee:	d8f9      	bhi.n	80248e4 <__lshift+0xc0>
 80248f0:	e7ea      	b.n	80248c8 <__lshift+0xa4>
 80248f2:	bf00      	nop
 80248f4:	08044725 	.word	0x08044725
 80248f8:	08044736 	.word	0x08044736

080248fc <__mcmp>:
 80248fc:	690a      	ldr	r2, [r1, #16]
 80248fe:	4603      	mov	r3, r0
 8024900:	6900      	ldr	r0, [r0, #16]
 8024902:	1a80      	subs	r0, r0, r2
 8024904:	b530      	push	{r4, r5, lr}
 8024906:	d10e      	bne.n	8024926 <__mcmp+0x2a>
 8024908:	3314      	adds	r3, #20
 802490a:	3114      	adds	r1, #20
 802490c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8024910:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8024914:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8024918:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 802491c:	4295      	cmp	r5, r2
 802491e:	d003      	beq.n	8024928 <__mcmp+0x2c>
 8024920:	d205      	bcs.n	802492e <__mcmp+0x32>
 8024922:	f04f 30ff 	mov.w	r0, #4294967295
 8024926:	bd30      	pop	{r4, r5, pc}
 8024928:	42a3      	cmp	r3, r4
 802492a:	d3f3      	bcc.n	8024914 <__mcmp+0x18>
 802492c:	e7fb      	b.n	8024926 <__mcmp+0x2a>
 802492e:	2001      	movs	r0, #1
 8024930:	e7f9      	b.n	8024926 <__mcmp+0x2a>
	...

08024934 <__mdiff>:
 8024934:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024938:	4689      	mov	r9, r1
 802493a:	4606      	mov	r6, r0
 802493c:	4611      	mov	r1, r2
 802493e:	4648      	mov	r0, r9
 8024940:	4614      	mov	r4, r2
 8024942:	f7ff ffdb 	bl	80248fc <__mcmp>
 8024946:	1e05      	subs	r5, r0, #0
 8024948:	d112      	bne.n	8024970 <__mdiff+0x3c>
 802494a:	4629      	mov	r1, r5
 802494c:	4630      	mov	r0, r6
 802494e:	f7ff fd11 	bl	8024374 <_Balloc>
 8024952:	4602      	mov	r2, r0
 8024954:	b928      	cbnz	r0, 8024962 <__mdiff+0x2e>
 8024956:	4b3f      	ldr	r3, [pc, #252]	@ (8024a54 <__mdiff+0x120>)
 8024958:	f240 2137 	movw	r1, #567	@ 0x237
 802495c:	483e      	ldr	r0, [pc, #248]	@ (8024a58 <__mdiff+0x124>)
 802495e:	f001 fc37 	bl	80261d0 <__assert_func>
 8024962:	2301      	movs	r3, #1
 8024964:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8024968:	4610      	mov	r0, r2
 802496a:	b003      	add	sp, #12
 802496c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024970:	bfbc      	itt	lt
 8024972:	464b      	movlt	r3, r9
 8024974:	46a1      	movlt	r9, r4
 8024976:	4630      	mov	r0, r6
 8024978:	f8d9 1004 	ldr.w	r1, [r9, #4]
 802497c:	bfba      	itte	lt
 802497e:	461c      	movlt	r4, r3
 8024980:	2501      	movlt	r5, #1
 8024982:	2500      	movge	r5, #0
 8024984:	f7ff fcf6 	bl	8024374 <_Balloc>
 8024988:	4602      	mov	r2, r0
 802498a:	b918      	cbnz	r0, 8024994 <__mdiff+0x60>
 802498c:	4b31      	ldr	r3, [pc, #196]	@ (8024a54 <__mdiff+0x120>)
 802498e:	f240 2145 	movw	r1, #581	@ 0x245
 8024992:	e7e3      	b.n	802495c <__mdiff+0x28>
 8024994:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8024998:	6926      	ldr	r6, [r4, #16]
 802499a:	60c5      	str	r5, [r0, #12]
 802499c:	f109 0310 	add.w	r3, r9, #16
 80249a0:	f109 0514 	add.w	r5, r9, #20
 80249a4:	f104 0e14 	add.w	lr, r4, #20
 80249a8:	f100 0b14 	add.w	fp, r0, #20
 80249ac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80249b0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80249b4:	9301      	str	r3, [sp, #4]
 80249b6:	46d9      	mov	r9, fp
 80249b8:	f04f 0c00 	mov.w	ip, #0
 80249bc:	9b01      	ldr	r3, [sp, #4]
 80249be:	f85e 0b04 	ldr.w	r0, [lr], #4
 80249c2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80249c6:	9301      	str	r3, [sp, #4]
 80249c8:	fa1f f38a 	uxth.w	r3, sl
 80249cc:	4619      	mov	r1, r3
 80249ce:	b283      	uxth	r3, r0
 80249d0:	1acb      	subs	r3, r1, r3
 80249d2:	0c00      	lsrs	r0, r0, #16
 80249d4:	4463      	add	r3, ip
 80249d6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80249da:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80249de:	b29b      	uxth	r3, r3
 80249e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80249e4:	4576      	cmp	r6, lr
 80249e6:	f849 3b04 	str.w	r3, [r9], #4
 80249ea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80249ee:	d8e5      	bhi.n	80249bc <__mdiff+0x88>
 80249f0:	1b33      	subs	r3, r6, r4
 80249f2:	3b15      	subs	r3, #21
 80249f4:	f023 0303 	bic.w	r3, r3, #3
 80249f8:	3415      	adds	r4, #21
 80249fa:	3304      	adds	r3, #4
 80249fc:	42a6      	cmp	r6, r4
 80249fe:	bf38      	it	cc
 8024a00:	2304      	movcc	r3, #4
 8024a02:	441d      	add	r5, r3
 8024a04:	445b      	add	r3, fp
 8024a06:	461e      	mov	r6, r3
 8024a08:	462c      	mov	r4, r5
 8024a0a:	4544      	cmp	r4, r8
 8024a0c:	d30e      	bcc.n	8024a2c <__mdiff+0xf8>
 8024a0e:	f108 0103 	add.w	r1, r8, #3
 8024a12:	1b49      	subs	r1, r1, r5
 8024a14:	f021 0103 	bic.w	r1, r1, #3
 8024a18:	3d03      	subs	r5, #3
 8024a1a:	45a8      	cmp	r8, r5
 8024a1c:	bf38      	it	cc
 8024a1e:	2100      	movcc	r1, #0
 8024a20:	440b      	add	r3, r1
 8024a22:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8024a26:	b191      	cbz	r1, 8024a4e <__mdiff+0x11a>
 8024a28:	6117      	str	r7, [r2, #16]
 8024a2a:	e79d      	b.n	8024968 <__mdiff+0x34>
 8024a2c:	f854 1b04 	ldr.w	r1, [r4], #4
 8024a30:	46e6      	mov	lr, ip
 8024a32:	0c08      	lsrs	r0, r1, #16
 8024a34:	fa1c fc81 	uxtah	ip, ip, r1
 8024a38:	4471      	add	r1, lr
 8024a3a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8024a3e:	b289      	uxth	r1, r1
 8024a40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8024a44:	f846 1b04 	str.w	r1, [r6], #4
 8024a48:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8024a4c:	e7dd      	b.n	8024a0a <__mdiff+0xd6>
 8024a4e:	3f01      	subs	r7, #1
 8024a50:	e7e7      	b.n	8024a22 <__mdiff+0xee>
 8024a52:	bf00      	nop
 8024a54:	08044725 	.word	0x08044725
 8024a58:	08044736 	.word	0x08044736

08024a5c <__ulp>:
 8024a5c:	b082      	sub	sp, #8
 8024a5e:	ed8d 0b00 	vstr	d0, [sp]
 8024a62:	9a01      	ldr	r2, [sp, #4]
 8024a64:	4b0f      	ldr	r3, [pc, #60]	@ (8024aa4 <__ulp+0x48>)
 8024a66:	4013      	ands	r3, r2
 8024a68:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8024a6c:	2b00      	cmp	r3, #0
 8024a6e:	dc08      	bgt.n	8024a82 <__ulp+0x26>
 8024a70:	425b      	negs	r3, r3
 8024a72:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8024a76:	ea4f 5223 	mov.w	r2, r3, asr #20
 8024a7a:	da04      	bge.n	8024a86 <__ulp+0x2a>
 8024a7c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8024a80:	4113      	asrs	r3, r2
 8024a82:	2200      	movs	r2, #0
 8024a84:	e008      	b.n	8024a98 <__ulp+0x3c>
 8024a86:	f1a2 0314 	sub.w	r3, r2, #20
 8024a8a:	2b1e      	cmp	r3, #30
 8024a8c:	bfda      	itte	le
 8024a8e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8024a92:	40da      	lsrle	r2, r3
 8024a94:	2201      	movgt	r2, #1
 8024a96:	2300      	movs	r3, #0
 8024a98:	4619      	mov	r1, r3
 8024a9a:	4610      	mov	r0, r2
 8024a9c:	ec41 0b10 	vmov	d0, r0, r1
 8024aa0:	b002      	add	sp, #8
 8024aa2:	4770      	bx	lr
 8024aa4:	7ff00000 	.word	0x7ff00000

08024aa8 <__b2d>:
 8024aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024aac:	6906      	ldr	r6, [r0, #16]
 8024aae:	f100 0814 	add.w	r8, r0, #20
 8024ab2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8024ab6:	1f37      	subs	r7, r6, #4
 8024ab8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8024abc:	4610      	mov	r0, r2
 8024abe:	f7ff fd4b 	bl	8024558 <__hi0bits>
 8024ac2:	f1c0 0320 	rsb	r3, r0, #32
 8024ac6:	280a      	cmp	r0, #10
 8024ac8:	600b      	str	r3, [r1, #0]
 8024aca:	491b      	ldr	r1, [pc, #108]	@ (8024b38 <__b2d+0x90>)
 8024acc:	dc15      	bgt.n	8024afa <__b2d+0x52>
 8024ace:	f1c0 0c0b 	rsb	ip, r0, #11
 8024ad2:	fa22 f30c 	lsr.w	r3, r2, ip
 8024ad6:	45b8      	cmp	r8, r7
 8024ad8:	ea43 0501 	orr.w	r5, r3, r1
 8024adc:	bf34      	ite	cc
 8024ade:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8024ae2:	2300      	movcs	r3, #0
 8024ae4:	3015      	adds	r0, #21
 8024ae6:	fa02 f000 	lsl.w	r0, r2, r0
 8024aea:	fa23 f30c 	lsr.w	r3, r3, ip
 8024aee:	4303      	orrs	r3, r0
 8024af0:	461c      	mov	r4, r3
 8024af2:	ec45 4b10 	vmov	d0, r4, r5
 8024af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024afa:	45b8      	cmp	r8, r7
 8024afc:	bf3a      	itte	cc
 8024afe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8024b02:	f1a6 0708 	subcc.w	r7, r6, #8
 8024b06:	2300      	movcs	r3, #0
 8024b08:	380b      	subs	r0, #11
 8024b0a:	d012      	beq.n	8024b32 <__b2d+0x8a>
 8024b0c:	f1c0 0120 	rsb	r1, r0, #32
 8024b10:	fa23 f401 	lsr.w	r4, r3, r1
 8024b14:	4082      	lsls	r2, r0
 8024b16:	4322      	orrs	r2, r4
 8024b18:	4547      	cmp	r7, r8
 8024b1a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8024b1e:	bf8c      	ite	hi
 8024b20:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8024b24:	2200      	movls	r2, #0
 8024b26:	4083      	lsls	r3, r0
 8024b28:	40ca      	lsrs	r2, r1
 8024b2a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8024b2e:	4313      	orrs	r3, r2
 8024b30:	e7de      	b.n	8024af0 <__b2d+0x48>
 8024b32:	ea42 0501 	orr.w	r5, r2, r1
 8024b36:	e7db      	b.n	8024af0 <__b2d+0x48>
 8024b38:	3ff00000 	.word	0x3ff00000

08024b3c <__d2b>:
 8024b3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8024b40:	460f      	mov	r7, r1
 8024b42:	2101      	movs	r1, #1
 8024b44:	ec59 8b10 	vmov	r8, r9, d0
 8024b48:	4616      	mov	r6, r2
 8024b4a:	f7ff fc13 	bl	8024374 <_Balloc>
 8024b4e:	4604      	mov	r4, r0
 8024b50:	b930      	cbnz	r0, 8024b60 <__d2b+0x24>
 8024b52:	4602      	mov	r2, r0
 8024b54:	4b23      	ldr	r3, [pc, #140]	@ (8024be4 <__d2b+0xa8>)
 8024b56:	4824      	ldr	r0, [pc, #144]	@ (8024be8 <__d2b+0xac>)
 8024b58:	f240 310f 	movw	r1, #783	@ 0x30f
 8024b5c:	f001 fb38 	bl	80261d0 <__assert_func>
 8024b60:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8024b64:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8024b68:	b10d      	cbz	r5, 8024b6e <__d2b+0x32>
 8024b6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8024b6e:	9301      	str	r3, [sp, #4]
 8024b70:	f1b8 0300 	subs.w	r3, r8, #0
 8024b74:	d023      	beq.n	8024bbe <__d2b+0x82>
 8024b76:	4668      	mov	r0, sp
 8024b78:	9300      	str	r3, [sp, #0]
 8024b7a:	f7ff fd0c 	bl	8024596 <__lo0bits>
 8024b7e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8024b82:	b1d0      	cbz	r0, 8024bba <__d2b+0x7e>
 8024b84:	f1c0 0320 	rsb	r3, r0, #32
 8024b88:	fa02 f303 	lsl.w	r3, r2, r3
 8024b8c:	430b      	orrs	r3, r1
 8024b8e:	40c2      	lsrs	r2, r0
 8024b90:	6163      	str	r3, [r4, #20]
 8024b92:	9201      	str	r2, [sp, #4]
 8024b94:	9b01      	ldr	r3, [sp, #4]
 8024b96:	61a3      	str	r3, [r4, #24]
 8024b98:	2b00      	cmp	r3, #0
 8024b9a:	bf0c      	ite	eq
 8024b9c:	2201      	moveq	r2, #1
 8024b9e:	2202      	movne	r2, #2
 8024ba0:	6122      	str	r2, [r4, #16]
 8024ba2:	b1a5      	cbz	r5, 8024bce <__d2b+0x92>
 8024ba4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8024ba8:	4405      	add	r5, r0
 8024baa:	603d      	str	r5, [r7, #0]
 8024bac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8024bb0:	6030      	str	r0, [r6, #0]
 8024bb2:	4620      	mov	r0, r4
 8024bb4:	b003      	add	sp, #12
 8024bb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024bba:	6161      	str	r1, [r4, #20]
 8024bbc:	e7ea      	b.n	8024b94 <__d2b+0x58>
 8024bbe:	a801      	add	r0, sp, #4
 8024bc0:	f7ff fce9 	bl	8024596 <__lo0bits>
 8024bc4:	9b01      	ldr	r3, [sp, #4]
 8024bc6:	6163      	str	r3, [r4, #20]
 8024bc8:	3020      	adds	r0, #32
 8024bca:	2201      	movs	r2, #1
 8024bcc:	e7e8      	b.n	8024ba0 <__d2b+0x64>
 8024bce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8024bd2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8024bd6:	6038      	str	r0, [r7, #0]
 8024bd8:	6918      	ldr	r0, [r3, #16]
 8024bda:	f7ff fcbd 	bl	8024558 <__hi0bits>
 8024bde:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8024be2:	e7e5      	b.n	8024bb0 <__d2b+0x74>
 8024be4:	08044725 	.word	0x08044725
 8024be8:	08044736 	.word	0x08044736

08024bec <__ratio>:
 8024bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024bf0:	b085      	sub	sp, #20
 8024bf2:	e9cd 1000 	strd	r1, r0, [sp]
 8024bf6:	a902      	add	r1, sp, #8
 8024bf8:	f7ff ff56 	bl	8024aa8 <__b2d>
 8024bfc:	9800      	ldr	r0, [sp, #0]
 8024bfe:	a903      	add	r1, sp, #12
 8024c00:	ec55 4b10 	vmov	r4, r5, d0
 8024c04:	f7ff ff50 	bl	8024aa8 <__b2d>
 8024c08:	9b01      	ldr	r3, [sp, #4]
 8024c0a:	6919      	ldr	r1, [r3, #16]
 8024c0c:	9b00      	ldr	r3, [sp, #0]
 8024c0e:	691b      	ldr	r3, [r3, #16]
 8024c10:	1ac9      	subs	r1, r1, r3
 8024c12:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8024c16:	1a9b      	subs	r3, r3, r2
 8024c18:	ec5b ab10 	vmov	sl, fp, d0
 8024c1c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8024c20:	2b00      	cmp	r3, #0
 8024c22:	bfce      	itee	gt
 8024c24:	462a      	movgt	r2, r5
 8024c26:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8024c2a:	465a      	movle	r2, fp
 8024c2c:	462f      	mov	r7, r5
 8024c2e:	46d9      	mov	r9, fp
 8024c30:	bfcc      	ite	gt
 8024c32:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8024c36:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8024c3a:	464b      	mov	r3, r9
 8024c3c:	4652      	mov	r2, sl
 8024c3e:	4620      	mov	r0, r4
 8024c40:	4639      	mov	r1, r7
 8024c42:	f7f5 f903 	bl	8019e4c <__aeabi_ddiv>
 8024c46:	ec41 0b10 	vmov	d0, r0, r1
 8024c4a:	b005      	add	sp, #20
 8024c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024c50 <__copybits>:
 8024c50:	3901      	subs	r1, #1
 8024c52:	b570      	push	{r4, r5, r6, lr}
 8024c54:	1149      	asrs	r1, r1, #5
 8024c56:	6914      	ldr	r4, [r2, #16]
 8024c58:	3101      	adds	r1, #1
 8024c5a:	f102 0314 	add.w	r3, r2, #20
 8024c5e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8024c62:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8024c66:	1f05      	subs	r5, r0, #4
 8024c68:	42a3      	cmp	r3, r4
 8024c6a:	d30c      	bcc.n	8024c86 <__copybits+0x36>
 8024c6c:	1aa3      	subs	r3, r4, r2
 8024c6e:	3b11      	subs	r3, #17
 8024c70:	f023 0303 	bic.w	r3, r3, #3
 8024c74:	3211      	adds	r2, #17
 8024c76:	42a2      	cmp	r2, r4
 8024c78:	bf88      	it	hi
 8024c7a:	2300      	movhi	r3, #0
 8024c7c:	4418      	add	r0, r3
 8024c7e:	2300      	movs	r3, #0
 8024c80:	4288      	cmp	r0, r1
 8024c82:	d305      	bcc.n	8024c90 <__copybits+0x40>
 8024c84:	bd70      	pop	{r4, r5, r6, pc}
 8024c86:	f853 6b04 	ldr.w	r6, [r3], #4
 8024c8a:	f845 6f04 	str.w	r6, [r5, #4]!
 8024c8e:	e7eb      	b.n	8024c68 <__copybits+0x18>
 8024c90:	f840 3b04 	str.w	r3, [r0], #4
 8024c94:	e7f4      	b.n	8024c80 <__copybits+0x30>

08024c96 <__any_on>:
 8024c96:	f100 0214 	add.w	r2, r0, #20
 8024c9a:	6900      	ldr	r0, [r0, #16]
 8024c9c:	114b      	asrs	r3, r1, #5
 8024c9e:	4298      	cmp	r0, r3
 8024ca0:	b510      	push	{r4, lr}
 8024ca2:	db11      	blt.n	8024cc8 <__any_on+0x32>
 8024ca4:	dd0a      	ble.n	8024cbc <__any_on+0x26>
 8024ca6:	f011 011f 	ands.w	r1, r1, #31
 8024caa:	d007      	beq.n	8024cbc <__any_on+0x26>
 8024cac:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8024cb0:	fa24 f001 	lsr.w	r0, r4, r1
 8024cb4:	fa00 f101 	lsl.w	r1, r0, r1
 8024cb8:	428c      	cmp	r4, r1
 8024cba:	d10b      	bne.n	8024cd4 <__any_on+0x3e>
 8024cbc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8024cc0:	4293      	cmp	r3, r2
 8024cc2:	d803      	bhi.n	8024ccc <__any_on+0x36>
 8024cc4:	2000      	movs	r0, #0
 8024cc6:	bd10      	pop	{r4, pc}
 8024cc8:	4603      	mov	r3, r0
 8024cca:	e7f7      	b.n	8024cbc <__any_on+0x26>
 8024ccc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8024cd0:	2900      	cmp	r1, #0
 8024cd2:	d0f5      	beq.n	8024cc0 <__any_on+0x2a>
 8024cd4:	2001      	movs	r0, #1
 8024cd6:	e7f6      	b.n	8024cc6 <__any_on+0x30>

08024cd8 <_malloc_usable_size_r>:
 8024cd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8024cdc:	1f18      	subs	r0, r3, #4
 8024cde:	2b00      	cmp	r3, #0
 8024ce0:	bfbc      	itt	lt
 8024ce2:	580b      	ldrlt	r3, [r1, r0]
 8024ce4:	18c0      	addlt	r0, r0, r3
 8024ce6:	4770      	bx	lr

08024ce8 <sulp>:
 8024ce8:	b570      	push	{r4, r5, r6, lr}
 8024cea:	4604      	mov	r4, r0
 8024cec:	460d      	mov	r5, r1
 8024cee:	ec45 4b10 	vmov	d0, r4, r5
 8024cf2:	4616      	mov	r6, r2
 8024cf4:	f7ff feb2 	bl	8024a5c <__ulp>
 8024cf8:	ec51 0b10 	vmov	r0, r1, d0
 8024cfc:	b17e      	cbz	r6, 8024d1e <sulp+0x36>
 8024cfe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8024d02:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8024d06:	2b00      	cmp	r3, #0
 8024d08:	dd09      	ble.n	8024d1e <sulp+0x36>
 8024d0a:	051b      	lsls	r3, r3, #20
 8024d0c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8024d10:	2400      	movs	r4, #0
 8024d12:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8024d16:	4622      	mov	r2, r4
 8024d18:	462b      	mov	r3, r5
 8024d1a:	f7f4 ff6d 	bl	8019bf8 <__aeabi_dmul>
 8024d1e:	ec41 0b10 	vmov	d0, r0, r1
 8024d22:	bd70      	pop	{r4, r5, r6, pc}
 8024d24:	0000      	movs	r0, r0
	...

08024d28 <_strtod_l>:
 8024d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024d2c:	b09f      	sub	sp, #124	@ 0x7c
 8024d2e:	460c      	mov	r4, r1
 8024d30:	9217      	str	r2, [sp, #92]	@ 0x5c
 8024d32:	2200      	movs	r2, #0
 8024d34:	921a      	str	r2, [sp, #104]	@ 0x68
 8024d36:	9005      	str	r0, [sp, #20]
 8024d38:	f04f 0a00 	mov.w	sl, #0
 8024d3c:	f04f 0b00 	mov.w	fp, #0
 8024d40:	460a      	mov	r2, r1
 8024d42:	9219      	str	r2, [sp, #100]	@ 0x64
 8024d44:	7811      	ldrb	r1, [r2, #0]
 8024d46:	292b      	cmp	r1, #43	@ 0x2b
 8024d48:	d04a      	beq.n	8024de0 <_strtod_l+0xb8>
 8024d4a:	d838      	bhi.n	8024dbe <_strtod_l+0x96>
 8024d4c:	290d      	cmp	r1, #13
 8024d4e:	d832      	bhi.n	8024db6 <_strtod_l+0x8e>
 8024d50:	2908      	cmp	r1, #8
 8024d52:	d832      	bhi.n	8024dba <_strtod_l+0x92>
 8024d54:	2900      	cmp	r1, #0
 8024d56:	d03b      	beq.n	8024dd0 <_strtod_l+0xa8>
 8024d58:	2200      	movs	r2, #0
 8024d5a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8024d5c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8024d5e:	782a      	ldrb	r2, [r5, #0]
 8024d60:	2a30      	cmp	r2, #48	@ 0x30
 8024d62:	f040 80b3 	bne.w	8024ecc <_strtod_l+0x1a4>
 8024d66:	786a      	ldrb	r2, [r5, #1]
 8024d68:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8024d6c:	2a58      	cmp	r2, #88	@ 0x58
 8024d6e:	d16e      	bne.n	8024e4e <_strtod_l+0x126>
 8024d70:	9302      	str	r3, [sp, #8]
 8024d72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024d74:	9301      	str	r3, [sp, #4]
 8024d76:	ab1a      	add	r3, sp, #104	@ 0x68
 8024d78:	9300      	str	r3, [sp, #0]
 8024d7a:	4a8e      	ldr	r2, [pc, #568]	@ (8024fb4 <_strtod_l+0x28c>)
 8024d7c:	9805      	ldr	r0, [sp, #20]
 8024d7e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8024d80:	a919      	add	r1, sp, #100	@ 0x64
 8024d82:	f001 fabf 	bl	8026304 <__gethex>
 8024d86:	f010 060f 	ands.w	r6, r0, #15
 8024d8a:	4604      	mov	r4, r0
 8024d8c:	d005      	beq.n	8024d9a <_strtod_l+0x72>
 8024d8e:	2e06      	cmp	r6, #6
 8024d90:	d128      	bne.n	8024de4 <_strtod_l+0xbc>
 8024d92:	3501      	adds	r5, #1
 8024d94:	2300      	movs	r3, #0
 8024d96:	9519      	str	r5, [sp, #100]	@ 0x64
 8024d98:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024d9a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8024d9c:	2b00      	cmp	r3, #0
 8024d9e:	f040 858e 	bne.w	80258be <_strtod_l+0xb96>
 8024da2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024da4:	b1cb      	cbz	r3, 8024dda <_strtod_l+0xb2>
 8024da6:	4652      	mov	r2, sl
 8024da8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8024dac:	ec43 2b10 	vmov	d0, r2, r3
 8024db0:	b01f      	add	sp, #124	@ 0x7c
 8024db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024db6:	2920      	cmp	r1, #32
 8024db8:	d1ce      	bne.n	8024d58 <_strtod_l+0x30>
 8024dba:	3201      	adds	r2, #1
 8024dbc:	e7c1      	b.n	8024d42 <_strtod_l+0x1a>
 8024dbe:	292d      	cmp	r1, #45	@ 0x2d
 8024dc0:	d1ca      	bne.n	8024d58 <_strtod_l+0x30>
 8024dc2:	2101      	movs	r1, #1
 8024dc4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8024dc6:	1c51      	adds	r1, r2, #1
 8024dc8:	9119      	str	r1, [sp, #100]	@ 0x64
 8024dca:	7852      	ldrb	r2, [r2, #1]
 8024dcc:	2a00      	cmp	r2, #0
 8024dce:	d1c5      	bne.n	8024d5c <_strtod_l+0x34>
 8024dd0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8024dd2:	9419      	str	r4, [sp, #100]	@ 0x64
 8024dd4:	2b00      	cmp	r3, #0
 8024dd6:	f040 8570 	bne.w	80258ba <_strtod_l+0xb92>
 8024dda:	4652      	mov	r2, sl
 8024ddc:	465b      	mov	r3, fp
 8024dde:	e7e5      	b.n	8024dac <_strtod_l+0x84>
 8024de0:	2100      	movs	r1, #0
 8024de2:	e7ef      	b.n	8024dc4 <_strtod_l+0x9c>
 8024de4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8024de6:	b13a      	cbz	r2, 8024df8 <_strtod_l+0xd0>
 8024de8:	2135      	movs	r1, #53	@ 0x35
 8024dea:	a81c      	add	r0, sp, #112	@ 0x70
 8024dec:	f7ff ff30 	bl	8024c50 <__copybits>
 8024df0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8024df2:	9805      	ldr	r0, [sp, #20]
 8024df4:	f7ff fafe 	bl	80243f4 <_Bfree>
 8024df8:	3e01      	subs	r6, #1
 8024dfa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8024dfc:	2e04      	cmp	r6, #4
 8024dfe:	d806      	bhi.n	8024e0e <_strtod_l+0xe6>
 8024e00:	e8df f006 	tbb	[pc, r6]
 8024e04:	201d0314 	.word	0x201d0314
 8024e08:	14          	.byte	0x14
 8024e09:	00          	.byte	0x00
 8024e0a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8024e0e:	05e1      	lsls	r1, r4, #23
 8024e10:	bf48      	it	mi
 8024e12:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8024e16:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8024e1a:	0d1b      	lsrs	r3, r3, #20
 8024e1c:	051b      	lsls	r3, r3, #20
 8024e1e:	2b00      	cmp	r3, #0
 8024e20:	d1bb      	bne.n	8024d9a <_strtod_l+0x72>
 8024e22:	f7fe fbcf 	bl	80235c4 <__errno>
 8024e26:	2322      	movs	r3, #34	@ 0x22
 8024e28:	6003      	str	r3, [r0, #0]
 8024e2a:	e7b6      	b.n	8024d9a <_strtod_l+0x72>
 8024e2c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8024e30:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8024e34:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8024e38:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8024e3c:	e7e7      	b.n	8024e0e <_strtod_l+0xe6>
 8024e3e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8024fbc <_strtod_l+0x294>
 8024e42:	e7e4      	b.n	8024e0e <_strtod_l+0xe6>
 8024e44:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8024e48:	f04f 3aff 	mov.w	sl, #4294967295
 8024e4c:	e7df      	b.n	8024e0e <_strtod_l+0xe6>
 8024e4e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8024e50:	1c5a      	adds	r2, r3, #1
 8024e52:	9219      	str	r2, [sp, #100]	@ 0x64
 8024e54:	785b      	ldrb	r3, [r3, #1]
 8024e56:	2b30      	cmp	r3, #48	@ 0x30
 8024e58:	d0f9      	beq.n	8024e4e <_strtod_l+0x126>
 8024e5a:	2b00      	cmp	r3, #0
 8024e5c:	d09d      	beq.n	8024d9a <_strtod_l+0x72>
 8024e5e:	2301      	movs	r3, #1
 8024e60:	9309      	str	r3, [sp, #36]	@ 0x24
 8024e62:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8024e64:	930c      	str	r3, [sp, #48]	@ 0x30
 8024e66:	2300      	movs	r3, #0
 8024e68:	9308      	str	r3, [sp, #32]
 8024e6a:	930a      	str	r3, [sp, #40]	@ 0x28
 8024e6c:	461f      	mov	r7, r3
 8024e6e:	220a      	movs	r2, #10
 8024e70:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8024e72:	7805      	ldrb	r5, [r0, #0]
 8024e74:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8024e78:	b2d9      	uxtb	r1, r3
 8024e7a:	2909      	cmp	r1, #9
 8024e7c:	d928      	bls.n	8024ed0 <_strtod_l+0x1a8>
 8024e7e:	494e      	ldr	r1, [pc, #312]	@ (8024fb8 <_strtod_l+0x290>)
 8024e80:	2201      	movs	r2, #1
 8024e82:	f7fe fb33 	bl	80234ec <strncmp>
 8024e86:	2800      	cmp	r0, #0
 8024e88:	d032      	beq.n	8024ef0 <_strtod_l+0x1c8>
 8024e8a:	2000      	movs	r0, #0
 8024e8c:	462a      	mov	r2, r5
 8024e8e:	4681      	mov	r9, r0
 8024e90:	463d      	mov	r5, r7
 8024e92:	4603      	mov	r3, r0
 8024e94:	2a65      	cmp	r2, #101	@ 0x65
 8024e96:	d001      	beq.n	8024e9c <_strtod_l+0x174>
 8024e98:	2a45      	cmp	r2, #69	@ 0x45
 8024e9a:	d114      	bne.n	8024ec6 <_strtod_l+0x19e>
 8024e9c:	b91d      	cbnz	r5, 8024ea6 <_strtod_l+0x17e>
 8024e9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024ea0:	4302      	orrs	r2, r0
 8024ea2:	d095      	beq.n	8024dd0 <_strtod_l+0xa8>
 8024ea4:	2500      	movs	r5, #0
 8024ea6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8024ea8:	1c62      	adds	r2, r4, #1
 8024eaa:	9219      	str	r2, [sp, #100]	@ 0x64
 8024eac:	7862      	ldrb	r2, [r4, #1]
 8024eae:	2a2b      	cmp	r2, #43	@ 0x2b
 8024eb0:	d077      	beq.n	8024fa2 <_strtod_l+0x27a>
 8024eb2:	2a2d      	cmp	r2, #45	@ 0x2d
 8024eb4:	d07b      	beq.n	8024fae <_strtod_l+0x286>
 8024eb6:	f04f 0c00 	mov.w	ip, #0
 8024eba:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8024ebe:	2909      	cmp	r1, #9
 8024ec0:	f240 8082 	bls.w	8024fc8 <_strtod_l+0x2a0>
 8024ec4:	9419      	str	r4, [sp, #100]	@ 0x64
 8024ec6:	f04f 0800 	mov.w	r8, #0
 8024eca:	e0a2      	b.n	8025012 <_strtod_l+0x2ea>
 8024ecc:	2300      	movs	r3, #0
 8024ece:	e7c7      	b.n	8024e60 <_strtod_l+0x138>
 8024ed0:	2f08      	cmp	r7, #8
 8024ed2:	bfd5      	itete	le
 8024ed4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8024ed6:	9908      	ldrgt	r1, [sp, #32]
 8024ed8:	fb02 3301 	mlale	r3, r2, r1, r3
 8024edc:	fb02 3301 	mlagt	r3, r2, r1, r3
 8024ee0:	f100 0001 	add.w	r0, r0, #1
 8024ee4:	bfd4      	ite	le
 8024ee6:	930a      	strle	r3, [sp, #40]	@ 0x28
 8024ee8:	9308      	strgt	r3, [sp, #32]
 8024eea:	3701      	adds	r7, #1
 8024eec:	9019      	str	r0, [sp, #100]	@ 0x64
 8024eee:	e7bf      	b.n	8024e70 <_strtod_l+0x148>
 8024ef0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8024ef2:	1c5a      	adds	r2, r3, #1
 8024ef4:	9219      	str	r2, [sp, #100]	@ 0x64
 8024ef6:	785a      	ldrb	r2, [r3, #1]
 8024ef8:	b37f      	cbz	r7, 8024f5a <_strtod_l+0x232>
 8024efa:	4681      	mov	r9, r0
 8024efc:	463d      	mov	r5, r7
 8024efe:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8024f02:	2b09      	cmp	r3, #9
 8024f04:	d912      	bls.n	8024f2c <_strtod_l+0x204>
 8024f06:	2301      	movs	r3, #1
 8024f08:	e7c4      	b.n	8024e94 <_strtod_l+0x16c>
 8024f0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8024f0c:	1c5a      	adds	r2, r3, #1
 8024f0e:	9219      	str	r2, [sp, #100]	@ 0x64
 8024f10:	785a      	ldrb	r2, [r3, #1]
 8024f12:	3001      	adds	r0, #1
 8024f14:	2a30      	cmp	r2, #48	@ 0x30
 8024f16:	d0f8      	beq.n	8024f0a <_strtod_l+0x1e2>
 8024f18:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8024f1c:	2b08      	cmp	r3, #8
 8024f1e:	f200 84d3 	bhi.w	80258c8 <_strtod_l+0xba0>
 8024f22:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8024f24:	930c      	str	r3, [sp, #48]	@ 0x30
 8024f26:	4681      	mov	r9, r0
 8024f28:	2000      	movs	r0, #0
 8024f2a:	4605      	mov	r5, r0
 8024f2c:	3a30      	subs	r2, #48	@ 0x30
 8024f2e:	f100 0301 	add.w	r3, r0, #1
 8024f32:	d02a      	beq.n	8024f8a <_strtod_l+0x262>
 8024f34:	4499      	add	r9, r3
 8024f36:	eb00 0c05 	add.w	ip, r0, r5
 8024f3a:	462b      	mov	r3, r5
 8024f3c:	210a      	movs	r1, #10
 8024f3e:	4563      	cmp	r3, ip
 8024f40:	d10d      	bne.n	8024f5e <_strtod_l+0x236>
 8024f42:	1c69      	adds	r1, r5, #1
 8024f44:	4401      	add	r1, r0
 8024f46:	4428      	add	r0, r5
 8024f48:	2808      	cmp	r0, #8
 8024f4a:	dc16      	bgt.n	8024f7a <_strtod_l+0x252>
 8024f4c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8024f4e:	230a      	movs	r3, #10
 8024f50:	fb03 2300 	mla	r3, r3, r0, r2
 8024f54:	930a      	str	r3, [sp, #40]	@ 0x28
 8024f56:	2300      	movs	r3, #0
 8024f58:	e018      	b.n	8024f8c <_strtod_l+0x264>
 8024f5a:	4638      	mov	r0, r7
 8024f5c:	e7da      	b.n	8024f14 <_strtod_l+0x1ec>
 8024f5e:	2b08      	cmp	r3, #8
 8024f60:	f103 0301 	add.w	r3, r3, #1
 8024f64:	dc03      	bgt.n	8024f6e <_strtod_l+0x246>
 8024f66:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8024f68:	434e      	muls	r6, r1
 8024f6a:	960a      	str	r6, [sp, #40]	@ 0x28
 8024f6c:	e7e7      	b.n	8024f3e <_strtod_l+0x216>
 8024f6e:	2b10      	cmp	r3, #16
 8024f70:	bfde      	ittt	le
 8024f72:	9e08      	ldrle	r6, [sp, #32]
 8024f74:	434e      	mulle	r6, r1
 8024f76:	9608      	strle	r6, [sp, #32]
 8024f78:	e7e1      	b.n	8024f3e <_strtod_l+0x216>
 8024f7a:	280f      	cmp	r0, #15
 8024f7c:	dceb      	bgt.n	8024f56 <_strtod_l+0x22e>
 8024f7e:	9808      	ldr	r0, [sp, #32]
 8024f80:	230a      	movs	r3, #10
 8024f82:	fb03 2300 	mla	r3, r3, r0, r2
 8024f86:	9308      	str	r3, [sp, #32]
 8024f88:	e7e5      	b.n	8024f56 <_strtod_l+0x22e>
 8024f8a:	4629      	mov	r1, r5
 8024f8c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8024f8e:	1c50      	adds	r0, r2, #1
 8024f90:	9019      	str	r0, [sp, #100]	@ 0x64
 8024f92:	7852      	ldrb	r2, [r2, #1]
 8024f94:	4618      	mov	r0, r3
 8024f96:	460d      	mov	r5, r1
 8024f98:	e7b1      	b.n	8024efe <_strtod_l+0x1d6>
 8024f9a:	f04f 0900 	mov.w	r9, #0
 8024f9e:	2301      	movs	r3, #1
 8024fa0:	e77d      	b.n	8024e9e <_strtod_l+0x176>
 8024fa2:	f04f 0c00 	mov.w	ip, #0
 8024fa6:	1ca2      	adds	r2, r4, #2
 8024fa8:	9219      	str	r2, [sp, #100]	@ 0x64
 8024faa:	78a2      	ldrb	r2, [r4, #2]
 8024fac:	e785      	b.n	8024eba <_strtod_l+0x192>
 8024fae:	f04f 0c01 	mov.w	ip, #1
 8024fb2:	e7f8      	b.n	8024fa6 <_strtod_l+0x27e>
 8024fb4:	080448a8 	.word	0x080448a8
 8024fb8:	08044890 	.word	0x08044890
 8024fbc:	7ff00000 	.word	0x7ff00000
 8024fc0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8024fc2:	1c51      	adds	r1, r2, #1
 8024fc4:	9119      	str	r1, [sp, #100]	@ 0x64
 8024fc6:	7852      	ldrb	r2, [r2, #1]
 8024fc8:	2a30      	cmp	r2, #48	@ 0x30
 8024fca:	d0f9      	beq.n	8024fc0 <_strtod_l+0x298>
 8024fcc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8024fd0:	2908      	cmp	r1, #8
 8024fd2:	f63f af78 	bhi.w	8024ec6 <_strtod_l+0x19e>
 8024fd6:	3a30      	subs	r2, #48	@ 0x30
 8024fd8:	920e      	str	r2, [sp, #56]	@ 0x38
 8024fda:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8024fdc:	920f      	str	r2, [sp, #60]	@ 0x3c
 8024fde:	f04f 080a 	mov.w	r8, #10
 8024fe2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8024fe4:	1c56      	adds	r6, r2, #1
 8024fe6:	9619      	str	r6, [sp, #100]	@ 0x64
 8024fe8:	7852      	ldrb	r2, [r2, #1]
 8024fea:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8024fee:	f1be 0f09 	cmp.w	lr, #9
 8024ff2:	d939      	bls.n	8025068 <_strtod_l+0x340>
 8024ff4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8024ff6:	1a76      	subs	r6, r6, r1
 8024ff8:	2e08      	cmp	r6, #8
 8024ffa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8024ffe:	dc03      	bgt.n	8025008 <_strtod_l+0x2e0>
 8025000:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8025002:	4588      	cmp	r8, r1
 8025004:	bfa8      	it	ge
 8025006:	4688      	movge	r8, r1
 8025008:	f1bc 0f00 	cmp.w	ip, #0
 802500c:	d001      	beq.n	8025012 <_strtod_l+0x2ea>
 802500e:	f1c8 0800 	rsb	r8, r8, #0
 8025012:	2d00      	cmp	r5, #0
 8025014:	d14e      	bne.n	80250b4 <_strtod_l+0x38c>
 8025016:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8025018:	4308      	orrs	r0, r1
 802501a:	f47f aebe 	bne.w	8024d9a <_strtod_l+0x72>
 802501e:	2b00      	cmp	r3, #0
 8025020:	f47f aed6 	bne.w	8024dd0 <_strtod_l+0xa8>
 8025024:	2a69      	cmp	r2, #105	@ 0x69
 8025026:	d028      	beq.n	802507a <_strtod_l+0x352>
 8025028:	dc25      	bgt.n	8025076 <_strtod_l+0x34e>
 802502a:	2a49      	cmp	r2, #73	@ 0x49
 802502c:	d025      	beq.n	802507a <_strtod_l+0x352>
 802502e:	2a4e      	cmp	r2, #78	@ 0x4e
 8025030:	f47f aece 	bne.w	8024dd0 <_strtod_l+0xa8>
 8025034:	499b      	ldr	r1, [pc, #620]	@ (80252a4 <_strtod_l+0x57c>)
 8025036:	a819      	add	r0, sp, #100	@ 0x64
 8025038:	f001 fb86 	bl	8026748 <__match>
 802503c:	2800      	cmp	r0, #0
 802503e:	f43f aec7 	beq.w	8024dd0 <_strtod_l+0xa8>
 8025042:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8025044:	781b      	ldrb	r3, [r3, #0]
 8025046:	2b28      	cmp	r3, #40	@ 0x28
 8025048:	d12e      	bne.n	80250a8 <_strtod_l+0x380>
 802504a:	4997      	ldr	r1, [pc, #604]	@ (80252a8 <_strtod_l+0x580>)
 802504c:	aa1c      	add	r2, sp, #112	@ 0x70
 802504e:	a819      	add	r0, sp, #100	@ 0x64
 8025050:	f001 fb8e 	bl	8026770 <__hexnan>
 8025054:	2805      	cmp	r0, #5
 8025056:	d127      	bne.n	80250a8 <_strtod_l+0x380>
 8025058:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802505a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 802505e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8025062:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8025066:	e698      	b.n	8024d9a <_strtod_l+0x72>
 8025068:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802506a:	fb08 2101 	mla	r1, r8, r1, r2
 802506e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8025072:	920e      	str	r2, [sp, #56]	@ 0x38
 8025074:	e7b5      	b.n	8024fe2 <_strtod_l+0x2ba>
 8025076:	2a6e      	cmp	r2, #110	@ 0x6e
 8025078:	e7da      	b.n	8025030 <_strtod_l+0x308>
 802507a:	498c      	ldr	r1, [pc, #560]	@ (80252ac <_strtod_l+0x584>)
 802507c:	a819      	add	r0, sp, #100	@ 0x64
 802507e:	f001 fb63 	bl	8026748 <__match>
 8025082:	2800      	cmp	r0, #0
 8025084:	f43f aea4 	beq.w	8024dd0 <_strtod_l+0xa8>
 8025088:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802508a:	4989      	ldr	r1, [pc, #548]	@ (80252b0 <_strtod_l+0x588>)
 802508c:	3b01      	subs	r3, #1
 802508e:	a819      	add	r0, sp, #100	@ 0x64
 8025090:	9319      	str	r3, [sp, #100]	@ 0x64
 8025092:	f001 fb59 	bl	8026748 <__match>
 8025096:	b910      	cbnz	r0, 802509e <_strtod_l+0x376>
 8025098:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802509a:	3301      	adds	r3, #1
 802509c:	9319      	str	r3, [sp, #100]	@ 0x64
 802509e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80252c0 <_strtod_l+0x598>
 80250a2:	f04f 0a00 	mov.w	sl, #0
 80250a6:	e678      	b.n	8024d9a <_strtod_l+0x72>
 80250a8:	4882      	ldr	r0, [pc, #520]	@ (80252b4 <_strtod_l+0x58c>)
 80250aa:	f001 f889 	bl	80261c0 <nan>
 80250ae:	ec5b ab10 	vmov	sl, fp, d0
 80250b2:	e672      	b.n	8024d9a <_strtod_l+0x72>
 80250b4:	eba8 0309 	sub.w	r3, r8, r9
 80250b8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80250ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80250bc:	2f00      	cmp	r7, #0
 80250be:	bf08      	it	eq
 80250c0:	462f      	moveq	r7, r5
 80250c2:	2d10      	cmp	r5, #16
 80250c4:	462c      	mov	r4, r5
 80250c6:	bfa8      	it	ge
 80250c8:	2410      	movge	r4, #16
 80250ca:	f7f4 fd1b 	bl	8019b04 <__aeabi_ui2d>
 80250ce:	2d09      	cmp	r5, #9
 80250d0:	4682      	mov	sl, r0
 80250d2:	468b      	mov	fp, r1
 80250d4:	dc13      	bgt.n	80250fe <_strtod_l+0x3d6>
 80250d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80250d8:	2b00      	cmp	r3, #0
 80250da:	f43f ae5e 	beq.w	8024d9a <_strtod_l+0x72>
 80250de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80250e0:	dd78      	ble.n	80251d4 <_strtod_l+0x4ac>
 80250e2:	2b16      	cmp	r3, #22
 80250e4:	dc5f      	bgt.n	80251a6 <_strtod_l+0x47e>
 80250e6:	4974      	ldr	r1, [pc, #464]	@ (80252b8 <_strtod_l+0x590>)
 80250e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80250ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80250f0:	4652      	mov	r2, sl
 80250f2:	465b      	mov	r3, fp
 80250f4:	f7f4 fd80 	bl	8019bf8 <__aeabi_dmul>
 80250f8:	4682      	mov	sl, r0
 80250fa:	468b      	mov	fp, r1
 80250fc:	e64d      	b.n	8024d9a <_strtod_l+0x72>
 80250fe:	4b6e      	ldr	r3, [pc, #440]	@ (80252b8 <_strtod_l+0x590>)
 8025100:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8025104:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8025108:	f7f4 fd76 	bl	8019bf8 <__aeabi_dmul>
 802510c:	4682      	mov	sl, r0
 802510e:	9808      	ldr	r0, [sp, #32]
 8025110:	468b      	mov	fp, r1
 8025112:	f7f4 fcf7 	bl	8019b04 <__aeabi_ui2d>
 8025116:	4602      	mov	r2, r0
 8025118:	460b      	mov	r3, r1
 802511a:	4650      	mov	r0, sl
 802511c:	4659      	mov	r1, fp
 802511e:	f7f4 fbb5 	bl	801988c <__adddf3>
 8025122:	2d0f      	cmp	r5, #15
 8025124:	4682      	mov	sl, r0
 8025126:	468b      	mov	fp, r1
 8025128:	ddd5      	ble.n	80250d6 <_strtod_l+0x3ae>
 802512a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802512c:	1b2c      	subs	r4, r5, r4
 802512e:	441c      	add	r4, r3
 8025130:	2c00      	cmp	r4, #0
 8025132:	f340 8096 	ble.w	8025262 <_strtod_l+0x53a>
 8025136:	f014 030f 	ands.w	r3, r4, #15
 802513a:	d00a      	beq.n	8025152 <_strtod_l+0x42a>
 802513c:	495e      	ldr	r1, [pc, #376]	@ (80252b8 <_strtod_l+0x590>)
 802513e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8025142:	4652      	mov	r2, sl
 8025144:	465b      	mov	r3, fp
 8025146:	e9d1 0100 	ldrd	r0, r1, [r1]
 802514a:	f7f4 fd55 	bl	8019bf8 <__aeabi_dmul>
 802514e:	4682      	mov	sl, r0
 8025150:	468b      	mov	fp, r1
 8025152:	f034 040f 	bics.w	r4, r4, #15
 8025156:	d073      	beq.n	8025240 <_strtod_l+0x518>
 8025158:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 802515c:	dd48      	ble.n	80251f0 <_strtod_l+0x4c8>
 802515e:	2400      	movs	r4, #0
 8025160:	46a0      	mov	r8, r4
 8025162:	940a      	str	r4, [sp, #40]	@ 0x28
 8025164:	46a1      	mov	r9, r4
 8025166:	9a05      	ldr	r2, [sp, #20]
 8025168:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80252c0 <_strtod_l+0x598>
 802516c:	2322      	movs	r3, #34	@ 0x22
 802516e:	6013      	str	r3, [r2, #0]
 8025170:	f04f 0a00 	mov.w	sl, #0
 8025174:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025176:	2b00      	cmp	r3, #0
 8025178:	f43f ae0f 	beq.w	8024d9a <_strtod_l+0x72>
 802517c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802517e:	9805      	ldr	r0, [sp, #20]
 8025180:	f7ff f938 	bl	80243f4 <_Bfree>
 8025184:	9805      	ldr	r0, [sp, #20]
 8025186:	4649      	mov	r1, r9
 8025188:	f7ff f934 	bl	80243f4 <_Bfree>
 802518c:	9805      	ldr	r0, [sp, #20]
 802518e:	4641      	mov	r1, r8
 8025190:	f7ff f930 	bl	80243f4 <_Bfree>
 8025194:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025196:	9805      	ldr	r0, [sp, #20]
 8025198:	f7ff f92c 	bl	80243f4 <_Bfree>
 802519c:	9805      	ldr	r0, [sp, #20]
 802519e:	4621      	mov	r1, r4
 80251a0:	f7ff f928 	bl	80243f4 <_Bfree>
 80251a4:	e5f9      	b.n	8024d9a <_strtod_l+0x72>
 80251a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80251a8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80251ac:	4293      	cmp	r3, r2
 80251ae:	dbbc      	blt.n	802512a <_strtod_l+0x402>
 80251b0:	4c41      	ldr	r4, [pc, #260]	@ (80252b8 <_strtod_l+0x590>)
 80251b2:	f1c5 050f 	rsb	r5, r5, #15
 80251b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80251ba:	4652      	mov	r2, sl
 80251bc:	465b      	mov	r3, fp
 80251be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80251c2:	f7f4 fd19 	bl	8019bf8 <__aeabi_dmul>
 80251c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80251c8:	1b5d      	subs	r5, r3, r5
 80251ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80251ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 80251d2:	e78f      	b.n	80250f4 <_strtod_l+0x3cc>
 80251d4:	3316      	adds	r3, #22
 80251d6:	dba8      	blt.n	802512a <_strtod_l+0x402>
 80251d8:	4b37      	ldr	r3, [pc, #220]	@ (80252b8 <_strtod_l+0x590>)
 80251da:	eba9 0808 	sub.w	r8, r9, r8
 80251de:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80251e2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80251e6:	4650      	mov	r0, sl
 80251e8:	4659      	mov	r1, fp
 80251ea:	f7f4 fe2f 	bl	8019e4c <__aeabi_ddiv>
 80251ee:	e783      	b.n	80250f8 <_strtod_l+0x3d0>
 80251f0:	4b32      	ldr	r3, [pc, #200]	@ (80252bc <_strtod_l+0x594>)
 80251f2:	9308      	str	r3, [sp, #32]
 80251f4:	2300      	movs	r3, #0
 80251f6:	1124      	asrs	r4, r4, #4
 80251f8:	4650      	mov	r0, sl
 80251fa:	4659      	mov	r1, fp
 80251fc:	461e      	mov	r6, r3
 80251fe:	2c01      	cmp	r4, #1
 8025200:	dc21      	bgt.n	8025246 <_strtod_l+0x51e>
 8025202:	b10b      	cbz	r3, 8025208 <_strtod_l+0x4e0>
 8025204:	4682      	mov	sl, r0
 8025206:	468b      	mov	fp, r1
 8025208:	492c      	ldr	r1, [pc, #176]	@ (80252bc <_strtod_l+0x594>)
 802520a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 802520e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8025212:	4652      	mov	r2, sl
 8025214:	465b      	mov	r3, fp
 8025216:	e9d1 0100 	ldrd	r0, r1, [r1]
 802521a:	f7f4 fced 	bl	8019bf8 <__aeabi_dmul>
 802521e:	4b28      	ldr	r3, [pc, #160]	@ (80252c0 <_strtod_l+0x598>)
 8025220:	460a      	mov	r2, r1
 8025222:	400b      	ands	r3, r1
 8025224:	4927      	ldr	r1, [pc, #156]	@ (80252c4 <_strtod_l+0x59c>)
 8025226:	428b      	cmp	r3, r1
 8025228:	4682      	mov	sl, r0
 802522a:	d898      	bhi.n	802515e <_strtod_l+0x436>
 802522c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8025230:	428b      	cmp	r3, r1
 8025232:	bf86      	itte	hi
 8025234:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80252c8 <_strtod_l+0x5a0>
 8025238:	f04f 3aff 	movhi.w	sl, #4294967295
 802523c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8025240:	2300      	movs	r3, #0
 8025242:	9308      	str	r3, [sp, #32]
 8025244:	e07a      	b.n	802533c <_strtod_l+0x614>
 8025246:	07e2      	lsls	r2, r4, #31
 8025248:	d505      	bpl.n	8025256 <_strtod_l+0x52e>
 802524a:	9b08      	ldr	r3, [sp, #32]
 802524c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025250:	f7f4 fcd2 	bl	8019bf8 <__aeabi_dmul>
 8025254:	2301      	movs	r3, #1
 8025256:	9a08      	ldr	r2, [sp, #32]
 8025258:	3208      	adds	r2, #8
 802525a:	3601      	adds	r6, #1
 802525c:	1064      	asrs	r4, r4, #1
 802525e:	9208      	str	r2, [sp, #32]
 8025260:	e7cd      	b.n	80251fe <_strtod_l+0x4d6>
 8025262:	d0ed      	beq.n	8025240 <_strtod_l+0x518>
 8025264:	4264      	negs	r4, r4
 8025266:	f014 020f 	ands.w	r2, r4, #15
 802526a:	d00a      	beq.n	8025282 <_strtod_l+0x55a>
 802526c:	4b12      	ldr	r3, [pc, #72]	@ (80252b8 <_strtod_l+0x590>)
 802526e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8025272:	4650      	mov	r0, sl
 8025274:	4659      	mov	r1, fp
 8025276:	e9d3 2300 	ldrd	r2, r3, [r3]
 802527a:	f7f4 fde7 	bl	8019e4c <__aeabi_ddiv>
 802527e:	4682      	mov	sl, r0
 8025280:	468b      	mov	fp, r1
 8025282:	1124      	asrs	r4, r4, #4
 8025284:	d0dc      	beq.n	8025240 <_strtod_l+0x518>
 8025286:	2c1f      	cmp	r4, #31
 8025288:	dd20      	ble.n	80252cc <_strtod_l+0x5a4>
 802528a:	2400      	movs	r4, #0
 802528c:	46a0      	mov	r8, r4
 802528e:	940a      	str	r4, [sp, #40]	@ 0x28
 8025290:	46a1      	mov	r9, r4
 8025292:	9a05      	ldr	r2, [sp, #20]
 8025294:	2322      	movs	r3, #34	@ 0x22
 8025296:	f04f 0a00 	mov.w	sl, #0
 802529a:	f04f 0b00 	mov.w	fp, #0
 802529e:	6013      	str	r3, [r2, #0]
 80252a0:	e768      	b.n	8025174 <_strtod_l+0x44c>
 80252a2:	bf00      	nop
 80252a4:	0804467d 	.word	0x0804467d
 80252a8:	08044894 	.word	0x08044894
 80252ac:	08044675 	.word	0x08044675
 80252b0:	080446ac 	.word	0x080446ac
 80252b4:	08044a3d 	.word	0x08044a3d
 80252b8:	080447c8 	.word	0x080447c8
 80252bc:	080447a0 	.word	0x080447a0
 80252c0:	7ff00000 	.word	0x7ff00000
 80252c4:	7ca00000 	.word	0x7ca00000
 80252c8:	7fefffff 	.word	0x7fefffff
 80252cc:	f014 0310 	ands.w	r3, r4, #16
 80252d0:	bf18      	it	ne
 80252d2:	236a      	movne	r3, #106	@ 0x6a
 80252d4:	4ea9      	ldr	r6, [pc, #676]	@ (802557c <_strtod_l+0x854>)
 80252d6:	9308      	str	r3, [sp, #32]
 80252d8:	4650      	mov	r0, sl
 80252da:	4659      	mov	r1, fp
 80252dc:	2300      	movs	r3, #0
 80252de:	07e2      	lsls	r2, r4, #31
 80252e0:	d504      	bpl.n	80252ec <_strtod_l+0x5c4>
 80252e2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80252e6:	f7f4 fc87 	bl	8019bf8 <__aeabi_dmul>
 80252ea:	2301      	movs	r3, #1
 80252ec:	1064      	asrs	r4, r4, #1
 80252ee:	f106 0608 	add.w	r6, r6, #8
 80252f2:	d1f4      	bne.n	80252de <_strtod_l+0x5b6>
 80252f4:	b10b      	cbz	r3, 80252fa <_strtod_l+0x5d2>
 80252f6:	4682      	mov	sl, r0
 80252f8:	468b      	mov	fp, r1
 80252fa:	9b08      	ldr	r3, [sp, #32]
 80252fc:	b1b3      	cbz	r3, 802532c <_strtod_l+0x604>
 80252fe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8025302:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8025306:	2b00      	cmp	r3, #0
 8025308:	4659      	mov	r1, fp
 802530a:	dd0f      	ble.n	802532c <_strtod_l+0x604>
 802530c:	2b1f      	cmp	r3, #31
 802530e:	dd55      	ble.n	80253bc <_strtod_l+0x694>
 8025310:	2b34      	cmp	r3, #52	@ 0x34
 8025312:	bfde      	ittt	le
 8025314:	f04f 33ff 	movle.w	r3, #4294967295
 8025318:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 802531c:	4093      	lslle	r3, r2
 802531e:	f04f 0a00 	mov.w	sl, #0
 8025322:	bfcc      	ite	gt
 8025324:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8025328:	ea03 0b01 	andle.w	fp, r3, r1
 802532c:	2200      	movs	r2, #0
 802532e:	2300      	movs	r3, #0
 8025330:	4650      	mov	r0, sl
 8025332:	4659      	mov	r1, fp
 8025334:	f7f4 fec8 	bl	801a0c8 <__aeabi_dcmpeq>
 8025338:	2800      	cmp	r0, #0
 802533a:	d1a6      	bne.n	802528a <_strtod_l+0x562>
 802533c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802533e:	9300      	str	r3, [sp, #0]
 8025340:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8025342:	9805      	ldr	r0, [sp, #20]
 8025344:	462b      	mov	r3, r5
 8025346:	463a      	mov	r2, r7
 8025348:	f7ff f8bc 	bl	80244c4 <__s2b>
 802534c:	900a      	str	r0, [sp, #40]	@ 0x28
 802534e:	2800      	cmp	r0, #0
 8025350:	f43f af05 	beq.w	802515e <_strtod_l+0x436>
 8025354:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025356:	2a00      	cmp	r2, #0
 8025358:	eba9 0308 	sub.w	r3, r9, r8
 802535c:	bfa8      	it	ge
 802535e:	2300      	movge	r3, #0
 8025360:	9312      	str	r3, [sp, #72]	@ 0x48
 8025362:	2400      	movs	r4, #0
 8025364:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8025368:	9316      	str	r3, [sp, #88]	@ 0x58
 802536a:	46a0      	mov	r8, r4
 802536c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802536e:	9805      	ldr	r0, [sp, #20]
 8025370:	6859      	ldr	r1, [r3, #4]
 8025372:	f7fe ffff 	bl	8024374 <_Balloc>
 8025376:	4681      	mov	r9, r0
 8025378:	2800      	cmp	r0, #0
 802537a:	f43f aef4 	beq.w	8025166 <_strtod_l+0x43e>
 802537e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025380:	691a      	ldr	r2, [r3, #16]
 8025382:	3202      	adds	r2, #2
 8025384:	f103 010c 	add.w	r1, r3, #12
 8025388:	0092      	lsls	r2, r2, #2
 802538a:	300c      	adds	r0, #12
 802538c:	f7fe f947 	bl	802361e <memcpy>
 8025390:	ec4b ab10 	vmov	d0, sl, fp
 8025394:	9805      	ldr	r0, [sp, #20]
 8025396:	aa1c      	add	r2, sp, #112	@ 0x70
 8025398:	a91b      	add	r1, sp, #108	@ 0x6c
 802539a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 802539e:	f7ff fbcd 	bl	8024b3c <__d2b>
 80253a2:	901a      	str	r0, [sp, #104]	@ 0x68
 80253a4:	2800      	cmp	r0, #0
 80253a6:	f43f aede 	beq.w	8025166 <_strtod_l+0x43e>
 80253aa:	9805      	ldr	r0, [sp, #20]
 80253ac:	2101      	movs	r1, #1
 80253ae:	f7ff f91f 	bl	80245f0 <__i2b>
 80253b2:	4680      	mov	r8, r0
 80253b4:	b948      	cbnz	r0, 80253ca <_strtod_l+0x6a2>
 80253b6:	f04f 0800 	mov.w	r8, #0
 80253ba:	e6d4      	b.n	8025166 <_strtod_l+0x43e>
 80253bc:	f04f 32ff 	mov.w	r2, #4294967295
 80253c0:	fa02 f303 	lsl.w	r3, r2, r3
 80253c4:	ea03 0a0a 	and.w	sl, r3, sl
 80253c8:	e7b0      	b.n	802532c <_strtod_l+0x604>
 80253ca:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80253cc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80253ce:	2d00      	cmp	r5, #0
 80253d0:	bfab      	itete	ge
 80253d2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80253d4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80253d6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80253d8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80253da:	bfac      	ite	ge
 80253dc:	18ef      	addge	r7, r5, r3
 80253de:	1b5e      	sublt	r6, r3, r5
 80253e0:	9b08      	ldr	r3, [sp, #32]
 80253e2:	1aed      	subs	r5, r5, r3
 80253e4:	4415      	add	r5, r2
 80253e6:	4b66      	ldr	r3, [pc, #408]	@ (8025580 <_strtod_l+0x858>)
 80253e8:	3d01      	subs	r5, #1
 80253ea:	429d      	cmp	r5, r3
 80253ec:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80253f0:	da50      	bge.n	8025494 <_strtod_l+0x76c>
 80253f2:	1b5b      	subs	r3, r3, r5
 80253f4:	2b1f      	cmp	r3, #31
 80253f6:	eba2 0203 	sub.w	r2, r2, r3
 80253fa:	f04f 0101 	mov.w	r1, #1
 80253fe:	dc3d      	bgt.n	802547c <_strtod_l+0x754>
 8025400:	fa01 f303 	lsl.w	r3, r1, r3
 8025404:	9313      	str	r3, [sp, #76]	@ 0x4c
 8025406:	2300      	movs	r3, #0
 8025408:	9310      	str	r3, [sp, #64]	@ 0x40
 802540a:	18bd      	adds	r5, r7, r2
 802540c:	9b08      	ldr	r3, [sp, #32]
 802540e:	42af      	cmp	r7, r5
 8025410:	4416      	add	r6, r2
 8025412:	441e      	add	r6, r3
 8025414:	463b      	mov	r3, r7
 8025416:	bfa8      	it	ge
 8025418:	462b      	movge	r3, r5
 802541a:	42b3      	cmp	r3, r6
 802541c:	bfa8      	it	ge
 802541e:	4633      	movge	r3, r6
 8025420:	2b00      	cmp	r3, #0
 8025422:	bfc2      	ittt	gt
 8025424:	1aed      	subgt	r5, r5, r3
 8025426:	1af6      	subgt	r6, r6, r3
 8025428:	1aff      	subgt	r7, r7, r3
 802542a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802542c:	2b00      	cmp	r3, #0
 802542e:	dd16      	ble.n	802545e <_strtod_l+0x736>
 8025430:	4641      	mov	r1, r8
 8025432:	9805      	ldr	r0, [sp, #20]
 8025434:	461a      	mov	r2, r3
 8025436:	f7ff f99b 	bl	8024770 <__pow5mult>
 802543a:	4680      	mov	r8, r0
 802543c:	2800      	cmp	r0, #0
 802543e:	d0ba      	beq.n	80253b6 <_strtod_l+0x68e>
 8025440:	4601      	mov	r1, r0
 8025442:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8025444:	9805      	ldr	r0, [sp, #20]
 8025446:	f7ff f8e9 	bl	802461c <__multiply>
 802544a:	900e      	str	r0, [sp, #56]	@ 0x38
 802544c:	2800      	cmp	r0, #0
 802544e:	f43f ae8a 	beq.w	8025166 <_strtod_l+0x43e>
 8025452:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8025454:	9805      	ldr	r0, [sp, #20]
 8025456:	f7fe ffcd 	bl	80243f4 <_Bfree>
 802545a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802545c:	931a      	str	r3, [sp, #104]	@ 0x68
 802545e:	2d00      	cmp	r5, #0
 8025460:	dc1d      	bgt.n	802549e <_strtod_l+0x776>
 8025462:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025464:	2b00      	cmp	r3, #0
 8025466:	dd23      	ble.n	80254b0 <_strtod_l+0x788>
 8025468:	4649      	mov	r1, r9
 802546a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 802546c:	9805      	ldr	r0, [sp, #20]
 802546e:	f7ff f97f 	bl	8024770 <__pow5mult>
 8025472:	4681      	mov	r9, r0
 8025474:	b9e0      	cbnz	r0, 80254b0 <_strtod_l+0x788>
 8025476:	f04f 0900 	mov.w	r9, #0
 802547a:	e674      	b.n	8025166 <_strtod_l+0x43e>
 802547c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8025480:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8025484:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8025488:	35e2      	adds	r5, #226	@ 0xe2
 802548a:	fa01 f305 	lsl.w	r3, r1, r5
 802548e:	9310      	str	r3, [sp, #64]	@ 0x40
 8025490:	9113      	str	r1, [sp, #76]	@ 0x4c
 8025492:	e7ba      	b.n	802540a <_strtod_l+0x6e2>
 8025494:	2300      	movs	r3, #0
 8025496:	9310      	str	r3, [sp, #64]	@ 0x40
 8025498:	2301      	movs	r3, #1
 802549a:	9313      	str	r3, [sp, #76]	@ 0x4c
 802549c:	e7b5      	b.n	802540a <_strtod_l+0x6e2>
 802549e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80254a0:	9805      	ldr	r0, [sp, #20]
 80254a2:	462a      	mov	r2, r5
 80254a4:	f7ff f9be 	bl	8024824 <__lshift>
 80254a8:	901a      	str	r0, [sp, #104]	@ 0x68
 80254aa:	2800      	cmp	r0, #0
 80254ac:	d1d9      	bne.n	8025462 <_strtod_l+0x73a>
 80254ae:	e65a      	b.n	8025166 <_strtod_l+0x43e>
 80254b0:	2e00      	cmp	r6, #0
 80254b2:	dd07      	ble.n	80254c4 <_strtod_l+0x79c>
 80254b4:	4649      	mov	r1, r9
 80254b6:	9805      	ldr	r0, [sp, #20]
 80254b8:	4632      	mov	r2, r6
 80254ba:	f7ff f9b3 	bl	8024824 <__lshift>
 80254be:	4681      	mov	r9, r0
 80254c0:	2800      	cmp	r0, #0
 80254c2:	d0d8      	beq.n	8025476 <_strtod_l+0x74e>
 80254c4:	2f00      	cmp	r7, #0
 80254c6:	dd08      	ble.n	80254da <_strtod_l+0x7b2>
 80254c8:	4641      	mov	r1, r8
 80254ca:	9805      	ldr	r0, [sp, #20]
 80254cc:	463a      	mov	r2, r7
 80254ce:	f7ff f9a9 	bl	8024824 <__lshift>
 80254d2:	4680      	mov	r8, r0
 80254d4:	2800      	cmp	r0, #0
 80254d6:	f43f ae46 	beq.w	8025166 <_strtod_l+0x43e>
 80254da:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80254dc:	9805      	ldr	r0, [sp, #20]
 80254de:	464a      	mov	r2, r9
 80254e0:	f7ff fa28 	bl	8024934 <__mdiff>
 80254e4:	4604      	mov	r4, r0
 80254e6:	2800      	cmp	r0, #0
 80254e8:	f43f ae3d 	beq.w	8025166 <_strtod_l+0x43e>
 80254ec:	68c3      	ldr	r3, [r0, #12]
 80254ee:	930f      	str	r3, [sp, #60]	@ 0x3c
 80254f0:	2300      	movs	r3, #0
 80254f2:	60c3      	str	r3, [r0, #12]
 80254f4:	4641      	mov	r1, r8
 80254f6:	f7ff fa01 	bl	80248fc <__mcmp>
 80254fa:	2800      	cmp	r0, #0
 80254fc:	da46      	bge.n	802558c <_strtod_l+0x864>
 80254fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025500:	ea53 030a 	orrs.w	r3, r3, sl
 8025504:	d16c      	bne.n	80255e0 <_strtod_l+0x8b8>
 8025506:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802550a:	2b00      	cmp	r3, #0
 802550c:	d168      	bne.n	80255e0 <_strtod_l+0x8b8>
 802550e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8025512:	0d1b      	lsrs	r3, r3, #20
 8025514:	051b      	lsls	r3, r3, #20
 8025516:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 802551a:	d961      	bls.n	80255e0 <_strtod_l+0x8b8>
 802551c:	6963      	ldr	r3, [r4, #20]
 802551e:	b913      	cbnz	r3, 8025526 <_strtod_l+0x7fe>
 8025520:	6923      	ldr	r3, [r4, #16]
 8025522:	2b01      	cmp	r3, #1
 8025524:	dd5c      	ble.n	80255e0 <_strtod_l+0x8b8>
 8025526:	4621      	mov	r1, r4
 8025528:	2201      	movs	r2, #1
 802552a:	9805      	ldr	r0, [sp, #20]
 802552c:	f7ff f97a 	bl	8024824 <__lshift>
 8025530:	4641      	mov	r1, r8
 8025532:	4604      	mov	r4, r0
 8025534:	f7ff f9e2 	bl	80248fc <__mcmp>
 8025538:	2800      	cmp	r0, #0
 802553a:	dd51      	ble.n	80255e0 <_strtod_l+0x8b8>
 802553c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8025540:	9a08      	ldr	r2, [sp, #32]
 8025542:	0d1b      	lsrs	r3, r3, #20
 8025544:	051b      	lsls	r3, r3, #20
 8025546:	2a00      	cmp	r2, #0
 8025548:	d06b      	beq.n	8025622 <_strtod_l+0x8fa>
 802554a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 802554e:	d868      	bhi.n	8025622 <_strtod_l+0x8fa>
 8025550:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8025554:	f67f ae9d 	bls.w	8025292 <_strtod_l+0x56a>
 8025558:	4b0a      	ldr	r3, [pc, #40]	@ (8025584 <_strtod_l+0x85c>)
 802555a:	4650      	mov	r0, sl
 802555c:	4659      	mov	r1, fp
 802555e:	2200      	movs	r2, #0
 8025560:	f7f4 fb4a 	bl	8019bf8 <__aeabi_dmul>
 8025564:	4b08      	ldr	r3, [pc, #32]	@ (8025588 <_strtod_l+0x860>)
 8025566:	400b      	ands	r3, r1
 8025568:	4682      	mov	sl, r0
 802556a:	468b      	mov	fp, r1
 802556c:	2b00      	cmp	r3, #0
 802556e:	f47f ae05 	bne.w	802517c <_strtod_l+0x454>
 8025572:	9a05      	ldr	r2, [sp, #20]
 8025574:	2322      	movs	r3, #34	@ 0x22
 8025576:	6013      	str	r3, [r2, #0]
 8025578:	e600      	b.n	802517c <_strtod_l+0x454>
 802557a:	bf00      	nop
 802557c:	080448c0 	.word	0x080448c0
 8025580:	fffffc02 	.word	0xfffffc02
 8025584:	39500000 	.word	0x39500000
 8025588:	7ff00000 	.word	0x7ff00000
 802558c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8025590:	d165      	bne.n	802565e <_strtod_l+0x936>
 8025592:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8025594:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8025598:	b35a      	cbz	r2, 80255f2 <_strtod_l+0x8ca>
 802559a:	4a9f      	ldr	r2, [pc, #636]	@ (8025818 <_strtod_l+0xaf0>)
 802559c:	4293      	cmp	r3, r2
 802559e:	d12b      	bne.n	80255f8 <_strtod_l+0x8d0>
 80255a0:	9b08      	ldr	r3, [sp, #32]
 80255a2:	4651      	mov	r1, sl
 80255a4:	b303      	cbz	r3, 80255e8 <_strtod_l+0x8c0>
 80255a6:	4b9d      	ldr	r3, [pc, #628]	@ (802581c <_strtod_l+0xaf4>)
 80255a8:	465a      	mov	r2, fp
 80255aa:	4013      	ands	r3, r2
 80255ac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80255b0:	f04f 32ff 	mov.w	r2, #4294967295
 80255b4:	d81b      	bhi.n	80255ee <_strtod_l+0x8c6>
 80255b6:	0d1b      	lsrs	r3, r3, #20
 80255b8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80255bc:	fa02 f303 	lsl.w	r3, r2, r3
 80255c0:	4299      	cmp	r1, r3
 80255c2:	d119      	bne.n	80255f8 <_strtod_l+0x8d0>
 80255c4:	4b96      	ldr	r3, [pc, #600]	@ (8025820 <_strtod_l+0xaf8>)
 80255c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80255c8:	429a      	cmp	r2, r3
 80255ca:	d102      	bne.n	80255d2 <_strtod_l+0x8aa>
 80255cc:	3101      	adds	r1, #1
 80255ce:	f43f adca 	beq.w	8025166 <_strtod_l+0x43e>
 80255d2:	4b92      	ldr	r3, [pc, #584]	@ (802581c <_strtod_l+0xaf4>)
 80255d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80255d6:	401a      	ands	r2, r3
 80255d8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80255dc:	f04f 0a00 	mov.w	sl, #0
 80255e0:	9b08      	ldr	r3, [sp, #32]
 80255e2:	2b00      	cmp	r3, #0
 80255e4:	d1b8      	bne.n	8025558 <_strtod_l+0x830>
 80255e6:	e5c9      	b.n	802517c <_strtod_l+0x454>
 80255e8:	f04f 33ff 	mov.w	r3, #4294967295
 80255ec:	e7e8      	b.n	80255c0 <_strtod_l+0x898>
 80255ee:	4613      	mov	r3, r2
 80255f0:	e7e6      	b.n	80255c0 <_strtod_l+0x898>
 80255f2:	ea53 030a 	orrs.w	r3, r3, sl
 80255f6:	d0a1      	beq.n	802553c <_strtod_l+0x814>
 80255f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80255fa:	b1db      	cbz	r3, 8025634 <_strtod_l+0x90c>
 80255fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80255fe:	4213      	tst	r3, r2
 8025600:	d0ee      	beq.n	80255e0 <_strtod_l+0x8b8>
 8025602:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025604:	9a08      	ldr	r2, [sp, #32]
 8025606:	4650      	mov	r0, sl
 8025608:	4659      	mov	r1, fp
 802560a:	b1bb      	cbz	r3, 802563c <_strtod_l+0x914>
 802560c:	f7ff fb6c 	bl	8024ce8 <sulp>
 8025610:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8025614:	ec53 2b10 	vmov	r2, r3, d0
 8025618:	f7f4 f938 	bl	801988c <__adddf3>
 802561c:	4682      	mov	sl, r0
 802561e:	468b      	mov	fp, r1
 8025620:	e7de      	b.n	80255e0 <_strtod_l+0x8b8>
 8025622:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8025626:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 802562a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 802562e:	f04f 3aff 	mov.w	sl, #4294967295
 8025632:	e7d5      	b.n	80255e0 <_strtod_l+0x8b8>
 8025634:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025636:	ea13 0f0a 	tst.w	r3, sl
 802563a:	e7e1      	b.n	8025600 <_strtod_l+0x8d8>
 802563c:	f7ff fb54 	bl	8024ce8 <sulp>
 8025640:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8025644:	ec53 2b10 	vmov	r2, r3, d0
 8025648:	f7f4 f91e 	bl	8019888 <__aeabi_dsub>
 802564c:	2200      	movs	r2, #0
 802564e:	2300      	movs	r3, #0
 8025650:	4682      	mov	sl, r0
 8025652:	468b      	mov	fp, r1
 8025654:	f7f4 fd38 	bl	801a0c8 <__aeabi_dcmpeq>
 8025658:	2800      	cmp	r0, #0
 802565a:	d0c1      	beq.n	80255e0 <_strtod_l+0x8b8>
 802565c:	e619      	b.n	8025292 <_strtod_l+0x56a>
 802565e:	4641      	mov	r1, r8
 8025660:	4620      	mov	r0, r4
 8025662:	f7ff fac3 	bl	8024bec <__ratio>
 8025666:	ec57 6b10 	vmov	r6, r7, d0
 802566a:	2200      	movs	r2, #0
 802566c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8025670:	4630      	mov	r0, r6
 8025672:	4639      	mov	r1, r7
 8025674:	f7f4 fd3c 	bl	801a0f0 <__aeabi_dcmple>
 8025678:	2800      	cmp	r0, #0
 802567a:	d06f      	beq.n	802575c <_strtod_l+0xa34>
 802567c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802567e:	2b00      	cmp	r3, #0
 8025680:	d17a      	bne.n	8025778 <_strtod_l+0xa50>
 8025682:	f1ba 0f00 	cmp.w	sl, #0
 8025686:	d158      	bne.n	802573a <_strtod_l+0xa12>
 8025688:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802568a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802568e:	2b00      	cmp	r3, #0
 8025690:	d15a      	bne.n	8025748 <_strtod_l+0xa20>
 8025692:	4b64      	ldr	r3, [pc, #400]	@ (8025824 <_strtod_l+0xafc>)
 8025694:	2200      	movs	r2, #0
 8025696:	4630      	mov	r0, r6
 8025698:	4639      	mov	r1, r7
 802569a:	f7f4 fd1f 	bl	801a0dc <__aeabi_dcmplt>
 802569e:	2800      	cmp	r0, #0
 80256a0:	d159      	bne.n	8025756 <_strtod_l+0xa2e>
 80256a2:	4630      	mov	r0, r6
 80256a4:	4639      	mov	r1, r7
 80256a6:	4b60      	ldr	r3, [pc, #384]	@ (8025828 <_strtod_l+0xb00>)
 80256a8:	2200      	movs	r2, #0
 80256aa:	f7f4 faa5 	bl	8019bf8 <__aeabi_dmul>
 80256ae:	4606      	mov	r6, r0
 80256b0:	460f      	mov	r7, r1
 80256b2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80256b6:	9606      	str	r6, [sp, #24]
 80256b8:	9307      	str	r3, [sp, #28]
 80256ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80256be:	4d57      	ldr	r5, [pc, #348]	@ (802581c <_strtod_l+0xaf4>)
 80256c0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80256c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80256c6:	401d      	ands	r5, r3
 80256c8:	4b58      	ldr	r3, [pc, #352]	@ (802582c <_strtod_l+0xb04>)
 80256ca:	429d      	cmp	r5, r3
 80256cc:	f040 80b2 	bne.w	8025834 <_strtod_l+0xb0c>
 80256d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80256d2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80256d6:	ec4b ab10 	vmov	d0, sl, fp
 80256da:	f7ff f9bf 	bl	8024a5c <__ulp>
 80256de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80256e2:	ec51 0b10 	vmov	r0, r1, d0
 80256e6:	f7f4 fa87 	bl	8019bf8 <__aeabi_dmul>
 80256ea:	4652      	mov	r2, sl
 80256ec:	465b      	mov	r3, fp
 80256ee:	f7f4 f8cd 	bl	801988c <__adddf3>
 80256f2:	460b      	mov	r3, r1
 80256f4:	4949      	ldr	r1, [pc, #292]	@ (802581c <_strtod_l+0xaf4>)
 80256f6:	4a4e      	ldr	r2, [pc, #312]	@ (8025830 <_strtod_l+0xb08>)
 80256f8:	4019      	ands	r1, r3
 80256fa:	4291      	cmp	r1, r2
 80256fc:	4682      	mov	sl, r0
 80256fe:	d942      	bls.n	8025786 <_strtod_l+0xa5e>
 8025700:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025702:	4b47      	ldr	r3, [pc, #284]	@ (8025820 <_strtod_l+0xaf8>)
 8025704:	429a      	cmp	r2, r3
 8025706:	d103      	bne.n	8025710 <_strtod_l+0x9e8>
 8025708:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802570a:	3301      	adds	r3, #1
 802570c:	f43f ad2b 	beq.w	8025166 <_strtod_l+0x43e>
 8025710:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8025820 <_strtod_l+0xaf8>
 8025714:	f04f 3aff 	mov.w	sl, #4294967295
 8025718:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802571a:	9805      	ldr	r0, [sp, #20]
 802571c:	f7fe fe6a 	bl	80243f4 <_Bfree>
 8025720:	9805      	ldr	r0, [sp, #20]
 8025722:	4649      	mov	r1, r9
 8025724:	f7fe fe66 	bl	80243f4 <_Bfree>
 8025728:	9805      	ldr	r0, [sp, #20]
 802572a:	4641      	mov	r1, r8
 802572c:	f7fe fe62 	bl	80243f4 <_Bfree>
 8025730:	9805      	ldr	r0, [sp, #20]
 8025732:	4621      	mov	r1, r4
 8025734:	f7fe fe5e 	bl	80243f4 <_Bfree>
 8025738:	e618      	b.n	802536c <_strtod_l+0x644>
 802573a:	f1ba 0f01 	cmp.w	sl, #1
 802573e:	d103      	bne.n	8025748 <_strtod_l+0xa20>
 8025740:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025742:	2b00      	cmp	r3, #0
 8025744:	f43f ada5 	beq.w	8025292 <_strtod_l+0x56a>
 8025748:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80257f8 <_strtod_l+0xad0>
 802574c:	4f35      	ldr	r7, [pc, #212]	@ (8025824 <_strtod_l+0xafc>)
 802574e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8025752:	2600      	movs	r6, #0
 8025754:	e7b1      	b.n	80256ba <_strtod_l+0x992>
 8025756:	4f34      	ldr	r7, [pc, #208]	@ (8025828 <_strtod_l+0xb00>)
 8025758:	2600      	movs	r6, #0
 802575a:	e7aa      	b.n	80256b2 <_strtod_l+0x98a>
 802575c:	4b32      	ldr	r3, [pc, #200]	@ (8025828 <_strtod_l+0xb00>)
 802575e:	4630      	mov	r0, r6
 8025760:	4639      	mov	r1, r7
 8025762:	2200      	movs	r2, #0
 8025764:	f7f4 fa48 	bl	8019bf8 <__aeabi_dmul>
 8025768:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802576a:	4606      	mov	r6, r0
 802576c:	460f      	mov	r7, r1
 802576e:	2b00      	cmp	r3, #0
 8025770:	d09f      	beq.n	80256b2 <_strtod_l+0x98a>
 8025772:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8025776:	e7a0      	b.n	80256ba <_strtod_l+0x992>
 8025778:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8025800 <_strtod_l+0xad8>
 802577c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8025780:	ec57 6b17 	vmov	r6, r7, d7
 8025784:	e799      	b.n	80256ba <_strtod_l+0x992>
 8025786:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 802578a:	9b08      	ldr	r3, [sp, #32]
 802578c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8025790:	2b00      	cmp	r3, #0
 8025792:	d1c1      	bne.n	8025718 <_strtod_l+0x9f0>
 8025794:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8025798:	0d1b      	lsrs	r3, r3, #20
 802579a:	051b      	lsls	r3, r3, #20
 802579c:	429d      	cmp	r5, r3
 802579e:	d1bb      	bne.n	8025718 <_strtod_l+0x9f0>
 80257a0:	4630      	mov	r0, r6
 80257a2:	4639      	mov	r1, r7
 80257a4:	f7f4 fd88 	bl	801a2b8 <__aeabi_d2lz>
 80257a8:	f7f4 f9f8 	bl	8019b9c <__aeabi_l2d>
 80257ac:	4602      	mov	r2, r0
 80257ae:	460b      	mov	r3, r1
 80257b0:	4630      	mov	r0, r6
 80257b2:	4639      	mov	r1, r7
 80257b4:	f7f4 f868 	bl	8019888 <__aeabi_dsub>
 80257b8:	460b      	mov	r3, r1
 80257ba:	4602      	mov	r2, r0
 80257bc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80257c0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80257c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80257c6:	ea46 060a 	orr.w	r6, r6, sl
 80257ca:	431e      	orrs	r6, r3
 80257cc:	d06f      	beq.n	80258ae <_strtod_l+0xb86>
 80257ce:	a30e      	add	r3, pc, #56	@ (adr r3, 8025808 <_strtod_l+0xae0>)
 80257d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80257d4:	f7f4 fc82 	bl	801a0dc <__aeabi_dcmplt>
 80257d8:	2800      	cmp	r0, #0
 80257da:	f47f accf 	bne.w	802517c <_strtod_l+0x454>
 80257de:	a30c      	add	r3, pc, #48	@ (adr r3, 8025810 <_strtod_l+0xae8>)
 80257e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80257e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80257e8:	f7f4 fc96 	bl	801a118 <__aeabi_dcmpgt>
 80257ec:	2800      	cmp	r0, #0
 80257ee:	d093      	beq.n	8025718 <_strtod_l+0x9f0>
 80257f0:	e4c4      	b.n	802517c <_strtod_l+0x454>
 80257f2:	bf00      	nop
 80257f4:	f3af 8000 	nop.w
 80257f8:	00000000 	.word	0x00000000
 80257fc:	bff00000 	.word	0xbff00000
 8025800:	00000000 	.word	0x00000000
 8025804:	3ff00000 	.word	0x3ff00000
 8025808:	94a03595 	.word	0x94a03595
 802580c:	3fdfffff 	.word	0x3fdfffff
 8025810:	35afe535 	.word	0x35afe535
 8025814:	3fe00000 	.word	0x3fe00000
 8025818:	000fffff 	.word	0x000fffff
 802581c:	7ff00000 	.word	0x7ff00000
 8025820:	7fefffff 	.word	0x7fefffff
 8025824:	3ff00000 	.word	0x3ff00000
 8025828:	3fe00000 	.word	0x3fe00000
 802582c:	7fe00000 	.word	0x7fe00000
 8025830:	7c9fffff 	.word	0x7c9fffff
 8025834:	9b08      	ldr	r3, [sp, #32]
 8025836:	b323      	cbz	r3, 8025882 <_strtod_l+0xb5a>
 8025838:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 802583c:	d821      	bhi.n	8025882 <_strtod_l+0xb5a>
 802583e:	a328      	add	r3, pc, #160	@ (adr r3, 80258e0 <_strtod_l+0xbb8>)
 8025840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025844:	4630      	mov	r0, r6
 8025846:	4639      	mov	r1, r7
 8025848:	f7f4 fc52 	bl	801a0f0 <__aeabi_dcmple>
 802584c:	b1a0      	cbz	r0, 8025878 <_strtod_l+0xb50>
 802584e:	4639      	mov	r1, r7
 8025850:	4630      	mov	r0, r6
 8025852:	f7f4 fca9 	bl	801a1a8 <__aeabi_d2uiz>
 8025856:	2801      	cmp	r0, #1
 8025858:	bf38      	it	cc
 802585a:	2001      	movcc	r0, #1
 802585c:	f7f4 f952 	bl	8019b04 <__aeabi_ui2d>
 8025860:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025862:	4606      	mov	r6, r0
 8025864:	460f      	mov	r7, r1
 8025866:	b9fb      	cbnz	r3, 80258a8 <_strtod_l+0xb80>
 8025868:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 802586c:	9014      	str	r0, [sp, #80]	@ 0x50
 802586e:	9315      	str	r3, [sp, #84]	@ 0x54
 8025870:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8025874:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8025878:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802587a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 802587e:	1b5b      	subs	r3, r3, r5
 8025880:	9311      	str	r3, [sp, #68]	@ 0x44
 8025882:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8025886:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 802588a:	f7ff f8e7 	bl	8024a5c <__ulp>
 802588e:	4650      	mov	r0, sl
 8025890:	ec53 2b10 	vmov	r2, r3, d0
 8025894:	4659      	mov	r1, fp
 8025896:	f7f4 f9af 	bl	8019bf8 <__aeabi_dmul>
 802589a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 802589e:	f7f3 fff5 	bl	801988c <__adddf3>
 80258a2:	4682      	mov	sl, r0
 80258a4:	468b      	mov	fp, r1
 80258a6:	e770      	b.n	802578a <_strtod_l+0xa62>
 80258a8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80258ac:	e7e0      	b.n	8025870 <_strtod_l+0xb48>
 80258ae:	a30e      	add	r3, pc, #56	@ (adr r3, 80258e8 <_strtod_l+0xbc0>)
 80258b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80258b4:	f7f4 fc12 	bl	801a0dc <__aeabi_dcmplt>
 80258b8:	e798      	b.n	80257ec <_strtod_l+0xac4>
 80258ba:	2300      	movs	r3, #0
 80258bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80258be:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80258c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80258c2:	6013      	str	r3, [r2, #0]
 80258c4:	f7ff ba6d 	b.w	8024da2 <_strtod_l+0x7a>
 80258c8:	2a65      	cmp	r2, #101	@ 0x65
 80258ca:	f43f ab66 	beq.w	8024f9a <_strtod_l+0x272>
 80258ce:	2a45      	cmp	r2, #69	@ 0x45
 80258d0:	f43f ab63 	beq.w	8024f9a <_strtod_l+0x272>
 80258d4:	2301      	movs	r3, #1
 80258d6:	f7ff bb9e 	b.w	8025016 <_strtod_l+0x2ee>
 80258da:	bf00      	nop
 80258dc:	f3af 8000 	nop.w
 80258e0:	ffc00000 	.word	0xffc00000
 80258e4:	41dfffff 	.word	0x41dfffff
 80258e8:	94a03595 	.word	0x94a03595
 80258ec:	3fcfffff 	.word	0x3fcfffff

080258f0 <_strtod_r>:
 80258f0:	4b01      	ldr	r3, [pc, #4]	@ (80258f8 <_strtod_r+0x8>)
 80258f2:	f7ff ba19 	b.w	8024d28 <_strtod_l>
 80258f6:	bf00      	nop
 80258f8:	2000081c 	.word	0x2000081c

080258fc <_strtol_l.constprop.0>:
 80258fc:	2b24      	cmp	r3, #36	@ 0x24
 80258fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025902:	4686      	mov	lr, r0
 8025904:	4690      	mov	r8, r2
 8025906:	d801      	bhi.n	802590c <_strtol_l.constprop.0+0x10>
 8025908:	2b01      	cmp	r3, #1
 802590a:	d106      	bne.n	802591a <_strtol_l.constprop.0+0x1e>
 802590c:	f7fd fe5a 	bl	80235c4 <__errno>
 8025910:	2316      	movs	r3, #22
 8025912:	6003      	str	r3, [r0, #0]
 8025914:	2000      	movs	r0, #0
 8025916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802591a:	4834      	ldr	r0, [pc, #208]	@ (80259ec <_strtol_l.constprop.0+0xf0>)
 802591c:	460d      	mov	r5, r1
 802591e:	462a      	mov	r2, r5
 8025920:	f815 4b01 	ldrb.w	r4, [r5], #1
 8025924:	5d06      	ldrb	r6, [r0, r4]
 8025926:	f016 0608 	ands.w	r6, r6, #8
 802592a:	d1f8      	bne.n	802591e <_strtol_l.constprop.0+0x22>
 802592c:	2c2d      	cmp	r4, #45	@ 0x2d
 802592e:	d12d      	bne.n	802598c <_strtol_l.constprop.0+0x90>
 8025930:	782c      	ldrb	r4, [r5, #0]
 8025932:	2601      	movs	r6, #1
 8025934:	1c95      	adds	r5, r2, #2
 8025936:	f033 0210 	bics.w	r2, r3, #16
 802593a:	d109      	bne.n	8025950 <_strtol_l.constprop.0+0x54>
 802593c:	2c30      	cmp	r4, #48	@ 0x30
 802593e:	d12a      	bne.n	8025996 <_strtol_l.constprop.0+0x9a>
 8025940:	782a      	ldrb	r2, [r5, #0]
 8025942:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8025946:	2a58      	cmp	r2, #88	@ 0x58
 8025948:	d125      	bne.n	8025996 <_strtol_l.constprop.0+0x9a>
 802594a:	786c      	ldrb	r4, [r5, #1]
 802594c:	2310      	movs	r3, #16
 802594e:	3502      	adds	r5, #2
 8025950:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8025954:	f10c 3cff 	add.w	ip, ip, #4294967295
 8025958:	2200      	movs	r2, #0
 802595a:	fbbc f9f3 	udiv	r9, ip, r3
 802595e:	4610      	mov	r0, r2
 8025960:	fb03 ca19 	mls	sl, r3, r9, ip
 8025964:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8025968:	2f09      	cmp	r7, #9
 802596a:	d81b      	bhi.n	80259a4 <_strtol_l.constprop.0+0xa8>
 802596c:	463c      	mov	r4, r7
 802596e:	42a3      	cmp	r3, r4
 8025970:	dd27      	ble.n	80259c2 <_strtol_l.constprop.0+0xc6>
 8025972:	1c57      	adds	r7, r2, #1
 8025974:	d007      	beq.n	8025986 <_strtol_l.constprop.0+0x8a>
 8025976:	4581      	cmp	r9, r0
 8025978:	d320      	bcc.n	80259bc <_strtol_l.constprop.0+0xc0>
 802597a:	d101      	bne.n	8025980 <_strtol_l.constprop.0+0x84>
 802597c:	45a2      	cmp	sl, r4
 802597e:	db1d      	blt.n	80259bc <_strtol_l.constprop.0+0xc0>
 8025980:	fb00 4003 	mla	r0, r0, r3, r4
 8025984:	2201      	movs	r2, #1
 8025986:	f815 4b01 	ldrb.w	r4, [r5], #1
 802598a:	e7eb      	b.n	8025964 <_strtol_l.constprop.0+0x68>
 802598c:	2c2b      	cmp	r4, #43	@ 0x2b
 802598e:	bf04      	itt	eq
 8025990:	782c      	ldrbeq	r4, [r5, #0]
 8025992:	1c95      	addeq	r5, r2, #2
 8025994:	e7cf      	b.n	8025936 <_strtol_l.constprop.0+0x3a>
 8025996:	2b00      	cmp	r3, #0
 8025998:	d1da      	bne.n	8025950 <_strtol_l.constprop.0+0x54>
 802599a:	2c30      	cmp	r4, #48	@ 0x30
 802599c:	bf0c      	ite	eq
 802599e:	2308      	moveq	r3, #8
 80259a0:	230a      	movne	r3, #10
 80259a2:	e7d5      	b.n	8025950 <_strtol_l.constprop.0+0x54>
 80259a4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80259a8:	2f19      	cmp	r7, #25
 80259aa:	d801      	bhi.n	80259b0 <_strtol_l.constprop.0+0xb4>
 80259ac:	3c37      	subs	r4, #55	@ 0x37
 80259ae:	e7de      	b.n	802596e <_strtol_l.constprop.0+0x72>
 80259b0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80259b4:	2f19      	cmp	r7, #25
 80259b6:	d804      	bhi.n	80259c2 <_strtol_l.constprop.0+0xc6>
 80259b8:	3c57      	subs	r4, #87	@ 0x57
 80259ba:	e7d8      	b.n	802596e <_strtol_l.constprop.0+0x72>
 80259bc:	f04f 32ff 	mov.w	r2, #4294967295
 80259c0:	e7e1      	b.n	8025986 <_strtol_l.constprop.0+0x8a>
 80259c2:	1c53      	adds	r3, r2, #1
 80259c4:	d108      	bne.n	80259d8 <_strtol_l.constprop.0+0xdc>
 80259c6:	2322      	movs	r3, #34	@ 0x22
 80259c8:	f8ce 3000 	str.w	r3, [lr]
 80259cc:	4660      	mov	r0, ip
 80259ce:	f1b8 0f00 	cmp.w	r8, #0
 80259d2:	d0a0      	beq.n	8025916 <_strtol_l.constprop.0+0x1a>
 80259d4:	1e69      	subs	r1, r5, #1
 80259d6:	e006      	b.n	80259e6 <_strtol_l.constprop.0+0xea>
 80259d8:	b106      	cbz	r6, 80259dc <_strtol_l.constprop.0+0xe0>
 80259da:	4240      	negs	r0, r0
 80259dc:	f1b8 0f00 	cmp.w	r8, #0
 80259e0:	d099      	beq.n	8025916 <_strtol_l.constprop.0+0x1a>
 80259e2:	2a00      	cmp	r2, #0
 80259e4:	d1f6      	bne.n	80259d4 <_strtol_l.constprop.0+0xd8>
 80259e6:	f8c8 1000 	str.w	r1, [r8]
 80259ea:	e794      	b.n	8025916 <_strtol_l.constprop.0+0x1a>
 80259ec:	080448e9 	.word	0x080448e9

080259f0 <_strtol_r>:
 80259f0:	f7ff bf84 	b.w	80258fc <_strtol_l.constprop.0>

080259f4 <__ssputs_r>:
 80259f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80259f8:	688e      	ldr	r6, [r1, #8]
 80259fa:	461f      	mov	r7, r3
 80259fc:	42be      	cmp	r6, r7
 80259fe:	680b      	ldr	r3, [r1, #0]
 8025a00:	4682      	mov	sl, r0
 8025a02:	460c      	mov	r4, r1
 8025a04:	4690      	mov	r8, r2
 8025a06:	d82d      	bhi.n	8025a64 <__ssputs_r+0x70>
 8025a08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8025a0c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8025a10:	d026      	beq.n	8025a60 <__ssputs_r+0x6c>
 8025a12:	6965      	ldr	r5, [r4, #20]
 8025a14:	6909      	ldr	r1, [r1, #16]
 8025a16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8025a1a:	eba3 0901 	sub.w	r9, r3, r1
 8025a1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8025a22:	1c7b      	adds	r3, r7, #1
 8025a24:	444b      	add	r3, r9
 8025a26:	106d      	asrs	r5, r5, #1
 8025a28:	429d      	cmp	r5, r3
 8025a2a:	bf38      	it	cc
 8025a2c:	461d      	movcc	r5, r3
 8025a2e:	0553      	lsls	r3, r2, #21
 8025a30:	d527      	bpl.n	8025a82 <__ssputs_r+0x8e>
 8025a32:	4629      	mov	r1, r5
 8025a34:	f7fc fc02 	bl	802223c <_malloc_r>
 8025a38:	4606      	mov	r6, r0
 8025a3a:	b360      	cbz	r0, 8025a96 <__ssputs_r+0xa2>
 8025a3c:	6921      	ldr	r1, [r4, #16]
 8025a3e:	464a      	mov	r2, r9
 8025a40:	f7fd fded 	bl	802361e <memcpy>
 8025a44:	89a3      	ldrh	r3, [r4, #12]
 8025a46:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8025a4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8025a4e:	81a3      	strh	r3, [r4, #12]
 8025a50:	6126      	str	r6, [r4, #16]
 8025a52:	6165      	str	r5, [r4, #20]
 8025a54:	444e      	add	r6, r9
 8025a56:	eba5 0509 	sub.w	r5, r5, r9
 8025a5a:	6026      	str	r6, [r4, #0]
 8025a5c:	60a5      	str	r5, [r4, #8]
 8025a5e:	463e      	mov	r6, r7
 8025a60:	42be      	cmp	r6, r7
 8025a62:	d900      	bls.n	8025a66 <__ssputs_r+0x72>
 8025a64:	463e      	mov	r6, r7
 8025a66:	6820      	ldr	r0, [r4, #0]
 8025a68:	4632      	mov	r2, r6
 8025a6a:	4641      	mov	r1, r8
 8025a6c:	f000 fb6a 	bl	8026144 <memmove>
 8025a70:	68a3      	ldr	r3, [r4, #8]
 8025a72:	1b9b      	subs	r3, r3, r6
 8025a74:	60a3      	str	r3, [r4, #8]
 8025a76:	6823      	ldr	r3, [r4, #0]
 8025a78:	4433      	add	r3, r6
 8025a7a:	6023      	str	r3, [r4, #0]
 8025a7c:	2000      	movs	r0, #0
 8025a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025a82:	462a      	mov	r2, r5
 8025a84:	f7fc fc66 	bl	8022354 <_realloc_r>
 8025a88:	4606      	mov	r6, r0
 8025a8a:	2800      	cmp	r0, #0
 8025a8c:	d1e0      	bne.n	8025a50 <__ssputs_r+0x5c>
 8025a8e:	6921      	ldr	r1, [r4, #16]
 8025a90:	4650      	mov	r0, sl
 8025a92:	f7fe fc25 	bl	80242e0 <_free_r>
 8025a96:	230c      	movs	r3, #12
 8025a98:	f8ca 3000 	str.w	r3, [sl]
 8025a9c:	89a3      	ldrh	r3, [r4, #12]
 8025a9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8025aa2:	81a3      	strh	r3, [r4, #12]
 8025aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8025aa8:	e7e9      	b.n	8025a7e <__ssputs_r+0x8a>
	...

08025aac <_svfiprintf_r>:
 8025aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025ab0:	4698      	mov	r8, r3
 8025ab2:	898b      	ldrh	r3, [r1, #12]
 8025ab4:	061b      	lsls	r3, r3, #24
 8025ab6:	b09d      	sub	sp, #116	@ 0x74
 8025ab8:	4607      	mov	r7, r0
 8025aba:	460d      	mov	r5, r1
 8025abc:	4614      	mov	r4, r2
 8025abe:	d510      	bpl.n	8025ae2 <_svfiprintf_r+0x36>
 8025ac0:	690b      	ldr	r3, [r1, #16]
 8025ac2:	b973      	cbnz	r3, 8025ae2 <_svfiprintf_r+0x36>
 8025ac4:	2140      	movs	r1, #64	@ 0x40
 8025ac6:	f7fc fbb9 	bl	802223c <_malloc_r>
 8025aca:	6028      	str	r0, [r5, #0]
 8025acc:	6128      	str	r0, [r5, #16]
 8025ace:	b930      	cbnz	r0, 8025ade <_svfiprintf_r+0x32>
 8025ad0:	230c      	movs	r3, #12
 8025ad2:	603b      	str	r3, [r7, #0]
 8025ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8025ad8:	b01d      	add	sp, #116	@ 0x74
 8025ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025ade:	2340      	movs	r3, #64	@ 0x40
 8025ae0:	616b      	str	r3, [r5, #20]
 8025ae2:	2300      	movs	r3, #0
 8025ae4:	9309      	str	r3, [sp, #36]	@ 0x24
 8025ae6:	2320      	movs	r3, #32
 8025ae8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8025aec:	f8cd 800c 	str.w	r8, [sp, #12]
 8025af0:	2330      	movs	r3, #48	@ 0x30
 8025af2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8025c90 <_svfiprintf_r+0x1e4>
 8025af6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8025afa:	f04f 0901 	mov.w	r9, #1
 8025afe:	4623      	mov	r3, r4
 8025b00:	469a      	mov	sl, r3
 8025b02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8025b06:	b10a      	cbz	r2, 8025b0c <_svfiprintf_r+0x60>
 8025b08:	2a25      	cmp	r2, #37	@ 0x25
 8025b0a:	d1f9      	bne.n	8025b00 <_svfiprintf_r+0x54>
 8025b0c:	ebba 0b04 	subs.w	fp, sl, r4
 8025b10:	d00b      	beq.n	8025b2a <_svfiprintf_r+0x7e>
 8025b12:	465b      	mov	r3, fp
 8025b14:	4622      	mov	r2, r4
 8025b16:	4629      	mov	r1, r5
 8025b18:	4638      	mov	r0, r7
 8025b1a:	f7ff ff6b 	bl	80259f4 <__ssputs_r>
 8025b1e:	3001      	adds	r0, #1
 8025b20:	f000 80a7 	beq.w	8025c72 <_svfiprintf_r+0x1c6>
 8025b24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025b26:	445a      	add	r2, fp
 8025b28:	9209      	str	r2, [sp, #36]	@ 0x24
 8025b2a:	f89a 3000 	ldrb.w	r3, [sl]
 8025b2e:	2b00      	cmp	r3, #0
 8025b30:	f000 809f 	beq.w	8025c72 <_svfiprintf_r+0x1c6>
 8025b34:	2300      	movs	r3, #0
 8025b36:	f04f 32ff 	mov.w	r2, #4294967295
 8025b3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025b3e:	f10a 0a01 	add.w	sl, sl, #1
 8025b42:	9304      	str	r3, [sp, #16]
 8025b44:	9307      	str	r3, [sp, #28]
 8025b46:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8025b4a:	931a      	str	r3, [sp, #104]	@ 0x68
 8025b4c:	4654      	mov	r4, sl
 8025b4e:	2205      	movs	r2, #5
 8025b50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025b54:	484e      	ldr	r0, [pc, #312]	@ (8025c90 <_svfiprintf_r+0x1e4>)
 8025b56:	f7f3 fe3b 	bl	80197d0 <memchr>
 8025b5a:	9a04      	ldr	r2, [sp, #16]
 8025b5c:	b9d8      	cbnz	r0, 8025b96 <_svfiprintf_r+0xea>
 8025b5e:	06d0      	lsls	r0, r2, #27
 8025b60:	bf44      	itt	mi
 8025b62:	2320      	movmi	r3, #32
 8025b64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8025b68:	0711      	lsls	r1, r2, #28
 8025b6a:	bf44      	itt	mi
 8025b6c:	232b      	movmi	r3, #43	@ 0x2b
 8025b6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8025b72:	f89a 3000 	ldrb.w	r3, [sl]
 8025b76:	2b2a      	cmp	r3, #42	@ 0x2a
 8025b78:	d015      	beq.n	8025ba6 <_svfiprintf_r+0xfa>
 8025b7a:	9a07      	ldr	r2, [sp, #28]
 8025b7c:	4654      	mov	r4, sl
 8025b7e:	2000      	movs	r0, #0
 8025b80:	f04f 0c0a 	mov.w	ip, #10
 8025b84:	4621      	mov	r1, r4
 8025b86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8025b8a:	3b30      	subs	r3, #48	@ 0x30
 8025b8c:	2b09      	cmp	r3, #9
 8025b8e:	d94b      	bls.n	8025c28 <_svfiprintf_r+0x17c>
 8025b90:	b1b0      	cbz	r0, 8025bc0 <_svfiprintf_r+0x114>
 8025b92:	9207      	str	r2, [sp, #28]
 8025b94:	e014      	b.n	8025bc0 <_svfiprintf_r+0x114>
 8025b96:	eba0 0308 	sub.w	r3, r0, r8
 8025b9a:	fa09 f303 	lsl.w	r3, r9, r3
 8025b9e:	4313      	orrs	r3, r2
 8025ba0:	9304      	str	r3, [sp, #16]
 8025ba2:	46a2      	mov	sl, r4
 8025ba4:	e7d2      	b.n	8025b4c <_svfiprintf_r+0xa0>
 8025ba6:	9b03      	ldr	r3, [sp, #12]
 8025ba8:	1d19      	adds	r1, r3, #4
 8025baa:	681b      	ldr	r3, [r3, #0]
 8025bac:	9103      	str	r1, [sp, #12]
 8025bae:	2b00      	cmp	r3, #0
 8025bb0:	bfbb      	ittet	lt
 8025bb2:	425b      	neglt	r3, r3
 8025bb4:	f042 0202 	orrlt.w	r2, r2, #2
 8025bb8:	9307      	strge	r3, [sp, #28]
 8025bba:	9307      	strlt	r3, [sp, #28]
 8025bbc:	bfb8      	it	lt
 8025bbe:	9204      	strlt	r2, [sp, #16]
 8025bc0:	7823      	ldrb	r3, [r4, #0]
 8025bc2:	2b2e      	cmp	r3, #46	@ 0x2e
 8025bc4:	d10a      	bne.n	8025bdc <_svfiprintf_r+0x130>
 8025bc6:	7863      	ldrb	r3, [r4, #1]
 8025bc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8025bca:	d132      	bne.n	8025c32 <_svfiprintf_r+0x186>
 8025bcc:	9b03      	ldr	r3, [sp, #12]
 8025bce:	1d1a      	adds	r2, r3, #4
 8025bd0:	681b      	ldr	r3, [r3, #0]
 8025bd2:	9203      	str	r2, [sp, #12]
 8025bd4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8025bd8:	3402      	adds	r4, #2
 8025bda:	9305      	str	r3, [sp, #20]
 8025bdc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8025ca0 <_svfiprintf_r+0x1f4>
 8025be0:	7821      	ldrb	r1, [r4, #0]
 8025be2:	2203      	movs	r2, #3
 8025be4:	4650      	mov	r0, sl
 8025be6:	f7f3 fdf3 	bl	80197d0 <memchr>
 8025bea:	b138      	cbz	r0, 8025bfc <_svfiprintf_r+0x150>
 8025bec:	9b04      	ldr	r3, [sp, #16]
 8025bee:	eba0 000a 	sub.w	r0, r0, sl
 8025bf2:	2240      	movs	r2, #64	@ 0x40
 8025bf4:	4082      	lsls	r2, r0
 8025bf6:	4313      	orrs	r3, r2
 8025bf8:	3401      	adds	r4, #1
 8025bfa:	9304      	str	r3, [sp, #16]
 8025bfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025c00:	4824      	ldr	r0, [pc, #144]	@ (8025c94 <_svfiprintf_r+0x1e8>)
 8025c02:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8025c06:	2206      	movs	r2, #6
 8025c08:	f7f3 fde2 	bl	80197d0 <memchr>
 8025c0c:	2800      	cmp	r0, #0
 8025c0e:	d036      	beq.n	8025c7e <_svfiprintf_r+0x1d2>
 8025c10:	4b21      	ldr	r3, [pc, #132]	@ (8025c98 <_svfiprintf_r+0x1ec>)
 8025c12:	bb1b      	cbnz	r3, 8025c5c <_svfiprintf_r+0x1b0>
 8025c14:	9b03      	ldr	r3, [sp, #12]
 8025c16:	3307      	adds	r3, #7
 8025c18:	f023 0307 	bic.w	r3, r3, #7
 8025c1c:	3308      	adds	r3, #8
 8025c1e:	9303      	str	r3, [sp, #12]
 8025c20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025c22:	4433      	add	r3, r6
 8025c24:	9309      	str	r3, [sp, #36]	@ 0x24
 8025c26:	e76a      	b.n	8025afe <_svfiprintf_r+0x52>
 8025c28:	fb0c 3202 	mla	r2, ip, r2, r3
 8025c2c:	460c      	mov	r4, r1
 8025c2e:	2001      	movs	r0, #1
 8025c30:	e7a8      	b.n	8025b84 <_svfiprintf_r+0xd8>
 8025c32:	2300      	movs	r3, #0
 8025c34:	3401      	adds	r4, #1
 8025c36:	9305      	str	r3, [sp, #20]
 8025c38:	4619      	mov	r1, r3
 8025c3a:	f04f 0c0a 	mov.w	ip, #10
 8025c3e:	4620      	mov	r0, r4
 8025c40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025c44:	3a30      	subs	r2, #48	@ 0x30
 8025c46:	2a09      	cmp	r2, #9
 8025c48:	d903      	bls.n	8025c52 <_svfiprintf_r+0x1a6>
 8025c4a:	2b00      	cmp	r3, #0
 8025c4c:	d0c6      	beq.n	8025bdc <_svfiprintf_r+0x130>
 8025c4e:	9105      	str	r1, [sp, #20]
 8025c50:	e7c4      	b.n	8025bdc <_svfiprintf_r+0x130>
 8025c52:	fb0c 2101 	mla	r1, ip, r1, r2
 8025c56:	4604      	mov	r4, r0
 8025c58:	2301      	movs	r3, #1
 8025c5a:	e7f0      	b.n	8025c3e <_svfiprintf_r+0x192>
 8025c5c:	ab03      	add	r3, sp, #12
 8025c5e:	9300      	str	r3, [sp, #0]
 8025c60:	462a      	mov	r2, r5
 8025c62:	4b0e      	ldr	r3, [pc, #56]	@ (8025c9c <_svfiprintf_r+0x1f0>)
 8025c64:	a904      	add	r1, sp, #16
 8025c66:	4638      	mov	r0, r7
 8025c68:	f7fc fc42 	bl	80224f0 <_printf_float>
 8025c6c:	1c42      	adds	r2, r0, #1
 8025c6e:	4606      	mov	r6, r0
 8025c70:	d1d6      	bne.n	8025c20 <_svfiprintf_r+0x174>
 8025c72:	89ab      	ldrh	r3, [r5, #12]
 8025c74:	065b      	lsls	r3, r3, #25
 8025c76:	f53f af2d 	bmi.w	8025ad4 <_svfiprintf_r+0x28>
 8025c7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025c7c:	e72c      	b.n	8025ad8 <_svfiprintf_r+0x2c>
 8025c7e:	ab03      	add	r3, sp, #12
 8025c80:	9300      	str	r3, [sp, #0]
 8025c82:	462a      	mov	r2, r5
 8025c84:	4b05      	ldr	r3, [pc, #20]	@ (8025c9c <_svfiprintf_r+0x1f0>)
 8025c86:	a904      	add	r1, sp, #16
 8025c88:	4638      	mov	r0, r7
 8025c8a:	f7fc fec9 	bl	8022a20 <_printf_i>
 8025c8e:	e7ed      	b.n	8025c6c <_svfiprintf_r+0x1c0>
 8025c90:	080449e9 	.word	0x080449e9
 8025c94:	080449f3 	.word	0x080449f3
 8025c98:	080224f1 	.word	0x080224f1
 8025c9c:	080259f5 	.word	0x080259f5
 8025ca0:	080449ef 	.word	0x080449ef

08025ca4 <__sfputc_r>:
 8025ca4:	6893      	ldr	r3, [r2, #8]
 8025ca6:	3b01      	subs	r3, #1
 8025ca8:	2b00      	cmp	r3, #0
 8025caa:	b410      	push	{r4}
 8025cac:	6093      	str	r3, [r2, #8]
 8025cae:	da08      	bge.n	8025cc2 <__sfputc_r+0x1e>
 8025cb0:	6994      	ldr	r4, [r2, #24]
 8025cb2:	42a3      	cmp	r3, r4
 8025cb4:	db01      	blt.n	8025cba <__sfputc_r+0x16>
 8025cb6:	290a      	cmp	r1, #10
 8025cb8:	d103      	bne.n	8025cc2 <__sfputc_r+0x1e>
 8025cba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025cbe:	f7fd bb78 	b.w	80233b2 <__swbuf_r>
 8025cc2:	6813      	ldr	r3, [r2, #0]
 8025cc4:	1c58      	adds	r0, r3, #1
 8025cc6:	6010      	str	r0, [r2, #0]
 8025cc8:	7019      	strb	r1, [r3, #0]
 8025cca:	4608      	mov	r0, r1
 8025ccc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025cd0:	4770      	bx	lr

08025cd2 <__sfputs_r>:
 8025cd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025cd4:	4606      	mov	r6, r0
 8025cd6:	460f      	mov	r7, r1
 8025cd8:	4614      	mov	r4, r2
 8025cda:	18d5      	adds	r5, r2, r3
 8025cdc:	42ac      	cmp	r4, r5
 8025cde:	d101      	bne.n	8025ce4 <__sfputs_r+0x12>
 8025ce0:	2000      	movs	r0, #0
 8025ce2:	e007      	b.n	8025cf4 <__sfputs_r+0x22>
 8025ce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025ce8:	463a      	mov	r2, r7
 8025cea:	4630      	mov	r0, r6
 8025cec:	f7ff ffda 	bl	8025ca4 <__sfputc_r>
 8025cf0:	1c43      	adds	r3, r0, #1
 8025cf2:	d1f3      	bne.n	8025cdc <__sfputs_r+0xa>
 8025cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08025cf8 <_vfiprintf_r>:
 8025cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025cfc:	460d      	mov	r5, r1
 8025cfe:	b09d      	sub	sp, #116	@ 0x74
 8025d00:	4614      	mov	r4, r2
 8025d02:	4698      	mov	r8, r3
 8025d04:	4606      	mov	r6, r0
 8025d06:	b118      	cbz	r0, 8025d10 <_vfiprintf_r+0x18>
 8025d08:	6a03      	ldr	r3, [r0, #32]
 8025d0a:	b90b      	cbnz	r3, 8025d10 <_vfiprintf_r+0x18>
 8025d0c:	f7fd fa48 	bl	80231a0 <__sinit>
 8025d10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8025d12:	07d9      	lsls	r1, r3, #31
 8025d14:	d405      	bmi.n	8025d22 <_vfiprintf_r+0x2a>
 8025d16:	89ab      	ldrh	r3, [r5, #12]
 8025d18:	059a      	lsls	r2, r3, #22
 8025d1a:	d402      	bmi.n	8025d22 <_vfiprintf_r+0x2a>
 8025d1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8025d1e:	f7fd fc7c 	bl	802361a <__retarget_lock_acquire_recursive>
 8025d22:	89ab      	ldrh	r3, [r5, #12]
 8025d24:	071b      	lsls	r3, r3, #28
 8025d26:	d501      	bpl.n	8025d2c <_vfiprintf_r+0x34>
 8025d28:	692b      	ldr	r3, [r5, #16]
 8025d2a:	b99b      	cbnz	r3, 8025d54 <_vfiprintf_r+0x5c>
 8025d2c:	4629      	mov	r1, r5
 8025d2e:	4630      	mov	r0, r6
 8025d30:	f7fd fb7e 	bl	8023430 <__swsetup_r>
 8025d34:	b170      	cbz	r0, 8025d54 <_vfiprintf_r+0x5c>
 8025d36:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8025d38:	07dc      	lsls	r4, r3, #31
 8025d3a:	d504      	bpl.n	8025d46 <_vfiprintf_r+0x4e>
 8025d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8025d40:	b01d      	add	sp, #116	@ 0x74
 8025d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025d46:	89ab      	ldrh	r3, [r5, #12]
 8025d48:	0598      	lsls	r0, r3, #22
 8025d4a:	d4f7      	bmi.n	8025d3c <_vfiprintf_r+0x44>
 8025d4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8025d4e:	f7fd fc65 	bl	802361c <__retarget_lock_release_recursive>
 8025d52:	e7f3      	b.n	8025d3c <_vfiprintf_r+0x44>
 8025d54:	2300      	movs	r3, #0
 8025d56:	9309      	str	r3, [sp, #36]	@ 0x24
 8025d58:	2320      	movs	r3, #32
 8025d5a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8025d5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8025d62:	2330      	movs	r3, #48	@ 0x30
 8025d64:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8025f14 <_vfiprintf_r+0x21c>
 8025d68:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8025d6c:	f04f 0901 	mov.w	r9, #1
 8025d70:	4623      	mov	r3, r4
 8025d72:	469a      	mov	sl, r3
 8025d74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8025d78:	b10a      	cbz	r2, 8025d7e <_vfiprintf_r+0x86>
 8025d7a:	2a25      	cmp	r2, #37	@ 0x25
 8025d7c:	d1f9      	bne.n	8025d72 <_vfiprintf_r+0x7a>
 8025d7e:	ebba 0b04 	subs.w	fp, sl, r4
 8025d82:	d00b      	beq.n	8025d9c <_vfiprintf_r+0xa4>
 8025d84:	465b      	mov	r3, fp
 8025d86:	4622      	mov	r2, r4
 8025d88:	4629      	mov	r1, r5
 8025d8a:	4630      	mov	r0, r6
 8025d8c:	f7ff ffa1 	bl	8025cd2 <__sfputs_r>
 8025d90:	3001      	adds	r0, #1
 8025d92:	f000 80a7 	beq.w	8025ee4 <_vfiprintf_r+0x1ec>
 8025d96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025d98:	445a      	add	r2, fp
 8025d9a:	9209      	str	r2, [sp, #36]	@ 0x24
 8025d9c:	f89a 3000 	ldrb.w	r3, [sl]
 8025da0:	2b00      	cmp	r3, #0
 8025da2:	f000 809f 	beq.w	8025ee4 <_vfiprintf_r+0x1ec>
 8025da6:	2300      	movs	r3, #0
 8025da8:	f04f 32ff 	mov.w	r2, #4294967295
 8025dac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025db0:	f10a 0a01 	add.w	sl, sl, #1
 8025db4:	9304      	str	r3, [sp, #16]
 8025db6:	9307      	str	r3, [sp, #28]
 8025db8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8025dbc:	931a      	str	r3, [sp, #104]	@ 0x68
 8025dbe:	4654      	mov	r4, sl
 8025dc0:	2205      	movs	r2, #5
 8025dc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025dc6:	4853      	ldr	r0, [pc, #332]	@ (8025f14 <_vfiprintf_r+0x21c>)
 8025dc8:	f7f3 fd02 	bl	80197d0 <memchr>
 8025dcc:	9a04      	ldr	r2, [sp, #16]
 8025dce:	b9d8      	cbnz	r0, 8025e08 <_vfiprintf_r+0x110>
 8025dd0:	06d1      	lsls	r1, r2, #27
 8025dd2:	bf44      	itt	mi
 8025dd4:	2320      	movmi	r3, #32
 8025dd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8025dda:	0713      	lsls	r3, r2, #28
 8025ddc:	bf44      	itt	mi
 8025dde:	232b      	movmi	r3, #43	@ 0x2b
 8025de0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8025de4:	f89a 3000 	ldrb.w	r3, [sl]
 8025de8:	2b2a      	cmp	r3, #42	@ 0x2a
 8025dea:	d015      	beq.n	8025e18 <_vfiprintf_r+0x120>
 8025dec:	9a07      	ldr	r2, [sp, #28]
 8025dee:	4654      	mov	r4, sl
 8025df0:	2000      	movs	r0, #0
 8025df2:	f04f 0c0a 	mov.w	ip, #10
 8025df6:	4621      	mov	r1, r4
 8025df8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8025dfc:	3b30      	subs	r3, #48	@ 0x30
 8025dfe:	2b09      	cmp	r3, #9
 8025e00:	d94b      	bls.n	8025e9a <_vfiprintf_r+0x1a2>
 8025e02:	b1b0      	cbz	r0, 8025e32 <_vfiprintf_r+0x13a>
 8025e04:	9207      	str	r2, [sp, #28]
 8025e06:	e014      	b.n	8025e32 <_vfiprintf_r+0x13a>
 8025e08:	eba0 0308 	sub.w	r3, r0, r8
 8025e0c:	fa09 f303 	lsl.w	r3, r9, r3
 8025e10:	4313      	orrs	r3, r2
 8025e12:	9304      	str	r3, [sp, #16]
 8025e14:	46a2      	mov	sl, r4
 8025e16:	e7d2      	b.n	8025dbe <_vfiprintf_r+0xc6>
 8025e18:	9b03      	ldr	r3, [sp, #12]
 8025e1a:	1d19      	adds	r1, r3, #4
 8025e1c:	681b      	ldr	r3, [r3, #0]
 8025e1e:	9103      	str	r1, [sp, #12]
 8025e20:	2b00      	cmp	r3, #0
 8025e22:	bfbb      	ittet	lt
 8025e24:	425b      	neglt	r3, r3
 8025e26:	f042 0202 	orrlt.w	r2, r2, #2
 8025e2a:	9307      	strge	r3, [sp, #28]
 8025e2c:	9307      	strlt	r3, [sp, #28]
 8025e2e:	bfb8      	it	lt
 8025e30:	9204      	strlt	r2, [sp, #16]
 8025e32:	7823      	ldrb	r3, [r4, #0]
 8025e34:	2b2e      	cmp	r3, #46	@ 0x2e
 8025e36:	d10a      	bne.n	8025e4e <_vfiprintf_r+0x156>
 8025e38:	7863      	ldrb	r3, [r4, #1]
 8025e3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8025e3c:	d132      	bne.n	8025ea4 <_vfiprintf_r+0x1ac>
 8025e3e:	9b03      	ldr	r3, [sp, #12]
 8025e40:	1d1a      	adds	r2, r3, #4
 8025e42:	681b      	ldr	r3, [r3, #0]
 8025e44:	9203      	str	r2, [sp, #12]
 8025e46:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8025e4a:	3402      	adds	r4, #2
 8025e4c:	9305      	str	r3, [sp, #20]
 8025e4e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8025f24 <_vfiprintf_r+0x22c>
 8025e52:	7821      	ldrb	r1, [r4, #0]
 8025e54:	2203      	movs	r2, #3
 8025e56:	4650      	mov	r0, sl
 8025e58:	f7f3 fcba 	bl	80197d0 <memchr>
 8025e5c:	b138      	cbz	r0, 8025e6e <_vfiprintf_r+0x176>
 8025e5e:	9b04      	ldr	r3, [sp, #16]
 8025e60:	eba0 000a 	sub.w	r0, r0, sl
 8025e64:	2240      	movs	r2, #64	@ 0x40
 8025e66:	4082      	lsls	r2, r0
 8025e68:	4313      	orrs	r3, r2
 8025e6a:	3401      	adds	r4, #1
 8025e6c:	9304      	str	r3, [sp, #16]
 8025e6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025e72:	4829      	ldr	r0, [pc, #164]	@ (8025f18 <_vfiprintf_r+0x220>)
 8025e74:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8025e78:	2206      	movs	r2, #6
 8025e7a:	f7f3 fca9 	bl	80197d0 <memchr>
 8025e7e:	2800      	cmp	r0, #0
 8025e80:	d03f      	beq.n	8025f02 <_vfiprintf_r+0x20a>
 8025e82:	4b26      	ldr	r3, [pc, #152]	@ (8025f1c <_vfiprintf_r+0x224>)
 8025e84:	bb1b      	cbnz	r3, 8025ece <_vfiprintf_r+0x1d6>
 8025e86:	9b03      	ldr	r3, [sp, #12]
 8025e88:	3307      	adds	r3, #7
 8025e8a:	f023 0307 	bic.w	r3, r3, #7
 8025e8e:	3308      	adds	r3, #8
 8025e90:	9303      	str	r3, [sp, #12]
 8025e92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025e94:	443b      	add	r3, r7
 8025e96:	9309      	str	r3, [sp, #36]	@ 0x24
 8025e98:	e76a      	b.n	8025d70 <_vfiprintf_r+0x78>
 8025e9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8025e9e:	460c      	mov	r4, r1
 8025ea0:	2001      	movs	r0, #1
 8025ea2:	e7a8      	b.n	8025df6 <_vfiprintf_r+0xfe>
 8025ea4:	2300      	movs	r3, #0
 8025ea6:	3401      	adds	r4, #1
 8025ea8:	9305      	str	r3, [sp, #20]
 8025eaa:	4619      	mov	r1, r3
 8025eac:	f04f 0c0a 	mov.w	ip, #10
 8025eb0:	4620      	mov	r0, r4
 8025eb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025eb6:	3a30      	subs	r2, #48	@ 0x30
 8025eb8:	2a09      	cmp	r2, #9
 8025eba:	d903      	bls.n	8025ec4 <_vfiprintf_r+0x1cc>
 8025ebc:	2b00      	cmp	r3, #0
 8025ebe:	d0c6      	beq.n	8025e4e <_vfiprintf_r+0x156>
 8025ec0:	9105      	str	r1, [sp, #20]
 8025ec2:	e7c4      	b.n	8025e4e <_vfiprintf_r+0x156>
 8025ec4:	fb0c 2101 	mla	r1, ip, r1, r2
 8025ec8:	4604      	mov	r4, r0
 8025eca:	2301      	movs	r3, #1
 8025ecc:	e7f0      	b.n	8025eb0 <_vfiprintf_r+0x1b8>
 8025ece:	ab03      	add	r3, sp, #12
 8025ed0:	9300      	str	r3, [sp, #0]
 8025ed2:	462a      	mov	r2, r5
 8025ed4:	4b12      	ldr	r3, [pc, #72]	@ (8025f20 <_vfiprintf_r+0x228>)
 8025ed6:	a904      	add	r1, sp, #16
 8025ed8:	4630      	mov	r0, r6
 8025eda:	f7fc fb09 	bl	80224f0 <_printf_float>
 8025ede:	4607      	mov	r7, r0
 8025ee0:	1c78      	adds	r0, r7, #1
 8025ee2:	d1d6      	bne.n	8025e92 <_vfiprintf_r+0x19a>
 8025ee4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8025ee6:	07d9      	lsls	r1, r3, #31
 8025ee8:	d405      	bmi.n	8025ef6 <_vfiprintf_r+0x1fe>
 8025eea:	89ab      	ldrh	r3, [r5, #12]
 8025eec:	059a      	lsls	r2, r3, #22
 8025eee:	d402      	bmi.n	8025ef6 <_vfiprintf_r+0x1fe>
 8025ef0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8025ef2:	f7fd fb93 	bl	802361c <__retarget_lock_release_recursive>
 8025ef6:	89ab      	ldrh	r3, [r5, #12]
 8025ef8:	065b      	lsls	r3, r3, #25
 8025efa:	f53f af1f 	bmi.w	8025d3c <_vfiprintf_r+0x44>
 8025efe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025f00:	e71e      	b.n	8025d40 <_vfiprintf_r+0x48>
 8025f02:	ab03      	add	r3, sp, #12
 8025f04:	9300      	str	r3, [sp, #0]
 8025f06:	462a      	mov	r2, r5
 8025f08:	4b05      	ldr	r3, [pc, #20]	@ (8025f20 <_vfiprintf_r+0x228>)
 8025f0a:	a904      	add	r1, sp, #16
 8025f0c:	4630      	mov	r0, r6
 8025f0e:	f7fc fd87 	bl	8022a20 <_printf_i>
 8025f12:	e7e4      	b.n	8025ede <_vfiprintf_r+0x1e6>
 8025f14:	080449e9 	.word	0x080449e9
 8025f18:	080449f3 	.word	0x080449f3
 8025f1c:	080224f1 	.word	0x080224f1
 8025f20:	08025cd3 	.word	0x08025cd3
 8025f24:	080449ef 	.word	0x080449ef

08025f28 <__sflush_r>:
 8025f28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8025f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025f30:	0716      	lsls	r6, r2, #28
 8025f32:	4605      	mov	r5, r0
 8025f34:	460c      	mov	r4, r1
 8025f36:	d454      	bmi.n	8025fe2 <__sflush_r+0xba>
 8025f38:	684b      	ldr	r3, [r1, #4]
 8025f3a:	2b00      	cmp	r3, #0
 8025f3c:	dc02      	bgt.n	8025f44 <__sflush_r+0x1c>
 8025f3e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8025f40:	2b00      	cmp	r3, #0
 8025f42:	dd48      	ble.n	8025fd6 <__sflush_r+0xae>
 8025f44:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8025f46:	2e00      	cmp	r6, #0
 8025f48:	d045      	beq.n	8025fd6 <__sflush_r+0xae>
 8025f4a:	2300      	movs	r3, #0
 8025f4c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8025f50:	682f      	ldr	r7, [r5, #0]
 8025f52:	6a21      	ldr	r1, [r4, #32]
 8025f54:	602b      	str	r3, [r5, #0]
 8025f56:	d030      	beq.n	8025fba <__sflush_r+0x92>
 8025f58:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8025f5a:	89a3      	ldrh	r3, [r4, #12]
 8025f5c:	0759      	lsls	r1, r3, #29
 8025f5e:	d505      	bpl.n	8025f6c <__sflush_r+0x44>
 8025f60:	6863      	ldr	r3, [r4, #4]
 8025f62:	1ad2      	subs	r2, r2, r3
 8025f64:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8025f66:	b10b      	cbz	r3, 8025f6c <__sflush_r+0x44>
 8025f68:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8025f6a:	1ad2      	subs	r2, r2, r3
 8025f6c:	2300      	movs	r3, #0
 8025f6e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8025f70:	6a21      	ldr	r1, [r4, #32]
 8025f72:	4628      	mov	r0, r5
 8025f74:	47b0      	blx	r6
 8025f76:	1c43      	adds	r3, r0, #1
 8025f78:	89a3      	ldrh	r3, [r4, #12]
 8025f7a:	d106      	bne.n	8025f8a <__sflush_r+0x62>
 8025f7c:	6829      	ldr	r1, [r5, #0]
 8025f7e:	291d      	cmp	r1, #29
 8025f80:	d82b      	bhi.n	8025fda <__sflush_r+0xb2>
 8025f82:	4a2a      	ldr	r2, [pc, #168]	@ (802602c <__sflush_r+0x104>)
 8025f84:	410a      	asrs	r2, r1
 8025f86:	07d6      	lsls	r6, r2, #31
 8025f88:	d427      	bmi.n	8025fda <__sflush_r+0xb2>
 8025f8a:	2200      	movs	r2, #0
 8025f8c:	6062      	str	r2, [r4, #4]
 8025f8e:	04d9      	lsls	r1, r3, #19
 8025f90:	6922      	ldr	r2, [r4, #16]
 8025f92:	6022      	str	r2, [r4, #0]
 8025f94:	d504      	bpl.n	8025fa0 <__sflush_r+0x78>
 8025f96:	1c42      	adds	r2, r0, #1
 8025f98:	d101      	bne.n	8025f9e <__sflush_r+0x76>
 8025f9a:	682b      	ldr	r3, [r5, #0]
 8025f9c:	b903      	cbnz	r3, 8025fa0 <__sflush_r+0x78>
 8025f9e:	6560      	str	r0, [r4, #84]	@ 0x54
 8025fa0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8025fa2:	602f      	str	r7, [r5, #0]
 8025fa4:	b1b9      	cbz	r1, 8025fd6 <__sflush_r+0xae>
 8025fa6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8025faa:	4299      	cmp	r1, r3
 8025fac:	d002      	beq.n	8025fb4 <__sflush_r+0x8c>
 8025fae:	4628      	mov	r0, r5
 8025fb0:	f7fe f996 	bl	80242e0 <_free_r>
 8025fb4:	2300      	movs	r3, #0
 8025fb6:	6363      	str	r3, [r4, #52]	@ 0x34
 8025fb8:	e00d      	b.n	8025fd6 <__sflush_r+0xae>
 8025fba:	2301      	movs	r3, #1
 8025fbc:	4628      	mov	r0, r5
 8025fbe:	47b0      	blx	r6
 8025fc0:	4602      	mov	r2, r0
 8025fc2:	1c50      	adds	r0, r2, #1
 8025fc4:	d1c9      	bne.n	8025f5a <__sflush_r+0x32>
 8025fc6:	682b      	ldr	r3, [r5, #0]
 8025fc8:	2b00      	cmp	r3, #0
 8025fca:	d0c6      	beq.n	8025f5a <__sflush_r+0x32>
 8025fcc:	2b1d      	cmp	r3, #29
 8025fce:	d001      	beq.n	8025fd4 <__sflush_r+0xac>
 8025fd0:	2b16      	cmp	r3, #22
 8025fd2:	d11e      	bne.n	8026012 <__sflush_r+0xea>
 8025fd4:	602f      	str	r7, [r5, #0]
 8025fd6:	2000      	movs	r0, #0
 8025fd8:	e022      	b.n	8026020 <__sflush_r+0xf8>
 8025fda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8025fde:	b21b      	sxth	r3, r3
 8025fe0:	e01b      	b.n	802601a <__sflush_r+0xf2>
 8025fe2:	690f      	ldr	r7, [r1, #16]
 8025fe4:	2f00      	cmp	r7, #0
 8025fe6:	d0f6      	beq.n	8025fd6 <__sflush_r+0xae>
 8025fe8:	0793      	lsls	r3, r2, #30
 8025fea:	680e      	ldr	r6, [r1, #0]
 8025fec:	bf08      	it	eq
 8025fee:	694b      	ldreq	r3, [r1, #20]
 8025ff0:	600f      	str	r7, [r1, #0]
 8025ff2:	bf18      	it	ne
 8025ff4:	2300      	movne	r3, #0
 8025ff6:	eba6 0807 	sub.w	r8, r6, r7
 8025ffa:	608b      	str	r3, [r1, #8]
 8025ffc:	f1b8 0f00 	cmp.w	r8, #0
 8026000:	dde9      	ble.n	8025fd6 <__sflush_r+0xae>
 8026002:	6a21      	ldr	r1, [r4, #32]
 8026004:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8026006:	4643      	mov	r3, r8
 8026008:	463a      	mov	r2, r7
 802600a:	4628      	mov	r0, r5
 802600c:	47b0      	blx	r6
 802600e:	2800      	cmp	r0, #0
 8026010:	dc08      	bgt.n	8026024 <__sflush_r+0xfc>
 8026012:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026016:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802601a:	81a3      	strh	r3, [r4, #12]
 802601c:	f04f 30ff 	mov.w	r0, #4294967295
 8026020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026024:	4407      	add	r7, r0
 8026026:	eba8 0800 	sub.w	r8, r8, r0
 802602a:	e7e7      	b.n	8025ffc <__sflush_r+0xd4>
 802602c:	dfbffffe 	.word	0xdfbffffe

08026030 <_fflush_r>:
 8026030:	b538      	push	{r3, r4, r5, lr}
 8026032:	690b      	ldr	r3, [r1, #16]
 8026034:	4605      	mov	r5, r0
 8026036:	460c      	mov	r4, r1
 8026038:	b913      	cbnz	r3, 8026040 <_fflush_r+0x10>
 802603a:	2500      	movs	r5, #0
 802603c:	4628      	mov	r0, r5
 802603e:	bd38      	pop	{r3, r4, r5, pc}
 8026040:	b118      	cbz	r0, 802604a <_fflush_r+0x1a>
 8026042:	6a03      	ldr	r3, [r0, #32]
 8026044:	b90b      	cbnz	r3, 802604a <_fflush_r+0x1a>
 8026046:	f7fd f8ab 	bl	80231a0 <__sinit>
 802604a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802604e:	2b00      	cmp	r3, #0
 8026050:	d0f3      	beq.n	802603a <_fflush_r+0xa>
 8026052:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8026054:	07d0      	lsls	r0, r2, #31
 8026056:	d404      	bmi.n	8026062 <_fflush_r+0x32>
 8026058:	0599      	lsls	r1, r3, #22
 802605a:	d402      	bmi.n	8026062 <_fflush_r+0x32>
 802605c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802605e:	f7fd fadc 	bl	802361a <__retarget_lock_acquire_recursive>
 8026062:	4628      	mov	r0, r5
 8026064:	4621      	mov	r1, r4
 8026066:	f7ff ff5f 	bl	8025f28 <__sflush_r>
 802606a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802606c:	07da      	lsls	r2, r3, #31
 802606e:	4605      	mov	r5, r0
 8026070:	d4e4      	bmi.n	802603c <_fflush_r+0xc>
 8026072:	89a3      	ldrh	r3, [r4, #12]
 8026074:	059b      	lsls	r3, r3, #22
 8026076:	d4e1      	bmi.n	802603c <_fflush_r+0xc>
 8026078:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802607a:	f7fd facf 	bl	802361c <__retarget_lock_release_recursive>
 802607e:	e7dd      	b.n	802603c <_fflush_r+0xc>

08026080 <__swhatbuf_r>:
 8026080:	b570      	push	{r4, r5, r6, lr}
 8026082:	460c      	mov	r4, r1
 8026084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026088:	2900      	cmp	r1, #0
 802608a:	b096      	sub	sp, #88	@ 0x58
 802608c:	4615      	mov	r5, r2
 802608e:	461e      	mov	r6, r3
 8026090:	da0d      	bge.n	80260ae <__swhatbuf_r+0x2e>
 8026092:	89a3      	ldrh	r3, [r4, #12]
 8026094:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8026098:	f04f 0100 	mov.w	r1, #0
 802609c:	bf14      	ite	ne
 802609e:	2340      	movne	r3, #64	@ 0x40
 80260a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80260a4:	2000      	movs	r0, #0
 80260a6:	6031      	str	r1, [r6, #0]
 80260a8:	602b      	str	r3, [r5, #0]
 80260aa:	b016      	add	sp, #88	@ 0x58
 80260ac:	bd70      	pop	{r4, r5, r6, pc}
 80260ae:	466a      	mov	r2, sp
 80260b0:	f000 f862 	bl	8026178 <_fstat_r>
 80260b4:	2800      	cmp	r0, #0
 80260b6:	dbec      	blt.n	8026092 <__swhatbuf_r+0x12>
 80260b8:	9901      	ldr	r1, [sp, #4]
 80260ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80260be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80260c2:	4259      	negs	r1, r3
 80260c4:	4159      	adcs	r1, r3
 80260c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80260ca:	e7eb      	b.n	80260a4 <__swhatbuf_r+0x24>

080260cc <__smakebuf_r>:
 80260cc:	898b      	ldrh	r3, [r1, #12]
 80260ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80260d0:	079d      	lsls	r5, r3, #30
 80260d2:	4606      	mov	r6, r0
 80260d4:	460c      	mov	r4, r1
 80260d6:	d507      	bpl.n	80260e8 <__smakebuf_r+0x1c>
 80260d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80260dc:	6023      	str	r3, [r4, #0]
 80260de:	6123      	str	r3, [r4, #16]
 80260e0:	2301      	movs	r3, #1
 80260e2:	6163      	str	r3, [r4, #20]
 80260e4:	b003      	add	sp, #12
 80260e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80260e8:	ab01      	add	r3, sp, #4
 80260ea:	466a      	mov	r2, sp
 80260ec:	f7ff ffc8 	bl	8026080 <__swhatbuf_r>
 80260f0:	9f00      	ldr	r7, [sp, #0]
 80260f2:	4605      	mov	r5, r0
 80260f4:	4639      	mov	r1, r7
 80260f6:	4630      	mov	r0, r6
 80260f8:	f7fc f8a0 	bl	802223c <_malloc_r>
 80260fc:	b948      	cbnz	r0, 8026112 <__smakebuf_r+0x46>
 80260fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026102:	059a      	lsls	r2, r3, #22
 8026104:	d4ee      	bmi.n	80260e4 <__smakebuf_r+0x18>
 8026106:	f023 0303 	bic.w	r3, r3, #3
 802610a:	f043 0302 	orr.w	r3, r3, #2
 802610e:	81a3      	strh	r3, [r4, #12]
 8026110:	e7e2      	b.n	80260d8 <__smakebuf_r+0xc>
 8026112:	89a3      	ldrh	r3, [r4, #12]
 8026114:	6020      	str	r0, [r4, #0]
 8026116:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802611a:	81a3      	strh	r3, [r4, #12]
 802611c:	9b01      	ldr	r3, [sp, #4]
 802611e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8026122:	b15b      	cbz	r3, 802613c <__smakebuf_r+0x70>
 8026124:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026128:	4630      	mov	r0, r6
 802612a:	f000 f837 	bl	802619c <_isatty_r>
 802612e:	b128      	cbz	r0, 802613c <__smakebuf_r+0x70>
 8026130:	89a3      	ldrh	r3, [r4, #12]
 8026132:	f023 0303 	bic.w	r3, r3, #3
 8026136:	f043 0301 	orr.w	r3, r3, #1
 802613a:	81a3      	strh	r3, [r4, #12]
 802613c:	89a3      	ldrh	r3, [r4, #12]
 802613e:	431d      	orrs	r5, r3
 8026140:	81a5      	strh	r5, [r4, #12]
 8026142:	e7cf      	b.n	80260e4 <__smakebuf_r+0x18>

08026144 <memmove>:
 8026144:	4288      	cmp	r0, r1
 8026146:	b510      	push	{r4, lr}
 8026148:	eb01 0402 	add.w	r4, r1, r2
 802614c:	d902      	bls.n	8026154 <memmove+0x10>
 802614e:	4284      	cmp	r4, r0
 8026150:	4623      	mov	r3, r4
 8026152:	d807      	bhi.n	8026164 <memmove+0x20>
 8026154:	1e43      	subs	r3, r0, #1
 8026156:	42a1      	cmp	r1, r4
 8026158:	d008      	beq.n	802616c <memmove+0x28>
 802615a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802615e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8026162:	e7f8      	b.n	8026156 <memmove+0x12>
 8026164:	4402      	add	r2, r0
 8026166:	4601      	mov	r1, r0
 8026168:	428a      	cmp	r2, r1
 802616a:	d100      	bne.n	802616e <memmove+0x2a>
 802616c:	bd10      	pop	{r4, pc}
 802616e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8026172:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8026176:	e7f7      	b.n	8026168 <memmove+0x24>

08026178 <_fstat_r>:
 8026178:	b538      	push	{r3, r4, r5, lr}
 802617a:	4d07      	ldr	r5, [pc, #28]	@ (8026198 <_fstat_r+0x20>)
 802617c:	2300      	movs	r3, #0
 802617e:	4604      	mov	r4, r0
 8026180:	4608      	mov	r0, r1
 8026182:	4611      	mov	r1, r2
 8026184:	602b      	str	r3, [r5, #0]
 8026186:	f7db ff5e 	bl	8002046 <_fstat>
 802618a:	1c43      	adds	r3, r0, #1
 802618c:	d102      	bne.n	8026194 <_fstat_r+0x1c>
 802618e:	682b      	ldr	r3, [r5, #0]
 8026190:	b103      	cbz	r3, 8026194 <_fstat_r+0x1c>
 8026192:	6023      	str	r3, [r4, #0]
 8026194:	bd38      	pop	{r3, r4, r5, pc}
 8026196:	bf00      	nop
 8026198:	20009e80 	.word	0x20009e80

0802619c <_isatty_r>:
 802619c:	b538      	push	{r3, r4, r5, lr}
 802619e:	4d06      	ldr	r5, [pc, #24]	@ (80261b8 <_isatty_r+0x1c>)
 80261a0:	2300      	movs	r3, #0
 80261a2:	4604      	mov	r4, r0
 80261a4:	4608      	mov	r0, r1
 80261a6:	602b      	str	r3, [r5, #0]
 80261a8:	f7db ff5d 	bl	8002066 <_isatty>
 80261ac:	1c43      	adds	r3, r0, #1
 80261ae:	d102      	bne.n	80261b6 <_isatty_r+0x1a>
 80261b0:	682b      	ldr	r3, [r5, #0]
 80261b2:	b103      	cbz	r3, 80261b6 <_isatty_r+0x1a>
 80261b4:	6023      	str	r3, [r4, #0]
 80261b6:	bd38      	pop	{r3, r4, r5, pc}
 80261b8:	20009e80 	.word	0x20009e80
 80261bc:	00000000 	.word	0x00000000

080261c0 <nan>:
 80261c0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80261c8 <nan+0x8>
 80261c4:	4770      	bx	lr
 80261c6:	bf00      	nop
 80261c8:	00000000 	.word	0x00000000
 80261cc:	7ff80000 	.word	0x7ff80000

080261d0 <__assert_func>:
 80261d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80261d2:	4614      	mov	r4, r2
 80261d4:	461a      	mov	r2, r3
 80261d6:	4b09      	ldr	r3, [pc, #36]	@ (80261fc <__assert_func+0x2c>)
 80261d8:	681b      	ldr	r3, [r3, #0]
 80261da:	4605      	mov	r5, r0
 80261dc:	68d8      	ldr	r0, [r3, #12]
 80261de:	b954      	cbnz	r4, 80261f6 <__assert_func+0x26>
 80261e0:	4b07      	ldr	r3, [pc, #28]	@ (8026200 <__assert_func+0x30>)
 80261e2:	461c      	mov	r4, r3
 80261e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80261e8:	9100      	str	r1, [sp, #0]
 80261ea:	462b      	mov	r3, r5
 80261ec:	4905      	ldr	r1, [pc, #20]	@ (8026204 <__assert_func+0x34>)
 80261ee:	f000 fb79 	bl	80268e4 <fiprintf>
 80261f2:	f000 fb89 	bl	8026908 <abort>
 80261f6:	4b04      	ldr	r3, [pc, #16]	@ (8026208 <__assert_func+0x38>)
 80261f8:	e7f4      	b.n	80261e4 <__assert_func+0x14>
 80261fa:	bf00      	nop
 80261fc:	200007cc 	.word	0x200007cc
 8026200:	08044a3d 	.word	0x08044a3d
 8026204:	08044a0f 	.word	0x08044a0f
 8026208:	08044a02 	.word	0x08044a02

0802620c <_calloc_r>:
 802620c:	b570      	push	{r4, r5, r6, lr}
 802620e:	fba1 5402 	umull	r5, r4, r1, r2
 8026212:	b93c      	cbnz	r4, 8026224 <_calloc_r+0x18>
 8026214:	4629      	mov	r1, r5
 8026216:	f7fc f811 	bl	802223c <_malloc_r>
 802621a:	4606      	mov	r6, r0
 802621c:	b928      	cbnz	r0, 802622a <_calloc_r+0x1e>
 802621e:	2600      	movs	r6, #0
 8026220:	4630      	mov	r0, r6
 8026222:	bd70      	pop	{r4, r5, r6, pc}
 8026224:	220c      	movs	r2, #12
 8026226:	6002      	str	r2, [r0, #0]
 8026228:	e7f9      	b.n	802621e <_calloc_r+0x12>
 802622a:	462a      	mov	r2, r5
 802622c:	4621      	mov	r1, r4
 802622e:	f7fd f955 	bl	80234dc <memset>
 8026232:	e7f5      	b.n	8026220 <_calloc_r+0x14>

08026234 <rshift>:
 8026234:	6903      	ldr	r3, [r0, #16]
 8026236:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 802623a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802623e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8026242:	f100 0414 	add.w	r4, r0, #20
 8026246:	dd45      	ble.n	80262d4 <rshift+0xa0>
 8026248:	f011 011f 	ands.w	r1, r1, #31
 802624c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8026250:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8026254:	d10c      	bne.n	8026270 <rshift+0x3c>
 8026256:	f100 0710 	add.w	r7, r0, #16
 802625a:	4629      	mov	r1, r5
 802625c:	42b1      	cmp	r1, r6
 802625e:	d334      	bcc.n	80262ca <rshift+0x96>
 8026260:	1a9b      	subs	r3, r3, r2
 8026262:	009b      	lsls	r3, r3, #2
 8026264:	1eea      	subs	r2, r5, #3
 8026266:	4296      	cmp	r6, r2
 8026268:	bf38      	it	cc
 802626a:	2300      	movcc	r3, #0
 802626c:	4423      	add	r3, r4
 802626e:	e015      	b.n	802629c <rshift+0x68>
 8026270:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8026274:	f1c1 0820 	rsb	r8, r1, #32
 8026278:	40cf      	lsrs	r7, r1
 802627a:	f105 0e04 	add.w	lr, r5, #4
 802627e:	46a1      	mov	r9, r4
 8026280:	4576      	cmp	r6, lr
 8026282:	46f4      	mov	ip, lr
 8026284:	d815      	bhi.n	80262b2 <rshift+0x7e>
 8026286:	1a9a      	subs	r2, r3, r2
 8026288:	0092      	lsls	r2, r2, #2
 802628a:	3a04      	subs	r2, #4
 802628c:	3501      	adds	r5, #1
 802628e:	42ae      	cmp	r6, r5
 8026290:	bf38      	it	cc
 8026292:	2200      	movcc	r2, #0
 8026294:	18a3      	adds	r3, r4, r2
 8026296:	50a7      	str	r7, [r4, r2]
 8026298:	b107      	cbz	r7, 802629c <rshift+0x68>
 802629a:	3304      	adds	r3, #4
 802629c:	1b1a      	subs	r2, r3, r4
 802629e:	42a3      	cmp	r3, r4
 80262a0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80262a4:	bf08      	it	eq
 80262a6:	2300      	moveq	r3, #0
 80262a8:	6102      	str	r2, [r0, #16]
 80262aa:	bf08      	it	eq
 80262ac:	6143      	streq	r3, [r0, #20]
 80262ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80262b2:	f8dc c000 	ldr.w	ip, [ip]
 80262b6:	fa0c fc08 	lsl.w	ip, ip, r8
 80262ba:	ea4c 0707 	orr.w	r7, ip, r7
 80262be:	f849 7b04 	str.w	r7, [r9], #4
 80262c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80262c6:	40cf      	lsrs	r7, r1
 80262c8:	e7da      	b.n	8026280 <rshift+0x4c>
 80262ca:	f851 cb04 	ldr.w	ip, [r1], #4
 80262ce:	f847 cf04 	str.w	ip, [r7, #4]!
 80262d2:	e7c3      	b.n	802625c <rshift+0x28>
 80262d4:	4623      	mov	r3, r4
 80262d6:	e7e1      	b.n	802629c <rshift+0x68>

080262d8 <__hexdig_fun>:
 80262d8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80262dc:	2b09      	cmp	r3, #9
 80262de:	d802      	bhi.n	80262e6 <__hexdig_fun+0xe>
 80262e0:	3820      	subs	r0, #32
 80262e2:	b2c0      	uxtb	r0, r0
 80262e4:	4770      	bx	lr
 80262e6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80262ea:	2b05      	cmp	r3, #5
 80262ec:	d801      	bhi.n	80262f2 <__hexdig_fun+0x1a>
 80262ee:	3847      	subs	r0, #71	@ 0x47
 80262f0:	e7f7      	b.n	80262e2 <__hexdig_fun+0xa>
 80262f2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80262f6:	2b05      	cmp	r3, #5
 80262f8:	d801      	bhi.n	80262fe <__hexdig_fun+0x26>
 80262fa:	3827      	subs	r0, #39	@ 0x27
 80262fc:	e7f1      	b.n	80262e2 <__hexdig_fun+0xa>
 80262fe:	2000      	movs	r0, #0
 8026300:	4770      	bx	lr
	...

08026304 <__gethex>:
 8026304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026308:	b085      	sub	sp, #20
 802630a:	468a      	mov	sl, r1
 802630c:	9302      	str	r3, [sp, #8]
 802630e:	680b      	ldr	r3, [r1, #0]
 8026310:	9001      	str	r0, [sp, #4]
 8026312:	4690      	mov	r8, r2
 8026314:	1c9c      	adds	r4, r3, #2
 8026316:	46a1      	mov	r9, r4
 8026318:	f814 0b01 	ldrb.w	r0, [r4], #1
 802631c:	2830      	cmp	r0, #48	@ 0x30
 802631e:	d0fa      	beq.n	8026316 <__gethex+0x12>
 8026320:	eba9 0303 	sub.w	r3, r9, r3
 8026324:	f1a3 0b02 	sub.w	fp, r3, #2
 8026328:	f7ff ffd6 	bl	80262d8 <__hexdig_fun>
 802632c:	4605      	mov	r5, r0
 802632e:	2800      	cmp	r0, #0
 8026330:	d168      	bne.n	8026404 <__gethex+0x100>
 8026332:	49a0      	ldr	r1, [pc, #640]	@ (80265b4 <__gethex+0x2b0>)
 8026334:	2201      	movs	r2, #1
 8026336:	4648      	mov	r0, r9
 8026338:	f7fd f8d8 	bl	80234ec <strncmp>
 802633c:	4607      	mov	r7, r0
 802633e:	2800      	cmp	r0, #0
 8026340:	d167      	bne.n	8026412 <__gethex+0x10e>
 8026342:	f899 0001 	ldrb.w	r0, [r9, #1]
 8026346:	4626      	mov	r6, r4
 8026348:	f7ff ffc6 	bl	80262d8 <__hexdig_fun>
 802634c:	2800      	cmp	r0, #0
 802634e:	d062      	beq.n	8026416 <__gethex+0x112>
 8026350:	4623      	mov	r3, r4
 8026352:	7818      	ldrb	r0, [r3, #0]
 8026354:	2830      	cmp	r0, #48	@ 0x30
 8026356:	4699      	mov	r9, r3
 8026358:	f103 0301 	add.w	r3, r3, #1
 802635c:	d0f9      	beq.n	8026352 <__gethex+0x4e>
 802635e:	f7ff ffbb 	bl	80262d8 <__hexdig_fun>
 8026362:	fab0 f580 	clz	r5, r0
 8026366:	096d      	lsrs	r5, r5, #5
 8026368:	f04f 0b01 	mov.w	fp, #1
 802636c:	464a      	mov	r2, r9
 802636e:	4616      	mov	r6, r2
 8026370:	3201      	adds	r2, #1
 8026372:	7830      	ldrb	r0, [r6, #0]
 8026374:	f7ff ffb0 	bl	80262d8 <__hexdig_fun>
 8026378:	2800      	cmp	r0, #0
 802637a:	d1f8      	bne.n	802636e <__gethex+0x6a>
 802637c:	498d      	ldr	r1, [pc, #564]	@ (80265b4 <__gethex+0x2b0>)
 802637e:	2201      	movs	r2, #1
 8026380:	4630      	mov	r0, r6
 8026382:	f7fd f8b3 	bl	80234ec <strncmp>
 8026386:	2800      	cmp	r0, #0
 8026388:	d13f      	bne.n	802640a <__gethex+0x106>
 802638a:	b944      	cbnz	r4, 802639e <__gethex+0x9a>
 802638c:	1c74      	adds	r4, r6, #1
 802638e:	4622      	mov	r2, r4
 8026390:	4616      	mov	r6, r2
 8026392:	3201      	adds	r2, #1
 8026394:	7830      	ldrb	r0, [r6, #0]
 8026396:	f7ff ff9f 	bl	80262d8 <__hexdig_fun>
 802639a:	2800      	cmp	r0, #0
 802639c:	d1f8      	bne.n	8026390 <__gethex+0x8c>
 802639e:	1ba4      	subs	r4, r4, r6
 80263a0:	00a7      	lsls	r7, r4, #2
 80263a2:	7833      	ldrb	r3, [r6, #0]
 80263a4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80263a8:	2b50      	cmp	r3, #80	@ 0x50
 80263aa:	d13e      	bne.n	802642a <__gethex+0x126>
 80263ac:	7873      	ldrb	r3, [r6, #1]
 80263ae:	2b2b      	cmp	r3, #43	@ 0x2b
 80263b0:	d033      	beq.n	802641a <__gethex+0x116>
 80263b2:	2b2d      	cmp	r3, #45	@ 0x2d
 80263b4:	d034      	beq.n	8026420 <__gethex+0x11c>
 80263b6:	1c71      	adds	r1, r6, #1
 80263b8:	2400      	movs	r4, #0
 80263ba:	7808      	ldrb	r0, [r1, #0]
 80263bc:	f7ff ff8c 	bl	80262d8 <__hexdig_fun>
 80263c0:	1e43      	subs	r3, r0, #1
 80263c2:	b2db      	uxtb	r3, r3
 80263c4:	2b18      	cmp	r3, #24
 80263c6:	d830      	bhi.n	802642a <__gethex+0x126>
 80263c8:	f1a0 0210 	sub.w	r2, r0, #16
 80263cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80263d0:	f7ff ff82 	bl	80262d8 <__hexdig_fun>
 80263d4:	f100 3cff 	add.w	ip, r0, #4294967295
 80263d8:	fa5f fc8c 	uxtb.w	ip, ip
 80263dc:	f1bc 0f18 	cmp.w	ip, #24
 80263e0:	f04f 030a 	mov.w	r3, #10
 80263e4:	d91e      	bls.n	8026424 <__gethex+0x120>
 80263e6:	b104      	cbz	r4, 80263ea <__gethex+0xe6>
 80263e8:	4252      	negs	r2, r2
 80263ea:	4417      	add	r7, r2
 80263ec:	f8ca 1000 	str.w	r1, [sl]
 80263f0:	b1ed      	cbz	r5, 802642e <__gethex+0x12a>
 80263f2:	f1bb 0f00 	cmp.w	fp, #0
 80263f6:	bf0c      	ite	eq
 80263f8:	2506      	moveq	r5, #6
 80263fa:	2500      	movne	r5, #0
 80263fc:	4628      	mov	r0, r5
 80263fe:	b005      	add	sp, #20
 8026400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026404:	2500      	movs	r5, #0
 8026406:	462c      	mov	r4, r5
 8026408:	e7b0      	b.n	802636c <__gethex+0x68>
 802640a:	2c00      	cmp	r4, #0
 802640c:	d1c7      	bne.n	802639e <__gethex+0x9a>
 802640e:	4627      	mov	r7, r4
 8026410:	e7c7      	b.n	80263a2 <__gethex+0x9e>
 8026412:	464e      	mov	r6, r9
 8026414:	462f      	mov	r7, r5
 8026416:	2501      	movs	r5, #1
 8026418:	e7c3      	b.n	80263a2 <__gethex+0x9e>
 802641a:	2400      	movs	r4, #0
 802641c:	1cb1      	adds	r1, r6, #2
 802641e:	e7cc      	b.n	80263ba <__gethex+0xb6>
 8026420:	2401      	movs	r4, #1
 8026422:	e7fb      	b.n	802641c <__gethex+0x118>
 8026424:	fb03 0002 	mla	r0, r3, r2, r0
 8026428:	e7ce      	b.n	80263c8 <__gethex+0xc4>
 802642a:	4631      	mov	r1, r6
 802642c:	e7de      	b.n	80263ec <__gethex+0xe8>
 802642e:	eba6 0309 	sub.w	r3, r6, r9
 8026432:	3b01      	subs	r3, #1
 8026434:	4629      	mov	r1, r5
 8026436:	2b07      	cmp	r3, #7
 8026438:	dc0a      	bgt.n	8026450 <__gethex+0x14c>
 802643a:	9801      	ldr	r0, [sp, #4]
 802643c:	f7fd ff9a 	bl	8024374 <_Balloc>
 8026440:	4604      	mov	r4, r0
 8026442:	b940      	cbnz	r0, 8026456 <__gethex+0x152>
 8026444:	4b5c      	ldr	r3, [pc, #368]	@ (80265b8 <__gethex+0x2b4>)
 8026446:	4602      	mov	r2, r0
 8026448:	21e4      	movs	r1, #228	@ 0xe4
 802644a:	485c      	ldr	r0, [pc, #368]	@ (80265bc <__gethex+0x2b8>)
 802644c:	f7ff fec0 	bl	80261d0 <__assert_func>
 8026450:	3101      	adds	r1, #1
 8026452:	105b      	asrs	r3, r3, #1
 8026454:	e7ef      	b.n	8026436 <__gethex+0x132>
 8026456:	f100 0a14 	add.w	sl, r0, #20
 802645a:	2300      	movs	r3, #0
 802645c:	4655      	mov	r5, sl
 802645e:	469b      	mov	fp, r3
 8026460:	45b1      	cmp	r9, r6
 8026462:	d337      	bcc.n	80264d4 <__gethex+0x1d0>
 8026464:	f845 bb04 	str.w	fp, [r5], #4
 8026468:	eba5 050a 	sub.w	r5, r5, sl
 802646c:	10ad      	asrs	r5, r5, #2
 802646e:	6125      	str	r5, [r4, #16]
 8026470:	4658      	mov	r0, fp
 8026472:	f7fe f871 	bl	8024558 <__hi0bits>
 8026476:	016d      	lsls	r5, r5, #5
 8026478:	f8d8 6000 	ldr.w	r6, [r8]
 802647c:	1a2d      	subs	r5, r5, r0
 802647e:	42b5      	cmp	r5, r6
 8026480:	dd54      	ble.n	802652c <__gethex+0x228>
 8026482:	1bad      	subs	r5, r5, r6
 8026484:	4629      	mov	r1, r5
 8026486:	4620      	mov	r0, r4
 8026488:	f7fe fc05 	bl	8024c96 <__any_on>
 802648c:	4681      	mov	r9, r0
 802648e:	b178      	cbz	r0, 80264b0 <__gethex+0x1ac>
 8026490:	1e6b      	subs	r3, r5, #1
 8026492:	1159      	asrs	r1, r3, #5
 8026494:	f003 021f 	and.w	r2, r3, #31
 8026498:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 802649c:	f04f 0901 	mov.w	r9, #1
 80264a0:	fa09 f202 	lsl.w	r2, r9, r2
 80264a4:	420a      	tst	r2, r1
 80264a6:	d003      	beq.n	80264b0 <__gethex+0x1ac>
 80264a8:	454b      	cmp	r3, r9
 80264aa:	dc36      	bgt.n	802651a <__gethex+0x216>
 80264ac:	f04f 0902 	mov.w	r9, #2
 80264b0:	4629      	mov	r1, r5
 80264b2:	4620      	mov	r0, r4
 80264b4:	f7ff febe 	bl	8026234 <rshift>
 80264b8:	442f      	add	r7, r5
 80264ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80264be:	42bb      	cmp	r3, r7
 80264c0:	da42      	bge.n	8026548 <__gethex+0x244>
 80264c2:	9801      	ldr	r0, [sp, #4]
 80264c4:	4621      	mov	r1, r4
 80264c6:	f7fd ff95 	bl	80243f4 <_Bfree>
 80264ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80264cc:	2300      	movs	r3, #0
 80264ce:	6013      	str	r3, [r2, #0]
 80264d0:	25a3      	movs	r5, #163	@ 0xa3
 80264d2:	e793      	b.n	80263fc <__gethex+0xf8>
 80264d4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80264d8:	2a2e      	cmp	r2, #46	@ 0x2e
 80264da:	d012      	beq.n	8026502 <__gethex+0x1fe>
 80264dc:	2b20      	cmp	r3, #32
 80264de:	d104      	bne.n	80264ea <__gethex+0x1e6>
 80264e0:	f845 bb04 	str.w	fp, [r5], #4
 80264e4:	f04f 0b00 	mov.w	fp, #0
 80264e8:	465b      	mov	r3, fp
 80264ea:	7830      	ldrb	r0, [r6, #0]
 80264ec:	9303      	str	r3, [sp, #12]
 80264ee:	f7ff fef3 	bl	80262d8 <__hexdig_fun>
 80264f2:	9b03      	ldr	r3, [sp, #12]
 80264f4:	f000 000f 	and.w	r0, r0, #15
 80264f8:	4098      	lsls	r0, r3
 80264fa:	ea4b 0b00 	orr.w	fp, fp, r0
 80264fe:	3304      	adds	r3, #4
 8026500:	e7ae      	b.n	8026460 <__gethex+0x15c>
 8026502:	45b1      	cmp	r9, r6
 8026504:	d8ea      	bhi.n	80264dc <__gethex+0x1d8>
 8026506:	492b      	ldr	r1, [pc, #172]	@ (80265b4 <__gethex+0x2b0>)
 8026508:	9303      	str	r3, [sp, #12]
 802650a:	2201      	movs	r2, #1
 802650c:	4630      	mov	r0, r6
 802650e:	f7fc ffed 	bl	80234ec <strncmp>
 8026512:	9b03      	ldr	r3, [sp, #12]
 8026514:	2800      	cmp	r0, #0
 8026516:	d1e1      	bne.n	80264dc <__gethex+0x1d8>
 8026518:	e7a2      	b.n	8026460 <__gethex+0x15c>
 802651a:	1ea9      	subs	r1, r5, #2
 802651c:	4620      	mov	r0, r4
 802651e:	f7fe fbba 	bl	8024c96 <__any_on>
 8026522:	2800      	cmp	r0, #0
 8026524:	d0c2      	beq.n	80264ac <__gethex+0x1a8>
 8026526:	f04f 0903 	mov.w	r9, #3
 802652a:	e7c1      	b.n	80264b0 <__gethex+0x1ac>
 802652c:	da09      	bge.n	8026542 <__gethex+0x23e>
 802652e:	1b75      	subs	r5, r6, r5
 8026530:	4621      	mov	r1, r4
 8026532:	9801      	ldr	r0, [sp, #4]
 8026534:	462a      	mov	r2, r5
 8026536:	f7fe f975 	bl	8024824 <__lshift>
 802653a:	1b7f      	subs	r7, r7, r5
 802653c:	4604      	mov	r4, r0
 802653e:	f100 0a14 	add.w	sl, r0, #20
 8026542:	f04f 0900 	mov.w	r9, #0
 8026546:	e7b8      	b.n	80264ba <__gethex+0x1b6>
 8026548:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802654c:	42bd      	cmp	r5, r7
 802654e:	dd6f      	ble.n	8026630 <__gethex+0x32c>
 8026550:	1bed      	subs	r5, r5, r7
 8026552:	42ae      	cmp	r6, r5
 8026554:	dc34      	bgt.n	80265c0 <__gethex+0x2bc>
 8026556:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802655a:	2b02      	cmp	r3, #2
 802655c:	d022      	beq.n	80265a4 <__gethex+0x2a0>
 802655e:	2b03      	cmp	r3, #3
 8026560:	d024      	beq.n	80265ac <__gethex+0x2a8>
 8026562:	2b01      	cmp	r3, #1
 8026564:	d115      	bne.n	8026592 <__gethex+0x28e>
 8026566:	42ae      	cmp	r6, r5
 8026568:	d113      	bne.n	8026592 <__gethex+0x28e>
 802656a:	2e01      	cmp	r6, #1
 802656c:	d10b      	bne.n	8026586 <__gethex+0x282>
 802656e:	9a02      	ldr	r2, [sp, #8]
 8026570:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8026574:	6013      	str	r3, [r2, #0]
 8026576:	2301      	movs	r3, #1
 8026578:	6123      	str	r3, [r4, #16]
 802657a:	f8ca 3000 	str.w	r3, [sl]
 802657e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026580:	2562      	movs	r5, #98	@ 0x62
 8026582:	601c      	str	r4, [r3, #0]
 8026584:	e73a      	b.n	80263fc <__gethex+0xf8>
 8026586:	1e71      	subs	r1, r6, #1
 8026588:	4620      	mov	r0, r4
 802658a:	f7fe fb84 	bl	8024c96 <__any_on>
 802658e:	2800      	cmp	r0, #0
 8026590:	d1ed      	bne.n	802656e <__gethex+0x26a>
 8026592:	9801      	ldr	r0, [sp, #4]
 8026594:	4621      	mov	r1, r4
 8026596:	f7fd ff2d 	bl	80243f4 <_Bfree>
 802659a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802659c:	2300      	movs	r3, #0
 802659e:	6013      	str	r3, [r2, #0]
 80265a0:	2550      	movs	r5, #80	@ 0x50
 80265a2:	e72b      	b.n	80263fc <__gethex+0xf8>
 80265a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80265a6:	2b00      	cmp	r3, #0
 80265a8:	d1f3      	bne.n	8026592 <__gethex+0x28e>
 80265aa:	e7e0      	b.n	802656e <__gethex+0x26a>
 80265ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80265ae:	2b00      	cmp	r3, #0
 80265b0:	d1dd      	bne.n	802656e <__gethex+0x26a>
 80265b2:	e7ee      	b.n	8026592 <__gethex+0x28e>
 80265b4:	08044890 	.word	0x08044890
 80265b8:	08044725 	.word	0x08044725
 80265bc:	08044a3e 	.word	0x08044a3e
 80265c0:	1e6f      	subs	r7, r5, #1
 80265c2:	f1b9 0f00 	cmp.w	r9, #0
 80265c6:	d130      	bne.n	802662a <__gethex+0x326>
 80265c8:	b127      	cbz	r7, 80265d4 <__gethex+0x2d0>
 80265ca:	4639      	mov	r1, r7
 80265cc:	4620      	mov	r0, r4
 80265ce:	f7fe fb62 	bl	8024c96 <__any_on>
 80265d2:	4681      	mov	r9, r0
 80265d4:	117a      	asrs	r2, r7, #5
 80265d6:	2301      	movs	r3, #1
 80265d8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80265dc:	f007 071f 	and.w	r7, r7, #31
 80265e0:	40bb      	lsls	r3, r7
 80265e2:	4213      	tst	r3, r2
 80265e4:	4629      	mov	r1, r5
 80265e6:	4620      	mov	r0, r4
 80265e8:	bf18      	it	ne
 80265ea:	f049 0902 	orrne.w	r9, r9, #2
 80265ee:	f7ff fe21 	bl	8026234 <rshift>
 80265f2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80265f6:	1b76      	subs	r6, r6, r5
 80265f8:	2502      	movs	r5, #2
 80265fa:	f1b9 0f00 	cmp.w	r9, #0
 80265fe:	d047      	beq.n	8026690 <__gethex+0x38c>
 8026600:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8026604:	2b02      	cmp	r3, #2
 8026606:	d015      	beq.n	8026634 <__gethex+0x330>
 8026608:	2b03      	cmp	r3, #3
 802660a:	d017      	beq.n	802663c <__gethex+0x338>
 802660c:	2b01      	cmp	r3, #1
 802660e:	d109      	bne.n	8026624 <__gethex+0x320>
 8026610:	f019 0f02 	tst.w	r9, #2
 8026614:	d006      	beq.n	8026624 <__gethex+0x320>
 8026616:	f8da 3000 	ldr.w	r3, [sl]
 802661a:	ea49 0903 	orr.w	r9, r9, r3
 802661e:	f019 0f01 	tst.w	r9, #1
 8026622:	d10e      	bne.n	8026642 <__gethex+0x33e>
 8026624:	f045 0510 	orr.w	r5, r5, #16
 8026628:	e032      	b.n	8026690 <__gethex+0x38c>
 802662a:	f04f 0901 	mov.w	r9, #1
 802662e:	e7d1      	b.n	80265d4 <__gethex+0x2d0>
 8026630:	2501      	movs	r5, #1
 8026632:	e7e2      	b.n	80265fa <__gethex+0x2f6>
 8026634:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026636:	f1c3 0301 	rsb	r3, r3, #1
 802663a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802663c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802663e:	2b00      	cmp	r3, #0
 8026640:	d0f0      	beq.n	8026624 <__gethex+0x320>
 8026642:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8026646:	f104 0314 	add.w	r3, r4, #20
 802664a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 802664e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8026652:	f04f 0c00 	mov.w	ip, #0
 8026656:	4618      	mov	r0, r3
 8026658:	f853 2b04 	ldr.w	r2, [r3], #4
 802665c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8026660:	d01b      	beq.n	802669a <__gethex+0x396>
 8026662:	3201      	adds	r2, #1
 8026664:	6002      	str	r2, [r0, #0]
 8026666:	2d02      	cmp	r5, #2
 8026668:	f104 0314 	add.w	r3, r4, #20
 802666c:	d13c      	bne.n	80266e8 <__gethex+0x3e4>
 802666e:	f8d8 2000 	ldr.w	r2, [r8]
 8026672:	3a01      	subs	r2, #1
 8026674:	42b2      	cmp	r2, r6
 8026676:	d109      	bne.n	802668c <__gethex+0x388>
 8026678:	1171      	asrs	r1, r6, #5
 802667a:	2201      	movs	r2, #1
 802667c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8026680:	f006 061f 	and.w	r6, r6, #31
 8026684:	fa02 f606 	lsl.w	r6, r2, r6
 8026688:	421e      	tst	r6, r3
 802668a:	d13a      	bne.n	8026702 <__gethex+0x3fe>
 802668c:	f045 0520 	orr.w	r5, r5, #32
 8026690:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026692:	601c      	str	r4, [r3, #0]
 8026694:	9b02      	ldr	r3, [sp, #8]
 8026696:	601f      	str	r7, [r3, #0]
 8026698:	e6b0      	b.n	80263fc <__gethex+0xf8>
 802669a:	4299      	cmp	r1, r3
 802669c:	f843 cc04 	str.w	ip, [r3, #-4]
 80266a0:	d8d9      	bhi.n	8026656 <__gethex+0x352>
 80266a2:	68a3      	ldr	r3, [r4, #8]
 80266a4:	459b      	cmp	fp, r3
 80266a6:	db17      	blt.n	80266d8 <__gethex+0x3d4>
 80266a8:	6861      	ldr	r1, [r4, #4]
 80266aa:	9801      	ldr	r0, [sp, #4]
 80266ac:	3101      	adds	r1, #1
 80266ae:	f7fd fe61 	bl	8024374 <_Balloc>
 80266b2:	4681      	mov	r9, r0
 80266b4:	b918      	cbnz	r0, 80266be <__gethex+0x3ba>
 80266b6:	4b1a      	ldr	r3, [pc, #104]	@ (8026720 <__gethex+0x41c>)
 80266b8:	4602      	mov	r2, r0
 80266ba:	2184      	movs	r1, #132	@ 0x84
 80266bc:	e6c5      	b.n	802644a <__gethex+0x146>
 80266be:	6922      	ldr	r2, [r4, #16]
 80266c0:	3202      	adds	r2, #2
 80266c2:	f104 010c 	add.w	r1, r4, #12
 80266c6:	0092      	lsls	r2, r2, #2
 80266c8:	300c      	adds	r0, #12
 80266ca:	f7fc ffa8 	bl	802361e <memcpy>
 80266ce:	4621      	mov	r1, r4
 80266d0:	9801      	ldr	r0, [sp, #4]
 80266d2:	f7fd fe8f 	bl	80243f4 <_Bfree>
 80266d6:	464c      	mov	r4, r9
 80266d8:	6923      	ldr	r3, [r4, #16]
 80266da:	1c5a      	adds	r2, r3, #1
 80266dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80266e0:	6122      	str	r2, [r4, #16]
 80266e2:	2201      	movs	r2, #1
 80266e4:	615a      	str	r2, [r3, #20]
 80266e6:	e7be      	b.n	8026666 <__gethex+0x362>
 80266e8:	6922      	ldr	r2, [r4, #16]
 80266ea:	455a      	cmp	r2, fp
 80266ec:	dd0b      	ble.n	8026706 <__gethex+0x402>
 80266ee:	2101      	movs	r1, #1
 80266f0:	4620      	mov	r0, r4
 80266f2:	f7ff fd9f 	bl	8026234 <rshift>
 80266f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80266fa:	3701      	adds	r7, #1
 80266fc:	42bb      	cmp	r3, r7
 80266fe:	f6ff aee0 	blt.w	80264c2 <__gethex+0x1be>
 8026702:	2501      	movs	r5, #1
 8026704:	e7c2      	b.n	802668c <__gethex+0x388>
 8026706:	f016 061f 	ands.w	r6, r6, #31
 802670a:	d0fa      	beq.n	8026702 <__gethex+0x3fe>
 802670c:	4453      	add	r3, sl
 802670e:	f1c6 0620 	rsb	r6, r6, #32
 8026712:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8026716:	f7fd ff1f 	bl	8024558 <__hi0bits>
 802671a:	42b0      	cmp	r0, r6
 802671c:	dbe7      	blt.n	80266ee <__gethex+0x3ea>
 802671e:	e7f0      	b.n	8026702 <__gethex+0x3fe>
 8026720:	08044725 	.word	0x08044725

08026724 <L_shift>:
 8026724:	f1c2 0208 	rsb	r2, r2, #8
 8026728:	0092      	lsls	r2, r2, #2
 802672a:	b570      	push	{r4, r5, r6, lr}
 802672c:	f1c2 0620 	rsb	r6, r2, #32
 8026730:	6843      	ldr	r3, [r0, #4]
 8026732:	6804      	ldr	r4, [r0, #0]
 8026734:	fa03 f506 	lsl.w	r5, r3, r6
 8026738:	432c      	orrs	r4, r5
 802673a:	40d3      	lsrs	r3, r2
 802673c:	6004      	str	r4, [r0, #0]
 802673e:	f840 3f04 	str.w	r3, [r0, #4]!
 8026742:	4288      	cmp	r0, r1
 8026744:	d3f4      	bcc.n	8026730 <L_shift+0xc>
 8026746:	bd70      	pop	{r4, r5, r6, pc}

08026748 <__match>:
 8026748:	b530      	push	{r4, r5, lr}
 802674a:	6803      	ldr	r3, [r0, #0]
 802674c:	3301      	adds	r3, #1
 802674e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8026752:	b914      	cbnz	r4, 802675a <__match+0x12>
 8026754:	6003      	str	r3, [r0, #0]
 8026756:	2001      	movs	r0, #1
 8026758:	bd30      	pop	{r4, r5, pc}
 802675a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802675e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8026762:	2d19      	cmp	r5, #25
 8026764:	bf98      	it	ls
 8026766:	3220      	addls	r2, #32
 8026768:	42a2      	cmp	r2, r4
 802676a:	d0f0      	beq.n	802674e <__match+0x6>
 802676c:	2000      	movs	r0, #0
 802676e:	e7f3      	b.n	8026758 <__match+0x10>

08026770 <__hexnan>:
 8026770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026774:	680b      	ldr	r3, [r1, #0]
 8026776:	6801      	ldr	r1, [r0, #0]
 8026778:	115e      	asrs	r6, r3, #5
 802677a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 802677e:	f013 031f 	ands.w	r3, r3, #31
 8026782:	b087      	sub	sp, #28
 8026784:	bf18      	it	ne
 8026786:	3604      	addne	r6, #4
 8026788:	2500      	movs	r5, #0
 802678a:	1f37      	subs	r7, r6, #4
 802678c:	4682      	mov	sl, r0
 802678e:	4690      	mov	r8, r2
 8026790:	9301      	str	r3, [sp, #4]
 8026792:	f846 5c04 	str.w	r5, [r6, #-4]
 8026796:	46b9      	mov	r9, r7
 8026798:	463c      	mov	r4, r7
 802679a:	9502      	str	r5, [sp, #8]
 802679c:	46ab      	mov	fp, r5
 802679e:	784a      	ldrb	r2, [r1, #1]
 80267a0:	1c4b      	adds	r3, r1, #1
 80267a2:	9303      	str	r3, [sp, #12]
 80267a4:	b342      	cbz	r2, 80267f8 <__hexnan+0x88>
 80267a6:	4610      	mov	r0, r2
 80267a8:	9105      	str	r1, [sp, #20]
 80267aa:	9204      	str	r2, [sp, #16]
 80267ac:	f7ff fd94 	bl	80262d8 <__hexdig_fun>
 80267b0:	2800      	cmp	r0, #0
 80267b2:	d151      	bne.n	8026858 <__hexnan+0xe8>
 80267b4:	9a04      	ldr	r2, [sp, #16]
 80267b6:	9905      	ldr	r1, [sp, #20]
 80267b8:	2a20      	cmp	r2, #32
 80267ba:	d818      	bhi.n	80267ee <__hexnan+0x7e>
 80267bc:	9b02      	ldr	r3, [sp, #8]
 80267be:	459b      	cmp	fp, r3
 80267c0:	dd13      	ble.n	80267ea <__hexnan+0x7a>
 80267c2:	454c      	cmp	r4, r9
 80267c4:	d206      	bcs.n	80267d4 <__hexnan+0x64>
 80267c6:	2d07      	cmp	r5, #7
 80267c8:	dc04      	bgt.n	80267d4 <__hexnan+0x64>
 80267ca:	462a      	mov	r2, r5
 80267cc:	4649      	mov	r1, r9
 80267ce:	4620      	mov	r0, r4
 80267d0:	f7ff ffa8 	bl	8026724 <L_shift>
 80267d4:	4544      	cmp	r4, r8
 80267d6:	d952      	bls.n	802687e <__hexnan+0x10e>
 80267d8:	2300      	movs	r3, #0
 80267da:	f1a4 0904 	sub.w	r9, r4, #4
 80267de:	f844 3c04 	str.w	r3, [r4, #-4]
 80267e2:	f8cd b008 	str.w	fp, [sp, #8]
 80267e6:	464c      	mov	r4, r9
 80267e8:	461d      	mov	r5, r3
 80267ea:	9903      	ldr	r1, [sp, #12]
 80267ec:	e7d7      	b.n	802679e <__hexnan+0x2e>
 80267ee:	2a29      	cmp	r2, #41	@ 0x29
 80267f0:	d157      	bne.n	80268a2 <__hexnan+0x132>
 80267f2:	3102      	adds	r1, #2
 80267f4:	f8ca 1000 	str.w	r1, [sl]
 80267f8:	f1bb 0f00 	cmp.w	fp, #0
 80267fc:	d051      	beq.n	80268a2 <__hexnan+0x132>
 80267fe:	454c      	cmp	r4, r9
 8026800:	d206      	bcs.n	8026810 <__hexnan+0xa0>
 8026802:	2d07      	cmp	r5, #7
 8026804:	dc04      	bgt.n	8026810 <__hexnan+0xa0>
 8026806:	462a      	mov	r2, r5
 8026808:	4649      	mov	r1, r9
 802680a:	4620      	mov	r0, r4
 802680c:	f7ff ff8a 	bl	8026724 <L_shift>
 8026810:	4544      	cmp	r4, r8
 8026812:	d936      	bls.n	8026882 <__hexnan+0x112>
 8026814:	f1a8 0204 	sub.w	r2, r8, #4
 8026818:	4623      	mov	r3, r4
 802681a:	f853 1b04 	ldr.w	r1, [r3], #4
 802681e:	f842 1f04 	str.w	r1, [r2, #4]!
 8026822:	429f      	cmp	r7, r3
 8026824:	d2f9      	bcs.n	802681a <__hexnan+0xaa>
 8026826:	1b3b      	subs	r3, r7, r4
 8026828:	f023 0303 	bic.w	r3, r3, #3
 802682c:	3304      	adds	r3, #4
 802682e:	3401      	adds	r4, #1
 8026830:	3e03      	subs	r6, #3
 8026832:	42b4      	cmp	r4, r6
 8026834:	bf88      	it	hi
 8026836:	2304      	movhi	r3, #4
 8026838:	4443      	add	r3, r8
 802683a:	2200      	movs	r2, #0
 802683c:	f843 2b04 	str.w	r2, [r3], #4
 8026840:	429f      	cmp	r7, r3
 8026842:	d2fb      	bcs.n	802683c <__hexnan+0xcc>
 8026844:	683b      	ldr	r3, [r7, #0]
 8026846:	b91b      	cbnz	r3, 8026850 <__hexnan+0xe0>
 8026848:	4547      	cmp	r7, r8
 802684a:	d128      	bne.n	802689e <__hexnan+0x12e>
 802684c:	2301      	movs	r3, #1
 802684e:	603b      	str	r3, [r7, #0]
 8026850:	2005      	movs	r0, #5
 8026852:	b007      	add	sp, #28
 8026854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026858:	3501      	adds	r5, #1
 802685a:	2d08      	cmp	r5, #8
 802685c:	f10b 0b01 	add.w	fp, fp, #1
 8026860:	dd06      	ble.n	8026870 <__hexnan+0x100>
 8026862:	4544      	cmp	r4, r8
 8026864:	d9c1      	bls.n	80267ea <__hexnan+0x7a>
 8026866:	2300      	movs	r3, #0
 8026868:	f844 3c04 	str.w	r3, [r4, #-4]
 802686c:	2501      	movs	r5, #1
 802686e:	3c04      	subs	r4, #4
 8026870:	6822      	ldr	r2, [r4, #0]
 8026872:	f000 000f 	and.w	r0, r0, #15
 8026876:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 802687a:	6020      	str	r0, [r4, #0]
 802687c:	e7b5      	b.n	80267ea <__hexnan+0x7a>
 802687e:	2508      	movs	r5, #8
 8026880:	e7b3      	b.n	80267ea <__hexnan+0x7a>
 8026882:	9b01      	ldr	r3, [sp, #4]
 8026884:	2b00      	cmp	r3, #0
 8026886:	d0dd      	beq.n	8026844 <__hexnan+0xd4>
 8026888:	f1c3 0320 	rsb	r3, r3, #32
 802688c:	f04f 32ff 	mov.w	r2, #4294967295
 8026890:	40da      	lsrs	r2, r3
 8026892:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8026896:	4013      	ands	r3, r2
 8026898:	f846 3c04 	str.w	r3, [r6, #-4]
 802689c:	e7d2      	b.n	8026844 <__hexnan+0xd4>
 802689e:	3f04      	subs	r7, #4
 80268a0:	e7d0      	b.n	8026844 <__hexnan+0xd4>
 80268a2:	2004      	movs	r0, #4
 80268a4:	e7d5      	b.n	8026852 <__hexnan+0xe2>

080268a6 <__ascii_mbtowc>:
 80268a6:	b082      	sub	sp, #8
 80268a8:	b901      	cbnz	r1, 80268ac <__ascii_mbtowc+0x6>
 80268aa:	a901      	add	r1, sp, #4
 80268ac:	b142      	cbz	r2, 80268c0 <__ascii_mbtowc+0x1a>
 80268ae:	b14b      	cbz	r3, 80268c4 <__ascii_mbtowc+0x1e>
 80268b0:	7813      	ldrb	r3, [r2, #0]
 80268b2:	600b      	str	r3, [r1, #0]
 80268b4:	7812      	ldrb	r2, [r2, #0]
 80268b6:	1e10      	subs	r0, r2, #0
 80268b8:	bf18      	it	ne
 80268ba:	2001      	movne	r0, #1
 80268bc:	b002      	add	sp, #8
 80268be:	4770      	bx	lr
 80268c0:	4610      	mov	r0, r2
 80268c2:	e7fb      	b.n	80268bc <__ascii_mbtowc+0x16>
 80268c4:	f06f 0001 	mvn.w	r0, #1
 80268c8:	e7f8      	b.n	80268bc <__ascii_mbtowc+0x16>

080268ca <__ascii_wctomb>:
 80268ca:	4603      	mov	r3, r0
 80268cc:	4608      	mov	r0, r1
 80268ce:	b141      	cbz	r1, 80268e2 <__ascii_wctomb+0x18>
 80268d0:	2aff      	cmp	r2, #255	@ 0xff
 80268d2:	d904      	bls.n	80268de <__ascii_wctomb+0x14>
 80268d4:	228a      	movs	r2, #138	@ 0x8a
 80268d6:	601a      	str	r2, [r3, #0]
 80268d8:	f04f 30ff 	mov.w	r0, #4294967295
 80268dc:	4770      	bx	lr
 80268de:	700a      	strb	r2, [r1, #0]
 80268e0:	2001      	movs	r0, #1
 80268e2:	4770      	bx	lr

080268e4 <fiprintf>:
 80268e4:	b40e      	push	{r1, r2, r3}
 80268e6:	b503      	push	{r0, r1, lr}
 80268e8:	4601      	mov	r1, r0
 80268ea:	ab03      	add	r3, sp, #12
 80268ec:	4805      	ldr	r0, [pc, #20]	@ (8026904 <fiprintf+0x20>)
 80268ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80268f2:	6800      	ldr	r0, [r0, #0]
 80268f4:	9301      	str	r3, [sp, #4]
 80268f6:	f7ff f9ff 	bl	8025cf8 <_vfiprintf_r>
 80268fa:	b002      	add	sp, #8
 80268fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8026900:	b003      	add	sp, #12
 8026902:	4770      	bx	lr
 8026904:	200007cc 	.word	0x200007cc

08026908 <abort>:
 8026908:	b508      	push	{r3, lr}
 802690a:	2006      	movs	r0, #6
 802690c:	f000 f82c 	bl	8026968 <raise>
 8026910:	2001      	movs	r0, #1
 8026912:	f7db fb48 	bl	8001fa6 <_exit>

08026916 <_raise_r>:
 8026916:	291f      	cmp	r1, #31
 8026918:	b538      	push	{r3, r4, r5, lr}
 802691a:	4605      	mov	r5, r0
 802691c:	460c      	mov	r4, r1
 802691e:	d904      	bls.n	802692a <_raise_r+0x14>
 8026920:	2316      	movs	r3, #22
 8026922:	6003      	str	r3, [r0, #0]
 8026924:	f04f 30ff 	mov.w	r0, #4294967295
 8026928:	bd38      	pop	{r3, r4, r5, pc}
 802692a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802692c:	b112      	cbz	r2, 8026934 <_raise_r+0x1e>
 802692e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8026932:	b94b      	cbnz	r3, 8026948 <_raise_r+0x32>
 8026934:	4628      	mov	r0, r5
 8026936:	f000 f831 	bl	802699c <_getpid_r>
 802693a:	4622      	mov	r2, r4
 802693c:	4601      	mov	r1, r0
 802693e:	4628      	mov	r0, r5
 8026940:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8026944:	f000 b818 	b.w	8026978 <_kill_r>
 8026948:	2b01      	cmp	r3, #1
 802694a:	d00a      	beq.n	8026962 <_raise_r+0x4c>
 802694c:	1c59      	adds	r1, r3, #1
 802694e:	d103      	bne.n	8026958 <_raise_r+0x42>
 8026950:	2316      	movs	r3, #22
 8026952:	6003      	str	r3, [r0, #0]
 8026954:	2001      	movs	r0, #1
 8026956:	e7e7      	b.n	8026928 <_raise_r+0x12>
 8026958:	2100      	movs	r1, #0
 802695a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802695e:	4620      	mov	r0, r4
 8026960:	4798      	blx	r3
 8026962:	2000      	movs	r0, #0
 8026964:	e7e0      	b.n	8026928 <_raise_r+0x12>
	...

08026968 <raise>:
 8026968:	4b02      	ldr	r3, [pc, #8]	@ (8026974 <raise+0xc>)
 802696a:	4601      	mov	r1, r0
 802696c:	6818      	ldr	r0, [r3, #0]
 802696e:	f7ff bfd2 	b.w	8026916 <_raise_r>
 8026972:	bf00      	nop
 8026974:	200007cc 	.word	0x200007cc

08026978 <_kill_r>:
 8026978:	b538      	push	{r3, r4, r5, lr}
 802697a:	4d07      	ldr	r5, [pc, #28]	@ (8026998 <_kill_r+0x20>)
 802697c:	2300      	movs	r3, #0
 802697e:	4604      	mov	r4, r0
 8026980:	4608      	mov	r0, r1
 8026982:	4611      	mov	r1, r2
 8026984:	602b      	str	r3, [r5, #0]
 8026986:	f7db fafe 	bl	8001f86 <_kill>
 802698a:	1c43      	adds	r3, r0, #1
 802698c:	d102      	bne.n	8026994 <_kill_r+0x1c>
 802698e:	682b      	ldr	r3, [r5, #0]
 8026990:	b103      	cbz	r3, 8026994 <_kill_r+0x1c>
 8026992:	6023      	str	r3, [r4, #0]
 8026994:	bd38      	pop	{r3, r4, r5, pc}
 8026996:	bf00      	nop
 8026998:	20009e80 	.word	0x20009e80

0802699c <_getpid_r>:
 802699c:	f7db baeb 	b.w	8001f76 <_getpid>

080269a0 <exp>:
 80269a0:	b538      	push	{r3, r4, r5, lr}
 80269a2:	ed2d 8b02 	vpush	{d8}
 80269a6:	ec55 4b10 	vmov	r4, r5, d0
 80269aa:	f000 fd19 	bl	80273e0 <__ieee754_exp>
 80269ae:	eeb0 8a40 	vmov.f32	s16, s0
 80269b2:	eef0 8a60 	vmov.f32	s17, s1
 80269b6:	ec45 4b10 	vmov	d0, r4, r5
 80269ba:	f000 f93f 	bl	8026c3c <finite>
 80269be:	b168      	cbz	r0, 80269dc <exp+0x3c>
 80269c0:	a317      	add	r3, pc, #92	@ (adr r3, 8026a20 <exp+0x80>)
 80269c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80269c6:	4620      	mov	r0, r4
 80269c8:	4629      	mov	r1, r5
 80269ca:	f7f3 fba5 	bl	801a118 <__aeabi_dcmpgt>
 80269ce:	b160      	cbz	r0, 80269ea <exp+0x4a>
 80269d0:	f7fc fdf8 	bl	80235c4 <__errno>
 80269d4:	ed9f 8b0e 	vldr	d8, [pc, #56]	@ 8026a10 <exp+0x70>
 80269d8:	2322      	movs	r3, #34	@ 0x22
 80269da:	6003      	str	r3, [r0, #0]
 80269dc:	eeb0 0a48 	vmov.f32	s0, s16
 80269e0:	eef0 0a68 	vmov.f32	s1, s17
 80269e4:	ecbd 8b02 	vpop	{d8}
 80269e8:	bd38      	pop	{r3, r4, r5, pc}
 80269ea:	a30f      	add	r3, pc, #60	@ (adr r3, 8026a28 <exp+0x88>)
 80269ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80269f0:	4620      	mov	r0, r4
 80269f2:	4629      	mov	r1, r5
 80269f4:	f7f3 fb72 	bl	801a0dc <__aeabi_dcmplt>
 80269f8:	2800      	cmp	r0, #0
 80269fa:	d0ef      	beq.n	80269dc <exp+0x3c>
 80269fc:	f7fc fde2 	bl	80235c4 <__errno>
 8026a00:	2322      	movs	r3, #34	@ 0x22
 8026a02:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 8026a18 <exp+0x78>
 8026a06:	6003      	str	r3, [r0, #0]
 8026a08:	e7e8      	b.n	80269dc <exp+0x3c>
 8026a0a:	bf00      	nop
 8026a0c:	f3af 8000 	nop.w
 8026a10:	00000000 	.word	0x00000000
 8026a14:	7ff00000 	.word	0x7ff00000
	...
 8026a20:	fefa39ef 	.word	0xfefa39ef
 8026a24:	40862e42 	.word	0x40862e42
 8026a28:	d52d3051 	.word	0xd52d3051
 8026a2c:	c0874910 	.word	0xc0874910

08026a30 <pow>:
 8026a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026a32:	ed2d 8b02 	vpush	{d8}
 8026a36:	eeb0 8a40 	vmov.f32	s16, s0
 8026a3a:	eef0 8a60 	vmov.f32	s17, s1
 8026a3e:	ec55 4b11 	vmov	r4, r5, d1
 8026a42:	f000 fe49 	bl	80276d8 <__ieee754_pow>
 8026a46:	4622      	mov	r2, r4
 8026a48:	462b      	mov	r3, r5
 8026a4a:	4620      	mov	r0, r4
 8026a4c:	4629      	mov	r1, r5
 8026a4e:	ec57 6b10 	vmov	r6, r7, d0
 8026a52:	f7f3 fb6b 	bl	801a12c <__aeabi_dcmpun>
 8026a56:	2800      	cmp	r0, #0
 8026a58:	d13b      	bne.n	8026ad2 <pow+0xa2>
 8026a5a:	ec51 0b18 	vmov	r0, r1, d8
 8026a5e:	2200      	movs	r2, #0
 8026a60:	2300      	movs	r3, #0
 8026a62:	f7f3 fb31 	bl	801a0c8 <__aeabi_dcmpeq>
 8026a66:	b1b8      	cbz	r0, 8026a98 <pow+0x68>
 8026a68:	2200      	movs	r2, #0
 8026a6a:	2300      	movs	r3, #0
 8026a6c:	4620      	mov	r0, r4
 8026a6e:	4629      	mov	r1, r5
 8026a70:	f7f3 fb2a 	bl	801a0c8 <__aeabi_dcmpeq>
 8026a74:	2800      	cmp	r0, #0
 8026a76:	d146      	bne.n	8026b06 <pow+0xd6>
 8026a78:	ec45 4b10 	vmov	d0, r4, r5
 8026a7c:	f000 f8de 	bl	8026c3c <finite>
 8026a80:	b338      	cbz	r0, 8026ad2 <pow+0xa2>
 8026a82:	2200      	movs	r2, #0
 8026a84:	2300      	movs	r3, #0
 8026a86:	4620      	mov	r0, r4
 8026a88:	4629      	mov	r1, r5
 8026a8a:	f7f3 fb27 	bl	801a0dc <__aeabi_dcmplt>
 8026a8e:	b300      	cbz	r0, 8026ad2 <pow+0xa2>
 8026a90:	f7fc fd98 	bl	80235c4 <__errno>
 8026a94:	2322      	movs	r3, #34	@ 0x22
 8026a96:	e01b      	b.n	8026ad0 <pow+0xa0>
 8026a98:	ec47 6b10 	vmov	d0, r6, r7
 8026a9c:	f000 f8ce 	bl	8026c3c <finite>
 8026aa0:	b9e0      	cbnz	r0, 8026adc <pow+0xac>
 8026aa2:	eeb0 0a48 	vmov.f32	s0, s16
 8026aa6:	eef0 0a68 	vmov.f32	s1, s17
 8026aaa:	f000 f8c7 	bl	8026c3c <finite>
 8026aae:	b1a8      	cbz	r0, 8026adc <pow+0xac>
 8026ab0:	ec45 4b10 	vmov	d0, r4, r5
 8026ab4:	f000 f8c2 	bl	8026c3c <finite>
 8026ab8:	b180      	cbz	r0, 8026adc <pow+0xac>
 8026aba:	4632      	mov	r2, r6
 8026abc:	463b      	mov	r3, r7
 8026abe:	4630      	mov	r0, r6
 8026ac0:	4639      	mov	r1, r7
 8026ac2:	f7f3 fb33 	bl	801a12c <__aeabi_dcmpun>
 8026ac6:	2800      	cmp	r0, #0
 8026ac8:	d0e2      	beq.n	8026a90 <pow+0x60>
 8026aca:	f7fc fd7b 	bl	80235c4 <__errno>
 8026ace:	2321      	movs	r3, #33	@ 0x21
 8026ad0:	6003      	str	r3, [r0, #0]
 8026ad2:	ecbd 8b02 	vpop	{d8}
 8026ad6:	ec47 6b10 	vmov	d0, r6, r7
 8026ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026adc:	2200      	movs	r2, #0
 8026ade:	2300      	movs	r3, #0
 8026ae0:	4630      	mov	r0, r6
 8026ae2:	4639      	mov	r1, r7
 8026ae4:	f7f3 faf0 	bl	801a0c8 <__aeabi_dcmpeq>
 8026ae8:	2800      	cmp	r0, #0
 8026aea:	d0f2      	beq.n	8026ad2 <pow+0xa2>
 8026aec:	eeb0 0a48 	vmov.f32	s0, s16
 8026af0:	eef0 0a68 	vmov.f32	s1, s17
 8026af4:	f000 f8a2 	bl	8026c3c <finite>
 8026af8:	2800      	cmp	r0, #0
 8026afa:	d0ea      	beq.n	8026ad2 <pow+0xa2>
 8026afc:	ec45 4b10 	vmov	d0, r4, r5
 8026b00:	f000 f89c 	bl	8026c3c <finite>
 8026b04:	e7c3      	b.n	8026a8e <pow+0x5e>
 8026b06:	4f01      	ldr	r7, [pc, #4]	@ (8026b0c <pow+0xdc>)
 8026b08:	2600      	movs	r6, #0
 8026b0a:	e7e2      	b.n	8026ad2 <pow+0xa2>
 8026b0c:	3ff00000 	.word	0x3ff00000

08026b10 <sqrt>:
 8026b10:	b538      	push	{r3, r4, r5, lr}
 8026b12:	ed2d 8b02 	vpush	{d8}
 8026b16:	ec55 4b10 	vmov	r4, r5, d0
 8026b1a:	f000 f905 	bl	8026d28 <__ieee754_sqrt>
 8026b1e:	4622      	mov	r2, r4
 8026b20:	462b      	mov	r3, r5
 8026b22:	4620      	mov	r0, r4
 8026b24:	4629      	mov	r1, r5
 8026b26:	eeb0 8a40 	vmov.f32	s16, s0
 8026b2a:	eef0 8a60 	vmov.f32	s17, s1
 8026b2e:	f7f3 fafd 	bl	801a12c <__aeabi_dcmpun>
 8026b32:	b990      	cbnz	r0, 8026b5a <sqrt+0x4a>
 8026b34:	2200      	movs	r2, #0
 8026b36:	2300      	movs	r3, #0
 8026b38:	4620      	mov	r0, r4
 8026b3a:	4629      	mov	r1, r5
 8026b3c:	f7f3 face 	bl	801a0dc <__aeabi_dcmplt>
 8026b40:	b158      	cbz	r0, 8026b5a <sqrt+0x4a>
 8026b42:	f7fc fd3f 	bl	80235c4 <__errno>
 8026b46:	2321      	movs	r3, #33	@ 0x21
 8026b48:	6003      	str	r3, [r0, #0]
 8026b4a:	2200      	movs	r2, #0
 8026b4c:	2300      	movs	r3, #0
 8026b4e:	4610      	mov	r0, r2
 8026b50:	4619      	mov	r1, r3
 8026b52:	f7f3 f97b 	bl	8019e4c <__aeabi_ddiv>
 8026b56:	ec41 0b18 	vmov	d8, r0, r1
 8026b5a:	eeb0 0a48 	vmov.f32	s0, s16
 8026b5e:	eef0 0a68 	vmov.f32	s1, s17
 8026b62:	ecbd 8b02 	vpop	{d8}
 8026b66:	bd38      	pop	{r3, r4, r5, pc}

08026b68 <tan>:
 8026b68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8026b6a:	ec53 2b10 	vmov	r2, r3, d0
 8026b6e:	4816      	ldr	r0, [pc, #88]	@ (8026bc8 <tan+0x60>)
 8026b70:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8026b74:	4281      	cmp	r1, r0
 8026b76:	d807      	bhi.n	8026b88 <tan+0x20>
 8026b78:	ed9f 1b11 	vldr	d1, [pc, #68]	@ 8026bc0 <tan+0x58>
 8026b7c:	2001      	movs	r0, #1
 8026b7e:	b005      	add	sp, #20
 8026b80:	f85d eb04 	ldr.w	lr, [sp], #4
 8026b84:	f000 ba28 	b.w	8026fd8 <__kernel_tan>
 8026b88:	4810      	ldr	r0, [pc, #64]	@ (8026bcc <tan+0x64>)
 8026b8a:	4281      	cmp	r1, r0
 8026b8c:	d908      	bls.n	8026ba0 <tan+0x38>
 8026b8e:	4610      	mov	r0, r2
 8026b90:	4619      	mov	r1, r3
 8026b92:	f7f2 fe79 	bl	8019888 <__aeabi_dsub>
 8026b96:	ec41 0b10 	vmov	d0, r0, r1
 8026b9a:	b005      	add	sp, #20
 8026b9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8026ba0:	4668      	mov	r0, sp
 8026ba2:	f001 fadd 	bl	8028160 <__ieee754_rem_pio2>
 8026ba6:	0040      	lsls	r0, r0, #1
 8026ba8:	f000 0002 	and.w	r0, r0, #2
 8026bac:	ed9d 1b02 	vldr	d1, [sp, #8]
 8026bb0:	ed9d 0b00 	vldr	d0, [sp]
 8026bb4:	f1c0 0001 	rsb	r0, r0, #1
 8026bb8:	f000 fa0e 	bl	8026fd8 <__kernel_tan>
 8026bbc:	e7ed      	b.n	8026b9a <tan+0x32>
 8026bbe:	bf00      	nop
	...
 8026bc8:	3fe921fb 	.word	0x3fe921fb
 8026bcc:	7fefffff 	.word	0x7fefffff

08026bd0 <expf>:
 8026bd0:	b508      	push	{r3, lr}
 8026bd2:	ed2d 8b02 	vpush	{d8}
 8026bd6:	eef0 8a40 	vmov.f32	s17, s0
 8026bda:	f001 fcc5 	bl	8028568 <__ieee754_expf>
 8026bde:	eeb0 8a40 	vmov.f32	s16, s0
 8026be2:	eeb0 0a68 	vmov.f32	s0, s17
 8026be6:	f000 f86f 	bl	8026cc8 <finitef>
 8026bea:	b160      	cbz	r0, 8026c06 <expf+0x36>
 8026bec:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8026c2c <expf+0x5c>
 8026bf0:	eef4 8ae7 	vcmpe.f32	s17, s15
 8026bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026bf8:	dd0a      	ble.n	8026c10 <expf+0x40>
 8026bfa:	f7fc fce3 	bl	80235c4 <__errno>
 8026bfe:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 8026c30 <expf+0x60>
 8026c02:	2322      	movs	r3, #34	@ 0x22
 8026c04:	6003      	str	r3, [r0, #0]
 8026c06:	eeb0 0a48 	vmov.f32	s0, s16
 8026c0a:	ecbd 8b02 	vpop	{d8}
 8026c0e:	bd08      	pop	{r3, pc}
 8026c10:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8026c34 <expf+0x64>
 8026c14:	eef4 8ae7 	vcmpe.f32	s17, s15
 8026c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026c1c:	d5f3      	bpl.n	8026c06 <expf+0x36>
 8026c1e:	f7fc fcd1 	bl	80235c4 <__errno>
 8026c22:	2322      	movs	r3, #34	@ 0x22
 8026c24:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 8026c38 <expf+0x68>
 8026c28:	6003      	str	r3, [r0, #0]
 8026c2a:	e7ec      	b.n	8026c06 <expf+0x36>
 8026c2c:	42b17217 	.word	0x42b17217
 8026c30:	7f800000 	.word	0x7f800000
 8026c34:	c2cff1b5 	.word	0xc2cff1b5
 8026c38:	00000000 	.word	0x00000000

08026c3c <finite>:
 8026c3c:	b082      	sub	sp, #8
 8026c3e:	ed8d 0b00 	vstr	d0, [sp]
 8026c42:	9801      	ldr	r0, [sp, #4]
 8026c44:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8026c48:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8026c4c:	0fc0      	lsrs	r0, r0, #31
 8026c4e:	b002      	add	sp, #8
 8026c50:	4770      	bx	lr

08026c52 <with_errno>:
 8026c52:	b510      	push	{r4, lr}
 8026c54:	ed2d 8b02 	vpush	{d8}
 8026c58:	eeb0 8a40 	vmov.f32	s16, s0
 8026c5c:	eef0 8a60 	vmov.f32	s17, s1
 8026c60:	4604      	mov	r4, r0
 8026c62:	f7fc fcaf 	bl	80235c4 <__errno>
 8026c66:	eeb0 0a48 	vmov.f32	s0, s16
 8026c6a:	eef0 0a68 	vmov.f32	s1, s17
 8026c6e:	ecbd 8b02 	vpop	{d8}
 8026c72:	6004      	str	r4, [r0, #0]
 8026c74:	bd10      	pop	{r4, pc}

08026c76 <xflow>:
 8026c76:	4603      	mov	r3, r0
 8026c78:	b507      	push	{r0, r1, r2, lr}
 8026c7a:	ec51 0b10 	vmov	r0, r1, d0
 8026c7e:	b183      	cbz	r3, 8026ca2 <xflow+0x2c>
 8026c80:	4602      	mov	r2, r0
 8026c82:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8026c86:	e9cd 2300 	strd	r2, r3, [sp]
 8026c8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8026c8e:	f7f2 ffb3 	bl	8019bf8 <__aeabi_dmul>
 8026c92:	ec41 0b10 	vmov	d0, r0, r1
 8026c96:	2022      	movs	r0, #34	@ 0x22
 8026c98:	b003      	add	sp, #12
 8026c9a:	f85d eb04 	ldr.w	lr, [sp], #4
 8026c9e:	f7ff bfd8 	b.w	8026c52 <with_errno>
 8026ca2:	4602      	mov	r2, r0
 8026ca4:	460b      	mov	r3, r1
 8026ca6:	e7ee      	b.n	8026c86 <xflow+0x10>

08026ca8 <__math_uflow>:
 8026ca8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8026cb0 <__math_uflow+0x8>
 8026cac:	f7ff bfe3 	b.w	8026c76 <xflow>
 8026cb0:	00000000 	.word	0x00000000
 8026cb4:	10000000 	.word	0x10000000

08026cb8 <__math_oflow>:
 8026cb8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8026cc0 <__math_oflow+0x8>
 8026cbc:	f7ff bfdb 	b.w	8026c76 <xflow>
 8026cc0:	00000000 	.word	0x00000000
 8026cc4:	70000000 	.word	0x70000000

08026cc8 <finitef>:
 8026cc8:	ee10 3a10 	vmov	r3, s0
 8026ccc:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8026cd0:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8026cd4:	bfac      	ite	ge
 8026cd6:	2000      	movge	r0, #0
 8026cd8:	2001      	movlt	r0, #1
 8026cda:	4770      	bx	lr

08026cdc <with_errnof>:
 8026cdc:	b510      	push	{r4, lr}
 8026cde:	ed2d 8b02 	vpush	{d8}
 8026ce2:	eeb0 8a40 	vmov.f32	s16, s0
 8026ce6:	4604      	mov	r4, r0
 8026ce8:	f7fc fc6c 	bl	80235c4 <__errno>
 8026cec:	eeb0 0a48 	vmov.f32	s0, s16
 8026cf0:	ecbd 8b02 	vpop	{d8}
 8026cf4:	6004      	str	r4, [r0, #0]
 8026cf6:	bd10      	pop	{r4, pc}

08026cf8 <xflowf>:
 8026cf8:	b130      	cbz	r0, 8026d08 <xflowf+0x10>
 8026cfa:	eef1 7a40 	vneg.f32	s15, s0
 8026cfe:	ee27 0a80 	vmul.f32	s0, s15, s0
 8026d02:	2022      	movs	r0, #34	@ 0x22
 8026d04:	f7ff bfea 	b.w	8026cdc <with_errnof>
 8026d08:	eef0 7a40 	vmov.f32	s15, s0
 8026d0c:	e7f7      	b.n	8026cfe <xflowf+0x6>
	...

08026d10 <__math_uflowf>:
 8026d10:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8026d18 <__math_uflowf+0x8>
 8026d14:	f7ff bff0 	b.w	8026cf8 <xflowf>
 8026d18:	10000000 	.word	0x10000000

08026d1c <__math_oflowf>:
 8026d1c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8026d24 <__math_oflowf+0x8>
 8026d20:	f7ff bfea 	b.w	8026cf8 <xflowf>
 8026d24:	70000000 	.word	0x70000000

08026d28 <__ieee754_sqrt>:
 8026d28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026d2c:	4a68      	ldr	r2, [pc, #416]	@ (8026ed0 <__ieee754_sqrt+0x1a8>)
 8026d2e:	ec55 4b10 	vmov	r4, r5, d0
 8026d32:	43aa      	bics	r2, r5
 8026d34:	462b      	mov	r3, r5
 8026d36:	4621      	mov	r1, r4
 8026d38:	d110      	bne.n	8026d5c <__ieee754_sqrt+0x34>
 8026d3a:	4622      	mov	r2, r4
 8026d3c:	4620      	mov	r0, r4
 8026d3e:	4629      	mov	r1, r5
 8026d40:	f7f2 ff5a 	bl	8019bf8 <__aeabi_dmul>
 8026d44:	4602      	mov	r2, r0
 8026d46:	460b      	mov	r3, r1
 8026d48:	4620      	mov	r0, r4
 8026d4a:	4629      	mov	r1, r5
 8026d4c:	f7f2 fd9e 	bl	801988c <__adddf3>
 8026d50:	4604      	mov	r4, r0
 8026d52:	460d      	mov	r5, r1
 8026d54:	ec45 4b10 	vmov	d0, r4, r5
 8026d58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026d5c:	2d00      	cmp	r5, #0
 8026d5e:	dc0e      	bgt.n	8026d7e <__ieee754_sqrt+0x56>
 8026d60:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8026d64:	4322      	orrs	r2, r4
 8026d66:	d0f5      	beq.n	8026d54 <__ieee754_sqrt+0x2c>
 8026d68:	b19d      	cbz	r5, 8026d92 <__ieee754_sqrt+0x6a>
 8026d6a:	4622      	mov	r2, r4
 8026d6c:	4620      	mov	r0, r4
 8026d6e:	4629      	mov	r1, r5
 8026d70:	f7f2 fd8a 	bl	8019888 <__aeabi_dsub>
 8026d74:	4602      	mov	r2, r0
 8026d76:	460b      	mov	r3, r1
 8026d78:	f7f3 f868 	bl	8019e4c <__aeabi_ddiv>
 8026d7c:	e7e8      	b.n	8026d50 <__ieee754_sqrt+0x28>
 8026d7e:	152a      	asrs	r2, r5, #20
 8026d80:	d115      	bne.n	8026dae <__ieee754_sqrt+0x86>
 8026d82:	2000      	movs	r0, #0
 8026d84:	e009      	b.n	8026d9a <__ieee754_sqrt+0x72>
 8026d86:	0acb      	lsrs	r3, r1, #11
 8026d88:	3a15      	subs	r2, #21
 8026d8a:	0549      	lsls	r1, r1, #21
 8026d8c:	2b00      	cmp	r3, #0
 8026d8e:	d0fa      	beq.n	8026d86 <__ieee754_sqrt+0x5e>
 8026d90:	e7f7      	b.n	8026d82 <__ieee754_sqrt+0x5a>
 8026d92:	462a      	mov	r2, r5
 8026d94:	e7fa      	b.n	8026d8c <__ieee754_sqrt+0x64>
 8026d96:	005b      	lsls	r3, r3, #1
 8026d98:	3001      	adds	r0, #1
 8026d9a:	02dc      	lsls	r4, r3, #11
 8026d9c:	d5fb      	bpl.n	8026d96 <__ieee754_sqrt+0x6e>
 8026d9e:	1e44      	subs	r4, r0, #1
 8026da0:	1b12      	subs	r2, r2, r4
 8026da2:	f1c0 0420 	rsb	r4, r0, #32
 8026da6:	fa21 f404 	lsr.w	r4, r1, r4
 8026daa:	4323      	orrs	r3, r4
 8026dac:	4081      	lsls	r1, r0
 8026dae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8026db2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8026db6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8026dba:	07d2      	lsls	r2, r2, #31
 8026dbc:	bf5c      	itt	pl
 8026dbe:	005b      	lslpl	r3, r3, #1
 8026dc0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8026dc4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8026dc8:	bf58      	it	pl
 8026dca:	0049      	lslpl	r1, r1, #1
 8026dcc:	2600      	movs	r6, #0
 8026dce:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8026dd2:	106d      	asrs	r5, r5, #1
 8026dd4:	0049      	lsls	r1, r1, #1
 8026dd6:	2016      	movs	r0, #22
 8026dd8:	4632      	mov	r2, r6
 8026dda:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8026dde:	1917      	adds	r7, r2, r4
 8026de0:	429f      	cmp	r7, r3
 8026de2:	bfde      	ittt	le
 8026de4:	193a      	addle	r2, r7, r4
 8026de6:	1bdb      	suble	r3, r3, r7
 8026de8:	1936      	addle	r6, r6, r4
 8026dea:	0fcf      	lsrs	r7, r1, #31
 8026dec:	3801      	subs	r0, #1
 8026dee:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8026df2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8026df6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8026dfa:	d1f0      	bne.n	8026dde <__ieee754_sqrt+0xb6>
 8026dfc:	4604      	mov	r4, r0
 8026dfe:	2720      	movs	r7, #32
 8026e00:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8026e04:	429a      	cmp	r2, r3
 8026e06:	eb00 0e0c 	add.w	lr, r0, ip
 8026e0a:	db02      	blt.n	8026e12 <__ieee754_sqrt+0xea>
 8026e0c:	d113      	bne.n	8026e36 <__ieee754_sqrt+0x10e>
 8026e0e:	458e      	cmp	lr, r1
 8026e10:	d811      	bhi.n	8026e36 <__ieee754_sqrt+0x10e>
 8026e12:	f1be 0f00 	cmp.w	lr, #0
 8026e16:	eb0e 000c 	add.w	r0, lr, ip
 8026e1a:	da42      	bge.n	8026ea2 <__ieee754_sqrt+0x17a>
 8026e1c:	2800      	cmp	r0, #0
 8026e1e:	db40      	blt.n	8026ea2 <__ieee754_sqrt+0x17a>
 8026e20:	f102 0801 	add.w	r8, r2, #1
 8026e24:	1a9b      	subs	r3, r3, r2
 8026e26:	458e      	cmp	lr, r1
 8026e28:	bf88      	it	hi
 8026e2a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8026e2e:	eba1 010e 	sub.w	r1, r1, lr
 8026e32:	4464      	add	r4, ip
 8026e34:	4642      	mov	r2, r8
 8026e36:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8026e3a:	3f01      	subs	r7, #1
 8026e3c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8026e40:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8026e44:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8026e48:	d1dc      	bne.n	8026e04 <__ieee754_sqrt+0xdc>
 8026e4a:	4319      	orrs	r1, r3
 8026e4c:	d01b      	beq.n	8026e86 <__ieee754_sqrt+0x15e>
 8026e4e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8026ed4 <__ieee754_sqrt+0x1ac>
 8026e52:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8026ed8 <__ieee754_sqrt+0x1b0>
 8026e56:	e9da 0100 	ldrd	r0, r1, [sl]
 8026e5a:	e9db 2300 	ldrd	r2, r3, [fp]
 8026e5e:	f7f2 fd13 	bl	8019888 <__aeabi_dsub>
 8026e62:	e9da 8900 	ldrd	r8, r9, [sl]
 8026e66:	4602      	mov	r2, r0
 8026e68:	460b      	mov	r3, r1
 8026e6a:	4640      	mov	r0, r8
 8026e6c:	4649      	mov	r1, r9
 8026e6e:	f7f3 f93f 	bl	801a0f0 <__aeabi_dcmple>
 8026e72:	b140      	cbz	r0, 8026e86 <__ieee754_sqrt+0x15e>
 8026e74:	f1b4 3fff 	cmp.w	r4, #4294967295
 8026e78:	e9da 0100 	ldrd	r0, r1, [sl]
 8026e7c:	e9db 2300 	ldrd	r2, r3, [fp]
 8026e80:	d111      	bne.n	8026ea6 <__ieee754_sqrt+0x17e>
 8026e82:	3601      	adds	r6, #1
 8026e84:	463c      	mov	r4, r7
 8026e86:	1072      	asrs	r2, r6, #1
 8026e88:	0863      	lsrs	r3, r4, #1
 8026e8a:	07f1      	lsls	r1, r6, #31
 8026e8c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8026e90:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8026e94:	bf48      	it	mi
 8026e96:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8026e9a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8026e9e:	4618      	mov	r0, r3
 8026ea0:	e756      	b.n	8026d50 <__ieee754_sqrt+0x28>
 8026ea2:	4690      	mov	r8, r2
 8026ea4:	e7be      	b.n	8026e24 <__ieee754_sqrt+0xfc>
 8026ea6:	f7f2 fcf1 	bl	801988c <__adddf3>
 8026eaa:	e9da 8900 	ldrd	r8, r9, [sl]
 8026eae:	4602      	mov	r2, r0
 8026eb0:	460b      	mov	r3, r1
 8026eb2:	4640      	mov	r0, r8
 8026eb4:	4649      	mov	r1, r9
 8026eb6:	f7f3 f911 	bl	801a0dc <__aeabi_dcmplt>
 8026eba:	b120      	cbz	r0, 8026ec6 <__ieee754_sqrt+0x19e>
 8026ebc:	1ca0      	adds	r0, r4, #2
 8026ebe:	bf08      	it	eq
 8026ec0:	3601      	addeq	r6, #1
 8026ec2:	3402      	adds	r4, #2
 8026ec4:	e7df      	b.n	8026e86 <__ieee754_sqrt+0x15e>
 8026ec6:	1c63      	adds	r3, r4, #1
 8026ec8:	f023 0401 	bic.w	r4, r3, #1
 8026ecc:	e7db      	b.n	8026e86 <__ieee754_sqrt+0x15e>
 8026ece:	bf00      	nop
 8026ed0:	7ff00000 	.word	0x7ff00000
 8026ed4:	20000990 	.word	0x20000990
 8026ed8:	20000988 	.word	0x20000988
 8026edc:	00000000 	.word	0x00000000

08026ee0 <ceil>:
 8026ee0:	ec51 0b10 	vmov	r0, r1, d0
 8026ee4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8026ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026eec:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8026ef0:	2e13      	cmp	r6, #19
 8026ef2:	460c      	mov	r4, r1
 8026ef4:	4605      	mov	r5, r0
 8026ef6:	4680      	mov	r8, r0
 8026ef8:	dc2e      	bgt.n	8026f58 <ceil+0x78>
 8026efa:	2e00      	cmp	r6, #0
 8026efc:	da11      	bge.n	8026f22 <ceil+0x42>
 8026efe:	a332      	add	r3, pc, #200	@ (adr r3, 8026fc8 <ceil+0xe8>)
 8026f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026f04:	f7f2 fcc2 	bl	801988c <__adddf3>
 8026f08:	2200      	movs	r2, #0
 8026f0a:	2300      	movs	r3, #0
 8026f0c:	f7f3 f904 	bl	801a118 <__aeabi_dcmpgt>
 8026f10:	b120      	cbz	r0, 8026f1c <ceil+0x3c>
 8026f12:	2c00      	cmp	r4, #0
 8026f14:	db4f      	blt.n	8026fb6 <ceil+0xd6>
 8026f16:	4325      	orrs	r5, r4
 8026f18:	d151      	bne.n	8026fbe <ceil+0xde>
 8026f1a:	462c      	mov	r4, r5
 8026f1c:	4621      	mov	r1, r4
 8026f1e:	4628      	mov	r0, r5
 8026f20:	e023      	b.n	8026f6a <ceil+0x8a>
 8026f22:	4f2b      	ldr	r7, [pc, #172]	@ (8026fd0 <ceil+0xf0>)
 8026f24:	4137      	asrs	r7, r6
 8026f26:	ea01 0307 	and.w	r3, r1, r7
 8026f2a:	4303      	orrs	r3, r0
 8026f2c:	d01d      	beq.n	8026f6a <ceil+0x8a>
 8026f2e:	a326      	add	r3, pc, #152	@ (adr r3, 8026fc8 <ceil+0xe8>)
 8026f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026f34:	f7f2 fcaa 	bl	801988c <__adddf3>
 8026f38:	2200      	movs	r2, #0
 8026f3a:	2300      	movs	r3, #0
 8026f3c:	f7f3 f8ec 	bl	801a118 <__aeabi_dcmpgt>
 8026f40:	2800      	cmp	r0, #0
 8026f42:	d0eb      	beq.n	8026f1c <ceil+0x3c>
 8026f44:	2c00      	cmp	r4, #0
 8026f46:	bfc2      	ittt	gt
 8026f48:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 8026f4c:	4133      	asrgt	r3, r6
 8026f4e:	18e4      	addgt	r4, r4, r3
 8026f50:	ea24 0407 	bic.w	r4, r4, r7
 8026f54:	2500      	movs	r5, #0
 8026f56:	e7e1      	b.n	8026f1c <ceil+0x3c>
 8026f58:	2e33      	cmp	r6, #51	@ 0x33
 8026f5a:	dd0a      	ble.n	8026f72 <ceil+0x92>
 8026f5c:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8026f60:	d103      	bne.n	8026f6a <ceil+0x8a>
 8026f62:	4602      	mov	r2, r0
 8026f64:	460b      	mov	r3, r1
 8026f66:	f7f2 fc91 	bl	801988c <__adddf3>
 8026f6a:	ec41 0b10 	vmov	d0, r0, r1
 8026f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026f72:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8026f76:	f04f 37ff 	mov.w	r7, #4294967295
 8026f7a:	40df      	lsrs	r7, r3
 8026f7c:	4238      	tst	r0, r7
 8026f7e:	d0f4      	beq.n	8026f6a <ceil+0x8a>
 8026f80:	a311      	add	r3, pc, #68	@ (adr r3, 8026fc8 <ceil+0xe8>)
 8026f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026f86:	f7f2 fc81 	bl	801988c <__adddf3>
 8026f8a:	2200      	movs	r2, #0
 8026f8c:	2300      	movs	r3, #0
 8026f8e:	f7f3 f8c3 	bl	801a118 <__aeabi_dcmpgt>
 8026f92:	2800      	cmp	r0, #0
 8026f94:	d0c2      	beq.n	8026f1c <ceil+0x3c>
 8026f96:	2c00      	cmp	r4, #0
 8026f98:	dd0a      	ble.n	8026fb0 <ceil+0xd0>
 8026f9a:	2e14      	cmp	r6, #20
 8026f9c:	d101      	bne.n	8026fa2 <ceil+0xc2>
 8026f9e:	3401      	adds	r4, #1
 8026fa0:	e006      	b.n	8026fb0 <ceil+0xd0>
 8026fa2:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8026fa6:	2301      	movs	r3, #1
 8026fa8:	40b3      	lsls	r3, r6
 8026faa:	441d      	add	r5, r3
 8026fac:	45a8      	cmp	r8, r5
 8026fae:	d8f6      	bhi.n	8026f9e <ceil+0xbe>
 8026fb0:	ea25 0507 	bic.w	r5, r5, r7
 8026fb4:	e7b2      	b.n	8026f1c <ceil+0x3c>
 8026fb6:	2500      	movs	r5, #0
 8026fb8:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8026fbc:	e7ae      	b.n	8026f1c <ceil+0x3c>
 8026fbe:	4c05      	ldr	r4, [pc, #20]	@ (8026fd4 <ceil+0xf4>)
 8026fc0:	2500      	movs	r5, #0
 8026fc2:	e7ab      	b.n	8026f1c <ceil+0x3c>
 8026fc4:	f3af 8000 	nop.w
 8026fc8:	8800759c 	.word	0x8800759c
 8026fcc:	7e37e43c 	.word	0x7e37e43c
 8026fd0:	000fffff 	.word	0x000fffff
 8026fd4:	3ff00000 	.word	0x3ff00000

08026fd8 <__kernel_tan>:
 8026fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026fdc:	ec5b ab10 	vmov	sl, fp, d0
 8026fe0:	4bdb      	ldr	r3, [pc, #876]	@ (8027350 <__kernel_tan+0x378>)
 8026fe2:	b089      	sub	sp, #36	@ 0x24
 8026fe4:	f02b 4700 	bic.w	r7, fp, #2147483648	@ 0x80000000
 8026fe8:	429f      	cmp	r7, r3
 8026fea:	ec59 8b11 	vmov	r8, r9, d1
 8026fee:	4606      	mov	r6, r0
 8026ff0:	f8cd b008 	str.w	fp, [sp, #8]
 8026ff4:	d85d      	bhi.n	80270b2 <__kernel_tan+0xda>
 8026ff6:	4650      	mov	r0, sl
 8026ff8:	4659      	mov	r1, fp
 8026ffa:	f7f3 f8ad 	bl	801a158 <__aeabi_d2iz>
 8026ffe:	4605      	mov	r5, r0
 8027000:	2800      	cmp	r0, #0
 8027002:	d17c      	bne.n	80270fe <__kernel_tan+0x126>
 8027004:	1c73      	adds	r3, r6, #1
 8027006:	4652      	mov	r2, sl
 8027008:	4313      	orrs	r3, r2
 802700a:	433b      	orrs	r3, r7
 802700c:	d110      	bne.n	8027030 <__kernel_tan+0x58>
 802700e:	ec4b ab10 	vmov	d0, sl, fp
 8027012:	f001 faa1 	bl	8028558 <fabs>
 8027016:	49cf      	ldr	r1, [pc, #828]	@ (8027354 <__kernel_tan+0x37c>)
 8027018:	ec53 2b10 	vmov	r2, r3, d0
 802701c:	2000      	movs	r0, #0
 802701e:	f7f2 ff15 	bl	8019e4c <__aeabi_ddiv>
 8027022:	4682      	mov	sl, r0
 8027024:	468b      	mov	fp, r1
 8027026:	ec4b ab10 	vmov	d0, sl, fp
 802702a:	b009      	add	sp, #36	@ 0x24
 802702c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027030:	2e01      	cmp	r6, #1
 8027032:	d0f8      	beq.n	8027026 <__kernel_tan+0x4e>
 8027034:	4642      	mov	r2, r8
 8027036:	464b      	mov	r3, r9
 8027038:	4650      	mov	r0, sl
 802703a:	4659      	mov	r1, fp
 802703c:	f7f2 fc26 	bl	801988c <__adddf3>
 8027040:	4602      	mov	r2, r0
 8027042:	460b      	mov	r3, r1
 8027044:	460f      	mov	r7, r1
 8027046:	2000      	movs	r0, #0
 8027048:	49c3      	ldr	r1, [pc, #780]	@ (8027358 <__kernel_tan+0x380>)
 802704a:	f7f2 feff 	bl	8019e4c <__aeabi_ddiv>
 802704e:	e9cd 0100 	strd	r0, r1, [sp]
 8027052:	e9dd 2300 	ldrd	r2, r3, [sp]
 8027056:	462e      	mov	r6, r5
 8027058:	4652      	mov	r2, sl
 802705a:	462c      	mov	r4, r5
 802705c:	4630      	mov	r0, r6
 802705e:	461d      	mov	r5, r3
 8027060:	4639      	mov	r1, r7
 8027062:	465b      	mov	r3, fp
 8027064:	f7f2 fc10 	bl	8019888 <__aeabi_dsub>
 8027068:	4602      	mov	r2, r0
 802706a:	460b      	mov	r3, r1
 802706c:	4640      	mov	r0, r8
 802706e:	4649      	mov	r1, r9
 8027070:	f7f2 fc0a 	bl	8019888 <__aeabi_dsub>
 8027074:	4632      	mov	r2, r6
 8027076:	462b      	mov	r3, r5
 8027078:	f7f2 fdbe 	bl	8019bf8 <__aeabi_dmul>
 802707c:	4632      	mov	r2, r6
 802707e:	4682      	mov	sl, r0
 8027080:	468b      	mov	fp, r1
 8027082:	462b      	mov	r3, r5
 8027084:	4630      	mov	r0, r6
 8027086:	4639      	mov	r1, r7
 8027088:	f7f2 fdb6 	bl	8019bf8 <__aeabi_dmul>
 802708c:	4bb1      	ldr	r3, [pc, #708]	@ (8027354 <__kernel_tan+0x37c>)
 802708e:	2200      	movs	r2, #0
 8027090:	f7f2 fbfc 	bl	801988c <__adddf3>
 8027094:	4602      	mov	r2, r0
 8027096:	460b      	mov	r3, r1
 8027098:	4650      	mov	r0, sl
 802709a:	4659      	mov	r1, fp
 802709c:	f7f2 fbf6 	bl	801988c <__adddf3>
 80270a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80270a4:	f7f2 fda8 	bl	8019bf8 <__aeabi_dmul>
 80270a8:	4622      	mov	r2, r4
 80270aa:	462b      	mov	r3, r5
 80270ac:	f7f2 fbee 	bl	801988c <__adddf3>
 80270b0:	e7b7      	b.n	8027022 <__kernel_tan+0x4a>
 80270b2:	4baa      	ldr	r3, [pc, #680]	@ (802735c <__kernel_tan+0x384>)
 80270b4:	429f      	cmp	r7, r3
 80270b6:	d922      	bls.n	80270fe <__kernel_tan+0x126>
 80270b8:	9b02      	ldr	r3, [sp, #8]
 80270ba:	2b00      	cmp	r3, #0
 80270bc:	da05      	bge.n	80270ca <__kernel_tan+0xf2>
 80270be:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80270c2:	469b      	mov	fp, r3
 80270c4:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80270c8:	4699      	mov	r9, r3
 80270ca:	4652      	mov	r2, sl
 80270cc:	465b      	mov	r3, fp
 80270ce:	a182      	add	r1, pc, #520	@ (adr r1, 80272d8 <__kernel_tan+0x300>)
 80270d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80270d4:	f7f2 fbd8 	bl	8019888 <__aeabi_dsub>
 80270d8:	4642      	mov	r2, r8
 80270da:	464b      	mov	r3, r9
 80270dc:	4604      	mov	r4, r0
 80270de:	460d      	mov	r5, r1
 80270e0:	a17f      	add	r1, pc, #508	@ (adr r1, 80272e0 <__kernel_tan+0x308>)
 80270e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80270e6:	f7f2 fbcf 	bl	8019888 <__aeabi_dsub>
 80270ea:	4622      	mov	r2, r4
 80270ec:	462b      	mov	r3, r5
 80270ee:	f7f2 fbcd 	bl	801988c <__adddf3>
 80270f2:	f04f 0800 	mov.w	r8, #0
 80270f6:	4682      	mov	sl, r0
 80270f8:	468b      	mov	fp, r1
 80270fa:	f04f 0900 	mov.w	r9, #0
 80270fe:	4652      	mov	r2, sl
 8027100:	465b      	mov	r3, fp
 8027102:	4650      	mov	r0, sl
 8027104:	4659      	mov	r1, fp
 8027106:	f7f2 fd77 	bl	8019bf8 <__aeabi_dmul>
 802710a:	4602      	mov	r2, r0
 802710c:	460b      	mov	r3, r1
 802710e:	e9cd 2300 	strd	r2, r3, [sp]
 8027112:	f7f2 fd71 	bl	8019bf8 <__aeabi_dmul>
 8027116:	e9dd 2300 	ldrd	r2, r3, [sp]
 802711a:	4604      	mov	r4, r0
 802711c:	460d      	mov	r5, r1
 802711e:	4650      	mov	r0, sl
 8027120:	4659      	mov	r1, fp
 8027122:	f7f2 fd69 	bl	8019bf8 <__aeabi_dmul>
 8027126:	a370      	add	r3, pc, #448	@ (adr r3, 80272e8 <__kernel_tan+0x310>)
 8027128:	e9d3 2300 	ldrd	r2, r3, [r3]
 802712c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8027130:	4620      	mov	r0, r4
 8027132:	4629      	mov	r1, r5
 8027134:	f7f2 fd60 	bl	8019bf8 <__aeabi_dmul>
 8027138:	a36d      	add	r3, pc, #436	@ (adr r3, 80272f0 <__kernel_tan+0x318>)
 802713a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802713e:	f7f2 fba5 	bl	801988c <__adddf3>
 8027142:	4622      	mov	r2, r4
 8027144:	462b      	mov	r3, r5
 8027146:	f7f2 fd57 	bl	8019bf8 <__aeabi_dmul>
 802714a:	a36b      	add	r3, pc, #428	@ (adr r3, 80272f8 <__kernel_tan+0x320>)
 802714c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027150:	f7f2 fb9c 	bl	801988c <__adddf3>
 8027154:	4622      	mov	r2, r4
 8027156:	462b      	mov	r3, r5
 8027158:	f7f2 fd4e 	bl	8019bf8 <__aeabi_dmul>
 802715c:	a368      	add	r3, pc, #416	@ (adr r3, 8027300 <__kernel_tan+0x328>)
 802715e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027162:	f7f2 fb93 	bl	801988c <__adddf3>
 8027166:	4622      	mov	r2, r4
 8027168:	462b      	mov	r3, r5
 802716a:	f7f2 fd45 	bl	8019bf8 <__aeabi_dmul>
 802716e:	a366      	add	r3, pc, #408	@ (adr r3, 8027308 <__kernel_tan+0x330>)
 8027170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027174:	f7f2 fb8a 	bl	801988c <__adddf3>
 8027178:	4622      	mov	r2, r4
 802717a:	462b      	mov	r3, r5
 802717c:	f7f2 fd3c 	bl	8019bf8 <__aeabi_dmul>
 8027180:	a363      	add	r3, pc, #396	@ (adr r3, 8027310 <__kernel_tan+0x338>)
 8027182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027186:	f7f2 fb81 	bl	801988c <__adddf3>
 802718a:	e9dd 2300 	ldrd	r2, r3, [sp]
 802718e:	f7f2 fd33 	bl	8019bf8 <__aeabi_dmul>
 8027192:	a361      	add	r3, pc, #388	@ (adr r3, 8027318 <__kernel_tan+0x340>)
 8027194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027198:	e9cd 0106 	strd	r0, r1, [sp, #24]
 802719c:	4620      	mov	r0, r4
 802719e:	4629      	mov	r1, r5
 80271a0:	f7f2 fd2a 	bl	8019bf8 <__aeabi_dmul>
 80271a4:	a35e      	add	r3, pc, #376	@ (adr r3, 8027320 <__kernel_tan+0x348>)
 80271a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80271aa:	f7f2 fb6f 	bl	801988c <__adddf3>
 80271ae:	4622      	mov	r2, r4
 80271b0:	462b      	mov	r3, r5
 80271b2:	f7f2 fd21 	bl	8019bf8 <__aeabi_dmul>
 80271b6:	a35c      	add	r3, pc, #368	@ (adr r3, 8027328 <__kernel_tan+0x350>)
 80271b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80271bc:	f7f2 fb66 	bl	801988c <__adddf3>
 80271c0:	4622      	mov	r2, r4
 80271c2:	462b      	mov	r3, r5
 80271c4:	f7f2 fd18 	bl	8019bf8 <__aeabi_dmul>
 80271c8:	a359      	add	r3, pc, #356	@ (adr r3, 8027330 <__kernel_tan+0x358>)
 80271ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80271ce:	f7f2 fb5d 	bl	801988c <__adddf3>
 80271d2:	4622      	mov	r2, r4
 80271d4:	462b      	mov	r3, r5
 80271d6:	f7f2 fd0f 	bl	8019bf8 <__aeabi_dmul>
 80271da:	a357      	add	r3, pc, #348	@ (adr r3, 8027338 <__kernel_tan+0x360>)
 80271dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80271e0:	f7f2 fb54 	bl	801988c <__adddf3>
 80271e4:	4622      	mov	r2, r4
 80271e6:	462b      	mov	r3, r5
 80271e8:	f7f2 fd06 	bl	8019bf8 <__aeabi_dmul>
 80271ec:	a354      	add	r3, pc, #336	@ (adr r3, 8027340 <__kernel_tan+0x368>)
 80271ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80271f2:	f7f2 fb4b 	bl	801988c <__adddf3>
 80271f6:	4602      	mov	r2, r0
 80271f8:	460b      	mov	r3, r1
 80271fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80271fe:	f7f2 fb45 	bl	801988c <__adddf3>
 8027202:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8027206:	f7f2 fcf7 	bl	8019bf8 <__aeabi_dmul>
 802720a:	4642      	mov	r2, r8
 802720c:	464b      	mov	r3, r9
 802720e:	f7f2 fb3d 	bl	801988c <__adddf3>
 8027212:	e9dd 2300 	ldrd	r2, r3, [sp]
 8027216:	f7f2 fcef 	bl	8019bf8 <__aeabi_dmul>
 802721a:	4642      	mov	r2, r8
 802721c:	464b      	mov	r3, r9
 802721e:	f7f2 fb35 	bl	801988c <__adddf3>
 8027222:	a349      	add	r3, pc, #292	@ (adr r3, 8027348 <__kernel_tan+0x370>)
 8027224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027228:	4604      	mov	r4, r0
 802722a:	460d      	mov	r5, r1
 802722c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8027230:	f7f2 fce2 	bl	8019bf8 <__aeabi_dmul>
 8027234:	4622      	mov	r2, r4
 8027236:	462b      	mov	r3, r5
 8027238:	f7f2 fb28 	bl	801988c <__adddf3>
 802723c:	e9cd 0100 	strd	r0, r1, [sp]
 8027240:	460b      	mov	r3, r1
 8027242:	4602      	mov	r2, r0
 8027244:	4659      	mov	r1, fp
 8027246:	4650      	mov	r0, sl
 8027248:	f7f2 fb20 	bl	801988c <__adddf3>
 802724c:	4b43      	ldr	r3, [pc, #268]	@ (802735c <__kernel_tan+0x384>)
 802724e:	429f      	cmp	r7, r3
 8027250:	4604      	mov	r4, r0
 8027252:	460d      	mov	r5, r1
 8027254:	f240 8084 	bls.w	8027360 <__kernel_tan+0x388>
 8027258:	4630      	mov	r0, r6
 802725a:	f7f2 fc63 	bl	8019b24 <__aeabi_i2d>
 802725e:	4622      	mov	r2, r4
 8027260:	4680      	mov	r8, r0
 8027262:	4689      	mov	r9, r1
 8027264:	462b      	mov	r3, r5
 8027266:	4620      	mov	r0, r4
 8027268:	4629      	mov	r1, r5
 802726a:	f7f2 fcc5 	bl	8019bf8 <__aeabi_dmul>
 802726e:	4642      	mov	r2, r8
 8027270:	4606      	mov	r6, r0
 8027272:	460f      	mov	r7, r1
 8027274:	464b      	mov	r3, r9
 8027276:	4620      	mov	r0, r4
 8027278:	4629      	mov	r1, r5
 802727a:	f7f2 fb07 	bl	801988c <__adddf3>
 802727e:	4602      	mov	r2, r0
 8027280:	460b      	mov	r3, r1
 8027282:	4630      	mov	r0, r6
 8027284:	4639      	mov	r1, r7
 8027286:	f7f2 fde1 	bl	8019e4c <__aeabi_ddiv>
 802728a:	e9dd 2300 	ldrd	r2, r3, [sp]
 802728e:	f7f2 fafb 	bl	8019888 <__aeabi_dsub>
 8027292:	4602      	mov	r2, r0
 8027294:	460b      	mov	r3, r1
 8027296:	4650      	mov	r0, sl
 8027298:	4659      	mov	r1, fp
 802729a:	f7f2 faf5 	bl	8019888 <__aeabi_dsub>
 802729e:	4602      	mov	r2, r0
 80272a0:	460b      	mov	r3, r1
 80272a2:	f7f2 faf3 	bl	801988c <__adddf3>
 80272a6:	4602      	mov	r2, r0
 80272a8:	460b      	mov	r3, r1
 80272aa:	4640      	mov	r0, r8
 80272ac:	4649      	mov	r1, r9
 80272ae:	f7f2 faeb 	bl	8019888 <__aeabi_dsub>
 80272b2:	9b02      	ldr	r3, [sp, #8]
 80272b4:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 80272b8:	f00a 0a02 	and.w	sl, sl, #2
 80272bc:	4604      	mov	r4, r0
 80272be:	f1ca 0001 	rsb	r0, sl, #1
 80272c2:	460d      	mov	r5, r1
 80272c4:	f7f2 fc2e 	bl	8019b24 <__aeabi_i2d>
 80272c8:	4602      	mov	r2, r0
 80272ca:	460b      	mov	r3, r1
 80272cc:	4620      	mov	r0, r4
 80272ce:	4629      	mov	r1, r5
 80272d0:	f7f2 fc92 	bl	8019bf8 <__aeabi_dmul>
 80272d4:	e6a5      	b.n	8027022 <__kernel_tan+0x4a>
 80272d6:	bf00      	nop
 80272d8:	54442d18 	.word	0x54442d18
 80272dc:	3fe921fb 	.word	0x3fe921fb
 80272e0:	33145c07 	.word	0x33145c07
 80272e4:	3c81a626 	.word	0x3c81a626
 80272e8:	74bf7ad4 	.word	0x74bf7ad4
 80272ec:	3efb2a70 	.word	0x3efb2a70
 80272f0:	32f0a7e9 	.word	0x32f0a7e9
 80272f4:	3f12b80f 	.word	0x3f12b80f
 80272f8:	1a8d1068 	.word	0x1a8d1068
 80272fc:	3f3026f7 	.word	0x3f3026f7
 8027300:	fee08315 	.word	0xfee08315
 8027304:	3f57dbc8 	.word	0x3f57dbc8
 8027308:	e96e8493 	.word	0xe96e8493
 802730c:	3f8226e3 	.word	0x3f8226e3
 8027310:	1bb341fe 	.word	0x1bb341fe
 8027314:	3faba1ba 	.word	0x3faba1ba
 8027318:	db605373 	.word	0xdb605373
 802731c:	bef375cb 	.word	0xbef375cb
 8027320:	a03792a6 	.word	0xa03792a6
 8027324:	3f147e88 	.word	0x3f147e88
 8027328:	f2f26501 	.word	0xf2f26501
 802732c:	3f4344d8 	.word	0x3f4344d8
 8027330:	c9560328 	.word	0xc9560328
 8027334:	3f6d6d22 	.word	0x3f6d6d22
 8027338:	8406d637 	.word	0x8406d637
 802733c:	3f9664f4 	.word	0x3f9664f4
 8027340:	1110fe7a 	.word	0x1110fe7a
 8027344:	3fc11111 	.word	0x3fc11111
 8027348:	55555563 	.word	0x55555563
 802734c:	3fd55555 	.word	0x3fd55555
 8027350:	3e2fffff 	.word	0x3e2fffff
 8027354:	3ff00000 	.word	0x3ff00000
 8027358:	bff00000 	.word	0xbff00000
 802735c:	3fe59427 	.word	0x3fe59427
 8027360:	2e01      	cmp	r6, #1
 8027362:	d033      	beq.n	80273cc <__kernel_tan+0x3f4>
 8027364:	f04f 0800 	mov.w	r8, #0
 8027368:	4689      	mov	r9, r1
 802736a:	4602      	mov	r2, r0
 802736c:	460b      	mov	r3, r1
 802736e:	2000      	movs	r0, #0
 8027370:	4918      	ldr	r1, [pc, #96]	@ (80273d4 <__kernel_tan+0x3fc>)
 8027372:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8027376:	f7f2 fd69 	bl	8019e4c <__aeabi_ddiv>
 802737a:	4652      	mov	r2, sl
 802737c:	460f      	mov	r7, r1
 802737e:	465b      	mov	r3, fp
 8027380:	4606      	mov	r6, r0
 8027382:	460d      	mov	r5, r1
 8027384:	4640      	mov	r0, r8
 8027386:	4649      	mov	r1, r9
 8027388:	f7f2 fa7e 	bl	8019888 <__aeabi_dsub>
 802738c:	4602      	mov	r2, r0
 802738e:	460b      	mov	r3, r1
 8027390:	e9dd 0100 	ldrd	r0, r1, [sp]
 8027394:	f7f2 fa78 	bl	8019888 <__aeabi_dsub>
 8027398:	4642      	mov	r2, r8
 802739a:	463b      	mov	r3, r7
 802739c:	f7f2 fc2c 	bl	8019bf8 <__aeabi_dmul>
 80273a0:	4642      	mov	r2, r8
 80273a2:	4682      	mov	sl, r0
 80273a4:	468b      	mov	fp, r1
 80273a6:	463b      	mov	r3, r7
 80273a8:	4640      	mov	r0, r8
 80273aa:	4649      	mov	r1, r9
 80273ac:	f7f2 fc24 	bl	8019bf8 <__aeabi_dmul>
 80273b0:	4b09      	ldr	r3, [pc, #36]	@ (80273d8 <__kernel_tan+0x400>)
 80273b2:	2200      	movs	r2, #0
 80273b4:	f7f2 fa6a 	bl	801988c <__adddf3>
 80273b8:	4602      	mov	r2, r0
 80273ba:	460b      	mov	r3, r1
 80273bc:	4650      	mov	r0, sl
 80273be:	4659      	mov	r1, fp
 80273c0:	f7f2 fa64 	bl	801988c <__adddf3>
 80273c4:	4644      	mov	r4, r8
 80273c6:	4632      	mov	r2, r6
 80273c8:	463b      	mov	r3, r7
 80273ca:	e66b      	b.n	80270a4 <__kernel_tan+0xcc>
 80273cc:	4682      	mov	sl, r0
 80273ce:	468b      	mov	fp, r1
 80273d0:	e629      	b.n	8027026 <__kernel_tan+0x4e>
 80273d2:	bf00      	nop
 80273d4:	bff00000 	.word	0xbff00000
 80273d8:	3ff00000 	.word	0x3ff00000
 80273dc:	00000000 	.word	0x00000000

080273e0 <__ieee754_exp>:
 80273e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80273e4:	ec55 4b10 	vmov	r4, r5, d0
 80273e8:	49b1      	ldr	r1, [pc, #708]	@ (80276b0 <__ieee754_exp+0x2d0>)
 80273ea:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80273ee:	428a      	cmp	r2, r1
 80273f0:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 80273f4:	d936      	bls.n	8027464 <__ieee754_exp+0x84>
 80273f6:	49af      	ldr	r1, [pc, #700]	@ (80276b4 <__ieee754_exp+0x2d4>)
 80273f8:	428a      	cmp	r2, r1
 80273fa:	d914      	bls.n	8027426 <__ieee754_exp+0x46>
 80273fc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8027400:	4323      	orrs	r3, r4
 8027402:	4622      	mov	r2, r4
 8027404:	d007      	beq.n	8027416 <__ieee754_exp+0x36>
 8027406:	462b      	mov	r3, r5
 8027408:	4620      	mov	r0, r4
 802740a:	4629      	mov	r1, r5
 802740c:	f7f2 fa3e 	bl	801988c <__adddf3>
 8027410:	4604      	mov	r4, r0
 8027412:	460d      	mov	r5, r1
 8027414:	e002      	b.n	802741c <__ieee754_exp+0x3c>
 8027416:	2e00      	cmp	r6, #0
 8027418:	f040 8118 	bne.w	802764c <__ieee754_exp+0x26c>
 802741c:	ec45 4b10 	vmov	d0, r4, r5
 8027420:	b004      	add	sp, #16
 8027422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027426:	a38c      	add	r3, pc, #560	@ (adr r3, 8027658 <__ieee754_exp+0x278>)
 8027428:	e9d3 2300 	ldrd	r2, r3, [r3]
 802742c:	4620      	mov	r0, r4
 802742e:	4629      	mov	r1, r5
 8027430:	f7f2 fe72 	bl	801a118 <__aeabi_dcmpgt>
 8027434:	4607      	mov	r7, r0
 8027436:	b128      	cbz	r0, 8027444 <__ieee754_exp+0x64>
 8027438:	2000      	movs	r0, #0
 802743a:	b004      	add	sp, #16
 802743c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027440:	f7ff bc3a 	b.w	8026cb8 <__math_oflow>
 8027444:	a386      	add	r3, pc, #536	@ (adr r3, 8027660 <__ieee754_exp+0x280>)
 8027446:	e9d3 2300 	ldrd	r2, r3, [r3]
 802744a:	4620      	mov	r0, r4
 802744c:	4629      	mov	r1, r5
 802744e:	f7f2 fe45 	bl	801a0dc <__aeabi_dcmplt>
 8027452:	2800      	cmp	r0, #0
 8027454:	f000 8087 	beq.w	8027566 <__ieee754_exp+0x186>
 8027458:	4638      	mov	r0, r7
 802745a:	b004      	add	sp, #16
 802745c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027460:	f7ff bc22 	b.w	8026ca8 <__math_uflow>
 8027464:	4b94      	ldr	r3, [pc, #592]	@ (80276b8 <__ieee754_exp+0x2d8>)
 8027466:	429a      	cmp	r2, r3
 8027468:	f240 80a9 	bls.w	80275be <__ieee754_exp+0x1de>
 802746c:	4b93      	ldr	r3, [pc, #588]	@ (80276bc <__ieee754_exp+0x2dc>)
 802746e:	429a      	cmp	r2, r3
 8027470:	d879      	bhi.n	8027566 <__ieee754_exp+0x186>
 8027472:	4b93      	ldr	r3, [pc, #588]	@ (80276c0 <__ieee754_exp+0x2e0>)
 8027474:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8027478:	e9d3 2300 	ldrd	r2, r3, [r3]
 802747c:	4620      	mov	r0, r4
 802747e:	4629      	mov	r1, r5
 8027480:	f7f2 fa02 	bl	8019888 <__aeabi_dsub>
 8027484:	4b8f      	ldr	r3, [pc, #572]	@ (80276c4 <__ieee754_exp+0x2e4>)
 8027486:	00f7      	lsls	r7, r6, #3
 8027488:	443b      	add	r3, r7
 802748a:	ed93 7b00 	vldr	d7, [r3]
 802748e:	ed8d 7b00 	vstr	d7, [sp]
 8027492:	f1c6 0a01 	rsb	sl, r6, #1
 8027496:	4680      	mov	r8, r0
 8027498:	4689      	mov	r9, r1
 802749a:	ebaa 0a06 	sub.w	sl, sl, r6
 802749e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80274a2:	4640      	mov	r0, r8
 80274a4:	4649      	mov	r1, r9
 80274a6:	f7f2 f9ef 	bl	8019888 <__aeabi_dsub>
 80274aa:	4604      	mov	r4, r0
 80274ac:	460d      	mov	r5, r1
 80274ae:	4622      	mov	r2, r4
 80274b0:	462b      	mov	r3, r5
 80274b2:	4620      	mov	r0, r4
 80274b4:	4629      	mov	r1, r5
 80274b6:	f7f2 fb9f 	bl	8019bf8 <__aeabi_dmul>
 80274ba:	a36b      	add	r3, pc, #428	@ (adr r3, 8027668 <__ieee754_exp+0x288>)
 80274bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80274c0:	4606      	mov	r6, r0
 80274c2:	460f      	mov	r7, r1
 80274c4:	f7f2 fb98 	bl	8019bf8 <__aeabi_dmul>
 80274c8:	a369      	add	r3, pc, #420	@ (adr r3, 8027670 <__ieee754_exp+0x290>)
 80274ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80274ce:	f7f2 f9db 	bl	8019888 <__aeabi_dsub>
 80274d2:	4632      	mov	r2, r6
 80274d4:	463b      	mov	r3, r7
 80274d6:	f7f2 fb8f 	bl	8019bf8 <__aeabi_dmul>
 80274da:	a367      	add	r3, pc, #412	@ (adr r3, 8027678 <__ieee754_exp+0x298>)
 80274dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80274e0:	f7f2 f9d4 	bl	801988c <__adddf3>
 80274e4:	4632      	mov	r2, r6
 80274e6:	463b      	mov	r3, r7
 80274e8:	f7f2 fb86 	bl	8019bf8 <__aeabi_dmul>
 80274ec:	a364      	add	r3, pc, #400	@ (adr r3, 8027680 <__ieee754_exp+0x2a0>)
 80274ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80274f2:	f7f2 f9c9 	bl	8019888 <__aeabi_dsub>
 80274f6:	4632      	mov	r2, r6
 80274f8:	463b      	mov	r3, r7
 80274fa:	f7f2 fb7d 	bl	8019bf8 <__aeabi_dmul>
 80274fe:	a362      	add	r3, pc, #392	@ (adr r3, 8027688 <__ieee754_exp+0x2a8>)
 8027500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027504:	f7f2 f9c2 	bl	801988c <__adddf3>
 8027508:	4632      	mov	r2, r6
 802750a:	463b      	mov	r3, r7
 802750c:	f7f2 fb74 	bl	8019bf8 <__aeabi_dmul>
 8027510:	4602      	mov	r2, r0
 8027512:	460b      	mov	r3, r1
 8027514:	4620      	mov	r0, r4
 8027516:	4629      	mov	r1, r5
 8027518:	f7f2 f9b6 	bl	8019888 <__aeabi_dsub>
 802751c:	4602      	mov	r2, r0
 802751e:	460b      	mov	r3, r1
 8027520:	4606      	mov	r6, r0
 8027522:	460f      	mov	r7, r1
 8027524:	4620      	mov	r0, r4
 8027526:	4629      	mov	r1, r5
 8027528:	f7f2 fb66 	bl	8019bf8 <__aeabi_dmul>
 802752c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8027530:	f1ba 0f00 	cmp.w	sl, #0
 8027534:	d15c      	bne.n	80275f0 <__ieee754_exp+0x210>
 8027536:	2200      	movs	r2, #0
 8027538:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 802753c:	4630      	mov	r0, r6
 802753e:	4639      	mov	r1, r7
 8027540:	f7f2 f9a2 	bl	8019888 <__aeabi_dsub>
 8027544:	4602      	mov	r2, r0
 8027546:	460b      	mov	r3, r1
 8027548:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802754c:	f7f2 fc7e 	bl	8019e4c <__aeabi_ddiv>
 8027550:	4622      	mov	r2, r4
 8027552:	462b      	mov	r3, r5
 8027554:	f7f2 f998 	bl	8019888 <__aeabi_dsub>
 8027558:	4602      	mov	r2, r0
 802755a:	460b      	mov	r3, r1
 802755c:	2000      	movs	r0, #0
 802755e:	495a      	ldr	r1, [pc, #360]	@ (80276c8 <__ieee754_exp+0x2e8>)
 8027560:	f7f2 f992 	bl	8019888 <__aeabi_dsub>
 8027564:	e754      	b.n	8027410 <__ieee754_exp+0x30>
 8027566:	4b59      	ldr	r3, [pc, #356]	@ (80276cc <__ieee754_exp+0x2ec>)
 8027568:	4620      	mov	r0, r4
 802756a:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 802756e:	4629      	mov	r1, r5
 8027570:	a347      	add	r3, pc, #284	@ (adr r3, 8027690 <__ieee754_exp+0x2b0>)
 8027572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027576:	f7f2 fb3f 	bl	8019bf8 <__aeabi_dmul>
 802757a:	e9d6 2300 	ldrd	r2, r3, [r6]
 802757e:	f7f2 f985 	bl	801988c <__adddf3>
 8027582:	f7f2 fde9 	bl	801a158 <__aeabi_d2iz>
 8027586:	4682      	mov	sl, r0
 8027588:	f7f2 facc 	bl	8019b24 <__aeabi_i2d>
 802758c:	a342      	add	r3, pc, #264	@ (adr r3, 8027698 <__ieee754_exp+0x2b8>)
 802758e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027592:	4606      	mov	r6, r0
 8027594:	460f      	mov	r7, r1
 8027596:	f7f2 fb2f 	bl	8019bf8 <__aeabi_dmul>
 802759a:	4602      	mov	r2, r0
 802759c:	460b      	mov	r3, r1
 802759e:	4620      	mov	r0, r4
 80275a0:	4629      	mov	r1, r5
 80275a2:	f7f2 f971 	bl	8019888 <__aeabi_dsub>
 80275a6:	a33e      	add	r3, pc, #248	@ (adr r3, 80276a0 <__ieee754_exp+0x2c0>)
 80275a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80275ac:	4680      	mov	r8, r0
 80275ae:	4689      	mov	r9, r1
 80275b0:	4630      	mov	r0, r6
 80275b2:	4639      	mov	r1, r7
 80275b4:	f7f2 fb20 	bl	8019bf8 <__aeabi_dmul>
 80275b8:	e9cd 0100 	strd	r0, r1, [sp]
 80275bc:	e76f      	b.n	802749e <__ieee754_exp+0xbe>
 80275be:	4b44      	ldr	r3, [pc, #272]	@ (80276d0 <__ieee754_exp+0x2f0>)
 80275c0:	429a      	cmp	r2, r3
 80275c2:	d810      	bhi.n	80275e6 <__ieee754_exp+0x206>
 80275c4:	a338      	add	r3, pc, #224	@ (adr r3, 80276a8 <__ieee754_exp+0x2c8>)
 80275c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80275ca:	4620      	mov	r0, r4
 80275cc:	4629      	mov	r1, r5
 80275ce:	f7f2 f95d 	bl	801988c <__adddf3>
 80275d2:	4b3d      	ldr	r3, [pc, #244]	@ (80276c8 <__ieee754_exp+0x2e8>)
 80275d4:	2200      	movs	r2, #0
 80275d6:	f7f2 fd9f 	bl	801a118 <__aeabi_dcmpgt>
 80275da:	b138      	cbz	r0, 80275ec <__ieee754_exp+0x20c>
 80275dc:	4b3a      	ldr	r3, [pc, #232]	@ (80276c8 <__ieee754_exp+0x2e8>)
 80275de:	2200      	movs	r2, #0
 80275e0:	4620      	mov	r0, r4
 80275e2:	4629      	mov	r1, r5
 80275e4:	e712      	b.n	802740c <__ieee754_exp+0x2c>
 80275e6:	f04f 0a00 	mov.w	sl, #0
 80275ea:	e760      	b.n	80274ae <__ieee754_exp+0xce>
 80275ec:	4682      	mov	sl, r0
 80275ee:	e75e      	b.n	80274ae <__ieee754_exp+0xce>
 80275f0:	4632      	mov	r2, r6
 80275f2:	463b      	mov	r3, r7
 80275f4:	2000      	movs	r0, #0
 80275f6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80275fa:	f7f2 f945 	bl	8019888 <__aeabi_dsub>
 80275fe:	4602      	mov	r2, r0
 8027600:	460b      	mov	r3, r1
 8027602:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8027606:	f7f2 fc21 	bl	8019e4c <__aeabi_ddiv>
 802760a:	4602      	mov	r2, r0
 802760c:	460b      	mov	r3, r1
 802760e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8027612:	f7f2 f939 	bl	8019888 <__aeabi_dsub>
 8027616:	4642      	mov	r2, r8
 8027618:	464b      	mov	r3, r9
 802761a:	f7f2 f935 	bl	8019888 <__aeabi_dsub>
 802761e:	4602      	mov	r2, r0
 8027620:	460b      	mov	r3, r1
 8027622:	2000      	movs	r0, #0
 8027624:	4928      	ldr	r1, [pc, #160]	@ (80276c8 <__ieee754_exp+0x2e8>)
 8027626:	f7f2 f92f 	bl	8019888 <__aeabi_dsub>
 802762a:	f46f 727f 	mvn.w	r2, #1020	@ 0x3fc
 802762e:	4592      	cmp	sl, r2
 8027630:	db02      	blt.n	8027638 <__ieee754_exp+0x258>
 8027632:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8027636:	e6eb      	b.n	8027410 <__ieee754_exp+0x30>
 8027638:	f50a 7a7a 	add.w	sl, sl, #1000	@ 0x3e8
 802763c:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8027640:	2200      	movs	r2, #0
 8027642:	f04f 73b8 	mov.w	r3, #24117248	@ 0x1700000
 8027646:	f7f2 fad7 	bl	8019bf8 <__aeabi_dmul>
 802764a:	e6e1      	b.n	8027410 <__ieee754_exp+0x30>
 802764c:	2400      	movs	r4, #0
 802764e:	2500      	movs	r5, #0
 8027650:	e6e4      	b.n	802741c <__ieee754_exp+0x3c>
 8027652:	bf00      	nop
 8027654:	f3af 8000 	nop.w
 8027658:	fefa39ef 	.word	0xfefa39ef
 802765c:	40862e42 	.word	0x40862e42
 8027660:	d52d3051 	.word	0xd52d3051
 8027664:	c0874910 	.word	0xc0874910
 8027668:	72bea4d0 	.word	0x72bea4d0
 802766c:	3e663769 	.word	0x3e663769
 8027670:	c5d26bf1 	.word	0xc5d26bf1
 8027674:	3ebbbd41 	.word	0x3ebbbd41
 8027678:	af25de2c 	.word	0xaf25de2c
 802767c:	3f11566a 	.word	0x3f11566a
 8027680:	16bebd93 	.word	0x16bebd93
 8027684:	3f66c16c 	.word	0x3f66c16c
 8027688:	5555553e 	.word	0x5555553e
 802768c:	3fc55555 	.word	0x3fc55555
 8027690:	652b82fe 	.word	0x652b82fe
 8027694:	3ff71547 	.word	0x3ff71547
 8027698:	fee00000 	.word	0xfee00000
 802769c:	3fe62e42 	.word	0x3fe62e42
 80276a0:	35793c76 	.word	0x35793c76
 80276a4:	3dea39ef 	.word	0x3dea39ef
 80276a8:	8800759c 	.word	0x8800759c
 80276ac:	7e37e43c 	.word	0x7e37e43c
 80276b0:	40862e41 	.word	0x40862e41
 80276b4:	7fefffff 	.word	0x7fefffff
 80276b8:	3fd62e42 	.word	0x3fd62e42
 80276bc:	3ff0a2b1 	.word	0x3ff0a2b1
 80276c0:	08044ab0 	.word	0x08044ab0
 80276c4:	08044aa0 	.word	0x08044aa0
 80276c8:	3ff00000 	.word	0x3ff00000
 80276cc:	08044ac0 	.word	0x08044ac0
 80276d0:	3defffff 	.word	0x3defffff
 80276d4:	00000000 	.word	0x00000000

080276d8 <__ieee754_pow>:
 80276d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80276dc:	b091      	sub	sp, #68	@ 0x44
 80276de:	ed8d 1b00 	vstr	d1, [sp]
 80276e2:	e9dd 1900 	ldrd	r1, r9, [sp]
 80276e6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80276ea:	ea5a 0001 	orrs.w	r0, sl, r1
 80276ee:	ec57 6b10 	vmov	r6, r7, d0
 80276f2:	d113      	bne.n	802771c <__ieee754_pow+0x44>
 80276f4:	19b3      	adds	r3, r6, r6
 80276f6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80276fa:	4152      	adcs	r2, r2
 80276fc:	4298      	cmp	r0, r3
 80276fe:	4b98      	ldr	r3, [pc, #608]	@ (8027960 <__ieee754_pow+0x288>)
 8027700:	4193      	sbcs	r3, r2
 8027702:	f080 84ea 	bcs.w	80280da <__ieee754_pow+0xa02>
 8027706:	e9dd 2300 	ldrd	r2, r3, [sp]
 802770a:	4630      	mov	r0, r6
 802770c:	4639      	mov	r1, r7
 802770e:	f7f2 f8bd 	bl	801988c <__adddf3>
 8027712:	ec41 0b10 	vmov	d0, r0, r1
 8027716:	b011      	add	sp, #68	@ 0x44
 8027718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802771c:	4a91      	ldr	r2, [pc, #580]	@ (8027964 <__ieee754_pow+0x28c>)
 802771e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8027722:	4590      	cmp	r8, r2
 8027724:	463d      	mov	r5, r7
 8027726:	4633      	mov	r3, r6
 8027728:	d806      	bhi.n	8027738 <__ieee754_pow+0x60>
 802772a:	d101      	bne.n	8027730 <__ieee754_pow+0x58>
 802772c:	2e00      	cmp	r6, #0
 802772e:	d1ea      	bne.n	8027706 <__ieee754_pow+0x2e>
 8027730:	4592      	cmp	sl, r2
 8027732:	d801      	bhi.n	8027738 <__ieee754_pow+0x60>
 8027734:	d10e      	bne.n	8027754 <__ieee754_pow+0x7c>
 8027736:	b169      	cbz	r1, 8027754 <__ieee754_pow+0x7c>
 8027738:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 802773c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8027740:	431d      	orrs	r5, r3
 8027742:	d1e0      	bne.n	8027706 <__ieee754_pow+0x2e>
 8027744:	e9dd 3200 	ldrd	r3, r2, [sp]
 8027748:	18db      	adds	r3, r3, r3
 802774a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 802774e:	4152      	adcs	r2, r2
 8027750:	429d      	cmp	r5, r3
 8027752:	e7d4      	b.n	80276fe <__ieee754_pow+0x26>
 8027754:	2d00      	cmp	r5, #0
 8027756:	46c3      	mov	fp, r8
 8027758:	da3a      	bge.n	80277d0 <__ieee754_pow+0xf8>
 802775a:	4a83      	ldr	r2, [pc, #524]	@ (8027968 <__ieee754_pow+0x290>)
 802775c:	4592      	cmp	sl, r2
 802775e:	d84d      	bhi.n	80277fc <__ieee754_pow+0x124>
 8027760:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8027764:	4592      	cmp	sl, r2
 8027766:	f240 84c7 	bls.w	80280f8 <__ieee754_pow+0xa20>
 802776a:	ea4f 522a 	mov.w	r2, sl, asr #20
 802776e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8027772:	2a14      	cmp	r2, #20
 8027774:	dd0f      	ble.n	8027796 <__ieee754_pow+0xbe>
 8027776:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 802777a:	fa21 f402 	lsr.w	r4, r1, r2
 802777e:	fa04 f202 	lsl.w	r2, r4, r2
 8027782:	428a      	cmp	r2, r1
 8027784:	f040 84b8 	bne.w	80280f8 <__ieee754_pow+0xa20>
 8027788:	f004 0401 	and.w	r4, r4, #1
 802778c:	f1c4 0402 	rsb	r4, r4, #2
 8027790:	2900      	cmp	r1, #0
 8027792:	d158      	bne.n	8027846 <__ieee754_pow+0x16e>
 8027794:	e00e      	b.n	80277b4 <__ieee754_pow+0xdc>
 8027796:	2900      	cmp	r1, #0
 8027798:	d154      	bne.n	8027844 <__ieee754_pow+0x16c>
 802779a:	f1c2 0214 	rsb	r2, r2, #20
 802779e:	fa4a f402 	asr.w	r4, sl, r2
 80277a2:	fa04 f202 	lsl.w	r2, r4, r2
 80277a6:	4552      	cmp	r2, sl
 80277a8:	f040 84a3 	bne.w	80280f2 <__ieee754_pow+0xa1a>
 80277ac:	f004 0401 	and.w	r4, r4, #1
 80277b0:	f1c4 0402 	rsb	r4, r4, #2
 80277b4:	4a6d      	ldr	r2, [pc, #436]	@ (802796c <__ieee754_pow+0x294>)
 80277b6:	4592      	cmp	sl, r2
 80277b8:	d12e      	bne.n	8027818 <__ieee754_pow+0x140>
 80277ba:	f1b9 0f00 	cmp.w	r9, #0
 80277be:	f280 8494 	bge.w	80280ea <__ieee754_pow+0xa12>
 80277c2:	496a      	ldr	r1, [pc, #424]	@ (802796c <__ieee754_pow+0x294>)
 80277c4:	4632      	mov	r2, r6
 80277c6:	463b      	mov	r3, r7
 80277c8:	2000      	movs	r0, #0
 80277ca:	f7f2 fb3f 	bl	8019e4c <__aeabi_ddiv>
 80277ce:	e7a0      	b.n	8027712 <__ieee754_pow+0x3a>
 80277d0:	2400      	movs	r4, #0
 80277d2:	bbc1      	cbnz	r1, 8027846 <__ieee754_pow+0x16e>
 80277d4:	4a63      	ldr	r2, [pc, #396]	@ (8027964 <__ieee754_pow+0x28c>)
 80277d6:	4592      	cmp	sl, r2
 80277d8:	d1ec      	bne.n	80277b4 <__ieee754_pow+0xdc>
 80277da:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 80277de:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80277e2:	431a      	orrs	r2, r3
 80277e4:	f000 8479 	beq.w	80280da <__ieee754_pow+0xa02>
 80277e8:	4b61      	ldr	r3, [pc, #388]	@ (8027970 <__ieee754_pow+0x298>)
 80277ea:	4598      	cmp	r8, r3
 80277ec:	d908      	bls.n	8027800 <__ieee754_pow+0x128>
 80277ee:	f1b9 0f00 	cmp.w	r9, #0
 80277f2:	f2c0 8476 	blt.w	80280e2 <__ieee754_pow+0xa0a>
 80277f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80277fa:	e78a      	b.n	8027712 <__ieee754_pow+0x3a>
 80277fc:	2402      	movs	r4, #2
 80277fe:	e7e8      	b.n	80277d2 <__ieee754_pow+0xfa>
 8027800:	f1b9 0f00 	cmp.w	r9, #0
 8027804:	f04f 0000 	mov.w	r0, #0
 8027808:	f04f 0100 	mov.w	r1, #0
 802780c:	da81      	bge.n	8027712 <__ieee754_pow+0x3a>
 802780e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8027812:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8027816:	e77c      	b.n	8027712 <__ieee754_pow+0x3a>
 8027818:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 802781c:	d106      	bne.n	802782c <__ieee754_pow+0x154>
 802781e:	4632      	mov	r2, r6
 8027820:	463b      	mov	r3, r7
 8027822:	4630      	mov	r0, r6
 8027824:	4639      	mov	r1, r7
 8027826:	f7f2 f9e7 	bl	8019bf8 <__aeabi_dmul>
 802782a:	e772      	b.n	8027712 <__ieee754_pow+0x3a>
 802782c:	4a51      	ldr	r2, [pc, #324]	@ (8027974 <__ieee754_pow+0x29c>)
 802782e:	4591      	cmp	r9, r2
 8027830:	d109      	bne.n	8027846 <__ieee754_pow+0x16e>
 8027832:	2d00      	cmp	r5, #0
 8027834:	db07      	blt.n	8027846 <__ieee754_pow+0x16e>
 8027836:	ec47 6b10 	vmov	d0, r6, r7
 802783a:	b011      	add	sp, #68	@ 0x44
 802783c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027840:	f7ff ba72 	b.w	8026d28 <__ieee754_sqrt>
 8027844:	2400      	movs	r4, #0
 8027846:	ec47 6b10 	vmov	d0, r6, r7
 802784a:	9302      	str	r3, [sp, #8]
 802784c:	f000 fe84 	bl	8028558 <fabs>
 8027850:	9b02      	ldr	r3, [sp, #8]
 8027852:	ec51 0b10 	vmov	r0, r1, d0
 8027856:	bb53      	cbnz	r3, 80278ae <__ieee754_pow+0x1d6>
 8027858:	4b44      	ldr	r3, [pc, #272]	@ (802796c <__ieee754_pow+0x294>)
 802785a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 802785e:	429a      	cmp	r2, r3
 8027860:	d002      	beq.n	8027868 <__ieee754_pow+0x190>
 8027862:	f1b8 0f00 	cmp.w	r8, #0
 8027866:	d122      	bne.n	80278ae <__ieee754_pow+0x1d6>
 8027868:	f1b9 0f00 	cmp.w	r9, #0
 802786c:	da05      	bge.n	802787a <__ieee754_pow+0x1a2>
 802786e:	4602      	mov	r2, r0
 8027870:	460b      	mov	r3, r1
 8027872:	2000      	movs	r0, #0
 8027874:	493d      	ldr	r1, [pc, #244]	@ (802796c <__ieee754_pow+0x294>)
 8027876:	f7f2 fae9 	bl	8019e4c <__aeabi_ddiv>
 802787a:	2d00      	cmp	r5, #0
 802787c:	f6bf af49 	bge.w	8027712 <__ieee754_pow+0x3a>
 8027880:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8027884:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8027888:	ea58 0804 	orrs.w	r8, r8, r4
 802788c:	d108      	bne.n	80278a0 <__ieee754_pow+0x1c8>
 802788e:	4602      	mov	r2, r0
 8027890:	460b      	mov	r3, r1
 8027892:	4610      	mov	r0, r2
 8027894:	4619      	mov	r1, r3
 8027896:	f7f1 fff7 	bl	8019888 <__aeabi_dsub>
 802789a:	4602      	mov	r2, r0
 802789c:	460b      	mov	r3, r1
 802789e:	e794      	b.n	80277ca <__ieee754_pow+0xf2>
 80278a0:	2c01      	cmp	r4, #1
 80278a2:	f47f af36 	bne.w	8027712 <__ieee754_pow+0x3a>
 80278a6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80278aa:	4619      	mov	r1, r3
 80278ac:	e731      	b.n	8027712 <__ieee754_pow+0x3a>
 80278ae:	0feb      	lsrs	r3, r5, #31
 80278b0:	3b01      	subs	r3, #1
 80278b2:	ea53 0204 	orrs.w	r2, r3, r4
 80278b6:	d102      	bne.n	80278be <__ieee754_pow+0x1e6>
 80278b8:	4632      	mov	r2, r6
 80278ba:	463b      	mov	r3, r7
 80278bc:	e7e9      	b.n	8027892 <__ieee754_pow+0x1ba>
 80278be:	3c01      	subs	r4, #1
 80278c0:	431c      	orrs	r4, r3
 80278c2:	d016      	beq.n	80278f2 <__ieee754_pow+0x21a>
 80278c4:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8027950 <__ieee754_pow+0x278>
 80278c8:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80278cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80278d0:	f240 8112 	bls.w	8027af8 <__ieee754_pow+0x420>
 80278d4:	4b28      	ldr	r3, [pc, #160]	@ (8027978 <__ieee754_pow+0x2a0>)
 80278d6:	459a      	cmp	sl, r3
 80278d8:	4b25      	ldr	r3, [pc, #148]	@ (8027970 <__ieee754_pow+0x298>)
 80278da:	d916      	bls.n	802790a <__ieee754_pow+0x232>
 80278dc:	4598      	cmp	r8, r3
 80278de:	d80b      	bhi.n	80278f8 <__ieee754_pow+0x220>
 80278e0:	f1b9 0f00 	cmp.w	r9, #0
 80278e4:	da0b      	bge.n	80278fe <__ieee754_pow+0x226>
 80278e6:	2000      	movs	r0, #0
 80278e8:	b011      	add	sp, #68	@ 0x44
 80278ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80278ee:	f7ff b9e3 	b.w	8026cb8 <__math_oflow>
 80278f2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8027958 <__ieee754_pow+0x280>
 80278f6:	e7e7      	b.n	80278c8 <__ieee754_pow+0x1f0>
 80278f8:	f1b9 0f00 	cmp.w	r9, #0
 80278fc:	dcf3      	bgt.n	80278e6 <__ieee754_pow+0x20e>
 80278fe:	2000      	movs	r0, #0
 8027900:	b011      	add	sp, #68	@ 0x44
 8027902:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027906:	f7ff b9cf 	b.w	8026ca8 <__math_uflow>
 802790a:	4598      	cmp	r8, r3
 802790c:	d20c      	bcs.n	8027928 <__ieee754_pow+0x250>
 802790e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8027912:	2200      	movs	r2, #0
 8027914:	2300      	movs	r3, #0
 8027916:	f7f2 fbe1 	bl	801a0dc <__aeabi_dcmplt>
 802791a:	3800      	subs	r0, #0
 802791c:	bf18      	it	ne
 802791e:	2001      	movne	r0, #1
 8027920:	f1b9 0f00 	cmp.w	r9, #0
 8027924:	daec      	bge.n	8027900 <__ieee754_pow+0x228>
 8027926:	e7df      	b.n	80278e8 <__ieee754_pow+0x210>
 8027928:	4b10      	ldr	r3, [pc, #64]	@ (802796c <__ieee754_pow+0x294>)
 802792a:	4598      	cmp	r8, r3
 802792c:	f04f 0200 	mov.w	r2, #0
 8027930:	d924      	bls.n	802797c <__ieee754_pow+0x2a4>
 8027932:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8027936:	2300      	movs	r3, #0
 8027938:	f7f2 fbd0 	bl	801a0dc <__aeabi_dcmplt>
 802793c:	3800      	subs	r0, #0
 802793e:	bf18      	it	ne
 8027940:	2001      	movne	r0, #1
 8027942:	f1b9 0f00 	cmp.w	r9, #0
 8027946:	dccf      	bgt.n	80278e8 <__ieee754_pow+0x210>
 8027948:	e7da      	b.n	8027900 <__ieee754_pow+0x228>
 802794a:	bf00      	nop
 802794c:	f3af 8000 	nop.w
 8027950:	00000000 	.word	0x00000000
 8027954:	3ff00000 	.word	0x3ff00000
 8027958:	00000000 	.word	0x00000000
 802795c:	bff00000 	.word	0xbff00000
 8027960:	fff00000 	.word	0xfff00000
 8027964:	7ff00000 	.word	0x7ff00000
 8027968:	433fffff 	.word	0x433fffff
 802796c:	3ff00000 	.word	0x3ff00000
 8027970:	3fefffff 	.word	0x3fefffff
 8027974:	3fe00000 	.word	0x3fe00000
 8027978:	43f00000 	.word	0x43f00000
 802797c:	4b5a      	ldr	r3, [pc, #360]	@ (8027ae8 <__ieee754_pow+0x410>)
 802797e:	f7f1 ff83 	bl	8019888 <__aeabi_dsub>
 8027982:	a351      	add	r3, pc, #324	@ (adr r3, 8027ac8 <__ieee754_pow+0x3f0>)
 8027984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027988:	4604      	mov	r4, r0
 802798a:	460d      	mov	r5, r1
 802798c:	f7f2 f934 	bl	8019bf8 <__aeabi_dmul>
 8027990:	a34f      	add	r3, pc, #316	@ (adr r3, 8027ad0 <__ieee754_pow+0x3f8>)
 8027992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027996:	4606      	mov	r6, r0
 8027998:	460f      	mov	r7, r1
 802799a:	4620      	mov	r0, r4
 802799c:	4629      	mov	r1, r5
 802799e:	f7f2 f92b 	bl	8019bf8 <__aeabi_dmul>
 80279a2:	4b52      	ldr	r3, [pc, #328]	@ (8027aec <__ieee754_pow+0x414>)
 80279a4:	4682      	mov	sl, r0
 80279a6:	468b      	mov	fp, r1
 80279a8:	2200      	movs	r2, #0
 80279aa:	4620      	mov	r0, r4
 80279ac:	4629      	mov	r1, r5
 80279ae:	f7f2 f923 	bl	8019bf8 <__aeabi_dmul>
 80279b2:	4602      	mov	r2, r0
 80279b4:	460b      	mov	r3, r1
 80279b6:	a148      	add	r1, pc, #288	@ (adr r1, 8027ad8 <__ieee754_pow+0x400>)
 80279b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80279bc:	f7f1 ff64 	bl	8019888 <__aeabi_dsub>
 80279c0:	4622      	mov	r2, r4
 80279c2:	462b      	mov	r3, r5
 80279c4:	f7f2 f918 	bl	8019bf8 <__aeabi_dmul>
 80279c8:	4602      	mov	r2, r0
 80279ca:	460b      	mov	r3, r1
 80279cc:	2000      	movs	r0, #0
 80279ce:	4948      	ldr	r1, [pc, #288]	@ (8027af0 <__ieee754_pow+0x418>)
 80279d0:	f7f1 ff5a 	bl	8019888 <__aeabi_dsub>
 80279d4:	4622      	mov	r2, r4
 80279d6:	4680      	mov	r8, r0
 80279d8:	4689      	mov	r9, r1
 80279da:	462b      	mov	r3, r5
 80279dc:	4620      	mov	r0, r4
 80279de:	4629      	mov	r1, r5
 80279e0:	f7f2 f90a 	bl	8019bf8 <__aeabi_dmul>
 80279e4:	4602      	mov	r2, r0
 80279e6:	460b      	mov	r3, r1
 80279e8:	4640      	mov	r0, r8
 80279ea:	4649      	mov	r1, r9
 80279ec:	f7f2 f904 	bl	8019bf8 <__aeabi_dmul>
 80279f0:	a33b      	add	r3, pc, #236	@ (adr r3, 8027ae0 <__ieee754_pow+0x408>)
 80279f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80279f6:	f7f2 f8ff 	bl	8019bf8 <__aeabi_dmul>
 80279fa:	4602      	mov	r2, r0
 80279fc:	460b      	mov	r3, r1
 80279fe:	4650      	mov	r0, sl
 8027a00:	4659      	mov	r1, fp
 8027a02:	f7f1 ff41 	bl	8019888 <__aeabi_dsub>
 8027a06:	4602      	mov	r2, r0
 8027a08:	460b      	mov	r3, r1
 8027a0a:	4680      	mov	r8, r0
 8027a0c:	4689      	mov	r9, r1
 8027a0e:	4630      	mov	r0, r6
 8027a10:	4639      	mov	r1, r7
 8027a12:	f7f1 ff3b 	bl	801988c <__adddf3>
 8027a16:	2400      	movs	r4, #0
 8027a18:	4632      	mov	r2, r6
 8027a1a:	463b      	mov	r3, r7
 8027a1c:	4620      	mov	r0, r4
 8027a1e:	460d      	mov	r5, r1
 8027a20:	f7f1 ff32 	bl	8019888 <__aeabi_dsub>
 8027a24:	4602      	mov	r2, r0
 8027a26:	460b      	mov	r3, r1
 8027a28:	4640      	mov	r0, r8
 8027a2a:	4649      	mov	r1, r9
 8027a2c:	f7f1 ff2c 	bl	8019888 <__aeabi_dsub>
 8027a30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8027a34:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8027a38:	2300      	movs	r3, #0
 8027a3a:	9304      	str	r3, [sp, #16]
 8027a3c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8027a40:	4606      	mov	r6, r0
 8027a42:	460f      	mov	r7, r1
 8027a44:	4652      	mov	r2, sl
 8027a46:	465b      	mov	r3, fp
 8027a48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8027a4c:	f7f1 ff1c 	bl	8019888 <__aeabi_dsub>
 8027a50:	4622      	mov	r2, r4
 8027a52:	462b      	mov	r3, r5
 8027a54:	f7f2 f8d0 	bl	8019bf8 <__aeabi_dmul>
 8027a58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8027a5c:	4680      	mov	r8, r0
 8027a5e:	4689      	mov	r9, r1
 8027a60:	4630      	mov	r0, r6
 8027a62:	4639      	mov	r1, r7
 8027a64:	f7f2 f8c8 	bl	8019bf8 <__aeabi_dmul>
 8027a68:	4602      	mov	r2, r0
 8027a6a:	460b      	mov	r3, r1
 8027a6c:	4640      	mov	r0, r8
 8027a6e:	4649      	mov	r1, r9
 8027a70:	f7f1 ff0c 	bl	801988c <__adddf3>
 8027a74:	4652      	mov	r2, sl
 8027a76:	465b      	mov	r3, fp
 8027a78:	4606      	mov	r6, r0
 8027a7a:	460f      	mov	r7, r1
 8027a7c:	4620      	mov	r0, r4
 8027a7e:	4629      	mov	r1, r5
 8027a80:	f7f2 f8ba 	bl	8019bf8 <__aeabi_dmul>
 8027a84:	460b      	mov	r3, r1
 8027a86:	4602      	mov	r2, r0
 8027a88:	4680      	mov	r8, r0
 8027a8a:	4689      	mov	r9, r1
 8027a8c:	4630      	mov	r0, r6
 8027a8e:	4639      	mov	r1, r7
 8027a90:	f7f1 fefc 	bl	801988c <__adddf3>
 8027a94:	4b17      	ldr	r3, [pc, #92]	@ (8027af4 <__ieee754_pow+0x41c>)
 8027a96:	4299      	cmp	r1, r3
 8027a98:	4604      	mov	r4, r0
 8027a9a:	460d      	mov	r5, r1
 8027a9c:	468a      	mov	sl, r1
 8027a9e:	468b      	mov	fp, r1
 8027aa0:	f340 82ef 	ble.w	8028082 <__ieee754_pow+0x9aa>
 8027aa4:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8027aa8:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8027aac:	4303      	orrs	r3, r0
 8027aae:	f000 81e8 	beq.w	8027e82 <__ieee754_pow+0x7aa>
 8027ab2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8027ab6:	2200      	movs	r2, #0
 8027ab8:	2300      	movs	r3, #0
 8027aba:	f7f2 fb0f 	bl	801a0dc <__aeabi_dcmplt>
 8027abe:	3800      	subs	r0, #0
 8027ac0:	bf18      	it	ne
 8027ac2:	2001      	movne	r0, #1
 8027ac4:	e710      	b.n	80278e8 <__ieee754_pow+0x210>
 8027ac6:	bf00      	nop
 8027ac8:	60000000 	.word	0x60000000
 8027acc:	3ff71547 	.word	0x3ff71547
 8027ad0:	f85ddf44 	.word	0xf85ddf44
 8027ad4:	3e54ae0b 	.word	0x3e54ae0b
 8027ad8:	55555555 	.word	0x55555555
 8027adc:	3fd55555 	.word	0x3fd55555
 8027ae0:	652b82fe 	.word	0x652b82fe
 8027ae4:	3ff71547 	.word	0x3ff71547
 8027ae8:	3ff00000 	.word	0x3ff00000
 8027aec:	3fd00000 	.word	0x3fd00000
 8027af0:	3fe00000 	.word	0x3fe00000
 8027af4:	408fffff 	.word	0x408fffff
 8027af8:	4bd5      	ldr	r3, [pc, #852]	@ (8027e50 <__ieee754_pow+0x778>)
 8027afa:	402b      	ands	r3, r5
 8027afc:	2200      	movs	r2, #0
 8027afe:	b92b      	cbnz	r3, 8027b0c <__ieee754_pow+0x434>
 8027b00:	4bd4      	ldr	r3, [pc, #848]	@ (8027e54 <__ieee754_pow+0x77c>)
 8027b02:	f7f2 f879 	bl	8019bf8 <__aeabi_dmul>
 8027b06:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8027b0a:	468b      	mov	fp, r1
 8027b0c:	ea4f 532b 	mov.w	r3, fp, asr #20
 8027b10:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8027b14:	4413      	add	r3, r2
 8027b16:	930a      	str	r3, [sp, #40]	@ 0x28
 8027b18:	4bcf      	ldr	r3, [pc, #828]	@ (8027e58 <__ieee754_pow+0x780>)
 8027b1a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8027b1e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8027b22:	459b      	cmp	fp, r3
 8027b24:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8027b28:	dd08      	ble.n	8027b3c <__ieee754_pow+0x464>
 8027b2a:	4bcc      	ldr	r3, [pc, #816]	@ (8027e5c <__ieee754_pow+0x784>)
 8027b2c:	459b      	cmp	fp, r3
 8027b2e:	f340 81a5 	ble.w	8027e7c <__ieee754_pow+0x7a4>
 8027b32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027b34:	3301      	adds	r3, #1
 8027b36:	930a      	str	r3, [sp, #40]	@ 0x28
 8027b38:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8027b3c:	f04f 0a00 	mov.w	sl, #0
 8027b40:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8027b44:	930b      	str	r3, [sp, #44]	@ 0x2c
 8027b46:	4bc6      	ldr	r3, [pc, #792]	@ (8027e60 <__ieee754_pow+0x788>)
 8027b48:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8027b4c:	ed93 7b00 	vldr	d7, [r3]
 8027b50:	4629      	mov	r1, r5
 8027b52:	ec53 2b17 	vmov	r2, r3, d7
 8027b56:	ed8d 7b06 	vstr	d7, [sp, #24]
 8027b5a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8027b5e:	f7f1 fe93 	bl	8019888 <__aeabi_dsub>
 8027b62:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8027b66:	4606      	mov	r6, r0
 8027b68:	460f      	mov	r7, r1
 8027b6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8027b6e:	f7f1 fe8d 	bl	801988c <__adddf3>
 8027b72:	4602      	mov	r2, r0
 8027b74:	460b      	mov	r3, r1
 8027b76:	2000      	movs	r0, #0
 8027b78:	49ba      	ldr	r1, [pc, #744]	@ (8027e64 <__ieee754_pow+0x78c>)
 8027b7a:	f7f2 f967 	bl	8019e4c <__aeabi_ddiv>
 8027b7e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8027b82:	4602      	mov	r2, r0
 8027b84:	460b      	mov	r3, r1
 8027b86:	4630      	mov	r0, r6
 8027b88:	4639      	mov	r1, r7
 8027b8a:	f7f2 f835 	bl	8019bf8 <__aeabi_dmul>
 8027b8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8027b92:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8027b96:	106d      	asrs	r5, r5, #1
 8027b98:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8027b9c:	f04f 0b00 	mov.w	fp, #0
 8027ba0:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8027ba4:	4661      	mov	r1, ip
 8027ba6:	2200      	movs	r2, #0
 8027ba8:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8027bac:	4658      	mov	r0, fp
 8027bae:	46e1      	mov	r9, ip
 8027bb0:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8027bb4:	4614      	mov	r4, r2
 8027bb6:	461d      	mov	r5, r3
 8027bb8:	f7f2 f81e 	bl	8019bf8 <__aeabi_dmul>
 8027bbc:	4602      	mov	r2, r0
 8027bbe:	460b      	mov	r3, r1
 8027bc0:	4630      	mov	r0, r6
 8027bc2:	4639      	mov	r1, r7
 8027bc4:	f7f1 fe60 	bl	8019888 <__aeabi_dsub>
 8027bc8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8027bcc:	4606      	mov	r6, r0
 8027bce:	460f      	mov	r7, r1
 8027bd0:	4620      	mov	r0, r4
 8027bd2:	4629      	mov	r1, r5
 8027bd4:	f7f1 fe58 	bl	8019888 <__aeabi_dsub>
 8027bd8:	4602      	mov	r2, r0
 8027bda:	460b      	mov	r3, r1
 8027bdc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8027be0:	f7f1 fe52 	bl	8019888 <__aeabi_dsub>
 8027be4:	465a      	mov	r2, fp
 8027be6:	464b      	mov	r3, r9
 8027be8:	f7f2 f806 	bl	8019bf8 <__aeabi_dmul>
 8027bec:	4602      	mov	r2, r0
 8027bee:	460b      	mov	r3, r1
 8027bf0:	4630      	mov	r0, r6
 8027bf2:	4639      	mov	r1, r7
 8027bf4:	f7f1 fe48 	bl	8019888 <__aeabi_dsub>
 8027bf8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8027bfc:	f7f1 fffc 	bl	8019bf8 <__aeabi_dmul>
 8027c00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8027c04:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8027c08:	4610      	mov	r0, r2
 8027c0a:	4619      	mov	r1, r3
 8027c0c:	f7f1 fff4 	bl	8019bf8 <__aeabi_dmul>
 8027c10:	a37d      	add	r3, pc, #500	@ (adr r3, 8027e08 <__ieee754_pow+0x730>)
 8027c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027c16:	4604      	mov	r4, r0
 8027c18:	460d      	mov	r5, r1
 8027c1a:	f7f1 ffed 	bl	8019bf8 <__aeabi_dmul>
 8027c1e:	a37c      	add	r3, pc, #496	@ (adr r3, 8027e10 <__ieee754_pow+0x738>)
 8027c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027c24:	f7f1 fe32 	bl	801988c <__adddf3>
 8027c28:	4622      	mov	r2, r4
 8027c2a:	462b      	mov	r3, r5
 8027c2c:	f7f1 ffe4 	bl	8019bf8 <__aeabi_dmul>
 8027c30:	a379      	add	r3, pc, #484	@ (adr r3, 8027e18 <__ieee754_pow+0x740>)
 8027c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027c36:	f7f1 fe29 	bl	801988c <__adddf3>
 8027c3a:	4622      	mov	r2, r4
 8027c3c:	462b      	mov	r3, r5
 8027c3e:	f7f1 ffdb 	bl	8019bf8 <__aeabi_dmul>
 8027c42:	a377      	add	r3, pc, #476	@ (adr r3, 8027e20 <__ieee754_pow+0x748>)
 8027c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027c48:	f7f1 fe20 	bl	801988c <__adddf3>
 8027c4c:	4622      	mov	r2, r4
 8027c4e:	462b      	mov	r3, r5
 8027c50:	f7f1 ffd2 	bl	8019bf8 <__aeabi_dmul>
 8027c54:	a374      	add	r3, pc, #464	@ (adr r3, 8027e28 <__ieee754_pow+0x750>)
 8027c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027c5a:	f7f1 fe17 	bl	801988c <__adddf3>
 8027c5e:	4622      	mov	r2, r4
 8027c60:	462b      	mov	r3, r5
 8027c62:	f7f1 ffc9 	bl	8019bf8 <__aeabi_dmul>
 8027c66:	a372      	add	r3, pc, #456	@ (adr r3, 8027e30 <__ieee754_pow+0x758>)
 8027c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027c6c:	f7f1 fe0e 	bl	801988c <__adddf3>
 8027c70:	4622      	mov	r2, r4
 8027c72:	4606      	mov	r6, r0
 8027c74:	460f      	mov	r7, r1
 8027c76:	462b      	mov	r3, r5
 8027c78:	4620      	mov	r0, r4
 8027c7a:	4629      	mov	r1, r5
 8027c7c:	f7f1 ffbc 	bl	8019bf8 <__aeabi_dmul>
 8027c80:	4602      	mov	r2, r0
 8027c82:	460b      	mov	r3, r1
 8027c84:	4630      	mov	r0, r6
 8027c86:	4639      	mov	r1, r7
 8027c88:	f7f1 ffb6 	bl	8019bf8 <__aeabi_dmul>
 8027c8c:	465a      	mov	r2, fp
 8027c8e:	4604      	mov	r4, r0
 8027c90:	460d      	mov	r5, r1
 8027c92:	464b      	mov	r3, r9
 8027c94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8027c98:	f7f1 fdf8 	bl	801988c <__adddf3>
 8027c9c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8027ca0:	f7f1 ffaa 	bl	8019bf8 <__aeabi_dmul>
 8027ca4:	4622      	mov	r2, r4
 8027ca6:	462b      	mov	r3, r5
 8027ca8:	f7f1 fdf0 	bl	801988c <__adddf3>
 8027cac:	465a      	mov	r2, fp
 8027cae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8027cb2:	464b      	mov	r3, r9
 8027cb4:	4658      	mov	r0, fp
 8027cb6:	4649      	mov	r1, r9
 8027cb8:	f7f1 ff9e 	bl	8019bf8 <__aeabi_dmul>
 8027cbc:	4b6a      	ldr	r3, [pc, #424]	@ (8027e68 <__ieee754_pow+0x790>)
 8027cbe:	2200      	movs	r2, #0
 8027cc0:	4606      	mov	r6, r0
 8027cc2:	460f      	mov	r7, r1
 8027cc4:	f7f1 fde2 	bl	801988c <__adddf3>
 8027cc8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8027ccc:	f7f1 fdde 	bl	801988c <__adddf3>
 8027cd0:	46d8      	mov	r8, fp
 8027cd2:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8027cd6:	460d      	mov	r5, r1
 8027cd8:	465a      	mov	r2, fp
 8027cda:	460b      	mov	r3, r1
 8027cdc:	4640      	mov	r0, r8
 8027cde:	4649      	mov	r1, r9
 8027ce0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8027ce4:	f7f1 ff88 	bl	8019bf8 <__aeabi_dmul>
 8027ce8:	465c      	mov	r4, fp
 8027cea:	4680      	mov	r8, r0
 8027cec:	4689      	mov	r9, r1
 8027cee:	4b5e      	ldr	r3, [pc, #376]	@ (8027e68 <__ieee754_pow+0x790>)
 8027cf0:	2200      	movs	r2, #0
 8027cf2:	4620      	mov	r0, r4
 8027cf4:	4629      	mov	r1, r5
 8027cf6:	f7f1 fdc7 	bl	8019888 <__aeabi_dsub>
 8027cfa:	4632      	mov	r2, r6
 8027cfc:	463b      	mov	r3, r7
 8027cfe:	f7f1 fdc3 	bl	8019888 <__aeabi_dsub>
 8027d02:	4602      	mov	r2, r0
 8027d04:	460b      	mov	r3, r1
 8027d06:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8027d0a:	f7f1 fdbd 	bl	8019888 <__aeabi_dsub>
 8027d0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8027d12:	f7f1 ff71 	bl	8019bf8 <__aeabi_dmul>
 8027d16:	4622      	mov	r2, r4
 8027d18:	4606      	mov	r6, r0
 8027d1a:	460f      	mov	r7, r1
 8027d1c:	462b      	mov	r3, r5
 8027d1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8027d22:	f7f1 ff69 	bl	8019bf8 <__aeabi_dmul>
 8027d26:	4602      	mov	r2, r0
 8027d28:	460b      	mov	r3, r1
 8027d2a:	4630      	mov	r0, r6
 8027d2c:	4639      	mov	r1, r7
 8027d2e:	f7f1 fdad 	bl	801988c <__adddf3>
 8027d32:	4606      	mov	r6, r0
 8027d34:	460f      	mov	r7, r1
 8027d36:	4602      	mov	r2, r0
 8027d38:	460b      	mov	r3, r1
 8027d3a:	4640      	mov	r0, r8
 8027d3c:	4649      	mov	r1, r9
 8027d3e:	f7f1 fda5 	bl	801988c <__adddf3>
 8027d42:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8027d46:	a33c      	add	r3, pc, #240	@ (adr r3, 8027e38 <__ieee754_pow+0x760>)
 8027d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027d4c:	4658      	mov	r0, fp
 8027d4e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8027d52:	460d      	mov	r5, r1
 8027d54:	f7f1 ff50 	bl	8019bf8 <__aeabi_dmul>
 8027d58:	465c      	mov	r4, fp
 8027d5a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8027d5e:	4642      	mov	r2, r8
 8027d60:	464b      	mov	r3, r9
 8027d62:	4620      	mov	r0, r4
 8027d64:	4629      	mov	r1, r5
 8027d66:	f7f1 fd8f 	bl	8019888 <__aeabi_dsub>
 8027d6a:	4602      	mov	r2, r0
 8027d6c:	460b      	mov	r3, r1
 8027d6e:	4630      	mov	r0, r6
 8027d70:	4639      	mov	r1, r7
 8027d72:	f7f1 fd89 	bl	8019888 <__aeabi_dsub>
 8027d76:	a332      	add	r3, pc, #200	@ (adr r3, 8027e40 <__ieee754_pow+0x768>)
 8027d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027d7c:	f7f1 ff3c 	bl	8019bf8 <__aeabi_dmul>
 8027d80:	a331      	add	r3, pc, #196	@ (adr r3, 8027e48 <__ieee754_pow+0x770>)
 8027d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027d86:	4606      	mov	r6, r0
 8027d88:	460f      	mov	r7, r1
 8027d8a:	4620      	mov	r0, r4
 8027d8c:	4629      	mov	r1, r5
 8027d8e:	f7f1 ff33 	bl	8019bf8 <__aeabi_dmul>
 8027d92:	4602      	mov	r2, r0
 8027d94:	460b      	mov	r3, r1
 8027d96:	4630      	mov	r0, r6
 8027d98:	4639      	mov	r1, r7
 8027d9a:	f7f1 fd77 	bl	801988c <__adddf3>
 8027d9e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8027da0:	4b32      	ldr	r3, [pc, #200]	@ (8027e6c <__ieee754_pow+0x794>)
 8027da2:	4413      	add	r3, r2
 8027da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027da8:	f7f1 fd70 	bl	801988c <__adddf3>
 8027dac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8027db0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8027db2:	f7f1 feb7 	bl	8019b24 <__aeabi_i2d>
 8027db6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8027db8:	4b2d      	ldr	r3, [pc, #180]	@ (8027e70 <__ieee754_pow+0x798>)
 8027dba:	4413      	add	r3, r2
 8027dbc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8027dc0:	4606      	mov	r6, r0
 8027dc2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8027dc6:	460f      	mov	r7, r1
 8027dc8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8027dcc:	f7f1 fd5e 	bl	801988c <__adddf3>
 8027dd0:	4642      	mov	r2, r8
 8027dd2:	464b      	mov	r3, r9
 8027dd4:	f7f1 fd5a 	bl	801988c <__adddf3>
 8027dd8:	4632      	mov	r2, r6
 8027dda:	463b      	mov	r3, r7
 8027ddc:	f7f1 fd56 	bl	801988c <__adddf3>
 8027de0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8027de4:	4632      	mov	r2, r6
 8027de6:	463b      	mov	r3, r7
 8027de8:	4658      	mov	r0, fp
 8027dea:	460d      	mov	r5, r1
 8027dec:	f7f1 fd4c 	bl	8019888 <__aeabi_dsub>
 8027df0:	4642      	mov	r2, r8
 8027df2:	464b      	mov	r3, r9
 8027df4:	f7f1 fd48 	bl	8019888 <__aeabi_dsub>
 8027df8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8027dfc:	f7f1 fd44 	bl	8019888 <__aeabi_dsub>
 8027e00:	465c      	mov	r4, fp
 8027e02:	4602      	mov	r2, r0
 8027e04:	e036      	b.n	8027e74 <__ieee754_pow+0x79c>
 8027e06:	bf00      	nop
 8027e08:	4a454eef 	.word	0x4a454eef
 8027e0c:	3fca7e28 	.word	0x3fca7e28
 8027e10:	93c9db65 	.word	0x93c9db65
 8027e14:	3fcd864a 	.word	0x3fcd864a
 8027e18:	a91d4101 	.word	0xa91d4101
 8027e1c:	3fd17460 	.word	0x3fd17460
 8027e20:	518f264d 	.word	0x518f264d
 8027e24:	3fd55555 	.word	0x3fd55555
 8027e28:	db6fabff 	.word	0xdb6fabff
 8027e2c:	3fdb6db6 	.word	0x3fdb6db6
 8027e30:	33333303 	.word	0x33333303
 8027e34:	3fe33333 	.word	0x3fe33333
 8027e38:	e0000000 	.word	0xe0000000
 8027e3c:	3feec709 	.word	0x3feec709
 8027e40:	dc3a03fd 	.word	0xdc3a03fd
 8027e44:	3feec709 	.word	0x3feec709
 8027e48:	145b01f5 	.word	0x145b01f5
 8027e4c:	be3e2fe0 	.word	0xbe3e2fe0
 8027e50:	7ff00000 	.word	0x7ff00000
 8027e54:	43400000 	.word	0x43400000
 8027e58:	0003988e 	.word	0x0003988e
 8027e5c:	000bb679 	.word	0x000bb679
 8027e60:	08044af0 	.word	0x08044af0
 8027e64:	3ff00000 	.word	0x3ff00000
 8027e68:	40080000 	.word	0x40080000
 8027e6c:	08044ad0 	.word	0x08044ad0
 8027e70:	08044ae0 	.word	0x08044ae0
 8027e74:	460b      	mov	r3, r1
 8027e76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8027e7a:	e5d7      	b.n	8027a2c <__ieee754_pow+0x354>
 8027e7c:	f04f 0a01 	mov.w	sl, #1
 8027e80:	e65e      	b.n	8027b40 <__ieee754_pow+0x468>
 8027e82:	a3b4      	add	r3, pc, #720	@ (adr r3, 8028154 <__ieee754_pow+0xa7c>)
 8027e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027e88:	4630      	mov	r0, r6
 8027e8a:	4639      	mov	r1, r7
 8027e8c:	f7f1 fcfe 	bl	801988c <__adddf3>
 8027e90:	4642      	mov	r2, r8
 8027e92:	e9cd 0100 	strd	r0, r1, [sp]
 8027e96:	464b      	mov	r3, r9
 8027e98:	4620      	mov	r0, r4
 8027e9a:	4629      	mov	r1, r5
 8027e9c:	f7f1 fcf4 	bl	8019888 <__aeabi_dsub>
 8027ea0:	4602      	mov	r2, r0
 8027ea2:	460b      	mov	r3, r1
 8027ea4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8027ea8:	f7f2 f936 	bl	801a118 <__aeabi_dcmpgt>
 8027eac:	2800      	cmp	r0, #0
 8027eae:	f47f ae00 	bne.w	8027ab2 <__ieee754_pow+0x3da>
 8027eb2:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8027eb6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8027eba:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8027ebe:	fa43 fa0a 	asr.w	sl, r3, sl
 8027ec2:	44da      	add	sl, fp
 8027ec4:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8027ec8:	489d      	ldr	r0, [pc, #628]	@ (8028140 <__ieee754_pow+0xa68>)
 8027eca:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8027ece:	4108      	asrs	r0, r1
 8027ed0:	ea00 030a 	and.w	r3, r0, sl
 8027ed4:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8027ed8:	f1c1 0114 	rsb	r1, r1, #20
 8027edc:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8027ee0:	fa4a fa01 	asr.w	sl, sl, r1
 8027ee4:	f1bb 0f00 	cmp.w	fp, #0
 8027ee8:	4640      	mov	r0, r8
 8027eea:	4649      	mov	r1, r9
 8027eec:	f04f 0200 	mov.w	r2, #0
 8027ef0:	bfb8      	it	lt
 8027ef2:	f1ca 0a00 	rsblt	sl, sl, #0
 8027ef6:	f7f1 fcc7 	bl	8019888 <__aeabi_dsub>
 8027efa:	4680      	mov	r8, r0
 8027efc:	4689      	mov	r9, r1
 8027efe:	4632      	mov	r2, r6
 8027f00:	463b      	mov	r3, r7
 8027f02:	4640      	mov	r0, r8
 8027f04:	4649      	mov	r1, r9
 8027f06:	f7f1 fcc1 	bl	801988c <__adddf3>
 8027f0a:	2400      	movs	r4, #0
 8027f0c:	a37c      	add	r3, pc, #496	@ (adr r3, 8028100 <__ieee754_pow+0xa28>)
 8027f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027f12:	4620      	mov	r0, r4
 8027f14:	460d      	mov	r5, r1
 8027f16:	f7f1 fe6f 	bl	8019bf8 <__aeabi_dmul>
 8027f1a:	4642      	mov	r2, r8
 8027f1c:	e9cd 0100 	strd	r0, r1, [sp]
 8027f20:	464b      	mov	r3, r9
 8027f22:	4620      	mov	r0, r4
 8027f24:	4629      	mov	r1, r5
 8027f26:	f7f1 fcaf 	bl	8019888 <__aeabi_dsub>
 8027f2a:	4602      	mov	r2, r0
 8027f2c:	460b      	mov	r3, r1
 8027f2e:	4630      	mov	r0, r6
 8027f30:	4639      	mov	r1, r7
 8027f32:	f7f1 fca9 	bl	8019888 <__aeabi_dsub>
 8027f36:	a374      	add	r3, pc, #464	@ (adr r3, 8028108 <__ieee754_pow+0xa30>)
 8027f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027f3c:	f7f1 fe5c 	bl	8019bf8 <__aeabi_dmul>
 8027f40:	a373      	add	r3, pc, #460	@ (adr r3, 8028110 <__ieee754_pow+0xa38>)
 8027f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027f46:	4680      	mov	r8, r0
 8027f48:	4689      	mov	r9, r1
 8027f4a:	4620      	mov	r0, r4
 8027f4c:	4629      	mov	r1, r5
 8027f4e:	f7f1 fe53 	bl	8019bf8 <__aeabi_dmul>
 8027f52:	4602      	mov	r2, r0
 8027f54:	460b      	mov	r3, r1
 8027f56:	4640      	mov	r0, r8
 8027f58:	4649      	mov	r1, r9
 8027f5a:	f7f1 fc97 	bl	801988c <__adddf3>
 8027f5e:	4604      	mov	r4, r0
 8027f60:	460d      	mov	r5, r1
 8027f62:	4602      	mov	r2, r0
 8027f64:	460b      	mov	r3, r1
 8027f66:	e9dd 0100 	ldrd	r0, r1, [sp]
 8027f6a:	f7f1 fc8f 	bl	801988c <__adddf3>
 8027f6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8027f72:	4680      	mov	r8, r0
 8027f74:	4689      	mov	r9, r1
 8027f76:	f7f1 fc87 	bl	8019888 <__aeabi_dsub>
 8027f7a:	4602      	mov	r2, r0
 8027f7c:	460b      	mov	r3, r1
 8027f7e:	4620      	mov	r0, r4
 8027f80:	4629      	mov	r1, r5
 8027f82:	f7f1 fc81 	bl	8019888 <__aeabi_dsub>
 8027f86:	4642      	mov	r2, r8
 8027f88:	4606      	mov	r6, r0
 8027f8a:	460f      	mov	r7, r1
 8027f8c:	464b      	mov	r3, r9
 8027f8e:	4640      	mov	r0, r8
 8027f90:	4649      	mov	r1, r9
 8027f92:	f7f1 fe31 	bl	8019bf8 <__aeabi_dmul>
 8027f96:	a360      	add	r3, pc, #384	@ (adr r3, 8028118 <__ieee754_pow+0xa40>)
 8027f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027f9c:	4604      	mov	r4, r0
 8027f9e:	460d      	mov	r5, r1
 8027fa0:	f7f1 fe2a 	bl	8019bf8 <__aeabi_dmul>
 8027fa4:	a35e      	add	r3, pc, #376	@ (adr r3, 8028120 <__ieee754_pow+0xa48>)
 8027fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027faa:	f7f1 fc6d 	bl	8019888 <__aeabi_dsub>
 8027fae:	4622      	mov	r2, r4
 8027fb0:	462b      	mov	r3, r5
 8027fb2:	f7f1 fe21 	bl	8019bf8 <__aeabi_dmul>
 8027fb6:	a35c      	add	r3, pc, #368	@ (adr r3, 8028128 <__ieee754_pow+0xa50>)
 8027fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027fbc:	f7f1 fc66 	bl	801988c <__adddf3>
 8027fc0:	4622      	mov	r2, r4
 8027fc2:	462b      	mov	r3, r5
 8027fc4:	f7f1 fe18 	bl	8019bf8 <__aeabi_dmul>
 8027fc8:	a359      	add	r3, pc, #356	@ (adr r3, 8028130 <__ieee754_pow+0xa58>)
 8027fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027fce:	f7f1 fc5b 	bl	8019888 <__aeabi_dsub>
 8027fd2:	4622      	mov	r2, r4
 8027fd4:	462b      	mov	r3, r5
 8027fd6:	f7f1 fe0f 	bl	8019bf8 <__aeabi_dmul>
 8027fda:	a357      	add	r3, pc, #348	@ (adr r3, 8028138 <__ieee754_pow+0xa60>)
 8027fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027fe0:	f7f1 fc54 	bl	801988c <__adddf3>
 8027fe4:	4622      	mov	r2, r4
 8027fe6:	462b      	mov	r3, r5
 8027fe8:	f7f1 fe06 	bl	8019bf8 <__aeabi_dmul>
 8027fec:	4602      	mov	r2, r0
 8027fee:	460b      	mov	r3, r1
 8027ff0:	4640      	mov	r0, r8
 8027ff2:	4649      	mov	r1, r9
 8027ff4:	f7f1 fc48 	bl	8019888 <__aeabi_dsub>
 8027ff8:	4604      	mov	r4, r0
 8027ffa:	460d      	mov	r5, r1
 8027ffc:	4602      	mov	r2, r0
 8027ffe:	460b      	mov	r3, r1
 8028000:	4640      	mov	r0, r8
 8028002:	4649      	mov	r1, r9
 8028004:	f7f1 fdf8 	bl	8019bf8 <__aeabi_dmul>
 8028008:	2200      	movs	r2, #0
 802800a:	e9cd 0100 	strd	r0, r1, [sp]
 802800e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8028012:	4620      	mov	r0, r4
 8028014:	4629      	mov	r1, r5
 8028016:	f7f1 fc37 	bl	8019888 <__aeabi_dsub>
 802801a:	4602      	mov	r2, r0
 802801c:	460b      	mov	r3, r1
 802801e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8028022:	f7f1 ff13 	bl	8019e4c <__aeabi_ddiv>
 8028026:	4632      	mov	r2, r6
 8028028:	4604      	mov	r4, r0
 802802a:	460d      	mov	r5, r1
 802802c:	463b      	mov	r3, r7
 802802e:	4640      	mov	r0, r8
 8028030:	4649      	mov	r1, r9
 8028032:	f7f1 fde1 	bl	8019bf8 <__aeabi_dmul>
 8028036:	4632      	mov	r2, r6
 8028038:	463b      	mov	r3, r7
 802803a:	f7f1 fc27 	bl	801988c <__adddf3>
 802803e:	4602      	mov	r2, r0
 8028040:	460b      	mov	r3, r1
 8028042:	4620      	mov	r0, r4
 8028044:	4629      	mov	r1, r5
 8028046:	f7f1 fc1f 	bl	8019888 <__aeabi_dsub>
 802804a:	4642      	mov	r2, r8
 802804c:	464b      	mov	r3, r9
 802804e:	f7f1 fc1b 	bl	8019888 <__aeabi_dsub>
 8028052:	460b      	mov	r3, r1
 8028054:	4602      	mov	r2, r0
 8028056:	493b      	ldr	r1, [pc, #236]	@ (8028144 <__ieee754_pow+0xa6c>)
 8028058:	2000      	movs	r0, #0
 802805a:	f7f1 fc15 	bl	8019888 <__aeabi_dsub>
 802805e:	ec41 0b10 	vmov	d0, r0, r1
 8028062:	ee10 3a90 	vmov	r3, s1
 8028066:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 802806a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 802806e:	da30      	bge.n	80280d2 <__ieee754_pow+0x9fa>
 8028070:	4650      	mov	r0, sl
 8028072:	f000 fb49 	bl	8028708 <scalbn>
 8028076:	ec51 0b10 	vmov	r0, r1, d0
 802807a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802807e:	f7ff bbd2 	b.w	8027826 <__ieee754_pow+0x14e>
 8028082:	4c31      	ldr	r4, [pc, #196]	@ (8028148 <__ieee754_pow+0xa70>)
 8028084:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8028088:	42a3      	cmp	r3, r4
 802808a:	d91a      	bls.n	80280c2 <__ieee754_pow+0x9ea>
 802808c:	4b2f      	ldr	r3, [pc, #188]	@ (802814c <__ieee754_pow+0xa74>)
 802808e:	440b      	add	r3, r1
 8028090:	4303      	orrs	r3, r0
 8028092:	d009      	beq.n	80280a8 <__ieee754_pow+0x9d0>
 8028094:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8028098:	2200      	movs	r2, #0
 802809a:	2300      	movs	r3, #0
 802809c:	f7f2 f81e 	bl	801a0dc <__aeabi_dcmplt>
 80280a0:	3800      	subs	r0, #0
 80280a2:	bf18      	it	ne
 80280a4:	2001      	movne	r0, #1
 80280a6:	e42b      	b.n	8027900 <__ieee754_pow+0x228>
 80280a8:	4642      	mov	r2, r8
 80280aa:	464b      	mov	r3, r9
 80280ac:	f7f1 fbec 	bl	8019888 <__aeabi_dsub>
 80280b0:	4632      	mov	r2, r6
 80280b2:	463b      	mov	r3, r7
 80280b4:	f7f2 f826 	bl	801a104 <__aeabi_dcmpge>
 80280b8:	2800      	cmp	r0, #0
 80280ba:	d1eb      	bne.n	8028094 <__ieee754_pow+0x9bc>
 80280bc:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 802815c <__ieee754_pow+0xa84>
 80280c0:	e6f7      	b.n	8027eb2 <__ieee754_pow+0x7da>
 80280c2:	469a      	mov	sl, r3
 80280c4:	4b22      	ldr	r3, [pc, #136]	@ (8028150 <__ieee754_pow+0xa78>)
 80280c6:	459a      	cmp	sl, r3
 80280c8:	f63f aef3 	bhi.w	8027eb2 <__ieee754_pow+0x7da>
 80280cc:	f8dd a010 	ldr.w	sl, [sp, #16]
 80280d0:	e715      	b.n	8027efe <__ieee754_pow+0x826>
 80280d2:	ec51 0b10 	vmov	r0, r1, d0
 80280d6:	4619      	mov	r1, r3
 80280d8:	e7cf      	b.n	802807a <__ieee754_pow+0x9a2>
 80280da:	491a      	ldr	r1, [pc, #104]	@ (8028144 <__ieee754_pow+0xa6c>)
 80280dc:	2000      	movs	r0, #0
 80280de:	f7ff bb18 	b.w	8027712 <__ieee754_pow+0x3a>
 80280e2:	2000      	movs	r0, #0
 80280e4:	2100      	movs	r1, #0
 80280e6:	f7ff bb14 	b.w	8027712 <__ieee754_pow+0x3a>
 80280ea:	4630      	mov	r0, r6
 80280ec:	4639      	mov	r1, r7
 80280ee:	f7ff bb10 	b.w	8027712 <__ieee754_pow+0x3a>
 80280f2:	460c      	mov	r4, r1
 80280f4:	f7ff bb5e 	b.w	80277b4 <__ieee754_pow+0xdc>
 80280f8:	2400      	movs	r4, #0
 80280fa:	f7ff bb49 	b.w	8027790 <__ieee754_pow+0xb8>
 80280fe:	bf00      	nop
 8028100:	00000000 	.word	0x00000000
 8028104:	3fe62e43 	.word	0x3fe62e43
 8028108:	fefa39ef 	.word	0xfefa39ef
 802810c:	3fe62e42 	.word	0x3fe62e42
 8028110:	0ca86c39 	.word	0x0ca86c39
 8028114:	be205c61 	.word	0xbe205c61
 8028118:	72bea4d0 	.word	0x72bea4d0
 802811c:	3e663769 	.word	0x3e663769
 8028120:	c5d26bf1 	.word	0xc5d26bf1
 8028124:	3ebbbd41 	.word	0x3ebbbd41
 8028128:	af25de2c 	.word	0xaf25de2c
 802812c:	3f11566a 	.word	0x3f11566a
 8028130:	16bebd93 	.word	0x16bebd93
 8028134:	3f66c16c 	.word	0x3f66c16c
 8028138:	5555553e 	.word	0x5555553e
 802813c:	3fc55555 	.word	0x3fc55555
 8028140:	fff00000 	.word	0xfff00000
 8028144:	3ff00000 	.word	0x3ff00000
 8028148:	4090cbff 	.word	0x4090cbff
 802814c:	3f6f3400 	.word	0x3f6f3400
 8028150:	3fe00000 	.word	0x3fe00000
 8028154:	652b82fe 	.word	0x652b82fe
 8028158:	3c971547 	.word	0x3c971547
 802815c:	4090cc00 	.word	0x4090cc00

08028160 <__ieee754_rem_pio2>:
 8028160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028164:	ec57 6b10 	vmov	r6, r7, d0
 8028168:	4bc5      	ldr	r3, [pc, #788]	@ (8028480 <__ieee754_rem_pio2+0x320>)
 802816a:	b08d      	sub	sp, #52	@ 0x34
 802816c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8028170:	4598      	cmp	r8, r3
 8028172:	4604      	mov	r4, r0
 8028174:	9704      	str	r7, [sp, #16]
 8028176:	d807      	bhi.n	8028188 <__ieee754_rem_pio2+0x28>
 8028178:	2200      	movs	r2, #0
 802817a:	2300      	movs	r3, #0
 802817c:	ed80 0b00 	vstr	d0, [r0]
 8028180:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8028184:	2500      	movs	r5, #0
 8028186:	e028      	b.n	80281da <__ieee754_rem_pio2+0x7a>
 8028188:	4bbe      	ldr	r3, [pc, #760]	@ (8028484 <__ieee754_rem_pio2+0x324>)
 802818a:	4598      	cmp	r8, r3
 802818c:	d878      	bhi.n	8028280 <__ieee754_rem_pio2+0x120>
 802818e:	9b04      	ldr	r3, [sp, #16]
 8028190:	4dbd      	ldr	r5, [pc, #756]	@ (8028488 <__ieee754_rem_pio2+0x328>)
 8028192:	2b00      	cmp	r3, #0
 8028194:	4630      	mov	r0, r6
 8028196:	a3ac      	add	r3, pc, #688	@ (adr r3, 8028448 <__ieee754_rem_pio2+0x2e8>)
 8028198:	e9d3 2300 	ldrd	r2, r3, [r3]
 802819c:	4639      	mov	r1, r7
 802819e:	dd38      	ble.n	8028212 <__ieee754_rem_pio2+0xb2>
 80281a0:	f7f1 fb72 	bl	8019888 <__aeabi_dsub>
 80281a4:	45a8      	cmp	r8, r5
 80281a6:	4606      	mov	r6, r0
 80281a8:	460f      	mov	r7, r1
 80281aa:	d01a      	beq.n	80281e2 <__ieee754_rem_pio2+0x82>
 80281ac:	a3a8      	add	r3, pc, #672	@ (adr r3, 8028450 <__ieee754_rem_pio2+0x2f0>)
 80281ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80281b2:	f7f1 fb69 	bl	8019888 <__aeabi_dsub>
 80281b6:	4602      	mov	r2, r0
 80281b8:	460b      	mov	r3, r1
 80281ba:	4680      	mov	r8, r0
 80281bc:	4689      	mov	r9, r1
 80281be:	4630      	mov	r0, r6
 80281c0:	4639      	mov	r1, r7
 80281c2:	f7f1 fb61 	bl	8019888 <__aeabi_dsub>
 80281c6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8028450 <__ieee754_rem_pio2+0x2f0>)
 80281c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80281cc:	f7f1 fb5c 	bl	8019888 <__aeabi_dsub>
 80281d0:	e9c4 8900 	strd	r8, r9, [r4]
 80281d4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80281d8:	2501      	movs	r5, #1
 80281da:	4628      	mov	r0, r5
 80281dc:	b00d      	add	sp, #52	@ 0x34
 80281de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80281e2:	a39d      	add	r3, pc, #628	@ (adr r3, 8028458 <__ieee754_rem_pio2+0x2f8>)
 80281e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80281e8:	f7f1 fb4e 	bl	8019888 <__aeabi_dsub>
 80281ec:	a39c      	add	r3, pc, #624	@ (adr r3, 8028460 <__ieee754_rem_pio2+0x300>)
 80281ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80281f2:	4606      	mov	r6, r0
 80281f4:	460f      	mov	r7, r1
 80281f6:	f7f1 fb47 	bl	8019888 <__aeabi_dsub>
 80281fa:	4602      	mov	r2, r0
 80281fc:	460b      	mov	r3, r1
 80281fe:	4680      	mov	r8, r0
 8028200:	4689      	mov	r9, r1
 8028202:	4630      	mov	r0, r6
 8028204:	4639      	mov	r1, r7
 8028206:	f7f1 fb3f 	bl	8019888 <__aeabi_dsub>
 802820a:	a395      	add	r3, pc, #596	@ (adr r3, 8028460 <__ieee754_rem_pio2+0x300>)
 802820c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028210:	e7dc      	b.n	80281cc <__ieee754_rem_pio2+0x6c>
 8028212:	f7f1 fb3b 	bl	801988c <__adddf3>
 8028216:	45a8      	cmp	r8, r5
 8028218:	4606      	mov	r6, r0
 802821a:	460f      	mov	r7, r1
 802821c:	d018      	beq.n	8028250 <__ieee754_rem_pio2+0xf0>
 802821e:	a38c      	add	r3, pc, #560	@ (adr r3, 8028450 <__ieee754_rem_pio2+0x2f0>)
 8028220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028224:	f7f1 fb32 	bl	801988c <__adddf3>
 8028228:	4602      	mov	r2, r0
 802822a:	460b      	mov	r3, r1
 802822c:	4680      	mov	r8, r0
 802822e:	4689      	mov	r9, r1
 8028230:	4630      	mov	r0, r6
 8028232:	4639      	mov	r1, r7
 8028234:	f7f1 fb28 	bl	8019888 <__aeabi_dsub>
 8028238:	a385      	add	r3, pc, #532	@ (adr r3, 8028450 <__ieee754_rem_pio2+0x2f0>)
 802823a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802823e:	f7f1 fb25 	bl	801988c <__adddf3>
 8028242:	f04f 35ff 	mov.w	r5, #4294967295
 8028246:	e9c4 8900 	strd	r8, r9, [r4]
 802824a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 802824e:	e7c4      	b.n	80281da <__ieee754_rem_pio2+0x7a>
 8028250:	a381      	add	r3, pc, #516	@ (adr r3, 8028458 <__ieee754_rem_pio2+0x2f8>)
 8028252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028256:	f7f1 fb19 	bl	801988c <__adddf3>
 802825a:	a381      	add	r3, pc, #516	@ (adr r3, 8028460 <__ieee754_rem_pio2+0x300>)
 802825c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028260:	4606      	mov	r6, r0
 8028262:	460f      	mov	r7, r1
 8028264:	f7f1 fb12 	bl	801988c <__adddf3>
 8028268:	4602      	mov	r2, r0
 802826a:	460b      	mov	r3, r1
 802826c:	4680      	mov	r8, r0
 802826e:	4689      	mov	r9, r1
 8028270:	4630      	mov	r0, r6
 8028272:	4639      	mov	r1, r7
 8028274:	f7f1 fb08 	bl	8019888 <__aeabi_dsub>
 8028278:	a379      	add	r3, pc, #484	@ (adr r3, 8028460 <__ieee754_rem_pio2+0x300>)
 802827a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802827e:	e7de      	b.n	802823e <__ieee754_rem_pio2+0xde>
 8028280:	4b82      	ldr	r3, [pc, #520]	@ (802848c <__ieee754_rem_pio2+0x32c>)
 8028282:	4598      	cmp	r8, r3
 8028284:	f200 80d1 	bhi.w	802842a <__ieee754_rem_pio2+0x2ca>
 8028288:	f000 f966 	bl	8028558 <fabs>
 802828c:	ec57 6b10 	vmov	r6, r7, d0
 8028290:	a375      	add	r3, pc, #468	@ (adr r3, 8028468 <__ieee754_rem_pio2+0x308>)
 8028292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028296:	4630      	mov	r0, r6
 8028298:	4639      	mov	r1, r7
 802829a:	f7f1 fcad 	bl	8019bf8 <__aeabi_dmul>
 802829e:	4b7c      	ldr	r3, [pc, #496]	@ (8028490 <__ieee754_rem_pio2+0x330>)
 80282a0:	2200      	movs	r2, #0
 80282a2:	f7f1 faf3 	bl	801988c <__adddf3>
 80282a6:	f7f1 ff57 	bl	801a158 <__aeabi_d2iz>
 80282aa:	4605      	mov	r5, r0
 80282ac:	f7f1 fc3a 	bl	8019b24 <__aeabi_i2d>
 80282b0:	4602      	mov	r2, r0
 80282b2:	460b      	mov	r3, r1
 80282b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80282b8:	a363      	add	r3, pc, #396	@ (adr r3, 8028448 <__ieee754_rem_pio2+0x2e8>)
 80282ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80282be:	f7f1 fc9b 	bl	8019bf8 <__aeabi_dmul>
 80282c2:	4602      	mov	r2, r0
 80282c4:	460b      	mov	r3, r1
 80282c6:	4630      	mov	r0, r6
 80282c8:	4639      	mov	r1, r7
 80282ca:	f7f1 fadd 	bl	8019888 <__aeabi_dsub>
 80282ce:	a360      	add	r3, pc, #384	@ (adr r3, 8028450 <__ieee754_rem_pio2+0x2f0>)
 80282d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80282d4:	4682      	mov	sl, r0
 80282d6:	468b      	mov	fp, r1
 80282d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80282dc:	f7f1 fc8c 	bl	8019bf8 <__aeabi_dmul>
 80282e0:	2d1f      	cmp	r5, #31
 80282e2:	4606      	mov	r6, r0
 80282e4:	460f      	mov	r7, r1
 80282e6:	dc0c      	bgt.n	8028302 <__ieee754_rem_pio2+0x1a2>
 80282e8:	4b6a      	ldr	r3, [pc, #424]	@ (8028494 <__ieee754_rem_pio2+0x334>)
 80282ea:	1e6a      	subs	r2, r5, #1
 80282ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80282f0:	4543      	cmp	r3, r8
 80282f2:	d006      	beq.n	8028302 <__ieee754_rem_pio2+0x1a2>
 80282f4:	4632      	mov	r2, r6
 80282f6:	463b      	mov	r3, r7
 80282f8:	4650      	mov	r0, sl
 80282fa:	4659      	mov	r1, fp
 80282fc:	f7f1 fac4 	bl	8019888 <__aeabi_dsub>
 8028300:	e00e      	b.n	8028320 <__ieee754_rem_pio2+0x1c0>
 8028302:	463b      	mov	r3, r7
 8028304:	4632      	mov	r2, r6
 8028306:	4650      	mov	r0, sl
 8028308:	4659      	mov	r1, fp
 802830a:	f7f1 fabd 	bl	8019888 <__aeabi_dsub>
 802830e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8028312:	9305      	str	r3, [sp, #20]
 8028314:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8028318:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 802831c:	2b10      	cmp	r3, #16
 802831e:	dc02      	bgt.n	8028326 <__ieee754_rem_pio2+0x1c6>
 8028320:	e9c4 0100 	strd	r0, r1, [r4]
 8028324:	e039      	b.n	802839a <__ieee754_rem_pio2+0x23a>
 8028326:	a34c      	add	r3, pc, #304	@ (adr r3, 8028458 <__ieee754_rem_pio2+0x2f8>)
 8028328:	e9d3 2300 	ldrd	r2, r3, [r3]
 802832c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8028330:	f7f1 fc62 	bl	8019bf8 <__aeabi_dmul>
 8028334:	4606      	mov	r6, r0
 8028336:	460f      	mov	r7, r1
 8028338:	4602      	mov	r2, r0
 802833a:	460b      	mov	r3, r1
 802833c:	4650      	mov	r0, sl
 802833e:	4659      	mov	r1, fp
 8028340:	f7f1 faa2 	bl	8019888 <__aeabi_dsub>
 8028344:	4602      	mov	r2, r0
 8028346:	460b      	mov	r3, r1
 8028348:	4680      	mov	r8, r0
 802834a:	4689      	mov	r9, r1
 802834c:	4650      	mov	r0, sl
 802834e:	4659      	mov	r1, fp
 8028350:	f7f1 fa9a 	bl	8019888 <__aeabi_dsub>
 8028354:	4632      	mov	r2, r6
 8028356:	463b      	mov	r3, r7
 8028358:	f7f1 fa96 	bl	8019888 <__aeabi_dsub>
 802835c:	a340      	add	r3, pc, #256	@ (adr r3, 8028460 <__ieee754_rem_pio2+0x300>)
 802835e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028362:	4606      	mov	r6, r0
 8028364:	460f      	mov	r7, r1
 8028366:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802836a:	f7f1 fc45 	bl	8019bf8 <__aeabi_dmul>
 802836e:	4632      	mov	r2, r6
 8028370:	463b      	mov	r3, r7
 8028372:	f7f1 fa89 	bl	8019888 <__aeabi_dsub>
 8028376:	4602      	mov	r2, r0
 8028378:	460b      	mov	r3, r1
 802837a:	4606      	mov	r6, r0
 802837c:	460f      	mov	r7, r1
 802837e:	4640      	mov	r0, r8
 8028380:	4649      	mov	r1, r9
 8028382:	f7f1 fa81 	bl	8019888 <__aeabi_dsub>
 8028386:	9a05      	ldr	r2, [sp, #20]
 8028388:	f3c1 530a 	ubfx	r3, r1, #20, #11
 802838c:	1ad3      	subs	r3, r2, r3
 802838e:	2b31      	cmp	r3, #49	@ 0x31
 8028390:	dc20      	bgt.n	80283d4 <__ieee754_rem_pio2+0x274>
 8028392:	e9c4 0100 	strd	r0, r1, [r4]
 8028396:	46c2      	mov	sl, r8
 8028398:	46cb      	mov	fp, r9
 802839a:	e9d4 8900 	ldrd	r8, r9, [r4]
 802839e:	4650      	mov	r0, sl
 80283a0:	4642      	mov	r2, r8
 80283a2:	464b      	mov	r3, r9
 80283a4:	4659      	mov	r1, fp
 80283a6:	f7f1 fa6f 	bl	8019888 <__aeabi_dsub>
 80283aa:	463b      	mov	r3, r7
 80283ac:	4632      	mov	r2, r6
 80283ae:	f7f1 fa6b 	bl	8019888 <__aeabi_dsub>
 80283b2:	9b04      	ldr	r3, [sp, #16]
 80283b4:	2b00      	cmp	r3, #0
 80283b6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80283ba:	f6bf af0e 	bge.w	80281da <__ieee754_rem_pio2+0x7a>
 80283be:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80283c2:	6063      	str	r3, [r4, #4]
 80283c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80283c8:	f8c4 8000 	str.w	r8, [r4]
 80283cc:	60a0      	str	r0, [r4, #8]
 80283ce:	60e3      	str	r3, [r4, #12]
 80283d0:	426d      	negs	r5, r5
 80283d2:	e702      	b.n	80281da <__ieee754_rem_pio2+0x7a>
 80283d4:	a326      	add	r3, pc, #152	@ (adr r3, 8028470 <__ieee754_rem_pio2+0x310>)
 80283d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80283da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80283de:	f7f1 fc0b 	bl	8019bf8 <__aeabi_dmul>
 80283e2:	4606      	mov	r6, r0
 80283e4:	460f      	mov	r7, r1
 80283e6:	4602      	mov	r2, r0
 80283e8:	460b      	mov	r3, r1
 80283ea:	4640      	mov	r0, r8
 80283ec:	4649      	mov	r1, r9
 80283ee:	f7f1 fa4b 	bl	8019888 <__aeabi_dsub>
 80283f2:	4602      	mov	r2, r0
 80283f4:	460b      	mov	r3, r1
 80283f6:	4682      	mov	sl, r0
 80283f8:	468b      	mov	fp, r1
 80283fa:	4640      	mov	r0, r8
 80283fc:	4649      	mov	r1, r9
 80283fe:	f7f1 fa43 	bl	8019888 <__aeabi_dsub>
 8028402:	4632      	mov	r2, r6
 8028404:	463b      	mov	r3, r7
 8028406:	f7f1 fa3f 	bl	8019888 <__aeabi_dsub>
 802840a:	a31b      	add	r3, pc, #108	@ (adr r3, 8028478 <__ieee754_rem_pio2+0x318>)
 802840c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028410:	4606      	mov	r6, r0
 8028412:	460f      	mov	r7, r1
 8028414:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8028418:	f7f1 fbee 	bl	8019bf8 <__aeabi_dmul>
 802841c:	4632      	mov	r2, r6
 802841e:	463b      	mov	r3, r7
 8028420:	f7f1 fa32 	bl	8019888 <__aeabi_dsub>
 8028424:	4606      	mov	r6, r0
 8028426:	460f      	mov	r7, r1
 8028428:	e764      	b.n	80282f4 <__ieee754_rem_pio2+0x194>
 802842a:	4b1b      	ldr	r3, [pc, #108]	@ (8028498 <__ieee754_rem_pio2+0x338>)
 802842c:	4598      	cmp	r8, r3
 802842e:	d935      	bls.n	802849c <__ieee754_rem_pio2+0x33c>
 8028430:	4632      	mov	r2, r6
 8028432:	463b      	mov	r3, r7
 8028434:	4630      	mov	r0, r6
 8028436:	4639      	mov	r1, r7
 8028438:	f7f1 fa26 	bl	8019888 <__aeabi_dsub>
 802843c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8028440:	e9c4 0100 	strd	r0, r1, [r4]
 8028444:	e69e      	b.n	8028184 <__ieee754_rem_pio2+0x24>
 8028446:	bf00      	nop
 8028448:	54400000 	.word	0x54400000
 802844c:	3ff921fb 	.word	0x3ff921fb
 8028450:	1a626331 	.word	0x1a626331
 8028454:	3dd0b461 	.word	0x3dd0b461
 8028458:	1a600000 	.word	0x1a600000
 802845c:	3dd0b461 	.word	0x3dd0b461
 8028460:	2e037073 	.word	0x2e037073
 8028464:	3ba3198a 	.word	0x3ba3198a
 8028468:	6dc9c883 	.word	0x6dc9c883
 802846c:	3fe45f30 	.word	0x3fe45f30
 8028470:	2e000000 	.word	0x2e000000
 8028474:	3ba3198a 	.word	0x3ba3198a
 8028478:	252049c1 	.word	0x252049c1
 802847c:	397b839a 	.word	0x397b839a
 8028480:	3fe921fb 	.word	0x3fe921fb
 8028484:	4002d97b 	.word	0x4002d97b
 8028488:	3ff921fb 	.word	0x3ff921fb
 802848c:	413921fb 	.word	0x413921fb
 8028490:	3fe00000 	.word	0x3fe00000
 8028494:	08044b00 	.word	0x08044b00
 8028498:	7fefffff 	.word	0x7fefffff
 802849c:	ea4f 5528 	mov.w	r5, r8, asr #20
 80284a0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80284a4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80284a8:	4630      	mov	r0, r6
 80284aa:	460f      	mov	r7, r1
 80284ac:	f7f1 fe54 	bl	801a158 <__aeabi_d2iz>
 80284b0:	f7f1 fb38 	bl	8019b24 <__aeabi_i2d>
 80284b4:	4602      	mov	r2, r0
 80284b6:	460b      	mov	r3, r1
 80284b8:	4630      	mov	r0, r6
 80284ba:	4639      	mov	r1, r7
 80284bc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80284c0:	f7f1 f9e2 	bl	8019888 <__aeabi_dsub>
 80284c4:	4b22      	ldr	r3, [pc, #136]	@ (8028550 <__ieee754_rem_pio2+0x3f0>)
 80284c6:	2200      	movs	r2, #0
 80284c8:	f7f1 fb96 	bl	8019bf8 <__aeabi_dmul>
 80284cc:	460f      	mov	r7, r1
 80284ce:	4606      	mov	r6, r0
 80284d0:	f7f1 fe42 	bl	801a158 <__aeabi_d2iz>
 80284d4:	f7f1 fb26 	bl	8019b24 <__aeabi_i2d>
 80284d8:	4602      	mov	r2, r0
 80284da:	460b      	mov	r3, r1
 80284dc:	4630      	mov	r0, r6
 80284de:	4639      	mov	r1, r7
 80284e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80284e4:	f7f1 f9d0 	bl	8019888 <__aeabi_dsub>
 80284e8:	4b19      	ldr	r3, [pc, #100]	@ (8028550 <__ieee754_rem_pio2+0x3f0>)
 80284ea:	2200      	movs	r2, #0
 80284ec:	f7f1 fb84 	bl	8019bf8 <__aeabi_dmul>
 80284f0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80284f4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80284f8:	f04f 0803 	mov.w	r8, #3
 80284fc:	2600      	movs	r6, #0
 80284fe:	2700      	movs	r7, #0
 8028500:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8028504:	4632      	mov	r2, r6
 8028506:	463b      	mov	r3, r7
 8028508:	46c2      	mov	sl, r8
 802850a:	f108 38ff 	add.w	r8, r8, #4294967295
 802850e:	f7f1 fddb 	bl	801a0c8 <__aeabi_dcmpeq>
 8028512:	2800      	cmp	r0, #0
 8028514:	d1f4      	bne.n	8028500 <__ieee754_rem_pio2+0x3a0>
 8028516:	4b0f      	ldr	r3, [pc, #60]	@ (8028554 <__ieee754_rem_pio2+0x3f4>)
 8028518:	9301      	str	r3, [sp, #4]
 802851a:	2302      	movs	r3, #2
 802851c:	9300      	str	r3, [sp, #0]
 802851e:	462a      	mov	r2, r5
 8028520:	4653      	mov	r3, sl
 8028522:	4621      	mov	r1, r4
 8028524:	a806      	add	r0, sp, #24
 8028526:	f000 f96f 	bl	8028808 <__kernel_rem_pio2>
 802852a:	9b04      	ldr	r3, [sp, #16]
 802852c:	2b00      	cmp	r3, #0
 802852e:	4605      	mov	r5, r0
 8028530:	f6bf ae53 	bge.w	80281da <__ieee754_rem_pio2+0x7a>
 8028534:	e9d4 2100 	ldrd	r2, r1, [r4]
 8028538:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 802853c:	e9c4 2300 	strd	r2, r3, [r4]
 8028540:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8028544:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8028548:	e9c4 2302 	strd	r2, r3, [r4, #8]
 802854c:	e740      	b.n	80283d0 <__ieee754_rem_pio2+0x270>
 802854e:	bf00      	nop
 8028550:	41700000 	.word	0x41700000
 8028554:	08044b80 	.word	0x08044b80

08028558 <fabs>:
 8028558:	ec51 0b10 	vmov	r0, r1, d0
 802855c:	4602      	mov	r2, r0
 802855e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8028562:	ec43 2b10 	vmov	d0, r2, r3
 8028566:	4770      	bx	lr

08028568 <__ieee754_expf>:
 8028568:	ee10 2a10 	vmov	r2, s0
 802856c:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 8028570:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8028574:	d902      	bls.n	802857c <__ieee754_expf+0x14>
 8028576:	ee30 0a00 	vadd.f32	s0, s0, s0
 802857a:	4770      	bx	lr
 802857c:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8028580:	d106      	bne.n	8028590 <__ieee754_expf+0x28>
 8028582:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 80286bc <__ieee754_expf+0x154>
 8028586:	2900      	cmp	r1, #0
 8028588:	bf18      	it	ne
 802858a:	eeb0 0a67 	vmovne.f32	s0, s15
 802858e:	4770      	bx	lr
 8028590:	484b      	ldr	r0, [pc, #300]	@ (80286c0 <__ieee754_expf+0x158>)
 8028592:	4282      	cmp	r2, r0
 8028594:	dd02      	ble.n	802859c <__ieee754_expf+0x34>
 8028596:	2000      	movs	r0, #0
 8028598:	f7fe bbc0 	b.w	8026d1c <__math_oflowf>
 802859c:	2a00      	cmp	r2, #0
 802859e:	da05      	bge.n	80285ac <__ieee754_expf+0x44>
 80285a0:	4a48      	ldr	r2, [pc, #288]	@ (80286c4 <__ieee754_expf+0x15c>)
 80285a2:	4293      	cmp	r3, r2
 80285a4:	d902      	bls.n	80285ac <__ieee754_expf+0x44>
 80285a6:	2000      	movs	r0, #0
 80285a8:	f7fe bbb2 	b.w	8026d10 <__math_uflowf>
 80285ac:	4a46      	ldr	r2, [pc, #280]	@ (80286c8 <__ieee754_expf+0x160>)
 80285ae:	4293      	cmp	r3, r2
 80285b0:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80285b4:	d952      	bls.n	802865c <__ieee754_expf+0xf4>
 80285b6:	4a45      	ldr	r2, [pc, #276]	@ (80286cc <__ieee754_expf+0x164>)
 80285b8:	4293      	cmp	r3, r2
 80285ba:	ea4f 0281 	mov.w	r2, r1, lsl #2
 80285be:	d834      	bhi.n	802862a <__ieee754_expf+0xc2>
 80285c0:	4b43      	ldr	r3, [pc, #268]	@ (80286d0 <__ieee754_expf+0x168>)
 80285c2:	4413      	add	r3, r2
 80285c4:	ed93 7a00 	vldr	s14, [r3]
 80285c8:	4b42      	ldr	r3, [pc, #264]	@ (80286d4 <__ieee754_expf+0x16c>)
 80285ca:	4413      	add	r3, r2
 80285cc:	ee30 7a47 	vsub.f32	s14, s0, s14
 80285d0:	f1c1 0201 	rsb	r2, r1, #1
 80285d4:	edd3 7a00 	vldr	s15, [r3]
 80285d8:	1a52      	subs	r2, r2, r1
 80285da:	ee37 0a67 	vsub.f32	s0, s14, s15
 80285de:	ee20 6a00 	vmul.f32	s12, s0, s0
 80285e2:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 80286d8 <__ieee754_expf+0x170>
 80285e6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80286dc <__ieee754_expf+0x174>
 80285ea:	eee6 6a05 	vfma.f32	s13, s12, s10
 80285ee:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 80286e0 <__ieee754_expf+0x178>
 80285f2:	eea6 5a86 	vfma.f32	s10, s13, s12
 80285f6:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80286e4 <__ieee754_expf+0x17c>
 80285fa:	eee5 6a06 	vfma.f32	s13, s10, s12
 80285fe:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 80286e8 <__ieee754_expf+0x180>
 8028602:	eea6 5a86 	vfma.f32	s10, s13, s12
 8028606:	eef0 6a40 	vmov.f32	s13, s0
 802860a:	eee5 6a46 	vfms.f32	s13, s10, s12
 802860e:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8028612:	ee20 5a26 	vmul.f32	s10, s0, s13
 8028616:	bb92      	cbnz	r2, 802867e <__ieee754_expf+0x116>
 8028618:	ee76 6ac6 	vsub.f32	s13, s13, s12
 802861c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8028620:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8028624:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8028628:	4770      	bx	lr
 802862a:	4b30      	ldr	r3, [pc, #192]	@ (80286ec <__ieee754_expf+0x184>)
 802862c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80286f0 <__ieee754_expf+0x188>
 8028630:	eddf 6a30 	vldr	s13, [pc, #192]	@ 80286f4 <__ieee754_expf+0x18c>
 8028634:	4413      	add	r3, r2
 8028636:	edd3 7a00 	vldr	s15, [r3]
 802863a:	eee0 7a07 	vfma.f32	s15, s0, s14
 802863e:	eeb0 7a40 	vmov.f32	s14, s0
 8028642:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8028646:	ee17 2a90 	vmov	r2, s15
 802864a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802864e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8028652:	eddf 6a29 	vldr	s13, [pc, #164]	@ 80286f8 <__ieee754_expf+0x190>
 8028656:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802865a:	e7be      	b.n	80285da <__ieee754_expf+0x72>
 802865c:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 8028660:	d20b      	bcs.n	802867a <__ieee754_expf+0x112>
 8028662:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80286fc <__ieee754_expf+0x194>
 8028666:	ee70 6a26 	vadd.f32	s13, s0, s13
 802866a:	eef4 6ae5 	vcmpe.f32	s13, s11
 802866e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028672:	dd02      	ble.n	802867a <__ieee754_expf+0x112>
 8028674:	ee30 0a25 	vadd.f32	s0, s0, s11
 8028678:	4770      	bx	lr
 802867a:	2200      	movs	r2, #0
 802867c:	e7af      	b.n	80285de <__ieee754_expf+0x76>
 802867e:	ee36 6a66 	vsub.f32	s12, s12, s13
 8028682:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 8028686:	eec5 6a06 	vdiv.f32	s13, s10, s12
 802868a:	bfb8      	it	lt
 802868c:	3264      	addlt	r2, #100	@ 0x64
 802868e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8028692:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8028696:	ee75 7ae7 	vsub.f32	s15, s11, s15
 802869a:	ee17 3a90 	vmov	r3, s15
 802869e:	bfab      	itete	ge
 80286a0:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80286a4:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80286a8:	ee00 3a10 	vmovge	s0, r3
 80286ac:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 8028700 <__ieee754_expf+0x198>
 80286b0:	bfbc      	itt	lt
 80286b2:	ee00 3a10 	vmovlt	s0, r3
 80286b6:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80286ba:	4770      	bx	lr
 80286bc:	00000000 	.word	0x00000000
 80286c0:	42b17217 	.word	0x42b17217
 80286c4:	42cff1b5 	.word	0x42cff1b5
 80286c8:	3eb17218 	.word	0x3eb17218
 80286cc:	3f851591 	.word	0x3f851591
 80286d0:	08044c90 	.word	0x08044c90
 80286d4:	08044c88 	.word	0x08044c88
 80286d8:	3331bb4c 	.word	0x3331bb4c
 80286dc:	b5ddea0e 	.word	0xb5ddea0e
 80286e0:	388ab355 	.word	0x388ab355
 80286e4:	bb360b61 	.word	0xbb360b61
 80286e8:	3e2aaaab 	.word	0x3e2aaaab
 80286ec:	08044c98 	.word	0x08044c98
 80286f0:	3fb8aa3b 	.word	0x3fb8aa3b
 80286f4:	3f317180 	.word	0x3f317180
 80286f8:	3717f7d1 	.word	0x3717f7d1
 80286fc:	7149f2ca 	.word	0x7149f2ca
 8028700:	0d800000 	.word	0x0d800000
 8028704:	00000000 	.word	0x00000000

08028708 <scalbn>:
 8028708:	b570      	push	{r4, r5, r6, lr}
 802870a:	ec55 4b10 	vmov	r4, r5, d0
 802870e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8028712:	4606      	mov	r6, r0
 8028714:	462b      	mov	r3, r5
 8028716:	b991      	cbnz	r1, 802873e <scalbn+0x36>
 8028718:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 802871c:	4323      	orrs	r3, r4
 802871e:	d03d      	beq.n	802879c <scalbn+0x94>
 8028720:	4b35      	ldr	r3, [pc, #212]	@ (80287f8 <scalbn+0xf0>)
 8028722:	4620      	mov	r0, r4
 8028724:	4629      	mov	r1, r5
 8028726:	2200      	movs	r2, #0
 8028728:	f7f1 fa66 	bl	8019bf8 <__aeabi_dmul>
 802872c:	4b33      	ldr	r3, [pc, #204]	@ (80287fc <scalbn+0xf4>)
 802872e:	429e      	cmp	r6, r3
 8028730:	4604      	mov	r4, r0
 8028732:	460d      	mov	r5, r1
 8028734:	da0f      	bge.n	8028756 <scalbn+0x4e>
 8028736:	a328      	add	r3, pc, #160	@ (adr r3, 80287d8 <scalbn+0xd0>)
 8028738:	e9d3 2300 	ldrd	r2, r3, [r3]
 802873c:	e01e      	b.n	802877c <scalbn+0x74>
 802873e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8028742:	4291      	cmp	r1, r2
 8028744:	d10b      	bne.n	802875e <scalbn+0x56>
 8028746:	4622      	mov	r2, r4
 8028748:	4620      	mov	r0, r4
 802874a:	4629      	mov	r1, r5
 802874c:	f7f1 f89e 	bl	801988c <__adddf3>
 8028750:	4604      	mov	r4, r0
 8028752:	460d      	mov	r5, r1
 8028754:	e022      	b.n	802879c <scalbn+0x94>
 8028756:	460b      	mov	r3, r1
 8028758:	f3c1 510a 	ubfx	r1, r1, #20, #11
 802875c:	3936      	subs	r1, #54	@ 0x36
 802875e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8028762:	4296      	cmp	r6, r2
 8028764:	dd0d      	ble.n	8028782 <scalbn+0x7a>
 8028766:	2d00      	cmp	r5, #0
 8028768:	a11d      	add	r1, pc, #116	@ (adr r1, 80287e0 <scalbn+0xd8>)
 802876a:	e9d1 0100 	ldrd	r0, r1, [r1]
 802876e:	da02      	bge.n	8028776 <scalbn+0x6e>
 8028770:	a11d      	add	r1, pc, #116	@ (adr r1, 80287e8 <scalbn+0xe0>)
 8028772:	e9d1 0100 	ldrd	r0, r1, [r1]
 8028776:	a31a      	add	r3, pc, #104	@ (adr r3, 80287e0 <scalbn+0xd8>)
 8028778:	e9d3 2300 	ldrd	r2, r3, [r3]
 802877c:	f7f1 fa3c 	bl	8019bf8 <__aeabi_dmul>
 8028780:	e7e6      	b.n	8028750 <scalbn+0x48>
 8028782:	1872      	adds	r2, r6, r1
 8028784:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8028788:	428a      	cmp	r2, r1
 802878a:	dcec      	bgt.n	8028766 <scalbn+0x5e>
 802878c:	2a00      	cmp	r2, #0
 802878e:	dd08      	ble.n	80287a2 <scalbn+0x9a>
 8028790:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8028794:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8028798:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 802879c:	ec45 4b10 	vmov	d0, r4, r5
 80287a0:	bd70      	pop	{r4, r5, r6, pc}
 80287a2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80287a6:	da08      	bge.n	80287ba <scalbn+0xb2>
 80287a8:	2d00      	cmp	r5, #0
 80287aa:	a10b      	add	r1, pc, #44	@ (adr r1, 80287d8 <scalbn+0xd0>)
 80287ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80287b0:	dac1      	bge.n	8028736 <scalbn+0x2e>
 80287b2:	a10f      	add	r1, pc, #60	@ (adr r1, 80287f0 <scalbn+0xe8>)
 80287b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80287b8:	e7bd      	b.n	8028736 <scalbn+0x2e>
 80287ba:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80287be:	3236      	adds	r2, #54	@ 0x36
 80287c0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80287c4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80287c8:	4620      	mov	r0, r4
 80287ca:	4b0d      	ldr	r3, [pc, #52]	@ (8028800 <scalbn+0xf8>)
 80287cc:	4629      	mov	r1, r5
 80287ce:	2200      	movs	r2, #0
 80287d0:	e7d4      	b.n	802877c <scalbn+0x74>
 80287d2:	bf00      	nop
 80287d4:	f3af 8000 	nop.w
 80287d8:	c2f8f359 	.word	0xc2f8f359
 80287dc:	01a56e1f 	.word	0x01a56e1f
 80287e0:	8800759c 	.word	0x8800759c
 80287e4:	7e37e43c 	.word	0x7e37e43c
 80287e8:	8800759c 	.word	0x8800759c
 80287ec:	fe37e43c 	.word	0xfe37e43c
 80287f0:	c2f8f359 	.word	0xc2f8f359
 80287f4:	81a56e1f 	.word	0x81a56e1f
 80287f8:	43500000 	.word	0x43500000
 80287fc:	ffff3cb0 	.word	0xffff3cb0
 8028800:	3c900000 	.word	0x3c900000
 8028804:	00000000 	.word	0x00000000

08028808 <__kernel_rem_pio2>:
 8028808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802880c:	ed2d 8b02 	vpush	{d8}
 8028810:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8028814:	f112 0f14 	cmn.w	r2, #20
 8028818:	9306      	str	r3, [sp, #24]
 802881a:	9104      	str	r1, [sp, #16]
 802881c:	4bbe      	ldr	r3, [pc, #760]	@ (8028b18 <__kernel_rem_pio2+0x310>)
 802881e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8028820:	9008      	str	r0, [sp, #32]
 8028822:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8028826:	9300      	str	r3, [sp, #0]
 8028828:	9b06      	ldr	r3, [sp, #24]
 802882a:	f103 33ff 	add.w	r3, r3, #4294967295
 802882e:	bfa8      	it	ge
 8028830:	1ed4      	subge	r4, r2, #3
 8028832:	9305      	str	r3, [sp, #20]
 8028834:	bfb2      	itee	lt
 8028836:	2400      	movlt	r4, #0
 8028838:	2318      	movge	r3, #24
 802883a:	fb94 f4f3 	sdivge	r4, r4, r3
 802883e:	f06f 0317 	mvn.w	r3, #23
 8028842:	fb04 3303 	mla	r3, r4, r3, r3
 8028846:	eb03 0b02 	add.w	fp, r3, r2
 802884a:	9b00      	ldr	r3, [sp, #0]
 802884c:	9a05      	ldr	r2, [sp, #20]
 802884e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8028b08 <__kernel_rem_pio2+0x300>
 8028852:	eb03 0802 	add.w	r8, r3, r2
 8028856:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8028858:	1aa7      	subs	r7, r4, r2
 802885a:	ae20      	add	r6, sp, #128	@ 0x80
 802885c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8028860:	2500      	movs	r5, #0
 8028862:	4545      	cmp	r5, r8
 8028864:	dd13      	ble.n	802888e <__kernel_rem_pio2+0x86>
 8028866:	9b06      	ldr	r3, [sp, #24]
 8028868:	aa20      	add	r2, sp, #128	@ 0x80
 802886a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 802886e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8028872:	f04f 0800 	mov.w	r8, #0
 8028876:	9b00      	ldr	r3, [sp, #0]
 8028878:	4598      	cmp	r8, r3
 802887a:	dc31      	bgt.n	80288e0 <__kernel_rem_pio2+0xd8>
 802887c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8028b08 <__kernel_rem_pio2+0x300>
 8028880:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8028884:	ed8d 7b02 	vstr	d7, [sp, #8]
 8028888:	462f      	mov	r7, r5
 802888a:	2600      	movs	r6, #0
 802888c:	e01b      	b.n	80288c6 <__kernel_rem_pio2+0xbe>
 802888e:	42ef      	cmn	r7, r5
 8028890:	d407      	bmi.n	80288a2 <__kernel_rem_pio2+0x9a>
 8028892:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8028896:	f7f1 f945 	bl	8019b24 <__aeabi_i2d>
 802889a:	e8e6 0102 	strd	r0, r1, [r6], #8
 802889e:	3501      	adds	r5, #1
 80288a0:	e7df      	b.n	8028862 <__kernel_rem_pio2+0x5a>
 80288a2:	ec51 0b18 	vmov	r0, r1, d8
 80288a6:	e7f8      	b.n	802889a <__kernel_rem_pio2+0x92>
 80288a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80288ac:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80288b0:	f7f1 f9a2 	bl	8019bf8 <__aeabi_dmul>
 80288b4:	4602      	mov	r2, r0
 80288b6:	460b      	mov	r3, r1
 80288b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80288bc:	f7f0 ffe6 	bl	801988c <__adddf3>
 80288c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80288c4:	3601      	adds	r6, #1
 80288c6:	9b05      	ldr	r3, [sp, #20]
 80288c8:	429e      	cmp	r6, r3
 80288ca:	f1a7 0708 	sub.w	r7, r7, #8
 80288ce:	ddeb      	ble.n	80288a8 <__kernel_rem_pio2+0xa0>
 80288d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80288d4:	f108 0801 	add.w	r8, r8, #1
 80288d8:	ecaa 7b02 	vstmia	sl!, {d7}
 80288dc:	3508      	adds	r5, #8
 80288de:	e7ca      	b.n	8028876 <__kernel_rem_pio2+0x6e>
 80288e0:	9b00      	ldr	r3, [sp, #0]
 80288e2:	f8dd 8000 	ldr.w	r8, [sp]
 80288e6:	aa0c      	add	r2, sp, #48	@ 0x30
 80288e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80288ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80288ee:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80288f0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80288f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80288f6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80288fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80288fc:	ab98      	add	r3, sp, #608	@ 0x260
 80288fe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8028902:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8028906:	ed8d 7b02 	vstr	d7, [sp, #8]
 802890a:	ac0c      	add	r4, sp, #48	@ 0x30
 802890c:	ab70      	add	r3, sp, #448	@ 0x1c0
 802890e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8028912:	46a1      	mov	r9, r4
 8028914:	46c2      	mov	sl, r8
 8028916:	f1ba 0f00 	cmp.w	sl, #0
 802891a:	f1a5 0508 	sub.w	r5, r5, #8
 802891e:	dc77      	bgt.n	8028a10 <__kernel_rem_pio2+0x208>
 8028920:	4658      	mov	r0, fp
 8028922:	ed9d 0b02 	vldr	d0, [sp, #8]
 8028926:	f7ff feef 	bl	8028708 <scalbn>
 802892a:	ec57 6b10 	vmov	r6, r7, d0
 802892e:	2200      	movs	r2, #0
 8028930:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8028934:	4630      	mov	r0, r6
 8028936:	4639      	mov	r1, r7
 8028938:	f7f1 f95e 	bl	8019bf8 <__aeabi_dmul>
 802893c:	ec41 0b10 	vmov	d0, r0, r1
 8028940:	f000 faba 	bl	8028eb8 <floor>
 8028944:	4b75      	ldr	r3, [pc, #468]	@ (8028b1c <__kernel_rem_pio2+0x314>)
 8028946:	ec51 0b10 	vmov	r0, r1, d0
 802894a:	2200      	movs	r2, #0
 802894c:	f7f1 f954 	bl	8019bf8 <__aeabi_dmul>
 8028950:	4602      	mov	r2, r0
 8028952:	460b      	mov	r3, r1
 8028954:	4630      	mov	r0, r6
 8028956:	4639      	mov	r1, r7
 8028958:	f7f0 ff96 	bl	8019888 <__aeabi_dsub>
 802895c:	460f      	mov	r7, r1
 802895e:	4606      	mov	r6, r0
 8028960:	f7f1 fbfa 	bl	801a158 <__aeabi_d2iz>
 8028964:	9002      	str	r0, [sp, #8]
 8028966:	f7f1 f8dd 	bl	8019b24 <__aeabi_i2d>
 802896a:	4602      	mov	r2, r0
 802896c:	460b      	mov	r3, r1
 802896e:	4630      	mov	r0, r6
 8028970:	4639      	mov	r1, r7
 8028972:	f7f0 ff89 	bl	8019888 <__aeabi_dsub>
 8028976:	f1bb 0f00 	cmp.w	fp, #0
 802897a:	4606      	mov	r6, r0
 802897c:	460f      	mov	r7, r1
 802897e:	dd6c      	ble.n	8028a5a <__kernel_rem_pio2+0x252>
 8028980:	f108 31ff 	add.w	r1, r8, #4294967295
 8028984:	ab0c      	add	r3, sp, #48	@ 0x30
 8028986:	9d02      	ldr	r5, [sp, #8]
 8028988:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 802898c:	f1cb 0018 	rsb	r0, fp, #24
 8028990:	fa43 f200 	asr.w	r2, r3, r0
 8028994:	4415      	add	r5, r2
 8028996:	4082      	lsls	r2, r0
 8028998:	1a9b      	subs	r3, r3, r2
 802899a:	aa0c      	add	r2, sp, #48	@ 0x30
 802899c:	9502      	str	r5, [sp, #8]
 802899e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80289a2:	f1cb 0217 	rsb	r2, fp, #23
 80289a6:	fa43 f902 	asr.w	r9, r3, r2
 80289aa:	f1b9 0f00 	cmp.w	r9, #0
 80289ae:	dd64      	ble.n	8028a7a <__kernel_rem_pio2+0x272>
 80289b0:	9b02      	ldr	r3, [sp, #8]
 80289b2:	2200      	movs	r2, #0
 80289b4:	3301      	adds	r3, #1
 80289b6:	9302      	str	r3, [sp, #8]
 80289b8:	4615      	mov	r5, r2
 80289ba:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80289be:	4590      	cmp	r8, r2
 80289c0:	f300 80b8 	bgt.w	8028b34 <__kernel_rem_pio2+0x32c>
 80289c4:	f1bb 0f00 	cmp.w	fp, #0
 80289c8:	dd07      	ble.n	80289da <__kernel_rem_pio2+0x1d2>
 80289ca:	f1bb 0f01 	cmp.w	fp, #1
 80289ce:	f000 80bf 	beq.w	8028b50 <__kernel_rem_pio2+0x348>
 80289d2:	f1bb 0f02 	cmp.w	fp, #2
 80289d6:	f000 80c6 	beq.w	8028b66 <__kernel_rem_pio2+0x35e>
 80289da:	f1b9 0f02 	cmp.w	r9, #2
 80289de:	d14c      	bne.n	8028a7a <__kernel_rem_pio2+0x272>
 80289e0:	4632      	mov	r2, r6
 80289e2:	463b      	mov	r3, r7
 80289e4:	494e      	ldr	r1, [pc, #312]	@ (8028b20 <__kernel_rem_pio2+0x318>)
 80289e6:	2000      	movs	r0, #0
 80289e8:	f7f0 ff4e 	bl	8019888 <__aeabi_dsub>
 80289ec:	4606      	mov	r6, r0
 80289ee:	460f      	mov	r7, r1
 80289f0:	2d00      	cmp	r5, #0
 80289f2:	d042      	beq.n	8028a7a <__kernel_rem_pio2+0x272>
 80289f4:	4658      	mov	r0, fp
 80289f6:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8028b10 <__kernel_rem_pio2+0x308>
 80289fa:	f7ff fe85 	bl	8028708 <scalbn>
 80289fe:	4630      	mov	r0, r6
 8028a00:	4639      	mov	r1, r7
 8028a02:	ec53 2b10 	vmov	r2, r3, d0
 8028a06:	f7f0 ff3f 	bl	8019888 <__aeabi_dsub>
 8028a0a:	4606      	mov	r6, r0
 8028a0c:	460f      	mov	r7, r1
 8028a0e:	e034      	b.n	8028a7a <__kernel_rem_pio2+0x272>
 8028a10:	4b44      	ldr	r3, [pc, #272]	@ (8028b24 <__kernel_rem_pio2+0x31c>)
 8028a12:	2200      	movs	r2, #0
 8028a14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8028a18:	f7f1 f8ee 	bl	8019bf8 <__aeabi_dmul>
 8028a1c:	f7f1 fb9c 	bl	801a158 <__aeabi_d2iz>
 8028a20:	f7f1 f880 	bl	8019b24 <__aeabi_i2d>
 8028a24:	4b40      	ldr	r3, [pc, #256]	@ (8028b28 <__kernel_rem_pio2+0x320>)
 8028a26:	2200      	movs	r2, #0
 8028a28:	4606      	mov	r6, r0
 8028a2a:	460f      	mov	r7, r1
 8028a2c:	f7f1 f8e4 	bl	8019bf8 <__aeabi_dmul>
 8028a30:	4602      	mov	r2, r0
 8028a32:	460b      	mov	r3, r1
 8028a34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8028a38:	f7f0 ff26 	bl	8019888 <__aeabi_dsub>
 8028a3c:	f7f1 fb8c 	bl	801a158 <__aeabi_d2iz>
 8028a40:	e9d5 2300 	ldrd	r2, r3, [r5]
 8028a44:	f849 0b04 	str.w	r0, [r9], #4
 8028a48:	4639      	mov	r1, r7
 8028a4a:	4630      	mov	r0, r6
 8028a4c:	f7f0 ff1e 	bl	801988c <__adddf3>
 8028a50:	f10a 3aff 	add.w	sl, sl, #4294967295
 8028a54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8028a58:	e75d      	b.n	8028916 <__kernel_rem_pio2+0x10e>
 8028a5a:	d107      	bne.n	8028a6c <__kernel_rem_pio2+0x264>
 8028a5c:	f108 33ff 	add.w	r3, r8, #4294967295
 8028a60:	aa0c      	add	r2, sp, #48	@ 0x30
 8028a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8028a66:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8028a6a:	e79e      	b.n	80289aa <__kernel_rem_pio2+0x1a2>
 8028a6c:	4b2f      	ldr	r3, [pc, #188]	@ (8028b2c <__kernel_rem_pio2+0x324>)
 8028a6e:	2200      	movs	r2, #0
 8028a70:	f7f1 fb48 	bl	801a104 <__aeabi_dcmpge>
 8028a74:	2800      	cmp	r0, #0
 8028a76:	d143      	bne.n	8028b00 <__kernel_rem_pio2+0x2f8>
 8028a78:	4681      	mov	r9, r0
 8028a7a:	2200      	movs	r2, #0
 8028a7c:	2300      	movs	r3, #0
 8028a7e:	4630      	mov	r0, r6
 8028a80:	4639      	mov	r1, r7
 8028a82:	f7f1 fb21 	bl	801a0c8 <__aeabi_dcmpeq>
 8028a86:	2800      	cmp	r0, #0
 8028a88:	f000 80bf 	beq.w	8028c0a <__kernel_rem_pio2+0x402>
 8028a8c:	f108 33ff 	add.w	r3, r8, #4294967295
 8028a90:	2200      	movs	r2, #0
 8028a92:	9900      	ldr	r1, [sp, #0]
 8028a94:	428b      	cmp	r3, r1
 8028a96:	da6e      	bge.n	8028b76 <__kernel_rem_pio2+0x36e>
 8028a98:	2a00      	cmp	r2, #0
 8028a9a:	f000 8089 	beq.w	8028bb0 <__kernel_rem_pio2+0x3a8>
 8028a9e:	f108 38ff 	add.w	r8, r8, #4294967295
 8028aa2:	ab0c      	add	r3, sp, #48	@ 0x30
 8028aa4:	f1ab 0b18 	sub.w	fp, fp, #24
 8028aa8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8028aac:	2b00      	cmp	r3, #0
 8028aae:	d0f6      	beq.n	8028a9e <__kernel_rem_pio2+0x296>
 8028ab0:	4658      	mov	r0, fp
 8028ab2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8028b10 <__kernel_rem_pio2+0x308>
 8028ab6:	f7ff fe27 	bl	8028708 <scalbn>
 8028aba:	f108 0301 	add.w	r3, r8, #1
 8028abe:	00da      	lsls	r2, r3, #3
 8028ac0:	9205      	str	r2, [sp, #20]
 8028ac2:	ec55 4b10 	vmov	r4, r5, d0
 8028ac6:	aa70      	add	r2, sp, #448	@ 0x1c0
 8028ac8:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8028b24 <__kernel_rem_pio2+0x31c>
 8028acc:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8028ad0:	4646      	mov	r6, r8
 8028ad2:	f04f 0a00 	mov.w	sl, #0
 8028ad6:	2e00      	cmp	r6, #0
 8028ad8:	f280 80cf 	bge.w	8028c7a <__kernel_rem_pio2+0x472>
 8028adc:	4644      	mov	r4, r8
 8028ade:	2c00      	cmp	r4, #0
 8028ae0:	f2c0 80fd 	blt.w	8028cde <__kernel_rem_pio2+0x4d6>
 8028ae4:	4b12      	ldr	r3, [pc, #72]	@ (8028b30 <__kernel_rem_pio2+0x328>)
 8028ae6:	461f      	mov	r7, r3
 8028ae8:	ab70      	add	r3, sp, #448	@ 0x1c0
 8028aea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8028aee:	9306      	str	r3, [sp, #24]
 8028af0:	f04f 0a00 	mov.w	sl, #0
 8028af4:	f04f 0b00 	mov.w	fp, #0
 8028af8:	2600      	movs	r6, #0
 8028afa:	eba8 0504 	sub.w	r5, r8, r4
 8028afe:	e0e2      	b.n	8028cc6 <__kernel_rem_pio2+0x4be>
 8028b00:	f04f 0902 	mov.w	r9, #2
 8028b04:	e754      	b.n	80289b0 <__kernel_rem_pio2+0x1a8>
 8028b06:	bf00      	nop
	...
 8028b14:	3ff00000 	.word	0x3ff00000
 8028b18:	08044ce0 	.word	0x08044ce0
 8028b1c:	40200000 	.word	0x40200000
 8028b20:	3ff00000 	.word	0x3ff00000
 8028b24:	3e700000 	.word	0x3e700000
 8028b28:	41700000 	.word	0x41700000
 8028b2c:	3fe00000 	.word	0x3fe00000
 8028b30:	08044ca0 	.word	0x08044ca0
 8028b34:	f854 3b04 	ldr.w	r3, [r4], #4
 8028b38:	b945      	cbnz	r5, 8028b4c <__kernel_rem_pio2+0x344>
 8028b3a:	b123      	cbz	r3, 8028b46 <__kernel_rem_pio2+0x33e>
 8028b3c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8028b40:	f844 3c04 	str.w	r3, [r4, #-4]
 8028b44:	2301      	movs	r3, #1
 8028b46:	3201      	adds	r2, #1
 8028b48:	461d      	mov	r5, r3
 8028b4a:	e738      	b.n	80289be <__kernel_rem_pio2+0x1b6>
 8028b4c:	1acb      	subs	r3, r1, r3
 8028b4e:	e7f7      	b.n	8028b40 <__kernel_rem_pio2+0x338>
 8028b50:	f108 32ff 	add.w	r2, r8, #4294967295
 8028b54:	ab0c      	add	r3, sp, #48	@ 0x30
 8028b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8028b5a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8028b5e:	a90c      	add	r1, sp, #48	@ 0x30
 8028b60:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8028b64:	e739      	b.n	80289da <__kernel_rem_pio2+0x1d2>
 8028b66:	f108 32ff 	add.w	r2, r8, #4294967295
 8028b6a:	ab0c      	add	r3, sp, #48	@ 0x30
 8028b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8028b70:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8028b74:	e7f3      	b.n	8028b5e <__kernel_rem_pio2+0x356>
 8028b76:	a90c      	add	r1, sp, #48	@ 0x30
 8028b78:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8028b7c:	3b01      	subs	r3, #1
 8028b7e:	430a      	orrs	r2, r1
 8028b80:	e787      	b.n	8028a92 <__kernel_rem_pio2+0x28a>
 8028b82:	3401      	adds	r4, #1
 8028b84:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8028b88:	2a00      	cmp	r2, #0
 8028b8a:	d0fa      	beq.n	8028b82 <__kernel_rem_pio2+0x37a>
 8028b8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8028b8e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8028b92:	eb0d 0503 	add.w	r5, sp, r3
 8028b96:	9b06      	ldr	r3, [sp, #24]
 8028b98:	aa20      	add	r2, sp, #128	@ 0x80
 8028b9a:	4443      	add	r3, r8
 8028b9c:	f108 0701 	add.w	r7, r8, #1
 8028ba0:	3d98      	subs	r5, #152	@ 0x98
 8028ba2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8028ba6:	4444      	add	r4, r8
 8028ba8:	42bc      	cmp	r4, r7
 8028baa:	da04      	bge.n	8028bb6 <__kernel_rem_pio2+0x3ae>
 8028bac:	46a0      	mov	r8, r4
 8028bae:	e6a2      	b.n	80288f6 <__kernel_rem_pio2+0xee>
 8028bb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028bb2:	2401      	movs	r4, #1
 8028bb4:	e7e6      	b.n	8028b84 <__kernel_rem_pio2+0x37c>
 8028bb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028bb8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8028bbc:	f7f0 ffb2 	bl	8019b24 <__aeabi_i2d>
 8028bc0:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8028e88 <__kernel_rem_pio2+0x680>
 8028bc4:	e8e6 0102 	strd	r0, r1, [r6], #8
 8028bc8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8028bcc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8028bd0:	46b2      	mov	sl, r6
 8028bd2:	f04f 0800 	mov.w	r8, #0
 8028bd6:	9b05      	ldr	r3, [sp, #20]
 8028bd8:	4598      	cmp	r8, r3
 8028bda:	dd05      	ble.n	8028be8 <__kernel_rem_pio2+0x3e0>
 8028bdc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8028be0:	3701      	adds	r7, #1
 8028be2:	eca5 7b02 	vstmia	r5!, {d7}
 8028be6:	e7df      	b.n	8028ba8 <__kernel_rem_pio2+0x3a0>
 8028be8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8028bec:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8028bf0:	f7f1 f802 	bl	8019bf8 <__aeabi_dmul>
 8028bf4:	4602      	mov	r2, r0
 8028bf6:	460b      	mov	r3, r1
 8028bf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8028bfc:	f7f0 fe46 	bl	801988c <__adddf3>
 8028c00:	f108 0801 	add.w	r8, r8, #1
 8028c04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8028c08:	e7e5      	b.n	8028bd6 <__kernel_rem_pio2+0x3ce>
 8028c0a:	f1cb 0000 	rsb	r0, fp, #0
 8028c0e:	ec47 6b10 	vmov	d0, r6, r7
 8028c12:	f7ff fd79 	bl	8028708 <scalbn>
 8028c16:	ec55 4b10 	vmov	r4, r5, d0
 8028c1a:	4b9d      	ldr	r3, [pc, #628]	@ (8028e90 <__kernel_rem_pio2+0x688>)
 8028c1c:	2200      	movs	r2, #0
 8028c1e:	4620      	mov	r0, r4
 8028c20:	4629      	mov	r1, r5
 8028c22:	f7f1 fa6f 	bl	801a104 <__aeabi_dcmpge>
 8028c26:	b300      	cbz	r0, 8028c6a <__kernel_rem_pio2+0x462>
 8028c28:	4b9a      	ldr	r3, [pc, #616]	@ (8028e94 <__kernel_rem_pio2+0x68c>)
 8028c2a:	2200      	movs	r2, #0
 8028c2c:	4620      	mov	r0, r4
 8028c2e:	4629      	mov	r1, r5
 8028c30:	f7f0 ffe2 	bl	8019bf8 <__aeabi_dmul>
 8028c34:	f7f1 fa90 	bl	801a158 <__aeabi_d2iz>
 8028c38:	4606      	mov	r6, r0
 8028c3a:	f7f0 ff73 	bl	8019b24 <__aeabi_i2d>
 8028c3e:	4b94      	ldr	r3, [pc, #592]	@ (8028e90 <__kernel_rem_pio2+0x688>)
 8028c40:	2200      	movs	r2, #0
 8028c42:	f7f0 ffd9 	bl	8019bf8 <__aeabi_dmul>
 8028c46:	460b      	mov	r3, r1
 8028c48:	4602      	mov	r2, r0
 8028c4a:	4629      	mov	r1, r5
 8028c4c:	4620      	mov	r0, r4
 8028c4e:	f7f0 fe1b 	bl	8019888 <__aeabi_dsub>
 8028c52:	f7f1 fa81 	bl	801a158 <__aeabi_d2iz>
 8028c56:	ab0c      	add	r3, sp, #48	@ 0x30
 8028c58:	f10b 0b18 	add.w	fp, fp, #24
 8028c5c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8028c60:	f108 0801 	add.w	r8, r8, #1
 8028c64:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8028c68:	e722      	b.n	8028ab0 <__kernel_rem_pio2+0x2a8>
 8028c6a:	4620      	mov	r0, r4
 8028c6c:	4629      	mov	r1, r5
 8028c6e:	f7f1 fa73 	bl	801a158 <__aeabi_d2iz>
 8028c72:	ab0c      	add	r3, sp, #48	@ 0x30
 8028c74:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8028c78:	e71a      	b.n	8028ab0 <__kernel_rem_pio2+0x2a8>
 8028c7a:	ab0c      	add	r3, sp, #48	@ 0x30
 8028c7c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8028c80:	f7f0 ff50 	bl	8019b24 <__aeabi_i2d>
 8028c84:	4622      	mov	r2, r4
 8028c86:	462b      	mov	r3, r5
 8028c88:	f7f0 ffb6 	bl	8019bf8 <__aeabi_dmul>
 8028c8c:	4652      	mov	r2, sl
 8028c8e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8028c92:	465b      	mov	r3, fp
 8028c94:	4620      	mov	r0, r4
 8028c96:	4629      	mov	r1, r5
 8028c98:	f7f0 ffae 	bl	8019bf8 <__aeabi_dmul>
 8028c9c:	3e01      	subs	r6, #1
 8028c9e:	4604      	mov	r4, r0
 8028ca0:	460d      	mov	r5, r1
 8028ca2:	e718      	b.n	8028ad6 <__kernel_rem_pio2+0x2ce>
 8028ca4:	9906      	ldr	r1, [sp, #24]
 8028ca6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8028caa:	9106      	str	r1, [sp, #24]
 8028cac:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8028cb0:	f7f0 ffa2 	bl	8019bf8 <__aeabi_dmul>
 8028cb4:	4602      	mov	r2, r0
 8028cb6:	460b      	mov	r3, r1
 8028cb8:	4650      	mov	r0, sl
 8028cba:	4659      	mov	r1, fp
 8028cbc:	f7f0 fde6 	bl	801988c <__adddf3>
 8028cc0:	3601      	adds	r6, #1
 8028cc2:	4682      	mov	sl, r0
 8028cc4:	468b      	mov	fp, r1
 8028cc6:	9b00      	ldr	r3, [sp, #0]
 8028cc8:	429e      	cmp	r6, r3
 8028cca:	dc01      	bgt.n	8028cd0 <__kernel_rem_pio2+0x4c8>
 8028ccc:	42b5      	cmp	r5, r6
 8028cce:	dae9      	bge.n	8028ca4 <__kernel_rem_pio2+0x49c>
 8028cd0:	ab48      	add	r3, sp, #288	@ 0x120
 8028cd2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8028cd6:	e9c5 ab00 	strd	sl, fp, [r5]
 8028cda:	3c01      	subs	r4, #1
 8028cdc:	e6ff      	b.n	8028ade <__kernel_rem_pio2+0x2d6>
 8028cde:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8028ce0:	2b02      	cmp	r3, #2
 8028ce2:	dc0b      	bgt.n	8028cfc <__kernel_rem_pio2+0x4f4>
 8028ce4:	2b00      	cmp	r3, #0
 8028ce6:	dc39      	bgt.n	8028d5c <__kernel_rem_pio2+0x554>
 8028ce8:	d05d      	beq.n	8028da6 <__kernel_rem_pio2+0x59e>
 8028cea:	9b02      	ldr	r3, [sp, #8]
 8028cec:	f003 0007 	and.w	r0, r3, #7
 8028cf0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8028cf4:	ecbd 8b02 	vpop	{d8}
 8028cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028cfc:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8028cfe:	2b03      	cmp	r3, #3
 8028d00:	d1f3      	bne.n	8028cea <__kernel_rem_pio2+0x4e2>
 8028d02:	9b05      	ldr	r3, [sp, #20]
 8028d04:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8028d08:	eb0d 0403 	add.w	r4, sp, r3
 8028d0c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8028d10:	4625      	mov	r5, r4
 8028d12:	46c2      	mov	sl, r8
 8028d14:	f1ba 0f00 	cmp.w	sl, #0
 8028d18:	f1a5 0508 	sub.w	r5, r5, #8
 8028d1c:	dc6b      	bgt.n	8028df6 <__kernel_rem_pio2+0x5ee>
 8028d1e:	4645      	mov	r5, r8
 8028d20:	2d01      	cmp	r5, #1
 8028d22:	f1a4 0408 	sub.w	r4, r4, #8
 8028d26:	f300 8087 	bgt.w	8028e38 <__kernel_rem_pio2+0x630>
 8028d2a:	9c05      	ldr	r4, [sp, #20]
 8028d2c:	ab48      	add	r3, sp, #288	@ 0x120
 8028d2e:	441c      	add	r4, r3
 8028d30:	2000      	movs	r0, #0
 8028d32:	2100      	movs	r1, #0
 8028d34:	f1b8 0f01 	cmp.w	r8, #1
 8028d38:	f300 809c 	bgt.w	8028e74 <__kernel_rem_pio2+0x66c>
 8028d3c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8028d40:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8028d44:	f1b9 0f00 	cmp.w	r9, #0
 8028d48:	f040 80a6 	bne.w	8028e98 <__kernel_rem_pio2+0x690>
 8028d4c:	9b04      	ldr	r3, [sp, #16]
 8028d4e:	e9c3 7800 	strd	r7, r8, [r3]
 8028d52:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8028d56:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8028d5a:	e7c6      	b.n	8028cea <__kernel_rem_pio2+0x4e2>
 8028d5c:	9d05      	ldr	r5, [sp, #20]
 8028d5e:	ab48      	add	r3, sp, #288	@ 0x120
 8028d60:	441d      	add	r5, r3
 8028d62:	4644      	mov	r4, r8
 8028d64:	2000      	movs	r0, #0
 8028d66:	2100      	movs	r1, #0
 8028d68:	2c00      	cmp	r4, #0
 8028d6a:	da35      	bge.n	8028dd8 <__kernel_rem_pio2+0x5d0>
 8028d6c:	f1b9 0f00 	cmp.w	r9, #0
 8028d70:	d038      	beq.n	8028de4 <__kernel_rem_pio2+0x5dc>
 8028d72:	4602      	mov	r2, r0
 8028d74:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8028d78:	9c04      	ldr	r4, [sp, #16]
 8028d7a:	e9c4 2300 	strd	r2, r3, [r4]
 8028d7e:	4602      	mov	r2, r0
 8028d80:	460b      	mov	r3, r1
 8028d82:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8028d86:	f7f0 fd7f 	bl	8019888 <__aeabi_dsub>
 8028d8a:	ad4a      	add	r5, sp, #296	@ 0x128
 8028d8c:	2401      	movs	r4, #1
 8028d8e:	45a0      	cmp	r8, r4
 8028d90:	da2b      	bge.n	8028dea <__kernel_rem_pio2+0x5e2>
 8028d92:	f1b9 0f00 	cmp.w	r9, #0
 8028d96:	d002      	beq.n	8028d9e <__kernel_rem_pio2+0x596>
 8028d98:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8028d9c:	4619      	mov	r1, r3
 8028d9e:	9b04      	ldr	r3, [sp, #16]
 8028da0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8028da4:	e7a1      	b.n	8028cea <__kernel_rem_pio2+0x4e2>
 8028da6:	9c05      	ldr	r4, [sp, #20]
 8028da8:	ab48      	add	r3, sp, #288	@ 0x120
 8028daa:	441c      	add	r4, r3
 8028dac:	2000      	movs	r0, #0
 8028dae:	2100      	movs	r1, #0
 8028db0:	f1b8 0f00 	cmp.w	r8, #0
 8028db4:	da09      	bge.n	8028dca <__kernel_rem_pio2+0x5c2>
 8028db6:	f1b9 0f00 	cmp.w	r9, #0
 8028dba:	d002      	beq.n	8028dc2 <__kernel_rem_pio2+0x5ba>
 8028dbc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8028dc0:	4619      	mov	r1, r3
 8028dc2:	9b04      	ldr	r3, [sp, #16]
 8028dc4:	e9c3 0100 	strd	r0, r1, [r3]
 8028dc8:	e78f      	b.n	8028cea <__kernel_rem_pio2+0x4e2>
 8028dca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8028dce:	f7f0 fd5d 	bl	801988c <__adddf3>
 8028dd2:	f108 38ff 	add.w	r8, r8, #4294967295
 8028dd6:	e7eb      	b.n	8028db0 <__kernel_rem_pio2+0x5a8>
 8028dd8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8028ddc:	f7f0 fd56 	bl	801988c <__adddf3>
 8028de0:	3c01      	subs	r4, #1
 8028de2:	e7c1      	b.n	8028d68 <__kernel_rem_pio2+0x560>
 8028de4:	4602      	mov	r2, r0
 8028de6:	460b      	mov	r3, r1
 8028de8:	e7c6      	b.n	8028d78 <__kernel_rem_pio2+0x570>
 8028dea:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8028dee:	f7f0 fd4d 	bl	801988c <__adddf3>
 8028df2:	3401      	adds	r4, #1
 8028df4:	e7cb      	b.n	8028d8e <__kernel_rem_pio2+0x586>
 8028df6:	ed95 7b00 	vldr	d7, [r5]
 8028dfa:	ed8d 7b00 	vstr	d7, [sp]
 8028dfe:	ed95 7b02 	vldr	d7, [r5, #8]
 8028e02:	e9dd 0100 	ldrd	r0, r1, [sp]
 8028e06:	ec53 2b17 	vmov	r2, r3, d7
 8028e0a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8028e0e:	f7f0 fd3d 	bl	801988c <__adddf3>
 8028e12:	4602      	mov	r2, r0
 8028e14:	460b      	mov	r3, r1
 8028e16:	4606      	mov	r6, r0
 8028e18:	460f      	mov	r7, r1
 8028e1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8028e1e:	f7f0 fd33 	bl	8019888 <__aeabi_dsub>
 8028e22:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8028e26:	f7f0 fd31 	bl	801988c <__adddf3>
 8028e2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8028e2e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8028e32:	e9c5 6700 	strd	r6, r7, [r5]
 8028e36:	e76d      	b.n	8028d14 <__kernel_rem_pio2+0x50c>
 8028e38:	ed94 7b00 	vldr	d7, [r4]
 8028e3c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8028e40:	ec51 0b17 	vmov	r0, r1, d7
 8028e44:	4652      	mov	r2, sl
 8028e46:	465b      	mov	r3, fp
 8028e48:	ed8d 7b00 	vstr	d7, [sp]
 8028e4c:	f7f0 fd1e 	bl	801988c <__adddf3>
 8028e50:	4602      	mov	r2, r0
 8028e52:	460b      	mov	r3, r1
 8028e54:	4606      	mov	r6, r0
 8028e56:	460f      	mov	r7, r1
 8028e58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8028e5c:	f7f0 fd14 	bl	8019888 <__aeabi_dsub>
 8028e60:	4652      	mov	r2, sl
 8028e62:	465b      	mov	r3, fp
 8028e64:	f7f0 fd12 	bl	801988c <__adddf3>
 8028e68:	3d01      	subs	r5, #1
 8028e6a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8028e6e:	e9c4 6700 	strd	r6, r7, [r4]
 8028e72:	e755      	b.n	8028d20 <__kernel_rem_pio2+0x518>
 8028e74:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8028e78:	f7f0 fd08 	bl	801988c <__adddf3>
 8028e7c:	f108 38ff 	add.w	r8, r8, #4294967295
 8028e80:	e758      	b.n	8028d34 <__kernel_rem_pio2+0x52c>
 8028e82:	bf00      	nop
 8028e84:	f3af 8000 	nop.w
	...
 8028e90:	41700000 	.word	0x41700000
 8028e94:	3e700000 	.word	0x3e700000
 8028e98:	9b04      	ldr	r3, [sp, #16]
 8028e9a:	9a04      	ldr	r2, [sp, #16]
 8028e9c:	601f      	str	r7, [r3, #0]
 8028e9e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8028ea2:	605c      	str	r4, [r3, #4]
 8028ea4:	609d      	str	r5, [r3, #8]
 8028ea6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8028eaa:	60d3      	str	r3, [r2, #12]
 8028eac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8028eb0:	6110      	str	r0, [r2, #16]
 8028eb2:	6153      	str	r3, [r2, #20]
 8028eb4:	e719      	b.n	8028cea <__kernel_rem_pio2+0x4e2>
 8028eb6:	bf00      	nop

08028eb8 <floor>:
 8028eb8:	ec51 0b10 	vmov	r0, r1, d0
 8028ebc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8028ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028ec4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8028ec8:	2e13      	cmp	r6, #19
 8028eca:	460c      	mov	r4, r1
 8028ecc:	4605      	mov	r5, r0
 8028ece:	4680      	mov	r8, r0
 8028ed0:	dc34      	bgt.n	8028f3c <floor+0x84>
 8028ed2:	2e00      	cmp	r6, #0
 8028ed4:	da17      	bge.n	8028f06 <floor+0x4e>
 8028ed6:	a332      	add	r3, pc, #200	@ (adr r3, 8028fa0 <floor+0xe8>)
 8028ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028edc:	f7f0 fcd6 	bl	801988c <__adddf3>
 8028ee0:	2200      	movs	r2, #0
 8028ee2:	2300      	movs	r3, #0
 8028ee4:	f7f1 f918 	bl	801a118 <__aeabi_dcmpgt>
 8028ee8:	b150      	cbz	r0, 8028f00 <floor+0x48>
 8028eea:	2c00      	cmp	r4, #0
 8028eec:	da55      	bge.n	8028f9a <floor+0xe2>
 8028eee:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8028ef2:	432c      	orrs	r4, r5
 8028ef4:	2500      	movs	r5, #0
 8028ef6:	42ac      	cmp	r4, r5
 8028ef8:	4c2b      	ldr	r4, [pc, #172]	@ (8028fa8 <floor+0xf0>)
 8028efa:	bf08      	it	eq
 8028efc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8028f00:	4621      	mov	r1, r4
 8028f02:	4628      	mov	r0, r5
 8028f04:	e023      	b.n	8028f4e <floor+0x96>
 8028f06:	4f29      	ldr	r7, [pc, #164]	@ (8028fac <floor+0xf4>)
 8028f08:	4137      	asrs	r7, r6
 8028f0a:	ea01 0307 	and.w	r3, r1, r7
 8028f0e:	4303      	orrs	r3, r0
 8028f10:	d01d      	beq.n	8028f4e <floor+0x96>
 8028f12:	a323      	add	r3, pc, #140	@ (adr r3, 8028fa0 <floor+0xe8>)
 8028f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028f18:	f7f0 fcb8 	bl	801988c <__adddf3>
 8028f1c:	2200      	movs	r2, #0
 8028f1e:	2300      	movs	r3, #0
 8028f20:	f7f1 f8fa 	bl	801a118 <__aeabi_dcmpgt>
 8028f24:	2800      	cmp	r0, #0
 8028f26:	d0eb      	beq.n	8028f00 <floor+0x48>
 8028f28:	2c00      	cmp	r4, #0
 8028f2a:	bfbe      	ittt	lt
 8028f2c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8028f30:	4133      	asrlt	r3, r6
 8028f32:	18e4      	addlt	r4, r4, r3
 8028f34:	ea24 0407 	bic.w	r4, r4, r7
 8028f38:	2500      	movs	r5, #0
 8028f3a:	e7e1      	b.n	8028f00 <floor+0x48>
 8028f3c:	2e33      	cmp	r6, #51	@ 0x33
 8028f3e:	dd0a      	ble.n	8028f56 <floor+0x9e>
 8028f40:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8028f44:	d103      	bne.n	8028f4e <floor+0x96>
 8028f46:	4602      	mov	r2, r0
 8028f48:	460b      	mov	r3, r1
 8028f4a:	f7f0 fc9f 	bl	801988c <__adddf3>
 8028f4e:	ec41 0b10 	vmov	d0, r0, r1
 8028f52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028f56:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8028f5a:	f04f 37ff 	mov.w	r7, #4294967295
 8028f5e:	40df      	lsrs	r7, r3
 8028f60:	4207      	tst	r7, r0
 8028f62:	d0f4      	beq.n	8028f4e <floor+0x96>
 8028f64:	a30e      	add	r3, pc, #56	@ (adr r3, 8028fa0 <floor+0xe8>)
 8028f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028f6a:	f7f0 fc8f 	bl	801988c <__adddf3>
 8028f6e:	2200      	movs	r2, #0
 8028f70:	2300      	movs	r3, #0
 8028f72:	f7f1 f8d1 	bl	801a118 <__aeabi_dcmpgt>
 8028f76:	2800      	cmp	r0, #0
 8028f78:	d0c2      	beq.n	8028f00 <floor+0x48>
 8028f7a:	2c00      	cmp	r4, #0
 8028f7c:	da0a      	bge.n	8028f94 <floor+0xdc>
 8028f7e:	2e14      	cmp	r6, #20
 8028f80:	d101      	bne.n	8028f86 <floor+0xce>
 8028f82:	3401      	adds	r4, #1
 8028f84:	e006      	b.n	8028f94 <floor+0xdc>
 8028f86:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8028f8a:	2301      	movs	r3, #1
 8028f8c:	40b3      	lsls	r3, r6
 8028f8e:	441d      	add	r5, r3
 8028f90:	4545      	cmp	r5, r8
 8028f92:	d3f6      	bcc.n	8028f82 <floor+0xca>
 8028f94:	ea25 0507 	bic.w	r5, r5, r7
 8028f98:	e7b2      	b.n	8028f00 <floor+0x48>
 8028f9a:	2500      	movs	r5, #0
 8028f9c:	462c      	mov	r4, r5
 8028f9e:	e7af      	b.n	8028f00 <floor+0x48>
 8028fa0:	8800759c 	.word	0x8800759c
 8028fa4:	7e37e43c 	.word	0x7e37e43c
 8028fa8:	bff00000 	.word	0xbff00000
 8028fac:	000fffff 	.word	0x000fffff

08028fb0 <_init>:
 8028fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028fb2:	bf00      	nop
 8028fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028fb6:	bc08      	pop	{r3}
 8028fb8:	469e      	mov	lr, r3
 8028fba:	4770      	bx	lr

08028fbc <_fini>:
 8028fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028fbe:	bf00      	nop
 8028fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028fc2:	bc08      	pop	{r3}
 8028fc4:	469e      	mov	lr, r3
 8028fc6:	4770      	bx	lr
